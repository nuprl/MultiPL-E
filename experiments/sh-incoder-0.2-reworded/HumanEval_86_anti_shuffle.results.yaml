language: sh
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=${#string}\n\
    \  local j=0\n  while [ $i -gt 0 ]; do\n    local c=${string:$i:1}\n    local\
    \ k=0\n    while [ $k -lt $i ]; do\n      local c=${string:$k:1}\n      local\
    \ j=$((k+1))\n      local new_c=${c:0:1}\n      local new_c=${new_c}${new_c:1}\n\
    \      local new_c=${new_c}${c:1}\n      new_string=$new_string${new_c}\n    \
    \  k=$j\n    done\n    i=$((i-1))\n    new_string=$new_string${c}\n  done\n  echo\
    \ $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_length_count=0\n\
    \  local word_length_count2=0\n  local word_length_count3=0\n  local word_length_count4=0\n\
    \  local word_length_count5=0\n  local word_length_count6=0\n  local word_length_count7=0\n\
    \  local word_length_count8=0\n  local word_length_count9=0\n  local word_length_count10=0\n\
    \  local word_length_count11=0\n  local word_length_count12=0\n  local word_length_count13=0\n\
    \  local word_length_count14=0\n  local word_length_count15=0\n  local word_length_count16=0\n\
    \  local word_length_count17=0\n  local word_length_count18=0\n  local word_length_count19=0\n\
    \  local word_length_count20=0\n  local word_length_count21=0\n  local word_length_count22=0\n\
    \  local word_length_count23=0\n  local word_length_count24=0\n  local word_length_count25=0\n\
    \  local word_length_count26=0\n  local word_length_count27=0\n  local word_length_count28=0\n\
    \  local word_length_count29=0\n  local word_length_count30=0\n  local word_length_count31=0\n\
    \  local word_length_count32=0\n  local word_length_count33=0\n  local word_length_count34=0\n\
    \  local word_length_count35=0\n  local word_length_count36=0\n  local word_length_count37=0\n\
    \  local word_length_count38=0\n  local word_length_count39=0\n  local word_length_count40=0\n\
    \  local word_length_count41=0\n  local word_length_count42=0\n  local word_length_count43=0\n\
    \  local word_length_count44=0\n  local word_length_count45=0\n  local word_length_count46=0\n\
    \  local word_length_count47=0\n  local word_length_count48=0\n  local word_length_count49=0\n\
    \  local word_length_count50=0\n  local word_length_count51=0\n  local word_length_count52=0\n\
    \  local word_length_count53=0\n  local word_length_count54=0\n  local word_length_count55=0\n\
    \  local word_length_count56=0\n  local word_length_count57=0\n  local word_length_count58=0\n\
    \  local word_length_count59=0\n  local word_length_count60=0\n  local \n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_list=\"\"\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted_count2=0\n  local word_list_sorted_count3=0\n  local\
    \ word_list_sorted_count4=0\n  local word_list_sorted_count5=0\n  local word_list_sorted_count6=0\n\
    \  local word_list_sorted_count7=0\n  local word_list_sorted_count8=0\n  local\
    \ word_list_sorted_count9=0\n  local word_list_sorted_count10=0\n  local word_list_sorted_count11=0\n\
    \  local word_list_sorted_count12=0\n  local word_list_sorted_count13=0\n  local\
    \ word_list_sorted_count14=0\n  local word_list_sorted_count15=0\n  local word_list_sorted_count16=0\n\
    \  local word_list_sorted_count17=0\n  local word_list_sorted_count18=0\n  local\
    \ word_list_sorted_count19=0\n  local word_list_sorted_count20=0\n  local word_list_sorted_count21=0\n\
    \  local word_list_sorted_count22=0\n  local word_list_sorted_count23=0\n  local\
    \ word_list_sorted_count24=0\n  local word_list_sorted_count25=0\n  local word_list_sorted_count26=0\n\
    \  local word_list_sorted_count27=0\n  local word_list_sorted_count28=0\n  local\
    \ word_list_sorted_count29=0\n  local word_list_sorted_count30=0\n  local word_list_sorted_count31=0\n\
    \  local word_list_sorted_count32=0\n  local word_list_sorted_count33=0\n  local\
    \ word_list_sorted_count34=0\n  local word_list_sorted_count35=0\n  local word_list_sorted_count36=0\n\
    \  local word_list_sorted_count37=0\n  local word_list_sorted_count38=0\n  local\
    \ word_list_sorted_count39=0\n  local word_list_sorted_count40=0\n  local word_list_sorted_count41=0\n\
    \  local word_list_sorted_count42=0\n  local word_list_sorted_count43=0\n  local\
    \ word_list_sorted_count44=0\n  local word_list_sorted_count45=0\n  local word_list_sorted_count46=0\n\
    \  local word_list_sorted_count47=0\n  local word_list_sorted_count48=0\n  local\
    \ word_list_sorted_count49=0\n  local word_list_sorted_count50=0\n  local word_list_sorted_count51=0\n\
    \  local word_list_sorted_count52=0\n  local word_list_sorted_count53=0\n  local\
    \ word_list_sorted_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_length_index=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index_count=0\n    local word_char_length_index_count_index=0\n\
    \    local word_char_length_index_count_index_count=0\n    local word_char_length_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count=0\n    local word_char_length_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0\n\
    \    local word_char_length_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=\"\
    \"\n    local space=\"\"\n    local count=0\n    local index=0\n    local word\n\
    \    local character\n    local character_index\n    local character_index2\n\
    \    local character_index3\n    local character_index4\n    local character_index5\n\
    \    local character_index6\n    local character_index7\n    local character_index8\n\
    \    local character_index9\n    local character_index10\n    local character_index11\n\
    \    local character_index12\n    local character_index13\n    local character_index14\n\
    \    local character_index15\n    local character_index16\n    local character_index17\n\
    \    local character_index18\n    local character_index19\n    local character_index20\n\
    \    local character_index21\n    local character_index22\n    local character_index23\n\
    \    local character_index24\n    local character_index25\n    local character_index26\n\
    \    local character_index27\n    local character_index28\n    local character_index29\n\
    \    local character_index30\n    local character_index31\n    local character_index32\n\
    \    local character_index33\n    local character_index34\n    local character_index35\n\
    \    local character_index36\n    local character_index37\n    local character_index38\n\
    \    local character_index39\n    local character_index40\n    local character_index41\n\
    \    local character_index42\n    local character_index43\n    local character_index44\n\
    \    local character_index45\n    local character_index46\n    local character_index47\n\
    \    local character_index48\n    local character_index49\n    local character_index50\n\
    \    local character_index51\n    local character_index52\n    local character_index53\n\
    \    local character_index54\n    local character_index55\n    local character_index56\n\
    \    local character_index57\n    local character_index58\n    local character_index59\n\
    \    local character_index60\n    local character_index61\n    local character_index62\n\
    \    local character_index63\n    local character_index64\n    local character_index65\n\
    \    local character_index66\n    local character_index67\n    local character_index68\n\
    \    local character_index69\n    local character_index70\n    local character_index71\n\
    \    local character_index72\n    local character_index73\n    local character_index74\n\
    \    local character_index75\n    local character_index76\n    local character_index77\n\
    \    local character_index78\n    local character_index79\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_character\n  local\
    \ word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local letter=${string:$i:1}\n\
    \        local next_letter=${string:$(($i+1)):1}\n        if [ $letter -ne $next_letter\
    \ ]; then\n            new_string=\"$new_string $letter\"\n            i=$(($i+1))\n\
    \        else\n            new_string=\"$new_string $next_letter\"\n         \
    \   j=$(($j+1))\n        fi\n    done\n    echo $new_string\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660044707
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local next_char=${string:$(($i+1)):1}\n        if [ $char -gt $next_char\
    \ ]; then\n            new_string=$new_string$char\n            i=$(($i+1))\n\
    \        else\n            new_string=$new_string$next_char\n            j=$(($j+1))\n\
    \        fi\n    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660044707
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=($string)\n\
    \    local word_count=0\n    local word_length=0\n    local word_index=0\n   \
    \ local word_char_index=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_array=($string)\n    local word_char_length_count=0\n   \
    \ local word_char_length_array=($string)\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_array_index1=0\n    local word_char_length_array_length1=0\n\
    \    local word_char_length_array_index2=0\n    local word_char_length_array_length2=0\n\
    \    local word_char_length_array_index3=0\n    local word_char_length_array_length3=0\n\
    \    local word_char_length_array_index4=0\n    local word_char_length_array_length4=0\n\
    \    local word_char_length_array_index5=0\n    local word_char_length_array_length5=0\n\
    \    local word_char_length_array_index6=0\n    local word_char_length_array_length6=0\n\
    \    local word_char_length_array_index7=0\n    local word_char_length_array_length7=0\n\
    \    local word_char_length_array_index8=0\n    local word_char_length_array_length8=0\n\
    \    local word_char_length_array_index9=0\n    local word_char_length_array_length9=0\n\
    \    local word_char_length_array_index10=0\n    local word_char_length_array_length10=0\n\
    \    local word_char_length_array_index11=0\n    local word_char_length_array_length11=0\n\
    \    local word_char_length_array_index12=0\n    local word_char_length_array_length12=0\n\
    \    local word_char_length_array_index13=0\n    local word_char_length_array_length13=0\n\
    \    local word_char_length_array_index14=0\n    local word_char_length_array_length14=0\n\
    \    local word_char_length_array_index15=0\n    local word_char_length_array_length15=0\n\
    \    local word_char_length_array_index16=0\n    local word_char_length_array_length16=0\n\
    \    local word_char_length_array_index17=0\n    local word_char_length_array_length17=0\n\
    \    local word_char_length_array_index18=0\n    local word_char_length_array_length18=0\n\
    \    local word_char_length_array_index19=0\n    local word_char_length_array_length19=0\n\
    \    local word_char_length_array_index20=0\n    local word_char_length_array_length20=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_character=0\n  local\
    \ word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n  local word_character_index=0\n\
    \  local word_character_length=0\n  local word_character_index=0\n  local word_character_length=0\n\
    \  local word_character_index=0\n  local word_character_length=0\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_start=0\n  local\
    \ word_end=0\n  local word_char=0\n  local word_char_length=0\n  local word_char_start=0\n\
    \  local word_char_end=0\n  local word_char_char=0\n  local word_char_char_length=0\n\
    \  local word_char_char_start=0\n  local word_char_char_end=0\n  local word_char_char_char=0\n\
    \  local word_char_char_char_length=0\n  local word_char_char_char_start=0\n \
    \ local word_char_char_char_end=0\n  local word_char_char_char_char=0\n  local\
    \ word_char_char_char_char_length=0\n  local word_char_char_char_char_start=0\n\
    \  local word_char_char_char_char_end=0\n  local word_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_start=0\n\
    \  local word_char_char_char_char_char_end=0\n  local word_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_start=0\n\
    \  local word_char_char_char_char_char_char_end=0\n  local word_char_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_start=0\n\
    \  local word_char_char_char_char_char_char_char_end=0\n  local word_char_char_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_start=0\n\
    \  local word_char_char_char_char_char_char_char_char_end=0\n  local word_char_char_char_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_start=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_end=0\n  local word_char_char_char_char_char_char_char_char_char_char=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_start=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_end=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_char=0\n  local word_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_index2=0\n\
    \    local word_char_length2=0\n    local word_char_length3=0\n    local word_char_length4=0\n\
    \    local word_char_length5=0\n    local word_char_length6=0\n    local word_char_length7=0\n\
    \    local word_char_length8=0\n    local word_char_length9=0\n    local word_char_length10=0\n\
    \    local word_char_length11=0\n    local word_char_length12=0\n    local word_char_length13=0\n\
    \    local word_char_length14=0\n    local word_char_length15=0\n    local word_char_length16=0\n\
    \    local word_char_length17=0\n    local word_char_length18=0\n    local word_char_length19=0\n\
    \    local word_char_length20=0\n    local word_char_length21=0\n    local word_char_length22=0\n\
    \    local word_char_length23=0\n    local word_char_length24=0\n    local word_char_length25=0\n\
    \    local word_char_length26=0\n    local word_char_length27=0\n    local word_char_length28=0\n\
    \    local word_char_length29=0\n    local word_char_length30=0\n    local word_char_length31=0\n\
    \    local word_char_length32=0\n    local word_char_length33=0\n    local word_char_length34=0\n\
    \    local word_char_length35=0\n    local word_char_length36=0\n    local word_char_length37=0\n\
    \    local word_char_length38=0\n    local word_char_length39=0\n    local word_char_length40=0\n\
    \    local word_char_length41=0\n    local word_char_length42=0\n    local word_char_length43=0\n\
    \    local word_char_length44=0\n    local word_char_length45=0\n    local word_char_length46=0\n\
    \    local word_char_length47=0\n    local word_char_length48=0\n    local word_char_length49=0\n\
    \    local word_char_length50=0\n    local word_char_length51=0\n    local word_char_length52=0\n\
    \    local word_char_length53=0\n    local word_char_length54=0\n    local word_char_length55=0\n\
    \    local word_char_length56=0\n    local word_char_length57=0\n    local word_char_length\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_count1=0\n  local word_length1=0\n\
    \  local word_count2=0\n  local word_length2=0\n  local word_count3=0\n  local\
    \ word_length3=0\n  local word_count4=0\n  local word_length4=0\n  local word_count5=0\n\
    \  local word_length5=0\n  local word_count6=0\n  local word_length6=0\n  local\
    \ word_count7=0\n  local word_length7=0\n  local word_count8=0\n  local word_length8=0\n\
    \  local word_count9=0\n  local word_length9=0\n  local word_count10=0\n  local\
    \ word_length10=0\n  local word_count11=0\n  local word_length11=0\n  local word_count12=0\n\
    \  local word_length12=0\n  local word_count13=0\n  local word_length13=0\n  local\
    \ word_count14=0\n  local word_length14=0\n  local word_count15=0\n  local word_length15=0\n\
    \  local word_count16=0\n  local word_length16=0\n  local word_count17=0\n  local\
    \ word_length17=0\n  local word_count18=0\n  local word_length18=0\n  local word_count19=0\n\
    \  local word_length19=0\n  local word_count20=0\n  local word_length20=0\n  local\
    \ word_count21=0\n  local word_length21=0\n  local word_count22=0\n  local word_length22=0\n\
    \  local word_count23=0\n  local word_length23=0\n  local word_count24=0\n  local\
    \ word_length24=0\n  local word_count25=0\n  local word_length25=0\n  local word_count26=0\n\
    \  local word_length26=0\n  local word_count27=0\n  local word_length27=0\n  local\
    \ word_count28=0\n  local word_length28=0\n  local word_count29=0\n  local word_length29=0\n\
    \  local word_count30=0\n  local word_length30=0\n  local word_count31=0\n  local\
    \ word_length31=0\n  local word_count32=0\n  local word_length32=0\n  local word_count33=0\n\
    \  local word_length33=0\n  local word_count34=0\n  local word_length34=0\n  local\
    \ word_count35\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local char\n  local new_char\n  local i\n  local j\n  local len\n  local temp\n\
    \  local word\n  local word_count\n  local word_length\n  local word_length_count\n\
    \  local word_length_count2\n  local word_length_count3\n  local word_length_count4\n\
    \  local word_length_count5\n  local word_length_count6\n  local word_length_count7\n\
    \  local word_length_count8\n  local word_length_count9\n  local word_length_count10\n\
    \  local word_length_count11\n  local word_length_count12\n  local word_length_count13\n\
    \  local word_length_count14\n  local word_length_count15\n  local word_length_count16\n\
    \  local word_length_count17\n  local word_length_count18\n  local word_length_count19\n\
    \  local word_length_count20\n  local word_length_count21\n  local word_length_count22\n\
    \  local word_length_count23\n  local word_length_count24\n  local word_length_count25\n\
    \  local word_length_count26\n  local word_length_count27\n  local word_length_count28\n\
    \  local word_length_count29\n  local word_length_count30\n  local word_length_count31\n\
    \  local word_length_count32\n  local word_length_count33\n  local word_length_count34\n\
    \  local word_length_count35\n  local word_length_count36\n  local word_length_count37\n\
    \  local word_length_count38\n  local word_length_count39\n  local word_length_count40\n\
    \  local word_length_count41\n  local word_length_count42\n  local word_length_count43\n\
    \  local word_length_count44\n  local word_length_count45\n  local word_length_count46\n\
    \  local word_length_count47\n  local word_length_count48\n  local word_length_count49\n\
    \  local word_length_count50\n  local word_length_count51\n  local word_length_count52\n\
    \  local word_length_count53\n  local word_length_count54\n  local word_length_count55\n\
    \  local word_length_count56\n  local word_length_count57\n  local word_length_count58\n\
    \  local word_length_count59\n  local word_length_count60\n  local word_length_count61\n\
    \  local word_length_count62\n  local word_length_count63\n  local word_length_count64\n\
    \  local word_length_count65\n  local \n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local char_ascii\n    local char_ascii2\n    local\
    \ char_ascii3\n    local char_ascii4\n    local char_ascii5\n    local char_ascii6\n\
    \    local char_ascii7\n    local char_ascii8\n    local char_ascii9\n    local\
    \ char_ascii10\n    local char_ascii11\n    local char_ascii12\n    local char_ascii13\n\
    \    local char_ascii14\n    local char_ascii15\n    local char_ascii16\n    local\
    \ char_ascii17\n    local char_ascii18\n    local char_ascii19\n    local char_ascii20\n\
    \    local char_ascii21\n    local char_ascii22\n    local char_ascii23\n    local\
    \ char_ascii24\n    local char_ascii25\n    local char_ascii26\n    local char_ascii27\n\
    \    local char_ascii28\n    local char_ascii29\n    local char_ascii30\n    local\
    \ char_ascii31\n    local char_ascii32\n    local char_ascii33\n    local char_ascii34\n\
    \    local char_ascii35\n    local char_ascii36\n    local char_ascii37\n    local\
    \ char_ascii38\n    local char_ascii39\n    local char_ascii40\n    local char_ascii41\n\
    \    local char_ascii42\n    local char_ascii43\n    local char_ascii44\n    local\
    \ char_ascii45\n    local char_ascii46\n    local char_ascii47\n    local char_ascii48\n\
    \    local char_ascii49\n    local char_ascii50\n    local char_ascii51\n    local\
    \ char_ascii52\n    local char_ascii53\n    local char_ascii54\n    local char_ascii55\n\
    \    local char_ascii56\n    local char_ascii57\n    local char_ascii58\n    local\
    \ char_ascii59\n    local char_ascii60\n    local char_ascii61\n    local char_ascii62\n\
    \    local char_ascii63\n    local char_ascii64\n    local char_ascii65\n    local\
    \ char_ascii66\n    local char_ascii67\n    local char_ascii68\n    local char_ascii69\n\
    \    local char_ascii70\n    local char_ascii71\n    local char_ascii72\n    local\
    \ char_ascii73\n    local char_ascii74\n    local char_ascii75\n    local char_ascii76\n\
    \    local char_ascii77\n    local char_ascii78\n    local char_ascii79\n    local\
    \ char_ascii80\n    local char_ascii81\n    local char_ascii82\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_count=0\n\
    \    local word_char_length=0\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_count=0\n\
    \    local word_char_length=0\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_count=0\n\
    \    local word_char_length=0\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_count=0\n\
    \    local word_char_length=0\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_count=0\n\
    \    local word_char_length=0\n    local word_char_index=0\n    local word_char_length=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local new_char=\"\
    \"\n    local new_char_ascii=0\n    local new_char_ascii2=0\n    local new_char_ascii3=0\n\
    \    local new_char_ascii4=0\n    local new_char_ascii5=0\n    local new_char_ascii6=0\n\
    \    local new_char_ascii7=0\n    local new_char_ascii8=0\n    local new_char_ascii9=0\n\
    \    local new_char_ascii10=0\n    local new_char_ascii11=0\n    local new_char_ascii12=0\n\
    \    local new_char_ascii13=0\n    local new_char_ascii14=0\n    local new_char_ascii15=0\n\
    \    local new_char_ascii16=0\n    local new_char_ascii17=0\n    local new_char_ascii18=0\n\
    \    local new_char_ascii19=0\n    local new_char_ascii20=0\n    local new_char_ascii21=0\n\
    \    local new_char_ascii22=0\n    local new_char_ascii23=0\n    local new_char_ascii24=0\n\
    \    local new_char_ascii25=0\n    local new_char_ascii26=0\n    local new_char_ascii27=0\n\
    \    local new_char_ascii28=0\n    local new_char_ascii29=0\n    local new_char_ascii30=0\n\
    \    local new_char_ascii31=0\n    local new_char_ascii32=0\n    local new_char_ascii33=0\n\
    \    local new_char_ascii34=0\n    local new_char_ascii35=0\n    local new_char_ascii36=0\n\
    \    local new_char_ascii37=0\n    local new_char_ascii38=0\n    local new_char_ascii39=0\n\
    \    local new_char_ascii40=0\n    local new_char_ascii41=0\n    local new_char_ascii42=0\n\
    \    local new_char_ascii43=0\n    local new_char_ascii44=0\n    local new_char_ascii45=0\n\
    \    local new_char_ascii46=0\n    local new_char_ascii47=0\n    local new_char_ascii48=0\n\
    \    local new_char_ascii49=0\n    local new_char_ascii50=0\n    local new_char_ascii51=0\n\
    \    local new_char_ascii52=0\n    local new_char_ascii53=0\n    local new_char_ascii54=0\n\
    \    local new_char_ascii55=0\n    local new_char_ascii56=0\n    local new_char_ascii57=0\n\
    \    local new_char_ascii58=0\n    local new_char_ascii59=0\n    local new_char_ascii60=0\n\
    \    local new_char_ascii61=0\n    local new_char_ascii62=0\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char=0\n\
    \  local word_char_length=0\n  local word_char_array=()\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count2=0\n  local\
    \ word_char_length_index2=0\n  local word_char_length_count3=0\n  local word_char_length_index3=0\n\
    \  local word_char_length_count4=0\n  local word_char_length_index4=0\n  local\
    \ word_char_length_count5=0\n  local word_char_length_index5=0\n  local word_char_length_count6=0\n\
    \  local word_char_length_index6=0\n  local word_char_length_count7=0\n  local\
    \ word_char_length_index7=0\n  local word_char_length_count8=0\n  local word_char_length_index8=0\n\
    \  local word_char_length_count9=0\n  local word_char_length_index9=0\n  local\
    \ word_char_length_count10=0\n  local word_char_length_index10=0\n  local word_char_length_count11=0\n\
    \  local word_char_length_index11=0\n  local word_char_length_count12=0\n  local\
    \ word_char_length_index12=0\n  local word_char_length_count13=0\n  local word_char_length_index13=0\n\
    \  local word_char_length_count14=0\n  local word_char_length_index14=0\n  local\
    \ word_char_length_count15=0\n  local word_char_length_index15=0\n  local word_char_length_count16=0\n\
    \  local word_char_length_index16=0\n  local word_char_length_count17=0\n  local\
    \ word_char_length_index17=0\n  local word_char_length_count18=0\n  local word_char_length_index18=0\n\
    \  local word_char_length_count19=0\n  local word_char_length_index19=0\n  local\
    \ word_char_length_count20=0\n  local word_char_length_index20=0\n  local word_char_length_count21=0\n\
    \  local word_char_length_index21=0\n  local word_char_length_count22=0\n  local\
    \ word_char_length_index22=0\n  local word_char_length_count23=0\n  local word_char_length_index23=0\n\
    \  local word_char_length_count24=0\n  local word_char_length_index24=0\n  local\
    \ word_char_length_count25=0\n  local word_char_length_index25=0\n  local word_char_length_count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_array=()\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_array=()\n  local\
    \ word_char_length_array_count=0\n  local word_char_length_array_index=0\n  local\
    \ word_char_length_array_element=0\n  local word_char_length_array_element_count=0\n\
    \  local word_char_length_array_element_index=0\n  local word_char_length_array_element_value=0\n\
    \  local word_char_length_array_element_value_count=0\n  local word_char_length_array_element_value_index=0\n\
    \  local word_char_length_array_element_value_char_count=0\n  local word_char_length_array_element_value_char_index=0\n\
    \  local word_char_length_array_element_value_char_value=0\n  local word_char_length_array_element_value_char_value_count=0\n\
    \  local word_char_length_array_element_value_char_value_index=0\n  local word_char_length_array_element_value_char_value_value=0\n\
    \  local word_char_length_array_element_value_char_value_count=0\n  local word_char_length_array_element_value_char_value_value_index=0\n\
    \  local word_char_length_array_element_value_char_value_value_value=0\n  local\
    \ word_char_length_array_element_value_char_value_value_count=0\n  local word_char_length_array_element_value_char_value_value_index=0\n\
    \  local word_char_length_array_element_value_char_value_value_value=0\n  local\
    \ word_char_length_array_element_value_char_value_value_count=0\n  local word_char_length_array_element_value_char_value_value_index=0\n\
    \  local word_char_length_array_element_value_char_value_value_value=0\n  local\
    \ word_char_length_array_element_value_char_value_value_count=0\n  local word_char_length_array_element_value_char_value_value_index=0\n\
    \  local word_char_length_array_element_value_char_value_value_value=0\n  local\
    \ word_char_length_array_element_value_char_value_value_count=0\n  local word_char_length_array_element_value_char_value_value_index=0\n\
    \  local word_char_length_array_element_value_char_value_value_value=0\n  local\
    \ word_char_length_array_element_value_char_value_value_count=0\n  local word_char_length_array_element_value_char_value_value_index=0\n\
    \  local word_char_length_array_element_value_char_value_value_value=0\n  local\
    \ word_char_length_array_element_value_char_value_value_count=0\n  local word_char_length_array_element_value_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local char_count\n    local new_char\n    local\
    \ new_char_count\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local new_count=0\n  local word\n  local new_word\n  local i\n  local j\n \
    \ local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char_length=0\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length_index_count=0\n\
    \  local word_char_length_index_count=0\n  local word_char_length\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=\"\
    \"\n    local space=\"\"\n    local count=0\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_char=\"\
    \"\n  local new_char_count=0\n  local new_char_prev=\"\"\n  local new_char_next=\"\
    \"\n  local new_char_next_count=0\n  local new_char_next_prev=\"\"\n  local new_char_next_next=\"\
    \"\n  local new_char_next_next_count=0\n  local new_char_next_next_prev=\"\"\n\
    \  local new_char_next_next_next=\"\"\n  local new_char_next_next_next_count=0\n\
    \  local new_char_next_next_next_prev=\"\"\n  local new_char_next_next_next_next=\"\
    \"\n  local new_char_next_next_next_next_count=0\n  local new_char_next_next_next_next_prev=\"\
    \"\n  local new_char_next_next_next_next_next=\"\"\n  local new_char_next_next_next_next_next_count=0\n\
    \  local new_char_next_next_next_next_next_prev=\"\"\n  local new_char_next_next_next_next_next_next=\"\
    \"\n  local new_char_next_next_next_next_next_next_count=0\n  local new_char_next_next_next_next_next_next_prev=\"\
    \"\n  local new_char_next_next_next_next_next_next_next=\"\"\n  local new_char_next_next_next_next_next_next_count=0\n\
    \  local new_char_next_next_next_next_next_next_prev=\"\"\n  local new_char_next_next_next_next_next_next_next=\"\
    \"\n  local new_char_next_next_next_next_next_next_count=0\n  local new_char_next_next_next_next_next_next_prev=\"\
    \"\n  local new_char_next_next_next_next_next_next_next=\"\"\n  local new_char_next_next_next_next_next_next_next_count=0\n\
    \  local new_char_next_next_next_next_next_next_next_prev=\"\"\n  local new_char_next_next_next_next_next_next_next_next=\"\
    \"\n  local new_char_next_next_next_next_next_next_next_count=0\n  local new_char_next_next_next_next_next_next_next_prev=\"\
    \"\n  local new_char_next_next_next_next_next_next_next_next=\"\"\n  local new_char_next_next_next_next_next_next_next_count=0\n\
    \  local new_char_next_next_next_next_next_next_next_prev=\"\"\n  local new_char_next_next_next_next_next_next_next_next=\"\
    \"\n  local new_char_next_next_next_next_next_next_next_count=0\n  local new_char_next_next_next_next_next_next_next_prev=\"\
    \"\n  local new_char_next_next_next_next_next_next_next_next=\"\"\n  local new_char_next_next_next_next_next_next_next_next_count=0\n\
    \  local new_char_next_next_next_next_next_next_next_next_prev=\"\"\n  local new_char_next_next_next_next_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local count2=0\n    local count3=0\n    local count4=0\n    local\
    \ count5=0\n    local count6=0\n    local count7=0\n    local count8=0\n    local\
    \ count9=0\n    local count10=0\n    local count11=0\n    local count12=0\n  \
    \  local count13=0\n    local count14=0\n    local count15=0\n    local count16=0\n\
    \    local count17=0\n    local count18=0\n    local count19=0\n    local count20=0\n\
    \    local count21=0\n    local count22=0\n    local count23=0\n    local count24=0\n\
    \    local count25=0\n    local count26=0\n    local count27=0\n    local count28=0\n\
    \    local count29=0\n    local count30=0\n    local count31=0\n    local count32=0\n\
    \    local count33=0\n    local count34=0\n    local count35=0\n    local count36=0\n\
    \    local count37=0\n    local count38=0\n    local count39=0\n    local count40=0\n\
    \    local count41=0\n    local count42=0\n    local count43=0\n    local count44=0\n\
    \    local count45=0\n    local count46=0\n    local count47=0\n    local count48=0\n\
    \    local count49=0\n    local count50=0\n    local count51=0\n    local count52=0\n\
    \    local count53=0\n    local count54=0\n    local count55=0\n    local count56=0\n\
    \    local count57=0\n    local count58=0\n    local count59=0\n    local count60=0\n\
    \    local count61=0\n    local count62=0\n    local count63=0\n    local count64=0\n\
    \    local count65=0\n    local count66=0\n    local count67=0\n    local count68=0\n\
    \    local count69=0\n    local count70=0\n    local count71=0\n    local count72=0\n\
    \    local count73=0\n    local count74=0\n    local count75=0\n    local count76=0\n\
    \    local count77=0\n    local count78=0\n    local count79=0\n    local count80=0\n\
    \    local count81=0\n    local count82=0\n    local count83=0\n    local count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local words=$string\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_character\n\
    \  local word_character_index\n  local word_character_count\n  local word_character_length\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=${#string}\n\
    \  local j=0\n  while [ $i -gt 0 ]; do\n    local c=${string:$i:1}\n    local\
    \ k=0\n    while [ $k -lt $i ]; do\n      local c=${string:$k:1}\n      if [ \"\
    $c\" == \"$c\" -a \"$c\" != \" \" ]; then\n        ((k++))\n      else\n     \
    \   new_string+=\"$c\"\n      fi\n    done\n    i=$((i+1))\n  done\n  echo $new_string\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660044707
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=${#string}\n\
    \  local j=0\n  while [ $i -gt 0 ]; do\n    local char=${string:$i:1}\n    local\
    \ char_ascii=${char:0:1}\n    local char_ascii_value=${char_ascii}\n    local\
    \ char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:1}\n\
    \    local char_ascii_value=${char_ascii_value:0:1}\n    local char_ascii_value=${char_ascii_value:\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvz6xxi8u.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char\n  local word_char_length\n  local word_char_length_count\n\
    \  local word_char_length_index\n  local word_char_length_count\n  local word_char_length_index_count\n\
    \  local word_char_length_index_count_index\n  local word_char_length_index_count_index_index\n\
    \  local word_char_length_index_count_index_index_index\n  local word_char_length_index_count_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index\n  local word_char_length_index_count_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \  local word_char_length_index_count_index_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=\"\
    \"\n    local space=\"\"\n    local word=\"\"\n    local count=0\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local count2=0\n    local count3=0\n    local count4=0\n    local count5=0\n\
    \    local count6=0\n    local count7=0\n    local count8=0\n    local count9=0\n\
    \    local count10=0\n    local count11=0\n    local count12=0\n    local count13=0\n\
    \    local count14=0\n    local count15=0\n    local count16=0\n    local count17=0\n\
    \    local count18=0\n    local count19=0\n    local count20=0\n    local count21=0\n\
    \    local count22=0\n    local count23=0\n    local count24=0\n    local count25=0\n\
    \    local count26=0\n    local count27=0\n    local count28=0\n    local count29=0\n\
    \    local count30=0\n    local count31=0\n    local count32=0\n    local count33=0\n\
    \    local count34=0\n    local count35=0\n    local count36=0\n    local count37=0\n\
    \    local count38=0\n    local count39=0\n    local count40=0\n    local count41=0\n\
    \    local count42=0\n    local count43=0\n    local count44=0\n    local count45=0\n\
    \    local count46=0\n    local count47=0\n    local count48=0\n    local count49=0\n\
    \    local count50=0\n    local count51=0\n    local count52=0\n    local count53=0\n\
    \    local count54=0\n    local count55=0\n    local count56=0\n    local count57=0\n\
    \    local count58=0\n    local count59=0\n    local count60=0\n    local count61=0\n\
    \    local count62=0\n    local count63=0\n    local count64=0\n    local count65=0\n\
    \    local count66=0\n    local count67=0\n    local count68=0\n    local count69=0\n\
    \    local count70=0\n    local count71=0\n    local count72=0\n    local count73=0\n\
    \    local count74=0\n    local count75=0\n    local count76=0\n    local count77=0\n\
    \    local count78=0\n    local count79=0\n    local count80=0\n    local count81=0\n\
    \    local count82=0\n    local count83=0\n    local count\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output=\"\"\n  local words=\"\
    \"\n  local space=\"\"\n  local word\n  local i\n  local j\n  local length\n \
    \ local char\n  local char_value\n  local char_index\n  local new_char\n  local\
    \ new_char_index\n  local new_word\n  local new_word_index\n  local new_space\n\
    \  local new_space_index\n  local new_words\n  local new_words_index\n  local\
    \ new_length\n  local new_length_index\n  local new_chars\n  local new_chars_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_char_index\n  local\
    \ new_char_index\n  local new_char_index\n  local new_char_index\n  local new_char_index\n\
    \  local new_char_index\n  local new_char_index\n  local new_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local words=$(echo \"$string\"\
    \ | sed 's/ /\\n/g' | sort -u)\n    local new_string=\"\"\n    for word in $words;\
    \ do\n        new_string+=\"$(echo \"$word\" | sed 's/./& /g' | sort -k 2 | sed\
    \ 's/ /\\n/g' | tr '[A-Z]' '[a-z]' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0d31nfnj.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmp0d31nfnj.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_list=\"\"\n    local word_list_sorted=\"\"\n  \
    \  local word_list_sorted_count=0\n    local word_list_sorted_index=0\n    local\
    \ word_list_sorted_count2=0\n    local word_list_sorted_index2=0\n    local word_list_sorted_index3=0\n\
    \    local word_list_sorted_index4=0\n    local word_list_sorted_index5=0\n  \
    \  local word_list_sorted_index6=0\n    local word_list_sorted_index7=0\n    local\
    \ word_list_sorted_index8=0\n    local word_list_sorted_index9=0\n    local word_list_sorted_index10=0\n\
    \    local word_list_sorted_index11=0\n    local word_list_sorted_index12=0\n\
    \    local word_list_sorted_index13=0\n    local word_list_sorted_index14=0\n\
    \    local word_list_sorted_index15=0\n    local word_list_sorted_index16=0\n\
    \    local word_list_sorted_index17=0\n    local word_list_sorted_index18=0\n\
    \    local word_list_sorted_index19=0\n    local word_list_sorted_index20=0\n\
    \    local word_list_sorted_index21=0\n    local word_list_sorted_index22=0\n\
    \    local word_list_sorted_index23=0\n    local word_list_sorted_index24=0\n\
    \    local word_list_sorted_index25=0\n    local word_list_sorted_index26=0\n\
    \    local word_list_sorted_index27=0\n    local word_list_sorted_index28=0\n\
    \    local word_list_sorted_index29=0\n    local word_list_sorted_index30=0\n\
    \    local word_list_sorted_index31=0\n    local word_list_sorted_index32=0\n\
    \    local word_list_sorted_index33=0\n    local word_list_sorted_index34=0\n\
    \    local word_list_sorted_index35=0\n    local word_list_sorted_index36=0\n\
    \    local word_list_sorted_index37=0\n    local word_list_sorted_index38=0\n\
    \    local word_list_sorted_index39=0\n    local word_list_sorted_index40=0\n\
    \    local word_list_sorted_index41=0\n    local word_list_sorted_index42=0\n\
    \    local word_list_sorted_index43=0\n    local word_list_sorted_index44=0\n\
    \    local word_list_sorted_index45=0\n    local word_list_sorted_index46=0\n\
    \    local word_list_sorted_index47=0\n    local word_list_sorted_index48=0\n\
    \    local word_list_sorted_index49=0\n    local word_list_sorted_index50=0\n\
    \    local word_list_sorted_index51=0\n    local word_list_sorted_index\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_array=()\n\
    \    local word_array_length=${#string[@]}\n    local word_array_elements=()\n\
    \    local word_array_elements_length=${#word_array_elements[@]}\n    local word_array_elements_array=()\n\
    \    local word_array_elements_array_length=${#word_array_elements_array[@]}\n\
    \    local word_array_elements_array_elements=()\n    local word_array_elements_array_elements_length=${#word_array_elements_array_elements[@]}\n\
    \    local word_array_elements_array_elements_array=()\n    local word_array_elements_array_elements_array_length=${#word_array_elements_array_elements_array[@]}\n\
    \    local word_array_elements_array_elements_array_elements=()\n    local word_array_elements_array_elements_array_elements_length=${#word_array_elements_array_elements_array_elements[@]}\n\
    \    local word_array_elements_array_elements_array_elements_array=()\n    local\
    \ word_array_elements_array_elements_array_elements_array_length=${#word_array_elements_array_elements_array_elements_array[@]}\n\
    \    local word_array_elements_array_elements_array_elements_array_array=()\n\
    \    local word_array_elements_array_elements_array_elements_array_array_length=${#word_array_elements_array_elements_array_elements_array_array[@]}\n\
    \    local word_array_elements_array_elements_array_elements_array_array_array=()\n\
    \    local word_array_elements_array_elements_array_elements_array_array_array_length=${#word_array_elements_array_elements_array_elements_array_array_array[@]}\n\
    \    local word_array_elements_array_elements_array_elements_array_array_array_array=()\n\
    \    local word_array_elements_array_elements_array_elements_array_array_array_array_length=${#word_array_elements_array_elements_array_elements_array_array_array_array[@]}\n\
    \    local word_array_elements_array_elements_array_elements_array_array_array_array_array=()\n\
    \    local word_array_elements_array_elements_array_elements_array_array_array_array_array_length=${#word_array_elements_array_elements_array_elements_array_array_array_array_array[@]}\n\
    \    local word_array_elements_array_elements_array_elements_array_array_array_array_array_array_length=${#word_array_elements_array_elements_array_elements_array_array_array_array_array_array_array[@\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8hlpakrs.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        local letter=\"${string:$i:1}\"\
    \n        local letter2=\"${string:$i:1}\"\n        if [ $i -eq 0 ]; then\n  \
    \          new_string=\"$letter\"\n        else\n            local letter3=\"\
    ${string:$(($i+1)):1}\"\n            local letter4=\"${string:$(($i+1)):1}\"\n\
    \            local letter5=\"${string:$(($i+1)):1}\"\n            local letter6=\"\
    ${string:$(($i+1)):1}\"\n            local letter7=\"${string:$(($i+1)):1}\"\n\
    \            local letter8=\"${string:$(($i+1)):1}\"\n            local letter9=\"\
    ${string:$(($i+1)):1}\"\n            local letter10=\"${string:$(($i+1)):1}\"\n\
    \            local letter11=\"${string:$(($i+1)):1}\"\n            local letter12=\"\
    ${string:$(($i+1)):1}\"\n            local letter13=\"${string:$(($i+1)):1}\"\n\
    \            local letter14=\"${string:$(($i+1)):1}\"\n            local letter15=\"\
    ${string:$(($i+1)):1}\"\n            local letter16=\"${string:$(($i+1)):1}\"\n\
    \            local letter17=\"${string:$(($i+1)):1}\"\n            local letter18=\"\
    ${string:$(($i+1)):1}\"\n            local letter19=\"${string:$(($i+1)):1}\"\n\
    \            local letter20=\"${string:$(($i+1)):1}\"\n            local letter21=\"\
    ${string:$(($i+1)):1}\"\n            local letter22=\"${string:$(($i+1)):1}\"\n\
    \            local letter23=\"${string:$(($i+1)):1}\"\n            local letter24=\"\
    ${string:$(($i+1)):1}\"\n            local letter25=\"${string:$(($i+1)):1}\"\n\
    \            local letter26=\"${string:$(($i+1)):1}\"\n            local letter27=\"\
    ${string:$(($i+1)):1}\"\n            local letter28=\"${string:$(($i+1)):1}\"\n\
    \            local letter29=\"${string:$(($i+1)):1}\"\n            local letter30=\"\
    ${string:$(($i+1)):1}\"\n            local letter31=\"${string:$(($i+1)):1}\"\n\
    \            local letter32=\"${string:$(($i+1)):1}\"\n            local letter33=\"\
    ${string:$(($i+1)):1}\"\n            local letter34=\"${string:$(($i+\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsqraic_8.sh: line 57: unexpected EOF while looking for matching
    `)''

    /tmp/tmpsqraic_8.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    local k=0\n    while [ $i -gt 0 ]; do\n        local c=${string:$i:1}\n\
    \        local x=$((${#c}+1))\n        local y=$((${#new_string}+1))\n       \
    \ local z=$((${#c}+${#new_string}-1))\n        local w=$((${#c}+${#new_string}+${#c}-1))\n\
    \        local l=$((${#c}+${#new_string}+${#c}+${#new_string}-1))\n        local\
    \ m=$((${#c}+${#new_string}+${#c}+${#new_string}+${#c}-1))\n        local n=$((${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}-1))\n\
    \        local o=$((${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}-1))\n\
    \        local p=$((${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}-1))\n\
    \        local q=$((${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}-1))\n\
    \        local r=$((${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}-1))\n\
    \        local s=$((${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}-1))\n\
    \        local t=$((${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+${#c}+${#new_string}+\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp696p5qap.sh: line 36: unexpected EOF while looking for matching
    `)''

    /tmp/tmp696p5qap.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_char=0\n    local word_char_length=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count2=0\n   \
    \ local word_char_length_index2=0\n    local word_char_length_count3=0\n    local\
    \ word_char_length_index3=0\n    local word_char_length_count4=0\n    local word_char_length_index4=0\n\
    \    local word_char_length_count5=0\n    local word_char_length_index5=0\n  \
    \  local word_char_length_count6=0\n    local word_char_length_index6=0\n    local\
    \ word_char_length_count7=0\n    local word_char_length_index7=0\n    local word_char_length_count8=0\n\
    \    local word_char_length_index8=0\n    local word_char_length_count9=0\n  \
    \  local word_char_length_index9=0\n    local word_char_length_count10=0\n   \
    \ local word_char_length_index10=0\n    local word_char_length_count11=0\n   \
    \ local word_char_length_index11=0\n    local word_char_length_count12=0\n   \
    \ local word_char_length_index12=0\n    local word_char_length_count13=0\n   \
    \ local word_char_length_index13=0\n    local word_char_length_count14=0\n   \
    \ local word_char_length_index14=0\n    local word_char_length_count15=0\n   \
    \ local word_char_length_index15=0\n    local word_char_length_count16=0\n   \
    \ local word_char_length_index16=0\n    local word_char_length_count17=0\n   \
    \ local word_char_length_index17=0\n    local word_char_length_count18=0\n   \
    \ local word_char_length_index18=0\n    local word_char_length_count19=0\n   \
    \ local word_char_length_index19=0\n    local word_char_length_count20=0\n   \
    \ local word_char_length_index20=0\n    local word_char_length_count21=0\n   \
    \ local word_char_length_index21=0\n    local word_char_length_count22=0\n   \
    \ local word_char_length_index22=0\n    local word_char_length_count23=0\n   \
    \ local word_char_length_index23=0\n    local word_char_length_count24=0\n   \
    \ local word_char_length_index24=0\n    local word_char_length_count25=0\n   \
    \ local word_char_length_index25=0\n    local word_char_length_count26=0\n   \
    \ local word_char_length\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local words=$string\n\
    \    local space=\" \"\n    local new_word=\"\"\n    local count=0\n    local\
    \ new_count=0\n    local char=\"\"\n    local new_char=\"\"\n    local i=${#words}\n\
    \    while [ $i -gt 0 ]; do\n        char=${words[$i]}\n        new_char=$(echo\
    \ $char | sed -e 's/\\(.\\)/\\1/g')\n        new_word=$(echo $new_char | sed -e\
    \ 's/\\(.\\)/\\1/g')\n        if [[ $new_word != $char ]]; then\n            new_string=$new_string$new_word\n\
    \            new_count=$((new_count+1))\n        fi\n        words=${words[$((i-1))]}\n\
    \        i=$((i-1))\n    done\n    if [[ $new_count -gt 0 ]]; then\n        new_string=$new_string$space$new_count\n\
    \    fi\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_index=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_index2=0\n\
    \    local word_char_length2=0\n    local word_char_index3=0\n    local word_char_length3=0\n\
    \    local word_char_index4=0\n    local word_char_length4=0\n    local word_char_index5=0\n\
    \    local word_char_length5=0\n    local word_char_index6=0\n    local word_char_length6=0\n\
    \    local word_char_index7=0\n    local word_char_length7=0\n    local word_char_index8=0\n\
    \    local word_char_length8=0\n    local word_char_index9=0\n    local word_char_length9=0\n\
    \    local word_char_index10=0\n    local word_char_length10=0\n    local word_char_index11=0\n\
    \    local word_char_length11=0\n    local word_char_index12=0\n    local word_char_length12=0\n\
    \    local word_char_index13=0\n    local word_char_length13=0\n    local word_char_index14=0\n\
    \    local word_char_length14=0\n    local word_char_index15=0\n    local word_char_length15=0\n\
    \    local word_char_index16=0\n    local word_char_length16=0\n    local word_char_index17=0\n\
    \    local word_char_length17=0\n    local word_char_index18=0\n    local word_char_length18=0\n\
    \    local word_char_index19=0\n    local word_char_length19=0\n    local word_char_index20=0\n\
    \    local word_char_length20=0\n    local word_char_index21=0\n    local word_char_length21=0\n\
    \    local word_char_index22=0\n    local word_char_length22=0\n    local word_char_index23=0\n\
    \    local word_char_length23=0\n    local word_char_index24=0\n    local word_char_length24=0\n\
    \    local word_char_index25=0\n    local word_char_length25=0\n    local word_char_index26=0\n\
    \    local word_char_length26=0\n    local word_char_index27=0\n    local word_char_length27=0\n\
    \    local word_char_index28=0\n    local word_char_length28=0\n    local word_char_index29=0\n\
    \    local word_char_length29=0\n    local word_char_index30=0\n    local word_char_length\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_start=0\n\
    \    local word_end=0\n    local word_char_count=0\n    local word_char_length=0\n\
    \    local word_char_start=0\n    local word_char_end=0\n    local word_char_char_start=0\n\
    \    local word_char_char_end=0\n    local word_char_char_length=0\n    local\
    \ word_char_char_char_start=0\n    local word_char_char_char_end=0\n    local\
    \ word_char_char_char_length=0\n    local word_char_char_char_char_start=0\n \
    \   local word_char_char_char_char_end=0\n    local word_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_start=0\n    local word_char_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_char_char_end=0\n    local word_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_start=0\n    local word_char_char_char_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_char_char_char_char_end=0\n    local word_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_start=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_end=0\n    local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_start=0\n  \
    \  local word_char_char_char_char_char_char_char_char_char_char_end=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_start=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_end=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_index=0\n  local\
    \ word_character=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n  local word_character_index=0\n\
    \  local word_character_index=0\n  local word_character_index=0\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i\n\
    \    local j\n    local word_count\n    local word_length\n    local word_index\n\
    \    local word_char\n    local word_char_ascii\n    local word_char_ascii_index\n\
    \    local word_char_ascii_value\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_ascii_value_index\n    local\
    \ word_char_ascii_value_index\n    local word_char_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index=0\n  local word_char=\"\"\n  local\
    \ word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\
    \"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n \
    \ local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local\
    \ word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\
    \"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n \
    \ local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local\
    \ word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\
    \"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n \
    \ local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local\
    \ word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\
    \"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n \
    \ local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local\
    \ word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\
    \"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n \
    \ local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local\
    \ word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\
    \"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n \
    \ local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local\
    \ word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\
    \"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n \
    \ local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local\
    \ word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\"\n  local word_char=\"\
    \"\n  local word_char=\"\"\n  local word_char=\"\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local new_char=\"\
    \"\n    local i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        new_char=${string:$i:1}\n\
    \        if [ $new_char != \" \" ]; then\n            new_string=$new_string$new_char\n\
    \        else\n            new_string=$new_string$new_char\n            i=$((i+1))\n\
    \        fi\n    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660044707
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local new_count=0\n    local i\n    local j\n    local k\n    local l\n \
    \   local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_character\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local word_character_count\n  local word_character_count\n  local word_character_count\n\
    \  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local new_char\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_length=0\n    local word_index=0\n\
    \    local word_character_index=0\n    local word_character_index2=0\n    local\
    \ word_character_index3=0\n    local word_character_index4=0\n    local word_character_index5=0\n\
    \    local word_character_index6=0\n    local word_character_index7=0\n    local\
    \ word_character_index8=0\n    local word_character_index9=0\n    local word_character_index10=0\n\
    \    local word_character_index11=0\n    local word_character_index12=0\n    local\
    \ word_character_index13=0\n    local word_character_index14=0\n    local word_character_index15=0\n\
    \    local word_character_index16=0\n    local word_character_index17=0\n    local\
    \ word_character_index18=0\n    local word_character_index19=0\n    local word_character_index20=0\n\
    \    local word_character_index21=0\n    local word_character_index22=0\n    local\
    \ word_character_index23=0\n    local word_character_index24=0\n    local word_character_index25=0\n\
    \    local word_character_index26=0\n    local word_character_index27=0\n    local\
    \ word_character_index28=0\n    local word_character_index29=0\n    local word_character_index30=0\n\
    \    local word_character_index31=0\n    local word_character_index32=0\n    local\
    \ word_character_index33=0\n    local word_character_index34=0\n    local word_character_index35=0\n\
    \    local word_character_index36=0\n    local word_character_index37=0\n    local\
    \ word_character_index38=0\n    local word_character_index39=0\n    local word_character_index40=0\n\
    \    local word_character_index41=0\n    local word_character_index42=0\n    local\
    \ word_character_index43=0\n    local word_character_index44=0\n    local word_character_index45=0\n\
    \    local word_character_index46=0\n    local word_character_index47=0\n    local\
    \ word_character_index48=0\n    local word_character_index49=0\n    local word_character_index50=0\n\
    \    local word_character_index51=0\n    local word_character_index52=0\n    local\
    \ word_character_index53=0\n    local word_character_index54=0\n    local word_character_index55=0\n\
    \    local word_character_index56=0\n    local word_character_index57=0\n    local\
    \ word_character_index58=0\n    local word_character_index59=0\n    local word_character\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local new_count=0\n    local new_char\n    local new_char2\n  \
    \  local new_char3\n    local new_char4\n    local new_char5\n    local new_char6\n\
    \    local new_char7\n    local new_char8\n    local new_char9\n    local new_char10\n\
    \    local new_char11\n    local new_char12\n    local new_char13\n    local new_char14\n\
    \    local new_char15\n    local new_char16\n    local new_char17\n    local new_char18\n\
    \    local new_char19\n    local new_char20\n    local new_char21\n    local new_char22\n\
    \    local new_char23\n    local new_char24\n    local new_char25\n    local new_char26\n\
    \    local new_char27\n    local new_char28\n    local new_char29\n    local new_char30\n\
    \    local new_char31\n    local new_char32\n    local new_char33\n    local new_char34\n\
    \    local new_char35\n    local new_char36\n    local new_char37\n    local new_char38\n\
    \    local new_char39\n    local new_char40\n    local new_char41\n    local new_char42\n\
    \    local new_char43\n    local new_char44\n    local new_char45\n    local new_char46\n\
    \    local new_char47\n    local new_char48\n    local new_char49\n    local new_char50\n\
    \    local new_char51\n    local new_char52\n    local new_char53\n    local new_char54\n\
    \    local new_char55\n    local new_char56\n    local new_char57\n    local new_char58\n\
    \    local new_char59\n    local new_char60\n    local new_char61\n    local new_char62\n\
    \    local new_char63\n    local new_char64\n    local new_char65\n    local new_char66\n\
    \    local new_char67\n    local new_char68\n    local new_char69\n    local new_char70\n\
    \    local new_char71\n    local new_char72\n    local new_char73\n    local new_char74\n\
    \    local new_char75\n    local new_char76\n    local new_char77\n    local new_char78\n\
    \    local new_char79\n    local new_char80\n    local new_char81\n    local new_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_array=()\n    local word_count=0\n    local word_length=0\n\
    \    local word_length_count=0\n    local word_length_array=()\n    local word_length_array_count=0\n\
    \    local word_length_array_length=0\n    local word_length_array_length_count=0\n\
    \    local word_length_array_length_array=()\n    local word_length_array_length_array_count=0\n\
    \    local word_length_array_length_array_length=0\n    local word_length_array_length_array_length_count=0\n\
    \    local word_length_array_length_array_length_array=()\n    local word_length_array_length_array_length_array_count=0\n\
    \    local word_length_array_length_array_length_array_length=0\n    local word_length_array_length_array_length_array_length_count=0\n\
    \    local word_length_array_length_array_length_array_length_array=()\n    local\
    \ word_length_array_length_array_length_array_length_array_count=0\n    local\
    \ word_length_array_length_array_length_array_length_array_length=0\n    local\
    \ word_length_array_length_array_length_array_length_array_length=0\n    local\
    \ word_length_array_length_array_length_array_length_array_length=0\n    local\
    \ word_length_array_length_array_length_array_length_array_length=0\n    local\
    \ word_length_array_length_array_length_array_length_array_length_array=()\n \
    \   local word_length_array_length_array_length_array_length_array_length_array_count=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array_count=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array_length=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array_length=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_count=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length=0\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array=()\n\
    \    local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local count80=0\n  local count81=0\n  local count82=0\n\
    \  local count83=0\n  local count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local new_count=0\n    local i\n    local j\n    local k\n    local l\n \
    \   local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local count2=0\n    local count3=0\n    local count4=0\n    local\
    \ count5=0\n    local count6=0\n    local count7=0\n    local count8=0\n    local\
    \ count9=0\n    local count10=0\n    local count11=0\n    local count12=0\n  \
    \  local count13=0\n    local count14=0\n    local count15=0\n    local count16=0\n\
    \    local count17=0\n    local count18=0\n    local count19=0\n    local count20=0\n\
    \    local count21=0\n    local count22=0\n    local count23=0\n    local count24=0\n\
    \    local count25=0\n    local count26=0\n    local count27=0\n    local count28=0\n\
    \    local count29=0\n    local count30=0\n    local count31=0\n    local count32=0\n\
    \    local count33=0\n    local count34=0\n    local count35=0\n    local count36=0\n\
    \    local count37=0\n    local count38=0\n    local count39=0\n    local count40=0\n\
    \    local count41=0\n    local count42=0\n    local count43=0\n    local count44=0\n\
    \    local count45=0\n    local count46=0\n    local count47=0\n    local count48=0\n\
    \    local count49=0\n    local count50=0\n    local count51=0\n    local count52=0\n\
    \    local count53=0\n    local count54=0\n    local count55=0\n    local count56=0\n\
    \    local count57=0\n    local count58=0\n    local count59=0\n    local count60=0\n\
    \    local count61=0\n    local count62=0\n    local count63=0\n    local count64=0\n\
    \    local count65=0\n    local count66=0\n    local count67=0\n    local count68=0\n\
    \    local count69=0\n    local count70=0\n    local count71=0\n    local count72=0\n\
    \    local count73=0\n    local count74=0\n    local count75=0\n    local count76=0\n\
    \    local count77=0\n    local count78=0\n    local count79=0\n    local count80=0\n\
    \    local count81=0\n    local count82=0\n    local count83=0\n    local count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_length_count=0\n\
    \  local word_length_max=0\n  local word_length_min=0\n  local word_length_sum=0\n\
    \  local word_length_average=0\n  local word_length_sum_square=0\n  local word_length_average_square=0\n\
    \  local word_length_average_square_min=0\n  local word_length_average_square_max=0\n\
    \  local word_length_average_square_sum=0\n  local word_length_average_square_average=0\n\
    \  local word_length_average_square_average_count=0\n  local word_length_average_square_average_sum=0\n\
    \  local word_length_average_square_average_average=0\n  local word_length_average_square_average_average_count=0\n\
    \  local word_length_average_square_average_average_sum=0\n  local word_length_average_square_average_average_average=0\n\
    \  local word_length_average_square_average_average_average_count=0\n  local word_length_average_square_average_average_average_sum=0\n\
    \  local word_length_average_square_average_average_average_average=0\n  local\
    \ word_length_average_square_average_average_average_average_count=0\n  local\
    \ word_length_average_square_average_average_average_average_sum=0\n  local word_length_average_square_average_average_average_average_average=0\n\
    \  local word_length_average_square_average_average_average_average_average_count=0\n\
    \  local word_length_average_square_average_average_average_average_average_sum=0\n\
    \  local word_length_average_square_average_average_average_average_average_average=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_count=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_sum=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average_count=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average_sum=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average_average=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average_average_count=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average_average_sum=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average_average_average=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average_average_average_count=0\n\
    \  local word_length_average_square_average_average_average_average_average_average_average_average_average_sum\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_length_count=0\n  local\
    \ word_length_max=0\n  local word_length_min=0\n  local word_length_sum=0\n  local\
    \ word_length_avg=0\n  local word_length_median=0\n  local word_length_std=0\n\
    \  local word_length_variance=0\n  local word_length_variance_index=0\n  local\
    \ word_length_variance_max=0\n  local word_length_variance_min=0\n  local word_length_variance_sum=0\n\
    \  local word_length_variance_avg=0\n  local word_length_variance_median=0\n \
    \ local word_length_variance_std=0\n  local word_length_variance_variance=0\n\
    \  local word_length_variance_variance_index=0\n  local word_length_variance_variance_max=0\n\
    \  local word_length_variance_variance_min=0\n  local word_length_variance_variance_sum=0\n\
    \  local word_length_variance_variance_avg=0\n  local word_length_variance_variance_median=0\n\
    \  local word_length_variance_variance_std=0\n  local word_length_variance_variance_variance=0\n\
    \  local word_length_variance_variance_variance_index=0\n  local word_length_variance_variance_max=0\n\
    \  local word_length_variance_variance_min=0\n  local word_length_variance_variance_sum=0\n\
    \  local word_length_variance_variance_avg=0\n  local word_length_variance_variance_median=0\n\
    \  local word_length_variance_variance_std=0\n  local word_length_variance_variance_variance=0\n\
    \  local word_length_variance_variance_variance_index=0\n  local word_length_variance_variance_max=0\n\
    \  local word_length_variance_variance_min=0\n  local word_length_variance_variance_sum=0\n\
    \  local word_length_variance_variance_avg=0\n  local word_length_variance_variance_median=0\n\
    \  local word_length_variance_variance_std=0\n  local word_length_variance_variance_variance=0\n\
    \  local word_length_variance_variance_variance_index=0\n  local word_length_variance_variance_max=0\n\
    \  local word_length_variance_variance_min=0\n  local word_length_variance_variance_sum=0\n\
    \  local word_length_variance_variance_avg=0\n  local word_length_variance_variance_median=0\n\
    \  local word_length_variance_variance_std=0\n  local word_length_variance_variance_variance=0\n\
    \  local word_length_variance_variance_variance_index=0\n  local word_length_variance_variance_max=0\n\
    \  local word_length_variance_variance_min=0\n  local word_length_variance_variance_sum=0\n\
    \  local word_length_variance_variance_avg=0\n  local word_length_variance_variance_median=0\n\
    \  local word_length_variance_variance_std=0\n  local word_length_variance_variance_variance\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local index=0\n    local char\n    local new_char\n    local temp\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    \n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_character\n  local\
    \ word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local words=$string\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_character_index=0\n\
    \  local word_character=\"\"\n  local word_character_index=0\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n  local word_character=\"\"\n  local word_character=\"\"\n  local word_character=\"\
    \"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_word=\"\
    \"\n  local new_word_length=0\n  local new_word_length_count=0\n  local new_word_length_index=0\n\
    \  local new_word_length_index_count=0\n  local new_word_length_index_count2=0\n\
    \  local new_word_length_index_count3=0\n  local new_word_length_index_count4=0\n\
    \  local new_word_length_index_count5=0\n  local new_word_length_index_count6=0\n\
    \  local new_word_length_index_count7=0\n  local new_word_length_index_count8=0\n\
    \  local new_word_length_index_count9=0\n  local new_word_length_index_count10=0\n\
    \  local new_word_length_index_count11=0\n  local new_word_length_index_count12=0\n\
    \  local new_word_length_index_count13=0\n  local new_word_length_index_count14=0\n\
    \  local new_word_length_index_count15=0\n  local new_word_length_index_count16=0\n\
    \  local new_word_length_index_count17=0\n  local new_word_length_index_count18=0\n\
    \  local new_word_length_index_count19=0\n  local new_word_length_index_count20=0\n\
    \  local new_word_length_index_count21=0\n  local new_word_length_index_count22=0\n\
    \  local new_word_length_index_count23=0\n  local new_word_length_index_count24=0\n\
    \  local new_word_length_index_count25=0\n  local new_word_length_index_count26=0\n\
    \  local new_word_length_index_count27=0\n  local new_word_length_index_count28=0\n\
    \  local new_word_length_index_count29=0\n  local new_word_length_index_count30=0\n\
    \  local new_word_length_index_count31=0\n  local new_word_length_index_count32=0\n\
    \  local new_word_length_index_count33=0\n  local new_word_length_index_count34=0\n\
    \  local new_word_length_index_count35=0\n  local new_word_length_index_count36=0\n\
    \  local new_word_length_index_count37=0\n  local new_word_length_index_count38=0\n\
    \  local new_word_length_index_count39=0\n  local new_word_length_index_count40=0\n\
    \  local new_word_length_index_count41=0\n  local new_word_length_index_count42=0\n\
    \  local new_word_length_index_count43=0\n  local new_word_length_index_count44=0\n\
    \  local new_word_length_index_count45=0\n  local new_word_length_index_count46=0\n\
    \  local new_word_length_index_count47=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_list=\"\"\n  local word_list_count=0\n  local word_list_index=0\n\
    \  local word_list_length=0\n  local word_list_element=\"\"\n  local word_list_element_count=0\n\
    \  local word_list_element_index=0\n  local word_list_element_length=0\n  local\
    \ word_list_element_char=\"\"\n  local word_list_element_char_count=0\n  local\
    \ word_list_element_char_length=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_char_index=0\n  local word_list_element_char_index=0\n  local\
    \ word_list_element_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local new_count=0\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_length_count=0\n  local\
    \ word_length_index=0\n  local word_length_count2=0\n  local word_length_index2=0\n\
    \  local word_length_count3=0\n  local word_length_index3=0\n  local word_length_count4=0\n\
    \  local word_length_index4=0\n  local word_length_count5=0\n  local word_length_index5=0\n\
    \  local word_length_count6=0\n  local word_length_index6=0\n  local word_length_count7=0\n\
    \  local word_length_index7=0\n  local word_length_count8=0\n  local word_length_index8=0\n\
    \  local word_length_count9=0\n  local word_length_index9=0\n  local word_length_count10=0\n\
    \  local word_length_index10=0\n  local word_length_count11=0\n  local word_length_index11=0\n\
    \  local word_length_count12=0\n  local word_length_index12=0\n  local word_length_count13=0\n\
    \  local word_length_index13=0\n  local word_length_count14=0\n  local word_length_index14=0\n\
    \  local word_length_count15=0\n  local word_length_index15=0\n  local word_length_count16=0\n\
    \  local word_length_index16=0\n  local word_length_count17=0\n  local word_length_index17=0\n\
    \  local word_length_count18=0\n  local word_length_index18=0\n  local word_length_count19=0\n\
    \  local word_length_index19=0\n  local word_length_count20=0\n  local word_length_index20=0\n\
    \  local word_length_count21=0\n  local word_length_index21=0\n  local word_length_count22=0\n\
    \  local word_length_index22=0\n  local word_length_count23=0\n  local word_length_index23=0\n\
    \  local word_length_count24=0\n  local word_length_index24=0\n  local word_length_count25=0\n\
    \  local word_length_index25=0\n  local word_length_count26=0\n  local word_length_index26=0\n\
    \  local word_length_count27=0\n  local word_length_index27=0\n  local word_length_count28=0\n\
    \  local word_length_index28=0\n  local word_length_count29=0\n  local word_length_index29=0\n\
    \  local word_length_count30=0\n  local word_length_index30=0\n  local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=($string)\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=$#word_array\n\
    \  local word_count1=0\n  local word_index1=0\n  local word_length1=$#word_array\n\
    \  local word_count2=0\n  local word_index2=0\n  local word_length2=$#word_array\n\
    \  local word_count3=0\n  local word_index3=0\n  local word_length3=$#word_array\n\
    \  local word_count4=0\n  local word_index4=0\n  local word_length4=$#word_array\n\
    \  local word_count5=0\n  local word_index5=0\n  local word_length5=$#word_array\n\
    \  local word_count6=0\n  local word_index6=0\n  local word_length6=$#word_array\n\
    \  local word_count7=0\n  local word_index7=0\n  local word_length7=$#word_array\n\
    \  local word_count8=0\n  local word_index8=0\n  local word_length8=$#word_array\n\
    \  local word_count9=0\n  local word_index9=0\n  local word_length9=$#word_array\n\
    \  local word_count10=0\n  local word_index10=0\n  local word_length10=$#word_array\n\
    \  local word_count11=0\n  local word_index11=0\n  local word_length11=$#word_array\n\
    \  local word_count12=0\n  local word_index12=0\n  local word_length12=$#word_array\n\
    \  local word_count13=0\n  local word_index13=0\n  local word_length13=$#word_array\n\
    \  local word_count14=0\n  local word_index14=0\n  local word_length14=$#word_array\n\
    \  local word_count15=0\n  local word_index15=0\n  local word_length15=$#word_array\n\
    \  local word_count16=0\n  local word_index16=0\n  local word_length16=$#word_array\n\
    \  local word_count17=0\n  local word_index17=0\n  local word_length17=$#word_array\n\
    \  local word_count18=0\n  local word_index18=0\n  local word_length18=$#word_array\n\
    \  local word_count19=0\n  local word_index19=0\n  local word_length19=$#word_array\n\
    \  local word_count20=0\n  local word_index20=0\n  \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    while [ $i -gt 0 ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprrd0abt9.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmprrd0abt9.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_count=0\n  local word_char_char_length=0\n\
    \  local word_char_char_index=0\n  local word_char_char_char_index=0\n  local\
    \ word_char_char_char_length=0\n  local word_char_char_char_char_index=0\n  local\
    \ word_char_char_char_char_length=0\n  local word_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_length=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=($string)\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=$((${#string}\
    \ / 2))\n  local word_length_count=0\n  local word_length_array=(${#string})\n\
    \  local word_length_array_count=0\n  local word_length_array_index=0\n  local\
    \ word_length_array_length=$((${#word_length_array[@]}))\n  local word_length_array_length_count=0\n\
    \  local word_length_array_length_array_count=0\n  local word_length_array_length_array_index=0\n\
    \  local word_length_array_length_array_length=$((${#word_length_array_length[@]}))\n\
    \  local word_length_array_length_array_length_array_count=0\n  local word_length_array_length_array_length_array_index=0\n\
    \  local word_length_array_length_array_length_array_length=$((${#word_length_array_length_array[@]}))\n\
    \  local word_length_array_length_array_length_array_length_array_count=0\n  local\
    \ word_length_array_length_array_length_array_length_array_index=0\n  local word_length_array_length_array_length_array_length_array_length=$((${#word_length_array_length_array_length[@]}))\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_count=0\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_index=0\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length=$((${#word_length_array_length_array_length_array[@]}))\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length_array_count=0\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length_array_index=0\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length_array_length=$((${#word_length_array_length_array_length_array[@]}))\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_count=0\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_index=0\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length=$((${#word_length_array_length_array_length_array_length_array[@]}))\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_count=0\n\
    \  local word_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_length_array_count=0\n\
    \  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_index=0\n  local\
    \ word_length_count=0\n  local word_length_max=0\n  local word_length_min=0\n\
    \  local word_length_min_index=0\n  local word_length_max_index=0\n  local word_length_min_count=0\n\
    \  local word_length_max_count=0\n  local word_length_min_max=0\n  local word_length_min_max_index=0\n\
    \  local word_length_min_max_count=0\n  local word_length_min_max_max=0\n  local\
    \ word_length_min_max_max_index=0\n  local word_length_min_max_max_count=0\n \
    \ local word_length_min_max_max_max=0\n  local word_length_min_max_max_index=0\n\
    \  local word_length_min_max_max_count=0\n  local word_length_min_max_max_max=0\n\
    \  local word_length_min_max_max_index=0\n  local word_length_min_max_max_count=0\n\
    \  local word_length_min_max_max_max=0\n  local word_length_min_max_max_index=0\n\
    \  local word_length_min_max_max_count=0\n  local word_length_min_max_max_max=0\n\
    \  local word_length_min_max_max_index=0\n  local word_length_min_max_max_count=0\n\
    \  local word_length_min_max_max_max=0\n  local word_length_min_max_max_index=0\n\
    \  local word_length_min_max_max_count=0\n  local word_length_min_max_max_max=0\n\
    \  local word_length_min_max_max_index=0\n  local word_length_min_max_max_count=0\n\
    \  local word_length_min_max_max_max=0\n  local word_length_min_max_max_index=0\n\
    \  local word_length_min_max_max_count=0\n  local word_length_min_max_max_max=0\n\
    \  local word_length_min_max_max_index=0\n  local word_length_min_max_max_count=0\n\
    \  local word_length_min_max_max_max=0\n  local word_length_min_max_max_index=0\n\
    \  local word_length_min_max_max_count=0\n  local word_length_min_max_max_max=0\n\
    \  local word_length_min_max_max_index=0\n  local word_length_min_max_max_count=0\n\
    \  local word_length_min_max_max_max=0\n  local word_length_min_max_max_index=0\n\
    \  local word_length_min_max_max_count=0\n  local word_length_min_max_max_max=0\n\
    \  local word_length_min_max_max_index=0\n  local word_length_min_max_max_count=0\n\
    \  local word_length_min_max_max_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char_count=0\n\
    \  local word_char_length=0\n  local word_char_array=()\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_array=()\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_array_count=0\n  local\
    \ word_char_length_array_index=0\n  local word_char_length_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_array=()\n  local word_array_length=${#string}\n\
    \  local word_array_elements=0\n  local word_array_elements_length=0\n  local\
    \ word_array_elements_index=0\n  local word_array_elements_index_length=0\n  local\
    \ word_array_elements_index_length2=0\n  local word_array_elements_index_length3=0\n\
    \  local word_array_elements_index_length4=0\n  local word_array_elements_index_length5=0\n\
    \  local word_array_elements_index_length6=0\n  local word_array_elements_index_length7=0\n\
    \  local word_array_elements_index_length8=0\n  local word_array_elements_index_length9=0\n\
    \  local word_array_elements_index_length10=0\n  local word_array_elements_index_length11=0\n\
    \  local word_array_elements_index_length12=0\n  local word_array_elements_index_length13=0\n\
    \  local word_array_elements_index_length14=0\n  local word_array_elements_index_length15=0\n\
    \  local word_array_elements_index_length16=0\n  local word_array_elements_index_length17=0\n\
    \  local word_array_elements_index_length18=0\n  local word_array_elements_index_length19=0\n\
    \  local word_array_elements_index_length20=0\n  local word_array_elements_index_length21=0\n\
    \  local word_array_elements_index_length22=0\n  local word_array_elements_index_length23=0\n\
    \  local word_array_elements_index_length24=0\n  local word_array_elements_index_length25=0\n\
    \  local word_array_elements_index_length26=0\n  local word_array_elements_index_length27=0\n\
    \  local word_array_elements_index_length28=0\n  local word_array_elements_index_length29=0\n\
    \  local word_array_elements_index_length30=0\n  local word_array_elements_index_length31=0\n\
    \  local word_array_elements_index_length32=0\n  local word_array_elements_index_length33=0\n\
    \  local word_array_elements_index_length34=0\n  local word_array_elements_index_length35=0\n\
    \  local word_array_elements_index_length36=0\n  local word_array_elements_index_length37=0\n\
    \  local word_array_elements_index_length38=0\n  local word_array_elements_index_length39=0\n\
    \  local word_array_elements_index_length40=0\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_length_count=0\n\
    \  local word_length_max=0\n  local word_length_max_count=0\n  local word_length_min=0\n\
    \  local word_length_min_count=0\n  local word_length_avg=0\n  local word_length_avg_count=0\n\
    \  local word_length_median=0\n  local word_length_median_count=0\n  local word_length_min_index=0\n\
    \  local word_length_max_index=0\n  local word_length_min_index=0\n  local word_length_max_index=0\n\
    \  local word_length_min_count=0\n  local word_length_max_count=0\n  local word_length_min_avg=0\n\
    \  local word_length_max_avg=0\n  local word_length_min_median=0\n  local word_length_max_median=0\n\
    \  local word_length_min_avg_index=0\n  local word_length_max_avg_index=0\n  local\
    \ word_length_min_median_index=0\n  local word_length_max_median_index=0\n  local\
    \ word_length_min_avg_index=0\n  local word_length_max_avg_index=0\n  local word_length_min_median_index=0\n\
    \  local word_length_max_median_index=0\n  local word_length_min_avg_index=0\n\
    \  local word_length_max_avg_index=0\n  local word_length_min_median_index=0\n\
    \  local word_length_max_median_index=0\n  local word_length_min_avg_index=0\n\
    \  local word_length_max_avg_index=0\n  local word_length_min_median_index=0\n\
    \  local word_length_max_median_index=0\n  local word_length_min_avg_index=0\n\
    \  local word_length_max_avg_index=0\n  local word_length_min_median_index=0\n\
    \  local word_length_max_median_index=0\n  local word_length_min_avg_index=0\n\
    \  local word_length_max_avg_index=0\n  local word_length_min_median_index=0\n\
    \  local word_length_max_median_index=0\n  local word_length_min_avg_index=0\n\
    \  local word_length_max_avg_index=0\n  local word_length_min_median_index=0\n\
    \  local word_length_max_median_index=0\n  local word_length_min_avg_index=0\n\
    \  local word_length_max_avg_index=0\n  local word_length_min_median_index=0\n\
    \  local word_length_max_median_index=0\n  local word_length_min_avg_index=0\n\
    \  local word_length_max_avg_index=0\n  local word_length_min_median_index=0\n\
    \  local word_length_max_median_index=0\n  local word_length_min_avg_index=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_list=\"\"\n    local word_list_count=0\n    local\
    \ word_list_count2=0\n    local word_list_count3=0\n    local word_list_count4=0\n\
    \    local word_list_count5=0\n    local word_list_count6=0\n    local word_list_count7=0\n\
    \    local word_list_count8=0\n    local word_list_count9=0\n    local word_list_count10=0\n\
    \    local word_list_count11=0\n    local word_list_count12=0\n    local word_list_count13=0\n\
    \    local word_list_count14=0\n    local word_list_count15=0\n    local word_list_count16=0\n\
    \    local word_list_count17=0\n    local word_list_count18=0\n    local word_list_count19=0\n\
    \    local word_list_count20=0\n    local word_list_count21=0\n    local word_list_count22=0\n\
    \    local word_list_count23=0\n    local word_list_count24=0\n    local word_list_count25=0\n\
    \    local word_list_count26=0\n    local word_list_count27=0\n    local word_list_count28=0\n\
    \    local word_list_count29=0\n    local word_list_count30=0\n    local word_list_count31=0\n\
    \    local word_list_count32=0\n    local word_list_count33=0\n    local word_list_count34=0\n\
    \    local word_list_count35=0\n    local word_list_count36=0\n    local word_list_count37=0\n\
    \    local word_list_count38=0\n    local word_list_count39=0\n    local word_list_count40=0\n\
    \    local word_list_count41=0\n    local word_list_count42=0\n    local word_list_count43=0\n\
    \    local word_list_count44=0\n    local word_list_count45=0\n    local word_list_count46=0\n\
    \    local word_list_count47=0\n    local word_list_count48=0\n    local word_list_count49=0\n\
    \    local word_list_count50=0\n    local word_list_count51=0\n    local word_list_count52=0\n\
    \    local word_list_count53=0\n    local word_list_count54=0\n    local word_list_count55=0\n\
    \    local word_list_count56=0\n    local word_list_count57=0\n    local word_list_count58=0\n\
    \    local word_list_count59=0\n    local word_list_count60=0\n    local word_list_count61=0\n\
    \    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_character_index=0\n\
    \    local word_character_index2=0\n    local word_character_index3=0\n    local\
    \ word_character_index4=0\n    local word_character_index5=0\n    local word_character_index6=0\n\
    \    local word_character_index7=0\n    local word_character_index8=0\n    local\
    \ word_character_index9=0\n    local word_character_index10=0\n    local word_character_index11=0\n\
    \    local word_character_index12=0\n    local word_character_index13=0\n    local\
    \ word_character_index14=0\n    local word_character_index15=0\n    local word_character_index16=0\n\
    \    local word_character_index17=0\n    local word_character_index18=0\n    local\
    \ word_character_index19=0\n    local word_character_index20=0\n    local word_character_index21=0\n\
    \    local word_character_index22=0\n    local word_character_index23=0\n    local\
    \ word_character_index24=0\n    local word_character_index25=0\n    local word_character_index26=0\n\
    \    local word_character_index27=0\n    local word_character_index28=0\n    local\
    \ word_character_index29=0\n    local word_character_index30=0\n    local word_character_index31=0\n\
    \    local word_character_index32=0\n    local word_character_index33=0\n    local\
    \ word_character_index34=0\n    local word_character_index35=0\n    local word_character_index36=0\n\
    \    local word_character_index37=0\n    local word_character_index38=0\n    local\
    \ word_character_index39=0\n    local word_character_index40=0\n    local word_character_index41=0\n\
    \    local word_character_index42=0\n    local word_character_index43=0\n    local\
    \ word_character_index44=0\n    local word_character_index45=0\n    local word_character_index46=0\n\
    \    local word_character_index47=0\n    local word_character_index48=0\n    local\
    \ word_character_index49=0\n    local word_character_index50=0\n    local word_character_index51=0\n\
    \    local word_character_index52=0\n    local word_character_index53=0\n    local\
    \ word_character_index54=0\n    local word_character_index55=0\n    local word_character_index56=0\n\
    \    local word_character_index57=0\n    local word_character_index58=0\n    local\
    \ word_character_index59=0\n    local word_character_index60=0\n    local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local words=$(echo $string | sed 's/\
    \ /\\n/g')\n    local sorted_words=$(echo $words | sort -u)\n    local sorted_string=$(echo\
    \ $sorted_words | sed 's/\\n/ /g')\n    echo $sorted_string\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local words=($string)\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_character\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local words=()\n  local word=''\n \
    \ local i=0 j=0\n  while [ $i -lt ${#string} ]; do\n    word=\"${string[$i]}\"\
    \n    words[$j]=\"$word\"\n    ((i++))\n    ((j++))\n  done\n  local j=0\n  while\
    \ [ $j -lt ${#words[*]} ]; do\n    word=\"${words[$j]}\"\n    string=\"$word $string\"\
    \n    ((j++))\n  done\n  echo \"$string\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char_count=0\n\
    \    local word_char_length=0\n    local word_char_array=()\n    local word_char_array_index=0\n\
    \    local word_char_array_length=0\n    local word_char_array_index2=0\n    local\
    \ word_char_array_length2=0\n    local word_char_array_index3=0\n    local word_char_array_length3=0\n\
    \    local word_char_array_index4=0\n    local word_char_array_length4=0\n   \
    \ local word_char_array_index5=0\n    local word_char_array_length5=0\n    local\
    \ word_char_array_index6=0\n    local word_char_array_length6=0\n    local word_char_array_index7=0\n\
    \    local word_char_array_length7=0\n    local word_char_array_index8=0\n   \
    \ local word_char_array_length8=0\n    local word_char_array_index9=0\n    local\
    \ word_char_array_length9=0\n    local word_char_array_index10=0\n    local word_char_array_length10=0\n\
    \    local word_char_array_index11=0\n    local word_char_array_length11=0\n \
    \   local word_char_array_index12=0\n    local word_char_array_length12=0\n  \
    \  local word_char_array_index13=0\n    local word_char_array_length13=0\n   \
    \ local word_char_array_index14=0\n    local word_char_array_length14=0\n    local\
    \ word_char_array_index15=0\n    local word_char_array_length15=0\n    local word_char_array_index16=0\n\
    \    local word_char_array_length16=0\n    local word_char_array_index17=0\n \
    \   local word_char_array_length17=0\n    local word_char_array_index18=0\n  \
    \  local word_char_array_length18=0\n    local word_char_array_index19=0\n   \
    \ local word_char_array_length19=0\n    local word_char_array_index20=0\n    local\
    \ word_char_array_length20=0\n    local word_char_array_index21=0\n    local word_char_array_length21=0\n\
    \    local word_char_array_index22=0\n    local word_char_array_length22=0\n \
    \   local word_char_array_index23=0\n    local word_char_array_length23=0\n  \
    \  local word_char_array_index24=0\n    local word_char_array_length24=0\n   \
    \ local word_char_array_index25=0\n    local word_char_array_length25=0\n    local\
    \ word_char_array_index26=0\n    local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char=0\n\
    \  local word_char_length=0\n  local word_char_array=()\n  local word_char_length_count=0\n\
    \  local word_char_length_index=0\n  local word_char_length_char=0\n  local word_char_length_char_length=0\n\
    \  local word_char_length_char_array=()\n  local word_char_length_char_length_count=0\n\
    \  local word_char_length_char_length_index=0\n  local word_char_length_char_length_char=0\n\
    \  local word_char_length_char_length_char_length=0\n  local word_char_length_char_length_char_array=()\n\
    \  local word_char_length_char_length_char_length_count=0\n  local word_char_length_char_length_char_length_index=0\n\
    \  local word_char_length_char_length_char_length_char=0\n  local word_char_length_char_length_char_length_char_length=0\n\
    \  local word_char_length_char_length_char_length_char_array=()\n  local word_char_length_char_length_char_length_char_length_count=0\n\
    \  local word_char_length_char_length_char_length_char_length_index=0\n  local\
    \ word_char_length_char_length_char_length_char_length_char=0\n  local word_char_length_char_length_char_length_char_length_char_length=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_array=()\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_count=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_index=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_length=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_array=()\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_length_count=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_length_index=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_length_char=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_length_char_length=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_length_char_array=()\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_length_char_length_count=0\n\
    \  local word_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index=0\n\
    \  local word_char_length_char_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ new_string2=\"\"\n    local new_string3=\"\"\n    local new_string4=\"\"\n \
    \   local new_string5=\"\"\n    local new_string6=\"\"\n    local new_string7=\"\
    \"\n    local new_string8=\"\"\n    local new_string9=\"\"\n    local new_string10=\"\
    \"\n    local new_string11=\"\"\n    local new_string12=\"\"\n    local new_string13=\"\
    \"\n    local new_string14=\"\"\n    local new_string15=\"\"\n    local new_string16=\"\
    \"\n    local new_string17=\"\"\n    local new_string18=\"\"\n    local new_string19=\"\
    \"\n    local new_string20=\"\"\n    local new_string21=\"\"\n    local new_string22=\"\
    \"\n    local new_string23=\"\"\n    local new_string24=\"\"\n    local new_string25=\"\
    \"\n    local new_string26=\"\"\n    local new_string27=\"\"\n    local new_string28=\"\
    \"\n    local new_string29=\"\"\n    local new_string30=\"\"\n    local new_string31=\"\
    \"\n    local new_string32=\"\"\n    local new_string33=\"\"\n    local new_string34=\"\
    \"\n    local new_string35=\"\"\n    local new_string36=\"\"\n    local new_string37=\"\
    \"\n    local new_string38=\"\"\n    local new_string39=\"\"\n    local new_string40=\"\
    \"\n    local new_string41=\"\"\n    local new_string42=\"\"\n    local new_string43=\"\
    \"\n    local new_string44=\"\"\n    local new_string45=\"\"\n    local new_string46=\"\
    \"\n    local new_string47=\"\"\n    local new_string48=\"\"\n    local new_string49=\"\
    \"\n    local new_string50=\"\"\n    local new_string51=\"\"\n    local new_string52=\"\
    \"\n    local new_string53=\"\"\n    local new_string54=\"\"\n    local new_string55=\"\
    \"\n    local new_string56=\"\"\n    local new_string57=\"\"\n    local new_string58=\"\
    \"\n    local new_string59=\"\"\n    local new_string60=\"\"\n    local new_string61=\"\
    \"\n    local new_string62=\"\"\n    local new_string63=\"\"\n    local new_string64=\"\
    \"\n    local new_string65=\"\"\n    local new_string66=\"\"\n    local new_string67=\"\
    \"\n    local new_string68=\"\"\n    local new_string69=\"\"\n    local new_string70=\"\
    \"\n    local new_string71=\"\"\n    local new_string72=\"\"\n    local new_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char=0\n\
    \  local word_char_length=0\n  local word_char_length_count=0\n  local word_char_length_index=0\n\
    \  local word_char_length_count2=0\n  local word_char_length_index2=0\n  local\
    \ word_char_length_count3=0\n  local word_char_length_index3=0\n  local word_char_length_count4=0\n\
    \  local word_char_length_index4=0\n  local word_char_length_count5=0\n  local\
    \ word_char_length_index5=0\n  local word_char_length_count6=0\n  local word_char_length_index6=0\n\
    \  local word_char_length_count7=0\n  local word_char_length_index7=0\n  local\
    \ word_char_length_count8=0\n  local word_char_length_index8=0\n  local word_char_length_count9=0\n\
    \  local word_char_length_index9=0\n  local word_char_length_count10=0\n  local\
    \ word_char_length_index10=0\n  local word_char_length_count11=0\n  local word_char_length_index11=0\n\
    \  local word_char_length_count12=0\n  local word_char_length_index12=0\n  local\
    \ word_char_length_count13=0\n  local word_char_length_index13=0\n  local word_char_length_count14=0\n\
    \  local word_char_length_index14=0\n  local word_char_length_count15=0\n  local\
    \ word_char_length_index15=0\n  local word_char_length_count16=0\n  local word_char_length_index16=0\n\
    \  local word_char_length_count17=0\n  local word_char_length_index17=0\n  local\
    \ word_char_length_count18=0\n  local word_char_length_index18=0\n  local word_char_length_count19=0\n\
    \  local word_char_length_index19=0\n  local word_char_length_count20=0\n  local\
    \ word_char_length_index20=0\n  local word_char_length_count21=0\n  local word_char_length_index21=0\n\
    \  local word_char_length_count22=0\n  local word_char_length_index22=0\n  local\
    \ word_char_length_count23=0\n  local word_char_length_index23=0\n  local word_char_length_count24=0\n\
    \  local word_char_length_index24=0\n  local word_char_length_count25=0\n  local\
    \ word_char_length_index25=0\n  local word_char_length_count26=0\n  local word_char_length\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char_length=0\n  local word_char_index=0\n \
    \ local word_char_char_index=0\n  local word_char_char_count=0\n  local word_char_char_length=0\n\
    \  local word_char_char_index=0\n  local word_char_char_char_index=0\n  local\
    \ word_char_char_char_count=0\n  local word_char_char_char_length=0\n  local word_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_count=0\n  local word_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_count=0\n  local word_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_count=0\n  local word_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_count=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_count=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_length=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_char_index=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_char_count=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_char_length=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=$(echo\
    \ \"$string\" | sed 's/ /\\n/g')\n    local word\n    for word in $words; do\n\
    \        local char\n        for char in $(echo \"$word\" | sed 's/\\(.\\)/\\\
    1 /g'); do\n            local ascii\n            ascii=$(echo \"$char\" | sed\
    \ 's/\\(.\\)/\\1 /g' | sed 's/ //g' | tr -cd '[:print:]')\n            local new_char\n\
    \            if [ \"$ascii\" -lt 97 ]; then\n                new_char=$(echo \"\
    $char\" | sed 's/\\(.\\)/\\1 /g' | sed 's/ //g' | tr -cd '[:lower:]')\n      \
    \      elif [ \"$ascii\" -lt 122 ]; then\n                new_char=$(echo \"$char\"\
    \ | sed 's/\\(.\\)/\\1 /g' | sed 's/ //g' | tr -cd '[:upper:]')\n            else\n\
    \                new_char=$(echo \"$char\" | sed 's/\\(.\\)/\\1 /g' | sed 's/\
    \ //g' | tr -cd '[:space:]')\n            fi\n            output+=\"$new_char\"\
    \n        done\n        output+=\" \"\n    done\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6l4ux2c7.sh: line 27: [: H: integer expression expected

    /tmp/tmp6l4ux2c7.sh: line 29: [: H: integer expression expected

    /tmp/tmp6l4ux2c7.sh: line 27: [: i: integer expression expected

    /tmp/tmp6l4ux2c7.sh: line 29: [: i: integer expression expected

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_list=\"\"\n  local word_list_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n  local word_list_sorted=\"\
    \"\n  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    while [ $i -gt 0 ]; do\n        local c=${string:$i:1}\n \
    \       local k=$(echo $c | tr -dc '[:alpha:]')\n        local l=$(echo $c | tr\
    \ -dc '[:lower:]')\n        local m=$(echo $c | tr -dc '[:upper:]')\n        local\
    \ n=$(echo $c | tr -dc '[:punct:]')\n        local o=$(echo $c | tr -dc '[:space:]')\n\
    \        local p=$(( $i + 1 ))\n        local q=$(( $i + 2 ))\n        local r=$((\
    \ $i + 3 ))\n        local s=$(( $i + 4 ))\n        local t=$(( $i + 5 ))\n  \
    \      local u=$(( $i + 6 ))\n        local v=$(( $i + 7 ))\n        local w=$((\
    \ $i + 8 ))\n        local x=$(( $i + 9 ))\n        local y=$(( $i + 10 ))\n \
    \       local z=$(( $i + 11 ))\n        local A=$(( $i + 12 ))\n        local\
    \ B=$(( $i + 13 ))\n        local C=$(( $i + 14 ))\n        local D=$(( $i + 15\
    \ ))\n        local E=$(( $i + 16 ))\n        local F=$(( $i + 17 ))\n       \
    \ local G=$(( $i + 18 ))\n        local H=$(( $i + 19 ))\n        local I=$((\
    \ $i + 20 ))\n        local J=$(( $i + 21 ))\n        local K=$(( $i + 22 ))\n\
    \        local L=$(( $i + 23 ))\n        local M=$(( $i + 24 ))\n        local\
    \ N=$(( $i + 25 ))\n        local O=$(( $i + 26 ))\n        local P=$(( $i + 27\
    \ ))\n        local Q=$(( $i + 28 ))\n        local R=$(( $i + 29 ))\n       \
    \ local S=$(( $i + 30 ))\n        local T=$(( $i + 31 ))\n        local U=$((\
    \ $i + 32 ))\n        local V=$(( $i + 33 ))\n        local W=$(( $i + 34 ))\n\
    \        local X=$(( $i + 35 ))\n        local Y=$(( $i + 36 ))\n        local\
    \ Z=$(( $i + 37 ))\n        local a=$(( $i + 38 ))\n        \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw1jorsnl.sh: line 67: syntax error near unexpected token `}''

    /tmp/tmpw1jorsnl.sh: line 67: `}''

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    while [ $i -ge 0 ]; do\n        local j=$((${#string} - 1))\n   \
    \     while [ $j -ge 0 ] && [ $string[$j] -eq \" \" ]; do\n            ((j--))\n\
    \        done\n        local k=$((${#string} - 1))\n        while [ $k -ge 0 ]\
    \ && [ $string[$k] -eq \" \" ]; do\n            ((k--))\n        done\n      \
    \  local new_string=\"$new_string ${string[$i]}${string[$j]}\"\n        ((i--))\n\
    \        ((j--))\n    done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphtp3a9iy.sh: line 22: [: Hi[1]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 26: [: Hi[1]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 22: [: Hi[1]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 26: [: Hi[1]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 22: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 26: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 22: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 26: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 22: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 26: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 22: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 26: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 22: [: hello[4]: integer expression expected

    /tmp/tmphtp3a9iy.sh: line 26: [: hello[4]: integer expression expected

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local words=$(echo \"$string\" | sed\
    \ 's/ /\\n/g' | sort -u)\n  local result=\"\"\n  for word in $words; do\n    local\
    \ chars=$(echo \"$word\" | sed 's/ /\\n/g' | sort -u)\n    local char\n    for\
    \ char in $chars; do\n      local ascii=$(echo \"$char\" | sed 's/ /\\n/g' | sort\
    \ -u | tr -d '\\n')\n      local new_char=$(echo \"$char\" | sed 's/ /\\n/g' |\
    \ sort -u | tr '\\n' ' ')\n      result+=\"$(echo \"$ascii\" | sed 's/ /\\n/g'\
    \ | sort -u | tr -d '\\n')$new_char\"\n    done\n    result+=\" $word\"\n  done\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=($string)\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_character\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_count\n    local word_character_position\n    local\
    \ word_character_position_index\n    local word_character_position_length\n  \
    \  local word_character_position_count\n    local word_character_position_position\n\
    \    local word_character_position_position_index\n    local word_character_position_position_length\n\
    \    local word_character_position_position_count\n    local word_character_position_position_position\n\
    \    local word_character_position_position_position_index\n    local word_character_position_position_position_length\n\
    \    local word_character_position_position_position_count\n    local word_character_position_position_position_position\n\
    \    local word_character_position_position_position_position_index\n    local\
    \ word_character_position_position_position_position_length\n    local word_character_position_position_position_position_count\n\
    \    local word_character_position_position_position_position_position\n    local\
    \ word_character_position_position_position_position_position_index\n    local\
    \ word_character_position_position_position_position_position_length\n    local\
    \ word_character_position_position_position_position_position_count\n    local\
    \ word_character_position_position_position_position_position_position\n    local\
    \ word_character_position_position_position_position_position_position_index\n\
    \    local word_character_position_position_position_position_position_position_length\n\
    \    local word_character_position_position_position_position_position_position_count\n\
    \    local word_character_position_position_position_position_position_position_position\n\
    \    local word_character_position_position_position_position_position_position_position_index\n\
    \    local word_character_position_position_position_position_position_position_position_length\n\
    \    local word_character_position_position_position_position_position_position_position_count\n\
    \    local word_character_position_position_position_position_position_position_position_position\n\
    \    local word_character_position_position_position_position_position_position_position_position_index\n\
    \    local word_character_position_position_position_position_position_position_position_length\n\
    \    local word_character_position_position_position_position_position_position_position_position_count\n\
    \    local word_character_position_position_position_position_position_position_position_position_position\n\
    \    local word_character_position_position_position_position_position_position_position_position_position_index\n\
    \    local word_character_position_position_position_position_position_position_position_position_position_length\n\
    \    local word_character_position_position_position_position_position_position_position_position_position_count\n\
    \    local word_character_position_position_position_position_position_position_position_position_position_position\n\
    \    local word_character_position_position_position_position_position_position_position_position_position_position_index\n\
    \    local word_character_position_position_position_position_position_position_position_position_position_position_length\n\
    \    local word_character_position_position_position_position_position_position_position_position_position_position_count\n\
    \    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local words=$(echo\
    \ \"$string\" | sed 's/ /\\n/g')\n  local word_count=0\n  local word_index=0\n\
    \  local word_length=0\n  local word_char_index=0\n  local word_char_length=0\n\
    \  local word_char_count=0\n  local word_char_position=0\n  local word_char_position_index=0\n\
    \  local word_char_position_length=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_length=0\n  local word_char_position_index=0\n  local word_char_position_length=0\n\
    \  local word_char_position_index=0\n  local word_char_position_length=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_length=0\n  local word_char_position_index=0\n\
    \  local word_char_position_length=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_length=0\n  local word_char_position_index=0\n  local word_char_position_length=0\n\
    \  local word_char_position_index=0\n  local word_char_position_length=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_length=0\n  local word_char_position_index=0\n\
    \  local word_char_position_length=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_length=0\n  local word_char_position_index=0\n  local word_char_position_length=0\n\
    \  local word_char_position_index=0\n  local word_char_position_length=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_length=0\n  local word_char_position_index=0\n\
    \  local word_char_position_length=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_length=0\n  local word_char_position_index=0\n  local word_char_position_length=0\n\
    \  local word_char_position_index=0\n  local word_char_position_length=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_length=0\n  local word_char_position_index=0\n\
    \  local word_char_position_length=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_length=0\n  local word_char_position_index=0\n  local word_char_position_length=0\n\
    \  local word_char_position_index=0\n  local word_char_position_length=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_length=0\n  local word_char_position_index=0\n\
    \  local word_char_position_length=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_length=0\n  local word_char_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    while [ $i -ge 0 ]; do\n        local j=$((${#string} - 1))\n   \
    \     while [ $j -ge 0 ] && [ $string[$j] -eq \" \" ]; do\n            ((j--))\n\
    \        done\n        new_string+=\"${string[$i]} ${string[$j]}\"\n        ((i--))\n\
    \        ((j++))\n    done\n    echo \"$new_string\"\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf8s355ks.sh: line 22: [: Hi[1]: integer expression expected

    /tmp/tmpf8s355ks.sh: line 22: [: Hi[1]: integer expression expected

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_list=\"\
    \"\n    local word_list2=\"\"\n    local word_list3=\"\"\n    local word_list4=\"\
    \"\n    local word_list5=\"\"\n    local word_list6=\"\"\n    local word_list7=\"\
    \"\n    local word_list8=\"\"\n    local word_list9=\"\"\n    local word_list10=\"\
    \"\n    local word_list11=\"\"\n    local word_list12=\"\"\n    local word_list13=\"\
    \"\n    local word_list14=\"\"\n    local word_list15=\"\"\n    local word_list16=\"\
    \"\n    local word_list17=\"\"\n    local word_list18=\"\"\n    local word_list19=\"\
    \"\n    local word_list20=\"\"\n    local word_list21=\"\"\n    local word_list22=\"\
    \"\n    local word_list23=\"\"\n    local word_list24=\"\"\n    local word_list25=\"\
    \"\n    local word_list26=\"\"\n    local word_list27=\"\"\n    local word_list28=\"\
    \"\n    local word_list29=\"\"\n    local word_list30=\"\"\n    local word_list31=\"\
    \"\n    local word_list32=\"\"\n    local word_list33=\"\"\n    local word_list34=\"\
    \"\n    local word_list35=\"\"\n    local word_list36=\"\"\n    local word_list37=\"\
    \"\n    local word_list38=\"\"\n    local word_list39=\"\"\n    local word_list40=\"\
    \"\n    local word_list41=\"\"\n    local word_list42=\"\"\n    local word_list43=\"\
    \"\n    local word_list44=\"\"\n    local word_list45=\"\"\n    local word_list46=\"\
    \"\n    local word_list47=\"\"\n    local word_list48=\"\"\n    local word_list49=\"\
    \"\n    local word_list50=\"\"\n    local word_list51=\"\"\n    local word_list52=\"\
    \"\n    local word_list53=\"\"\n    local word_list54=\"\"\n    local word_list55=\"\
    \"\n    local word_list56=\"\"\n    local word_list57=\"\"\n    local word_list58=\"\
    \"\n    local word_list59=\"\"\n    local word_list60=\"\"\n    local word_list61=\"\
    \"\n    local word_list62=\"\"\n    local word_list63=\"\"\n    local word_list64=\"\
    \"\n    local word_list65=\"\"\n    local word_list66=\"\"\n    local word_list67=\"\
    \"\n    local word_list68=\"\"\n    local word_list69=\"\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=()\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=0\n  local word_char_count=0\n\
    \  local word_char_length=0\n  local word_char_index=0\n  local word_char_array=()\n\
    \  local word_char_length_count=0\n  local word_char_length_array=()\n  local\
    \ word_char_length_index=0\n  local word_char_length_char_count=0\n  local word_char_length_char_array=()\n\
    \  local word_char_length_char_index=0\n  local word_char_length_char_array=()\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_char_length_char_array_index=0\n  local word_char_length_char_array_index=0\n\
    \  local word_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_index2=0\n    local word_char_index3=0\n    local word_char_index4=0\n\
    \    local word_char_index5=0\n    local word_char_index6=0\n    local word_char_index7=0\n\
    \    local word_char_index8=0\n    local word_char_index9=0\n    local word_char_index10=0\n\
    \    local word_char_index11=0\n    local word_char_index12=0\n    local word_char_index13=0\n\
    \    local word_char_index14=0\n    local word_char_index15=0\n    local word_char_index16=0\n\
    \    local word_char_index17=0\n    local word_char_index18=0\n    local word_char_index19=0\n\
    \    local word_char_index20=0\n    local word_char_index21=0\n    local word_char_index22=0\n\
    \    local word_char_index23=0\n    local word_char_index24=0\n    local word_char_index25=0\n\
    \    local word_char_index26=0\n    local word_char_index27=0\n    local word_char_index28=0\n\
    \    local word_char_index29=0\n    local word_char_index30=0\n    local word_char_index31=0\n\
    \    local word_char_index32=0\n    local word_char_index33=0\n    local word_char_index34=0\n\
    \    local word_char_index35=0\n    local word_char_index36=0\n    local word_char_index37=0\n\
    \    local word_char_index38=0\n    local word_char_index39=0\n    local word_char_index40=0\n\
    \    local word_char_index41=0\n    local word_char_index42=0\n    local word_char_index43=0\n\
    \    local word_char_index44=0\n    local word_char_index45=0\n    local word_char_index46=0\n\
    \    local word_char_index47=0\n    local word_char_index48=0\n    local word_char_index49=0\n\
    \    local word_char_index50=0\n    local word_char_index51=0\n    local word_char_index52=0\n\
    \    local word_char_index53=0\n    local word_char_index54=0\n    local word_char_index55=0\n\
    \    local word_char_index56=0\n    local word_char_index57=0\n    local word_char_index58=0\n\
    \    local word_char_index59=0\n    local word_char_index60=0\n    local word_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_character_index=0\n\
    \    local word_character=\"\"\n    local word_character_index=0\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n    local word_character=\"\"\n    local word_character=\"\
    \"\n    local word_character=\"\"\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local word_array=()\n    local word_count=0\n    local word_length=0\n\
    \    local word_count2=0\n    local word_length2=0\n    local word_count3=0\n\
    \    local word_length3=0\n    local word_count4=0\n    local word_length4=0\n\
    \    local word_count5=0\n    local word_length5=0\n    local word_count6=0\n\
    \    local word_length6=0\n    local word_count7=0\n    local word_length7=0\n\
    \    local word_count8=0\n    local word_length8=0\n    local word_count9=0\n\
    \    local word_length9=0\n    local word_count10=0\n    local word_length10=0\n\
    \    local word_count11=0\n    local word_length11=0\n    local word_count12=0\n\
    \    local word_length12=0\n    local word_count13=0\n    local word_length13=0\n\
    \    local word_count14=0\n    local word_length14=0\n    local word_count15=0\n\
    \    local word_length15=0\n    local word_count16=0\n    local word_length16=0\n\
    \    local word_count17=0\n    local word_length17=0\n    local word_count18=0\n\
    \    local word_length18=0\n    local word_count19=0\n    local word_length19=0\n\
    \    local word_count20=0\n    local word_length20=0\n    local word_count21=0\n\
    \    local word_length21=0\n    local word_count22=0\n    local word_length22=0\n\
    \    local word_count23=0\n    local word_length23=0\n    local word_count24=0\n\
    \    local word_length24=0\n    local word_count25=0\n    local word_length25=0\n\
    \    local word_count26=0\n    local word_length26=0\n    local word_count27=0\n\
    \    local word_length27=0\n    local word_count28=0\n    local word_length28=0\n\
    \    local word_count29=0\n    local word_length29=0\n    local word_count30=0\n\
    \    local word_length30=0\n    local word_count31=0\n    local word_length31=0\n\
    \    local word_count32=0\n    local word_length32=0\n    local word_count33=0\n\
    \    local word_length33=0\n    local word_count34=0\n    local word_length34=0\n\
    \    local word_count35=0\n    local word_length35\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_index=0\n    local word_length=0\n    local word_char_count=0\n\
    \    local word_char_length=0\n    local word_char_char_length=0\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_char_length=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_length=0\n \
    \   local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_lengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlength\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_char=0\n\
    \    local word_char_char_index=0\n    local word_char_char_length=0\n    local\
    \ word_char_char_char=0\n    local word_char_char_char_index=0\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_char=0\n    local word_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_length=0\n    local word_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_index=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_index=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_index=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_index=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_index=0\n  \
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char=0\n   \
    \ local word_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char=0\n   \
    \ local word_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_array=()\n  local word_array2=()\n\
    \  local word_array3=()\n  local word_array4=()\n  local word_array5=()\n  local\
    \ word_array6=()\n  local word_array7=()\n  local word_array8=()\n  local word_array9=()\n\
    \  local word_array10=()\n  local word_array11=()\n  local word_array12=()\n \
    \ local word_array13=()\n  local word_array14=()\n  local word_array15=()\n  local\
    \ word_array16=()\n  local word_array17=()\n  local word_array18=()\n  local word_array19=()\n\
    \  local word_array20=()\n  local word_array21=()\n  local word_array22=()\n \
    \ local word_array23=()\n  local word_array24=()\n  local word_array25=()\n  local\
    \ word_array26=()\n  local word_array27=()\n  local word_array28=()\n  local word_array29=()\n\
    \  local word_array30=()\n  local word_array31=()\n  local word_array32=()\n \
    \ local word_array33=()\n  local word_array34=()\n  local word_array35=()\n  local\
    \ word_array36=()\n  local word_array37=()\n  local word_array38=()\n  local word_array39=()\n\
    \  local word_array40=()\n  local word_array41=()\n  local word_array42=()\n \
    \ local word_array43=()\n  local word_array44=()\n  local word_array45=()\n  local\
    \ word_array46=()\n  local word_array47=()\n  local word_array48=()\n  local word_array49=()\n\
    \  local word_array50=()\n  local word_array51=()\n  local word_array52=()\n \
    \ local word_array53=()\n  local word_array54=()\n  local word_array55=()\n  local\
    \ word_array56=()\n  local word_array57=()\n  local word_array58=()\n  local word_array59=()\n\
    \  local word_array60=()\n  local word_array\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local new_count=0\n    local temp=\"\"\n    local temp_count=0\n    local\
    \ temp_char=\"\"\n    local temp_char_count=0\n    local temp_char2=\"\"\n   \
    \ local temp_char2_count=0\n    local temp_char3=\"\"\n    local temp_char3_count=0\n\
    \    local temp_char4=\"\"\n    local temp_char4_count=0\n    local temp_char5=\"\
    \"\n    local temp_char5_count=0\n    local temp_char6=\"\"\n    local temp_char6_count=0\n\
    \    local temp_char7=\"\"\n    local temp_char7_count=0\n    local temp_char8=\"\
    \"\n    local temp_char8_count=0\n    local temp_char9=\"\"\n    local temp_char9_count=0\n\
    \    local temp_char10=\"\"\n    local temp_char10_count=0\n    local temp_char11=\"\
    \"\n    local temp_char11_count=0\n    local temp_char12=\"\"\n    local temp_char12_count=0\n\
    \    local temp_char13=\"\"\n    local temp_char13_count=0\n    local temp_char14=\"\
    \"\n    local temp_char14_count=0\n    local temp_char15=\"\"\n    local temp_char15_count=0\n\
    \    local temp_char16=\"\"\n    local temp_char16_count=0\n    local temp_char17=\"\
    \"\n    local temp_char17_count=0\n    local temp_char18=\"\"\n    local temp_char18_count=0\n\
    \    local temp_char19=\"\"\n    local temp_char19_count=0\n    local temp_char20=\"\
    \"\n    local temp_char20_count=0\n    local temp_char21=\"\"\n    local temp_char21_count=0\n\
    \    local temp_char22=\"\"\n    local temp_char22_count=0\n    local temp_char23=\"\
    \"\n    local temp_char23_count=0\n    local temp_char24=\"\"\n    local temp_char24_count=0\n\
    \    local temp_char25=\"\"\n    local temp_char25_count=0\n    local temp_char26=\"\
    \"\n    local temp_char26_count=0\n    local temp_char27=\"\"\n    local temp_char27_count=0\n\
    \    local temp_char28=\"\"\n    local temp_char28_count=0\n    local temp_char29=\"\
    \"\n    local temp_char29_count=0\n    local temp_char30=\"\"\n    local temp_char30_count=0\n\
    \    local temp_char31=\"\"\n    local temp_char31_count=0\n    local temp_char32=\"\
    \"\n    local temp_char32_count\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char_count=0\n    local char_array=()\n    local char_array_length=${#string}\n\
    \    local char_array_length_temp=0\n    local char_array_length_temp2=0\n   \
    \ local char_array_length_temp3=0\n    local char_array_length_temp4=0\n    local\
    \ char_array_length_temp5=0\n    local char_array_length_temp6=0\n    local char_array_length_temp7=0\n\
    \    local char_array_length_temp8=0\n    local char_array_length_temp9=0\n  \
    \  local char_array_length_temp10=0\n    local char_array_length_temp11=0\n  \
    \  local char_array_length_temp12=0\n    local char_array_length_temp13=0\n  \
    \  local char_array_length_temp14=0\n    local char_array_length_temp15=0\n  \
    \  local char_array_length_temp16=0\n    local char_array_length_temp17=0\n  \
    \  local char_array_length_temp18=0\n    local char_array_length_temp19=0\n  \
    \  local char_array_length_temp20=0\n    local char_array_length_temp21=0\n  \
    \  local char_array_length_temp22=0\n    local char_array_length_temp23=0\n  \
    \  local char_array_length_temp24=0\n    local char_array_length_temp25=0\n  \
    \  local char_array_length_temp26=0\n    local char_array_length_temp27=0\n  \
    \  local char_array_length_temp28=0\n    local char_array_length_temp29=0\n  \
    \  local char_array_length_temp30=0\n    local char_array_length_temp31=0\n  \
    \  local char_array_length_temp32=0\n    local char_array_length_temp33=0\n  \
    \  local char_array_length_temp34=0\n    local char_array_length_temp35=0\n  \
    \  local char_array_length_temp36=0\n    local char_array_length_temp37=0\n  \
    \  local char_array_length_temp38=0\n    local char_array_length_temp39=0\n  \
    \  local char_array_length_temp40=0\n    local char_array_length_temp41=0\n  \
    \  local char_array_length_temp42=0\n    local char_array_length_temp43=0\n  \
    \  local char_array_length_temp44=0\n    local char_array_length_temp45=0\n  \
    \  local char_array_length_temp46=0\n    local char_array_length_temp47=0\n  \
    \  local char_array_length_temp48=0\n    local char_array_length_temp49=0\n  \
    \  local char_array_length_temp50=0\n    local char_array_length_temp51=0\n  \
    \  local char_array_length_temp52=0\n    local char_array_length_temp\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_index=0\n  local\
    \ word_character\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_count\n\
    \  local word_character_length\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local new_string2=\"\
    \"\n  local new_string3=\"\"\n  local new_string4=\"\"\n  local new_string5=\"\
    \"\n  local new_string6=\"\"\n  local new_string7=\"\"\n  local new_string8=\"\
    \"\n  local new_string9=\"\"\n  local new_string10=\"\"\n  local new_string11=\"\
    \"\n  local new_string12=\"\"\n  local new_string13=\"\"\n  local new_string14=\"\
    \"\n  local new_string15=\"\"\n  local new_string16=\"\"\n  local new_string17=\"\
    \"\n  local new_string18=\"\"\n  local new_string19=\"\"\n  local new_string20=\"\
    \"\n  local new_string21=\"\"\n  local new_string22=\"\"\n  local new_string23=\"\
    \"\n  local new_string24=\"\"\n  local new_string25=\"\"\n  local new_string26=\"\
    \"\n  local new_string27=\"\"\n  local new_string28=\"\"\n  local new_string29=\"\
    \"\n  local new_string30=\"\"\n  local new_string31=\"\"\n  local new_string32=\"\
    \"\n  local new_string33=\"\"\n  local new_string34=\"\"\n  local new_string35=\"\
    \"\n  local new_string36=\"\"\n  local new_string37=\"\"\n  local new_string38=\"\
    \"\n  local new_string39=\"\"\n  local new_string40=\"\"\n  local new_string41=\"\
    \"\n  local new_string42=\"\"\n  local new_string43=\"\"\n  local new_string44=\"\
    \"\n  local new_string45=\"\"\n  local new_string46=\"\"\n  local new_string47=\"\
    \"\n  local new_string48=\"\"\n  local new_string49=\"\"\n  local new_string50=\"\
    \"\n  local new_string51=\"\"\n  local new_string52=\"\"\n  local new_string53=\"\
    \"\n  local new_string54=\"\"\n  local new_string55=\"\"\n  local new_string56=\"\
    \"\n  local new_string57=\"\"\n  local new_string58=\"\"\n  local new_string59=\"\
    \"\n  local new_string60=\"\"\n  local new_string61=\"\"\n  local new_string62=\"\
    \"\n  local new_string63=\"\"\n  local new_string64=\"\"\n  local new_string65=\"\
    \"\n  local new_string66=\"\"\n  local new_string67=\"\"\n  local new_string68=\"\
    \"\n  local new_string69=\"\"\n  local new_string70=\"\"\n  local new_string71=\"\
    \"\n  local new_string72=\"\"\n  local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local words=$string\n\
    \    local space=$((${#words} / 2))\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n    local\
    \ F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n\
    \    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n \
    \   local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n  \
    \  local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n   \
    \ local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local\
    \ f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n    local\
    \ F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n\
    \    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n \
    \   local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n  \
    \  local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n   \
    \ local a\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local new_char\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local next_char=${string:$(($i+1)):1}\n        if [ $char -gt $next_char\
    \ ]; then\n            new_string=\"$new_string $char\"\n            i=$(($i+1))\n\
    \        else\n            new_string=\"$new_string $next_char\"\n           \
    \ j=$(($j+1))\n        fi\n    done\n    echo \"$new_string\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=53 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660044707
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_length_index=0\n  local word_char_length_index2=0\n\
    \  local word_char_length_index3=0\n  local word_char_length_index4=0\n  local\
    \ word_char_length_index5=0\n  local word_char_length_index6=0\n  local word_char_length_index7=0\n\
    \  local word_char_length_index8=0\n  local word_char_length_index9=0\n  local\
    \ word_char_length_index10=0\n  local word_char_length_index11=0\n  local word_char_length_index12=0\n\
    \  local word_char_length_index13=0\n  local word_char_length_index14=0\n  local\
    \ word_char_length_index15=0\n  local word_char_length_index16=0\n  local word_char_length_index17=0\n\
    \  local word_char_length_index18=0\n  local word_char_length_index19=0\n  local\
    \ word_char_length_index20=0\n  local word_char_length_index21=0\n  local word_char_length_index22=0\n\
    \  local word_char_length_index23=0\n  local word_char_length_index24=0\n  local\
    \ word_char_length_index25=0\n  local word_char_length_index26=0\n  local word_char_length_index27=0\n\
    \  local word_char_length_index28=0\n  local word_char_length_index29=0\n  local\
    \ word_char_length_index30=0\n  local word_char_length_index31=0\n  local word_char_length_index32=0\n\
    \  local word_char_length_index33=0\n  local word_char_length_index34=0\n  local\
    \ word_char_length_index35=0\n  local word_char_length_index36=0\n  local word_char_length_index37=0\n\
    \  local word_char_length_index38=0\n  local word_char_length_index39=0\n  local\
    \ word_char_length_index40=0\n  local word_char_length_index41=0\n  local word_char_length_index42=0\n\
    \  local word_char_length_index43=0\n  local word_char_length_index44=0\n  local\
    \ word_char_length_index45=0\n  local word_char_length_index46=0\n  local word_char_length_index47=0\n\
    \  local word_char_length_index48=0\n  local word_char_length_index49=0\n  local\
    \ word_char_length_index50=0\n  local word_char_length_index51=0\n  local word_char_length_index52=0\n\
    \  \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        j=$((i+1))\n        if\
    \ [ $j -gt ${#string} ]; then\n            j=0\n        fi\n        new_string+=\"\
    ${string:$i:1}\"\n        new_string+=\"${string:$j:1}\"\n        i=$((i+1))\n\
    \        j=$((j+1))\n    done\n    echo \"$new_string\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    local word_count=0\n    local word_length=0\n    local word_index=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_index=0\n    local word_char_count=0\n\
    \    local word_char_index=0\n    local word_char_count=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_character\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        local char=\"${string:$i:1}\"\
    \n        if [ \"$char\" == \" \" ]; then\n            (( j++ ))\n        fi\n\
    \        if [ \"$char\" == \"-\" ]; then\n            (( j-- ))\n        fi\n\
    \        if [ \"$char\" == \"!\" ]; then\n            (( j-- ))\n        fi\n\
    \        if [ \"$char\" == \"?\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \".\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \",\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \";\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \":\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"'\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"\\\"\"]; then\n            (( j++ ))\n        fi\n\
    \        if [ \"$char\" == \"(\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \")\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"[\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"]\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"{\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"}\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"$\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"@\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"^\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"_\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"~\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"!\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"-\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"+\" ]; then\n            (( i++ ))\n        fi\n\
    \        if [ \"$char\" == \"=\"]; then\n            (( i++ ))\n        fi\n \
    \       if [ \"$char\" == \"<\" ]; then\n            (( i++ ))\n        fi\n \
    \       if [ \"$char\" == \">\" ]; then\n            (( i++ ))\n        fi\n \
    \       if [ \"$char\" == \"|\" ]; then\n            (( i++ \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnqeeluat.sh: line 104: unexpected EOF while looking for matching
    `)''

    /tmp/tmpnqeeluat.sh: line 123: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_list=\"\"\n  local word_list_sorted=\"\"\n  local word_list_sorted_count=0\n\
    \  local word_list_sorted_index=0\n  local word_list_sorted_length=0\n  local\
    \ word_list_sorted_word=\"\"\n  local word_list_sorted_word_length=0\n  local\
    \ word_list_sorted_word_count=0\n  local word_list_sorted_word_index=0\n  local\
    \ word_list_sorted_word_string=\"\"\n  local word_list_sorted_word_string_index=0\n\
    \  local word_list_sorted_word_string_count=0\n  local word_list_sorted_word_string_index=0\n\
    \  local word_list_sorted_word_string_length=0\n  local word_list_sorted_word_string_word=\"\
    \"\n  local word_list_sorted_word_string_word_length=0\n  local word_list_sorted_word_string_word_count=0\n\
    \  local word_list_sorted_word_string_word_index=0\n  local word_list_sorted_word_string_word_string=\"\
    \"\n  local word_list_sorted_word_string_word_string_index=0\n  local word_list_sorted_word_string_word_string_count=0\n\
    \  local word_list_sorted_word_string_word_string_index=0\n  local word_list_sorted_word_string_word_string_length=0\n\
    \  local word_list_sorted_word_string_word_string_word=\"\"\n  local word_list_sorted_word_string_word_string_word_length=0\n\
    \  local word_list_sorted_word_string_word_string_word_count=0\n  local word_list_sorted_word_string_word_string_word_index=0\n\
    \  local word_list_sorted_word_string_word_string_word_string=\"\"\n  local word_list_sorted_word_string_word_string_word_string_index=0\n\
    \  local word_list_sorted_word_string_word_string_word_string_count=0\n  local\
    \ word_list_sorted_word_string_word_string_word_string_index=0\n  local word_list_sorted_word_string_word_string_word_string_length=0\n\
    \  local word_list_sorted_word_string_word_string_word_string_word=\"\"\n  local\
    \ word_list_sorted_word_string_word_string_word_string_word_length=0\n  local\
    \ word_list_sorted_word_string_word_string_word_string_word_count=0\n  local word_list_sorted_word_string_word_string_word_string_word_index=0\n\
    \  local word_list_sorted_word_string_word_string_word_string_word_string=\"\"\
    \n  local word_list_sorted_word_string_word_string_word_string_word_string_index=0\n\
    \  local word_list_sorted_word_string_word_string_word_string_word_string_count=0\n\
    \  local word_list_sorted_word_string_word_string_word_string_word_string_index=0\n\
    \  local word_list_sorted_word_string_word_string_word_string_word_string_length=0\n\
    \  local word_list_sorted_word_string_word_string_word_string_word_string_\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local temp=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n   \
    \ local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n    local\
    \ G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n\
    \    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n \
    \   local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n  \
    \  local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n   \
    \ local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n    local\
    \ G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n\
    \    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n \
    \   local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n  \
    \  local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local a=0\n   \
    \ local b=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_count=0\n  local word_char=\"\"\n  local word_char_ascii_value=0\n\
    \  local word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n\
    \  local word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n \
    \ local word_char_ascii_value_count=0\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n\
    \  local word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n \
    \ local word_char_ascii_value_count=0\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n\
    \  local word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n \
    \ local word_char_ascii_value_count=0\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n\
    \  local word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n \
    \ local word_char_ascii_value_count=0\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n\
    \  local word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n \
    \ local word_char_ascii_value_count=0\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n  local\
    \ word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n  local word_char_ascii_value_count=0\n\
    \  local word_char_ascii_value=\"\"\n  local word_char_ascii_value_index=0\n \
    \ local word_char_ascii_value_count=0\n  local word_char_ascii_value=\"\"\n  local\
    \ word_char_ascii_value_index=0\n  local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local count2=0\n    local count3=0\n    local count4=0\n    local count5=0\n\
    \    local count6=0\n    local count7=0\n    local count8=0\n    local count9=0\n\
    \    local count10=0\n    local count11=0\n    local count12=0\n    local count13=0\n\
    \    local count14=0\n    local count15=0\n    local count16=0\n    local count17=0\n\
    \    local count18=0\n    local count19=0\n    local count20=0\n    local count21=0\n\
    \    local count22=0\n    local count23=0\n    local count24=0\n    local count25=0\n\
    \    local count26=0\n    local count27=0\n    local count28=0\n    local count29=0\n\
    \    local count30=0\n    local count31=0\n    local count32=0\n    local count33=0\n\
    \    local count34=0\n    local count35=0\n    local count36=0\n    local count37=0\n\
    \    local count38=0\n    local count39=0\n    local count40=0\n    local count41=0\n\
    \    local count42=0\n    local count43=0\n    local count44=0\n    local count45=0\n\
    \    local count46=0\n    local count47=0\n    local count48=0\n    local count49=0\n\
    \    local count50=0\n    local count51=0\n    local count52=0\n    local count53=0\n\
    \    local count54=0\n    local count55=0\n    local count56=0\n    local count57=0\n\
    \    local count58=0\n    local count59=0\n    local count60=0\n    local count61=0\n\
    \    local count62=0\n    local count63=0\n    local count64=0\n    local count65=0\n\
    \    local count66=0\n    local count67=0\n    local count68=0\n    local count69=0\n\
    \    local count70=0\n    local count71=0\n    local count72=0\n    local count73=0\n\
    \    local count74=0\n    local count75=0\n    local count76=0\n    local count77=0\n\
    \    local count78=0\n    local count79=0\n    local count80=0\n    local count81=0\n\
    \    local count82=0\n    local count83=0\n    local count\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_array=($string)\n\
    \  local word_count=0\n  local word_index=0\n  local word_length=$#word_array\n\
    \  local word_length_count=0\n  local word_length_word=\"\"\n  local word_length_word_count=0\n\
    \  local word_length_word_index=0\n  local word_length_word_length=0\n  local\
    \ word_length_word_length_count=0\n  local word_length_word_length_word=\"\"\n\
    \  local word_length_word_length_word_count=0\n  local word_length_word_length_word_index=0\n\
    \  local word_length_word_length_word_length=0\n  local word_length_word_length_word_count=0\n\
    \  local word_length_word_length_word_index=0\n  local word_length_word_length_word_length_count=0\n\
    \  local word_length_word_length_word_length_word=\"\"\n  local word_length_word_length_word_length_word_count=0\n\
    \  local word_length_word_length_word_length_word_index=0\n  local word_length_word_length_word_length_word_length=0\n\
    \  local word_length_word_length_word_length_word_count=0\n  local word_length_word_length_word_length_word_index=0\n\
    \  local word_length_word_length_word_length_word_length_count=0\n  local word_length_word_length_word_length_word_length_word=\"\
    \"\n  local word_length_word_length_word_length_word_length_word_count=0\n  local\
    \ word_length_word_length_word_length_word_length_word_index=0\n  local word_length_word_length_word_length_word_length_word_length=0\n\
    \  local word_length_word_length_word_length_word_length_word_count=0\n  local\
    \ word_length_word_length_word_length_word_length_word_index=0\n  local word_length_word_length_word_length_word_length_word_length_count=0\n\
    \  local word_length_word_length_word_length_word_length_word_length_word=\"\"\
    \n  local word_length_word_length_word_length_word_length_word_length_word_count=0\n\
    \  local word_length_word_length_word_length_word_length_word_length_word_index=0\n\
    \  local word_length_word_length_word_length_word_length_word_length_word_length=0\n\
    \  local word_length_word_length_word_length_word_length_word_length_word_count=0\n\
    \  local word_length_word_length_word_length_word_length_word_length_word_index=0\n\
    \  local word_length_word_length_word_length_word_length_word_length_word_length_count=0\n\
    \  local word_length_word_length_word_length_word_length_word_length_word_length_word=\"\
    \"\n  local word_length_word_length_word_length_word_length_word_length_word_length_word_count=0\n\
    \  local word_length_word_length_word_length_word_length_word_length_word_length_word_index=0\n\
    \  local word_length_word_length_word_\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_index=0\n    local word_length=0\n    local word_character\n \
    \   local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_character_index\n\
    \    local word_character\n    local word_character_index\n    local word_character\n\
    \    local word_character_index\n    local word_character\n    local word_\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local char\n    local new_char\n    local new_count=0\n    local new_char2\n\
    \    local new_count2\n    local new_char3\n    local new_count3\n    local new_char4\n\
    \    local new_count4\n    local new_char5\n    local new_count5\n    local new_char6\n\
    \    local new_count6\n    local new_char7\n    local new_count7\n    local new_char8\n\
    \    local new_count8\n    local new_char9\n    local new_count9\n    local new_char10\n\
    \    local new_count10\n    local new_char11\n    local new_count11\n    local\
    \ new_char12\n    local new_count12\n    local new_char13\n    local new_count13\n\
    \    local new_char14\n    local new_count14\n    local new_char15\n    local\
    \ new_count15\n    local new_char16\n    local new_count16\n    local new_char17\n\
    \    local new_count17\n    local new_char18\n    local new_count18\n    local\
    \ new_char19\n    local new_count19\n    local new_char20\n    local new_count20\n\
    \    local new_char21\n    local new_count21\n    local new_char22\n    local\
    \ new_count22\n    local new_char23\n    local new_count23\n    local new_char24\n\
    \    local new_count24\n    local new_char25\n    local new_count25\n    local\
    \ new_char26\n    local new_count26\n    local new_char27\n    local new_count27\n\
    \    local new_char28\n    local new_count28\n    local new_char29\n    local\
    \ new_count29\n    local new_char30\n    local new_count30\n    local new_char31\n\
    \    local new_count31\n    local new_char32\n    local new_count32\n    local\
    \ new_char33\n    local new_count33\n    local new_char34\n    local new_count34\n\
    \    local new_char35\n    local new_count35\n    local new_char36\n    local\
    \ new_count36\n    local new_char37\n    local new_count37\n    local new_char38\n\
    \    local new_count38\n    local new_char39\n    local new_count39\n    local\
    \ new_char40\n    local new_count40\n    local new_char41\n    local new_count41\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_length_count=0\n\
    \    local word_length_min=0\n    local word_length_max=0\n    local word_length_sum=0\n\
    \    local word_length_avg=0\n    local word_length_median=0\n    local word_length_min_index=0\n\
    \    local word_length_max_index=0\n    local word_length_sum_index=0\n    local\
    \ word_length_avg_index=0\n    local word_length_median_index=0\n    local word_length_min_count=0\n\
    \    local word_length_max_count=0\n    local word_length_sum_count=0\n    local\
    \ word_length_avg_count=0\n    local word_length_median_count=0\n    local word_length_min_length=0\n\
    \    local word_length_max_length=0\n    local word_length_sum_length=0\n    local\
    \ word_length_avg_length=0\n    local word_length_median_length=0\n    local word_length_min_length_index=0\n\
    \    local word_length_max_length_index=0\n    local word_length_sum_length_index=0\n\
    \    local word_length_avg_length_index=0\n    local word_length_median_length_index=0\n\
    \    local word_length_min_count_index=0\n    local word_length_max_count_index=0\n\
    \    local word_length_sum_count_index=0\n    local word_length_avg_count_index=0\n\
    \    local word_length_median_count_index=0\n    local word_length_min_length_index=0\n\
    \    local word_length_max_length_index=0\n    local word_length_sum_length_index=0\n\
    \    local word_length_avg_length_index=0\n    local word_length_median_length_index=0\n\
    \    local word_length_min_length_count=0\n    local word_length_max_length_count=0\n\
    \    local word_length_sum_length_count=0\n    local word_length_avg_length_count=0\n\
    \    local word_length_median_length_count=0\n    local word_length_min_length_length=0\n\
    \    local word_length_max_length_length=0\n    local word_length_sum_length_length=0\n\
    \    local word_length_avg_length_length=0\n    local word_length_median_length_length=0\n\
    \    local word_length_min_length_count=0\n    local word_length_max_length_count=0\n\
    \    local word_length_sum_length_count=0\n    local word_length_avg_length_count=0\n\
    \    local word_length_median_length_count=0\n    local word_length_min_length_length=0\n\
    \    local word_length_max_length_length=0\n    local word_length_sum_length_length=0\n\
    \    local word_length_avg_length_length=0\n    local word_length_median_length_length=0\n\
    \    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local words=$(echo \"$string\"\
    \ | sed 's/ /\\n/g' | sort -u)\n    local output=\"\"\n    for word in $words;\
    \ do\n        output+=\"$(echo \"$word\" | sed 's/./& /g' | sort -n | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' |\
    \ sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed\
    \ 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/\
    \ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\n/g' | sed 's/ /\\\
    n/g' | sed 's/ /\\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpofbikazn.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmpofbikazn.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local new_string2=\"\
    \"\n    local new_string3=\"\"\n    local new_string4=\"\"\n    local new_string5=\"\
    \"\n    local new_string6=\"\"\n    local new_string7=\"\"\n    local new_string8=\"\
    \"\n    local new_string9=\"\"\n    local new_string10=\"\"\n    local new_string11=\"\
    \"\n    local new_string12=\"\"\n    local new_string13=\"\"\n    local new_string14=\"\
    \"\n    local new_string15=\"\"\n    local new_string16=\"\"\n    local new_string17=\"\
    \"\n    local new_string18=\"\"\n    local new_string19=\"\"\n    local new_string20=\"\
    \"\n    local new_string21=\"\"\n    local new_string22=\"\"\n    local new_string23=\"\
    \"\n    local new_string24=\"\"\n    local new_string25=\"\"\n    local new_string26=\"\
    \"\n    local new_string27=\"\"\n    local new_string28=\"\"\n    local new_string29=\"\
    \"\n    local new_string30=\"\"\n    local new_string31=\"\"\n    local new_string32=\"\
    \"\n    local new_string33=\"\"\n    local new_string34=\"\"\n    local new_string35=\"\
    \"\n    local new_string36=\"\"\n    local new_string37=\"\"\n    local new_string38=\"\
    \"\n    local new_string39=\"\"\n    local new_string40=\"\"\n    local new_string41=\"\
    \"\n    local new_string42=\"\"\n    local new_string43=\"\"\n    local new_string44=\"\
    \"\n    local new_string45=\"\"\n    local new_string46=\"\"\n    local new_string47=\"\
    \"\n    local new_string48=\"\"\n    local new_string49=\"\"\n    local new_string50=\"\
    \"\n    local new_string51=\"\"\n    local new_string52=\"\"\n    local new_string53=\"\
    \"\n    local new_string54=\"\"\n    local new_string55=\"\"\n    local new_string56=\"\
    \"\n    local new_string57=\"\"\n    local new_string58=\"\"\n    local new_string59=\"\
    \"\n    local new_string60=\"\"\n    local new_string61=\"\"\n    local new_string62=\"\
    \"\n    local new_string63=\"\"\n    local new_string64=\"\"\n    local new_string65=\"\
    \"\n    local new_string66=\"\"\n    local new_string67=\"\"\n    local new_string68=\"\
    \"\n    local new_string69=\"\"\n    local new_string70=\"\"\n    local new_string71=\"\
    \"\n    local new_string72=\"\"\n    local new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_char_length=0\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_char_length=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_length=0\n \
    \   local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_lengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlengthlength\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n  \
    \  local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n   \
    \ local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local\
    \ M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n\
    \    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n \
    \   local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n  \
    \  local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n   \
    \ local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local\
    \ M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n\
    \    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n \
    \   local X=0\n    local Y=0\n    local Z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=($string)\n    local word_count=0\n    local word_index=0\n    local\
    \ word_length=0\n    local word_char=0\n    local word_char_length=0\n    local\
    \ word_char_char=0\n    local word_char_char_length=0\n    local word_char_char_char=0\n\
    \    local word_char_char_char_length=0\n    local word_char_char_char_char=0\n\
    \    local word_char_char_char_char_length=0\n    local word_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_length=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_length=0\n \
    \   local word_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output\n  output=$(echo \"$string\"\
    \ | sed 's/ /\\n/g' | sort -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3\
    \ -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 -k 1.2,1.3 \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdttac38p.sh: line 19: unexpected EOF while looking for matching
    `)''

    /tmp/tmpdttac38p.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=${#string}\n\
    \  local j=0\n  while [ $i -gt 0 ]; do\n    local c=${string:$i:1}\n    local\
    \ k=$(echo $c | tr -dc '[:alpha:]')\n    local l=$(echo $c | tr -dc '[:lower:]')\n\
    \    local m=$(echo $c | tr -dc '[:upper:]')\n    local n=$(echo $c | tr -dc '[:digit:]')\n\
    \    local o=$(echo $c | tr -dc '[:punct:]')\n    local p=$(( ${#k} + ${#l} +\
    \ ${#m} + ${#n} + ${#o} ))\n    local q=$(( ${#k} + ${#l} + ${#m} + ${#n} + ${#o}\
    \ ))\n    local r=$(( ${#k} + ${#l} + ${#m} + ${#n} + ${#o} ))\n    local s=$((\
    \ ${#k} + ${#l} + ${#m} + ${#n} + ${#o} ))\n    local t=$(( ${#k} + ${#l} + ${#m}\
    \ + ${#n} + ${#o} ))\n    local u=$(( ${#k} + ${#l} + ${#m} + ${#n} + ${#o} ))\n\
    \    local v=$(( ${#k} + ${#l} + ${#m} + ${#n} + ${#o} ))\n    local w=$(( ${#k}\
    \ + ${#l} + ${#m} + ${#n} + ${#o} ))\n    local x=$(( ${#k} + ${#l} + ${#m} +\
    \ ${#n} + ${#o} ))\n    local y=$(( ${#k} + ${#l} + ${#m} + ${#n} + ${#o} ))\n\
    \    local z=$(( ${#k} + ${#l} + ${#m} + ${#n} + ${#o} ))\n    local A=$(( ${#k}\
    \ + ${#l} + ${#m} + ${#n} + ${#o} \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmputxs9r9e.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmputxs9r9e.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ \"$i\" -lt \"${#string}\" ]; do\n        local char=\"\
    ${string:$i:1}\"\n        local new_char=\"${char:0:1}\"\n        if [ \"$char\"\
    \ == \"$new_char\" ]; then\n            ((i++))\n            continue\n      \
    \  fi\n        ((j++))\n        new_string=\"$new_string $new_char\"\n    done\n\
    \    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_character\n  local\
    \ word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_character_length\n  local word_character_index\n\
    \  local word_character_length\n  local word_character_index\n  local word_character_length\n\
    \  local word_character_index\n  local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local new_count=0\n    local last_char=\"\"\n    local last_char_count=0\n\
    \    local last_char_index=0\n    local last_char_position=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index=0\n    local last_char_position_index=0\n\
    \    local last_char_position_index\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_char_index=0\n  local word_char_char_length=0\n\
    \  local word_char_char_char_index=0\n  local word_char_char_char_length=0\n \
    \ local word_char_char_char_char_index=0\n  local word_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_index=0\n  local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_index=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local words=$2\n    local new_string=\"\
    \"\n    local count=0\n    local word\n    local char\n    local new_char\n  \
    \  local new_word\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i\n    local j\n    local length\n    local character\n    local character2\n\
    \    local character3\n    local character4\n    local character5\n    local character6\n\
    \    local character7\n    local character8\n    local character9\n    local character10\n\
    \    local character11\n    local character12\n    local character13\n    local\
    \ character14\n    local character15\n    local character16\n    local character17\n\
    \    local character18\n    local character19\n    local character20\n    local\
    \ character21\n    local character22\n    local character23\n    local character24\n\
    \    local character25\n    local character26\n    local character27\n    local\
    \ character28\n    local character29\n    local character30\n    local character31\n\
    \    local character32\n    local character33\n    local character34\n    local\
    \ character35\n    local character36\n    local character37\n    local character38\n\
    \    local character39\n    local character40\n    local character41\n    local\
    \ character42\n    local character43\n    local character44\n    local character45\n\
    \    local character46\n    local character47\n    local character48\n    local\
    \ character49\n    local character50\n    local character51\n    local character52\n\
    \    local character53\n    local character54\n    local character55\n    local\
    \ character56\n    local character57\n    local character58\n    local character59\n\
    \    local character60\n    local character61\n    local character62\n    local\
    \ character63\n    local character64\n    local character65\n    local character66\n\
    \    local character67\n    local character68\n    local character69\n    local\
    \ character70\n    local character71\n    local character72\n    local character73\n\
    \    local character74\n    local character75\n    local character76\n    local\
    \ character77\n    local character78\n    local character79\n    local character80\n\
    \    local character81\n    local character82\n    local character83\n    local\
    \ character84\n    local character85\n    local character86\n    local character87\n\
    \    local character88\n    local character89\n    local character90\n    local\
    \ character91\n    local character92\n    local character93\n    local character94\n\
    \    local character95\n    local character96\n    local character97\n    local\
    \ character98\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char=0\n\
    \    local word_char_index=0\n    local word_char_length=0\n    local word_char_char=0\n\
    \    local word_char_char_index=0\n    local word_char_char_length=0\n    local\
    \ word_char_char_char=0\n    local word_char_char_char_index=0\n    local word_char_char_char_length=0\n\
    \    local word_char_char_char_char=0\n    local word_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_length=0\n    local word_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_index=0\n    local word_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_index=0\n    local word_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char=0\n    local word_char_char_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_index=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_index=0\n    local\
    \ word_char_char_char_char_char_char_char_char_char_char_length=0\n    local word_char_char_char_char_char_char_char_char_char_char=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_index=0\n  \
    \  local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char=0\n   \
    \ local word_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char=0\n   \
    \ local word_char_char_char_char_char_char_char_char_char_char_char_char_index=0\n\
    \    local word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0 j=0\n\
    \  local word_count=0\n  local word_length=0\n  local word_index=0\n  local word_char_index=0\n\
    \  local word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output\n  output=\"$(echo \"\
    $string\" | sed 's/ /\\n/g' | sort -k 1 -n | sed 's/^/\\n/' | sed 's/$/\\n/')\"\
    \n  echo \"$output\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=$((${#string}\
    \ - 1))\n  while [ $i -gt 0 ]; do\n    local j=$((${#string} - 1))\n    while\
    \ [ $j -gt 0 ] && [ $string[$j] -eq \" \" ]; do\n      j=$((j - 1))\n    done\n\
    \    local temp=${string[$i]}\n    string[$i]=${string[$j]}\n    string[$j]=$temp\n\
    \    i=$((i - 1))\n    j=$((j - 1))\n  done\n  new_string=\"${string[@]}\"\n \
    \ echo \"$new_string\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwxh7ruop.sh: line 22: [: Hi[1]: integer expression expected

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local words=$string\n\
    \  local space=\" \"\n  local new_word=\"\"\n  local new_space=\"\"\n  local count=0\n\
    \  local count2=0\n  local count3=0\n  local count4=0\n  local count5=0\n  local\
    \ count6=0\n  local count7=0\n  local count8=0\n  local count9=0\n  local count10=0\n\
    \  local count11=0\n  local count12=0\n  local count13=0\n  local count14=0\n\
    \  local count15=0\n  local count16=0\n  local count17=0\n  local count18=0\n\
    \  local count19=0\n  local count20=0\n  local count21=0\n  local count22=0\n\
    \  local count23=0\n  local count24=0\n  local count25=0\n  local count26=0\n\
    \  local count27=0\n  local count28=0\n  local count29=0\n  local count30=0\n\
    \  local count31=0\n  local count32=0\n  local count33=0\n  local count34=0\n\
    \  local count35=0\n  local count36=0\n  local count37=0\n  local count38=0\n\
    \  local count39=0\n  local count40=0\n  local count41=0\n  local count42=0\n\
    \  local count43=0\n  local count44=0\n  local count45=0\n  local count46=0\n\
    \  local count47=0\n  local count48=0\n  local count49=0\n  local count50=0\n\
    \  local count51=0\n  local count52=0\n  local count53=0\n  local count54=0\n\
    \  local count55=0\n  local count56=0\n  local count57=0\n  local count58=0\n\
    \  local count59=0\n  local count60=0\n  local count61=0\n  local count62=0\n\
    \  local count63=0\n  local count64=0\n  local count65=0\n  local count66=0\n\
    \  local count67=0\n  local count68=0\n  local count69=0\n  local count70=0\n\
    \  local count71=0\n  local count72=0\n  local count73=0\n  local count74=0\n\
    \  local count75=0\n  local count76=0\n  local count77=0\n  local count78=0\n\
    \  local count79=0\n  local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n\
    \  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n\
    \  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n\
    \  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n\
    \  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n\
    \  local Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n\
    \  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n\
    \  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n\
    \  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n\
    \  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local words=\"\"\n    local space=\"\"\n    local new_word=\"\"\
    \n    local letter=\"\"\n    local new_letter=\"\"\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n    local\
    \ E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n\
    \    local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n \
    \   local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n  \
    \  local U=0\n    local V=0\n    local W=0\n    local X=0\n    local Y=0\n   \
    \ local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local\
    \ e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n    local\
    \ E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n\
    \    local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n \
    \   local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n  \
    \  local U=0\n    local V=0\n    local W=0\n    local X=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        local char=\"${string:$i:1}\"\
    \n        local next_char=\"${string:$(($i+1)):1}\"\n        if [[ $char == \"\
    \ \" ]]; then\n            (( j++ ))\n        fi\n        if [[ $char == \" \"\
    \ ]]; then\n            (( i++ ))\n        fi\n        if [[ $char == \" \" ]];\
    \ then\n            (( j++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n\
    \            (( i++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n  \
    \          (( j++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n    \
    \        (( i++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n      \
    \      (( j++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n        \
    \    (( i++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n          \
    \  (( j++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n            ((\
    \ i++ ))\n        fi\n        if [[ $char == \" \" ]]; then\n            (( j++\
    \ ))\n        fi\n        if [[ $char == \" \" ]]; then\n            (( i++ ))\n\
    \        fi\n        if [[ $char == \" \" ]]; then\n            (( j++ ))\n  \
    \      fi\n        if [[ $char == \" \" ]]; then\n            (( i++ ))\n    \
    \    fi\n        if [[ $char == \" \" ]]; then\n            (( j++ ))\n      \
    \  fi\n        if [[ $char == \" \" ]]; then\n            (( i++ ))\n        fi\n\
    \        if [[ $char == \" \" ]]; then\n            (( j++ ))\n        fi\n  \
    \      if [[ $char == \" \" ]]; then\n            (( i++ ))\n        fi\n    \
    \    if [[ $char == \" \" ]]; then\n            (( j++ ))\n        fi\n      \
    \  if [[ $char == \" \" ]]; then\n            (( i++ ))\n        fi\n        if\
    \ [[ $char == \" \" ]]; then\n            (( j++ ))\n        fi\n        if [[\
    \ $char == \" \" ]]; then\n            (( i++ ))\n        fi\n        if [[ $char\
    \ == \" \" ]]; then\n            (( j++ ))\n        fi\n        if [[ $char ==\
    \ \" \" ]]; then\n            (( i++ ))\n        fi\n        if [[ $char == \"\
    \ \" ]]; then\n            (( j++ ))\n        fi\n        if [[ $char == \" \"\
    \ \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3ncsbnl1.sh: line 98: syntax error in conditional expression

    /tmp/tmp3ncsbnl1.sh: line 99: syntax error near `}''

    /tmp/tmp3ncsbnl1.sh: line 99: `}''

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local new_count=0\n    local char\n    local new_char\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n  local\
    \ B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n  local\
    \ H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n  local\
    \ N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n  local\
    \ T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n  local\
    \ Z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local\
    \ r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local\
    \ x=0\n  local y=0\n  local z=0\n  local A=0\n  local B=0\n  local C=0\n  local\
    \ D=0\n  local E=0\n  local F=0\n  local G=0\n  local H=0\n  local I=0\n  local\
    \ J=0\n  local K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local\
    \ P=0\n  local Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local\
    \ V=0\n  local W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local a=0\n  local\
    \ b=0\n  local c=0\n  local d=0\n  local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_character\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_character_count\n    local word_character_index\n\
    \    local word_character_count\n    local word_character_index\n    local word_character_count\n\
    \    local word_character_index\n    local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_index=0\n  local word_length=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_value=0\n  local word_char_position=0\n\
    \  local word_char_position_index=0\n  local word_char_position_value=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_value=0\n  local word_char_position_index=0\n\
    \  local word_char_position_value=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_value=0\n  local word_char_position_index=0\n  local word_char_position_value=0\n\
    \  local word_char_position_index=0\n  local word_char_position_value=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_value=0\n  local word_char_position_index=0\n\
    \  local word_char_position_value=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_value=0\n  local word_char_position_index=0\n  local word_char_position_value=0\n\
    \  local word_char_position_index=0\n  local word_char_position_value=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_value=0\n  local word_char_position_index=0\n\
    \  local word_char_position_value=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_value=0\n  local word_char_position_index=0\n  local word_char_position_value=0\n\
    \  local word_char_position_index=0\n  local word_char_position_value=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_value=0\n  local word_char_position_index=0\n\
    \  local word_char_position_value=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_value=0\n  local word_char_position_index=0\n  local word_char_position_value=0\n\
    \  local word_char_position_index=0\n  local word_char_position_value=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_value=0\n  local word_char_position_index=0\n\
    \  local word_char_position_value=0\n  local word_char_position_index=0\n  local\
    \ word_char_position_value=0\n  local word_char_position_index=0\n  local word_char_position_value=0\n\
    \  local word_char_position_index=0\n  local word_char_position_value=0\n  local\
    \ word_char_position_index=0\n  local word_char_position_value=0\n  local word_char_position_index=0\n\
    \  local word_char_position_value=0\n  local word_char_position_index\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local words=\"\
    \"\n    local space=\"\"\n    local count=0\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local output=\"\"\n  local words=$string\n\
    \  local space=\" \"\n  local chars=\"abcdefghijklmnopqrstuvwxyz \"\n  local length=$#\n\
    \  local i\n  local j\n  local k\n  local temp\n  local count\n  local count2\n\
    \  local count3\n  local count4\n  local count5\n  local count6\n  local count7\n\
    \  local count8\n  local count9\n  local count10\n  local count11\n  local count12\n\
    \  local count13\n  local count14\n  local count15\n  local count16\n  local count17\n\
    \  local count18\n  local count19\n  local count20\n  local count21\n  local count22\n\
    \  local count23\n  local count24\n  local count25\n  local count26\n  local count27\n\
    \  local count28\n  local count29\n  local count30\n  local count31\n  local count32\n\
    \  local count33\n  local count34\n  local count35\n  local count36\n  local count37\n\
    \  local count38\n  local count39\n  local count40\n  local count41\n  local count42\n\
    \  local count43\n  local count44\n  local count45\n  local count46\n  local count47\n\
    \  local count48\n  local count49\n  local count50\n  local count51\n  local count52\n\
    \  local count53\n  local count54\n  local count55\n  local count56\n  local count57\n\
    \  local count58\n  local count59\n  local count60\n  local count61\n  local count62\n\
    \  local count63\n  local count64\n  local count65\n  local count66\n  local count67\n\
    \  local count68\n  local count69\n  local count70\n  local count71\n  local count72\n\
    \  local count73\n  local count74\n  local count75\n  local count76\n  local count77\n\
    \  local count78\n  local count79\n  local count80\n  local count81\n  local count82\n\
    \  local count83\n  local count84\n  local count85\n  local count86\n  local count87\n\
    \  local count88\n  local count89\n  local count90\n\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local output=\"\"\n  local words=\"\
    \"\n  local space=\"\"\n  local count=0\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local new_count=0\n    local char\n    local new_char\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local c=${string:$i:1}\n \
    \       local new_c\n        if [ $c != \" \" ]; then\n            new_c=$c\n\
    \        else\n            new_c=$(echo $c | sed -e 's/ /-/g')\n        fi\n \
    \       if [ $new_c != $c ]; then\n            i=$((i+1))\n            new_string=$new_string$new_c\n\
    \        else\n            j=$((j+1))\n            i=$((i+1))\n        fi\n  \
    \  done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=($string)\n    local word_count=0\n    local word_index=0\n    local\
    \ word_length=0\n    local word_char=0\n    local word_char_length=0\n    local\
    \ word_char_array=($string)\n    local word_char_length_count=0\n    local word_char_length_index=0\n\
    \    local word_char_length_array=($string)\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_array=($string)\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_array=($string)\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_array=($string)\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_array=($string)\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_array=($string)\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_array=($string)\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_array=($string)\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_array=($string)\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_array=($string)\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_array=($string)\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_array=($string)\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_array=($string)\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_array=($string)\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_array=($string)\n    local word_char_length_count=0\n    local\
    \ word_char_length_index=0\n    local word_char_length_array=($string)\n    local\
    \ word_char_length_count=0\n    local word_char_length_index=0\n    local word_char_length_array=($string)\n\
    \    local word_char_length_count=0\n    local \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local words=($string)\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_char=0\n    local word_char_length=0\n    local word_char_length_count=0\n\
    \    local word_char_length_index=0\n    local word_char_length_count2=0\n   \
    \ local word_char_length_index2=0\n    local word_char_length_count3=0\n    local\
    \ word_char_length_index3=0\n    local word_char_length_count4=0\n    local word_char_length_index4=0\n\
    \    local word_char_length_count5=0\n    local word_char_length_index5=0\n  \
    \  local word_char_length_count6=0\n    local word_char_length_index6=0\n    local\
    \ word_char_length_count7=0\n    local word_char_length_index7=0\n    local word_char_length_count8=0\n\
    \    local word_char_length_index8=0\n    local word_char_length_count9=0\n  \
    \  local word_char_length_index9=0\n    local word_char_length_count10=0\n   \
    \ local word_char_length_index10=0\n    local word_char_length_count11=0\n   \
    \ local word_char_length_index11=0\n    local word_char_length_count12=0\n   \
    \ local word_char_length_index12=0\n    local word_char_length_count13=0\n   \
    \ local word_char_length_index13=0\n    local word_char_length_count14=0\n   \
    \ local word_char_length_index14=0\n    local word_char_length_count15=0\n   \
    \ local word_char_length_index15=0\n    local word_char_length_count16=0\n   \
    \ local word_char_length_index16=0\n    local word_char_length_count17=0\n   \
    \ local word_char_length_index17=0\n    local word_char_length_count18=0\n   \
    \ local word_char_length_index18=0\n    local word_char_length_count19=0\n   \
    \ local word_char_length_index19=0\n    local word_char_length_count20=0\n   \
    \ local word_char_length_index20=0\n    local word_char_length_count21=0\n   \
    \ local word_char_length_index21=0\n    local word_char_length_count22=0\n   \
    \ local word_char_length_index22=0\n    local word_char_length_count23=0\n   \
    \ local word_char_length_index23=0\n    local word_char_length_count24=0\n   \
    \ local word_char_length_index24=0\n    local word_char_length_count25=0\n   \
    \ local word_char_length_index25=0\n    local word_char_length_count26=0\n   \
    \ local word_char_length\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local output=\"\"\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_list=($string)\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_char=0\n    local word_char_length=0\n    local word_char_length_index=0\n\
    \    local word_char_length_index2=0\n    local word_char_length_index3=0\n  \
    \  local word_char_length_index4=0\n    local word_char_length_index5=0\n    local\
    \ word_char_length_index6=0\n    local word_char_length_index7=0\n    local word_char_length_index8=0\n\
    \    local word_char_length_index9=0\n    local word_char_length_index10=0\n \
    \   local word_char_length_index11=0\n    local word_char_length_index12=0\n \
    \   local word_char_length_index13=0\n    local word_char_length_index14=0\n \
    \   local word_char_length_index15=0\n    local word_char_length_index16=0\n \
    \   local word_char_length_index17=0\n    local word_char_length_index18=0\n \
    \   local word_char_length_index19=0\n    local word_char_length_index20=0\n \
    \   local word_char_length_index21=0\n    local word_char_length_index22=0\n \
    \   local word_char_length_index23=0\n    local word_char_length_index24=0\n \
    \   local word_char_length_index25=0\n    local word_char_length_index26=0\n \
    \   local word_char_length_index27=0\n    local word_char_length_index28=0\n \
    \   local word_char_length_index29=0\n    local word_char_length_index30=0\n \
    \   local word_char_length_index31=0\n    local word_char_length_index32=0\n \
    \   local word_char_length_index33=0\n    local word_char_length_index34=0\n \
    \   local word_char_length_index35=0\n    local word_char_length_index36=0\n \
    \   local word_char_length_index37=0\n    local word_char_length_index38=0\n \
    \   local word_char_length_index39=0\n    local word_char_length_index40=0\n \
    \   local word_char_length_index41=0\n    local word_char_length_index42=0\n \
    \   local word_char_length_index43=0\n    local word_char_length_index44=0\n \
    \   local word_char_length_index45=0\n    local word_char_length_index46=0\n \
    \   local word_char_length_index47=0\n    local word_char_length_index48=0\n \
    \   local word_char_length_index49=0\n    local word_char_length_index50=0\n \
    \   local word_char_length_index51=0\n    local word_\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local output\n  output=$(echo $string |\
    \ sed -e 's/\\(.\\)/\\1 /g' | sed -e 's/ /\\n/g' | sort -n | tr '\\n' ' ')\n \
    \ echo $output\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ words=\"\"\n    local count=0\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_character\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_character_index\n    local word_character_index\n\
    \    local word_character_index\n    local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local index=0\n  local char\n  local new_char\n  local new_count=0\n  local\
    \ new_index=0\n  local new_char\n  local new_string\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local new_char=\"\
    \"\n    local new_char_ascii_value=0\n    local new_char_ascii_values=()\n   \
    \ local new_char_ascii_values_count=${#new_char_ascii_values[@]}\n    local new_char_ascii_values_index=0\n\
    \    local new_char_ascii_values_index_count=0\n    local new_char_ascii_values_index_count2=0\n\
    \    local new_char_ascii_values_index_count3=0\n    local new_char_ascii_values_index_count4=0\n\
    \    local new_char_ascii_values_index_count5=0\n    local new_char_ascii_values_index_count6=0\n\
    \    local new_char_ascii_values_index_count7=0\n    local new_char_ascii_values_index_count8=0\n\
    \    local new_char_ascii_values_index_count9=0\n    local new_char_ascii_values_index_count10=0\n\
    \    local new_char_ascii_values_index_count11=0\n    local new_char_ascii_values_index_count12=0\n\
    \    local new_char_ascii_values_index_count13=0\n    local new_char_ascii_values_index_count14=0\n\
    \    local new_char_ascii_values_index_count15=0\n    local new_char_ascii_values_index_count16=0\n\
    \    local new_char_ascii_values_index_count17=0\n    local new_char_ascii_values_index_count18=0\n\
    \    local new_char_ascii_values_index_count19=0\n    local new_char_ascii_values_index_count20=0\n\
    \    local new_char_ascii_values_index_count21=0\n    local new_char_ascii_values_index_count22=0\n\
    \    local new_char_ascii_values_index_count23=0\n    local new_char_ascii_values_index_count24=0\n\
    \    local new_char_ascii_values_index_count25=0\n    local new_char_ascii_values_index_count26=0\n\
    \    local new_char_ascii_values_index_count27=0\n    local new_char_ascii_values_index_count28=0\n\
    \    local new_char_ascii_values_index_count29=0\n    local new_char_ascii_values_index_count30=0\n\
    \    local new_char_ascii_values_index_count31=0\n    local new_char_ascii_values_index_count32=0\n\
    \    local new_char_ascii_values_index_count33=0\n    local new_char_ascii_values_index_count34=0\n\
    \    local new_char_ascii_values_index_count35=0\n    local new_char_ascii_values_index_count36=0\n\
    \    local new_char_ascii_values_index_count37=0\n    local new_char_ascii_value\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local new_count=0\n    local char\n    local new_char\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local count=0\n\
    \    local count2=0\n    local count3=0\n    local count4=0\n    local count5=0\n\
    \    local count6=0\n    local count7=0\n    local count8=0\n    local count9=0\n\
    \    local count10=0\n    local count11=0\n    local count12=0\n    local count13=0\n\
    \    local count14=0\n    local count15=0\n    local count16=0\n    local count17=0\n\
    \    local count18=0\n    local count19=0\n    local count20=0\n    local count21=0\n\
    \    local count22=0\n    local count23=0\n    local count24=0\n    local count25=0\n\
    \    local count26=0\n    local count27=0\n    local count28=0\n    local count29=0\n\
    \    local count30=0\n    local count31=0\n    local count32=0\n    local count33=0\n\
    \    local count34=0\n    local count35=0\n    local count36=0\n    local count37=0\n\
    \    local count38=0\n    local count39=0\n    local count40=0\n    local count41=0\n\
    \    local count42=0\n    local count43=0\n    local count44=0\n    local count45=0\n\
    \    local count46=0\n    local count47=0\n    local count48=0\n    local count49=0\n\
    \    local count50=0\n    local count51=0\n    local count52=0\n    local count53=0\n\
    \    local count54=0\n    local count55=0\n    local count56=0\n    local count57=0\n\
    \    local count58=0\n    local count59=0\n    local count60=0\n    local count61=0\n\
    \    local count62=0\n    local count63=0\n    local count64=0\n    local count65=0\n\
    \    local count66=0\n    local count67=0\n    local count68=0\n    local count69=0\n\
    \    local count70=0\n    local count71=0\n    local count72=0\n    local count73=0\n\
    \    local count74=0\n    local count75=0\n    local count76=0\n    local count77=0\n\
    \    local count78=0\n    local count79=0\n    local count80=0\n    local count81=0\n\
    \    local count82=0\n    local count83=0\n    local count\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_length=0\n    local word_index=0\n    local word_character\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_character_length\n    local word_character_index\n\
    \    local word_character_length\n    local word_character_index\n    local word_character_length\n\
    \    local word_character_index\n    local word_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local word_count=0\n\
    \  local word_length=0\n  local word_index=0\n  local word_char_index=0\n  local\
    \ word_char_length=0\n  local word_char_index2=0\n  local word_char_length2=0\n\
    \  local word_char_index3=0\n  local word_char_length3=0\n  local word_char_index4=0\n\
    \  local word_char_length4=0\n  local word_char_index5=0\n  local word_char_length5=0\n\
    \  local word_char_index6=0\n  local word_char_length6=0\n  local word_char_index7=0\n\
    \  local word_char_length7=0\n  local word_char_index8=0\n  local word_char_length8=0\n\
    \  local word_char_index9=0\n  local word_char_length9=0\n  local word_char_index10=0\n\
    \  local word_char_length10=0\n  local word_char_index11=0\n  local word_char_length11=0\n\
    \  local word_char_index12=0\n  local word_char_length12=0\n  local word_char_index13=0\n\
    \  local word_char_length13=0\n  local word_char_index14=0\n  local word_char_length14=0\n\
    \  local word_char_index15=0\n  local word_char_length15=0\n  local word_char_index16=0\n\
    \  local word_char_length16=0\n  local word_char_index17=0\n  local word_char_length17=0\n\
    \  local word_char_index18=0\n  local word_char_length18=0\n  local word_char_index19=0\n\
    \  local word_char_length19=0\n  local word_char_index20=0\n  local word_char_length20=0\n\
    \  local word_char_index21=0\n  local word_char_length21=0\n  local word_char_index22=0\n\
    \  local word_char_length22=0\n  local word_char_index23=0\n  local word_char_length23=0\n\
    \  local word_char_index24=0\n  local word_char_length24=0\n  local word_char_index25=0\n\
    \  local word_char_length25=0\n  local word_char_index26=0\n  local word_char_length26=0\n\
    \  local word_char_index27=0\n  local word_char_length27=0\n  local word_char_index28=0\n\
    \  local word_char_length28=0\n  local word_char_index29=0\n  local word_char_length29=0\n\
    \  local word_char_index30=0\n  local word_char_length30=0\n  local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    local word_count=0\n    local word_length=0\n    local word_length_count=0\n\
    \    local word_count2=0\n    local word_length_count2=0\n    local word_count3=0\n\
    \    local word_length_count3=0\n    local word_count4=0\n    local word_length_count4=0\n\
    \    local word_count5=0\n    local word_length_count5=0\n    local word_count6=0\n\
    \    local word_length_count6=0\n    local word_count7=0\n    local word_length_count7=0\n\
    \    local word_count8=0\n    local word_length_count8=0\n    local word_count9=0\n\
    \    local word_length_count9=0\n    local word_count10=0\n    local word_length_count10=0\n\
    \    local word_count11=0\n    local word_length_count11=0\n    local word_count12=0\n\
    \    local word_length_count12=0\n    local word_count13=0\n    local word_length_count13=0\n\
    \    local word_count14=0\n    local word_length_count14=0\n    local word_count15=0\n\
    \    local word_length_count15=0\n    local word_count16=0\n    local word_length_count16=0\n\
    \    local word_count17=0\n    local word_length_count17=0\n    local word_count18=0\n\
    \    local word_length_count18=0\n    local word_count19=0\n    local word_length_count19=0\n\
    \    local word_count20=0\n    local word_length_count20=0\n    local word_count21=0\n\
    \    local word_length_count21=0\n    local word_count22=0\n    local word_length_count22=0\n\
    \    local word_count23=0\n    local word_length_count23=0\n    local word_count24=0\n\
    \    local word_length_count24=0\n    local word_count25=0\n    local word_length_count25=0\n\
    \    local word_count26=0\n    local word_length_count26=0\n    local word_count27=0\n\
    \    local word_length_count27=0\n    local word_count28=0\n    local word_length_count28=0\n\
    \    local word_count29=0\n    local word_length_count29=0\n    local word_count30=0\n\
    \    local word_length_count30=0\n    local word_count31=0\n    local word_length_count31=0\n\
    \    local word_count32=0\n    local word_length_count32=0\n    local word_count33=0\n\
    \    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local new_string=\"\"\n  local count=0\n\
    \  local char\n  local new_char\n  local new_count=0\n  local new_char2\n  local\
    \ new_count2\n  local new_char3\n  local new_count3\n  local new_char4\n  local\
    \ new_count4\n  local new_char5\n  local new_count5\n  local new_char6\n  local\
    \ new_count6\n  local new_char7\n  local new_count7\n  local new_char8\n  local\
    \ new_count8\n  local new_char9\n  local new_count9\n  local new_char10\n  local\
    \ new_count10\n  local new_char11\n  local new_count11\n  local new_char12\n \
    \ local new_count12\n  local new_char13\n  local new_count13\n  local new_char14\n\
    \  local new_count14\n  local new_char15\n  local new_count15\n  local new_char16\n\
    \  local new_count16\n  local new_char17\n  local new_count17\n  local new_char18\n\
    \  local new_count18\n  local new_char19\n  local new_count19\n  local new_char20\n\
    \  local new_count20\n  local new_char21\n  local new_count21\n  local new_char22\n\
    \  local new_count22\n  local new_char23\n  local new_count23\n  local new_char24\n\
    \  local new_count24\n  local new_char25\n  local new_count25\n  local new_char26\n\
    \  local new_count26\n  local new_char27\n  local new_count27\n  local new_char28\n\
    \  local new_count28\n  local new_char29\n  local new_count29\n  local new_char30\n\
    \  local new_count30\n  local new_char31\n  local new_count31\n  local new_char32\n\
    \  local new_count32\n  local new_char33\n  local new_count33\n  local new_char34\n\
    \  local new_count34\n  local new_char35\n  local new_count35\n  local new_char36\n\
    \  local new_count36\n  local new_char37\n  local new_count37\n  local new_char38\n\
    \  local new_count38\n  local new_char39\n  local new_count39\n  local new_char40\n\
    \  local new_count40\n  local new_char41\n  local new_count41\n\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=$((${#string}\
    \ - 1))\n    local j=0\n    while [ $i -ge 0 ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=${char:0:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${char_value:1}\n        local char_value=${char_value:1}\n\
    \        local char_value=${\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpny_wy7bl.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local letter=${string:$i:1}\n\
    \        local letter_value=${letter:0:1}\n        local letter_next=${letter:1:1}\n\
    \        if [ $letter_value -eq $letter_next ]; then\n            local new_letter=${letter:0:1}\n\
    \            local new_letter_value=${letter:1:1}\n            local new_letter_next=${letter:2:1}\n\
    \            if [ $new_letter_value -eq $new_letter_next ]; then\n           \
    \     new_string=$new_string$new_letter\n                i=$((i+1))\n        \
    \    else\n                new_string=$new_string$new_letter\n               \
    \ i=$((i+1))\n            fi\n        else\n            new_string=$new_string$letter\n\
    \            i=$((i+1))\n        fi\n    done\n    echo $new_string\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgk27srz2.sh: line 24: [: H: unary operator expected

    /tmp/tmpgk27srz2.sh: line 24: [: i: unary operator expected

    /tmp/tmpgk27srz2.sh: line 24: [: h: unary operator expected

    /tmp/tmpgk27srz2.sh: line 24: [: e: unary operator expected

    /tmp/tmpgk27srz2.sh: line 24: [: l: unary operator expected

    /tmp/tmpgk27srz2.sh: line 24: [: l: unary operator expected

    /tmp/tmpgk27srz2.sh: line 24: [: o: unary operator expected

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_array=()\n    local word_index=0\n  \
    \  local word_length=0\n    local word_count=0\n    local word_length=0\n    local\
    \ word_array=()\n    local word_index=0\n    local word_length=0\n    local word_count=0\n\
    \    local word_length=0\n    local word_array=()\n    local word_index=0\n  \
    \  local word_length=0\n    local word_count=0\n    local word_length=0\n    local\
    \ word_array=()\n    local word_index=0\n    local word_length=0\n    local word_count=0\n\
    \    local word_length=0\n    local word_array=()\n    local word_index=0\n  \
    \  local word_length=0\n    local word_count=0\n    local word_length=0\n    local\
    \ word_array=()\n    local word_index=0\n    local word_length=0\n    local word_count=0\n\
    \    local word_length=0\n    local word_array=()\n    local word_index=0\n  \
    \  local word_length=0\n    local word_count=0\n    local word_length=0\n    local\
    \ word_array=()\n    local word_index=0\n    local word_length=0\n    local word_count=0\n\
    \    local word_length=0\n    local word_array=()\n    local word_index=0\n  \
    \  local word_length=0\n    local word_count=0\n    local word_length=0\n    local\
    \ word_array=()\n    local word_index=0\n    local word_length=0\n    local word_count=0\n\
    \    local word_length=0\n    local word_array=()\n    local word_index=0\n  \
    \  local word_length=0\n    local word_count=0\n    local word_length=0\n    local\
    \ word_array=()\n    local word_index=0\n    local word_length=0\n    local word_count=0\n\
    \    local word_length=0\n    local word_array=()\n    local word_index=0\n  \
    \  local word_length=0\n    local word_count=0\n    local word_length=0\n    local\
    \ word_array=()\n    local word_index=0\n    local word_length=0\n    local word_count=0\n\
    \    local word_length=0\n    local word_array=()\n    local word_index=0\n  \
    \  local word_length=0\n    local word_count=0\n    local word_length=0\n    local\
    \ word_array=()\n    local word_index=0\n    local word_length=0\n    local word_count\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_count=0\n    local word_index=0\n    local word_length=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_count=0\n    local word_char_position=0\n\
    \    local word_char_position_index=0\n    local word_char_position_length=0\n\
    \    local word_char_position_char_index=0\n    local word_char_position_char_length=0\n\
    \    local word_char_position_char_count=0\n    local word_char_position_char_position=0\n\
    \    local word_char_position_char_position_index=0\n    local word_char_position_char_position_length=0\n\
    \    local word_char_position_char_position_char_index=0\n    local word_char_position_char_position_char_length=0\n\
    \    local word_char_position_char_position_char_count=0\n    local word_char_position_char_position_char_position=0\n\
    \    local word_char_position_char_position_char_position_index=0\n    local word_char_position_char_position_char_position_length=0\n\
    \    local word_char_position_char_position_char_position_char_index=0\n    local\
    \ word_char_position_char_position_char_position_char_length=0\n    local word_char_position_char_position_char_position_char_count=0\n\
    \    local word_char_position_char_position_char_position_char_position=0\n  \
    \  local word_char_position_char_position_char_position_char_position_index=0\n\
    \    local word_char_position_char_position_char_position_char_position_length=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_index=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_length=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_count=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_index=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_length=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_char_index=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_char_length=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_char_count=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_char_position=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_char_position_index=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_char_position_length=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_char_position_char_index=0\n\
    \    local word_char_position_char_position_char_position_char_position_char_position_char_position_char_length=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local char\n    local new_char\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n   \
    \ local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local\
    \ I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n\
    \    local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n \
    \   local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n  \
    \  local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local i=0\
    \ j=0\n  local word_count=0\n  local word_length=0\n  local word_index=0\n  local\
    \ word_char_index=0\n  local word_char_count=0\n  local word_char_length=0\n \
    \ local word_char_char_length=0\n  local word_char_char_char_length=0\n  local\
    \ word_char_char_char_char_length=0\n  local word_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_length=0\n  local word_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_length=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_char_length=0\n  local\
    \ word_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length=0\n\
    \  local word_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_length=0\n    local word_char_index2=0\n    local word_char_length2=0\n\
    \    local word_char_index3=0\n    local word_char_length3=0\n    local word_char_index4=0\n\
    \    local word_char_length4=0\n    local word_char_index5=0\n    local word_char_length5=0\n\
    \    local word_char_index6=0\n    local word_char_length6=0\n    local word_char_index7=0\n\
    \    local word_char_length7=0\n    local word_char_index8=0\n    local word_char_length8=0\n\
    \    local word_char_index9=0\n    local word_char_length9=0\n    local word_char_index10=0\n\
    \    local word_char_length10=0\n    local word_char_index11=0\n    local word_char_length11=0\n\
    \    local word_char_index12=0\n    local word_char_length12=0\n    local word_char_index13=0\n\
    \    local word_char_length13=0\n    local word_char_index14=0\n    local word_char_length14=0\n\
    \    local word_char_index15=0\n    local word_char_length15=0\n    local word_char_index16=0\n\
    \    local word_char_length16=0\n    local word_char_index17=0\n    local word_char_length17=0\n\
    \    local word_char_index18=0\n    local word_char_length18=0\n    local word_char_index19=0\n\
    \    local word_char_length19=0\n    local word_char_index20=0\n    local word_char_length20=0\n\
    \    local word_char_index21=0\n    local word_char_length21=0\n    local word_char_index22=0\n\
    \    local word_char_length22=0\n    local word_char_index23=0\n    local word_char_length23=0\n\
    \    local word_char_index24=0\n    local word_char_length24=0\n    local word_char_index25=0\n\
    \    local word_char_length25=0\n    local word_char_index26=0\n    local word_char_length26=0\n\
    \    local word_char_index27=0\n    local word_char_length27=0\n    local word_char_index28=0\n\
    \    local word_char_length28=0\n    local word_char_index29=0\n    local word_char_length29=0\n\
    \    local word_char_index30=0\n    local word_char_length30=0\n    local word_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local words=$(echo\
    \ $string | tr ' ' '\\n' | sort -u)\n  for word in $words; do\n    local chars=$(echo\
    \ $word | tr ' ' '\\n' | sort -u)\n    for char in $chars; do\n      local ascii=$(echo\
    \ $char | tr -d '[:digit:]')\n      local new_char=$(echo $char | tr '[:upper:]'\
    \ '[:lower:]')\n      local new_ascii=$(echo $ascii | bc)\n      new_string+=\"\
    $(echo $new_char | sed \"s/$char/$new_ascii/g\")\"\n    done\n    new_string+=\"\
    \ \"\n  done\n  echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ i=0 j=0\n    while [ $i -lt ${#string} ]; do\n        local c=\"${string:$i:1}\"\
    \n        local b=\"${string:$i:1}\"\n        local d=\"${string:$i:1}\"\n   \
    \     local e=\"${string:$i:1}\"\n        local f=\"${string:$i:1}\"\n       \
    \ local g=\"${string:$i:1}\"\n        local h=\"${string:$i:1}\"\n        local\
    \ i=\"${string:$i:1}\"\n        local j=\"${string:$i:1}\"\n        local k=\"\
    ${string:$i:1}\"\n        local l=\"${string:$i:1}\"\n        local m=\"${string:$i:1}\"\
    \n        local n=\"${string:$i:1}\"\n        local o=\"${string:$i:1}\"\n   \
    \     local p=\"${string:$i:1}\"\n        local q=\"${string:$i:1}\"\n       \
    \ local r=\"${string:$i:1}\"\n        local s=\"${string:$i:1}\"\n        local\
    \ t=\"${string:$i:1}\"\n        local u=\"${string:$i:1}\"\n        local v=\"\
    ${string:$i:1}\"\n        local w=\"${string:$i:1}\"\n        local x=\"${string:$i:1}\"\
    \n        local y=\"${string:$i:1}\"\n        local z=\"${string:$i:1}\"\n   \
    \     local A=\"${string:$i:1}\"\n        local B=\"${string:$i:1}\"\n       \
    \ local C=\"${string:$i:1}\"\n        local D=\"${string:$i:1}\"\n        local\
    \ E=\"${string:$i:1}\"\n        local F=\"${string:$i:1}\"\n        local G=\"\
    ${string:$i:1}\"\n        local H=\"${string:$i:1}\"\n        local I=\"${string:$i:1}\"\
    \n        local J=\"${string:$i:1}\"\n        local K=\"${string:$i:1}\"\n   \
    \     local L=\"${string:$i:1}\"\n        local M=\"${string:$i:1}\"\n       \
    \ local N=\"${string:$i:1}\"\n        local O=\"${string:$i:1}\"\n        local\
    \ P=\"${string:$i:1}\"\n        local Q=\"${string:$i:1}\"\n        local R=\"\
    ${string:$i:1}\"\n        local S=\"${string:$i:1}\"\n        local T=\"${string:$i:1}\"\
    \n        local U=\"${string:$i:1}\"\n        local V=\"${string:$i:1}\"\n   \
    \     local W=\"${string:$i:1}\"\n        \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuku_a8l8.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmpuku_a8l8.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=($string)\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=0\n   \
    \ local word_char\n    local word_char_length\n    local word_char_length\n  \
    \  local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    local word_char_length\n    local word_char_length\n\
    \    local word_char_length\n    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local char\n  local new_char\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        if [ $char =~ [[:alpha:]]  ]; then\n            local char_ascii=$(echo\
    \ $char | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g'\
    \ | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed\
    \ 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\\
    (.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\\
    1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' |\
    \ sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed\
    \ 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\\
    (.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\\
    1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' |\
    \ sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed\
    \ 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\\
    (.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\\
    1/g' | sed 's/\\(.\\)/\\1/g' | sed 's/\\(.\\)/\\1/g\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpphhel2b4.sh: line 23: unexpected EOF while looking for matching
    `''''

    /tmp/tmpphhel2b4.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_array=($string)\n\
    \    local word_count=0\n    local word_index=0\n    local word_length=$#word_array\n\
    \    local word_length_count=0\n    local word_length_char_count=0\n    local\
    \ word_length_char_array=($word_length)\n    local word_length_char_array_count=0\n\
    \    local word_length_char_array_index=0\n    local word_length_char_array_length=$#word_length_char_array\n\
    \    local word_length_char_array_char_count=0\n    local word_length_char_array_char_array=($word_length_char_array)\n\
    \    local word_length_char_array_char_array_count=0\n    local word_length_char_array_char_array_index=0\n\
    \    local word_length_char_array_char_array_length=$#word_length_char_array_char_array\n\
    \    local word_length_char_array_char_array_char_count=0\n    local word_length_char_array_char_array_char_array=($word_length_char_array_char_array)\n\
    \    local word_length_char_array_char_array_char_array_count=0\n    local word_length_char_array_char_array_char_array_index=0\n\
    \    local word_length_char_array_char_array_char_array_length=$#word_length_char_array_char_array_char_array\n\
    \    local word_length_char_array_char_array_char_array_char_count=0\n    local\
    \ word_length_char_array_char_array_char_array_char_array=($word_length_char_array_char_array_char_array)\n\
    \    local word_length_char_array_char_array_char_array_char_array_count=0\n \
    \   local word_length_char_array_char_array_char_array_char_array_index=0\n  \
    \  local word_length_char_array_char_array_char_array_char_array_length=$#word_length_char_array_char_array_char_array_char_array\n\
    \    local word_length_char_array_char_array_char_array_char_array_char_count=0\n\
    \    local word_length_char_array_char_array_char_array_char_array_char_array=($word_length_char_array_char_array_char_array_char_array)\n\
    \    local word_length_char_array_char_array_char_array_char_array_char_array_count=0\n\
    \    local word_length_char_array_char_array_char_array_char_array_char_array_index=0\n\
    \    local word_length_char_array_char_array_char_array_char_array_char_array_length=$#word_length_char_array_char_array_char_array_char_array_char_array\n\
    \    local word_length_char_array_char_array_char_array_char_array_char_array_char_count=0\n\
    \    local word_length_char_array_char_array_char_array_char_array_char_array_char_array=($word_length_char_array_char_array_char_array_char_array_char_array_char_array)\n\
    \    local word_length_char_array_char_array_char_array_char_array_char_array_char_array_count=0\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local count=0\n\
    \  local char_count=0\n  local char_array=()\n  local char_array_length=${#string}\n\
    \  local char_array_length_temp=0\n  local char_array_length_temp2=0\n  local\
    \ char_array_length_temp3=0\n  local char_array_length_temp4=0\n  local char_array_length_temp5=0\n\
    \  local char_array_length_temp6=0\n  local char_array_length_temp7=0\n  local\
    \ char_array_length_temp8=0\n  local char_array_length_temp9=0\n  local char_array_length_temp10=0\n\
    \  local char_array_length_temp11=0\n  local char_array_length_temp12=0\n  local\
    \ char_array_length_temp13=0\n  local char_array_length_temp14=0\n  local char_array_length_temp15=0\n\
    \  local char_array_length_temp16=0\n  local char_array_length_temp17=0\n  local\
    \ char_array_length_temp18=0\n  local char_array_length_temp19=0\n  local char_array_length_temp20=0\n\
    \  local char_array_length_temp21=0\n  local char_array_length_temp22=0\n  local\
    \ char_array_length_temp23=0\n  local char_array_length_temp24=0\n  local char_array_length_temp25=0\n\
    \  local char_array_length_temp26=0\n  local char_array_length_temp27=0\n  local\
    \ char_array_length_temp28=0\n  local char_array_length_temp29=0\n  local char_array_length_temp30=0\n\
    \  local char_array_length_temp31=0\n  local char_array_length_temp32=0\n  local\
    \ char_array_length_temp33=0\n  local char_array_length_temp34=0\n  local char_array_length_temp35=0\n\
    \  local char_array_length_temp36=0\n  local char_array_length_temp37=0\n  local\
    \ char_array_length_temp38=0\n  local char_array_length_temp39=0\n  local char_array_length_temp40=0\n\
    \  local char_array_length_temp41=0\n  local char_array_length_temp42=0\n  local\
    \ char_array_length_temp43=0\n  local char_array_length_temp44=0\n  local char_array_length_temp45=0\n\
    \  local char_array_length_temp46=0\n  local char_array_length_temp47=0\n  local\
    \ char_array_length_temp48=0\n  local char_array_length_temp49=0\n  local char_array_length_temp50=0\n\
    \  local char_array_length_temp51=0\n  local char_array_length_temp52=0\n  local\
    \ char_array_length_temp\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ count=0\n    local new_count=0\n    local words=($string)\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local word_length_index=0\n\
    \    local word_length_count=0\n    local word_length_index=0\n    local word_length_count=0\n\
    \    local word_length_index=0\n    local word_length_count=0\n    local \n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word_count=0\n\
    \    local word_length=0\n    local word_index=0\n    local word_char_index=0\n\
    \    local word_char_count=0\n    local word_char\n    local word_char_length\n\
    \    local word_char_length_count\n    local word_char_length_index\n    local\
    \ word_char_length_count\n    local word_char_length_index\n    local word_char_length_count\n\
    \    local word_char_length_index\n    local word_char_length_count\n    local\
    \ word_char_length_index\n    local word_char_length_count\n    local word_char_length_index\n\
    \    local word_char_length_count\n    local word_char_length_index\n    local\
    \ word_char_length_count\n    local word_char_length_index\n    local word_char_length_count\n\
    \    local word_char_length_index\n    local word_char_length_count\n    local\
    \ word_char_length_index\n    local word_char_length_count\n    local word_char_length_index\n\
    \    local word_char_length_count\n    local word_char_length_index\n    local\
    \ word_char_length_count\n    local word_char_length_index\n    local word_char_length_count\n\
    \    local word_char_length_index\n    local word_char_length_count\n    local\
    \ word_char_length_index\n    local word_char_length_count\n    local word_char_length_index\n\
    \    local word_char_length_count\n    local word_char_length_index\n    local\
    \ word_char_length_count\n    local word_char_length_index\n    local word_char_length_count\n\
    \    local word_char_length_index\n    local word_char_length_count\n    local\
    \ word_char_length_index\n    local word_char_length_count\n    local word_char_length_index\n\
    \    local word_char_length_count\n    local word_char_length_index\n    local\
    \ word_char_length_count\n    local word_char_length_index\n    local word_char_length_count\n\
    \    local word_char_length_index\n    local word_char_length_count\n    local\
    \ word_char_length_index\n    local word_char_length_count\n    local word_char_length_index\n\
    \    local word_char_length_count\n    local word_char_length_index\n    local\
    \ word_char_length_count\n    local word_char_length_index\n    local word_char_length_count\n\
    \    local word_char_length_index\n    local word_char_length_count\n    local\
    \ word_char_length_index\n    local word_char_length_count\n    local word_char_length_index\n\
    \    local word_char_length_count\n    local word_char_length_index\n    local\
    \ word_char_length_count\n    local word_char_length_index\n    local word_char_length_count\n\
    \    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local a=0\n    local b=0\n    local c=0\n    local\
    \ d=0\n    local \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=0\
    \ j=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n\
    \        local next_char=${string:$(($i+1)):1}\n        if [ $char -gt $next_char\
    \ ]; then\n            new_string=\"${new_string}${string:$i:1}\"\n          \
    \  i=$(($i+1))\n        else\n            new_string=\"${new_string}${string:$j:1}\"\
    \n            j=$(($j+1))\n        fi\n    done\n    echo $new_string\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=59 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=52 encoding='utf-8'>
  timestamp: 1660044707
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local i=${#string}\n\
    \    local j=0\n    while [ $i -gt 0 ]; do\n        local char=${string:$i:1}\n\
    \        local char_value=$(echo $char | tr -dc '[:ascii:]')\n        local new_char=${char:0:1}\n\
    \        local new_char_value=$(echo $new_char | tr -dc '[:ascii:]')\n       \
    \ if [ $char_value -gt $new_char_value ]; then\n            new_string=$new_string$new_char\n\
    \        else\n            new_string=$new_string$char\n        fi\n        i=$((\
    \ $i - 1 ))\n        j=$(( $j + 1 ))\n    done\n    echo $new_string\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: "tr: invalid character class \u2018ascii\u2019\ntr: invalid character class\
    \ \u2018ascii\u2019\ntr: invalid character class \u2018ascii\u2019\ntr: invalid\
    \ character class \u2018ascii\u2019\n"
  stdout: ''
  timestamp: 1660044702
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word_array=()\n    local word_count=0\n    local word_index=0\n    local word_length=0\n\
    \    local word_char_count=0\n    local word_char_length=0\n    local word_char_array=()\n\
    \    local word_char_length_count=0\n    local word_char_length_index=0\n    local\
    \ word_char_length_array=()\n    local word_char_length_array_index=0\n    local\
    \ word_char_length_array_length=0\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_array_count=0\n    local word_char_length_array_index=0\n\
    \    local word_char_length_array_length=0\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_array_count=0\n    local word_char_length_array_index=0\n\
    \    local word_char_length_array_length=0\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_array_count=0\n    local word_char_length_array_index=0\n\
    \    local word_char_length_array_length=0\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_array_count=0\n    local word_char_length_array_index=0\n\
    \    local word_char_length_array_length=0\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_array_count=0\n    local word_char_length_array_index=0\n\
    \    local word_char_length_array_length=0\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_array_count=0\n    local word_char_length_array_index=0\n\
    \    local word_char_length_array_length=0\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_array_count=0\n    local word_char_length_array_index=0\n\
    \    local word_char_length_array_length=0\n    local word_char_length_array_count=0\n\
    \    local word_char_length_array_index=0\n    local word_char_length_array_length=0\n\
    \    local word_char_length_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044702
