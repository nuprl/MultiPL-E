language: sh
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( a%3 ))\n        if [ $b -eq 0 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  [[ \"$x\" =~ ^[0-9]+$ ]] || return 1\n  local y\n  (( y=$x*$x*$x ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7npnhgy9.sh: line 72: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7npnhgy9.sh: line 92: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq $x ]] ; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal number=$1\n\
    \tlocal result=false\n\tif [[ $number -eq 0 ]]; then\n\t\tresult=true\n\telse\n\
    \t\tif [[ $number -le 0 ]]; then\n\t\t\tresult=true\n\t\telse\n\t\t\tif [[ $number\
    \ -ge 0 ]]; then\n\t\t\t\tif [[ $number -le $((number*number*number)) ]]; then\n\
    \t\t\t\t\tresult=true\n\t\t\t\telse\n\t\t\t\t\tresult=false\n\t\t\t\tfi\n\t\t\t\
    else\n\t\t\t\tresult=false\n\t\t\tfi\n\t\tfi\n\tfi\n\techo $result\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $a -le 180 ]\n   \
    \ then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((x*y*z))\n    local cubew=$((x*y*w))\n    local cubeh=$((x*z*w))\n  \
    \  local cubeh=$((y*z*w))\n    local cubeh=$((z*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7p4qju08.sh: line 62: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7p4qju08.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]; then return 1; fi\n  if [ $a -eq 1 ]; then return 1; fi\n  if\
    \ [ $a -eq 2 ]; then return 1; fi\n  if [ $a -eq 3 ]; then return 1; fi\n  if\
    \ [ $a -eq 4 ]; then return 1; fi\n  if [ $a -eq 5 ]; then return 1; fi\n  if\
    \ [ $a -eq 6 ]; then return 1; fi\n  if [ $a -eq 7 ]; then return 1; fi\n  if\
    \ [ $a -eq 8 ]; then return 1; fi\n  if [ $a -eq 9 ]; then return 1; fi\n  if\
    \ [ $a -eq 10 ]; then return 1; fi\n  if [ $a -eq 11 ]; then return 1; fi\n  if\
    \ [ $a -eq 12 ]; then return 1; fi\n  if [ $a -eq 13 ]; then return 1; fi\n  if\
    \ [ $a -eq 14 ]; then return 1; fi\n  if [ $a -eq 15 ]; then return 1; fi\n  if\
    \ [ $a -eq 16 ]; then return 1; fi\n  if [ $a -eq 17 ]; then return 1; fi\n  if\
    \ [ $a -eq 18 ]; then return 1; fi\n  if [ $a -eq 19 ]; then return 1; fi\n  if\
    \ [ $a -eq 20 ]; then return 1; fi\n  if [ $a -eq 21 ]; then return 1; fi\n  if\
    \ [ $a -eq 22 ]; then return 1; fi\n  if [ $a -eq 23 ]; then return 1; fi\n  if\
    \ [ $a -eq 24 ]; then return 1; fi\n  if [ $a -eq 25 ]; then return 1; fi\n  if\
    \ [ $a -eq 26 ]; then return 1; fi\n  if [ $a -eq 27 ]; then return 1; fi\n  if\
    \ [ $a -eq 28 ]; then return 1; fi\n  if [ $a -eq 29 ]; then return 1; fi\n  if\
    \ [ $a -eq 30 ]; then return 1; fi\n  if [ $a -eq 31 ]; then return 1; fi\n  if\
    \ [ $a -eq 32 ]; then return 1; fi\n  if [ $a -eq 33 ]; then return 1; fi\n  if\
    \ [ $a -eq 34 ]; then return 1; fi\n  if [ $a -eq 35 ]; then return 1; fi\n  if\
    \ \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv3tor98n.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpv3tor98n.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(( a * a ))\n    local c=$(( a * a + b ))\n    local d=$(( a * a\
    \ + b + c ))\n    local e=$(( a * a + b + c + d ))\n    local f=$(( a * a + b\
    \ + c + d + e ))\n    local g=$(( a * a + b + c + d + e + f ))\n    local h=$((\
    \ a * a + b + c + d + e + f + g ))\n    local i=$(( a * a + b + c + d + e + f\
    \ + g + h ))\n    local j=$(( a * a + b + c + d + e + f + g + h + i ))\n    local\
    \ k=$(( a * a + b + c + d + e + f + g + h + i + j ))\n    local l=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k ))\n    local m=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l ))\n    local n=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m ))\n    local o=$(( a * a + b + c + d + e + f\
    \ + g + h + i + j + k + l + m + n ))\n    local p=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m + n + o ))\n    local q=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l + m + n + o + p ))\n    local r=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q ))\n    local\
    \ s=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q\
    \ + r ))\n    local t=$(( a * a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + p + q + r + s ))\n    local u=$(( a * a + b + c + d + e + f + g\
    \ + h + i + j + k + l + m + n + o + p\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwvo1_36p.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpwvo1_36p.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $a -le 180 ]\n   \
    \ then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 1 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 2 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 3 ]\n    then\n        echo \"true\"\n    elif [\
    \ $a -eq 4 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 5 ]\n    then\n\
    \        echo \"true\"\n    elif [ $a -eq 6 ]\n    then\n        echo \"true\"\
    \n    elif [ $a -eq 7 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 8\
    \ ]\n    then\n        echo \"true\"\n    elif [ $a -eq 9 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $a -eq 10 ]\n    then\n        echo \"true\"\n  \
    \  elif [ $a -eq 11 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 12 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 13 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 14 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 15 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 16 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 18 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 19 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 20 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 21 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 23 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 24 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 25 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 26 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 27 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 28 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]\n    then\n        \n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5rhz9jpl.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmp5rhz9jpl.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( $a%3 ))\n        if [ $b -eq 0 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    elif [ $x -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 3 ]; then \n        echo \"true\"\n    elif [ $x -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 6 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $x -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 9 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $x -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 13 ]; then \n        echo \"true\"\n    elif [ $x -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 16 ]; then \n        echo \"true\"\n    elif [ $x -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 19 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $x -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 22 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $x -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 26 ]; then \n        echo \"true\"\n    elif [ $x -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 29 ]; then \n        echo \"true\"\n    elif [ $x -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoo5yu6n5.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmpoo5yu6n5.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y\n    local z\n    local w\n    local cube\n    local cubes\n   \
    \ local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cubes=$(echo \"$n\" | awk '{print $1}')\n    local cube=$((cubes % 3))\n\
    \    local cube2=$((cubes / 3))\n    local cube3=$((cube2 / 3))\n    local cube4=$((cube3\
    \ / 3))\n    local cube5=$((cube4 / 3))\n    local cube6=$((cube5 / 3))\n    local\
    \ cube7=$((cube6 / 3))\n    local cube8=$((cube7 / 3))\n    local cube9=$((cube8\
    \ / 3))\n    local cube10=$((cube9 / 3))\n    local cube11=$((cube10 / 3))\n \
    \   local cube12=$((cube11 / 3))\n    local cube13=$((cube12 / 3))\n    local\
    \ cube14=$((cube13 / 3))\n    local cube15=$((cube14 / 3))\n    local cube16=$((cube15\
    \ / 3))\n    local cube17=$((cube16 / 3))\n    local cube18=$((cube17 / 3))\n\
    \    local cube19=$((cube18 / 3))\n    local cube20=$((cube19 / 3))\n    local\
    \ cube21=$((cube20 / 3))\n    local cube22=$((cube21 / 3))\n    local cube23=$((cube22\
    \ / 3))\n    local cube24=$((cube23 / 3))\n    local cube25=$((cube24 / 3))\n\
    \    local cube26=$((cube25 / 3))\n    local cube27=$((cube26 / 3))\n    local\
    \ cube28=$((cube27 / 3))\n    local cube29=$((cube28 / 3))\n    local cube30=$((cube29\
    \ / 3))\n    local cube31=$((cube30 / 3))\n    local cube32=$((cube31 / 3))\n\
    \    local cube33=$((cube32 / 3))\n    local cube34=$((cube33 / 3))\n    local\
    \ cube35=$((cube34 / 3))\n    local cube36=$((cube35 / 3))\n    local cube37=$((cube36\
    \ / 3))\n    local cube38=$((cube37 / 3))\n    local cube39=$((cube38 / 3))\n\
    \    local cube40=$((cube39 / 3))\n    local cube41=$((cube40 / 3))\n    local\
    \ cube42=$((cube41 / 3))\n    local cube43=$((cube42 / 3))\n    local cube44=$((cube43\
    \ / 3))\n    local cube45=$((cube44\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxddwdh36.sh: line 67: unexpected EOF while looking for matching
    `)''

    /tmp/tmpxddwdh36.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal xx yy zz ww\n\t\
    local result\n\n\txx=\"$(( x % w ))\"\n\tyy=\"$(( y % w ))\"\n\tzz=\"$(( z % w\
    \ ))\"\n\tww=\"$(( w % w ))\"\n\n\tif (( xx != 0 )) && (( yy != 0 )) && (( zz\
    \ != 0 )) && (( ww != 0 ))\n\tthen\n\t\tresult=\"true\"\n\telse\n\t\tresult=\"\
    false\"\n\tfi\n\t\n\techo \"$result\"\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplbg19w9a.sh: line 28: x % w : division by 0 (error token is "w
    ")

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $a -eq 1 ]\n    then\n\
    \      echo \"true\"\n    else\n      if [ $a -eq 2 ]\n      then\n        echo\
    \ \"true\"\n      else\n        if [ $a -eq 3 ]\n        then\n          echo\
    \ \"true\"\n        else\n          if [ $a -eq 4 ]\n          then\n        \
    \    echo \"true\"\n          else\n            if [ $a -eq 5 ]\n            then\n\
    \              echo \"true\"\n            else\n              if [ $a -eq 6 ]\n\
    \              then\n                echo \"true\"\n              else\n     \
    \           if [ $a -eq 7 ]\n                then\n                  echo \"true\"\
    \n                else\n                  if [ $a -eq 8 ]\n                  then\n\
    \                    echo \"true\"\n                  else\n                 \
    \   if [ $a -eq 9 ]\n                    then\n                      echo \"true\"\
    \n                    else\n                      if [ $a -eq 10 ]\n         \
    \             then\n                        echo \"true\"\n                  \
    \    else\n                        if [ $a -eq 11 ]\n                        then\n\
    \                          echo \"true\"\n                        else\n     \
    \                     if [ $a -eq 12 ]\n                          then\n     \
    \                       echo \"true\"\n                          else\n      \
    \                      if [ $a -eq 13 ]\n                            then\n  \
    \                            echo \"true\"\n                            else\n\
    \                              if [ $a -eq 14 ]\n                            \
    \  then\n                                echo \"true\"\n                     \
    \         else\n                                if [ $a -eq 15 ]\n           \
    \                     then\n                                  echo \"true\"\n\
    \                                else\n                                  if [\
    \ $a -eq 16 ]\n                                  then\n                      \
    \              echo \"true\"\n                                  else\n       \
    \                             if [ $a -eq 17 ]\n                             \
    \       then\n                                      echo \"true\"\n          \
    \                          else\n                                      if [ $a\
    \ -eq 18 ]\n                                      then\n                     \
    \                   echo \"true\"\n                                      else\n\
    \                                        if [ $a -eq 19 ]\n                  \
    \                      then\n                                          echo \"\
    true\"\n                                        else\n                       \
    \                   if [ $a -eq 20 ]\n                                       \
    \   then\n                                            echo \"true\"\n        \
    \                                  else\n                                    \
    \        if [ $a -eq 21 ]\n                                            then\n\
    \                                              echo \"true\"\n               \
    \                             else\n                                         \
    \     if [ $a -eq 22 ]\n                                              then\n \
    \                                               echo \"true\"\n              \
    \                                else\n                                      \
    \          if [ $a -eq 23 ]\n                                                then\n\
    \                                                  echo \"true\"\n           \
    \                                     else\n                                 \
    \                 if [ $a -eq 24 ]\n                                         \
    \         then\n                                                    echo \"true\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp393a8ex.sh: line 136: unexpected EOF while looking for matching
    `"''

    /tmp/tmpp393a8ex.sh: line 140: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2pceqklv.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp2pceqklv.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=\"$2\"\n  local z=\"$3\"\n  local w=\"$4\"\n  local t=\"$5\"\n  local\
    \ f=\"$6\"\n  local g=\"$7\"\n  local h=\"$8\"\n  local i=\"$9\"\n  local j=\"\
    $10\"\n  local k=\"$11\"\n  local l=\"$12\"\n  local m=\"$13\"\n  local n=\"$14\"\
    \n  local o=\"$15\"\n  local p=\"$16\"\n  local q=\"$17\"\n  local r=\"$18\"\n\
    \  local s=\"$19\"\n  local t=\"$20\"\n  local u=\"$21\"\n  local v=\"$22\"\n\
    \  local w=\"$23\"\n  local x=\"$24\"\n  local y=\"$25\"\n  local z=\"$26\"\n\
    \  local w=\"$27\"\n  local t=\"$28\"\n  local f=\"$29\"\n  local g=\"$30\"\n\
    \  local h=\"$31\"\n  local i=\"$32\"\n  local j=\"$33\"\n  local k=\"$34\"\n\
    \  local l=\"$35\"\n  local m=\"$36\"\n  local n=\"$37\"\n  local o=\"$38\"\n\
    \  local p=\"$39\"\n  local q=\"$40\"\n  local r=\"$41\"\n  local s=\"$42\"\n\
    \  local t=\"$43\"\n  local u=\"$44\"\n  local v=\"$45\"\n  local w=\"$46\"\n\
    \  local x=\"$47\"\n  local y=\"$48\"\n  local z=\"$49\"\n  local w=\"$50\"\n\
    \  local t=\"$51\"\n  local f=\"$52\"\n  local g=\"$53\"\n  local h=\"$54\"\n\
    \  local i=\"$55\"\n  local j=\"$56\"\n  local k=\"$57\"\n  local l=\"$58\"\n\
    \  local m=\"$59\"\n  local n=\"$60\"\n  local o=\"$61\"\n  local p=\"$62\"\n\
    \  local q=\"$63\"\n  local r=\"$64\"\n  local s=\"$65\"\n  local t=\"$66\"\n\
    \  local u=\"$67\"\n  local v=\"$68\"\n  local w=\"$69\"\n  local x=\"$70\"\n\
    \  local y=\"$71\"\n  local z=\"$72\"\n  local w=\"$73\"\n  local t=\"$74\"\n\
    \  local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ \"$x\" -eq \"$x\" ] 2>/dev/null; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal t=\"$5\"\n\tlocal\
    \ f=\"$6\"\n\tlocal u=\"$7\"\n\tlocal v=\"$8\"\n\tlocal w1=\"$9\"\n\tlocal w2=\"\
    $10\"\n\tlocal w3=\"$11\"\n\tlocal w4=\"$12\"\n\tlocal w5=\"$13\"\n\tlocal w6=\"\
    $14\"\n\tlocal w7=\"$15\"\n\tlocal w8=\"$16\"\n\tlocal w9=\"$17\"\n\tlocal w10=\"\
    $18\"\n\tlocal w11=\"$19\"\n\tlocal w12=\"$20\"\n\tlocal w13=\"$21\"\n\tlocal\
    \ w14=\"$22\"\n\tlocal w15=\"$23\"\n\tlocal w16=\"$24\"\n\tlocal w17=\"$25\"\n\
    \tlocal w18=\"$26\"\n\tlocal w19=\"$27\"\n\tlocal w20=\"$28\"\n\tlocal w21=\"\
    $29\"\n\tlocal w22=\"$30\"\n\tlocal w23=\"$31\"\n\tlocal w24=\"$32\"\n\tlocal\
    \ w25=\"$33\"\n\tlocal w26=\"$34\"\n\tlocal w27=\"$35\"\n\tlocal w28=\"$36\"\n\
    \tlocal w29=\"$37\"\n\tlocal w30=\"$38\"\n\tlocal w31=\"$39\"\n\tlocal w32=\"\
    $40\"\n\tlocal w33=\"$41\"\n\tlocal w34=\"$42\"\n\tlocal w35=\"$43\"\n\tlocal\
    \ w36=\"$44\"\n\tlocal w37=\"$45\"\n\tlocal w38=\"$46\"\n\tlocal w39=\"$47\"\n\
    \tlocal w40=\"$48\"\n\tlocal w41=\"$49\"\n\tlocal w42=\"$50\"\n\tlocal w43=\"\
    $51\"\n\tlocal w44=\"$52\"\n\tlocal w45=\"$53\"\n\tlocal w46=\"$54\"\n\tlocal\
    \ w47=\"$55\"\n\tlocal w48=\"$56\"\n\tlocal w49=\"$57\"\n\tlocal w50=\"$58\"\n\
    \tlocal w51=\"$59\"\n\tlocal w52=\"$60\"\n\tlocal w53=\"$61\"\n\tlocal w54=\"\
    $62\"\n\tlocal w55=\"$63\"\n\tlocal w56=\"$64\"\n\tlocal w57=\"$65\"\n\tlocal\
    \ w58=\"$66\"\n\tlocal \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=$(( a * a ))\n\tlocal c=$(( a * a + b ))\n\tlocal d=$(( a * a + b + c ))\n\
    \tlocal e=$(( a * a + b + c + d ))\n\tlocal f=$(( a * a + b + c + d + e ))\n\t\
    local g=$(( a * a + b + c + d + e + f ))\n\tlocal h=$(( a * a + b + c + d + e\
    \ + f + g ))\n\tlocal i=$(( a * a + b + c + d + e + f + g + h ))\n\tlocal j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n\tlocal k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n\tlocal l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n\tlocal m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n\tlocal n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \tlocal o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\t\
    local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \tlocal q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n\tlocal r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n\tlocal s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n\tlocal t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n\tlocal u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa6w30q51.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpa6w30q51.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  [[\
    \ \"$n\" =~ ^-?[0-9]+$ ]] || return 1\n  local cubes=$(echo \"$n\" | bc)\n  [[\
    \ \"$cubes\" =~ ^[0-9]+$ ]] || return 1\n  [[ \"$cubes\" -eq \"$n\" ]] || return\
    \ 1\n  return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  [[\
    \ \"$n\" =~ ^-?[0-9]+$ ]] || return 1\n  local s=$((n%9))\n  [[ \"$s\" -eq 0 ]]\
    \ || return 1\n  local t=$((n%9))\n  [[ \"$t\" -eq 0 ]] || return 1\n  [[ \"$n\"\
    \ -eq 0 ]] || return 1\n  [[ \"$n\" -eq 1 ]] || return 1\n  [[ \"$n\" -eq 2 ]]\
    \ || return 1\n  [[ \"$n\" -eq 3 ]] || return 1\n  [[ \"$n\" -eq 4 ]] || return\
    \ 1\n  [[ \"$n\" -eq 5 ]] || return 1\n  [[ \"$n\" -eq 6 ]] || return 1\n  [[\
    \ \"$n\" -eq 7 ]] || return 1\n  [[ \"$n\" -eq 8 ]] || return 1\n  [[ \"$n\" -eq\
    \ 9 ]] || return 1\n  return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=$((x*x*x))\n  local z=$((y*y))\n  local w=$((z*z))\n  echo \"$((w==x))\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2pceqklv.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp2pceqklv.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a b\n\ta=$1\n\
    \tif [ $a -eq 0 ]; then return 1; fi\n\tb=$(( a%3 ))\n\tif [ $b -eq 0 ]; then\
    \ return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$((\
    \ b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq\
    \ 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\
    \tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b\
    \ -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1;\
    \ fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\t\
    if [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return\
    \ 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\
    \tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then\
    \ return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$((\
    \ b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq\
    \ 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\
    \tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b\
    \ -eq 0 ]; then return 1; fi\n\tb=$(( b%3 \n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp_u121mr.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmpp_u121mr.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal number=$1\n\
    \tlocal result\n\tresult=$(echo \"$number\" | grep -E '^[0-9]+$')\n\tif [[ $result\
    \ != \"\" ]]; then\n\t\tresult=$(echo \"$number\" | grep -E '^[0-9]+$' | wc -l)\n\
    \t\tif [[ $result -eq 1 ]]; then\n\t\t\tresult=$(echo \"$number\" | grep -E '^[0-9]+$'\
    \ | head -n 1)\n\t\tfi\n\tfi\n\techo \"$result\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [[ $a -eq 0 ]]; then\n        echo \"true\"\n    elif (( $(echo \"$a >\
    \ 1\" | bc -l) )) ; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    if [ $number -eq 0 ]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    if [ $number -eq 0 ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=$((x*x*x))\n\tlocal z=$((y*y))\n\tlocal w=$((z*z))\n\techo \"$((w*w*w))\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then return 1; fi\n    if [ $x -eq 1 ]; then return 1;\
    \ fi\n    if [ $x -eq 2 ]; then return 1; fi\n    if [ $x -eq 3 ]; then return\
    \ 1; fi\n    if [ $x -eq 4 ]; then return 1; fi\n    if [ $x -eq 5 ]; then return\
    \ 1; fi\n    if [ $x -eq 6 ]; then return 1; fi\n    if [ $x -eq 7 ]; then return\
    \ 1; fi\n    if [ $x -eq 8 ]; then return 1; fi\n    if [ $x -eq 9 ]; then return\
    \ 1; fi\n    if [ $x -eq 10 ]; then return 1; fi\n    if [ $x -eq 11 ]; then return\
    \ 1; fi\n    if [ $x -eq 12 ]; then return 1; fi\n    if [ $x -eq 13 ]; then return\
    \ 1; fi\n    if [ $x -eq 14 ]; then return 1; fi\n    if [ $x -eq 15 ]; then return\
    \ 1; fi\n    if [ $x -eq 16 ]; then return 1; fi\n    if [ $x -eq 17 ]; then return\
    \ 1; fi\n    if [ $x -eq 18 ]; then return 1; fi\n    if [ $x -eq 19 ]; then return\
    \ 1; fi\n    if [ $x -eq 20 ]; then return 1; fi\n    if [ $x -eq 21 ]; then return\
    \ 1; fi\n    if [ $x -eq 22 ]; then return 1; fi\n    if [ $x -eq 23 ]; then return\
    \ 1; fi\n    if [ $x -eq 24 ]; then return 1; fi\n    if [ $x -eq 25 ]; then return\
    \ 1; fi\n    if [ $x -eq 26 ]; then return 1; fi\n    if [ $x -eq 27 ]; then return\
    \ 1; fi\n    if [ $x -eq 28 ]; then return 1; fi\n    if [ $x -eq 29 ]; then return\
    \ 1; fi\n    if [ $x -eq 30 ]; then return 1; fi\n    if [ $x -eq 31 ]; then return\
    \ 1; fi\n    if [ $x -eq 32 ]; then return 1; fi\n    if [ $x -eq 33 ]; then return\
    \ 1; fi\n    if [ $x -eq 34 ]; then return 1; fi\n    if [ $x -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8uph1rk8.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp8uph1rk8.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((x*y*z))\n    local cubew=$((x*y*w))\n    local cubeh=$((w*z))\n    local\
    \ cubeh=$((cubeh+cubew))\n    if [ $x -eq 0 ]; then \n        echo \"true\"\n\
    \    elif [ $x -eq 1 ]; then \n        echo \"true\"\n    elif [ $x -eq 2 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 3 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 4 ]; then \n        echo \"true\"\n    elif [ $x -eq 5 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 6 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 7 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 8 ]; then \n        echo \"true\"\n    elif [ $x -eq 9 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 10 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 11 ]; then \n        echo \"true\"\n    elif [ $x -eq 12 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 13 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 14 ]; then \n        echo \"true\"\n    elif [ $x -eq 15 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 16 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 17 ]; then \n        echo \"true\"\n    elif [ $x -eq 18 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 19 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 20 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 21 ]; then \n        echo \"true\"\n    elif [ $x -eq 22 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 23 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 24 ]; then \n        echo \"true\"\n    elif [ $x -eq 25 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 26 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmkbsuulx.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmpmkbsuulx.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tif (( x != 0 )); then\n\t\tif (( x % 3 == 0 )); then\n\t\t\tif (( x % 5 == 0\
    \ )); then\n\t\t\t\tif (( x % 7 == 0 )); then\n\t\t\t\t\treturn true\n\t\t\t\t\
    else\n\t\t\t\t\treturn false\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\treturn false\n\t\
    \t\tfi\n\t\telse\n\t\t\treturn false\n\t\tfi\n\telse\n\t\treturn false\n\tfi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxbjjjn9j.sh: line 34: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ i\n\tlocal cube\n\tfor i in $(seq 1 $n); do\n\t\tcube=$((i*i*i))\n\t\tif [ $cube\
    \ -eq $n ]; then\n\t\t\techo \"true\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo \"\
    false\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then return 1; fi\n    if [ $x -eq 1 ]; then return 1;\
    \ fi\n    if [ $x -eq 2 ]; then return 1; fi\n    if [ $x -eq 3 ]; then return\
    \ 1; fi\n    if [ $x -eq 4 ]; then return 1; fi\n    if [ $x -eq 5 ]; then return\
    \ 1; fi\n    if [ $x -eq 6 ]; then return 1; fi\n    if [ $x -eq 7 ]; then return\
    \ 1; fi\n    if [ $x -eq 8 ]; then return 1; fi\n    if [ $x -eq 9 ]; then return\
    \ 1; fi\n    if [ $x -eq 10 ]; then return 1; fi\n    if [ $x -eq 11 ]; then return\
    \ 1; fi\n    if [ $x -eq 12 ]; then return 1; fi\n    if [ $x -eq 13 ]; then return\
    \ 1; fi\n    if [ $x -eq 14 ]; then return 1; fi\n    if [ $x -eq 15 ]; then return\
    \ 1; fi\n    if [ $x -eq 16 ]; then return 1; fi\n    if [ $x -eq 17 ]; then return\
    \ 1; fi\n    if [ $x -eq 18 ]; then return 1; fi\n    if [ $x -eq 19 ]; then return\
    \ 1; fi\n    if [ $x -eq 20 ]; then return 1; fi\n    if [ $x -eq 21 ]; then return\
    \ 1; fi\n    if [ $x -eq 22 ]; then return 1; fi\n    if [ $x -eq 23 ]; then return\
    \ 1; fi\n    if [ $x -eq 24 ]; then return 1; fi\n    if [ $x -eq 25 ]; then return\
    \ 1; fi\n    if [ $x -eq 26 ]; then return 1; fi\n    if [ $x -eq 27 ]; then return\
    \ 1; fi\n    if [ $x -eq 28 ]; then return 1; fi\n    if [ $x -eq 29 ]; then return\
    \ 1; fi\n    if [ $x -eq 30 ]; then return 1; fi\n    if [ $x -eq 31 ]; then return\
    \ 1; fi\n    if [ $x -eq 32 ]; then return 1; fi\n    if [ $x -eq 33 ]; then return\
    \ 1; fi\n    if [ $x -eq 34 ]; then return 1; fi\n    if [ $x -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8uph1rk8.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp8uph1rk8.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local sum=0\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 1 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 2 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 3 ]]; then\n        echo \"true\"\n    elif [[ $x -eq\
    \ 4 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 5 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $x -eq 6 ]]; then\n        echo \"true\"\n    elif [[\
    \ $x -eq 7 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 8 ]]; then\n  \
    \      echo \"true\"\n    elif [[ $x -eq 9 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 10 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 11 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 12 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 13 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 14 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 15 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 16 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 17 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 18 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 19 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 20 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 21 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 22 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 23 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 24 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 25 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 26 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 27 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 28 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 29 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 30 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 31 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 32 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 33 ]]; then\n\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplz2rhry3.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmplz2rhry3.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(( a * a ))\n    local c=$(( a * a + b ))\n    local d=$(( a * a\
    \ + b + c ))\n    local e=$(( a * a + b + c + d ))\n    local f=$(( a * a + b\
    \ + c + d + e ))\n    local g=$(( a * a + b + c + d + e + f ))\n    local h=$((\
    \ a * a + b + c + d + e + f + g ))\n    local i=$(( a * a + b + c + d + e + f\
    \ + g + h ))\n    local j=$(( a * a + b + c + d + e + f + g + h + i ))\n    local\
    \ k=$(( a * a + b + c + d + e + f + g + h + i + j ))\n    local l=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k ))\n    local m=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l ))\n    local n=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m ))\n    local o=$(( a * a + b + c + d + e + f\
    \ + g + h + i + j + k + l + m + n ))\n    local p=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m + n + o ))\n    local q=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l + m + n + o + p ))\n    local r=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q ))\n    local\
    \ s=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q\
    \ + r ))\n    local t=$(( a * a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + p + q + r + s ))\n    local u=$(( a * a + b + c + d + e + f + g\
    \ + h + i + j + k + l + m + n + o + p\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwvo1_36p.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpwvo1_36p.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tif\
    \ [[ $a -eq 0 ]]; then\n\t\treturn 0\n\tfi\n\tif [[ $a -eq 1 ]]; then\n\t\treturn\
    \ 1\n\tfi\n\tif [[ $a -eq 2 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 3 ]];\
    \ then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 4 ]]; then\n\t\treturn 1\n\tfi\n\t\
    if [[ $a -eq 5 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 6 ]]; then\n\t\treturn\
    \ 1\n\tfi\n\tif [[ $a -eq 7 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 8 ]];\
    \ then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 9 ]]; then\n\t\treturn 1\n\tfi\n\t\
    if [[ $a -eq 10 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 11 ]]; then\n\t\t\
    return 1\n\tfi\n\tif [[ $a -eq 12 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq\
    \ 13 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 14 ]]; then\n\t\treturn 1\n\t\
    fi\n\tif [[ $a -eq 15 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 16 ]]; then\n\
    \t\treturn 1\n\tfi\n\tif [[ $a -eq 17 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a\
    \ -eq 18 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 19 ]]; then\n\t\treturn\
    \ 1\n\tfi\n\tif [[ $a -eq 20 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 21 ]];\
    \ then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 22 ]]; then\n\t\treturn 1\n\tfi\n\t\
    if [[ $a -eq 23 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 24 ]]; then\n\t\t\
    return 1\n\tfi\n\tif [[ $a -eq 25 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq\
    \ 26 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 27 ]]; then\n\t\treturn 1\n\t\
    fi\n\tif [[ $a -eq 28 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 29 ]]; then\n\
    \t\treturn 1\n\tfi\n\tif [[ $a -eq 30 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a\
    \ -eq 31 ]]; then\n\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp01mp2tho.sh: line 117: syntax error near unexpected token `}''

    /tmp/tmp01mp2tho.sh: line 117: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    local result=false\n    if [ $number -eq 1 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 3 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 5 ]\n    then\n        result=true\n    elif [ $number -eq 7 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 9 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 11 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 13 ]\n    then\n        result=true\n    elif [ $number -eq 15 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 17 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 19 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 21 ]\n    then\n        result=true\n    elif [ $number -eq 23 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 25 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 27 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 29 ]\n    then\n        result=true\n    elif [ $number -eq 31 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 33 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 35 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 37 ]\n    then\n        result=true\n    elif [ $number -eq 39 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 41 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 43 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 45 ]\n    then\n        result=true\n    elif [ $number -eq 47 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 49 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 51 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 53 ]\n    then\n        result=true\n    elif [ $number -eq 55 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 57 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 59 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 61 ]\n    then\n\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqotnfr6h.sh: line 116: syntax error near unexpected token `}''

    /tmp/tmpqotnfr6h.sh: line 116: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local result\n    if [ $n -eq 0 ]\n    then\n        result=\"false\"\n  \
    \  else\n        result=\"true\"\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ cubes=$2\n  local i\n  for i in $(seq 1 $cubes); do\n    if [ $((n%$i)) -eq\
    \ 0 ]; then\n      return 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
