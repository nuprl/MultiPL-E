language: sh
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( a%3 ))\n        if [ $b -eq 0 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  [[ \"$x\" =~ ^[0-9]+$ ]] || return 1\n  local y\n  (( y=$x*$x*$x ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  ((\
    \ y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y ))\n  (( y=$y*$y\
    \ ))\n  (( y=$y*$y ))\n  (( y=$\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7npnhgy9.sh: line 72: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7npnhgy9.sh: line 92: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq $x ]] ; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal number=$1\n\
    \tlocal result=false\n\tif [[ $number -eq 0 ]]; then\n\t\tresult=true\n\telse\n\
    \t\tif [[ $number -le 0 ]]; then\n\t\t\tresult=true\n\t\telse\n\t\t\tif [[ $number\
    \ -ge 0 ]]; then\n\t\t\t\tif [[ $number -le $((number*number*number)) ]]; then\n\
    \t\t\t\t\tresult=true\n\t\t\t\telse\n\t\t\t\t\tresult=false\n\t\t\t\tfi\n\t\t\t\
    else\n\t\t\t\tresult=false\n\t\t\tfi\n\t\tfi\n\tfi\n\techo $result\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $a -le 180 ]\n   \
    \ then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((x*y*z))\n    local cubew=$((x*y*w))\n    local cubeh=$((x*z*w))\n  \
    \  local cubeh=$((y*z*w))\n    local cubeh=$((z*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n    local cubeh=$((w*w*w))\n\
    \    local cubeh=$((w*w*w))\n    local cubeh=$((w\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7p4qju08.sh: line 62: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7p4qju08.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]; then return 1; fi\n  if [ $a -eq 1 ]; then return 1; fi\n  if\
    \ [ $a -eq 2 ]; then return 1; fi\n  if [ $a -eq 3 ]; then return 1; fi\n  if\
    \ [ $a -eq 4 ]; then return 1; fi\n  if [ $a -eq 5 ]; then return 1; fi\n  if\
    \ [ $a -eq 6 ]; then return 1; fi\n  if [ $a -eq 7 ]; then return 1; fi\n  if\
    \ [ $a -eq 8 ]; then return 1; fi\n  if [ $a -eq 9 ]; then return 1; fi\n  if\
    \ [ $a -eq 10 ]; then return 1; fi\n  if [ $a -eq 11 ]; then return 1; fi\n  if\
    \ [ $a -eq 12 ]; then return 1; fi\n  if [ $a -eq 13 ]; then return 1; fi\n  if\
    \ [ $a -eq 14 ]; then return 1; fi\n  if [ $a -eq 15 ]; then return 1; fi\n  if\
    \ [ $a -eq 16 ]; then return 1; fi\n  if [ $a -eq 17 ]; then return 1; fi\n  if\
    \ [ $a -eq 18 ]; then return 1; fi\n  if [ $a -eq 19 ]; then return 1; fi\n  if\
    \ [ $a -eq 20 ]; then return 1; fi\n  if [ $a -eq 21 ]; then return 1; fi\n  if\
    \ [ $a -eq 22 ]; then return 1; fi\n  if [ $a -eq 23 ]; then return 1; fi\n  if\
    \ [ $a -eq 24 ]; then return 1; fi\n  if [ $a -eq 25 ]; then return 1; fi\n  if\
    \ [ $a -eq 26 ]; then return 1; fi\n  if [ $a -eq 27 ]; then return 1; fi\n  if\
    \ [ $a -eq 28 ]; then return 1; fi\n  if [ $a -eq 29 ]; then return 1; fi\n  if\
    \ [ $a -eq 30 ]; then return 1; fi\n  if [ $a -eq 31 ]; then return 1; fi\n  if\
    \ [ $a -eq 32 ]; then return 1; fi\n  if [ $a -eq 33 ]; then return 1; fi\n  if\
    \ [ $a -eq 34 ]; then return 1; fi\n  if [ $a -eq 35 ]; then return 1; fi\n  if\
    \ \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv3tor98n.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpv3tor98n.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(( a * a ))\n    local c=$(( a * a + b ))\n    local d=$(( a * a\
    \ + b + c ))\n    local e=$(( a * a + b + c + d ))\n    local f=$(( a * a + b\
    \ + c + d + e ))\n    local g=$(( a * a + b + c + d + e + f ))\n    local h=$((\
    \ a * a + b + c + d + e + f + g ))\n    local i=$(( a * a + b + c + d + e + f\
    \ + g + h ))\n    local j=$(( a * a + b + c + d + e + f + g + h + i ))\n    local\
    \ k=$(( a * a + b + c + d + e + f + g + h + i + j ))\n    local l=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k ))\n    local m=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l ))\n    local n=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m ))\n    local o=$(( a * a + b + c + d + e + f\
    \ + g + h + i + j + k + l + m + n ))\n    local p=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m + n + o ))\n    local q=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l + m + n + o + p ))\n    local r=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q ))\n    local\
    \ s=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q\
    \ + r ))\n    local t=$(( a * a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + p + q + r + s ))\n    local u=$(( a * a + b + c + d + e + f + g\
    \ + h + i + j + k + l + m + n + o + p\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwvo1_36p.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpwvo1_36p.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $a -le 180 ]\n   \
    \ then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 1 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 2 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 3 ]\n    then\n        echo \"true\"\n    elif [\
    \ $a -eq 4 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 5 ]\n    then\n\
    \        echo \"true\"\n    elif [ $a -eq 6 ]\n    then\n        echo \"true\"\
    \n    elif [ $a -eq 7 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 8\
    \ ]\n    then\n        echo \"true\"\n    elif [ $a -eq 9 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $a -eq 10 ]\n    then\n        echo \"true\"\n  \
    \  elif [ $a -eq 11 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 12 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 13 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 14 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 15 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 16 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 18 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 19 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 20 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 21 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 23 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 24 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 25 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 26 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 27 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 28 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]\n    then\n        \n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5rhz9jpl.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmp5rhz9jpl.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( $a%3 ))\n        if [ $b -eq 0 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    elif [ $x -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 3 ]; then \n        echo \"true\"\n    elif [ $x -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 6 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $x -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 9 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $x -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 13 ]; then \n        echo \"true\"\n    elif [ $x -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 16 ]; then \n        echo \"true\"\n    elif [ $x -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 19 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $x -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 22 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $x -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 26 ]; then \n        echo \"true\"\n    elif [ $x -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 29 ]; then \n        echo \"true\"\n    elif [ $x -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoo5yu6n5.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmpoo5yu6n5.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y\n    local z\n    local w\n    local cube\n    local cubes\n   \
    \ local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n    local cube\n    local cubes\n\
    \    local cube\n    local cubes\n    local cube\n    local cubes\n    local cube\n\
    \    local cubes\n    local cube\n    local cubes\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cubes=$(echo \"$n\" | awk '{print $1}')\n    local cube=$((cubes % 3))\n\
    \    local cube2=$((cubes / 3))\n    local cube3=$((cube2 / 3))\n    local cube4=$((cube3\
    \ / 3))\n    local cube5=$((cube4 / 3))\n    local cube6=$((cube5 / 3))\n    local\
    \ cube7=$((cube6 / 3))\n    local cube8=$((cube7 / 3))\n    local cube9=$((cube8\
    \ / 3))\n    local cube10=$((cube9 / 3))\n    local cube11=$((cube10 / 3))\n \
    \   local cube12=$((cube11 / 3))\n    local cube13=$((cube12 / 3))\n    local\
    \ cube14=$((cube13 / 3))\n    local cube15=$((cube14 / 3))\n    local cube16=$((cube15\
    \ / 3))\n    local cube17=$((cube16 / 3))\n    local cube18=$((cube17 / 3))\n\
    \    local cube19=$((cube18 / 3))\n    local cube20=$((cube19 / 3))\n    local\
    \ cube21=$((cube20 / 3))\n    local cube22=$((cube21 / 3))\n    local cube23=$((cube22\
    \ / 3))\n    local cube24=$((cube23 / 3))\n    local cube25=$((cube24 / 3))\n\
    \    local cube26=$((cube25 / 3))\n    local cube27=$((cube26 / 3))\n    local\
    \ cube28=$((cube27 / 3))\n    local cube29=$((cube28 / 3))\n    local cube30=$((cube29\
    \ / 3))\n    local cube31=$((cube30 / 3))\n    local cube32=$((cube31 / 3))\n\
    \    local cube33=$((cube32 / 3))\n    local cube34=$((cube33 / 3))\n    local\
    \ cube35=$((cube34 / 3))\n    local cube36=$((cube35 / 3))\n    local cube37=$((cube36\
    \ / 3))\n    local cube38=$((cube37 / 3))\n    local cube39=$((cube38 / 3))\n\
    \    local cube40=$((cube39 / 3))\n    local cube41=$((cube40 / 3))\n    local\
    \ cube42=$((cube41 / 3))\n    local cube43=$((cube42 / 3))\n    local cube44=$((cube43\
    \ / 3))\n    local cube45=$((cube44\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxddwdh36.sh: line 67: unexpected EOF while looking for matching
    `)''

    /tmp/tmpxddwdh36.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal xx yy zz ww\n\t\
    local result\n\n\txx=\"$(( x % w ))\"\n\tyy=\"$(( y % w ))\"\n\tzz=\"$(( z % w\
    \ ))\"\n\tww=\"$(( w % w ))\"\n\n\tif (( xx != 0 )) && (( yy != 0 )) && (( zz\
    \ != 0 )) && (( ww != 0 ))\n\tthen\n\t\tresult=\"true\"\n\telse\n\t\tresult=\"\
    false\"\n\tfi\n\t\n\techo \"$result\"\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplbg19w9a.sh: line 28: x % w : division by 0 (error token is "w
    ")

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    if [ $a -eq 1 ]\n    then\n\
    \      echo \"true\"\n    else\n      if [ $a -eq 2 ]\n      then\n        echo\
    \ \"true\"\n      else\n        if [ $a -eq 3 ]\n        then\n          echo\
    \ \"true\"\n        else\n          if [ $a -eq 4 ]\n          then\n        \
    \    echo \"true\"\n          else\n            if [ $a -eq 5 ]\n            then\n\
    \              echo \"true\"\n            else\n              if [ $a -eq 6 ]\n\
    \              then\n                echo \"true\"\n              else\n     \
    \           if [ $a -eq 7 ]\n                then\n                  echo \"true\"\
    \n                else\n                  if [ $a -eq 8 ]\n                  then\n\
    \                    echo \"true\"\n                  else\n                 \
    \   if [ $a -eq 9 ]\n                    then\n                      echo \"true\"\
    \n                    else\n                      if [ $a -eq 10 ]\n         \
    \             then\n                        echo \"true\"\n                  \
    \    else\n                        if [ $a -eq 11 ]\n                        then\n\
    \                          echo \"true\"\n                        else\n     \
    \                     if [ $a -eq 12 ]\n                          then\n     \
    \                       echo \"true\"\n                          else\n      \
    \                      if [ $a -eq 13 ]\n                            then\n  \
    \                            echo \"true\"\n                            else\n\
    \                              if [ $a -eq 14 ]\n                            \
    \  then\n                                echo \"true\"\n                     \
    \         else\n                                if [ $a -eq 15 ]\n           \
    \                     then\n                                  echo \"true\"\n\
    \                                else\n                                  if [\
    \ $a -eq 16 ]\n                                  then\n                      \
    \              echo \"true\"\n                                  else\n       \
    \                             if [ $a -eq 17 ]\n                             \
    \       then\n                                      echo \"true\"\n          \
    \                          else\n                                      if [ $a\
    \ -eq 18 ]\n                                      then\n                     \
    \                   echo \"true\"\n                                      else\n\
    \                                        if [ $a -eq 19 ]\n                  \
    \                      then\n                                          echo \"\
    true\"\n                                        else\n                       \
    \                   if [ $a -eq 20 ]\n                                       \
    \   then\n                                            echo \"true\"\n        \
    \                                  else\n                                    \
    \        if [ $a -eq 21 ]\n                                            then\n\
    \                                              echo \"true\"\n               \
    \                             else\n                                         \
    \     if [ $a -eq 22 ]\n                                              then\n \
    \                                               echo \"true\"\n              \
    \                                else\n                                      \
    \          if [ $a -eq 23 ]\n                                                then\n\
    \                                                  echo \"true\"\n           \
    \                                     else\n                                 \
    \                 if [ $a -eq 24 ]\n                                         \
    \         then\n                                                    echo \"true\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp393a8ex.sh: line 136: unexpected EOF while looking for matching
    `"''

    /tmp/tmpp393a8ex.sh: line 140: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2pceqklv.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp2pceqklv.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=\"$2\"\n  local z=\"$3\"\n  local w=\"$4\"\n  local t=\"$5\"\n  local\
    \ f=\"$6\"\n  local g=\"$7\"\n  local h=\"$8\"\n  local i=\"$9\"\n  local j=\"\
    $10\"\n  local k=\"$11\"\n  local l=\"$12\"\n  local m=\"$13\"\n  local n=\"$14\"\
    \n  local o=\"$15\"\n  local p=\"$16\"\n  local q=\"$17\"\n  local r=\"$18\"\n\
    \  local s=\"$19\"\n  local t=\"$20\"\n  local u=\"$21\"\n  local v=\"$22\"\n\
    \  local w=\"$23\"\n  local x=\"$24\"\n  local y=\"$25\"\n  local z=\"$26\"\n\
    \  local w=\"$27\"\n  local t=\"$28\"\n  local f=\"$29\"\n  local g=\"$30\"\n\
    \  local h=\"$31\"\n  local i=\"$32\"\n  local j=\"$33\"\n  local k=\"$34\"\n\
    \  local l=\"$35\"\n  local m=\"$36\"\n  local n=\"$37\"\n  local o=\"$38\"\n\
    \  local p=\"$39\"\n  local q=\"$40\"\n  local r=\"$41\"\n  local s=\"$42\"\n\
    \  local t=\"$43\"\n  local u=\"$44\"\n  local v=\"$45\"\n  local w=\"$46\"\n\
    \  local x=\"$47\"\n  local y=\"$48\"\n  local z=\"$49\"\n  local w=\"$50\"\n\
    \  local t=\"$51\"\n  local f=\"$52\"\n  local g=\"$53\"\n  local h=\"$54\"\n\
    \  local i=\"$55\"\n  local j=\"$56\"\n  local k=\"$57\"\n  local l=\"$58\"\n\
    \  local m=\"$59\"\n  local n=\"$60\"\n  local o=\"$61\"\n  local p=\"$62\"\n\
    \  local q=\"$63\"\n  local r=\"$64\"\n  local s=\"$65\"\n  local t=\"$66\"\n\
    \  local u=\"$67\"\n  local v=\"$68\"\n  local w=\"$69\"\n  local x=\"$70\"\n\
    \  local y=\"$71\"\n  local z=\"$72\"\n  local w=\"$73\"\n  local t=\"$74\"\n\
    \  local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ \"$x\" -eq \"$x\" ] 2>/dev/null; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal t=\"$5\"\n\tlocal\
    \ f=\"$6\"\n\tlocal u=\"$7\"\n\tlocal v=\"$8\"\n\tlocal w1=\"$9\"\n\tlocal w2=\"\
    $10\"\n\tlocal w3=\"$11\"\n\tlocal w4=\"$12\"\n\tlocal w5=\"$13\"\n\tlocal w6=\"\
    $14\"\n\tlocal w7=\"$15\"\n\tlocal w8=\"$16\"\n\tlocal w9=\"$17\"\n\tlocal w10=\"\
    $18\"\n\tlocal w11=\"$19\"\n\tlocal w12=\"$20\"\n\tlocal w13=\"$21\"\n\tlocal\
    \ w14=\"$22\"\n\tlocal w15=\"$23\"\n\tlocal w16=\"$24\"\n\tlocal w17=\"$25\"\n\
    \tlocal w18=\"$26\"\n\tlocal w19=\"$27\"\n\tlocal w20=\"$28\"\n\tlocal w21=\"\
    $29\"\n\tlocal w22=\"$30\"\n\tlocal w23=\"$31\"\n\tlocal w24=\"$32\"\n\tlocal\
    \ w25=\"$33\"\n\tlocal w26=\"$34\"\n\tlocal w27=\"$35\"\n\tlocal w28=\"$36\"\n\
    \tlocal w29=\"$37\"\n\tlocal w30=\"$38\"\n\tlocal w31=\"$39\"\n\tlocal w32=\"\
    $40\"\n\tlocal w33=\"$41\"\n\tlocal w34=\"$42\"\n\tlocal w35=\"$43\"\n\tlocal\
    \ w36=\"$44\"\n\tlocal w37=\"$45\"\n\tlocal w38=\"$46\"\n\tlocal w39=\"$47\"\n\
    \tlocal w40=\"$48\"\n\tlocal w41=\"$49\"\n\tlocal w42=\"$50\"\n\tlocal w43=\"\
    $51\"\n\tlocal w44=\"$52\"\n\tlocal w45=\"$53\"\n\tlocal w46=\"$54\"\n\tlocal\
    \ w47=\"$55\"\n\tlocal w48=\"$56\"\n\tlocal w49=\"$57\"\n\tlocal w50=\"$58\"\n\
    \tlocal w51=\"$59\"\n\tlocal w52=\"$60\"\n\tlocal w53=\"$61\"\n\tlocal w54=\"\
    $62\"\n\tlocal w55=\"$63\"\n\tlocal w56=\"$64\"\n\tlocal w57=\"$65\"\n\tlocal\
    \ w58=\"$66\"\n\tlocal \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=$(( a * a ))\n\tlocal c=$(( a * a + b ))\n\tlocal d=$(( a * a + b + c ))\n\
    \tlocal e=$(( a * a + b + c + d ))\n\tlocal f=$(( a * a + b + c + d + e ))\n\t\
    local g=$(( a * a + b + c + d + e + f ))\n\tlocal h=$(( a * a + b + c + d + e\
    \ + f + g ))\n\tlocal i=$(( a * a + b + c + d + e + f + g + h ))\n\tlocal j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n\tlocal k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n\tlocal l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n\tlocal m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n\tlocal n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \tlocal o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\t\
    local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \tlocal q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n\tlocal r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n\tlocal s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n\tlocal t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n\tlocal u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa6w30q51.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpa6w30q51.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  [[\
    \ \"$n\" =~ ^-?[0-9]+$ ]] || return 1\n  local cubes=$(echo \"$n\" | bc)\n  [[\
    \ \"$cubes\" =~ ^[0-9]+$ ]] || return 1\n  [[ \"$cubes\" -eq \"$n\" ]] || return\
    \ 1\n  return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  [[\
    \ \"$n\" =~ ^-?[0-9]+$ ]] || return 1\n  local s=$((n%9))\n  [[ \"$s\" -eq 0 ]]\
    \ || return 1\n  local t=$((n%9))\n  [[ \"$t\" -eq 0 ]] || return 1\n  [[ \"$n\"\
    \ -eq 0 ]] || return 1\n  [[ \"$n\" -eq 1 ]] || return 1\n  [[ \"$n\" -eq 2 ]]\
    \ || return 1\n  [[ \"$n\" -eq 3 ]] || return 1\n  [[ \"$n\" -eq 4 ]] || return\
    \ 1\n  [[ \"$n\" -eq 5 ]] || return 1\n  [[ \"$n\" -eq 6 ]] || return 1\n  [[\
    \ \"$n\" -eq 7 ]] || return 1\n  [[ \"$n\" -eq 8 ]] || return 1\n  [[ \"$n\" -eq\
    \ 9 ]] || return 1\n  return 0\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=$((x*x*x))\n  local z=$((y*y))\n  local w=$((z*z))\n  echo \"$((w==x))\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2pceqklv.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp2pceqklv.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a b\n\ta=$1\n\
    \tif [ $a -eq 0 ]; then return 1; fi\n\tb=$(( a%3 ))\n\tif [ $b -eq 0 ]; then\
    \ return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$((\
    \ b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq\
    \ 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\
    \tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b\
    \ -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1;\
    \ fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\t\
    if [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return\
    \ 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\
    \tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then\
    \ return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$((\
    \ b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq\
    \ 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\
    \tb=$(( b%3 ))\n\tif [ $b -eq 0 ]; then return 1; fi\n\tb=$(( b%3 ))\n\tif [ $b\
    \ -eq 0 ]; then return 1; fi\n\tb=$(( b%3 \n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp_u121mr.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmpp_u121mr.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal number=$1\n\
    \tlocal result\n\tresult=$(echo \"$number\" | grep -E '^[0-9]+$')\n\tif [[ $result\
    \ != \"\" ]]; then\n\t\tresult=$(echo \"$number\" | grep -E '^[0-9]+$' | wc -l)\n\
    \t\tif [[ $result -eq 1 ]]; then\n\t\t\tresult=$(echo \"$number\" | grep -E '^[0-9]+$'\
    \ | head -n 1)\n\t\tfi\n\tfi\n\techo \"$result\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [[ $a -eq 0 ]]; then\n        echo \"true\"\n    elif (( $(echo \"$a >\
    \ 1\" | bc -l) )) ; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    if [ $number -eq 0 ]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    if [ $number -eq 0 ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=$((x*x*x))\n\tlocal z=$((y*y))\n\tlocal w=$((z*z))\n\techo \"$((w*w*w))\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then return 1; fi\n    if [ $x -eq 1 ]; then return 1;\
    \ fi\n    if [ $x -eq 2 ]; then return 1; fi\n    if [ $x -eq 3 ]; then return\
    \ 1; fi\n    if [ $x -eq 4 ]; then return 1; fi\n    if [ $x -eq 5 ]; then return\
    \ 1; fi\n    if [ $x -eq 6 ]; then return 1; fi\n    if [ $x -eq 7 ]; then return\
    \ 1; fi\n    if [ $x -eq 8 ]; then return 1; fi\n    if [ $x -eq 9 ]; then return\
    \ 1; fi\n    if [ $x -eq 10 ]; then return 1; fi\n    if [ $x -eq 11 ]; then return\
    \ 1; fi\n    if [ $x -eq 12 ]; then return 1; fi\n    if [ $x -eq 13 ]; then return\
    \ 1; fi\n    if [ $x -eq 14 ]; then return 1; fi\n    if [ $x -eq 15 ]; then return\
    \ 1; fi\n    if [ $x -eq 16 ]; then return 1; fi\n    if [ $x -eq 17 ]; then return\
    \ 1; fi\n    if [ $x -eq 18 ]; then return 1; fi\n    if [ $x -eq 19 ]; then return\
    \ 1; fi\n    if [ $x -eq 20 ]; then return 1; fi\n    if [ $x -eq 21 ]; then return\
    \ 1; fi\n    if [ $x -eq 22 ]; then return 1; fi\n    if [ $x -eq 23 ]; then return\
    \ 1; fi\n    if [ $x -eq 24 ]; then return 1; fi\n    if [ $x -eq 25 ]; then return\
    \ 1; fi\n    if [ $x -eq 26 ]; then return 1; fi\n    if [ $x -eq 27 ]; then return\
    \ 1; fi\n    if [ $x -eq 28 ]; then return 1; fi\n    if [ $x -eq 29 ]; then return\
    \ 1; fi\n    if [ $x -eq 30 ]; then return 1; fi\n    if [ $x -eq 31 ]; then return\
    \ 1; fi\n    if [ $x -eq 32 ]; then return 1; fi\n    if [ $x -eq 33 ]; then return\
    \ 1; fi\n    if [ $x -eq 34 ]; then return 1; fi\n    if [ $x -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8uph1rk8.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp8uph1rk8.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((x*y*z))\n    local cubew=$((x*y*w))\n    local cubeh=$((w*z))\n    local\
    \ cubeh=$((cubeh+cubew))\n    if [ $x -eq 0 ]; then \n        echo \"true\"\n\
    \    elif [ $x -eq 1 ]; then \n        echo \"true\"\n    elif [ $x -eq 2 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 3 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 4 ]; then \n        echo \"true\"\n    elif [ $x -eq 5 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 6 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 7 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 8 ]; then \n        echo \"true\"\n    elif [ $x -eq 9 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 10 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 11 ]; then \n        echo \"true\"\n    elif [ $x -eq 12 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 13 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq 14 ]; then \n        echo \"true\"\n    elif [ $x -eq 15 ]; then\
    \ \n        echo \"true\"\n    elif [ $x -eq 16 ]; then \n        echo \"true\"\
    \n    elif [ $x -eq 17 ]; then \n        echo \"true\"\n    elif [ $x -eq 18 ];\
    \ then \n        echo \"true\"\n    elif [ $x -eq 19 ]; then \n        echo \"\
    true\"\n    elif [ $x -eq 20 ]; then \n        echo \"true\"\n    elif [ $x -eq\
    \ 21 ]; then \n        echo \"true\"\n    elif [ $x -eq 22 ]; then \n        echo\
    \ \"true\"\n    elif [ $x -eq 23 ]; then \n        echo \"true\"\n    elif [ $x\
    \ -eq 24 ]; then \n        echo \"true\"\n    elif [ $x -eq 25 ]; then \n    \
    \    echo \"true\"\n    elif [ $x -eq 26 ]; then \n        echo \"true\"\n   \
    \ elif [ $x -eq\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmkbsuulx.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmpmkbsuulx.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tif (( x != 0 )); then\n\t\tif (( x % 3 == 0 )); then\n\t\t\tif (( x % 5 == 0\
    \ )); then\n\t\t\t\tif (( x % 7 == 0 )); then\n\t\t\t\t\treturn true\n\t\t\t\t\
    else\n\t\t\t\t\treturn false\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\treturn false\n\t\
    \t\tfi\n\t\telse\n\t\t\treturn false\n\t\tfi\n\telse\n\t\treturn false\n\tfi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxbjjjn9j.sh: line 34: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ i\n\tlocal cube\n\tfor i in $(seq 1 $n); do\n\t\tcube=$((i*i*i))\n\t\tif [ $cube\
    \ -eq $n ]; then\n\t\t\techo \"true\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo \"\
    false\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then return 1; fi\n    if [ $x -eq 1 ]; then return 1;\
    \ fi\n    if [ $x -eq 2 ]; then return 1; fi\n    if [ $x -eq 3 ]; then return\
    \ 1; fi\n    if [ $x -eq 4 ]; then return 1; fi\n    if [ $x -eq 5 ]; then return\
    \ 1; fi\n    if [ $x -eq 6 ]; then return 1; fi\n    if [ $x -eq 7 ]; then return\
    \ 1; fi\n    if [ $x -eq 8 ]; then return 1; fi\n    if [ $x -eq 9 ]; then return\
    \ 1; fi\n    if [ $x -eq 10 ]; then return 1; fi\n    if [ $x -eq 11 ]; then return\
    \ 1; fi\n    if [ $x -eq 12 ]; then return 1; fi\n    if [ $x -eq 13 ]; then return\
    \ 1; fi\n    if [ $x -eq 14 ]; then return 1; fi\n    if [ $x -eq 15 ]; then return\
    \ 1; fi\n    if [ $x -eq 16 ]; then return 1; fi\n    if [ $x -eq 17 ]; then return\
    \ 1; fi\n    if [ $x -eq 18 ]; then return 1; fi\n    if [ $x -eq 19 ]; then return\
    \ 1; fi\n    if [ $x -eq 20 ]; then return 1; fi\n    if [ $x -eq 21 ]; then return\
    \ 1; fi\n    if [ $x -eq 22 ]; then return 1; fi\n    if [ $x -eq 23 ]; then return\
    \ 1; fi\n    if [ $x -eq 24 ]; then return 1; fi\n    if [ $x -eq 25 ]; then return\
    \ 1; fi\n    if [ $x -eq 26 ]; then return 1; fi\n    if [ $x -eq 27 ]; then return\
    \ 1; fi\n    if [ $x -eq 28 ]; then return 1; fi\n    if [ $x -eq 29 ]; then return\
    \ 1; fi\n    if [ $x -eq 30 ]; then return 1; fi\n    if [ $x -eq 31 ]; then return\
    \ 1; fi\n    if [ $x -eq 32 ]; then return 1; fi\n    if [ $x -eq 33 ]; then return\
    \ 1; fi\n    if [ $x -eq 34 ]; then return 1; fi\n    if [ $x -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8uph1rk8.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp8uph1rk8.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local sum=0\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 1 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 2 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 3 ]]; then\n        echo \"true\"\n    elif [[ $x -eq\
    \ 4 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 5 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $x -eq 6 ]]; then\n        echo \"true\"\n    elif [[\
    \ $x -eq 7 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 8 ]]; then\n  \
    \      echo \"true\"\n    elif [[ $x -eq 9 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 10 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 11 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 12 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 13 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 14 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 15 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 16 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 17 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 18 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 19 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 20 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 21 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 22 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 23 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 24 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 25 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 26 ]]; then\n        echo \"\
    true\"\n    elif [[ $x -eq 27 ]]; then\n        echo \"true\"\n    elif [[ $x\
    \ -eq 28 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 29 ]]; then\n   \
    \     echo \"true\"\n    elif [[ $x -eq 30 ]]; then\n        echo \"true\"\n \
    \   elif [[ $x -eq 31 ]]; then\n        echo \"true\"\n    elif [[ $x -eq 32 ]];\
    \ then\n        echo \"true\"\n    elif [[ $x -eq 33 ]]; then\n\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplz2rhry3.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmplz2rhry3.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(( a * a ))\n    local c=$(( a * a + b ))\n    local d=$(( a * a\
    \ + b + c ))\n    local e=$(( a * a + b + c + d ))\n    local f=$(( a * a + b\
    \ + c + d + e ))\n    local g=$(( a * a + b + c + d + e + f ))\n    local h=$((\
    \ a * a + b + c + d + e + f + g ))\n    local i=$(( a * a + b + c + d + e + f\
    \ + g + h ))\n    local j=$(( a * a + b + c + d + e + f + g + h + i ))\n    local\
    \ k=$(( a * a + b + c + d + e + f + g + h + i + j ))\n    local l=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k ))\n    local m=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l ))\n    local n=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m ))\n    local o=$(( a * a + b + c + d + e + f\
    \ + g + h + i + j + k + l + m + n ))\n    local p=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m + n + o ))\n    local q=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l + m + n + o + p ))\n    local r=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q ))\n    local\
    \ s=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q\
    \ + r ))\n    local t=$(( a * a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + p + q + r + s ))\n    local u=$(( a * a + b + c + d + e + f + g\
    \ + h + i + j + k + l + m + n + o + p\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwvo1_36p.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpwvo1_36p.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tif\
    \ [[ $a -eq 0 ]]; then\n\t\treturn 0\n\tfi\n\tif [[ $a -eq 1 ]]; then\n\t\treturn\
    \ 1\n\tfi\n\tif [[ $a -eq 2 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 3 ]];\
    \ then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 4 ]]; then\n\t\treturn 1\n\tfi\n\t\
    if [[ $a -eq 5 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 6 ]]; then\n\t\treturn\
    \ 1\n\tfi\n\tif [[ $a -eq 7 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 8 ]];\
    \ then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 9 ]]; then\n\t\treturn 1\n\tfi\n\t\
    if [[ $a -eq 10 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 11 ]]; then\n\t\t\
    return 1\n\tfi\n\tif [[ $a -eq 12 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq\
    \ 13 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 14 ]]; then\n\t\treturn 1\n\t\
    fi\n\tif [[ $a -eq 15 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 16 ]]; then\n\
    \t\treturn 1\n\tfi\n\tif [[ $a -eq 17 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a\
    \ -eq 18 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 19 ]]; then\n\t\treturn\
    \ 1\n\tfi\n\tif [[ $a -eq 20 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 21 ]];\
    \ then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 22 ]]; then\n\t\treturn 1\n\tfi\n\t\
    if [[ $a -eq 23 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 24 ]]; then\n\t\t\
    return 1\n\tfi\n\tif [[ $a -eq 25 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq\
    \ 26 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 27 ]]; then\n\t\treturn 1\n\t\
    fi\n\tif [[ $a -eq 28 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a -eq 29 ]]; then\n\
    \t\treturn 1\n\tfi\n\tif [[ $a -eq 30 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $a\
    \ -eq 31 ]]; then\n\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp01mp2tho.sh: line 117: syntax error near unexpected token `}''

    /tmp/tmp01mp2tho.sh: line 117: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    local result=false\n    if [ $number -eq 1 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 3 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 5 ]\n    then\n        result=true\n    elif [ $number -eq 7 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 9 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 11 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 13 ]\n    then\n        result=true\n    elif [ $number -eq 15 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 17 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 19 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 21 ]\n    then\n        result=true\n    elif [ $number -eq 23 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 25 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 27 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 29 ]\n    then\n        result=true\n    elif [ $number -eq 31 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 33 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 35 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 37 ]\n    then\n        result=true\n    elif [ $number -eq 39 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 41 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 43 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 45 ]\n    then\n        result=true\n    elif [ $number -eq 47 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 49 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 51 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 53 ]\n    then\n        result=true\n    elif [ $number -eq 55 ]\n    then\n\
    \        result=true\n    elif [ $number -eq 57 ]\n    then\n        result=true\n\
    \    elif [ $number -eq 59 ]\n    then\n        result=true\n    elif [ $number\
    \ -eq 61 ]\n    then\n\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqotnfr6h.sh: line 116: syntax error near unexpected token `}''

    /tmp/tmpqotnfr6h.sh: line 116: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local result\n    if [ $n -eq 0 ]\n    then\n        result=\"false\"\n  \
    \  else\n        result=\"true\"\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ cubes=$2\n  local i\n  for i in $(seq 1 $cubes); do\n    if [ $((n%$i)) -eq\
    \ 0 ]; then\n      return 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  [[ \"$x\" =~ ^-?[0-9]+$ ]] || return 1\n  [[ $(echo \"$x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x $x\
    \ $x $\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphqms0wbq.sh: line 39: unexpected EOF while looking for matching
    `"\''\n/tmp/tmphqms0wbq.sh: line 43: unexpected token `\xff\'' in conditional
    command\n/tmp/tmphqms0wbq.sh: line 43: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ result\n\tresult=$(echo \"$n\" | grep -E '^[0-9]+$')\n\tif [[ $result != \"\"\
    \ ]]; then\n\t\tresult=$(echo \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$')\n\t\tif [[ $result != \"\" ]]; then\n\t\t\tresult=$(echo\
    \ \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$')\n\t\t\tif [[ $result != \"\" ]]; then\n\t\t\t\tresult=$(echo\
    \ \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$')\n\t\t\t\tif [[ $result != \"\" ]]; then\n\
    \t\t\t\t\tresult=$(echo \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n\
    \t\t\t\t\tif [[ $result != \"\" ]]; then\n\t\t\t\t\t\tresult=$(echo \"$n\" | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\t\
    fi\n\t\tfi\n\tfi\n\techo $result\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( 2**$a ))\n        if [ $b -eq 1 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  [[ \"$x\" =~ ^[0-9]+$ ]] || return 1\n  (( x == x*x*x ))\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    elif [ $a -eq 1 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 2 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 3 ]; then\n        echo \"true\"\n    elif [ $a -eq 4 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 5 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 6 ]; then\n        echo \"true\"\n    elif [ $a -eq 7 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 8 ]; then\n        echo \"true\"\n \
    \   elif [ $a -eq 9 ]; then\n        echo \"true\"\n    elif [ $a -eq 10 ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq 11 ]; then\n        echo \"true\"\n\
    \    elif [ $a -eq 12 ]; then\n        echo \"true\"\n    elif [ $a -eq 13 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 14 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 15 ]; then\n        echo \"true\"\n    elif [ $a -eq 16 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 18 ]; then\n        echo \"true\"\n    elif [ $a -eq 19 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 20 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 21 ]; then\n        echo \"true\"\n    elif [ $a -eq 22 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 23 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 24 ]; then\n        echo \"true\"\n    elif [ $a -eq 25 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 26 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 27 ]; then\n        echo \"true\"\n    elif [ $a -eq 28 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 30 ]; then\n        echo \"true\"\n    elif [ $a -eq 31 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 32 ]; then\n        echo \"true\"\
    \n    elif [ $a -eq 33 ]; then\n        echo \"true\"\n    elif [ $a -eq 34 ];\
    \ then\n        echo \"true\"\n    elif [ $a -eq 35 ]; then\n        echo \"true\"\
    \n    elif \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpoiqnnk0l.sh: line 95: syntax error near unexpected token `}''\n/tmp/tmpoiqnnk0l.sh:
    line 95: `}''\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    if [ $number -eq 0 ]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then return 1; fi\n    if [ $a -eq 1 ]; then return 1; fi\n\
    \    if [ $a -eq 2 ]; then return 1; fi\n    if [ $a -eq 3 ]; then return 1; fi\n\
    \    if [ $a -eq 4 ]; then return 1; fi\n    if [ $a -eq 5 ]; then return 1; fi\n\
    \    if [ $a -eq 6 ]; then return 1; fi\n    if [ $a -eq 7 ]; then return 1; fi\n\
    \    if [ $a -eq 8 ]; then return 1; fi\n    if [ $a -eq 9 ]; then return 1; fi\n\
    \    if [ $a -eq 10 ]; then return 1; fi\n    if [ $a -eq 11 ]; then return 1;\
    \ fi\n    if [ $a -eq 12 ]; then return 1; fi\n    if [ $a -eq 13 ]; then return\
    \ 1; fi\n    if [ $a -eq 14 ]; then return 1; fi\n    if [ $a -eq 15 ]; then return\
    \ 1; fi\n    if [ $a -eq 16 ]; then return 1; fi\n    if [ $a -eq 17 ]; then return\
    \ 1; fi\n    if [ $a -eq 18 ]; then return 1; fi\n    if [ $a -eq 19 ]; then return\
    \ 1; fi\n    if [ $a -eq 20 ]; then return 1; fi\n    if [ $a -eq 21 ]; then return\
    \ 1; fi\n    if [ $a -eq 22 ]; then return 1; fi\n    if [ $a -eq 23 ]; then return\
    \ 1; fi\n    if [ $a -eq 24 ]; then return 1; fi\n    if [ $a -eq 25 ]; then return\
    \ 1; fi\n    if [ $a -eq 26 ]; then return 1; fi\n    if [ $a -eq 27 ]; then return\
    \ 1; fi\n    if [ $a -eq 28 ]; then return 1; fi\n    if [ $a -eq 29 ]; then return\
    \ 1; fi\n    if [ $a -eq 30 ]; then return 1; fi\n    if [ $a -eq 31 ]; then return\
    \ 1; fi\n    if [ $a -eq 32 ]; then return 1; fi\n    if [ $a -eq 33 ]; then return\
    \ 1; fi\n    if [ $a -eq 34 ]; then return 1; fi\n    if [ $a -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp37lzokrv.sh: line 59: syntax error near unexpected token `}''\n/tmp/tmp37lzokrv.sh:
    line 59: `}''\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5 ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=$(( x * x ))\n  local z=$(( y * y ))\n  local t=$(( z * z ))\n  ((\
    \ t == x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpzo4bkesy.sh: line 25: unexpected EOF while looking for matching
    `)''\n/tmp/tmpzo4bkesy.sh: line 45: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local result=false\n    local cubes=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube=$( echo \"$n\" | awk '{print $1}' )\n    local cube=$( echo \"\
    $n\" | awk '{print $1}' )\n    local cube=$( echo \"$n\" | awk '{print $1}' )\n\
    \    local cube\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=\"$2\"\n  local z=\"$3\"\n  local w=\"$4\"\n  local xs=\"$5\"\n  local\
    \ ys=\"$6\"\n  local zs=\"$7\"\n  local ws=\"$8\"\n  local xd=\"$9\"\n  local\
    \ yd=\"$10\"\n  local zd=\"$11\"\n  local wd=\"$12\"\n  local xc=\"$13\"\n  local\
    \ yc=\"$14\"\n  local zc=\"$15\"\n  local wc=\"$16\"\n  local xb=\"$17\"\n  local\
    \ yb=\"$18\"\n  local zb=\"$19\"\n  local wb=\"$20\"\n  local xa=\"$21\"\n  local\
    \ ya=\"$22\"\n  local za=\"$23\"\n  local wa=\"$24\"\n  local xe=\"$25\"\n  local\
    \ ye=\"$26\"\n  local ze=\"$27\"\n  local we=\"$28\"\n  local xds=\"$29\"\n  local\
    \ yds=\"$30\"\n  local zds=\"$31\"\n  local wds=\"$32\"\n  local xcs=\"$33\"\n\
    \  local ycs=\"$34\"\n  local zcs=\"$35\"\n  local wcs=$36\n  local xbs=\"$37\"\
    \n  local ybs=\"$38\"\n  local zbs=\"$39\"\n  local wbs=\"$40\"\n  local xas=\"\
    $41\"\n  local yas=\"$42\"\n  local zas=\"$43\"\n  local was=\"$44\"\n  local\
    \ xes=\"$45\"\n  local yes=\"$46\"\n  local zes=\"$47\"\n  local wes=\"$48\"\n\
    \  local xdss=\"$49\"\n  local ydss=\"$50\"\n  local zdss=\"$51\"\n  local wdss=\"\
    $52\"\n  local xcss=\"$53\"\n  local ycss=\"$54\"\n  local zcss=$55\n  local wcss=\"\
    $56\"\n  local xbss=\"$57\"\n  local ybss=\"$58\"\n  local zbss=\"$59\"\n  local\
    \ wbss=\"$60\"\n  local xass=\"$61\"\n  local yass=\"$62\"\n  local zass=\"$63\"\
    \n  local wass=\"$64\"\n  local xess=\"$\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0tq8i4yg.sh: line 101: unexpected EOF while looking for matching
    `"\''\n/tmp/tmp0tq8i4yg.sh: line 105: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  [[\
    \ \"$n\" =~ ^[0-9]+$ ]] || return 1\n  [[ \"$n\" -eq 0 ]] && return 1\n  [[ \"\
    $n\" -eq 1 ]] && return 0\n  [[ \"$n\" -eq 2 ]] && return 0\n  [[ \"$n\" -eq 3\
    \ ]] && return 0\n  [[ \"$n\" -eq 4 ]] && return 0\n  [[ \"$n\" -eq 5 ]] && return\
    \ 0\n  [[ \"$n\" -eq 6 ]] && return 0\n  [[ \"$n\" -eq 7 ]] && return 0\n  [[\
    \ \"$n\" -eq 8 ]] && return 0\n  [[ \"$n\" -eq 9 ]] && return 0\n  [[ \"$n\" -eq\
    \ 10 ]] && return 0\n  [[ \"$n\" -eq 11 ]] && return 0\n  [[ \"$n\" -eq 12 ]]\
    \ && return 0\n  [[ \"$n\" -eq 13 ]] && return 0\n  [[ \"$n\" -eq 14 ]] && return\
    \ 0\n  [[ \"$n\" -eq 15 ]] && return 0\n  [[ \"$n\" -eq 16 ]] && return 0\n  [[\
    \ \"$n\" -eq 17 ]] && return 0\n  [[ \"$n\" -eq 18 ]] && return 0\n  [[ \"$n\"\
    \ -eq 19 ]] && return 0\n  [[ \"$n\" -eq 20 ]] && return 0\n  [[ \"$n\" -eq 21\
    \ ]] && return 0\n  [[ \"$n\" -eq 22 ]] && return 0\n  [[ \"$n\" -eq 23 ]] &&\
    \ return 0\n  [[ \"$n\" -eq 24 ]] && return 0\n  [[ \"$n\" -eq 25 ]] && return\
    \ 0\n  [[ \"$n\" -eq 26 ]] && return 0\n  [[ \"$n\" -eq 27 ]] && return 0\n  [[\
    \ \"$n\" -eq 28 ]] && return 0\n  [[ \"$n\" -eq 29 ]] && return 0\n  [[ \"$n\"\
    \ -eq 30 ]] && return 0\n  [[ \"$n\" -eq 31 ]] && return 0\n  [[ \"$n\" -eq 32\
    \ ]] && return 0\n  [[ \"$n\" -eq 33 ]] && return 0\n  [[ \"$n\" -eq 34 ]] &&\
    \ return 0\n\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  if [[ $x -eq 0 ]]; then\n    echo \"true\"\n  else\n    if [[ $x -le 0 ]];\
    \ then\n      echo \"false\"\n    elif [[ $x -le 1 ]]; then\n      if [[ $x -le\
    \ 2 ]]; then\n        if [[ $x -le 3 ]]; then\n          if [[ $x -le 4 ]]; then\n\
    \            if [[ $x -le 5 ]]; then\n              if [[ $x -le 6 ]]; then\n\
    \                if [[ $x -le 7 ]]; then\n                  if [[ $x -le 8 ]];\
    \ then\n                    if [[ $x -le 9 ]]; then\n                      echo\
    \ \"true\"\n                    else\n                      echo \"false\"\n \
    \                   fi\n                  else\n                    echo \"false\"\
    \n                  fi\n                else\n                  echo \"false\"\
    \n                fi\n              else\n                echo \"false\"\n   \
    \           fi\n            else\n              echo \"false\"\n            fi\n\
    \          else\n            echo \"false\"\n          fi\n        else\n    \
    \      echo \"false\"\n        fi\n      else\n        echo \"false\"\n      fi\n\
    \    else\n      echo \"false\"\n    fi\n  fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( $a / $a ))\n  local c=$(( $a % $a ))\n  if [ $b -eq 0 ] && [ $c -eq 0\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=$(( $(awk 'BEGIN{print ($1*$1*$1)}END{print $0}' <<< $a) ))\n\t[ \"$b\" -eq\
    \ \"$a\" ] && return 0\n\treturn 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmveo8gat.sh: line 22: 0\n1 : syntax error in expression (error
    token is "1 ")\n'''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local sum=0\n    local cubes=0\n    local cubesfound=0\n    local cubesfound2=0\n\
    \    local cubesfound3=0\n    local cubesfound4=0\n    local cubesfound5=0\n \
    \   local cubesfound6=0\n    local cubesfound7=0\n    local cubesfound8=0\n  \
    \  local cubesfound9=0\n    local cubesfound10=0\n    local cubesfound11=0\n \
    \   local cubesfound12=0\n    local cubesfound13=0\n    local cubesfound14=0\n\
    \    local cubesfound15=0\n    local cubesfound16=0\n    local cubesfound17=0\n\
    \    local cubesfound18=0\n    local cubesfound19=0\n    local cubesfound20=0\n\
    \    local cubesfound21=0\n    local cubesfound22=0\n    local cubesfound23=0\n\
    \    local cubesfound24=0\n    local cubesfound25=0\n    local cubesfound26=0\n\
    \    local cubesfound27=0\n    local cubesfound28=0\n    local cubesfound29=0\n\
    \    local cubesfound30=0\n    local cubesfound31=0\n    local cubesfound32=0\n\
    \    local cubesfound33=0\n    local cubesfound34=0\n    local cubesfound35=0\n\
    \    local cubesfound36=0\n    local cubesfound37=0\n    local cubesfound38=0\n\
    \    local cubesfound39=0\n    local cubesfound40=0\n    local cubesfound41=0\n\
    \    local cubesfound42=0\n    local cubesfound43=0\n    local cubesfound44=0\n\
    \    local cubesfound45=0\n    local cubesfound46=0\n    local cubesfound47=0\n\
    \    local cubesfound48=0\n    local cubesfound49=0\n    local cubesfound50=0\n\
    \    local cubesfound51=0\n    local cubesfound52=0\n    local cubesfound53=0\n\
    \    local cubesfound54=0\n    local cubesfound55=0\n    local cubesfound56=0\n\
    \    local cubesfound57=0\n    local cubesfound58=0\n    local cubesfound59=0\n\
    \    local cubesfound60=0\n    local cubesfound61=0\n    local cubesfound62=0\n\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a b\n\ta=$1\n\
    \tif [ $a -eq 0 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 1 ]\n\tthen\n\t\t\
    return 1\n\tfi\n\tif [ $a -eq 2 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 3\
    \ ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 4 ]\n\tthen\n\t\treturn 1\n\tfi\n\
    \tif [ $a -eq 5 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 6 ]\n\tthen\n\t\t\
    return 1\n\tfi\n\tif [ $a -eq 7 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 8\
    \ ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 9 ]\n\tthen\n\t\treturn 1\n\tfi\n\
    \tif [ $a -eq 10 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 11 ]\n\tthen\n\t\
    \treturn 1\n\tfi\n\tif [ $a -eq 12 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq\
    \ 13 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 14 ]\n\tthen\n\t\treturn 1\n\
    \tfi\n\tif [ $a -eq 15 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 16 ]\n\tthen\n\
    \t\treturn 1\n\tfi\n\tif [ $a -eq 17 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a\
    \ -eq 18 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 19 ]\n\tthen\n\t\treturn\
    \ 1\n\tfi\n\tif [ $a -eq 20 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 21 ]\n\
    \tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 22 ]\n\tthen\n\t\treturn 1\n\tfi\n\t\
    if [ $a -eq 23 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 24 ]\n\tthen\n\t\t\
    return 1\n\tfi\n\tif [ $a -eq 25 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq\
    \ 26 ]\n\tthen\n\t\treturn 1\n\tfi\n\tif [ $a -eq 27 ]\n\tthen\n\t\treturn 1\n\
    \t\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpa0z1bhc7.sh: line 135: syntax error near unexpected token `}''\n/tmp/tmpa0z1bhc7.sh:
    line 135: `}''\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cube=$((n**3))\n    if [ $n -eq $cube ]\n    then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=$((x*x*x))\n  (( y > 0 )) && return 0\n  (( y < 0 )) && return 1\n\
    \  (( y == 0 )) && return 0\n  return 1\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]; then\n    echo \"true\"\n  else\n    if [ $a -eq 1 ]; then\n \
    \     echo \"true\"\n    else\n      if [ $a -eq 2 ]; then\n        echo \"true\"\
    \n      else\n        if [ $a -eq 3 ]; then\n          echo \"true\"\n       \
    \ else\n          if [ $a -eq 4 ]; then\n            echo \"true\"\n         \
    \ else\n            if [ $a -eq 5 ]; then\n              echo \"true\"\n     \
    \       else\n              if [ $a -eq 6 ]; then\n                echo \"true\"\
    \n              else\n                if [ $a -eq 7 ]; then\n                \
    \  echo \"true\"\n                else\n                  if [ $a -eq 8 ]; then\n\
    \                    echo \"true\"\n                  else\n                 \
    \   if [ $a -eq 9 ]; then\n                      echo \"true\"\n             \
    \       else\n                      echo \"false\"\n                    fi\n \
    \                 fi\n                fi\n              fi\n            fi\n \
    \         fi\n        fi\n      fi\n    fi\n  fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=$(( a * a ))\n\tlocal c=$(( a * a + b ))\n\tlocal d=$(( a * a + b + c ))\n\
    \tlocal e=$(( a * a + b + c + d ))\n\tlocal f=$(( a * a + b + c + d + e ))\n\t\
    local g=$(( a * a + b + c + d + e + f ))\n\tlocal h=$(( a * a + b + c + d + e\
    \ + f + g ))\n\tlocal i=$(( a * a + b + c + d + e + f + g + h ))\n\tlocal j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n\tlocal k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n\tlocal l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n\tlocal m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n\tlocal n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \tlocal o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\t\
    local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \tlocal q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n\tlocal r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n\tlocal s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n\tlocal t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n\tlocal u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa6w30q51.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpa6w30q51.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cubes=$(echo \"$n\" | grep -E '^[0-9]+$')\n    local cube=$((cubes*3))\n\
    \    local cube_sum=$((cube*cube*cube))\n    local cube_sum2=$((cube_sum*cube))\n\
    \    local cube_sum3=$((cube_sum2*cube))\n    local cube_sum4=$((cube_sum3*cube))\n\
    \    local cube_sum5=$((cube_sum4*cube))\n    local cube_sum6=$((cube_sum5*cube))\n\
    \    local cube_sum7=$((cube_sum6*cube))\n    local cube_sum8=$((cube_sum7*cube))\n\
    \    local cube_sum9=$((cube_sum8*cube))\n    local cube_sum10=$((cube_sum9*cube))\n\
    \    local cube_sum11=$((cube_sum10*cube))\n    local cube_sum12=$((cube_sum11*cube))\n\
    \    local cube_sum13=$((cube_sum12*cube))\n    local cube_sum14=$((cube_sum13*cube))\n\
    \    local cube_sum15=$((cube_sum14*cube))\n    local cube_sum16=$((cube_sum15*cube))\n\
    \    local cube_sum17=$((cube_sum16*cube))\n    local cube_sum18=$((cube_sum17*cube))\n\
    \    local cube_sum19=$((cube_sum18*cube))\n    local cube_sum20=$((cube_sum19*cube))\n\
    \    local cube_sum21=$((cube_sum20*cube))\n    local cube_sum22=$((cube_sum21*cube))\n\
    \    local cube_sum23=$((cube_sum22*cube))\n    local cube_sum24=$((cube_sum23*cube))\n\
    \    local cube_sum25=$((cube_sum24*cube))\n    local cube_sum26=$((cube_sum25*cube))\n\
    \    local cube_sum27=$((cube_sum26*cube))\n    local cube_sum28=$((cube_sum27*cube))\n\
    \    local cube_sum29=$((cube_sum28*cube))\n    local cube_sum30=$((cube_sum29*cube))\n\
    \    local cube_sum31=$((\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpq6fiv10s.sh: line 54: unexpected EOF while looking for matching
    `)''\n/tmp/tmpq6fiv10s.sh: line 74: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then return 1; fi\n    if [ $n -eq 1 ]; then return 0; fi\n\
    \    if [ $n -eq 2 ]; then return 0; fi\n    if [ $n -eq 3 ]; then return 0; fi\n\
    \    if [ $n -eq 4 ]; then return 0; fi\n    if [ $n -eq 5 ]; then return 0; fi\n\
    \    if [ $n -eq 6 ]; then return 0; fi\n    if [ $n -eq 7 ]; then return 0; fi\n\
    \    if [ $n -eq 8 ]; then return 0; fi\n    if [ $n -eq 9 ]; then return 0; fi\n\
    \    if [ $n -eq 10 ]; then return 0; fi\n    if [ $n -eq 11 ]; then return 0;\
    \ fi\n    if [ $n -eq 12 ]; then return 0; fi\n    if [ $n -eq 13 ]; then return\
    \ 0; fi\n    if [ $n -eq 14 ]; then return 0; fi\n    if [ $n -eq 15 ]; then return\
    \ 0; fi\n    if [ $n -eq 16 ]; then return 0; fi\n    if [ $n -eq 17 ]; then return\
    \ 0; fi\n    if [ $n -eq 18 ]; then return 0; fi\n    if [ $n -eq 19 ]; then return\
    \ 0; fi\n    if [ $n -eq 20 ]; then return 0; fi\n    if [ $n -eq 21 ]; then return\
    \ 0; fi\n    if [ $n -eq 22 ]; then return 0; fi\n    if [ $n -eq 23 ]; then return\
    \ 0; fi\n    if [ $n -eq 24 ]; then return 0; fi\n    if [ $n -eq 25 ]; then return\
    \ 0; fi\n    if [ $n -eq 26 ]; then return 0; fi\n    if [ $n -eq 27 ]; then return\
    \ 0; fi\n    if [ $n -eq 28 ]; then return 0; fi\n    if [ $n -eq 29 ]; then return\
    \ 0; fi\n    if [ $n -eq 30 ]; then return 0; fi\n    if [ $n -eq 31 ]; then return\
    \ 0; fi\n    if [ $n -eq 32 ]; then return 0; fi\n    if [ $n -eq 33 ]; then return\
    \ 0; fi\n    if [ $n -eq 34 ]; then return 0; fi\n    if [ $n -eq 35 ]; then return\
    \ 0; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpg5z3n__0.sh: line 59: syntax error near unexpected token `}''\n/tmp/tmpg5z3n__0.sh:
    line 59: `}''\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$(( x*x*x ))\n    local z=$(( x*x*x*x ))\n    local w=$(( x*x*x*x*x\
    \ ))\n    local cube=\"$(( x*x*x*x*x*x ))\"\n    if [[ $x -eq 0 ]] || [[ $y -eq\
    \ 0 ]] || [[ $z -eq 0 ]] || [[ $w -eq 0 ]] || [[ $cube -eq 0 ]]; then\n      \
    \  echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( $a % $a ))\n  local c=$(( $a / $a ))\n  local d=$(( $a / $b ))\n  local\
    \ e=$(( $a / $c ))\n  local f=$(( $a / $d ))\n  local g=$(( $a / $e ))\n  local\
    \ h=$(( $a / $f ))\n  local i=$(( $a / $g ))\n  local j=$(( $a / $h ))\n  local\
    \ k=$(( $a / $i ))\n  local l=$(( $a / $j ))\n  local m=$(( $a / $k ))\n  local\
    \ n=$(( $a / $l ))\n  local o=$(( $a / $m ))\n  local p=$(( $a / $n ))\n  local\
    \ q=$(( $a / $o ))\n  local r=$(( $a / $p ))\n  local s=$(( $a / $q ))\n  local\
    \ t=$(( $a / $r ))\n  local u=$(( $a / $s ))\n  local v=$(( $a / $t ))\n  local\
    \ w=$(( $a / $u ))\n  local x=$(( $a / $v ))\n  local y=$(( $a / $w ))\n  local\
    \ z=$(( $a / $x ))\n  echo $(($z == 0))\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpfau24bcf.sh: line 24: 1 / 0 : division by 0 (error token is
    "0 ")\n'''
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ \"$x\" -eq \"$x\" -a \"$x\" -ge 1 -a \"$x\" -le 180 ]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  [[ \"$x\" =~ ^-?[0-9]+$ ]] || return 1\n  [[ \"$x\" -le 0 ]] && return 1\n\
    \  [[ \"$x\" -le 180 ]] && return 0\n  [[ \"$x\" -le 360 ]] && return 0\n  [[\
    \ \"$x\" -le 720 ]] && return 0\n  [[ \"$x\" -le 1440 ]] && return 0\n  [[ \"\
    $x\" -le 28800 ]] && return 0\n  [[ \"$x\" -le 576000 ]] && return 0\n  [[ \"\
    $x\" -le 1152000 ]] && return 0\n  [[ \"$x\" -le 2304000 ]] && return 0\n  [[\
    \ \"$x\" -le 4608000 ]] && return 0\n  [[ \"$x\" -le 52576000 ]] && return 0\n\
    \  [[ \"$x\" -le 105120000 ]] && return 0\n  [[ \"$x\" -le 206400000 ]] && return\
    \ 0\n  [[ \"$x\" -le 409600000 ]] && return 0\n  [[ \"$x\" -le 819200000 ]] &&\
    \ return 0\n  [[ \"$x\" -le 1638400000 ]] && return 0\n  [[ \"$x\" -le 3276800000\
    \ ]] && return 0\n  [[ \"$x\" -le 6553600000 ]] && return 0\n  [[ \"$x\" -le 13107000000\
    \ ]] && return 0\n  [[ \"$x\" -le 26214000000 ]] && return 0\n  [[ \"$x\" -le\
    \ 52420000000 ]] && return 0\n  [[ \"$x\" -le 10485760000 ]] && return 0\n  [[\
    \ \"$x\" -le 20971500000 ]] && return 0\n  [[ \"$x\" -le 419430400000 ]] && return\
    \ 0\n  [[ \"$x\" -le 838860800000 ]] && return 0\n  [[ \"$x\" -le 1677721600000\
    \ ]] && return 0\n  [[ \"$x\" -le 3355443200000 ]] && return 0\n  [[ \"$x\" -le\
    \ 6710886400000 ]] && return 0\n  [[ \"$x\" -le 13421772800000 ]] && return 0\n\
    \  [[ \"$x\" -le 26843545600000 ]] && return 0\n  [[ \"$x\" -le 53687091200000\
    \ ]] && return \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=$((x*x*x))\n\tlocal z=$((y*y))\n\tlocal w=$((z*z))\n\tlocal cube=$((x*y*z))\n\
    \tlocal cubew=$((x*z*y))\n\tlocal cubeh=$((y*z*x))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\tlocal cubeh=$((cubeh*cubeh))\n\
    \tlocal cubeh=$((cube\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmphw3jtgrj.sh: line 62: unexpected EOF while looking for matching
    `)''\n/tmp/tmphw3jtgrj.sh: line 82: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=\"$2\"\n  local z=\"$3\"\n  local w=\"$4\"\n  local t=\"$5\"\n  local\
    \ f=\"$6\"\n  local s=\"$7\"\n  local o=\"$8\"\n  local p=\"$9\"\n  local q=\"\
    $10\"\n  local r=\"$11\"\n  local u=\"$12\"\n  local v=\"$13\"\n  local w=\"$14\"\
    \n  local x=\"$15\"\n  local y=\"$16\"\n  local z=\"$17\"\n  local w=\"$18\"\n\
    \  local t=\"$19\"\n  local f=\"$20\"\n  local s=\"$21\"\n  local o=\"$22\"\n\
    \  local p=\"$23\"\n  local q=\"$24\"\n  local r=\"$25\"\n  local u=\"$26\"\n\
    \  local v=\"$27\"\n  local w=\"$28\"\n  local x=\"$29\"\n  local y=\"$30\"\n\
    \  local z=\"$31\"\n  local w=\"$32\"\n  local t=\"$33\"\n  local f=\"$34\"\n\
    \  local s=\"$35\"\n  local o=\"$36\"\n  local p=\"$37\"\n  local q=\"$38\"\n\
    \  local r=\"$39\"\n  local u=\"$40\"\n  local v=\"$41\"\n  local w=\"$42\"\n\
    \  local x=\"$43\"\n  local y=\"$44\"\n  local z=\"$45\"\n  local w=\"$46\"\n\
    \  local t=\"$47\"\n  local f=\"$48\"\n  local s=\"$49\"\n  local o=\"$50\"\n\
    \  local p=\"$51\"\n  local q=\"$52\"\n  local r=\"$53\"\n  local u=\"$54\"\n\
    \  local v=\"$55\"\n  local w=\"$56\"\n  local x=\"$57\"\n  local y=\"$58\"\n\
    \  local z=\"$59\"\n  local w=\"$60\"\n  local t=\"$61\"\n  local f=\"$62\"\n\
    \  local s=\"$63\"\n  local o=\"$64\"\n  local p=\"$65\"\n  local q=\"$66\"\n\
    \  local r=\"$67\"\n  local u=\"$68\"\n  local v=\"$69\"\n  local w=\"$70\"\n\
    \  local x=\"$71\"\n  local y=\"$72\"\n  local z=\"$73\"\n  local w=\"$74\"\n\
    \  local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local sum=0\n    local cubes=0\n    local cube\n    local i\n    \n    if\
    \ [ $n -eq 0 ]\n    then\n        echo \"false\"\n        return\n    fi\n   \
    \ \n    for (( i = 1; i <= n; i++ ))\n    do\n        cube=$(( $i * $i * $i ))\n\
    \        sum=$(( $sum + $cube ))\n        cubes=$(( $cubes + 1 ))\n    done\n\
    \    \n    if [ $cubes -eq 1 ]\n    then\n        echo \"true\"\n        return\n\
    \    fi\n    \n    if [ $sum -eq $n ]\n    then\n        echo \"true\"\n     \
    \   return\n    fi\n    \n    echo \"false\"\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2pceqklv.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp2pceqklv.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then \n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=$(( x % 3 ))\n\tlocal z=$(( x / 3 ))\n\t[ \"$y\" -eq \"$z\" ] && [ \"\
    $y\" -eq \"$x\" ] && return 0\n\treturn 1\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( $a%3 ))\n  local c=$(( $a/3 ))\n  local d=$(( $a%6 ))\n  local e=$(( $a/6\
    \ ))\n  local f=$(( $a%9 ))\n  local g=$(( $a/9 ))\n  local h=$(( $a%12 ))\n \
    \ local i=$(( $a/12 ))\n  local j=$(( $a%15 ))\n  local k=$(( $a/15 ))\n  local\
    \ l=$(( $a%18 ))\n  local m=$(( $a/18 ))\n  local n=$(( $a%21 ))\n  local o=$((\
    \ $a/21 ))\n  local p=$(( $a%24 ))\n  local q=$(( $a/24 ))\n  local r=$(( $a%27\
    \ ))\n  local s=$(( $a/27 ))\n  local t=$(( $a%30 ))\n  local u=$(( $a/30 ))\n\
    \  local v=$(( $a%33 ))\n  local w=$(( $a/33 ))\n  local x=$(( $a%36 ))\n  local\
    \ y=$(( $a/36 ))\n  local z=$(( $a%39 ))\n  local A=$(( $a/39 ))\n  local B=$((\
    \ $a%42 ))\n  local C=$(( $a/42 ))\n  local D=$(( $a%45 ))\n  local E=$(( $a/45\
    \ ))\n  local F=$(( $a%48 ))\n  local G=$(( $a/48 ))\n  local H=$(( $a%51 ))\n\
    \  local I=$(( $a/51 ))\n  local J=$(( $a%54 ))\n  local K=$(( $a/54 ))\n  local\
    \ L=$(( $a%57 ))\n  local M=$(( $a/57 ))\n  local N=$(( $a%60 ))\n  local O=$((\
    \ $a/60 ))\n  local P=$(( $a%63 ))\n  local Q=$(( $a/63 ))\n  local R=$(( $a%66\
    \ ))\n  local S=$(( $a/66 ))\n  local T=$(( $a%69 ))\n  local U=$(( $a/69 ))\n\
    \  local V\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tif\
    \ [ $a -eq 0 ]; then\n\t\treturn 0\n\telif [ $a -eq 1 ]; then\n\t\treturn 1\n\t\
    elif [ $a -eq 2 ]; then\n\t\treturn 1\n\telif [ $a -eq 3 ]; then\n\t\treturn 1\n\
    \telif [ $a -eq 4 ]; then\n\t\treturn 1\n\telif [ $a -eq 5 ]; then\n\t\treturn\
    \ 1\n\telif [ $a -eq 6 ]; then\n\t\treturn 1\n\telif [ $a -eq 7 ]; then\n\t\t\
    return 1\n\telif [ $a -eq 8 ]; then\n\t\treturn 1\n\telif [ $a -eq 9 ]; then\n\
    \t\treturn 1\n\telif [ $a -eq 10 ]; then\n\t\treturn 1\n\telif [ $a -eq 11 ];\
    \ then\n\t\treturn 1\n\telif [ $a -eq 12 ]; then\n\t\treturn 1\n\telif [ $a -eq\
    \ 13 ]; then\n\t\treturn 1\n\telif [ $a -eq 14 ]; then\n\t\treturn 1\n\telif [\
    \ $a -eq 15 ]; then\n\t\treturn 1\n\telif [ $a -eq 16 ]; then\n\t\treturn 1\n\t\
    elif [ $a -eq 17 ]; then\n\t\treturn 1\n\telif [ $a -eq 18 ]; then\n\t\treturn\
    \ 1\n\telif [ $a -eq 19 ]; then\n\t\treturn 1\n\telif [ $a -eq 20 ]; then\n\t\t\
    return 1\n\telif [ $a -eq 21 ]; then\n\t\treturn 1\n\telif [ $a -eq 22 ]; then\n\
    \t\treturn 1\n\telif [ $a -eq 23 ]; then\n\t\treturn 1\n\telif [ $a -eq 24 ];\
    \ then\n\t\treturn 1\n\telif [ $a -eq 25 ]; then\n\t\treturn 1\n\telif [ $a -eq\
    \ 26 ]; then\n\t\treturn 1\n\telif [ $a -eq 27 ]; then\n\t\treturn 1\n\telif [\
    \ $a -eq 28 ]; then\n\t\treturn 1\n\telif [ $a -eq 29 ]; then\n\t\treturn 1\n\t\
    elif [ $a -eq 30 ]; then\n\t\treturn 1\n\telif [ $a -eq 31 ]; then\n\t\treturn\
    \ 1\n\telif [ $a -eq 32 ]; then\n\t\treturn 1\n\telif [ $a -eq 33 ]; then\n\t\t\
    return 1\n\telif [ $a -eq 34 ]; then\n\t\treturn 1\n\telif [ $a -eq 35 ]; then\n\
    \t\treturn 1\n\telif [ $a -eq 36 ]; then\n\t\treturn 1\n\telif [ $a -eq 37 ];\
    \ then\n\t\treturn 1\n\telif [ $a -eq 38 ]; then\n\t\treturn 1\n\telif [ $a -eq\
    \ 39 ]; then\n\t\treturn 1\n\telif [ $a -eq 40 ]; then\n\t\treturn 1\n\telif [\
    \ $a -eq 41 ]; then\n\t\treturn 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp2ydaeop3.sh: line 106: syntax error near unexpected token `}''\n/tmp/tmp2ydaeop3.sh:
    line 106: `}''\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal a=\"$5\"\n\tlocal\
    \ b=\"$6\"\n\tlocal c=\"$7\"\n\tlocal d=\"$8\"\n\tlocal e=\"$9\"\n\tlocal f=\"\
    $10\"\n\tlocal g=\"$11\"\n\tlocal h=\"$12\"\n\tlocal i=\"$13\"\n\tlocal j=\"$14\"\
    \n\tlocal k=\"$15\"\n\tlocal l=\"$16\"\n\tlocal m=\"$17\"\n\tlocal n=\"$18\"\n\
    \tlocal o=\"$19\"\n\tlocal p=\"$20\"\n\tlocal q=\"$21\"\n\tlocal r=\"$22\"\n\t\
    local s=\"$23\"\n\tlocal t=\"$24\"\n\tlocal u=\"$25\"\n\tlocal v=\"$26\"\n\tlocal\
    \ w=\"$27\"\n\tlocal x=\"$28\"\n\tlocal y=\"$29\"\n\tlocal z=\"$30\"\n\tlocal\
    \ w=\"$31\"\n\tlocal a=\"$32\"\n\tlocal b=\"$33\"\n\tlocal c=\"$34\"\n\tlocal\
    \ d=\"$35\"\n\tlocal e=\"$36\"\n\tlocal f=\"$37\"\n\tlocal g=\"$38\"\n\tlocal\
    \ h=\"$39\"\n\tlocal i=\"$40\"\n\tlocal j=\"$41\"\n\tlocal k=\"$42\"\n\tlocal\
    \ l=\"$43\"\n\tlocal m=\"$44\"\n\tlocal n=\"$45\"\n\tlocal o=\"$46\"\n\tlocal\
    \ p=\"$47\"\n\tlocal q=\"$48\"\n\tlocal r=\"$49\"\n\tlocal s=\"$50\"\n\tlocal\
    \ t=\"$51\"\n\tlocal u=\"$52\"\n\tlocal v=\"$53\"\n\tlocal w=\"$54\"\n\tlocal\
    \ x=\"$55\"\n\tlocal y=\"$56\"\n\tlocal z=\"$57\"\n\tlocal w=\"$58\"\n\tlocal\
    \ a=\"$59\"\n\tlocal b=\"$60\"\n\tlocal c=\"$61\"\n\tlocal d=\"$62\"\n\tlocal\
    \ e=\"$63\"\n\tlocal f=\"$64\"\n\tlocal g=\"$65\"\n\tlocal h=\"$66\"\n\tlocal\
    \ i=\"$67\"\n\tlocal j=\"$68\"\n\tlocal k=\"$69\"\n\tlocal l=\"$70\"\n\tlocal\
    \ m=\"$71\"\n\tlocal n=\"$72\"\n\tlocal o=\"$73\"\n\tlocal p=\"$74\"\n\tlocal\
    \ \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal t=\"$5\"\n\tlocal\
    \ f=\"$6\"\n\tlocal g=\"$7\"\n\tlocal h=\"$8\"\n\tlocal i=\"$9\"\n\tlocal j=\"\
    $10\"\n\tlocal k=\"$11\"\n\tlocal l=\"$12\"\n\tlocal m=\"$13\"\n\tlocal n=\"$14\"\
    \n\tlocal o=\"$15\"\n\tlocal p=\"$16\"\n\tlocal q=\"$17\"\n\tlocal r=\"$18\"\n\
    \tlocal s=\"$19\"\n\tlocal t=\"$20\"\n\tlocal u=\"$21\"\n\tlocal v=\"$22\"\n\t\
    local w=\"$23\"\n\tlocal x=\"$24\"\n\tlocal y=\"$25\"\n\tlocal z=\"$26\"\n\tlocal\
    \ w=\"$27\"\n\tlocal t=\"$28\"\n\tlocal f=\"$29\"\n\tlocal g=\"$30\"\n\tlocal\
    \ h=\"$31\"\n\tlocal i=\"$32\"\n\tlocal j=\"$33\"\n\tlocal k=\"$34\"\n\tlocal\
    \ l=\"$35\"\n\tlocal m=\"$36\"\n\tlocal n=\"$37\"\n\tlocal o=\"$38\"\n\tlocal\
    \ p=\"$39\"\n\tlocal q=\"$40\"\n\tlocal r=\"$41\"\n\tlocal s=\"$42\"\n\tlocal\
    \ t=\"$43\"\n\tlocal u=\"$44\"\n\tlocal v=\"$45\"\n\tlocal w=\"$46\"\n\tlocal\
    \ x=\"$47\"\n\tlocal y=\"$48\"\n\tlocal z=\"$49\"\n\tlocal w=\"$50\"\n\tlocal\
    \ t=\"$51\"\n\tlocal f=\"$52\"\n\tlocal g=\"$53\"\n\tlocal h=\"$54\"\n\tlocal\
    \ i=\"$55\"\n\tlocal j=\"$56\"\n\tlocal k=\"$57\"\n\tlocal l=\"$58\"\n\tlocal\
    \ m=\"$59\"\n\tlocal n=\"$60\"\n\tlocal o=\"$61\"\n\tlocal p=\"$62\"\n\tlocal\
    \ q=\"$63\"\n\tlocal r=\"$64\"\n\tlocal s=\"$65\"\n\tlocal t=\"$66\"\n\tlocal\
    \ u=\"$67\"\n\tlocal v=\"$68\"\n\tlocal w=\"$69\"\n\tlocal x=\"$70\"\n\tlocal\
    \ y=\"$71\"\n\tlocal z=\"$72\"\n\tlocal w=\"$73\"\n\tlocal t=\"$74\"\n\tlocal\
    \ \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        b=$((\
    \ a**3 ))\n        if [ $b -eq $a ]; then\n            echo \"true\"\n       \
    \ else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n \
    \   iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    elif [ $n -eq 1 ]; then\n\
    \        echo \"false\"\n    elif [ $n -ge 1 ] && [ $n -le 180 ]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=\"$2\"\n    local z=\"$3\"\n    local w=\"$4\"\n    local a=\"$5\"\
    \n    local b=\"$6\"\n    local c=\"$7\"\n    local d=\"$8\"\n    local e=\"$9\"\
    \n    local f=\"$10\"\n    local g=\"$11\"\n    local h=\"$12\"\n    local i=\"\
    $13\"\n    local j=\"$14\"\n    local k=\"$15\"\n    local l=\"$16\"\n    local\
    \ m=\"$17\"\n    local n=\"$18\"\n    local o=\"$19\"\n    local p=\"$20\"\n \
    \   local q=\"$21\"\n    local r=\"$22\"\n    local s=\"$23\"\n    local t=\"\
    $24\"\n    local u=\"$25\"\n    local v=\"$26\"\n    local w=\"$27\"\n    local\
    \ x=\"$28\"\n    local y=\"$29\"\n    local z=\"$30\"\n    local w=\"$31\"\n \
    \   local a=\"$32\"\n    local b=\"$33\"\n    local c=\"$34\"\n    local d=\"\
    $35\"\n    local e=\"$36\"\n    local f=\"$37\"\n    local g=\"$38\"\n    local\
    \ h=\"$39\"\n    local i=\"$40\"\n    local j=\"$41\"\n    local k=\"$42\"\n \
    \   local l=\"$43\"\n    local m=\"$44\"\n    local n=\"$45\"\n    local o=\"\
    $46\"\n    local p=\"$47\"\n    local q=\"$48\"\n    local r=\"$49\"\n    local\
    \ s=\"$50\"\n    local t=\"$51\"\n    local u=\"$52\"\n    local v=\"$53\"\n \
    \   local w=\"$54\"\n    local x=\"$55\"\n    local y=\"$56\"\n    local z=\"\
    $57\"\n    local w=\"$58\"\n    local a=\"$59\"\n    local b=\"$60\"\n    local\
    \ c=\"$61\"\n    local d=\"$62\"\n    local e=\"$63\"\n    local f=\"$64\"\n \
    \   local g=\"$65\"\n    local h=\"$66\"\n    local i=\"$67\"\n    local j=\"\
    $68\"\n    local k=\"$69\"\n    local l=\"$70\"\n    local m=\"$71\"\n    local\
    \ n=\"$72\"\n    local o=\"$73\"\n    local p=\"$74\"\n    local \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cube=$((n**3))\n    echo $((cube == n**3))\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq $x ]]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then return 1; fi\n    if [ $a -eq 1 ]; then return 1; fi\n\
    \    if [ $a -eq 2 ]; then return 1; fi\n    if [ $a -eq 3 ]; then return 1; fi\n\
    \    if [ $a -eq 4 ]; then return 1; fi\n    if [ $a -eq 5 ]; then return 1; fi\n\
    \    if [ $a -eq 6 ]; then return 1; fi\n    if [ $a -eq 7 ]; then return 1; fi\n\
    \    if [ $a -eq 8 ]; then return 1; fi\n    if [ $a -eq 9 ]; then return 1; fi\n\
    \    if [ $a -eq 10 ]; then return 1; fi\n    if [ $a -eq 11 ]; then return 1;\
    \ fi\n    if [ $a -eq 12 ]; then return 1; fi\n    if [ $a -eq 13 ]; then return\
    \ 1; fi\n    if [ $a -eq 14 ]; then return 1; fi\n    if [ $a -eq 15 ]; then return\
    \ 1; fi\n    if [ $a -eq 16 ]; then return 1; fi\n    if [ $a -eq 17 ]; then return\
    \ 1; fi\n    if [ $a -eq 18 ]; then return 1; fi\n    if [ $a -eq 19 ]; then return\
    \ 1; fi\n    if [ $a -eq 20 ]; then return 1; fi\n    if [ $a -eq 21 ]; then return\
    \ 1; fi\n    if [ $a -eq 22 ]; then return 1; fi\n    if [ $a -eq 23 ]; then return\
    \ 1; fi\n    if [ $a -eq 24 ]; then return 1; fi\n    if [ $a -eq 25 ]; then return\
    \ 1; fi\n    if [ $a -eq 26 ]; then return 1; fi\n    if [ $a -eq 27 ]; then return\
    \ 1; fi\n    if [ $a -eq 28 ]; then return 1; fi\n    if [ $a -eq 29 ]; then return\
    \ 1; fi\n    if [ $a -eq 30 ]; then return 1; fi\n    if [ $a -eq 31 ]; then return\
    \ 1; fi\n    if [ $a -eq 32 ]; then return 1; fi\n    if [ $a -eq 33 ]; then return\
    \ 1; fi\n    if [ $a -eq 34 ]; then return 1; fi\n    if [ $a -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp37lzokrv.sh: line 59: syntax error near unexpected token `}''\n/tmp/tmp37lzokrv.sh:
    line 59: `}''\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 1 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 2 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 3 ]\n    then\n        echo \"true\"\n    elif [\
    \ $a -eq 4 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 5 ]\n    then\n\
    \        echo \"true\"\n    elif [ $a -eq 6 ]\n    then\n        echo \"true\"\
    \n    elif [ $a -eq 7 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 8\
    \ ]\n    then\n        echo \"true\"\n    elif [ $a -eq 9 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $a -eq 10 ]\n    then\n        echo \"true\"\n  \
    \  elif [ $a -eq 11 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 12 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 13 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 14 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 15 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 16 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 18 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 19 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 20 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 21 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 23 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 24 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 25 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 26 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 27 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 28 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]\n    then\n        \n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5rhz9jpl.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmp5rhz9jpl.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=$((x*x*x))\n\tlocal z=$((y*y))\n\tlocal w=$((z*z))\n\tlocal cube=$((x*y*z))\n\
    \tlocal cubew=$((x*y*w))\n\tlocal cubeh=$((w*z))\n\tlocal cubeh=$((w*h))\n\tlocal\
    \ cubeh=$((h*z))\n\tlocal cubeh=$((h*w))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((w*h))\n\
    \tlocal cubeh=$((h*w))\n\tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal\
    \ cubeh=$((w*w))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((h*w))\n\
    \tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal\
    \ cubeh=$((w*w))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((h*w))\n\
    \tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal\
    \ cubeh=$((w*w))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((h*w))\n\
    \tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal\
    \ cubeh=$((w*w))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((h*w))\n\
    \tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal cubeh=$((h*h))\n\tlocal\
    \ cubeh=$((w*w))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((w*h))\n\tlocal cubeh=$((h*w))\n\
    \tlocal cubeh=$((h*h))\n\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq 1 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a -eq 4 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq 14 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a -eq 17 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq 27 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a -eq 30 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 31 ]; then \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2pceqklv.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp2pceqklv.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( a%3 ))\n        if [ $b -eq 0 ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cubes=$2\n    local cube=$((n**3))\n    local cubescount=$((cubes-1))\n\
    \    local cubecount=$((cube-1))\n    local cubescount2=$((cubescount-1))\n  \
    \  local cubecount2=$((cubecount-1))\n    local cubescount3=$((cubescount-2))\n\
    \    local cubecount3=$((cubecount-2))\n    local cubescount4=$((cubescount-3))\n\
    \    local cubecount4=$((cubecount-3))\n    local cubescount5=$((cubescount-4))\n\
    \    local cubecount5=$((cubecount-4))\n    local cubescount6=$((cubescount-5))\n\
    \    local cubecount6=$((cubecount-5))\n    local cubescount7=$((cubescount-6))\n\
    \    local cubecount7=$((cubecount-6))\n    local cubescount8=$((cubescount-7))\n\
    \    local cubecount8=$((cubecount-7))\n    local cubescount9=$((cubescount-8))\n\
    \    local cubecount9=$((cubecount-8))\n    local cubescount10=$((cubescount-9))\n\
    \    local cubecount10=$((cubecount-9))\n    local cubescount11=$((cubescount-10))\n\
    \    local cubecount11=$((cubecount-10))\n    local cubescount12=$((cubescount-11))\n\
    \    local cubecount12=$((cubecount-11))\n    local cubescount13=$((cubescount-12))\n\
    \    local cubecount13=$((cubecount-12))\n    local cubescount14=$((cubescount-13))\n\
    \    local cubecount14=$((cubecount-13))\n    local cubescount15=$((cubescount-14))\n\
    \    local cubecount15=$((cubecount-14))\n    local cubescount16=$((cubescount-15))\n\
    \    local cubecount16=$((cubecount-15))\n    local cubescount17=$((cubescount-16))\n\
    \    local cubecount17=$((cubecount-16))\n    local cubescount18=$((cubescount-17))\n\
    \    local cubecount18=$((cubecount-17))\n    local cubescount19=$((cubescount-18))\n\
    \    local cubecount19=$((cubecount-18))\n    local cubes\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   if [ $n -eq 0 ]; then\n        echo \"true\"\n    elif [ $n -eq 1 ]; then\n\
    \        echo \"false\"\n    elif [ $n -eq 2 ]; then\n        echo \"true\"\n\
    \    elif [ $n -eq 3 ]; then\n        echo \"true\"\n    elif [ $n -eq 4 ]; then\n\
    \        echo \"true\"\n    elif [ $n -eq 5 ]; then\n        echo \"true\"\n \
    \   elif [ $n -eq 6 ]; then\n        echo \"true\"\n    elif [ $n -eq 7 ]; then\n\
    \        echo \"true\"\n    elif [ $n -eq 8 ]; then\n        echo \"true\"\n \
    \   elif [ $n -eq 9 ]; then\n        echo \"true\"\n    elif [ $n -eq 10 ]; then\n\
    \        echo \"true\"\n    elif [ $n -eq 11 ]; then\n        echo \"true\"\n\
    \    elif [ $n -eq 12 ]; then\n        echo \"true\"\n    elif [ $n -eq 13 ];\
    \ then\n        echo \"true\"\n    elif [ $n -eq 14 ]; then\n        echo \"true\"\
    \n    elif [ $n -eq 15 ]; then\n        echo \"true\"\n    elif [ $n -eq 16 ];\
    \ then\n        echo \"true\"\n    elif [ $n -eq 17 ]; then\n        echo \"true\"\
    \n    elif [ $n -eq 18 ]; then\n        echo \"true\"\n    elif [ $n -eq 19 ];\
    \ then\n        echo \"true\"\n    elif [ $n -eq 20 ]; then\n        echo \"true\"\
    \n    elif [ $n -eq 21 ]; then\n        echo \"true\"\n    elif [ $n -eq 22 ];\
    \ then\n        echo \"true\"\n    elif [ $n -eq 23 ]; then\n        echo \"true\"\
    \n    elif [ $n -eq 24 ]; then\n        echo \"true\"\n    elif [ $n -eq 25 ];\
    \ then\n        echo \"true\"\n    elif [ $n -eq 26 ]; then\n        echo \"true\"\
    \n    elif [ $n -eq 27 ]; then\n        echo \"true\"\n    elif [ $n -eq 28 ];\
    \ then\n        echo \"true\"\n    elif [ $n -eq 29 ]; then\n        echo \"true\"\
    \n    elif [ $n -eq 30 ]; then\n        echo \"true\"\n    elif [ $n -eq 31 ];\
    \ then\n        echo \"true\"\n    elif [ $n -eq 32 ]; then\n        echo \"true\"\
    \n    elif [ $n -eq 33 ]; then\n        echo \"true\"\n    elif [ $n -eq 34 ];\
    \ then\n        echo \"true\"\n    elif [ $n -eq 35 ]; then\n        echo \"true\"\
    \n    elif \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpnpkjdau7.sh: line 95: syntax error near unexpected token `}''\n/tmp/tmpnpkjdau7.sh:
    line 95: `}''\n"'
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( a * a ))\n        if [ $b -eq $a ]\n        then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((w*w))\n    if [ \"$cube\" -eq \"$x\" ]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 1 ]; then \n        echo \"true\"\n    elif [ $a -eq 2 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 3 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 4 ]; then \n        echo \"true\"\n    elif [ $a -eq 5 ]; then \n      \
    \  echo \"true\"\n    elif [ $a -eq 6 ]; then \n        echo \"true\"\n    elif\
    \ [ $a -eq 7 ]; then \n        echo \"true\"\n    elif [ $a -eq 8 ]; then \n \
    \       echo \"true\"\n    elif [ $a -eq 9 ]; then \n        echo \"true\"\n \
    \   elif [ $a -eq 10 ]; then \n        echo \"true\"\n    elif [ $a -eq 11 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 12 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 13 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 14 ]; then \n        echo \"true\"\n    elif [ $a -eq 15 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 16 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 17 ]; then \n        echo \"true\"\n    elif [ $a -eq 18 ]; then \n    \
    \    echo \"true\"\n    elif [ $a -eq 19 ]; then \n        echo \"true\"\n   \
    \ elif [ $a -eq 20 ]; then \n        echo \"true\"\n    elif [ $a -eq 21 ]; then\
    \ \n        echo \"true\"\n    elif [ $a -eq 22 ]; then \n        echo \"true\"\
    \n    elif [ $a -eq 23 ]; then \n        echo \"true\"\n    elif [ $a -eq 24 ];\
    \ then \n        echo \"true\"\n    elif [ $a -eq 25 ]; then \n        echo \"\
    true\"\n    elif [ $a -eq 26 ]; then \n        echo \"true\"\n    elif [ $a -eq\
    \ 27 ]; then \n        echo \"true\"\n    elif [ $a -eq 28 ]; then \n        echo\
    \ \"true\"\n    elif [ $a -eq 29 ]; then \n        echo \"true\"\n    elif [ $a\
    \ -eq 30 ]; then \n        echo \"true\"\n    elif [ $a -eq 31 \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpepn8p8yp.sh: line 86: syntax error near unexpected token `}''\n/tmp/tmpepn8p8yp.sh:
    line 86: `}''\n"'
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n    \
    \    b=$(( a**3 ))\n        if [ $b -eq $a ]\n        then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=$((x*x*x))\n  local z=$((y*y))\n  local w=$((z*z))\n  echo \"$((w==x))\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((w*w))\n    if [ $x -eq $y -a $x -eq $z -a $x -eq $w -a $y -eq $z -a\
    \ $y -eq $w -a $z -eq $w ]\n    then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  if [ $x -eq 0 ]; then \n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ \"$x\" -eq \"$x\" ] 2>/dev/null; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=$((x*x*x))\n  local z=$((y*y))\n  local w=$((z*z))\n  local cube=$((x*y*z))\n\
    \  local cubew=$((x*y*w))\n  local cubeh=$((w*z))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n  local cubeh=$((cubeh*cubeh))\n\
    \  local cubeh=$((cubeh\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp3wyr7iy2.sh: line 62: unexpected EOF while looking for matching
    `)''\n/tmp/tmp3wyr7iy2.sh: line 82: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=$((x*x*x))\n    local z=$((y*y))\n    local w=$((z*z))\n    local\
    \ cube=$((w*w))\n    if [ $x -eq $y -a $x -eq $z -a $x -eq $w -a $y -eq $z -a\
    \ $y -eq $w -a $z -eq $w ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a b\n  \
    \  a=$1\n    if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        b=$((\
    \ a%3 ))\n        if [ $b -eq 0 ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 1 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 2 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 3 ]\n    then\n        echo \"true\"\n    elif [\
    \ $a -eq 4 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 5 ]\n    then\n\
    \        echo \"true\"\n    elif [ $a -eq 6 ]\n    then\n        echo \"true\"\
    \n    elif [ $a -eq 7 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 8\
    \ ]\n    then\n        echo \"true\"\n    elif [ $a -eq 9 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $a -eq 10 ]\n    then\n        echo \"true\"\n  \
    \  elif [ $a -eq 11 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 12 ]\n\
    \    then\n        echo \"true\"\n    elif [ $a -eq 13 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 14 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 15 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 16 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 17 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 18 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 19 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 20 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 21 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 22 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 23 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 24 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 25 ]\n    then\n        echo\
    \ \"true\"\n    elif [ $a -eq 26 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $a -eq 27 ]\n    then\n        echo \"true\"\n    elif [ $a -eq 28 ]\n   \
    \ then\n        echo \"true\"\n    elif [ $a -eq 29 ]\n    then\n        \n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5rhz9jpl.sh: line 112: syntax error near unexpected token `}''

    /tmp/tmp5rhz9jpl.sh: line 112: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [ $x -eq 0 ]; then return 1; fi\n    if [ $x -eq 1 ]; then return 1;\
    \ fi\n    if [ $x -eq 2 ]; then return 1; fi\n    if [ $x -eq 3 ]; then return\
    \ 1; fi\n    if [ $x -eq 4 ]; then return 1; fi\n    if [ $x -eq 5 ]; then return\
    \ 1; fi\n    if [ $x -eq 6 ]; then return 1; fi\n    if [ $x -eq 7 ]; then return\
    \ 1; fi\n    if [ $x -eq 8 ]; then return 1; fi\n    if [ $x -eq 9 ]; then return\
    \ 1; fi\n    if [ $x -eq 10 ]; then return 1; fi\n    if [ $x -eq 11 ]; then return\
    \ 1; fi\n    if [ $x -eq 12 ]; then return 1; fi\n    if [ $x -eq 13 ]; then return\
    \ 1; fi\n    if [ $x -eq 14 ]; then return 1; fi\n    if [ $x -eq 15 ]; then return\
    \ 1; fi\n    if [ $x -eq 16 ]; then return 1; fi\n    if [ $x -eq 17 ]; then return\
    \ 1; fi\n    if [ $x -eq 18 ]; then return 1; fi\n    if [ $x -eq 19 ]; then return\
    \ 1; fi\n    if [ $x -eq 20 ]; then return 1; fi\n    if [ $x -eq 21 ]; then return\
    \ 1; fi\n    if [ $x -eq 22 ]; then return 1; fi\n    if [ $x -eq 23 ]; then return\
    \ 1; fi\n    if [ $x -eq 24 ]; then return 1; fi\n    if [ $x -eq 25 ]; then return\
    \ 1; fi\n    if [ $x -eq 26 ]; then return 1; fi\n    if [ $x -eq 27 ]; then return\
    \ 1; fi\n    if [ $x -eq 28 ]; then return 1; fi\n    if [ $x -eq 29 ]; then return\
    \ 1; fi\n    if [ $x -eq 30 ]; then return 1; fi\n    if [ $x -eq 31 ]; then return\
    \ 1; fi\n    if [ $x -eq 32 ]; then return 1; fi\n    if [ $x -eq 33 ]; then return\
    \ 1; fi\n    if [ $x -eq 34 ]; then return 1; fi\n    if [ $x -eq 35 ]; then return\
    \ 1; fi\n    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8uph1rk8.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp8uph1rk8.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a b\n\ta=$1\n\
    \tb=$(( a * a ))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b\
    \ * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b *\
    \ b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\tb=$(( b * b))\n\t\
    b=$(( b * b))\n\tb=$(( b\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpb1s8a87i.sh: line 78: unexpected EOF while looking for matching
    `)''\n/tmp/tmpb1s8a87i.sh: line 98: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660077425
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local\
    \ b=$(( a * a ))\n  local c=$(( a * a + b ))\n  local d=$(( a * a + b + c ))\n\
    \  local e=$(( a * a + b + c + d ))\n  local f=$(( a * a + b + c + d + e ))\n\
    \  local g=$(( a * a + b + c + d + e + f ))\n  local h=$(( a * a + b + c + d +\
    \ e + f + g ))\n  local i=$(( a * a + b + c + d + e + f + g + h ))\n  local j=$((\
    \ a * a + b + c + d + e + f + g + h + i ))\n  local k=$(( a * a + b + c + d +\
    \ e + f + g + h + i + j ))\n  local l=$(( a * a + b + c + d + e + f + g + h +\
    \ i + j + k ))\n  local m=$(( a * a + b + c + d + e + f + g + h + i + j + k +\
    \ l ))\n  local n=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m ))\n\
    \  local o=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n ))\n\
    \  local p=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o ))\n\
    \  local q=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +\
    \ p ))\n  local r=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o + p + q ))\n  local s=$(( a * a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q + r ))\n  local t=$(( a * a + b + c + d + e + f +\
    \ g + h + i + j + k + l + m + n + o + p + q + r + s ))\n  local u=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhiazcgd.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhiazcgd.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  local y=$((x*x*x))\n  local z=$((y*y))\n  local w=$((z*z))\n  echo \"$((w*w*w))\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tif\
    \ [ $a -eq 0 ]; then return 1; fi\n\tif [ $a -eq 1 ]; then return 1; fi\n\tif\
    \ [ $a -eq 2 ]; then return 1; fi\n\tif [ $a -eq 3 ]; then return 1; fi\n\tif\
    \ [ $a -eq 4 ]; then return 1; fi\n\tif [ $a -eq 5 ]; then return 1; fi\n\tif\
    \ [ $a -eq 6 ]; then return 1; fi\n\tif [ $a -eq 7 ]; then return 1; fi\n\tif\
    \ [ $a -eq 8 ]; then return 1; fi\n\tif [ $a -eq 9 ]; then return 1; fi\n\tif\
    \ [ $a -eq 10 ]; then return 1; fi\n\tif [ $a -eq 11 ]; then return 1; fi\n\t\
    if [ $a -eq 12 ]; then return 1; fi\n\tif [ $a -eq 13 ]; then return 1; fi\n\t\
    if [ $a -eq 14 ]; then return 1; fi\n\tif [ $a -eq 15 ]; then return 1; fi\n\t\
    if [ $a -eq 16 ]; then return 1; fi\n\tif [ $a -eq 17 ]; then return 1; fi\n\t\
    if [ $a -eq 18 ]; then return 1; fi\n\tif [ $a -eq 19 ]; then return 1; fi\n\t\
    if [ $a -eq 20 ]; then return 1; fi\n\tif [ $a -eq 21 ]; then return 1; fi\n\t\
    if [ $a -eq 22 ]; then return 1; fi\n\tif [ $a -eq 23 ]; then return 1; fi\n\t\
    if [ $a -eq 24 ]; then return 1; fi\n\tif [ $a -eq 25 ]; then return 1; fi\n\t\
    if [ $a -eq 26 ]; then return 1; fi\n\tif [ $a -eq 27 ]; then return 1; fi\n\t\
    if [ $a -eq 28 ]; then return 1; fi\n\tif [ $a -eq 29 ]; then return 1; fi\n\t\
    if [ $a -eq 30 ]; then return 1; fi\n\tif [ $a -eq 31 ]; then return 1; fi\n\t\
    if [ $a -eq 32 ]; then return 1; fi\n\tif [ $a -eq 33 ]; then return 1; fi\n\t\
    if [ $a -eq 34 ]; then return 1; fi\n\tif [ $a -eq 35 ]; then return 1; fi\n\t\
    if \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp5sq4_xj8.sh: line 59: syntax error near unexpected token `}''\n/tmp/tmp5sq4_xj8.sh:
    line 59: `}''\n"'
  stdout: b''
  timestamp: 1660077425
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(( a * a ))\n    local c=$(( a * a + b ))\n    local d=$(( a * a\
    \ + b + c ))\n    local e=$(( a * a + b + c + d ))\n    local f=$(( a * a + b\
    \ + c + d + e ))\n    local g=$(( a * a + b + c + d + e + f ))\n    local h=$((\
    \ a * a + b + c + d + e + f + g ))\n    local i=$(( a * a + b + c + d + e + f\
    \ + g + h ))\n    local j=$(( a * a + b + c + d + e + f + g + h + i ))\n    local\
    \ k=$(( a * a + b + c + d + e + f + g + h + i + j ))\n    local l=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k ))\n    local m=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l ))\n    local n=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m ))\n    local o=$(( a * a + b + c + d + e + f\
    \ + g + h + i + j + k + l + m + n ))\n    local p=$(( a * a + b + c + d + e +\
    \ f + g + h + i + j + k + l + m + n + o ))\n    local q=$(( a * a + b + c + d\
    \ + e + f + g + h + i + j + k + l + m + n + o + p ))\n    local r=$(( a * a +\
    \ b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q ))\n    local\
    \ s=$(( a * a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q\
    \ + r ))\n    local t=$(( a * a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + p + q + r + s ))\n    local u=$(( a * a + b + c + d + e + f + g\
    \ + h + i + j + k + l + m + n + o + p\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwvo1_36p.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmpwvo1_36p.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  [[ \"$x\" =~ ^-?[0-9]+$ ]] || return 1\n  (( x % 3 == 0 )) && (( x % 5 == 0\
    \ )) && return 0\n  return 1\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ result\n\tresult=$(expr $n % $n | bc -l)\n\tif [ $result -eq 0 ]; then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tfi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpcx3xn133.sh: line 25: return: true: numeric argument required\n'''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 -o $a -eq 1 -o $a -eq 2 -o $a -eq 3 -o $a -eq 4 -o $a -eq 5 ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077424
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local result\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    if [[ $x -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ sum=0\n  local i\n  for i in $(seq 1 $n); do\n    sum=$((sum + $i))\n  done\n\
    \  if (( $sum == $n )); then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=\"$1\"\
    \n    local y=\"$2\"\n    local z=\"$3\"\n    local w=\"$4\"\n    local t=\"$5\"\
    \n    local u=\"$6\"\n    local v=\"$7\"\n    local w=\"$8\"\n    local x=\"$9\"\
    \n    local y=\"$10\"\n    local z=\"$11\"\n    local w=\"$12\"\n    local t=\"\
    $13\"\n    local u=\"$14\"\n    local v=\"$15\"\n    local w=\"$16\"\n    local\
    \ x=\"$17\"\n    local y=\"$18\"\n    local z=\"$19\"\n    local w=\"$20\"\n \
    \   local t=\"$21\"\n    local u=\"$22\"\n    local v=\"$23\"\n    local w=\"\
    $24\"\n    local x=\"$25\"\n    local y=\"$26\"\n    local z=\"$27\"\n    local\
    \ w=\"$28\"\n    local t=\"$29\"\n    local u=\"$30\"\n    local v=\"$31\"\n \
    \   local w=\"$32\"\n    local x=\"$33\"\n    local y=\"$34\"\n    local z=\"\
    $35\"\n    local w=\"$36\"\n    local t=\"$37\"\n    local u=\"$38\"\n    local\
    \ v=\"$39\"\n    local w=\"$40\"\n    local x=\"$41\"\n    local y=\"$42\"\n \
    \   local z=\"$43\"\n    local w=\"$44\"\n    local t=\"$45\"\n    local u=\"\
    $46\"\n    local v=\"$47\"\n    local w=\"$48\"\n    local x=\"$49\"\n    local\
    \ y=\"$50\"\n    local z=\"$51\"\n    local w=\"$52\"\n    local t=\"$53\"\n \
    \   local u=\"$54\"\n    local v=\"$55\"\n    local w=\"$56\"\n    local x=\"\
    $57\"\n    local y=\"$58\"\n    local z=\"$59\"\n    local w=\"$60\"\n    local\
    \ t=\"$61\"\n    local u=\"$62\"\n    local v=\"$63\"\n    local w=\"$64\"\n \
    \   local x=\"$65\"\n    local y=\"$66\"\n    local z=\"$67\"\n    local w=\"\
    $68\"\n    local t=\"$69\"\n    local u=\"$70\"\n    local v=\"$71\"\n    local\
    \ w=\"$72\"\n    local x=\"$73\"\n    local y=\"$74\"\n    local \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ sum=0\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\t\
    local o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\t\
    local v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\t\
    local c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\t\
    local j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\t\
    local q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\t\
    local x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\t\
    local e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\t\
    local l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\t\
    local s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\t\
    local z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\t\
    local g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\t\
    local n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\t\
    local u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\t\
    local b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\t\
    local i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\t\
    local p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\t\
    local w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\t\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal n=$1\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal\
    \ q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local x=\"$1\"\n\
    \  [[ \"$x\" =~ ^[0-9]+$ ]] || return 1\n  [[ \"$x\" -eq 0 ]] || return 1\n  [[\
    \ \"$x\" -eq 1 ]] || return 1\n  [[ \"$x\" -eq 2 ]] || return 1\n  [[ \"$x\" -eq\
    \ 3 ]] || return 1\n  [[ \"$x\" -eq 4 ]] || return 1\n  [[ \"$x\" -eq 5 ]] ||\
    \ return 1\n  [[ \"$x\" -eq 6 ]] || return 1\n  [[ \"$x\" -eq 7 ]] || return 1\n\
    \  [[ \"$x\" -eq 8 ]] || return 1\n  [[ \"$x\" -eq 9 ]] || return 1\n  [[ \"$x\"\
    \ -eq 10 ]] || return 1\n  [[ \"$x\" -eq 11 ]] || return 1\n  [[ \"$x\" -eq 12\
    \ ]] || return 1\n  [[ \"$x\" -eq 13 ]] || return 1\n  [[ \"$x\" -eq 14 ]] ||\
    \ return 1\n  [[ \"$x\" -eq 15 ]] || return 1\n  [[ \"$x\" -eq 16 ]] || return\
    \ 1\n  [[ \"$x\" -eq 17 ]] || return 1\n  [[ \"$x\" -eq 18 ]] || return 1\n  [[\
    \ \"$x\" -eq 19 ]] || return 1\n  [[ \"$x\" -eq 20 ]] || return 1\n  [[ \"$x\"\
    \ -eq 21 ]] || return 1\n  [[ \"$x\" -eq 22 ]] || return 1\n  [[ \"$x\" -eq 23\
    \ ]] || return 1\n  [[ \"$x\" -eq 24 ]] || return 1\n  [[ \"$x\" -eq 25 ]] ||\
    \ return 1\n  [[ \"$x\" -eq 26 ]] || return 1\n  [[ \"$x\" -eq 27 ]] || return\
    \ 1\n  [[ \"$x\" -eq 28 ]] || return 1\n  [[ \"$x\" -eq 29 ]] || return 1\n  [[\
    \ \"$x\" -eq 30 ]] || return 1\n  [[ \"$x\" -eq 31 ]] || return 1\n  [[ \"$x\"\
    \ -eq 32 ]] || return 1\n  [[ \"$x\" -eq 33 ]] || return 1\n  [[ \"$x\" -eq 34\
    \ ]] || return 1\n\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal x=\"$1\"\n\
    \tlocal y=\"$2\"\n\tlocal z=\"$3\"\n\tlocal w=\"$4\"\n\tlocal xs=\"$5\"\n\tlocal\
    \ ys=\"$6\"\n\tlocal zs=\"$7\"\n\tlocal ws=\"$8\"\n\tlocal xe=\"$9\"\n\tlocal\
    \ ye=\"$10\"\n\tlocal ze=\"$11\"\n\tlocal we=\"$12\"\n\tlocal xne=\"$13\"\n\t\
    local yne=\"$14\"\n\tlocal zne=\"$15\"\n\tlocal wne=\"$16\"\n\tlocal xse=\"$17\"\
    \n\tlocal yse=\"$18\"\n\tlocal zse=\"$19\"\n\tlocal wse=\"$20\"\n\tlocal xsw=\"\
    $21\"\n\tlocal ysw=\"$22\"\n\tlocal zsw=\"$23\"\n\tlocal wsw=\"$24\"\n\tlocal\
    \ xnw=\"$25\"\n\tlocal ynw=\"$26\"\n\tlocal znw=\"$27\"\n\tlocal wnw=\"$28\"\n\
    \tlocal xne=\"$29\"\n\tlocal yne=\"$30\"\n\tlocal zne=\"$31\"\n\tlocal wne=\"\
    $32\"\n\tlocal xse=\"$33\"\n\tlocal yse=\"$34\"\n\tlocal zse=\"$35\"\n\tlocal\
    \ wse=\"$36\"\n\tlocal xsw=\"$37\"\n\tlocal ysw=\"$38\"\n\tlocal zsw=\"$39\"\n\
    \tlocal wsw=\"$40\"\n\tlocal xnw=\"$41\"\n\tlocal ynw=\"$42\"\n\tlocal znw=\"\
    $43\"\n\tlocal wnw=\"$44\"\n\tlocal xne=\"$45\"\n\tlocal yne=\"$46\"\n\tlocal\
    \ zne=\"$47\"\n\tlocal wne=\"$48\"\n\tlocal xse=\"$49\"\n\tlocal yse=\"$50\"\n\
    \tlocal zse=\"$51\"\n\tlocal wse=\"$52\"\n\tlocal xsw=\"$53\"\n\tlocal ysw=\"\
    $54\"\n\tlocal zsw=\"$55\"\n\tlocal wsw=\"$56\"\n\tlocal xnw=\"$57\"\n\tlocal\
    \ ynw=\"$58\"\n\tlocal znw=\"$59\"\n\tlocal wnw=\"$60\"\n\tlocal xne=\"$61\"\n\
    \tlocal yne=\"$62\"\n\tlocal zne=\"$63\"\n\tlocal wne=\"$64\"\n\tlocal xse=\"\
    $65\"\n\tlocal yse=\"$66\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   if [ $a -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041467
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal number=$1\n\
    \tif [[ $number -eq 0 ]]; then\n\t\treturn \"true\"\n\tfi\n\tlocal cubes=$((number**3))\n\
    \tif [[ $cubes -eq $number ]]; then\n\t\treturn \"true\"\n\tfi\n\treturn \"false\"\
    \n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpci269adf.sh: line 27: return: true: numeric argument required\n'''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ cubes=$(echo \"$n\" | grep -E '^[0-9]+$')\n  local cube=$(echo \"$n\" | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n  local cube1=$(echo\
    \ \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$')\n  local cube2=$(echo \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n  local cube3=$(echo \"$n\" | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n\
    \  local cube4=$(echo \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$')\n  local cube5=$(echo \"$n\" | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n  local cube6=$(echo\
    \ \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$')\n  local cube7=$(echo \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$')\n  local cube8=$(echo\
    \ \"$n\" | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$')\n  local cube9=$(echo \"$n\" | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$')\n  local cube10=$(echo \"$n\" | grep -E '^[0-9]+$' | grep\
    \ -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$' | grep -E '^[0-9]+$'\
    \ | grep -E '^[0-9]+$')\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  if\
    \ [ $a -eq 0 ]; then \n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077425
