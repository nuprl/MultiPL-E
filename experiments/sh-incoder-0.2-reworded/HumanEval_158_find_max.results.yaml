language: sh
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr \"\
    \ \" \"\\n\" | sort | uniq -c | sort -n | tail -1)\n        if [ \"$count\" -gt\
    \ \"$max\" ]; then\n            word=$word\n            max=$count\n        fi\n\
    \    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2kso_a1p.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 of: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 string: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 enam: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 game: integer expression expected

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        local count=0\n        for c in\
    \ $word; do\n            (( count++ ))\n        done\n        if (( count > max\
    \ )); then\n            max=count\n            echo \"$word\"\n        fi\n  \
    \  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_idx=0\n    local i\n    local word\n    local count\n    local\
    \ words_in_list\n    local words_in_list_idx\n    local words_in_list_idx2\n \
    \   local words_in_list_idx3\n    local words_in_list_idx4\n    local words_in_list_idx5\n\
    \    local words_in_list_idx6\n    local words_in_list_idx7\n    local words_in_list_idx8\n\
    \    local words_in_list_idx9\n    local words_in_list_idx10\n    local words_in_list_idx11\n\
    \    local words_in_list_idx12\n    local words_in_list_idx13\n    local words_in_list_idx14\n\
    \    local words_in_list_idx15\n    local words_in_list_idx16\n    local words_in_list_idx17\n\
    \    local words_in_list_idx18\n    local words_in_list_idx19\n    local words_in_list_idx20\n\
    \    local words_in_list_idx21\n    local words_in_list_idx22\n    local words_in_list_idx23\n\
    \    local words_in_list_idx24\n    local words_in_list_idx25\n    local words_in_list_idx26\n\
    \    local words_in_list_idx27\n    local words_in_list_idx28\n    local words_in_list_idx29\n\
    \    local words_in_list_idx30\n    local words_in_list_idx31\n    local words_in_list_idx32\n\
    \    local words_in_list_idx33\n    local words_in_list_idx34\n    local words_in_list_idx35\n\
    \    local words_in_list_idx36\n    local words_in_list_idx37\n    local words_in_list_idx38\n\
    \    local words_in_list_idx39\n    local words_in_list_idx40\n    local words_in_list_idx41\n\
    \    local words_in_list_idx42\n    local words_in_list_idx43\n    local words_in_list_idx44\n\
    \    local words_in_list_idx45\n    local words_in_list_idx46\n    local words_in_list_idx47\n\
    \    local words_in_list_idx48\n    local words_in_list_idx49\n    local words_in_list_idx50\n\
    \    local words_in_list_idx51\n    local words_in_list_idx52\n    local words_in_list_idx53\n\
    \    local words_in_list_idx54\n    local words_in_list_idx55\n    local words_in_list_idx56\n\
    \    local words_in_list_idx57\n    local words_in_list_idx58\n    local words_in_list_idx59\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( $1 )\n    local max=0\n    local max_word\n\
    \    local max_count\n    local i\n    for (( i=0; i<${#words[@]}; i++ )); do\n\
    \        local count=0\n        for (( j=0; j<${#words[@]}; j++ )); do\n     \
    \       if [[ ${words[$i]} == ${words[$j]}* ]]; then\n                (( count++\
    \ ))\n            fi\n        done\n        if (( count > max )); then\n     \
    \       max=count\n            max_word=${words[$i]}\n        fi\n    done\n \
    \   for (( i=0; i<${#words[@]}; i++ )); do\n        local count=0\n        for\
    \ (( j=0; j<${#words[@]}; j++ )); do\n            if [[ ${words[$i]} == ${words[$j]}*\
    \ ]]; then\n                (( count++ ))\n            fi\n        done\n    \
    \    if (( count < max )); then\n            max=count\n            max_word=${words[$i]}\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=$1\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  for word in ${list[@]}; do\n    count=0\n    for ((i=0;\
    \ i<${#word}; i++)); do\n      ((count++))\n      if ((count > max)); then\n \
    \       max=${count}\n        word=${word:$i:1}\n      fi\n    done\n  done\n\
    \  echo \"${word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnxu29741.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local wordcount\n    local wordcount2\n\
    \    local wordcount3\n    local wordcount4\n    local wordcount5\n    local wordcount6\n\
    \    local wordcount7\n    local wordcount8\n    local wordcount9\n    local wordcount10\n\
    \    local wordcount11\n    local wordcount12\n    local wordcount13\n    local\
    \ wordcount14\n    local wordcount15\n    local wordcount16\n    local wordcount17\n\
    \    local wordcount18\n    local wordcount19\n    local wordcount20\n    local\
    \ wordcount21\n    local wordcount22\n    local wordcount23\n    local wordcount24\n\
    \    local wordcount25\n    local wordcount26\n    local wordcount27\n    local\
    \ wordcount28\n    local wordcount29\n    local wordcount30\n    local wordcount31\n\
    \    local wordcount32\n    local wordcount33\n    local wordcount34\n    local\
    \ wordcount35\n    local wordcount36\n    local wordcount37\n    local wordcount38\n\
    \    local wordcount39\n    local wordcount40\n    local wordcount41\n    local\
    \ wordcount42\n    local wordcount43\n    local wordcount44\n    local wordcount45\n\
    \    local wordcount46\n    local wordcount47\n    local wordcount48\n    local\
    \ wordcount49\n    local wordcount50\n    local wordcount51\n    local wordcount52\n\
    \    local wordcount53\n    local wordcount54\n    local wordcount55\n    local\
    \ wordcount56\n    local wordcount57\n    local wordcount58\n    local wordcount59\n\
    \    local wordcount60\n    local wordcount61\n    local wordcount62\n    local\
    \ wordcount63\n    local wordcount64\n    local wordcount65\n    local wordcount66\n\
    \    local wordcount67\n    local wordcount68\n    local wordcount69\n    local\
    \ wordcount70\n    local wordcount71\n    local wordcount72\n    local wordcount73\n\
    \    local wordcount74\n    local wordcount75\n    local wordcount76\n    local\
    \ wordcount77\n    local wordcount78\n    local wordcount79\n    local wordcount80\n\
    \    local wordcount81\n\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword=\"\"\n    local maxcount=0\n    for word in \"${words[@]}\"; do\n  \
    \      local count=\"${#word}\"\n        if [ \"$count\" -gt \"$maxcount\" ];\
    \ then\n            maxcount=$count\n            maxword=$word\n        fi\n \
    \   done\n    echo \"$maxword\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for ((i=0; i<${#word}; i++)); do\n            ((count++))\n            if\
    \ [[ ${word:$i:1} == \"$word\" ]] && [[ ${count:-0} -gt $max ]]; then\n      \
    \          max=${count:-0}\n            fi\n        done\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( $1 )\n    local max=0\n    local max_word=\"\
    \"\n    local max_count=0\n    local max_count2=0\n    local max_count3=0\n  \
    \  local max_count4=0\n    local max_count5=0\n    local max_count6=0\n    local\
    \ max_count7=0\n    local max_count8=0\n    local max_count9=0\n    local max_count10=0\n\
    \    local max_count11=0\n    local max_count12=0\n    local max_count13=0\n \
    \   local max_count14=0\n    local max_count15=0\n    local max_count16=0\n  \
    \  local max_count17=0\n    local max_count18=0\n    local max_count19=0\n   \
    \ local max_count20=0\n    local max_count21=0\n    local max_count22=0\n    local\
    \ max_count23=0\n    local max_count24=0\n    local max_count25=0\n    local max_count26=0\n\
    \    local max_count27=0\n    local max_count28=0\n    local max_count29=0\n \
    \   local max_count30=0\n    local max_count31=0\n    local max_count32=0\n  \
    \  local max_count33=0\n    local max_count34=0\n    local max_count35=0\n   \
    \ local max_count36=0\n    local max_count37=0\n    local max_count38=0\n    local\
    \ max_count39=0\n    local max_count40=0\n    local max_count41=0\n    local max_count42=0\n\
    \    local max_count43=0\n    local max_count44=0\n    local max_count45=0\n \
    \   local max_count46=0\n    local max_count47=0\n    local max_count48=0\n  \
    \  local max_count49=0\n    local max_count50=0\n    local max_count51=0\n   \
    \ local max_count52=0\n    local max_count53=0\n    local max_count54=0\n    local\
    \ max_count55=0\n    local max_count56=0\n    local max_count57=0\n    local max_count58=0\n\
    \    local max_count59=0\n    local max_count60=0\n    local max_count61=0\n \
    \   local max_count62=0\n    local max_count63=0\n    local max_count64=0\n  \
    \  local max_count65=0\n    local max_count66=0\n    local max_count67=0\n   \
    \ local max_count68=0\n    local max_count69=0\n    local max_count70=0\n    local\
    \ max_\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local i\n    for (( i=0; i<${#words[@]}; i++ )); do\n        ((\
    \ ${#words[$i]} > max )) && max=${#words[$i]}\n    done\n    for (( i=0; i<${#words[@]};\
    \ i++ )); do\n        (( ${#words[$i]} > max )) && word=${words[$i]}\n    done\n\
    \    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=$(echo\
    \ $word | tr \" \" \"\\n\" | sort | uniq -c | sort -n | tail -1)\n        if [\
    \ \"$count\" -gt \"$max_count\" ]; then\n            max_count=$count\n      \
    \      max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd5_t81k_.sh: line 22: [:       1 name: integer expression expected

    /tmp/tmpd5_t81k_.sh: line 22: [:       1 of: integer expression expected

    /tmp/tmpd5_t81k_.sh: line 22: [:       1 string: integer expression expected

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words max\n    words=( $1 )\n    max=\"${#words[@]}\"\
    \n    for (( i=0; i<max; i++ )); do\n        local j=0\n        for (( j=0; j<i;\
    \ j++ )); do\n            local k=0\n            for (( k=0; k<j; k++ )); do\n\
    \                local c=${words[k]}\n                words[k]=\"${words[k]#*$c}\"\
    \n            done\n        done\n        words=( \"${words[@]}\" )\n    done\n\
    \    echo \"${words[0]}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=$1\n  local -n max=$2\n  local -n count=0\n\
    \  local -n maxcount=0\n  local -n maxword=\"\"\n  local -n word=\"\"\n  local\
    \ -n maxwordlen=0\n  local -n maxwordlencount=0\n  local -n maxwordlenword=\"\"\
    \n  local -n maxwordlenwordcount=0\n  local -n maxwordlenwordlen=\"\"\n  local\
    \ -n maxwordlenwordlencount=0\n  local -n maxwordlenwordlenword=\"\"\n  local\
    \ -n maxwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlen=\"\"\n\
    \  local -n maxwordlenwordlenwordlencount=0\n  local -n maxwordlenwordlenwordlenword=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlen=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlenword=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlenwordlen=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlenwordlenword=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlenwordlenword=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlenwordlenwordlen=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlenwordlenwordlen=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlenwordlenwordlenword=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordlenwordlenwordcount=0\n  local -n maxwordlenwordlenwordlenwordlenwordlenwordlenword=\"\
    \"\n  local -n maxwordlenwordlenwordlenwordlenwordlenwordcount=0\n  local -n \n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpae02jhvp.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmpae02jhvp.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 31: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 38: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 40: local: `0'': invalid variable name for name reference

    /tmp/tmpae02jhvp.sh: line 41: local: `'': not a valid identifier

    /tmp/tmpae02jhvp.sh: line 42: local: `0'':'
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local max_index2=0\n    local max_index3=0\n  \
    \  local max_index4=0\n    local max_index5=0\n    local max_index6=0\n    local\
    \ max_index7=0\n    local max_index8=0\n    local max_index9=0\n    local max_index10=0\n\
    \    local max_index11=0\n    local max_index12=0\n    local max_index13=0\n \
    \   local max_index14=0\n    local max_index15=0\n    local max_index16=0\n  \
    \  local max_index17=0\n    local max_index18=0\n    local max_index19=0\n   \
    \ local max_index20=0\n    local max_index21=0\n    local max_index22=0\n    local\
    \ max_index23=0\n    local max_index24=0\n    local max_index25=0\n    local max_index26=0\n\
    \    local max_index27=0\n    local max_index28=0\n    local max_index29=0\n \
    \   local max_index30=0\n    local max_index31=0\n    local max_index32=0\n  \
    \  local max_index33=0\n    local max_index34=0\n    local max_index35=0\n   \
    \ local max_index36=0\n    local max_index37=0\n    local max_index38=0\n    local\
    \ max_index39=0\n    local max_index40=0\n    local max_index41=0\n    local max_index42=0\n\
    \    local max_index43=0\n    local max_index44=0\n    local max_index45=0\n \
    \   local max_index46=0\n    local max_index47=0\n    local max_index48=0\n  \
    \  local max_index49=0\n    local max_index50=0\n    local max_index51=0\n   \
    \ local max_index52=0\n    local max_index53=0\n    local max_index54=0\n    local\
    \ max_index55=0\n    local max_index56=0\n    local max_index57=0\n    local max_index58=0\n\
    \    local max_index59=0\n    local max_index60=0\n    local max_index61=0\n \
    \   local max_index62=0\n    local max_index63=0\n    local max_index64=0\n  \
    \  local max_index65=0\n    local max_index66=0\n    local max_index67=0\n   \
    \ local max_index68=0\n    local max_index69=0\n    local max_index70=0\n    local\
    \ max_index71\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local word\n    local count\n    local\
    \ max\n    local i\n    local j\n    local word\n    local count\n    local max\n\
    \    local i\n    local j\n    local word\n    local count\n    local max\n  \
    \  local i\n    local j\n    local word\n    local count\n    local max\n    local\
    \ i\n    local j\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local word\n    local count\n    local max\n    local i\n  \
    \  local j\n    local word\n    local count\n    local max\n    local i\n    local\
    \ j\n    local word\n    local count\n    local max\n    local i\n    local j\n\
    \    local word\n    local count\n    local max\n    local i\n    local j\n  \
    \  local word\n    local count\n    local max\n    local i\n    local j\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local word\n\
    \    local count\n    local max\n    local i\n    local j\n    local word\n  \
    \  local count\n    local max\n    local i\n    local j\n    local word\n    local\
    \ count\n    local max\n    local i\n    local j\n    local word\n    local count\n\
    \    local max\n    local i\n    local j\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local word\n    local count\n    local\
    \ max\n    local i\n    local j\n    local word\n    local count\n    local max\n\
    \    local i\n    local j\n    local word\n    local count\n    local max\n  \
    \  local i\n    local j\n    local word\n    local count\n    local max\n    local\
    \ i\n    local j\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local word\n    local count\n    local max\n    local i\n  \
    \  local j\n    local word\n    local count\n    local max\n    local i\n    local\
    \ j\n    local word\n    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword=\"\"\n    local maxcount=0\n    local maxcountword=\"\"\n    local maxcountword2=\"\
    \"\n    local maxcountword2=\"\"\n    local maxcountword3=\"\"\n    local maxcountword4=\"\
    \"\n    local maxcountword5=\"\"\n    local maxcountword6=\"\"\n    local maxcountword7=\"\
    \"\n    local maxcountword8=\"\"\n    local maxcountword9=\"\"\n    local maxcountword10=\"\
    \"\n    local maxcountword11=\"\"\n    local maxcountword12=\"\"\n    local maxcountword13=\"\
    \"\n    local maxcountword14=\"\"\n    local maxcountword15=\"\"\n    local maxcountword16=\"\
    \"\n    local maxcountword17=\"\"\n    local maxcountword18=\"\"\n    local maxcountword19=\"\
    \"\n    local maxcountword20=\"\"\n    local maxcountword21=\"\"\n    local maxcountword22=\"\
    \"\n    local maxcountword23=\"\"\n    local maxcountword24=\"\"\n    local maxcountword25=\"\
    \"\n    local maxcountword26=\"\"\n    local maxcountword27=\"\"\n    local maxcountword28=\"\
    \"\n    local maxcountword29=\"\"\n    local maxcountword30=\"\"\n    local maxcountword31=\"\
    \"\n    local maxcountword32=\"\"\n    local maxcountword33=\"\"\n    local maxcountword34=\"\
    \"\n    local maxcountword35=\"\"\n    local maxcountword36=\"\"\n    local maxcountword37=\"\
    \"\n    local maxcountword38=\"\"\n    local maxcountword39=\"\"\n    local maxcountword40=\"\
    \"\n    local maxcountword41=\"\"\n    local maxcountword42=\"\"\n    local maxcountword43=\"\
    \"\n    local maxcountword44=\"\"\n    local maxcountword45=\"\"\n    local maxcountword46=\"\
    \"\n    local maxcountword47=\"\"\n    local maxcountword48=\"\"\n    local maxcountword49=\"\
    \"\n    local maxcountword50=\"\"\n    local maxcountword51=\"\"\n    local maxcountword52=\"\
    \"\n    local maxcountword53=\"\"\n    local maxcountword54=\"\"\n    local maxcountword55=\"\
    \"\n    local maxcountword56=\"\"\n    local maxcountword57=\"\"\n    local maxcountword58=\"\
    \"\n    local maxcountword59=\"\"\n    local maxcountword60=\"\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words count\n  words=( $1 )\n  count=0\n  local\
    \ max\n  max=${words[0]}\n  for word in \"${words[@]}\"; do\n    ((count++))\n\
    \    if [[ ${count} -gt ${max} ]]; then\n      max=${word}\n    fi\n  done\n \
    \ echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ words=$@\n    for word in $words; do\n        local count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max_count))\
    \ {\n            max_count=$count\n            max_word=$word\n        }\n   \
    \ done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9q283ld5.sh: line 23: syntax error near unexpected token `{''

    /tmp/tmp9q283ld5.sh: line 23: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n  local tmp\n  local tmp2\n  local\
    \ tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n\
    \  local tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local\
    \ tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n\
    \  local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n \
    \ local tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local\
    \ tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n\
    \  local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n \
    \ local tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local\
    \ tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n\
    \  local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n \
    \ local tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local\
    \ tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n\
    \  local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n \
    \ local tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local\
    \ tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n\
    \  local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n \
    \ local tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local\
    \ tmp94\n  local tmp95\n  local tmp\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        (( ${#word} > max )) && max=${#word}\n\
    \    done\n    local i\n    for (( i=0; i<${#words[@]}; i++ )); do\n        ((\
    \ ${#words[$i]} > max )) && max=${#words[$i]}\n    done\n    local j\n    for\
    \ (( j=0; j<${#words[@]}; j++ )); do\n        (( ${#words[$j]} > max )) && max=${#words[$j]}\n\
    \    done\n    local word\n    for (( i=0; i<${#words[@]}; i++ )); do\n      \
    \  (( ${#words[$i]} > max )) && word=${words[$i]}\n    done\n    echo \"$word\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  local j\n  local tmp\n\n  for word in $list; do\n    count=0\n\
    \    for ((i=0; i<${#word}; i++)); do\n      ((count+=${#word:$i:1}))\n    done\n\
    \    if [[ $count -gt $max ]]; then\n      max=$count\n      tmp=$word\n    fi\n\
    \  done\n  echo $tmp\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo4hrzl4t.sh: line 26: count+=${#word:$i:1}: bad substitution

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_chars=0\n    local max_word=\"\"\n    local\
    \ words=$@\n    for word in $words; do\n        local count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max_chars));\
    \ then\n            max_chars=count\n            max_word=$word\n        fi\n\
    \    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    local word\n    local count\n  \
    \  local max\n    local i\n    local j\n    local k\n    local len\n    local\
    \ word\n    local count\n    local max\n    local i\n    local j\n    local k\n\
    \    local len\n    local word\n    local count\n    local max\n    local i\n\
    \    local j\n    local k\n    local len\n    \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword=\"\"\n    local maxcount=0\n    for word in \"${words[@]}\"; do\n  \
    \      local count=\"${#word}\"\n        if [ \"$count\" -gt \"$maxcount\" ];\
    \ then\n            maxlen=$count\n            maxword=$word\n        fi\n   \
    \     maxcount=$count\n    done\n    echo \"$maxword\"\n}\n\ncandidate() {\n \
    \   find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr \"\
    \ \" \"\\n\" | sort | uniq -c | sort -n | tail -1)\n        if [ \"$count\" -gt\
    \ \"$max\" ]; then\n            word=$word\n            max=$count\n        fi\n\
    \    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2kso_a1p.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 of: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 string: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 enam: integer expression expected

    /tmp/tmp2kso_a1p.sh: line 21: [:       1 game: integer expression expected

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local count=0\n    local max=0\n\
    \    local word\n    for word in $string; do\n        count=$((count+1))\n   \
    \     if [ \"$count\" -gt \"$max\" ]; then\n            max=count\n          \
    \  echo \"$word\"\n        fi\n    done\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpicx_crze.sh: line 21: [: count: integer expression expected

    /tmp/tmpicx_crze.sh: line 21: [: count: integer expression expected

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local count=0\n  local word\n  for word in $words; do\n    count=0\n   \
    \ for char in $word; do\n      ((count++))\n    done\n    if [ \"$count\" -gt\
    \ \"$max_count\" ]; then\n      max_count=$count\n      max_word=$word\n    fi\n\
    \  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local word\n    for word in $words; do\n        local count=0\n      \
    \  for char in $word; do\n            ((count++))\n        done\n        if ((count\
    \ > max_count)); then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max\n  local count\n  local\
    \ word\n  local counts\n  local i\n  local j\n  local len\n\n  max=\"$(echo \"\
    $list\" | sort -u | wc -l)\"\n  if [ \"$max\" -eq 1 ]; then\n    echo \"$list\"\
    \n    return\n  fi\n\n  counts=()\n  for word in $list; do\n    counts[$word]=\"\
    $(echo \"$counts[$word]\" | awk '{ print $1 } { print $0 }')\"\n  done\n\n  counts=$(echo\
    \ \"$counts\" | sort -k 2 -n | awk '{ print $1 }')\n  counts=$(echo \"$counts\"\
    \ | sort -k 1 -n | awk '{ print $1 }')\n\n  for ((i=1; i<=$max; i++)); do\n  \
    \  len=\"${#counts[@]}\"\n    if [ \"$len\" -eq 0 ]; then\n      break\n    fi\n\
    \    for ((j=0; j<$len; j++)); do\n      if [ \"$counts[$j]\" -gt \"$counts[$((j-1))]\"\
    \ ]; then\n        word=\"${counts[$j]}\"\n        counts[$j]=\"$counts[$((j-1))]\"\
    \n        counts[$((j-1))]=\"$word\"\n      fi\n    done\n  done\n\n  echo \"\
    ${counts[@]}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    local count\n    local i\n    for word in $list; do\n        count=0\n  \
    \      for ((i=0; i<${#word}; i++)); do\n            ((count+=${#word:$i:1}))\n\
    \        done\n        if ((count > max)); then\n            max=count\n     \
    \       echo \"$word\"\n        fi\n    done\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2a6x4bcx.sh: line 23: count+=${#word:$i:1}: bad substitution

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local max_word=\n\
    \    local max_word_index=\n    local max_word_length=\n    local max_word_chars=\n\
    \    local max_word_char_index=\n    local max_word_char_length=\n    local max_word_char_count=\n\
    \    local max_word_char_index_count=\n    local max_word_char_count_index=\n\
    \    local max_word_char_count_length=\n    local max_word_char_count_count=\n\
    \    local max_word_char_count_index_count=\n    local max_word_char_count_count_index=\n\
    \    local max_word_char_count_count_length=\n    local max_word_char_count_count_count=\n\
    \    local max_word_char_count_count_index_count=\n    local max_word_char_count_count_count_index=\n\
    \    local max_word_char_count_count_count_length=\n    local max_word_char_count_count_count_count=\n\
    \    local max_word_char_count_count_count_index_count=\n    local max_word_char_count_count_count_count_index=\n\
    \    local max_word_char_count_count_count_count_length=\n    local max_word_char_count_count_count_count_count=\n\
    \    local max_word_char_count_count_count_count_index_count=\n    local max_word_char_count_count_count_count_count_length=\n\
    \    local max_word_char_count_count_count_count_count_count=\n    local max_word_char_count_count_count_count_count_index_count=\n\
    \    local max_word_char_count_count_count_count_count_count_length=\n    local\
    \ max_word_char_count_count_count_count_count_count_count=\n    local max_word_char_count_count_count_count_count_count_index_count=\n\
    \    local max_word_char_count_count_count_count_count_count_count_length=\n \
    \   local max_word_char_count_count_count_count_count_count_count_count=\n   \
    \ local max_word_char_count_count_count_count_count_count_count_index_count=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_length=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_count_count=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_index_count=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_count_length=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_count=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_index_count=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_count_length=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_count_count=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_count_index_count=\n\
    \    local max_word_char_count_count_count_count_count_count_count_count_count_count_length=\n\
    \    local max_word_char_count_count_\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in $words; do\n    word=${i%% *}\n    count=$(echo $i | tr\
    \ \" \" \"\\n\" | sort | uniq -c | sort -n | tail -1)\n    if [[ $count -gt $max\
    \ ]]; then\n      max=$count\n      word=$word\n    fi\n  done\n  echo $word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv3ys7xts.sh: line 23: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmpv3ys7xts.sh: line 23: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmpv3ys7xts.sh: line 23: [[: 1 string: syntax error in expression (error
    token is "string")

    /tmp/tmpv3ys7xts.sh: line 23: [[: 1 name: syntax error in expression (error token
    is "name")

    /tmp/tmpv3ys7xts.sh: line 23: [[: 1 enam: syntax error in expression (error token
    is "enam")

    /tmp/tmpv3ys7xts.sh: line 23: [[: 1 game: syntax error in expression (error token
    is "game")

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max_count=0\n  local max_string=\"\
    \"\n  local count=0\n  local string=\"\"\n  while read -r string; do\n    count=0\n\
    \    for word in $list; do\n      (( count++ ))\n      if [[ \"$string\" == \"\
    $word\" ]]; then\n        (( count-- ))\n      fi\n    done\n    if [[ \"$count\"\
    \ -eq 0 ]]; then\n      (( max_count++ ))\n      if [[ \"$max_count\" -gt \"$max_count\"\
    \ ]]; then\n        max_count=$max_count\n        max_string=\"$string\"\n   \
    \   fi\n    fi\n  done < <(echo \"$list\" | tr ' ' '\\n' | sort -u)\n  echo \"\
    $max_string\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for i in $words; do\n    word=${i%% *}\n    count=$(echo $i | tr\
    \ \" \" \"\\n\" | sort | uniq -c | sort -n | tail -1)\n    if [ \"$count\" -gt\
    \ \"$max\" ]; then\n      max=$count\n      word=$word\n    fi\n  done\n  echo\
    \ $word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpna0tw3ia.sh: line 23: [:       1 name: integer expression expected

    /tmp/tmpna0tw3ia.sh: line 23: [:       1 of: integer expression expected

    /tmp/tmpna0tw3ia.sh: line 23: [:       1 string: integer expression expected

    /tmp/tmpna0tw3ia.sh: line 23: [:       1 name: integer expression expected

    /tmp/tmpna0tw3ia.sh: line 23: [:       1 enam: integer expression expected

    /tmp/tmpna0tw3ia.sh: line 23: [:       1 game: integer expression expected

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | wc -w)\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n        fi\n  \
    \  done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local max_count=0\n    local max_count1=0\n    local max_count2=0\n  \
    \  local max_count3=0\n    local max_count4=0\n    local max_count5=0\n    local\
    \ max_count6=0\n    local max_count7=0\n    local max_count8=0\n    local max_count9=0\n\
    \    local max_count10=0\n    local max_count11=0\n    local max_count12=0\n \
    \   local max_count13=0\n    local max_count14=0\n    local max_count15=0\n  \
    \  local max_count16=0\n    local max_count17=0\n    local max_count18=0\n   \
    \ local max_count19=0\n    local max_count20=0\n    local max_count21=0\n    local\
    \ max_count22=0\n    local max_count23=0\n    local max_count24=0\n    local max_count25=0\n\
    \    local max_count26=0\n    local max_count27=0\n    local max_count28=0\n \
    \   local max_count29=0\n    local max_count30=0\n    local max_count31=0\n  \
    \  local max_count32=0\n    local max_count33=0\n    local max_count34=0\n   \
    \ local max_count35=0\n    local max_count36=0\n    local max_count37=0\n    local\
    \ max_count38=0\n    local max_count39=0\n    local max_count40=0\n    local max_count41=0\n\
    \    local max_count42=0\n    local max_count43=0\n    local max_count44=0\n \
    \   local max_count45=0\n    local max_count46=0\n    local max_count47=0\n  \
    \  local max_count48=0\n    local max_count49=0\n    local max_count50=0\n   \
    \ local max_count51=0\n    local max_count52=0\n    local max_count53=0\n    local\
    \ max_count54=0\n    local max_count55=0\n    local max_count56=0\n    local max_count57=0\n\
    \    local max_count58=0\n    local max_count59=0\n    local max_count60=0\n \
    \   local max_count61=0\n    local max_count62=0\n    local max_count63=0\n  \
    \  local max_count64=0\n    local max_count65=0\n    local max_count66=0\n   \
    \ local max_count67=0\n    local max_count68=0\n    local max_count69=0\n    local\
    \ max_count70=0\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_word_len=0\n    local max_word_count=0\n    local max_word_index=0\n\
    \    local i\n    local word\n    local word_count\n    local word_len\n    local\
    \ word_index\n    local j\n    local j_index\n    local j_index2\n    local j_index3\n\
    \    local j_index4\n    local j_index5\n    local j_index6\n    local j_index7\n\
    \    local j_index8\n    local j_index9\n    local j_index10\n    local j_index11\n\
    \    local j_index12\n    local j_index13\n    local j_index14\n    local j_index15\n\
    \    local j_index16\n    local j_index17\n    local j_index18\n    local j_index19\n\
    \    local j_index20\n    local j_index21\n    local j_index22\n    local j_index23\n\
    \    local j_index24\n    local j_index25\n    local j_index26\n    local j_index27\n\
    \    local j_index28\n    local j_index29\n    local j_index30\n    local j_index31\n\
    \    local j_index32\n    local j_index33\n    local j_index34\n    local j_index35\n\
    \    local j_index36\n    local j_index37\n    local j_index38\n    local j_index39\n\
    \    local j_index40\n    local j_index41\n    local j_index42\n    local j_index43\n\
    \    local j_index44\n    local j_index45\n    local j_index46\n    local j_index47\n\
    \    local j_index48\n    local j_index49\n    local j_index50\n    local j_index51\n\
    \    local j_index52\n    local j_index53\n    local j_index54\n    local j_index55\n\
    \    local j_index56\n    local j_index57\n    local j_index58\n    local j_index59\n\
    \    local j_index60\n    local j_index61\n    local j_index62\n    local j_index63\n\
    \    local j_index64\n    local j_index65\n    local j_index66\n    local j_index67\n\
    \    local j_index68\n    local j_index69\n    local j_index70\n    local j_index71\n\
    \    local j_index72\n    local j_index73\n    local j_index74\n    local j\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$1\" )\n    local max=0\n    local max_word\n\
    \    local count\n    local i\n    local j\n    for ((i=0; i<${#words[@]}; i++));\
    \ do\n        count=$(echo \"${words[$i]}\" | tr ' ' '\\n' | sort | uniq -c |\
    \ sort -nr | head -n 1)\n        if [[ ${count} == 0 ]]; then\n            words[$i]=\"\
    \"\n            continue\n        fi\n        if [[ ${count} -gt $max ]]; then\n\
    \            max=${count}\n            max_word=${words[$i]}\n        fi\n   \
    \ done\n    echo \"${max_word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7i5yuure.sh: line 27: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr \"\
    \ \" \"\\n\" | sort | uniq -c | sort -n | tail -1)\n        if [ $count -gt $max\
    \ ]; then\n            max=$(echo $count)\n        fi\n    done\n    echo \"$word\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkyqnzn0s.sh: line 21: [: too many arguments

    /tmp/tmpkyqnzn0s.sh: line 21: [: too many arguments

    /tmp/tmpkyqnzn0s.sh: line 21: [: too many arguments

    /tmp/tmpkyqnzn0s.sh: line 21: [: too many arguments

    /tmp/tmpkyqnzn0s.sh: line 21: [: too many arguments

    /tmp/tmpkyqnzn0s.sh: line 21: [: too many arguments

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local count=0\n  local word\n  for word in $words; do\n    count=0\n   \
    \ for char in $word; do\n      ((count++))\n    done\n    if [ \"$count\" -gt\
    \ \"$max_count\" ]; then\n      max_count=$count\n      max_word=$word\n    fi\n\
    \  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | wc -c)\n\
    \        if [ $count -gt $max ]; then\n            word=$word\n            max=$count\n\
    \        fi\n    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$@\" )\n  local maxlen=0\n  local maxword=\"\
    \"\n  local maxcount=0\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n\
    \  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local maxcountword=\"\"\n  local maxcountword=\"\
    \"\n  local maxcountword=\"\"\n  local \n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for c in\
    \ $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for ((i=0; i<${#word}; i++)); do\n            ((count++))\n            if\
    \ [[ ${word:$i:1} == ${word:$i:1} ]]; then\n                break\n          \
    \  fi\n        done\n        if (( count > max )); then\n            max=count\n\
    \            word=$word\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=$(echo\
    \ $word | tr \" \" \"\\n\" | sort | uniq -c | sort -n | tail -1)\n        if [\
    \ \"$count\" -gt \"$max\" ]; then\n            max=$(echo $count | cut -d\" \"\
    \ -f1)\n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp383yj8hf.sh: line 22: [:       1 name: integer expression expected

    /tmp/tmp383yj8hf.sh: line 22: [:       1 of: integer expression expected

    /tmp/tmp383yj8hf.sh: line 22: [:       1 string: integer expression expected

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_index=0\n  local count=0\n  local word\n  local index\n  local\
    \ i\n  local j\n  local word\n  local count\n  local count\n  local count\n  local\
    \ count\n  local count\n  local count\n  local count\n  local count\n  local count\n\
    \  local count\n  local count\n  local count\n  local count\n  local count\n \
    \ local count\n  local count\n  local count\n  local count\n  local count\n  local\
    \ count\n  local count\n  local count\n  local count\n  local count\n  local count\n\
    \  local count\n  local count\n  local count\n  local count\n  local count\n \
    \ local count\n  local count\n  local count\n  local count\n  local count\n  local\
    \ count\n  local count\n  local count\n  local count\n  local count\n  local count\n\
    \  local count\n  local count\n  local count\n  local count\n  local count\n \
    \ local count\n  local count\n  local count\n  local count\n  local count\n  local\
    \ count\n  local count\n  local count\n  local count\n  local count\n  local count\n\
    \  local count\n  local count\n  local count\n  local count\n  local count\n \
    \ local count\n  local count\n  local count\n  local count\n  local count\n  local\
    \ count\n  local count\n  local count\n  local count\n  local count\n  local count\n\
    \  local count\n  local count\n  local count\n  local count\n  local count\n \
    \ local count\n  local count\n  local count\n  local count\n  local count\n  local\
    \ count\n  local count\n  local count\n  local count\n  local count\n  local count\n\
    \  local count\n  local count\n  local count\n  local count\n  local count\n \
    \ local count\n  local count\n  local count\n  local count\n  local count\n  local\
    \ count\n  local count\n  local count\n  local count\n  local count\n  local count\n\
    \  local count\n  local count\n  local count\n  local count\n  local count\n \
    \ local count\n  local count\n  local count\n  local count\n  local count\n  local\
    \ count\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n  local maxlen\n  local maxword\n\
    \  local wordlen\n  local wordcount\n  local word\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxword\n  local maxcount\n  local maxwordlen\n\
    \  local \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=$1\n  local -n max=0\n  local -n word\n\
    \  local -n count\n  local -n i\n  local -n j\n  local -n len\n  local -n maxlen\n\
    \  local -n maxword\n  local -n maxcount\n  local -n maxi\n  local -n maxj\n \
    \ local -n maxlen\n  local -n maxword\n  local -n maxcount\n  local -n maxi\n\
    \  local -n maxj\n  local -n maxlen\n  local -n maxword\n  local -n maxcount\n\
    \  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local -n maxword\n  local\
    \ -n maxcount\n  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local -n\
    \ maxword\n  local -n maxcount\n  local -n maxi\n  local -n maxj\n  local -n maxlen\n\
    \  local -n maxword\n  local -n maxcount\n  local -n maxi\n  local -n maxj\n \
    \ local -n maxlen\n  local -n maxword\n  local -n maxcount\n  local -n maxi\n\
    \  local -n maxj\n  local -n maxlen\n  local -n maxword\n  local -n maxcount\n\
    \  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local -n maxword\n  local\
    \ -n maxcount\n  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local -n\
    \ maxword\n  local -n maxcount\n  local -n maxi\n  local -n maxj\n  local -n maxlen\n\
    \  local -n maxword\n  local -n maxcount\n  local -n maxi\n  local -n maxj\n \
    \ local -n maxlen\n  local -n maxword\n  local -n maxcount\n  local -n maxi\n\
    \  local -n maxj\n  local -n maxlen\n  local -n maxword\n  local -n maxcount\n\
    \  local -n maxi\n  local -n maxj\n  local -n maxlen\n  local -n maxword\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz_55akus.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmpz_55akus.sh: line 16: local: `0'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for ((i=0; i<${#word}; i++)); do\n            ((count++))\n            if\
    \ [[ ${word:$i:1} == \"$word\" ]]; then\n                break\n            fi\n\
    \        done\n        if ((count > max)) ; then\n            max=count\n    \
    \        echo $word\n        fi\n    done\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n list=$1\n    local -n max=$2\n    local -n\
    \ count\n    local -n word\n    local -n counts\n    local -n maxcount\n    local\
    \ -n maxword\n    local -n maxcounts\n    local -n maxwordcount\n    local -n\
    \ maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n    local\
    \ -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n \
    \   local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcounts\n    local -n maxwordcounts\n\
    \    local -n maxwordcounts\n    local -n maxwordcount\n}\n\ncandidate() {\n \
    \   find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprch_cby0.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmprch_cby0.sh: line 16: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n arr=$1\n    local -i max=0\n    local -i max_idx=0\n\
    \    local -i max_char=0\n    local -i max_char_pos=0\n    local -i max_char_len=0\n\
    \    local -i max_char_len_pos=0\n    local -i max_char_len_len=0\n    local -i\
    \ max_char_len_len_pos=0\n    local -i max_char_len_len_len=0\n    local -i max_char_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len=0\n    local -i max_char_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len=0\n    local -i max_char_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len_len_len_len=0\n    local -i max_char_len_len_len_len_len_len_len_len_pos=0\n\
    \    local -i max_char_len_len_len_len_len_len_len_len_len_len=0\n    local -i\
    \ max_char_len_len_len_len_len_len_len_len_len_pos=0\n    local -i max_char_len_len_len_len_len_len_len_len_len_len=0\n\
    \    local -i max_char_len_len_len_len_len_len_len_len_len_len_pos=0\n    local\
    \ -i max_char_len_len_len_len_len_len_len_len_len_len_len_len=0\n\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi9abj28n.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local len\n    local\
    \ maxlen\n    local wordcount\n    local word\n    local maxcount\n    local maxword\n\
    \    local maxlen\n    local maxcount\n    local maxword\n    local maxlen\n \
    \   local maxcount\n    local maxword\n    local maxlen\n    local maxcount\n\
    \    local maxword\n    local maxlen\n    local maxcount\n    local maxword\n\
    \    local maxlen\n    local maxcount\n    local maxword\n    local maxlen\n \
    \   local maxcount\n    local maxword\n    local maxlen\n    local maxcount\n\
    \    local maxword\n    local maxlen\n    local maxcount\n    local maxword\n\
    \    local maxlen\n    local maxcount\n    local maxword\n    local maxlen\n \
    \   local maxcount\n    local maxword\n    local maxlen\n    local maxcount\n\
    \    local maxword\n    local maxlen\n    local maxcount\n    local maxword\n\
    \    local maxlen\n    local maxcount\n    local maxword\n    local maxlen\n \
    \   local maxcount\n    local maxword\n    local maxlen\n    local maxcount\n\
    \    local maxword\n    local maxlen\n    local maxcount\n    local maxword\n\
    \    local maxlen\n    local maxcount\n    local maxword\n    local maxlen\n \
    \   local maxcount\n    local maxword\n    local maxlen\n    local maxcount\n\
    \    local maxword\n    local maxlen\n    local maxcount\n    local maxword\n\
    \    local maxlen\n    local maxcount\n    local maxword\n    local maxlen\n \
    \   local maxcount\n    local maxword\n    local maxlen\n    local maxcount\n\
    \    local maxword\n    local maxlen\n    local maxcount\n    local maxword\n\
    \    local maxlen\n    local maxcount\n    local maxword\n    local maxlen\n \
    \   local maxcount\n    local maxword\n    local maxlen\n    local maxcount\n\
    \    local maxword\n    local maxlen\n    local maxcount\n    local maxword\n\
    \    local maxlen\n    local maxcount\n    local maxword\n    local maxlen\n \
    \   local maxcount\n    local maxword\n    local max\n}\n\ncandidate() {\n   \
    \ find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  for word in $words; do\n    count=0\n    for ((i=0; i<${#word};\
    \ i++)); do\n      ((count+=${#word:$i:1}))\n    done\n    if [[ $count -gt $max\
    \ ]]; then\n      max=$count\n      word=$word\n    fi\n  done\n  echo $word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmue6vg9z.sh: line 23: count+=${#word:$i:1}: bad substitution

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local len\n    local\
    \ maxlen\n    local maxword\n    local wordcount\n    local wordcount2\n    local\
    \ wordcount3\n    local wordcount4\n    local wordcount5\n    local wordcount6\n\
    \    local wordcount7\n    local wordcount8\n    local wordcount9\n    local wordcount10\n\
    \    local wordcount11\n    local wordcount12\n    local wordcount13\n    local\
    \ wordcount14\n    local wordcount15\n    local wordcount16\n    local wordcount17\n\
    \    local wordcount18\n    local wordcount19\n    local wordcount20\n    local\
    \ wordcount21\n    local wordcount22\n    local wordcount23\n    local wordcount24\n\
    \    local wordcount25\n    local wordcount26\n    local wordcount27\n    local\
    \ wordcount28\n    local wordcount29\n    local wordcount30\n    local wordcount31\n\
    \    local wordcount32\n    local wordcount33\n    local wordcount34\n    local\
    \ wordcount35\n    local wordcount36\n    local wordcount37\n    local wordcount38\n\
    \    local wordcount39\n    local wordcount40\n    local wordcount41\n    local\
    \ wordcount42\n    local wordcount43\n    local wordcount44\n    local wordcount45\n\
    \    local wordcount46\n    local wordcount47\n    local wordcount48\n    local\
    \ wordcount49\n    local wordcount50\n    local wordcount51\n    local wordcount52\n\
    \    local wordcount53\n    local wordcount54\n    local wordcount55\n    local\
    \ wordcount56\n    local wordcount57\n    local wordcount58\n    local wordcount59\n\
    \    local wordcount60\n    local wordcount61\n    local wordcount62\n    local\
    \ wordcount63\n    local wordcount64\n    local wordcount65\n    local wordcount66\n\
    \    local wordcount67\n    local wordcount68\n    local wordcount69\n    local\
    \ wordcount70\n    local wordcount71\n    local wordcount72\n    local wordcount73\n\
    \    local wordcount74\n    local wordcount75\n    local wordcount76\n    local\
    \ wordcount77\n    local wordcount78\n\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=\"\"\n  local count=0\n\
    \  local word=\"\"\n  local words=()\n  while read -r word; do\n    words+=(\"\
    $word\")\n  done <<< \"$list\"\n  for word in \"${words[@]}\"; do\n    count=0\n\
    \    for word in \"${words[@]}\"; do\n      if [ \"$word\" == \"$word\" ]; then\n\
    \        ((count++))\n      fi\n    done\n    if [ \"$count\" -gt \"$max\" ];\
    \ then\n      max=\"$count\"\n      word=\"$word\"\n    fi\n  done\n  echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmppmkyt052.sh: line 30: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    for ((i=0; i<${#words[@]};\
    \ i++)); do\n        word=${words[i]}\n        count=0\n        for ((j=0; j<${#words[@]};\
    \ j++)); do\n            if [[ ${words[$j]} != $word ]]; then\n              \
    \  count=$((${count}+1))\n            fi\n        done\n        if (( count >\
    \ max )); then\n            max=count\n            word=${words[i]}\n        fi\n\
    \    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n list=$1\n    local -n max=0\n    local -n max_word=\n\
    \    local -n max_chars=0\n    local -n i\n    local -n j\n    local -n len\n\
    \    local -n word\n    local -n chars\n    local -n words=()\n    local -n chars=()\n\
    \    local -n word\n    local -n char\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n    local -n counts\n\
    \    local -n count\n    local -n counts\n    local -n count\n\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_42v7zsz.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmp_42v7zsz.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmp_42v7zsz.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp_42v7zsz.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmp_42v7zsz.sh: line 24: local: words: reference variable cannot be an array

    /tmp/tmp_42v7zsz.sh: line 25: local: chars: reference variable cannot be an array

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=\"\"\n    local count=0\n\
    \    local word=\"\"\n    local words=()\n    local i=0\n    while read -r word;\
    \ do\n        words[$i]=\"$word\"\n        ((i++))\n    done <<< \"$list\"\n \
    \   for word in \"${words[@]}\"; do\n        ((count++))\n        if [[ ${#max}\
    \ -eq 0 ]]; then\n            max=${word}\n        elif [[ ${#max} -gt ${#word}\
    \ ]]; then\n            max=${word}\n        elif [[ ${#max} -lt ${#word} ]];\
    \ then\n            max=${word}\n        fi\n    done\n    echo \"$max\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local max_word=\"\"\n\
    \  local max_count=0\n  local max_count1=0\n  local max_count2=0\n  local max_count3=0\n\
    \  local max_count4=0\n  local max_count5=0\n  local max_count6=0\n  local max_count7=0\n\
    \  local max_count8=0\n  local max_count9=0\n  local max_count10=0\n  local max_count11=0\n\
    \  local max_count12=0\n  local max_count13=0\n  local max_count14=0\n  local\
    \ max_count15=0\n  local max_count16=0\n  local max_count17=0\n  local max_count18=0\n\
    \  local max_count19=0\n  local max_count20=0\n  local max_count21=0\n  local\
    \ max_count22=0\n  local max_count23=0\n  local max_count24=0\n  local max_count25=0\n\
    \  local max_count26=0\n  local max_count27=0\n  local max_count28=0\n  local\
    \ max_count29=0\n  local max_count30=0\n  local max_count31=0\n  local max_count32=0\n\
    \  local max_count33=0\n  local max_count34=0\n  local max_count35=0\n  local\
    \ max_count36=0\n  local max_count37=0\n  local max_count38=0\n  local max_count39=0\n\
    \  local max_count40=0\n  local max_count41=0\n  local max_count42=0\n  local\
    \ max_count43=0\n  local max_count44=0\n  local max_count45=0\n  local max_count46=0\n\
    \  local max_count47=0\n  local max_count48=0\n  local max_count49=0\n  local\
    \ max_count50=0\n  local max_count51=0\n  local max_count52=0\n  local max_count53=0\n\
    \  local max_count54=0\n  local max_count55=0\n  local max_count56=0\n  local\
    \ max_count57=0\n  local max_count58=0\n  local max_count59=0\n  local max_count60=0\n\
    \  local max_count61=0\n  local max_count62=0\n  local max_count63=0\n  local\
    \ max_count64=0\n  local max_count65=0\n  local max_count66=0\n  local max_count67=0\n\
    \  local max_count68=0\n  local max_count69=0\n  local max_count70=0\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$@\" )\n  local maxlen=0\n  local maxword\n\
    \  local maxidx\n  local maxidx2\n  local maxidx3\n  local maxidx4\n  local maxidx5\n\
    \  local maxidx6\n  local maxidx7\n  local maxidx8\n  local maxidx9\n  local maxidx10\n\
    \  local maxidx11\n  local maxidx12\n  local maxidx13\n  local maxidx14\n  local\
    \ maxidx15\n  local maxidx16\n  local maxidx17\n  local maxidx18\n  local maxidx19\n\
    \  local maxidx20\n  local maxidx21\n  local maxidx22\n  local maxidx23\n  local\
    \ maxidx24\n  local maxidx25\n  local maxidx26\n  local maxidx27\n  local maxidx28\n\
    \  local maxidx29\n  local maxidx30\n  local maxidx31\n  local maxidx32\n  local\
    \ maxidx33\n  local maxidx34\n  local maxidx35\n  local maxidx36\n  local maxidx37\n\
    \  local maxidx38\n  local maxidx39\n  local maxidx40\n  local maxidx41\n  local\
    \ maxidx42\n  local maxidx43\n  local maxidx44\n  local maxidx45\n  local maxidx46\n\
    \  local maxidx47\n  local maxidx48\n  local maxidx49\n  local maxidx50\n  local\
    \ maxidx51\n  local maxidx52\n  local maxidx53\n  local maxidx54\n  local maxidx55\n\
    \  local maxidx56\n  local maxidx57\n  local maxidx58\n  local maxidx59\n  local\
    \ maxidx60\n  local maxidx61\n  local maxidx62\n  local maxidx63\n  local maxidx64\n\
    \  local maxidx65\n  local maxidx66\n  local maxidx67\n  local maxidx68\n  local\
    \ maxidx69\n  local maxidx70\n  local maxidx71\n  local maxidx72\n  local maxidx73\n\
    \  local maxidx74\n  local maxidx75\n  local maxidx76\n  local maxidx77\n  local\
    \ maxidx78\n  local maxidx79\n  local maxidx80\n  local maxidx81\n  local maxidx82\n\
    \  \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    local\
    \ words=$*\n    for word in $words; do\n        local count=0\n        for char\
    \ in $word; do\n            ((count++))\n        done\n        if ((count > max_count))\
    \ ; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  local j\n  local words=()\n  local word\n  local count\n\
    \  local i\n  local j\n  local words=()\n  local word\n  local count\n  local\
    \ i\n  local j\n  local words=()\n  local word\n  local count\n  local i\n  local\
    \ j\n  local words=()\n  local word\n  local count\n  local i\n  local j\n  local\
    \ words=()\n  local word\n  local count\n  local i\n  local j\n  local words=()\n\
    \  local word\n  local count\n  local i\n  local j\n  local words=()\n  local\
    \ word\n  local count\n  local i\n  local j\n  local words=()\n  local word\n\
    \  local count\n  local i\n  local j\n  local words=()\n  local word\n  local\
    \ count\n  local i\n  local j\n  local words=()\n  local word\n  local count\n\
    \  local i\n  local j\n  local words=()\n  local word\n  local count\n  local\
    \ i\n  local j\n  local words=()\n  local word\n  local count\n  local i\n  local\
    \ j\n  local words=()\n  local word\n  local count\n  local i\n  local j\n  local\
    \ words=()\n  local word\n  local count\n  local i\n  local j\n  local words=()\n\
    \  local word\n  local count\n  local i\n  local j\n  local words=()\n  local\
    \ word\n  local count\n  local i\n  local j\n  local words=()\n  local word\n\
    \  local count\n  local i\n  local j\n  local words=()\n  local word\n  local\
    \ count\n  local i\n  local j\n  local words=()\n  local word\n  local count\n\
    \  local i\n  local j\n  local words=()\n  local word\n  local count\n  local\
    \ i\n  local j\n  local words=()\n  local word\n  local count\n  local i\n  local\
    \ j\n  local words=()\n  local word\n  local count\n  local i\n  local j\n  \n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  local j\n  local k\n  local len\n  local tmp\n  local maxlen\n\
    \  local maxword\n  local wordcount\n  local word\n  local count\n  local i\n\
    \  local j\n  local k\n  local len\n  local tmp\n  local maxlen\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local i\n  local j\n  local\
    \ k\n  local len\n  local tmp\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local count\n  local i\n  local j\n  local k\n  local len\n \
    \ local tmp\n  local maxlen\n  local maxword\n  local wordcount\n  local word\n\
    \  local count\n  local i\n  local j\n  local k\n  local len\n  local tmp\n  local\
    \ maxlen\n  local maxword\n  local wordcount\n  local word\n  local count\n  local\
    \ i\n  local j\n  local k\n  local len\n  local tmp\n  local maxlen\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local i\n  local j\n  local\
    \ k\n  local len\n  local tmp\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local count\n  local i\n  local j\n  local k\n  local len\n \
    \ local tmp\n  local maxlen\n  local maxword\n  local wordcount\n  local word\n\
    \  local count\n  local i\n  local j\n  local k\n  local len\n  local tmp\n  local\
    \ maxlen\n  local maxword\n  local wordcount\n  local word\n  local count\n  local\
    \ i\n  local j\n  local k\n  local len\n  local tmp\n  local maxlen\n  local maxword\n\
    \  local wordcount\n  local word\n  local count\n  local i\n  local j\n  local\
    \ k\n  local len\n  local tmp\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local count\n  local i\n  local j\n  local k\n  local len\n \
    \ local tmp\n\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local max_word=\"\
    \"\n    local max_count=0\n    local count=0\n    local word\n    for word in\
    \ \"${words[@]}\"; do\n        count=0\n        for c in $word; do\n         \
    \   ((count++))\n        done\n        if ((count > max_count)) {\n          \
    \  max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpiuv28pma.sh: line 26: syntax error near unexpected token `{''

    /tmp/tmpiuv28pma.sh: line 26: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max_count=0\n    local\
    \ max_word=\"\"\n    local word\n    for word in $list; do\n        local count=0\n\
    \        for c in $word; do\n            ((count++))\n        done\n        if\
    \ ((count > max_count)) {\n            max_count=$count\n            max_word=$word\n\
    \        }\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_phjry_s.sh: line 24: syntax error near unexpected token `{''

    /tmp/tmp_phjry_s.sh: line 24: `        if ((count > max_count)) {''

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local word\n    local count\n  \
    \  local max\n    local word\n    local count\n    local i\n    local j\n    local\
    \ word\n    local count\n    local max\n    local word\n    local count\n    local\
    \ i\n    local j\n    local word\n    local count\n    local max\n    local word\n\
    \    local count\n    local i\n    local j\n    local word\n    local count\n\
    \    local max\n    local word\n    local count\n    local i\n    local j\n  \
    \  local word\n    local count\n    local max\n    local word\n    local count\n\
    \    local i\n    local j\n    local word\n    local count\n    local max\n  \
    \  local word\n    local count\n    local i\n    local j\n    local word\n   \
    \ local count\n    local max\n    local word\n    local count\n    local i\n \
    \   local j\n    local word\n    local count\n    local max\n    local word\n\
    \    local count\n    local i\n    local j\n    local word\n    local count\n\
    \    local max\n    local word\n    local count\n    local i\n    local j\n  \
    \  local word\n    local count\n    local max\n    local word\n    local count\n\
    \    local i\n    local j\n    local word\n    local count\n    local max\n  \
    \  local word\n    local count\n    local i\n    local j\n    local word\n   \
    \ local count\n    local max\n    local word\n    local count\n    local i\n \
    \   local j\n    local word\n    local count\n    local max\n    local word\n\
    \    local count\n    local i\n    local j\n    local word\n    local count\n\
    \    local max\n    local word\n    local count\n    local i\n    local j\n  \
    \  local word\n    local count\n    local max\n    local word\n    local count\n\
    \    local i\n    local j\n    local word\n    local count\n    local max\n  \
    \  local word\n    local count\n    local i\n    local j\n    local word\n   \
    \ local count\n    local max\n    local word\n    local count\n    local i\n \
    \   local j\n    local word\n    local count\n    \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_char=0\n    local max_word=\"\"\n    local\
    \ words=$1\n    local word\n    for word in $words; do\n        local count=0\n\
    \        for char in $word; do\n            ((count++))\n        done\n      \
    \  if ((count > max_char)) ; then\n            max_char=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for c in\
    \ $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n  local maxlen\n  local maxword\n\
    \  local wordcount\n  local wordcount2\n  local wordcount3\n  local wordcount4\n\
    \  local wordcount5\n  local wordcount6\n  local wordcount7\n  local wordcount8\n\
    \  local wordcount9\n  local wordcount10\n  local wordcount11\n  local wordcount12\n\
    \  local wordcount13\n  local wordcount14\n  local wordcount15\n  local wordcount16\n\
    \  local wordcount17\n  local wordcount18\n  local wordcount19\n  local wordcount20\n\
    \  local wordcount21\n  local wordcount22\n  local wordcount23\n  local wordcount24\n\
    \  local wordcount25\n  local wordcount26\n  local wordcount27\n  local wordcount28\n\
    \  local wordcount29\n  local wordcount30\n  local wordcount31\n  local wordcount32\n\
    \  local wordcount33\n  local wordcount34\n  local wordcount35\n  local wordcount36\n\
    \  local wordcount37\n  local wordcount38\n  local wordcount39\n  local wordcount40\n\
    \  local wordcount41\n  local wordcount42\n  local wordcount43\n  local wordcount44\n\
    \  local wordcount45\n  local wordcount46\n  local wordcount47\n  local wordcount48\n\
    \  local wordcount49\n  local wordcount50\n  local wordcount51\n  local wordcount52\n\
    \  local wordcount53\n  local wordcount54\n  local wordcount55\n  local wordcount56\n\
    \  local wordcount57\n  local wordcount58\n  local wordcount59\n  local wordcount60\n\
    \  local wordcount61\n  local wordcount62\n  local wordcount63\n  local wordcount64\n\
    \  local wordcount65\n  local wordcount66\n  local wordcount67\n  local wordcount68\n\
    \  local wordcount69\n  local wordcount70\n  local wordcount71\n  local wordcount72\n\
    \  local wordcount73\n  local wordcount74\n  local wordcount75\n  local wordcount76\n\
    \  local wordcount77\n  local wordcount78\n\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local len\n    local\
    \ tmp\n    local counts\n    local maxcount\n    local wordcount\n    local maxword\n\
    \    local maxwordcount\n    local maxlen\n    local maxwordlen\n    local maxwordcounts\n\
    \    local maxwordcount\n    local maxwordcounts\n    local maxwordcounts\n  \
    \  local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n   \
    \ local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local\
    \ maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n\
    \    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n \
    \   local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n  \
    \  local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n   \
    \ local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local\
    \ maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n\
    \    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n \
    \   local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n  \
    \  local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n   \
    \ local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local\
    \ maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n\
    \    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n \
    \   local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n  \
    \  local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n   \
    \ local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local\
    \ maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n    local maxwordcounts\n\
    \    local max\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local count\n  local max\n  local maxlen\n  local maxword\n \
    \ local wordcount\n  local word\n  local count\n  local max\n  local maxlen\n\
    \  local maxword\n  local wordcount\n  local word\n  local count\n  local max\n\
    \  local maxlen\n  local maxword\n  local wordcount\n  local word\n  local count\n\
    \  local max\n  local maxlen\n  local maxword\n  local wordcount\n  local word\n\
    \  local count\n  local max\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local count\n  local max\n  local maxlen\n  local maxword\n \
    \ local wordcount\n  local word\n  local count\n  local max\n  local maxlen\n\
    \  local maxword\n  local wordcount\n  local word\n  local count\n  local max\n\
    \  local maxlen\n  local maxword\n  local wordcount\n  local word\n  local count\n\
    \  local max\n  local maxlen\n  local maxword\n  local wordcount\n  local word\n\
    \  local count\n  local max\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local count\n  local max\n  local maxlen\n  local maxword\n \
    \ local wordcount\n  local word\n  local count\n  local max\n  local maxlen\n\
    \  local maxword\n  local wordcount\n  local word\n  local count\n  local max\n\
    \  local maxlen\n  local maxword\n  local wordcount\n  local word\n  local count\n\
    \  local max\n  local maxlen\n  local maxword\n  local wordcount\n  local word\n\
    \  local count\n  local max\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local count\n  local max\n  local maxlen\n  local maxword\n \
    \ local wordcount\n  local word\n  local count\n  local max\n  local maxlen\n\
    \  local maxword\n  local wordcount\n  local word\n  local count\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  local j\n  local len\n  local tmp\n  local tmp2\n  local\
    \ tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n\
    \  local tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local\
    \ tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n\
    \  local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n \
    \ local tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local\
    \ tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n\
    \  local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n \
    \ local tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local\
    \ tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n\
    \  local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n \
    \ local tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local\
    \ tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n\
    \  local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n \
    \ local tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local\
    \ tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n\
    \  local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n \
    \ local tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local\
    \ tmp94\n  local tmp95\n  local tmp96\n  local \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  for i in $list; do\n    word=\"$(echo \"$i\" | sed 's/ /\\\
    \\ /g')\"\n    count=$(echo \"$i\" | wc -c)\n    if [ \"$count\" -gt \"$max\"\
    \ ]; then\n      max=\"$count\"\n      word=\"$i\"\n    fi\n  done\n  echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        local count=0\n        for c in\
    \ $word; do\n            ((count++))\n        done\n        if (( count > max\
    \ )); then\n            max=count\n            word=$word\n        fi\n    done\n\
    \    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        local count=0\n        for c in\
    \ \"${word}\"; do\n            ((count++))\n        done\n        if (( count\
    \ > max )); then\n            max=count\n            echo \"$word\"\n        fi\n\
    \    done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local count=0\n    local word\n    local index\n\
    \    local chars\n    local char\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local \n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=$(echo\
    \ $word | wc -w)\n        if [ $count -gt $max ]; then\n            max=$count\n\
    \            word=$word\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local len\n\n  len=${#words[@]}\n  for ((i=0;\
    \ i<${len}; i++)); do\n    word=${words[i]}\n    count=$(echo \"${word}\" | tr\
    \ ' ' '\\n' | sort | uniq -c | sort -n | tail -n 1)\n    if [[ ${count} -gt ${max}\
    \ ]]; then\n      max=${count}\n      word=${words[i]}\n    fi\n  done\n  echo\
    \ \"${word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7ayytaxn.sh: line 28: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  for ((i=0; i<${#words[@]}; i++)); do\n   \
    \ word=${words[i]}\n    count=$(echo \"${word}\" | tr \" \" \"\\n\" | sort | uniq\
    \ -c | sort -nr | head -1)\n    if [[ ${count} -gt ${max} ]]; then\n      max=${count}\n\
    \      word=${word}\n    fi\n  done\n  echo \"${word}\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4h_a2sx2.sh: line 25: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword=\"\"\n    local maxcount=0\n    for word in \"${words[@]}\"; do\n  \
    \      local count=\"${#word}\"\n        if [ \"$count\" -gt \"$maxcount\" ];\
    \ then\n            maxcount=\"$count\"\n            maxword=\"$word\"\n     \
    \   fi\n    done\n    echo \"$maxword\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        local count=\"${#word}\"\n     \
    \   if (( count > max )); then\n            max=count\n            word=$word\n\
    \        fi\n    done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr '\
    \ ' '\\n' | sort | uniq -c | sort -nr | head -1)\n        if [ \"$count\" -gt\
    \ \"$max\" ]; then\n            max=$(echo $count)\n        fi\n    done\n   \
    \ echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi18lh52m.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmpi18lh52m.sh: line 21: [:       1 of: integer expression expected

    /tmp/tmpi18lh52m.sh: line 21: [:       1 string: integer expression expected

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local word\n  local wordcount\n  local wordcount2\n\
    \  local wordcount3\n  local wordcount4\n  local wordcount5\n  local wordcount6\n\
    \  local wordcount7\n  local wordcount8\n  local wordcount9\n  local wordcount10\n\
    \  local wordcount11\n  local wordcount12\n  local wordcount13\n  local wordcount14\n\
    \  local wordcount15\n  local wordcount16\n  local wordcount17\n  local wordcount18\n\
    \  local wordcount19\n  local wordcount20\n  local wordcount21\n  local wordcount22\n\
    \  local wordcount23\n  local wordcount24\n  local wordcount25\n  local wordcount26\n\
    \  local wordcount27\n  local wordcount28\n  local wordcount29\n  local wordcount30\n\
    \  local wordcount31\n  local wordcount32\n  local wordcount33\n  local wordcount34\n\
    \  local wordcount35\n  local wordcount36\n  local wordcount37\n  local wordcount38\n\
    \  local wordcount39\n  local wordcount40\n  local wordcount41\n  local wordcount42\n\
    \  local wordcount43\n  local wordcount44\n  local wordcount45\n  local wordcount46\n\
    \  local wordcount47\n  local wordcount48\n  local wordcount49\n  local wordcount50\n\
    \  local wordcount51\n  local wordcount52\n  local wordcount53\n  local wordcount54\n\
    \  local wordcount55\n  local wordcount56\n  local wordcount57\n  local wordcount58\n\
    \  local wordcount59\n  local wordcount60\n  local wordcount61\n  local wordcount62\n\
    \  local wordcount63\n  local wordcount64\n  local wordcount65\n  local wordcount66\n\
    \  local wordcount67\n  local wordcount68\n  local wordcount69\n  local wordcount70\n\
    \  local wordcount71\n  local wordcount72\n  local wordcount73\n  local wordcount74\n\
    \  local wordcount75\n  local wordcount76\n  local wordcount77\n  local wordcount78\n\
    \  local wordcount79\n  local wordcount\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local count=0\n    local max=0\n\
    \    local word\n    local i\n    for word in $string; do\n        ((count++))\n\
    \        if ((count > max)) ; then\n            max=count\n            word=$word\n\
    \        fi\n    done\n    echo $word\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local wordlen\n  local maxlen\n  local maxword\n\
    \  local maxcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n  local maxwordcount\n  local maxwordlen\n\
    \  local maxwordcount\n  local maxwordlen\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local len\n    local maxlen\n  \
    \  local wordcount\n    local wordcount2\n    local wordcount3\n    local wordcount4\n\
    \    local wordcount5\n    local wordcount6\n    local wordcount7\n    local wordcount8\n\
    \    local wordcount9\n    local wordcount10\n    local wordcount11\n    local\
    \ wordcount12\n    local wordcount13\n    local wordcount14\n    local wordcount15\n\
    \    local wordcount16\n    local wordcount17\n    local wordcount18\n    local\
    \ wordcount19\n    local wordcount20\n    local wordcount21\n    local wordcount22\n\
    \    local wordcount23\n    local wordcount24\n    local wordcount25\n    local\
    \ wordcount26\n    local wordcount27\n    local wordcount28\n    local wordcount29\n\
    \    local wordcount30\n    local wordcount31\n    local wordcount32\n    local\
    \ wordcount33\n    local wordcount34\n    local wordcount35\n    local wordcount36\n\
    \    local wordcount37\n    local wordcount38\n    local wordcount39\n    local\
    \ wordcount40\n    local wordcount41\n    local wordcount42\n    local wordcount43\n\
    \    local wordcount44\n    local wordcount45\n    local wordcount46\n    local\
    \ wordcount47\n    local wordcount48\n    local wordcount49\n    local wordcount50\n\
    \    local wordcount51\n    local wordcount52\n    local wordcount53\n    local\
    \ wordcount54\n    local wordcount55\n    local wordcount56\n    local wordcount57\n\
    \    local wordcount58\n    local wordcount59\n    local wordcount60\n    local\
    \ wordcount61\n    local wordcount62\n    local wordcount63\n    local wordcount64\n\
    \    local wordcount65\n    local wordcount66\n    local wordcount67\n    local\
    \ wordcount68\n    local wordcount69\n    local wordcount70\n    local wordcount71\n\
    \    local wordcount72\n    local wordcount73\n    local wordcount74\n    local\
    \ wordcount75\n    local wordcount76\n    local wordcount77\n    local wordcount78\n\
    \    local wordcount79\n    local word\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $list; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo \"$word\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    \n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    for word in $words; do\n        count=0\n   \
    \     for (( i=0; i<${#word}; i++ )); do\n            (( count++ ))\n        \
    \    if [[ ${word:$i:1} == \"$word\" ]] && [[ ${count:-0} -gt $max ]]; then\n\
    \                max=$count\n            fi\n        done\n    done\n    echo\
    \ \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local len\n    local wordlen\n \
    \   local maxlen\n    local maxword\n    local wordcount\n    local maxcount\n\
    \    local maxcountword\n    local maxcountwordlen\n    local maxcountwordcount\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcountwordcountlen\n    local maxcountwordcountlen\n    local maxcountwordcountlen\n\
    \    local maxcount\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr '\
    \ ' '\\n' | sort | uniq -c | sort -n | tail -1)\n        if [ \"$count\" -gt \"\
    $max\" ]; then\n            word=$word\n            max=$count\n        fi\n \
    \   done\n    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyjwcwzr7.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmpyjwcwzr7.sh: line 21: [:       1 of: integer expression expected

    /tmp/tmpyjwcwzr7.sh: line 21: [:       1 string: integer expression expected

    /tmp/tmpyjwcwzr7.sh: line 21: [:       1 name: integer expression expected

    /tmp/tmpyjwcwzr7.sh: line 21: [:       1 enam: integer expression expected

    /tmp/tmpyjwcwzr7.sh: line 21: [:       1 game: integer expression expected

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=\"\"\n    local count=0\n\
    \    local word=\"\"\n    for word in $list; do\n        ((count++))\n       \
    \ if [[ $count -gt $max ]]; then\n            max=$count\n        fi\n    done\n\
    \    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local len\n  local maxlen\n  local maxword\n  local wordcount\n\
    \  local word\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local wordcount\n  local wordcount\n  local wordcount\n  local\
    \ wordcount\n  local \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=$(echo\
    \ $word | tr \" \" \"\\n\" | sort | uniq -c | wc -l)\n        if [ $count -gt\
    \ $max_count ]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword=\n    for word in \"${words[@]}\"; do\n        local len=\"${#word}\"\
    \n        if [[ $len > $maxlen ]]; then\n            maxlen=$len\n           \
    \ maxword=$word\n        fi\n    done\n    echo \"$maxword\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_chars=0\n    local max_word=\"\"\n    local\
    \ words=$@\n    for word in $words; do\n        local chars=$(echo $word | wc\
    \ -c)\n        if [ $chars -le $max_chars ]; then\n            max_chars=$chars\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword\n    local i\n    for ((i=0; i<${#words[@]}; i++)); do\n        local\
    \ word=${words[i]}\n        local len=${#word}\n        if ((len > maxlen)); then\n\
    \            maxlen=${len}\n            maxword=${word}\n        fi\n    done\n\
    \    echo \"$maxword\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local max_index=0\n    local max_index2=0\n    local max_index3=0\n  \
    \  local max_index4=0\n    local max_index5=0\n    local max_index6=0\n    local\
    \ max_index7=0\n    local max_index8=0\n    local max_index9=0\n    local max_index10=0\n\
    \    local max_index11=0\n    local max_index12=0\n    local max_index13=0\n \
    \   local max_index14=0\n    local max_index15=0\n    local max_index16=0\n  \
    \  local max_index17=0\n    local max_index18=0\n    local max_index19=0\n   \
    \ local max_index20=0\n    local max_index21=0\n    local max_index22=0\n    local\
    \ max_index23=0\n    local max_index24=0\n    local max_index25=0\n    local max_index26=0\n\
    \    local max_index27=0\n    local max_index28=0\n    local max_index29=0\n \
    \   local max_index30=0\n    local max_index31=0\n    local max_index32=0\n  \
    \  local max_index33=0\n    local max_index34=0\n    local max_index35=0\n   \
    \ local max_index36=0\n    local max_index37=0\n    local max_index38=0\n    local\
    \ max_index39=0\n    local max_index40=0\n    local max_index41=0\n    local max_index42=0\n\
    \    local max_index43=0\n    local max_index44=0\n    local max_index45=0\n \
    \   local max_index46=0\n    local max_index47=0\n    local max_index48=0\n  \
    \  local max_index49=0\n    local max_index50=0\n    local max_index51=0\n   \
    \ local max_index52=0\n    local max_index53=0\n    local max_index54=0\n    local\
    \ max_index55=0\n    local max_index56=0\n    local max_index57=0\n    local max_index58=0\n\
    \    local max_index59=0\n    local max_index60=0\n    local max_index61=0\n \
    \   local max_index62=0\n    local max_index63=0\n    local max_index64=0\n  \
    \  local max_index65=0\n    local max_index66=0\n    local max_index67=0\n   \
    \ local max_index68=0\n    local max_index69=0\n    local max_index70=0\n    local\
    \ max_index71\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    for word in $words; do\n        count=$(echo $word\
    \ | tr \" \" \"\\n\" | sort | uniq -c | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=0\n        for c in\
    \ $word; do\n            ((count++))\n        done\n        if ((count > max));\
    \ then\n            max=count\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local maxcounts\n  local maxcount\n  local maxwordcount\n\
    \  local maxword\n  local maxwordcounts\n  local maxwordcount\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=$1\n  local max=0\n  local word\n  local\
    \ count\n  local i\n  local j\n  local word\n  local count\n  local max\n  local\
    \ word\n  local count\n  local i\n  local j\n  local word\n  local count\n  local\
    \ i\n  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local i\n\
    \  local j\n  local word\n  local count\n\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7vl2ggos.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_chars=0\n    local max_word=\"\
    \"\n    local max_count=0\n    local max_index=0\n    local max_count1=0\n   \
    \ local max_index1=0\n    local max_count2=0\n    local max_index2=0\n    local\
    \ max_count3=0\n    local max_index3=0\n    local max_count4=0\n    local max_index4=0\n\
    \    local max_count5=0\n    local max_index5=0\n    local max_count6=0\n    local\
    \ max_index6=0\n    local max_count7=0\n    local max_index7=0\n    local max_count8=0\n\
    \    local max_index8=0\n    local max_count9=0\n    local max_index9=0\n    local\
    \ max_count10=0\n    local max_index10=0\n    local max_count11=0\n    local max_index11=0\n\
    \    local max_count12=0\n    local max_index12=0\n    local max_count13=0\n \
    \   local max_index13=0\n    local max_count14=0\n    local max_index14=0\n  \
    \  local max_count15=0\n    local max_index15=0\n    local max_count16=0\n   \
    \ local max_index16=0\n    local max_count17=0\n    local max_index17=0\n    local\
    \ max_count18=0\n    local max_index18=0\n    local max_count19=0\n    local max_index19=0\n\
    \    local max_count20=0\n    local max_index20=0\n    local max_count21=0\n \
    \   local max_index21=0\n    local max_count22=0\n    local max_index22=0\n  \
    \  local max_count23=0\n    local max_index23=0\n    local max_count24=0\n   \
    \ local max_index24=0\n    local max_count25=0\n    local max_index25=0\n    local\
    \ max_count26=0\n    local max_index26=0\n    local max_count27=0\n    local max_index27=0\n\
    \    local max_count28=0\n    local max_index28=0\n    local max_count29=0\n \
    \   local max_index29=0\n    local max_count30=0\n    local max_index30=0\n  \
    \  local max_count31=0\n    local max_index31=0\n    local max_count32=0\n   \
    \ local max_index32=0\n    local max_count33=0\n    local max_index33=0\n    local\
    \ max_count34=0\n    local max_index34=0\n    local max_count35\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words count\n  words=($1)\n  count=0\n  for i in\
    \ ${words[@]}; do\n    ((count++))\n  done\n  echo $i\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local len\n    local\
    \ tmp\n    local maxlen\n    local maxword\n    local maxcount\n    local maxwordlen\n\
    \    local maxwordcount\n    local maxwordlen2\n    local maxwordcount2\n    local\
    \ maxwordlen3\n    local maxwordcount3\n    local maxwordlen4\n    local maxwordcount4\n\
    \    local maxwordlen5\n    local maxwordcount5\n    local maxwordlen6\n    local\
    \ maxwordcount6\n    local maxwordlen7\n    local maxwordcount7\n    local maxwordlen8\n\
    \    local maxwordcount8\n    local maxwordlen9\n    local maxwordcount9\n   \
    \ local maxwordlen10\n    local maxwordcount10\n    local maxwordlen11\n    local\
    \ maxwordcount11\n    local maxwordlen12\n    local maxwordcount12\n    local\
    \ maxwordlen13\n    local maxwordcount13\n    local maxwordlen14\n    local maxwordcount14\n\
    \    local maxwordlen15\n    local maxwordcount15\n    local maxwordlen16\n  \
    \  local maxwordcount16\n    local maxwordlen17\n    local maxwordcount17\n  \
    \  local maxwordlen18\n    local maxwordcount18\n    local maxwordlen19\n    local\
    \ maxwordcount19\n    local maxwordlen20\n    local maxwordcount20\n    local\
    \ maxwordlen21\n    local maxwordcount21\n    local maxwordlen22\n    local maxwordcount22\n\
    \    local maxwordlen23\n    local maxwordcount23\n    local maxwordlen24\n  \
    \  local maxwordcount24\n    local maxwordlen25\n    local maxwordcount25\n  \
    \  local maxwordlen26\n    local maxwordcount26\n    local maxwordlen27\n    local\
    \ maxwordcount27\n    local maxwordlen28\n    local maxwordcount28\n    local\
    \ maxwordlen29\n    local maxwordcount29\n    local maxwordlen30\n    local maxwordcount30\n\
    \    local maxwordlen31\n    local maxwordcount31\n    local maxwordlen32\n  \
    \  local maxwordcount32\n    local maxwordlen33\n    local maxwordcount\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local maxword\n\
    \  local wordcount\n  local word\n  local wordcounts\n  local maxwordcount\n \
    \ local maxwordcounts\n  local maxwordcount\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n\
    \  local maxwordcounts\n  local maxwordcounts\n  local maxwordcounts\n  local\
    \ maxwordcount\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for c in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxword\n    for word in \"${words[@]}\"; do\n        local len=\"${#word}\"\
    \n        if [ \"$len\" -gt \"$maxlen\" ]; then\n            maxlen=\"$len\"\n\
    \            maxword=\"$word\"\n        fi\n    done\n    echo \"$maxword\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    for word in $words; do\n        count=$(echo $word | tr \"\
    \ \" \"\\n\" | sort | uniq -c | sort -n | tail -1)\n        if [[ $count -gt $max\
    \ ]]; then\n            max=$(echo $count | cut -d' ' -f1)\n        fi\n    done\n\
    \    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfs0ajmeh.sh: line 21: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmpfs0ajmeh.sh: line 21: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmpfs0ajmeh.sh: line 21: [[: 1 string: syntax error in expression (error
    token is "string")

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    local max\n    local word\n  \
    \  local count\n    local i\n    local j\n    local k\n    local count\n    local\
    \ max\n    local word\n    local count\n    local i\n    local j\n    local k\n\
    \    local count\n    local max\n    local word\n    local count\n    local i\n\
    \    local j\n    local k\n    local count\n    \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$1\" )\n  local max=0\n  local max_word\n\
    \  local max_word_len\n  local max_word_index\n  local max_word_count\n  local\
    \ max_word_counts\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_counts_index\n\
    \  local max_word_counts_value\n  local max_word_counts_index\n  local max_word_counts_value\n\
    \  local max_word_counts_index\n  local max_word_counts_value\n  local max_word_\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local max_count=0\n    local max_count2=0\n    local max_count3=0\n  \
    \  local max_count4=0\n    local max_count5=0\n    local max_count6=0\n    local\
    \ max_count7=0\n    local max_count8=0\n    local max_count9=0\n    local max_count10=0\n\
    \    local max_count11=0\n    local max_count12=0\n    local max_count13=0\n \
    \   local max_count14=0\n    local max_count15=0\n    local max_count16=0\n  \
    \  local max_count17=0\n    local max_count18=0\n    local max_count19=0\n   \
    \ local max_count20=0\n    local max_count21=0\n    local max_count22=0\n    local\
    \ max_count23=0\n    local max_count24=0\n    local max_count25=0\n    local max_count26=0\n\
    \    local max_count27=0\n    local max_count28=0\n    local max_count29=0\n \
    \   local max_count30=0\n    local max_count31=0\n    local max_count32=0\n  \
    \  local max_count33=0\n    local max_count34=0\n    local max_count35=0\n   \
    \ local max_count36=0\n    local max_count37=0\n    local max_count38=0\n    local\
    \ max_count39=0\n    local max_count40=0\n    local max_count41=0\n    local max_count42=0\n\
    \    local max_count43=0\n    local max_count44=0\n    local max_count45=0\n \
    \   local max_count46=0\n    local max_count47=0\n    local max_count48=0\n  \
    \  local max_count49=0\n    local max_count50=0\n    local max_count51=0\n   \
    \ local max_count52=0\n    local max_count53=0\n    local max_count54=0\n    local\
    \ max_count55=0\n    local max_count56=0\n    local max_count57=0\n    local max_count58=0\n\
    \    local max_count59=0\n    local max_count60=0\n    local max_count61=0\n \
    \   local max_count62=0\n    local max_count63=0\n    local max_count64=0\n  \
    \  local max_count65=0\n    local max_count66=0\n    local max_count67=0\n   \
    \ local max_count68=0\n    local max_count69=0\n    local max_count70=0\n    local\
    \ max_count71=0\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=$(echo\
    \ $word | wc -c)\n        if [ $count -gt $max ]; then\n            max_word=$word\n\
    \            max=$count\n        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word=\"\"\n    local i=0\n    local j=0\n   \
    \ local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local\
    \ p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n\
    \    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n \
    \   local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n  \
    \  local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n   \
    \ local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local\
    \ P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n\
    \    local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n \
    \   local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n  \
    \  local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n   \
    \ local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local\
    \ p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n\
    \    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n \
    \   local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n  \
    \  local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n   \
    \ local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local\
    \ P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n\
    \    local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n \
    \   local a=0\n    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_count=0\n  local max_word=\"\"\n  local word\n\
    \  local count\n  local i\n  local words\n  words=( $1 )\n  for ((i=0; i<${#words[@]};\
    \ i++)); do\n    word=${words[i]}\n    count=$(echo \"${word}\" | tr ' ' '\\n'\
    \ | sort | uniq -c | sort -n | tail -1)\n    if [[ ${count} -gt ${max_count} ]];\
    \ then\n      max_word=${word}\n      max_count=${count}\n    fi\n  done\n  echo\
    \ \"${max_word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgqbm8hiz.sh: line 25: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmpgqbm8hiz.sh: line 25: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmpgqbm8hiz.sh: line 25: [[: 1 string: syntax error in expression (error
    token is "string")

    '
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local max=0\n    local word\n\
    \    for word in $string; do\n        local count=0\n        for char in $word;\
    \ do\n            ((count++))\n        done\n        if ((count > max)); then\n\
    \            max=count\n            echo \"$word\"\n        fi\n    done\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_count=0\n    local max_word=\"\
    \"\n    local count=0\n    local word\n    for word in $words; do\n        count=0\n\
    \        for c in $word; do\n            ((count++))\n        done\n        if\
    \ ((count > max_count)); then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            word=$word\n        fi\n    done\n    echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local max\n\
    \  local word\n  local count\n  local i\n  local j\n  local word\n  local count\n\
    \  local max\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local max\n  local word\n  local count\n  local i\n  local j\n\
    \  local word\n  local count\n  local max\n  local word\n  local count\n  local\
    \ i\n  local j\n  local word\n  local count\n  local max\n  local word\n  local\
    \ count\n  local i\n  local j\n  local word\n  local count\n  local max\n  local\
    \ word\n  local count\n  local i\n  local j\n  local word\n  local count\n  local\
    \ max\n  local word\n  local count\n  local i\n  local j\n  local word\n  local\
    \ count\n  local max\n  local word\n  local count\n  local i\n  local j\n  local\
    \ word\n  local count\n  local max\n  local word\n  local count\n  local i\n \
    \ local j\n  local word\n  local count\n  local max\n  local word\n  local count\n\
    \  local i\n  local j\n  local word\n  local count\n  local max\n  local word\n\
    \  local count\n  local i\n  local j\n  local word\n  local count\n  local max\n\
    \  local word\n  local count\n  local i\n  local j\n  local word\n  local count\n\
    \  local max\n  local word\n  local count\n  local i\n  local j\n  local word\n\
    \  local count\n  local max\n  local word\n  local count\n  local i\n  local j\n\
    \  local word\n  local count\n  local max\n  local word\n  local count\n  local\
    \ i\n  local j\n  local word\n  local count\n  local max\n  local word\n  local\
    \ count\n  local i\n  local j\n  local word\n  local count\n  \n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local maxcount\n  local maxword\n\
    \  local maxwordcount\n  local maxwordlength\n  local maxwordlengthcount\n  local\
    \ maxwordlengthcounts\n  local maxwordlengthcount\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcount\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  \n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max=\"\"\n    local count=0\n\
    \    local word=\"\"\n    local words=()\n    local wordlen=0\n    local wordlens=()\n\
    \    local wordlenmax=0\n    local wordlenmaxs=()\n    local wordlenmin=0\n  \
    \  local wordlenmins=()\n    local wordlenmaxmin=0\n    local wordlenmaxmins=()\n\
    \    local wordlenminmax=0\n    local wordlenminmaxs=()\n    local wordlenminmaxmin=0\n\
    \    local wordlenminmaxmins=()\n    local wordlenminmaxminmins=()\n    local\
    \ wordlenminmaxminminss=()\n    local wordlenminmaxminsss=()\n    local wordlenminmaxminssss=()\n\
    \    local wordlenminmaxminsssss=()\n    local wordlenminmaxminssssss=()\n   \
    \ local wordlenminmaxminsssssss=()\n    local wordlenminmaxminssssssss=()\n  \
    \  local wordlenminmaxminsssssssss=()\n    local wordlenminmaxminssssssssss=()\n\
    \    local wordlenminmaxminsssssssssss=()\n    local wordlenminmaxminssssssssssss=()\n\
    \    local wordlenminmaxminsssssssssssss=()\n    local wordlenminmaxminsssssssssssss=()\n\
    \    local wordlenminmaxminsssssssssssssss=()\n    local wordlenminmaxminsssssssssssssssss=()\n\
    \    local wordlenminmaxminssssssssssssssssss=()\n    local wordlenminmaxminsssssssssssssssssss=()\n\
    \    local wordlenminmaxminsssssssssssssssssss=()\n    local wordlenminmaxminsssssssssssssssssss=()\n\
    \    local wordlenminmaxminsssssssssssssssssss=()\n    local wordlenminmaxminsssssssssssssssssssss=()\n\
    \    local wordlenminmaxminsssssssssssssssssssssss=()\n    local wordlenminmaxminsssssssssssssssssssssss=()\n\
    \    local wordlenminmaxmin\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$@\" )\n  local max=0\n  local max_word\n\
    \  local i\n  for ((i=0; i<${#words[@]}; i++)); do\n    local count=0\n    local\
    \ word\n    for word in \"${words[@]}\"; do\n      ((count++))\n      if [[ ${#word}\
    \ -gt ${max} ]]; then\n        max=${#word}\n        max_word=${word}\n      fi\n\
    \    done\n  done\n  echo \"${max_word}\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local word\n  local count\n\
    \  local i\n  local j\n  local k\n  local counts\n  local count\n  local maxcount\n\
    \  local maxword\n  local maxwordcount\n  local maxwordlength\n  local maxwordlengthcount\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcount\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcount\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlengthcounts\n  local maxwordlengthcounts\n\
    \  local maxwordlengthcounts\n  local maxwordlength\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local max=0\n    local word\n\
    \    for word in \"${words[@]}\"; do\n        (( max++ ))\n    done\n    local\
    \ i\n    for (( i=0; i<${#words[@]}; i++ )); do\n        local j\n        for\
    \ (( j=0; j<${#words[@]}; j++ )); do\n            if [[ ${words[$i]} > ${words[$j]}\
    \ ]]; then\n                words[$i]=${words[$j]}\n            fi\n        done\n\
    \    done\n    echo \"${words[@]}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040627
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max=0\n    local word\n  \
    \  for word in $words; do\n        local count=0\n        for char in $word; do\n\
    \            ((count++))\n        done\n        if ((count > max)); then\n   \
    \         max=count\n            echo $word\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040626
