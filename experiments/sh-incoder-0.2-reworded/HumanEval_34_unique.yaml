name: HumanEval_34_unique
language: sh
prompt: "#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"\
  5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"\
  ']\n#\n# $1 is a space-separated list\nunique() {\n"
tests: "}\n\ncandidate() {\n    unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5 3 5 2 3 3 9 0 123\") = \"0 2 3 5 9 123\" ]]\n}\n\nrun_test"
completions: ["    local IFS=$'\\n'\n    sort -u <<<\"$1\"", "    local IFS=$'\\n'\
    \ arr=( $1 )\n    local i seen result\n    IFS=$'\\n' seen=()\n    result=()\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        seen+=(\"${arr[i]}\")\n    done\n\
    \    for ((i=0; i<${#seen[@]}; i++)); do\n        if [[ ${seen[$i]} == ${arr[i]}\
    \ ]]; then\n            result+=(\"${arr[i]}\")\n        fi\n    done\n    echo\
    \ \"${result[@]}\"", "    local IFS=$'\\n'\n    local -a arr=( $1 )\n    local\
    \ i seen result\n    IFS=$' \\t\\n'\n    seen=()\n    result=()\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        seen+=( \"${arr[i]}\" )\n    done\n    for\
    \ ((i=0; i<${#seen[@]}; i++)); do\n        if [[ ${seen[$i]} == ${arr[i]} ]];\
    \ then\n            result+=( \"${seen[$i]}\" )\n        fi\n    done\n    echo\
    \ \"${result[@]}\"", "    local IFS=$'\\n'\n    local sorted=( $(sort -u <<<\"\
    $1\") )\n    local IFS=$' '\n    echo \"${sorted[@]}\"", "  local IFS=$1\n  local\
    \ -a arr\n  local -a seen\n\n  arr=( $@ )\n  IFS=$' \\t\\n'\n  local -r unsorted=(\
    \ \"${arr[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  local i\n  local j\n \
    \ local k\n  local len\n\n  len=${#unsorted[@]}\n  for ((i=1; i<=len; i++) {\n\
    \    for ((j=$i; j<=len; j++) {\n      if [[ ${unsorted[i]} == ${unsorted[j]}\
    \ ]]; then\n        unsorted[i]=${unsorted[j]}\n        unsorted[j]=${unsorted[i]}\n\
    \      fi\n    }\n  }\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\"\
    \ )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=(\
    \ \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\"\
    \ )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=(\
    \ \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\"\
    \ )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=(\
    \ \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\"\
    \ )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=(\
    \ \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\"\
    \ )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=(\
    \ \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\" )\n  unsorted=( \"${unsorted[@]}\"\
    \ )\n  unsorted=( \"${unsorted[@]}\" )\n  ", "    local IFS=$1\n    local output\n\
    \    output=$(comm -23 <(sort <<<\"$1\") <(sort <<<\"$2\") | sort -u)\n    echo\
    \ $output", "    local IFS=$1\n    local output\n    output=$(echo \"$@\" | tr\
    \ \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"", "    local\
    \ IFS=$1; shift; echo \"$@\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '", "    local\
    \ IFS=$1\n    local output\n    output=$(echo \"$@\" | tr \" \" \"\\n\" | sort\
    \ -u | tr \"\\n\" \" \")\n    echo \"$output\"", "    local IFS=$'\\n'\n    sort\
    \ -u <<<\"$1\"", '    local IFS=$1; shift; local -a A; local -a B; local -a C;
    local -a D; local -a E; local -a F; local -a G; local -a H; local -a I; local
    -a J; local -a K; local -a L; local -a M; local -a N; local -a O; local -a P;
    local -a Q; local -a R; local -a S; local -a T; local -a U; local -a V; local
    -a W; local -a X; local -a Y; local -a Z; local -a a; local -a b; local -a c;
    local -a d; local -a e; local -a f; local -a g; local -a h; local -a i; local
    -a j; local -a k; local -a l; local -a m; local -a n; local -a o; local -a p;
    local -a q; local -a r; local -a s; local -a t; local -a u; local -a v; local
    -a w; local -a x; local -a y; local -a z; local -a A; local -a B; local -a C;
    local -a D; local -a E; local -a F; local -a G; local -a H; local -a I; local
    -a J; local -a K; local -a L; local -a M; local -a N; local -a O; local -a P;
    local -a Q; local -a R; local -a S; local -a T; local -a U; local -a V; local
    -a W; local -a X; local -a Y; local -a Z; local -a a; local -a b; local -a c;
    local -a d; local -a e; local -a f; local -a g; local -a h; local -a i; local
    -a j; local -a k; local -a l; local -a m; local -a n; local -a o; local -a p;
    local -a q; local -a r; local -a s; local -a t; local -a u; local -a v; local
    -a w; local ', "    local IFS=$1; shift\n    local -a arr=( $* )\n    local i\
    \ seen result\n    IFS=$'\\n'\n    seen=()\n    result=()\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        seen+=(\"$i\")\n    done\n    IFS=$SAVEIFS\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        if [[ ${seen[i]} == ${arr[i]} ]]; then\n  \
    \          result+=(\"$arr[i]\")\n        fi\n    done\n    IFS=$IFS\n    echo\
    \ \"${result[@]}\"", "    local IFS=$'\\n'\n    local sorted=( $(sort -u <<<\"\
    $1\") )\n    local IFS=$'\\n'\n    echo \"${sorted[@]}\"", "    local IFS=$1\n\
    \    local -a A\n    local i result\n\n    # remove duplicate entries from $IFS-separated\
    \ list\n    for ((i=1; i<=${#A[@]}; i++)); do\n        result=false\n        for\
    \ element in \"${A[@]:$i}\"; do\n            [[ $element != $element ]] || { result=true;\
    \ break; }\n        done\n        [[ $result ]] || A+=(\"$i\")\n    done\n\n \
    \   # output sorted unique elements\n    printf '%s\\n' \"${A[@]}\"", "    local\
    \ IFS=$'\\n' arr=($(sort <<<\"$1\")); unset IFS\n    local i result=()\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        [[ ${arr[i]} != ${arr[i+1]} ]] && result+=(\"\
    ${arr[i]}\")\n    done\n    echo \"${result[@]}\"", "    local IFS=$'\\n' arr=(\
    \ $1 )\n    local i result=()\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  [[ ${arr[i]} == ${arr[i+1]} ]] && result+=(\"${arr[i]}\") && arr=( \"${arr[@]:0:i}\"\
    \ \"${arr[@]:i+1}\" )\n    done\n    echo \"${result[@]}\"", "    local IFS=$1\n\
    \    local -a A\n    local -a B\n    local i imax\n    local j\n\n    # Avoid\
    \ empty lists\n    if [ -z \"$1\" ]\n    then\n        echo \"$2\"\n        return\n\
    \    fi\n\n    # Split into array A of words\n    IFS=$'\\n' A=($1)\n\n    # Sort\
    \ and remove duplicates\n    sort -u \"${A[@]}\"\n\n    # Return sorted unique\
    \ elements\n    echo \"${A[@]}\"", "    local IFS=$'\\n' arr=($(sort <<<\"$1\"\
    |uniq -u))\n    echo \"${arr[@]}\"", "  local IFS=$1\n  local -a A\n  A=( $* )\n\
    \  local T I\n  T=( \"${A[@]}\" )\n  I=\"$(printf '%s\\n' \"${T[@]}\" | sort -u\
    \ | tr '\\n' ' ')\"\n  eval \"IFS=$IFS\" # restore IFS\n  echo \"$I\"", "    local\
    \ IFS=$'\\n'\n    sort -u <<<\"$1\""]
stop_tokens:
- "\n}"
