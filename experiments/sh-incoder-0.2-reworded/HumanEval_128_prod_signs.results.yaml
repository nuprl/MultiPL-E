language: sh
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$(echo\
    \ $arr | sed 's/ /\\n/g' | sort -n | uniq -u | wc -l)\n  local signs_arr=($(echo\
    \ $signs))\n  local signs_arr_len=${#signs_arr[@]}\n  local signs_arr_max=${#signs_arr[@]}\n\
    \  local signs_arr_max_idx=0\n  local signs_arr_max_val=${signs_arr[0]}\n  local\
    \ signs_arr_max_val_sign=1\n  local signs_arr_max_val_sign_idx=0\n  local signs_arr_max_val_sign_val=0\n\
    \  local signs_arr_max_val_sign_val_sign=1\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_val_sign_val_sign_val=0\n  local signs_arr_max_val_\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sign\n\
    \    local sum\n    local product\n    local i\n    local j\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local sign\n  local i\n  local j\n  local sign\n  local signs\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$2\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    local sign=${signs:$i:1}\n    local num=${arr[$i]}\n    local sign=${sign:0:1}\n\
    \    local sign=${sign:1}\n    local product=$((product * sign))\n    local sum=$((sum\
    \ + num * product))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpybd5e4dl.sh: line 28: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local sign\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=${arr[i]}\n    signs+=(\"$sign\")\n    ((sum+=sign*product))\n\
    \    ((product*=sign))\n  done\n  if [[ ${#signs[@]} -eq 0 ]]; then\n    return\
    \ 0\n  fi\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpj728kvxz.sh: line 25: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpj728kvxz.sh: line 26: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \   local val=${arr[i]}\n        if (( val < 0 )); then\n            sign=-1\n\
    \        fi\n        sum=$(( sum + sign * val ))\n    done\n    echo \"$sum\"\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl9y6j4jf.sh: line 22: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpl9y6j4jf.sh: line 25: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    local sign\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        sign=${arr[i]}\n        if (( sign )); then\n           \
    \ signs=$((signs+sign))\n        else\n            signs=$((signs+signs))\n  \
    \      fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n\
    \        if (( sign )); then\n            sum=$((sum+signs*sign))\n        fi\n\
    \    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp37po566h.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmp37po566h.sh: line 31: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      signs=$((signs+1))\n      sum=$((sum+i))\n\
    \    else\n      product=$((product*$i))\n    fi\n  done\n  if (( signs > 0 ));\
    \ then\n    sum=$((sum*product))\n  fi\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgxbaeq9n.sh: line 26: product*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  local i\n  local j\n  local sign\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n \
    \ done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs\
    \ * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n\
    \    signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1)));\
    \ do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i in $(seq\
    \ 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n\
    \  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n   \
    \ signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n\
    \    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i\
    \ in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs\
    \ * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n\
    \    signs=$((signs * sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1)));\
    \ do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n  done\n  for i in $(seq\
    \ 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs * sign))\n\
    \  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n   \
    \ signs=$((signs * sign))\n  done\n  for i in $(\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplbajeg40.sh: line 75: unexpected EOF while looking for matching
    `)''

    /tmp/tmplbajeg40.sh: line 95: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs * $i))\n \
    \ done\n  for i in $arr; do\n    sum=$((sum + $i * $signs))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sum=0\n    local product=1\n    local i\n    local j\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        signs=\"${signs} ${arr[i]}\"\n    done\n  \
    \  for ((i=0; i<${#arr[@]}; i++)); do\n        product=$((product*${arr[i]}))\n\
    \    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=$((sum+${arr[i]}*${signs}))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpot1tg2rf.sh: line 26: product*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local sign\n    for sign in $signs;\
    \ do\n        sum=$((sum + $sign*product))\n        product=$((product*sign))\n\
    \    done\n    if [[ $sum -eq 0 ]]; then\n        echo \"None\"\n    else\n  \
    \      echo \"$sum\"\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local product\n  local i\n  local j\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=0\n\
    \  local sign\n  local i\n  local sum=0\n  local product=1\n  local sign\n  local\
    \ signs\n  local sign\n  for ((i = 0; i < ${#arr[@]}; i++)); do\n    sign=${arr[i]}\n\
    \    signs=$((signs * sign))\n    sign=$((sign * sign))\n    sum=$((sum + sign))\n\
    \    product=$((product * sign))\n  done\n  if ((signs > 0)); then\n    sum=$((sum\
    \ + signs))\n  fi\n  if ((product > 0)); then\n    product=$((product * signs))\n\
    \  fi\n  echo $((sum * product))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpivhbm3ic.sh: line 27: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum + $i * $sign))\n\
    \    sign=$((sign * -1))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    for sign in $arr; do\n        signs=$((signs*sign))\n   \
    \ done\n    echo $signs\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n \
    \   signs+=(\"$i\")\n    product=$((product*$i))\n  done\n  for i in \"${signs[@]}\"\
    ; do\n    sum=$((sum+$i))\n  done\n  if (( ${#arr[@]} > 0 )); then\n    echo $((sum*product))\n\
    \  else\n    echo None\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpaodivwif.sh: line 23: product*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    local product=1\n    for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n        local elem=${arr[i]}\n        if [[ ${elem} -eq 0 ]]; then\n   \
    \         continue\n        fi\n        sign=${elem}\n        product=${product}\
    \ * ${sign}\n        sum=${sum} + ${sign}\n    done\n    echo \"${sum}\"\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpen_vlhyy.sh: line 22: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpen_vlhyy.sh: line 26: 0: command not found

    /tmp/tmpen_vlhyy.sh: line 27: +: command not found

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[$i]}\n\
    \        if [[ ${elem} -gt 0 ]]; then\n            sum=$((sum+elem*sign))\n  \
    \      fi\n        sign=$((sign*-1))\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnt_bk564.sh: line 21: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=$((signs\
    \ * $i))\n  done\n  for i in $arr; do\n    product=$((product * $i))\n  done\n\
    \  sum=$((signs * product))\n  if (( ${#arr} > 0 )); then\n    echo $sum\n  else\n\
    \    echo $sum\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=$((signs + $i))\n    product=$((product * $i))\n  done\n  sum=$((signs\
    \ * product))\n  if (( sum == 0 )); then\n    sum=$((signs * product))\n  fi\n\
    \  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0xq63tzf.sh: line 22: signs + 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    if [[ $i =~ ^-?[0-9]+$ ]];\
    \ then\n      sum=$((sum + $i))\n      sign=$((sign * -1))\n    elif [[ $i =~\
    \ ^-?[0-9]+\\.[0-9]+$ ]]; then\n      sum=$((sum + $i))\n      sign=$((sign *\
    \ -1))\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      sum=$((sum\
    \ + $i))\n      sign=$((sign * -1))\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+$ ]]; then\n      sum=$((sum + $i))\n      sign=$((sign * -1))\n    elif\
    \ [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      sum=$((sum\
    \ + $i))\n      sign=$((sign * -1))\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      sum=$((sum + $i))\n      sign=$((sign\
    \ * -1))\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+$ ]]; then\n      sum=$((sum + $i))\n      sign=$((sign * -1))\n    elif\
    \ [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$\
    \ ]]; then\n      sum=$((sum + $i))\n      sign=$((sign * -1))\n    elif [[ $i\
    \ =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+$ ]]; then\n      sum=$((sum + $i))\n      sign=$((sign * -1))\n    elif\
    \ [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+$ ]]; then\n      sum=$((sum + $i))\n      sign=$((sign * -1))\n\
    \    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      sum=$((sum + $i))\n      sign=$((sign\
    \ * -1))\n    elif [[ $i =~ ^-?[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n      sum=$((sum\
    \ + $i))\n      \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkzf6qlc3.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpkzf6qlc3.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  for sign in $arr; do\n    signs=$((signs*sign))\n\
    \  done\n  for sign in $arr; do\n    sum=$((sum+signs*sign))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    for sign in $arr; do\n        signs=$((signs*sign))\n   \
    \ done\n    echo $signs\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sum=0\n    local product=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        local elem=${arr[i]}\n        if [[ ${elem} -eq 0 ]]; then\n        \
    \    signs+=(\"0\")\n        elif [[ ${elem} -gt 0 ]]; then\n            signs+=(\"\
    1\")\n        elif [[ ${elem} -lt 0 ]]; then\n            signs+=(\"-1\")\n  \
    \      fi\n    done\n    for (( i=0; i<${#signs[@]}; i++ )); do\n        sum=$((\
    \ sum + ${signs[i]} * ${product} ))\n        product=$(( product * ${signs[i]}\
    \ ))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpigbz8mag.sh: line 22: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpigbz8mag.sh: line 24: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpigbz8mag.sh: line 26: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -u | wc -l)\n    local signs_arr=()\n\
    \    for (( i=0; i<$signs; i++ )); do\n        signs_arr+=($(echo \"$arr\" | tr\
    \ \" \" \"\\n\" | sort -n | uniq -u | sed -n \"${i}p\"))\n    done\n    local\
    \ signs_str=$(echo \"${signs_arr[@]}\" | tr \"\\n\" \" \")\n    local signs_str2=$(echo\
    \ \"$signs_str\" | tr \"-\" \"0\")\n    local signs_str3=$(echo \"$signs_str\"\
    \ | tr \"+\" \"1\")\n    local signs_str4=$(echo \"$signs_str\" | tr \"0\" \"\
    -1\")\n    local signs_str5=$(echo \"$signs_str\" | tr \"1\" \"0\")\n    local\
    \ signs_str6=$(echo \"$signs_str\" | tr \"2\" \"0\")\n    local signs_str7=$(echo\
    \ \"$signs_str\" | tr \"3\" \"0\")\n    local signs_str8=$(echo \"$signs_str\"\
    \ | tr \"4\" \"0\")\n    local signs_str9=$(echo \"$signs_str\" | tr \"5\" \"\
    0\")\n    local signs_str10=$(echo \"$signs_str\" | tr \"6\" \"0\")\n    local\
    \ signs_str11=$(echo \"$signs_str\" | tr \"7\" \"0\")\n    local signs_str12=$(echo\
    \ \"$signs_str\" | tr \"8\" \"0\")\n    local signs_str13=$(echo \"$signs_str\"\
    \ | tr \"9\" \"0\")\n    local signs_str14=$(echo \"$signs_str\" | tr \"10\" \"\
    0\")\n    local signs_str15=$(echo \"$signs_str\" | tr \"11\" \"0\")\n    local\
    \ signs_str16=$(echo \"$signs_str\" | tr \"12\" \"0\")\n    local signs_str17=$(echo\
    \ \"$signs_str\" | tr \"13\" \"0\")\n    local signs_str18=$(echo \"$signs_str\"\
    \ | tr \"14\" \"0\")\n    local signs_str19=$(echo \"$signs_str\" | tr \"15\"\
    \ \"0\")\n    local signs_str20=$(echo \"$signs_str\" | tr \"16\" \"0\")\n   \
    \ local signs_str21=$(echo \"$signs_str\" | tr \"17\" \"0\")\n    local signs_str22=$(echo\
    \ \"$signs_str\" | tr \"18\" \"0\")\n    local \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 2: invalid usage of line address 0

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | sed 's/ /\\n/g' | sed 's/^/1/g' | sed 's/$/-1/g' | sed 's/^/1/g'\
    \ | sed 's/$/-1/g')\n  local sum=0\n  local product=1\n  local sign\n  for sign\
    \ in $signs; do\n    sum=$((sum + $sign * $product))\n    product=$((product *\
    \ $sign))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    ((signs+=((${i}<0)*2)))\n    ((sum+=${i}*${signs}))\n    ((product*=signs))\n\
    \  done\n  echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpkrf2pu9x.sh: line 22: ((: signs+=((1 2 2 -4<0)*2): missing `)''
    (error token is "2 2 -4<0)*2)")

    /tmp/tmpkrf2pu9x.sh: line 23: ((: sum+=1 2 2 -4*0: syntax error in expression
    (error token is "2 2 -4*0")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | head -n 1)\n  if\
    \ [ -z \"$signs\" ]; then\n    echo \"None\"\n  else\n    echo \"$signs\" | xargs\
    \ -I {} echo \"${arr% *} * {}\"\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    for x in $arr; do\n        (( sum += sign * x ))\n    \
    \    (( sign *= -1 ))\n    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local sum\n    local product\n    local sign\n    local sum\n\
    \    local product\n    local sign\n    local sum\n    local product\n    local\
    \ sign\n    local sum\n    local product\n    local sign\n    local sum\n    local\
    \ product\n    local sign\n    local sum\n    local product\n    local sign\n\
    \    local sum\n    local product\n    local sign\n    local sum\n    local product\n\
    \    local sign\n    local sum\n    local product\n    local sign\n    local sum\n\
    \    local product\n    local sign\n    local sum\n    local product\n    local\
    \ sign\n    local sum\n    local product\n    local sign\n    local sum\n    local\
    \ product\n    local sign\n    local sum\n    local product\n    local sign\n\
    \    local sum\n    local product\n    local sign\n    local sum\n    local product\n\
    \    local sign\n    local sum\n    local product\n    local sign\n    local sum\n\
    \    local product\n    local sign\n    local sum\n    local product\n    local\
    \ sign\n    local sum\n    local product\n    local sign\n    local sum\n    local\
    \ product\n    local sign\n    local sum\n    local product\n    local sign\n\
    \    local sum\n    local product\n    local sign\n    local sum\n    local product\n\
    \    local sign\n    local sum\n    local product\n    local sign\n    local sum\n\
    \    local product\n    local sign\n    local sum\n    local product\n    local\
    \ sign\n    local sum\n    local product\n    local sign\n    local sum\n    local\
    \ product\n    local sign\n    local sum\n    local product\n    local sign\n\
    \    local sum\n    local product\n    local sign\n    local sum\n    local product\n\
    \    local sign\n    local sum\n    local product\n    local sign\n    local sum\n\
    \    local product\n    local sign\n    local sum\n    local product\n    local\
    \ sign\n    local sum\n    local product\n    local sign\n    local sum\n    local\
    \ product\n    local sign\n    local sum\n    local product\n    local sign\n\
    \    local sum\n    local product\n    local sign\n    local sum\n    local product\n\
    \    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sum=0\n    local product=1\n    local i\n    local j\n    local\
    \ sign\n    local signs\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    \n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local i\n    local sum=0\n    local product=1\n    local\
    \ sign\n    local signs\n    local sign\n    local j\n    local i\n    local sum\n\
    \    local product\n    local sign\n    local signs\n    local sign\n    local\
    \ j\n    local i\n    local sum\n    local product\n    local sign\n    local\
    \ signs\n    local sign\n    local j\n    local i\n    local sum\n    local product\n\
    \    local sign\n    local signs\n    local sign\n    local j\n    local i\n \
    \   local sum\n    local product\n    local sign\n    local signs\n    local sign\n\
    \    local j\n    local i\n    local sum\n    local product\n    local sign\n\
    \    local signs\n    local sign\n    local j\n    local i\n    local sum\n  \
    \  local product\n    local sign\n    local signs\n    local sign\n    local j\n\
    \    local i\n    local sum\n    local product\n    local sign\n    local signs\n\
    \    local sign\n    local j\n    local i\n    local sum\n    local product\n\
    \    local sign\n    local signs\n    local sign\n    local j\n    local i\n \
    \   local sum\n    local product\n    local sign\n    local signs\n    local sign\n\
    \    local j\n    local i\n    local sum\n    local product\n    local sign\n\
    \    local signs\n    local sign\n    local j\n    local i\n    local sum\n  \
    \  local product\n    local sign\n    local signs\n    local sign\n    local j\n\
    \    local i\n    local sum\n    local product\n    local sign\n    local signs\n\
    \    local sign\n    local j\n    local i\n    local sum\n    local product\n\
    \    local sign\n    local signs\n    local sign\n    local j\n    local i\n \
    \   local sum\n    local product\n    local sign\n    local signs\n    local sign\n\
    \    local j\n    local i\n    local sum\n    local product\n    local sign\n\
    \    local signs\n    local sign\n    local j\n    local i\n    local sum\n  \
    \  local product\n    local sign\n    local signs\n    local sign\n    local j\n\
    \    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sign\n  local i\n  local sum=0\n  local product=1\n  local sign\n  for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\n    signs+=(\"$sign\"\
    )\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\n    product=$((product\
    \ * sign))\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\
    \n    sum=$((sum + sign * product))\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpucjvp29r.sh: line 29: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sum=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        signs+=(${arr[i]})\n        sum+=(${arr[i]}*${signs[i]})\n\
    \        product*=${signs[i]}\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n\
    \        echo \"None\"\n    else\n        echo \"${sum}\"\n    fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmproa7lb1_.sh: line 24: product*=1: command not found

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sign\n    local i\n    local sum=0\n    local product=1\n    local\
    \ sign\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=\"${arr[i]}\"\n \
    \       signs+=(\"$sign\")\n        product=$((product * sign))\n    done\n  \
    \  for ((i=0; i<${#signs[@]}; i++)); do\n        sign=${signs[$i]}\n        sum=$((sum\
    \ + sign * product))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm3focxz9.sh: line 26: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local i\n    local sum=0\n    local product=1\n    local\
    \ sign\n    local j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n\
    \        if (( sign )); then\n            signs+=${sign}\n        fi\n    done\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if ((\
    \ sign )); then\n            signs+=${sign}\n        fi\n    done\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if (( sign )); then\n\
    \            signs+=${sign}\n        fi\n    done\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        sign=${arr[i]}\n        if (( sign )); then\n           \
    \ signs+=${sign}\n        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        sign=${arr[i]}\n        if (( sign )); then\n            signs+=${sign}\n\
    \        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n\
    \        if (( sign )); then\n            signs+=${sign}\n        fi\n    done\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if ((\
    \ sign )); then\n            signs+=${sign}\n        fi\n    done\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if (( sign )); then\n\
    \            signs+=${sign}\n        fi\n    done\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        sign=${arr[i]}\n        if (( sign )); then\n           \
    \ signs+=${sign}\n        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        sign=${arr[i]}\n        if (( sign )); then\n            signs+=${sign}\n\
    \        fi\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n\
    \        if (( sign )); then\n            signs+=${sign}\n        fi\n    done\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if ((\
    \ sign \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1ov8y_b9.sh: line 92: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1ov8y_b9.sh: line 112: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  local j\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    local product=1\n    local i\n    local j\n    local signs\n\
    \    local signs_len\n    local signs_len2\n    local signs_len3\n    local signs_len4\n\
    \    local signs_len5\n    local signs_len6\n    local signs_len7\n    local signs_len8\n\
    \    local signs_len9\n    local signs_len10\n    local signs_len11\n    local\
    \ signs_len12\n    local signs_len13\n    local signs_len14\n    local signs_len15\n\
    \    local signs_len16\n    local signs_len17\n    local signs_len18\n    local\
    \ signs_len19\n    local signs_len20\n    local signs_len21\n    local signs_len22\n\
    \    local signs_len23\n    local signs_len24\n    local signs_len25\n    local\
    \ signs_len26\n    local signs_len27\n    local signs_len28\n    local signs_len29\n\
    \    local signs_len30\n    local signs_len31\n    local signs_len32\n    local\
    \ signs_len33\n    local signs_len34\n    local signs_len35\n    local signs_len36\n\
    \    local signs_len37\n    local signs_len38\n    local signs_len39\n    local\
    \ signs_len40\n    local signs_len41\n    local signs_len42\n    local signs_len43\n\
    \    local signs_len44\n    local signs_len45\n    local signs_len46\n    local\
    \ signs_len47\n    local signs_len48\n    local signs_len49\n    local signs_len50\n\
    \    local signs_len51\n    local signs_len52\n    local signs_len53\n    local\
    \ signs_len54\n    local signs_len55\n    local signs_len56\n    local signs_len57\n\
    \    local signs_len58\n    local signs_len59\n    local signs_len60\n    local\
    \ signs_len61\n    local signs_len62\n    local signs_len63\n    local signs_len64\n\
    \    local signs_len65\n    local signs_len66\n    local signs_len67\n    local\
    \ signs_len68\n    local sign\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local j\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    signs+=(\"${arr[i]}\")\n  done\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    product=$((product*${signs[i]}))\n  done\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sum=$((sum+${arr[i]}*${signs[i]}))\n  done\n  echo \"$sum\"\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg2l_jmxd.sh: line 26: product*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \   ((sign*=arr[i]))\n        sum+=sign*i\n    done\n    echo \"$sum\"\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr7wpz_w5.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local i\n    local j\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        (( signs[$i] )) && product=-1\n        (( signs[$i]\
    \ )) && sum+=${arr[$i]}\n    done\n    echo $(( sum * product ))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local sign\n    local i\n    local j\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local signs_sum\n  local signs_product\n  local signs_product2\n\
    \  local signs_product3\n  local signs_product4\n  local signs_product5\n  local\
    \ signs_product6\n  local signs_product7\n  local signs_product8\n  local signs_product9\n\
    \  local signs_product10\n  local signs_product11\n  local signs_product12\n \
    \ local signs_product13\n  local signs_product14\n  local signs_product15\n  local\
    \ signs_product16\n  local signs_product17\n  local signs_product18\n  local signs_product19\n\
    \  local signs_product20\n  local signs_product21\n  local signs_product22\n \
    \ local signs_product23\n  local signs_product24\n  local signs_product25\n  local\
    \ signs_product26\n  local signs_product27\n  local signs_product28\n  local signs_product29\n\
    \  local signs_product30\n  local signs_product31\n  local signs_product32\n \
    \ local signs_product33\n  local signs_product34\n  local signs_product35\n  local\
    \ signs_product36\n  local signs_product37\n  local signs_product38\n  local signs_product39\n\
    \  local signs_product40\n  local signs_product41\n  local signs_product42\n \
    \ local signs_product43\n  local signs_product44\n  local signs_product45\n  local\
    \ signs_product46\n  local signs_product47\n  local signs_product48\n  local signs_product49\n\
    \  local signs_product50\n  local signs_product51\n  local signs_product52\n \
    \ local signs_product53\n  local signs_product54\n  local signs_product55\n  local\
    \ signs_product56\n  local signs_product57\n  local signs_product58\n  local signs_product59\n\
    \  local signs_product60\n  local signs_product61\n  local signs_product62\n \
    \ local signs_product63\n  local signs_product64\n  local signs_product65\n  local\
    \ signs_product66\n  local signs_product67\n  local signs_product68\n  local signs_product69\n\
    \  local signs_product70\n  local \n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sign\n    local i\n    local sum=0\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sign=${arr[i]}\n        if (( sign < 0 )); then\n            signs=(\"\
    ${signs[@]}\" -1)\n        fi\n        signs=(\"${signs[@]}\" 1)\n        sum=$((\
    \ sum + sign ))\n    done\n    if (( ${#signs[@]} > 0 )); then\n        sum=$((\
    \ sum * ${signs[@]} ))\n    fi\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyfxtsgf0.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpyfxtsgf0.sh: line 27: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local sign\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        sign=${arr[$i]}\n        if (( sign > 0 )); then\n      \
    \      signs+=1\n        fi\n        sum=$((sum+sign*signs))\n    done\n    if\
    \ (( sum == 0 )); then\n        echo \"None\"\n    else\n        echo \"$sum\"\
    \n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzpvymlhu.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpzpvymlhu.sh: line 26: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs+=(\"${arr[i]}\")\n  done\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    product=$((product*${signs[i]}))\n  done\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sum=$((sum+${arr[i]}*${signs[i]}))\n  done\n\n  echo \"$sum\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptsb_6cu7.sh: line 27: product*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sum=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        signs=$((signs*${arr[i]}))\n        sum=$((sum+${arr[i]}))\n\
    \        product=$((product*${arr[i]}))\n    done\n    if [[ ${#arr[@]} -eq 0\
    \ ]]; then\n        echo \"None\"\n        return\n    fi\n    echo \"${sum} *\
    \ ${signs} = ${product}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpnvmxgx7d.sh: line 22: signs*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -u | wc -l)\n    local signs_arr=()\n\
    \    for (( i=0; i<${#arr[@]}; i++ )); do\n        signs_arr+=(\"${signs[$i]}\"\
    )\n    done\n    local signs_str=$(IFS=\" \"; echo \"${signs_arr[*]}\")\n    local\
    \ signs_sum=$(echo \"$signs_str\" | tr \" \" \"\\n\" | sort -n | uniq -u | wc\
    \ -l)\n    local signs_product=$(echo \"$signs_str\" | tr \" \" \"\\n\" | sort\
    \ -n | uniq -u | paste -sd+ | bc)\n    echo \"$signs_sum * $signs_product\"\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sign\n  local sum=0\n  local product=1\n  local i\n  local j\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in \"${arr[@]}\"; do\n    (( sum += sign *\
    \ i ))\n    (( sign *= -1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98p0xk0v.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local sign\n   \
    \ local sum\n\n    if [[ \"${arr}\" == \"\" ]]; then\n        echo \"None\"\n\
    \        return\n    fi\n\n    signs=$(echo \"${arr}\" | sed 's/ //g')\n    signs=$(echo\
    \ \"${signs}\" | sed 's/^-//g')\n    signs=$(echo \"${signs}\" | sed 's/-$//g')\n\
    \    signs=$(echo \"${signs}\" | sed 's/^-//g')\n    signs=$(echo \"${signs}\"\
    \ | sed 's/^-//g')\n    signs=$(echo \"${signs}\" | sed 's/-$//g')\n    signs=$(echo\
    \ \"${signs}\" | sed 's/^-//g')\n    signs=$(echo \"${signs}\" | sed 's/^-//g')\n\
    \    signs=$(echo \"${signs}\" | sed 's/-$//g')\n    signs=$(echo \"${signs}\"\
    \ | sed 's/^-//g')\n    signs=$(echo \"${signs}\" | sed 's/^-//g')\n    signs=$(echo\
    \ \"${signs}\" | sed 's/-$//g')\n    signs=$(echo \"${signs}\" | sed 's/^-//g')\n\
    \    signs=$(echo \"${signs}\" | sed 's/^-//g')\n    signs=$(echo \"${signs}\"\
    \ | sed 's/-$//g')\n    signs=$(echo \"${signs}\" | sed 's/^-//g')\n    signs=$(echo\
    \ \"${signs}\" | sed 's/^-//g')\n    signs=$(echo \"${signs}\" | sed 's/-$//g')\n\
    \    signs=$(echo \"${signs}\" | sed 's/^-//g')\n    signs=$(echo \"${signs}\"\
    \ | sed 's/^-//g')\n    signs=$(echo \"${signs}\" | sed 's/-$//g')\n    signs=$(echo\
    \ \"${signs}\" | sed 's/^-//g')\n    signs=$(echo \"${signs}\" | sed 's/^-//g')\n\
    \    signs=$(echo \"${signs}\" | sed 's/-$//g')\n    signs=$(echo \"${signs}\"\
    \ | sed 's/^-//g')\n    signs=$(echo \"${signs}\" | sed 's/^-//g')\n    \n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  for i in $arr; do\n    if [[\
    \ $i =~ ^-?[0-9]+$ ]]; then\n      sum=$((sum+i))\n      product=$((product*sign))\n\
    \    else\n      sign=$((-sign))\n    fi\n  done\n  if [[ $sum != 0 ]]; then\n\
    \    echo \"$sum\"\n  else\n    echo \"None\"\n  fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n  local signs_len=${#signs}\n\
    \  local signs_sum=0\n  local signs_product=1\n  local signs_product2=1\n  local\
    \ signs_product3=1\n  local signs_product4=1\n  local signs_product5=1\n  local\
    \ signs_product6=1\n  local signs_product7=1\n  local signs_product8=1\n  local\
    \ signs_product9=1\n  local signs_product10=1\n  local signs_product11=1\n  local\
    \ signs_product12=1\n  local signs_product13=1\n  local signs_product14=1\n  local\
    \ signs_product15=1\n  local signs_product16=1\n  local signs_product17=1\n  local\
    \ signs_product18=1\n  local signs_product19=1\n  local signs_product20=1\n  local\
    \ signs_product21=1\n  local signs_product22=1\n  local signs_product23=1\n  local\
    \ signs_product24=1\n  local signs_product25=1\n  local signs_product26=1\n  local\
    \ signs_product27=1\n  local signs_product28=1\n  local signs_product29=1\n  local\
    \ signs_product30=1\n  local signs_product31=1\n  local signs_product32=1\n  local\
    \ signs_product33=1\n  local signs_product34=1\n  local signs_product35=1\n  local\
    \ signs_product36=1\n  local signs_product37=1\n  local signs_product38=1\n  local\
    \ signs_product39=1\n  local signs_product40=1\n  local signs_product41=1\n  local\
    \ signs_product42=1\n  local signs_product43=1\n  local signs_product44=1\n  local\
    \ signs_product45=1\n  local signs_product46=1\n  local signs_product47=1\n  local\
    \ signs_product48=1\n  local signs_product49=1\n  local signs_product50=1\n  local\
    \ signs_product51=1\n  local signs_product52=1\n  local signs_product53=1\n  local\
    \ signs_product54=1\n  local signs_product55=1\n  local signs_product56=1\n  local\
    \ signs_product57=1\n  local signs_product58=1\n  local signs_\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sum=0\n    local product=1\n    for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n        local sign=\"${arr[i]}\"\n        if [[ ${sign} == -* ]]; then\n\
    \            signs=\"${signs} -1\"\n        elif [[ ${sign} == +* ]]; then\n \
    \           signs=\"${signs} 1\"\n        else\n            signs=\"${signs} 0\"\
    \n        fi\n        sum=$(( sum + ${arr[i]} * ${signs} ))\n        product=$((\
    \ product * ${sign} ))\n    done\n    echo \"${sum}\"\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyepg74wr.sh: line 29: sum + 1 2 2 -4 *  0 : syntax error in expression
    (error token is "2 2 -4 *  0 ")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=()\n  local sign\n  local i\n  local j\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=\"${arr[i]}\"\n    signs+=(\"$sign\")\n  done\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\n    sign=${sign//-/+}\n   \
    \ sign=${sign//+/-}\n    sign=${sign//0/+}\n    sign=${sign//1/-}\n    sign=${sign//2/+}\n\
    \    sign=${sign//3/-}\n    sign=${sign//4/+}\n    sign=${sign//5/-}\n    sign=${sign//6/+}\n\
    \    sign=${sign//7/-}\n    sign=${sign//8/+}\n    sign=${sign//9/-}\n    sign=${sign//+/-}\n\
    \    sum+=$((${sign} * ${arr[i]}))\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqhmedm78.sh: line 41: - - - -- * 1 2 2 -4: syntax error: operand
    expected (error token is "* 1 2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local sign\n  local i\n  for i in \"${arr[@]}\"\
    ; do\n    sign=\"${i%% *}\"\n    signs+=(\"$sign\")\n    product*=\"$sign\"\n\
    \  done\n  for i in \"${signs[@]}\"; do\n    sum+=\"$i\"\n  done\n  if [ -z \"\
    $sum\" ]; then\n    return 0\n  else\n    echo \"$sum\"\n  fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppvmpr_iu.sh: line 25: product*=1: command not found

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum+$i*$sign))\n  \
    \  sign=$((sign*-1))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | head -n 1)\n  local\
    \ signs_arr=($(echo \"$signs\" | tr \" \" \"\\n\"))\n  local signs_arr_len=${#signs_arr[@]}\n\
    \  local signs_arr_max=${#signs_arr[@]}\n  local signs_arr_max_idx=0\n  local\
    \ signs_arr_max_val=${signs_arr[$signs_arr_max_idx]}\n  local signs_arr_max_val_sign=${signs_arr_max_val}\n\
    \  local signs_arr_max_val_sign_idx=0\n  local signs_arr_max_val_sign_val=${signs_arr_max_val_sign}\n\
    \  local signs_arr_max_val_sign_val_sign=${signs_arr_max_val_sign_val}\n  local\
    \ signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign_val}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign_val}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign_val}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign_val}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign_val}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign_val}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign_val}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n  local signs_arr_max_val_sign_val_sign_val=${signs_arr_max_val_sign_val_sign_val}\n\
    \  local signs_arr_max_val_sign_val_sign_idx=0\n\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -n | awk '{print $2}')\n\
    \  local signs_sum=0\n  local signs_product=1\n  for sign in $signs; do\n    signs_sum=$((signs_sum\
    \ + sign))\n    signs_product=$((signs_product * sign))\n  done\n  echo \"$signs_sum\
    \ * $signs_product\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  local signs\n  local sign\n  local product\n  local\
    \ productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local productsigns\n\
    \  local productsign\n  local productsigns\n  local productsign\n  local product\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs=$((signs+${arr[i]}))\n  done\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    product=$((product*${arr[i]}))\n  done\n\n  if ((${#arr[@]} == 0));\
    \ then\n    return 0\n  fi\n\n  sum=$((${signs}*${product}))\n  return $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvmxynaj6.sh: line 23: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $2}')\n  local\
    \ signs_sum=0\n  local signs_product=1\n  for sign in $signs; do\n    signs_sum=$((signs_sum\
    \ + sign))\n    signs_product=$((signs_product * sign))\n  done\n  echo \"$signs_sum\
    \ * $signs_product\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -d)\n    local signs_arr=()\n    for\
    \ sign in $signs; do\n        signs_arr+=(\"$sign\")\n    done\n    local sum=0\n\
    \    for sign in $signs_arr; do\n        sum=$((sum + $sign))\n    done\n    echo\
    \ $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local sign\n    for sign in $arr; do\n        if (( sign\
    \ < 0 )); then\n            signs=$(( signs + 1 ))\n        fi\n        sum=$((\
    \ sum + sign ))\n    done\n    if (( signs > 0 )); then\n        sum=$(( sum *\
    \ signs ))\n    fi\n    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local i\n    local sum=0\n    local product=1\n    local\
    \ sign\n    local signs\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    local\
    \ sign\n    local sign\n    local sign\n    local sign\n    local sign\n    \n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sign\n  local\
    \ sum\n  local product\n  local i\n  sum=0\n  product=1\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=${arr[i]}\n    if [[ ${sign} == -* ]]; then\n      sign=-1\n\
    \    elif [[ ${sign} == +* ]]; then\n      sign=1\n    else\n      sign=0\n  \
    \  fi\n    sum=$((sum+sign*${arr[i]}))\n    product=$((product*sign))\n  done\n\
    \  echo $sum\n  echo $product\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp9v3yt_ad.sh: line 32: sum+sign*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local i\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        local sign=${signs:$i:1}\n        local val=${arr[$i]}\n\
    \        if [[ $sign == -* ]]; then\n            product=-1\n        fi\n    \
    \    sum=$((sum + val*product))\n    done\n    echo $sum\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj_jdra93.sh: line 27: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n    local sum=0\n    for sign in $signs; do\n    \
    \    sum=$((sum + $sign))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n \
    \   prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sum=0\n    local product=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        local sign=${arr[i]}\n        signs+=(\"$sign\")\n        sum+=${sign}\n\
    \        product*=$sign\n    done\n    echo \"$sum\"\n    echo \"$product\"\n\
    \    echo \"${signs[@]}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpqkraz0w9.sh: line 24: product*=1: command not found

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    sum=$((sum + $i * $sign))\n\
    \    sign=$((sign * -1))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[$i]}\n\
    \        if [[ ${elem} =~ ^-?[0-9]+$ ]]; then\n            sum=$(( sum + ${elem}\
    \ ))\n        fi\n        sign=$(( sign * ${elem} ))\n    done\n    echo \"$sum\
    \ * $sign\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmhm1ieog.sh: line 24: sign * 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs+=(\"${arr[i]}\")\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    product=$((product*${signs[i]}))\n  done\n  sum=$((${product}*${#signs[@]}))\n\
    \  if [[ ${sum} -gt 0 ]]; then\n    echo ${sum}\n  else\n    echo None\n  fi\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyfgobwt6.sh: line 25: product*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    (( sign *= ( $i < 0 ? 1 :\
    \ -1 ) ))\n    (( sum += sign * $i ))\n  done\n  echo $sum\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    local sign=${arr[i]}\n    signs+=(\"$sign\")\n    ((sum+=sign*product))\n\
    \    product*=$sign\n  done\n\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwyz8khr8.sh: line 25: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpwyz8khr8.sh: line 26: product*=1: command not found

    '
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | awk '{print $2}')\n\
    \    local signs_arr=$(echo \"$signs\" | tr \" \" \"\\n\" | sort -n)\n    local\
    \ signs_arr_len=${#signs_arr[@]}\n    local signs_arr_max=${#signs_arr[@]}\n \
    \   local signs_arr_max_idx=0\n    local signs_arr_max_val=${signs_arr[0]}\n \
    \   local signs_arr_max_sign=${signs_arr[0]}\n    local signs_arr_max_sign_index=0\n\
    \    local signs_arr_max_sign_idx=0\n    local signs_arr_max_sign_val=${signs_arr[0]}\n\
    \    local signs_arr_max_sign_val_index=0\n    local signs_arr_max_sign_val_sign=${signs_arr[0]}\n\
    \    local signs_arr_max_sign_val_sign_index=0\n    local signs_arr_max_sign_val_sign_idx=0\n\
    \    local signs_arr_max_sign_val_sign_val=${signs_arr[0]}\n    local signs_arr_max_sign_val_sign_val_index=0\n\
    \    local signs_arr_max_sign_val_sign_val_sign=${signs_arr[0]}\n    local signs_arr_max_sign_val_sign_val_sign_index=0\n\
    \    local signs_arr_max_sign_val_sign_val_sign_idx=0\n    local signs_arr_max_sign_val_sign_val_sign_val=${signs_arr[0]}\n\
    \    local signs_arr_max_sign_val_sign_val_sign_val_index=0\n    local signs_arr_max_sign_val_sign_val_sign_val_sign=${signs_arr[0]}\n\
    \    local signs_arr_max_sign_val_sign_val_sign_val_sign_index=0\n    local signs_arr_max_sign_val_sign_val_sign_val_sign_idx=0\n\
    \    local signs_arr_max_sign_val_sign_val_sign_val_sign_val=${signs_arr[0]}\n\
    \    local signs_arr_max_sign_val_sign_val_sign_val_sign_val_index=0\n    local\
    \ signs_arr_max_sign_val_sign_val_sign_val_sign_val_sign=${signs_arr[0]}\n   \
    \ local signs_arr_max_sign_val_sign_val_sign_val_sign_val_sign_index=0\n    local\
    \ signs_arr_max_sign_val_sign_val_sign_val_sign_val_sign_idx=0\n    local signs_arr_max_sign_val_sign_val_sign_val_sign_val_sign_val=${signs_arr[0]}\n\
    \    local signs_arr_max_sign_val_sign_val_sign_val_sign_val_sign_val_index=0\n\
    \    local \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | sed 's/ /\\n/g' | sort -n | uniq -u -d | wc -l)\n  local signs_arr=()\n\
    \  local signs_arr_len=0\n  local signs_arr_max=0\n  local signs_arr_min=0\n \
    \ local signs_arr_sum=0\n  local signs_arr_product=0\n  local signs_arr_product2=0\n\
    \  local signs_arr_product3=0\n  local signs_arr_product4=0\n  local signs_arr_product5=0\n\
    \  local signs_arr_product6=0\n  local signs_arr_product7=0\n  local signs_arr_product8=0\n\
    \  local signs_arr_product9=0\n  local signs_arr_product10=0\n  local signs_arr_product11=0\n\
    \  local signs_arr_product12=0\n  local signs_arr_product13=0\n  local signs_arr_product14=0\n\
    \  local signs_arr_product15=0\n  local signs_arr_product16=0\n  local signs_arr_product17=0\n\
    \  local signs_arr_product18=0\n  local signs_arr_product19=0\n  local signs_arr_product20=0\n\
    \  local signs_arr_product21=0\n  local signs_arr_product22=0\n  local signs_arr_product23=0\n\
    \  local signs_arr_product24=0\n  local signs_arr_product25=0\n  local signs_arr_product26=0\n\
    \  local signs_arr_product27=0\n  local signs_arr_product28=0\n  local signs_arr_product29=0\n\
    \  local signs_arr_product30=0\n  local signs_arr_product31=0\n  local signs_arr_product32=0\n\
    \  local signs_arr_product33=0\n  local signs_arr_product34=0\n  local signs_arr_product35=0\n\
    \  local signs_arr_product36=0\n  local signs_arr_product37=0\n  local signs_arr_product38=0\n\
    \  local signs_arr_product39=0\n  local signs_arr_product40=0\n  local signs_arr_product41=0\n\
    \  local signs_arr_product42=0\n  local signs_arr_product43=0\n  local signs_arr_product44=0\n\
    \  local signs_arr_product45=0\n  local signs_arr_product46=0\n  local signs_arr_product47=0\n\
    \  local signs_arr_product48=0\n  local sign\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    local j\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sum=$((sum + ${arr[i]}*sign))\n        sign=$((sign * -1))\n   \
    \ done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpdieihbh4.sh: line 22: sum + 1 2 2 -4*sign: syntax error in expression
    (error token is "2 2 -4*sign")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sign\n  local\
    \ sum\n  local i\n  local signs\n  local signs_sum\n  local signs_product\n  local\
    \ signs_product2\n  local signs_product3\n  local signs_product4\n  local signs_product5\n\
    \  local signs_product6\n  local signs_product7\n  local signs_product8\n  local\
    \ signs_product9\n  local signs_product10\n  local signs_product11\n  local signs_product12\n\
    \  local signs_product13\n  local signs_product14\n  local signs_product15\n \
    \ local signs_product16\n  local signs_product17\n  local signs_product18\n  local\
    \ signs_product19\n  local signs_product20\n  local signs_product21\n  local signs_product22\n\
    \  local signs_product23\n  local signs_product24\n  local signs_product25\n \
    \ local signs_product26\n  local signs_product27\n  local signs_product28\n  local\
    \ signs_product29\n  local signs_product30\n  local signs_product31\n  local signs_product32\n\
    \  local signs_product33\n  local signs_product34\n  local signs_product35\n \
    \ local signs_product36\n  local signs_product37\n  local signs_product38\n  local\
    \ signs_product39\n  local signs_product40\n  local signs_product41\n  local signs_product42\n\
    \  local signs_product43\n  local signs_product44\n  local signs_product45\n \
    \ local signs_product46\n  local signs_product47\n  local signs_product48\n  local\
    \ signs_product49\n  local signs_product50\n  local signs_product51\n  local signs_product52\n\
    \  local signs_product53\n  local signs_product54\n  local signs_product55\n \
    \ local signs_product56\n  local signs_product57\n  local signs_product58\n  local\
    \ signs_product59\n  local signs_product60\n  local signs_product61\n  local signs_product62\n\
    \  local signs_product63\n  local signs_product64\n  local signs_product65\n \
    \ local signs_product66\n  local signs_product67\n  local signs_product68\n  local\
    \ signs_product69\n  \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    for (( i=0; i<${#arr[@]}; i++ )); do\n  \
    \      signs=$(( signs * ${arr[i]} ))\n        sum=$(( sum + ${arr[i]} ))\n  \
    \  done\n    if [[ $sum == 0 ]]; then\n        echo \"None\"\n    else\n     \
    \   echo \"$(( signs * sum ))\"\n    fi\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_6ylwr07.sh: line 21: signs * 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=()\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    signs+=(${arr[i]})\n\
    \  done\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    sum=$(( sum + ${arr[i]} *\
    \ ${signs[i]} ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp42qns_kh.sh: line 23: sum + 1 2 2 -4 * 1 : syntax error in expression
    (error token is "2 2 -4 * 1 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs*i))\n  done\n\
    \  for i in $arr; do\n    sum=$((sum+$((i*signs))))\n  done\n  echo $sum\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs=$((signs + ${arr[i]}))\n  done\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    product=$((product * ${arr[i]}))\n  done\n  sum=$((signs * product))\n\
    \  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu6fsv8qp.sh: line 22: signs + 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=()\n  local sign\n  local i\n  for i in \"${arr[@]}\"; do\n   \
    \ sign=`echo \"$i\" | awk '{print $1*$2}'`\n    signs+=(\"$sign\")\n    sum+=\"\
    $sign\"\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      sum=$((sum+i))\n      product=$((product*sign))\n\
    \    else\n      sign=$((-sign))\n    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    local sign=\"${arr[i]}\"\n    signs=\"${signs}${sign} \"\n  \
    \  sum=\"${sum}${sign}${sum}\"\n    product=\"${product}${sign}${product}\"\n\
    \  done\n\n  echo \"${sum}${product}\"\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$2\n\
    \  local sum=0\n  local product=1\n  local sign\n  for sign in $signs; do\n  \
    \  sum=$((sum + sign*product))\n    product=$((product*sign))\n  done\n  if [\
    \ -z \"$arr\" ]; then\n    return 0\n  else\n    return $sum\n  fi\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sign\n\
    \    local sum\n    local i\n    local j\n    local signs\n    local sign\n  \
    \  local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n    local sign\n    local signs\n    local sign\n\
    \    local signs\n    local sign\n    local signs\n    local sign\n    local signs\n\
    \    local sign\n    local signs\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    for sign in $(echo $arr | tr \" \" \"\\n\" | sort -n | uniq);\
    \ do\n        signs=$((signs * sign))\n    done\n    echo \"$signs\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local sign\n    for sign in $signs;\
    \ do\n        ((sum+=sign*product))\n        product*=sign\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  for i in \"${arr[@]}\"; do\n    signs=$((signs\
    \ + $(( ${i} == 0 ? 1 : ${i} == -1 ? -1 : 0 ))))\n    sum=$(( ${sum} + $(( ${i}\
    \ * ${signs} ))))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn8v52k6d.sh: line 21: 1 2 2 -4 == 0 ? 1 : 1 2 2 -4 == -1 ? -1 :
    0 : syntax error in expression (error token is "2 2 -4 == 0 ? 1 : 1 2 2 -4 ==
    -1 ? -1 : 0 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign\n    for sign in $(echo $arr | sed 's/ /\\n/g'); do\n        sum=$((sum\
    \ + $sign))\n    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for i in $arr; do\n    (( sum += sign * i ))\n  \
    \  (( sign *= -1 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    local elem=${arr[$i]}\n\
    \    if [[ -z \"$elem\" ]]; then\n      echo \"None\"\n      return\n    fi\n\
    \    local sign=$((sign*elem))\n    sum=$((sum+sign))\n  done\n  echo \"$sum\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp94vz8esb.sh: line 26: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=()\n  local sign\n  for sign in $arr; do\n    signs+=(\"$sign\"\
    )\n  done\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum+=$((${arr[i]}*${signs[i]}))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp314442r2.sh: line 25: 1 2 2 -4*1: syntax error in expression (error
    token is "2 2 -4*1")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -u -c)\n  local signs_arr=($(echo\
    \ \"$signs\" | tr \" \" \"\\n\"))\n  local signs_arr_len=${#signs_arr[@]}\n  local\
    \ signs_arr_max=${#signs_arr[@]}\n  local signs_arr_max_idx=0\n  local signs_arr_max_val=${signs_arr[0]}\n\
    \  local signs_arr_max_sign=${signs_arr[0]}\n  local signs_arr_max_sign_index=0\n\
    \  local signs_arr_max_sign_idx=0\n  local signs_arr_max_sign_val=${signs_arr[0]}\n\
    \  local signs_arr_max_sign_val_index=0\n  local signs_arr_max_sign_val_index=0\n\
    \  local signs_arr_max_sign_val_sign=${signs_arr[0]}\n  local signs_arr_max_sign_val_sign_index=0\n\
    \  local signs_arr_max_sign_val_sign_idx=0\n  local signs_arr_max_sign_val_sign_val=${signs_arr[0]}\n\
    \  local signs_arr_max_sign_val_sign_val_index=0\n  local signs_arr_max_sign_val_sign_val_index=0\n\
    \  local signs_arr_max_sign_val_sign_val_sign=${signs_arr[0]}\n  local signs_arr_max_sign_val_sign_val_sign_index=0\n\
    \  local signs_arr_max_sign_val_sign_val_sign_idx=0\n  local signs_arr_max_sign_val_sign_val_sign_val=${signs_arr[0]}\n\
    \  local signs_arr_max_sign_val_sign_val_sign_val_index=0\n  local signs_arr_max_sign_val_sign_val_sign_val_index=0\n\
    \  local signs_arr_max_sign_val_sign_val_sign_val_sign=${signs_arr[0]}\n  local\
    \ signs_arr_max_sign_val_sign_val_sign_val_sign_index=0\n  local signs_arr_max_sign_val_sign_val_sign_val_sign_idx=0\n\
    \  local signs_arr_max_sign_val_sign_val_sign_val_sign_val=${signs_arr[0]}\n \
    \ local signs_arr_max_sign_val_sign_val_sign_val_sign_val_index=0\n  local signs_arr_max_sign_val_sign_val_sign_val_sign_val_index=0\n\
    \  local signs_arr_max_sign_val_sign_val_sign_val_sign_val_sign=${signs_arr[0]}\n\
    \  local signs_arr_max_sign_val_sign_val_sign_val_sign_val_sign_index=0\n  local\
    \ signs_arr_max_sign_val_sign_val_sign_val_sign_val_sign_idx=0\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$2\n\
    \  local sum=0\n  local product=1\n  local sign\n  local i\n  for i in $arr; do\n\
    \    sign=$((signs * $i))\n    sum=$((sum + sign))\n    product=$((product * sign))\n\
    \  done\n  echo $sum\n  echo $product\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local product\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local i\n\
    \    local j\n    local product\n    local sign\n    local signs\n    local sign\n\
    \    local sum\n    local i\n    local j\n    local product\n    local sign\n\
    \    local signs\n    local sign\n    local sum\n    local i\n    local j\n  \
    \  local product\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local i\n    local j\n    local product\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local product\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local i\n\
    \    local j\n    local product\n    local sign\n    local signs\n    local sign\n\
    \    local sum\n    local i\n    local j\n    local product\n    local sign\n\
    \    local signs\n    local sign\n    local sum\n    local i\n    local j\n  \
    \  local product\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local i\n    local j\n    local product\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local product\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local i\n\
    \    local j\n    local product\n    local sign\n    local signs\n    local sign\n\
    \    local sum\n    local i\n    local j\n    local product\n    local sign\n\
    \    local signs\n    local sign\n    local sum\n    local i\n    local j\n  \
    \  local product\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local i\n    local j\n    local product\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local product\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local i\n\
    \    local j\n    local product\n    local sign\n    local signs\n    local sign\n\
    \    local sum\n\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sum=0\n    local product=1\n    local i=0\n    while [ $i -lt ${#arr[@]}\
    \ ]; do\n        signs=\"${signs} ${arr[$i]}\"\n        (( i++ ))\n    done\n\
    \    signs=\"${signs} 0\"\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        ((\
    \ product*=-1 ))\n        if [[ ${arr[$i]} -gt 0 ]]; then\n            product*=-1\n\
    \        fi\n        (( sum+=${arr[$i]}*${signs} ))\n    done\n    echo \"${sum}\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg5di6ixw.sh: line 28: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpg5di6ixw.sh: line 31: ((: sum+=1 2 2 -4* 1 2 2 -4 0 : syntax error in
    expression (error token is "2 2 -4* 1 2 2 -4 0 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    local sign\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        sign=${arr[i]}\n        if (( sign > 0 )); then\n       \
    \     signs=$((signs+1))\n        fi\n        if (( sign < 0 )); then\n      \
    \      signs=$((signs-1))\n        fi\n        sum=$((sum+signs*${arr[i]}))\n\
    \    done\n    if (( signs == 0 )); then\n        sum=0\n    fi\n    echo \"$sum\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqs5zfeww.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpqs5zfeww.sh: line 26: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpqs5zfeww.sh: line 29: sum+signs*1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  local j\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local i\n    local sign\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        sign=${signs:$i:1}\n        (( sign*=-1 ))\n\
    \        (( sum+=${arr[i]}*${sign} ))\n        (( product*=sign ))\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp3gt6s_t.sh: line 25: ((: sum+=1 2 2 -4*0 : syntax error in expression
    (error token is "2 2 -4*0 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  local j\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    signs=$((signs+${arr[i]}))\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    sum=$((sum+${arr[i]}*signs))\n  done\n  echo $sum\n}\n\ncandidate() {\n \
    \   prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgtyo9r_y.sh: line 22: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -u | wc -l)\n    local signs_arr=()\n\
    \    for (( i=0; i<${#arr[@]}; i++ )); do\n        signs_arr+=(\"${signs[$i]}\"\
    )\n    done\n    local signs_str=$(IFS=\" \"; echo \"${signs_arr[*]}\")\n    local\
    \ signs_str_cnt=$(echo $signs_str | wc -w)\n    local signs_str_arr=()\n    for\
    \ (( i=0; i<${signs_str_cnt}; i++ )); do\n        signs_str_arr+=(\"${signs_str[$i]}\"\
    )\n    done\n    local signs_str_arr_cnt=$(echo $signs_str_arr | wc -w)\n    local\
    \ signs_str_arr_sum=$(echo $signs_str_arr | awk '{s+=$1} END {print s}')\n   \
    \ local signs_str_arr_product=$(echo $signs_str_arr | awk '{s+=$1} END {print\
    \ s}')\n    local signs_str_arr_product=$(echo $signs_str_arr | awk '{s+=$1} END\
    \ {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr | awk '{s+=$1}\
    \ END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr | awk\
    \ '{s+=$1} END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr\
    \ | awk '{s+=$1} END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr\
    \ | awk '{s+=$1} END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr\
    \ | awk '{s+=$1} END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr\
    \ | awk '{s+=$1} END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr\
    \ | awk '{s+=$1} END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr\
    \ | awk '{s+=$1} END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr\
    \ | awk '{s+=$1} END {print s}')\n    local signs_str_arr_product=$(echo $signs_str_arr\
    \ | awk '{s+=$1} END {print s}')\n    \n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n  local signs_len=${#signs}\n  local signs_sum=0\n\
    \  local signs_product=1\n  local signs_product2=1\n  local signs_product3=1\n\
    \  local signs_product4=1\n  local signs_product5=1\n  local signs_product6=1\n\
    \  local signs_product7=1\n  local signs_product8=1\n  local signs_product9=1\n\
    \  local signs_product10=1\n  local signs_product11=1\n  local signs_product12=1\n\
    \  local signs_product13=1\n  local signs_product14=1\n  local signs_product15=1\n\
    \  local signs_product16=1\n  local signs_product17=1\n  local signs_product18=1\n\
    \  local signs_product19=1\n  local signs_product20=1\n  local signs_product21=1\n\
    \  local signs_product22=1\n  local signs_product23=1\n  local signs_product24=1\n\
    \  local signs_product25=1\n  local signs_product26=1\n  local signs_product27=1\n\
    \  local signs_product28=1\n  local signs_product29=1\n  local signs_product30=1\n\
    \  local signs_product31=1\n  local signs_product32=1\n  local signs_product33=1\n\
    \  local signs_product34=1\n  local signs_product35=1\n  local signs_product36=1\n\
    \  local signs_product37=1\n  local signs_product38=1\n  local signs_product39=1\n\
    \  local signs_product40=1\n  local signs_product41=1\n  local signs_product42=1\n\
    \  local signs_product43=1\n  local signs_product44=1\n  local signs_product45=1\n\
    \  local signs_product46=1\n  local signs_product47=1\n  local signs_product48=1\n\
    \  local signs_product49=1\n  local signs_product50=1\n  local signs_product51=1\n\
    \  local signs_product52=1\n  local signs_product53=1\n  local signs_product54=1\n\
    \  local signs_product55=1\n  local signs_product56=1\n  local signs_product57=1\n\
    \  local signs_product58=1\n  local signs_product59=1\n  local signs_product\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n    local product\n    local i\n    local j\n    local sign\n \
    \   local signs\n    local sign\n    local sum\n    local product\n    local i\n\
    \    local j\n    local sign\n    local signs\n    local sign\n    local sum\n\
    \    local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sign\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sign\n \
    \   local sum\n\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=()\n\
    \    local sign\n    local sign\n    local sum=0\n    for sign in ${arr}; do\n\
    \        signs+=(\"$sign\")\n    done\n    for sign in ${signs[@]}; do\n     \
    \   sign=${sign//+/}\n        sum=$((sum + $sign))\n    done\n    echo \"$sum\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | sort -n | awk '{print $2}')\n\
    \  local signs_sum=0\n  local signs_product=1\n  local signs_product2=1\n  local\
    \ signs_product3=1\n  local signs_product4=1\n  local signs_product5=1\n  local\
    \ signs_product6=1\n  local signs_product7=1\n  local signs_product8=1\n  local\
    \ signs_product9=1\n  local signs_product10=1\n  local signs_product11=1\n  local\
    \ signs_product12=1\n  local signs_product13=1\n  local signs_product14=1\n  local\
    \ signs_product15=1\n  local signs_product16=1\n  local signs_product17=1\n  local\
    \ signs_product18=1\n  local signs_product19=1\n  local signs_product20=1\n  local\
    \ signs_product21=1\n  local signs_product22=1\n  local signs_product23=1\n  local\
    \ signs_product24=1\n  local signs_product25=1\n  local signs_product26=1\n  local\
    \ signs_product27=1\n  local signs_product28=1\n  local signs_product29=1\n  local\
    \ signs_product30=1\n  local signs_product31=1\n  local signs_product32=1\n  local\
    \ signs_product33=1\n  local signs_product34=1\n  local signs_product35=1\n  local\
    \ signs_product36=1\n  local signs_product37=1\n  local signs_product38=1\n  local\
    \ signs_product39=1\n  local signs_product40=1\n  local signs_product41=1\n  local\
    \ signs_product42=1\n  local signs_product43=1\n  local signs_product44=1\n  local\
    \ signs_product45=1\n  local signs_product46=1\n  local signs_product47=1\n  local\
    \ signs_product48=1\n  local signs_product49=1\n  local signs_product50=1\n  local\
    \ signs_product51=1\n  local signs_product52=1\n  local signs_product53=1\n  local\
    \ signs_product54=1\n  local signs_product55=1\n  local signs_product56=1\n  local\
    \ signs_product57=1\n  local signs_product58=1\n  local sign\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr ' ' '\\n' | sort -n | uniq -c | sort -n | awk '{print $2}')\n    local\
    \ signs_sum=0\n    local signs_product=1\n    local signs_product2=1\n    local\
    \ signs_product3=1\n    local signs_product4=1\n    local signs_product5=1\n \
    \   local signs_product6=1\n    local signs_product7=1\n    local signs_product8=1\n\
    \    local signs_product9=1\n    local signs_product10=1\n    local signs_product11=1\n\
    \    local signs_product12=1\n    local signs_product13=1\n    local signs_product14=1\n\
    \    local signs_product15=1\n    local signs_product16=1\n    local signs_product17=1\n\
    \    local signs_product18=1\n    local signs_product19=1\n    local signs_product20=1\n\
    \    local signs_product21=1\n    local signs_product22=1\n    local signs_product23=1\n\
    \    local signs_product24=1\n    local signs_product25=1\n    local signs_product26=1\n\
    \    local signs_product27=1\n    local signs_product28=1\n    local signs_product29=1\n\
    \    local signs_product30=1\n    local signs_product31=1\n    local signs_product32=1\n\
    \    local signs_product33=1\n    local signs_product34=1\n    local signs_product35=1\n\
    \    local signs_product36=1\n    local signs_product37=1\n    local signs_product38=1\n\
    \    local signs_product39=1\n    local signs_product40=1\n    local signs_product41=1\n\
    \    local signs_product42=1\n    local signs_product43=1\n    local signs_product44=1\n\
    \    local signs_product45=1\n    local signs_product46=1\n    local signs_product47=1\n\
    \    local signs_product48=1\n    local signs_product49=1\n    local signs_product50=1\n\
    \    local signs_product51=1\n    local signs_product52=1\n    local signs_product53=1\n\
    \    local signs_product54=1\n    local signs_product55=1\n    local signs_product56=1\n\
    \    local signs_product57=1\n    local signs_product58=1\n    local signs_\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs+=(\"\
    $i\")\n    product=$((product * $i))\n  done\n  for i in ${!signs[@]}; do\n  \
    \  sum=$((sum + $signs[i] * $product))\n  done\n  if [ -n \"$arr\" ]; then\n \
    \   return $sum\n  else\n    return 0\n  fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmply91d814.sh: line 26: sum + 1[i] * -16: syntax error: invalid arithmetic
    operator (error token is "[i] * -16")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    (( sum += sign * i ))\n \
    \   (( sign *= -1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sign\n  local sum=0\n  local i\n  local j\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=\"${arr[i]}\"\n    signs+=(\"$sign\")\n  done\n  for ((i=0;\
    \ i<${#signs[@]}; i++)); do\n    sign=${signs[i]}\n    for ((j=0; j<${#arr[@]};\
    \ j++)); do\n      arr[j]=\"${arr[j]} ${sign}\"\n    done\n  done\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    sign=${arr[i]}\n    sum+=\"$((${sign}*${sign}))\"\
    \n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpvkuzihq5.sh: line 34: 1 2 2 -4 1 2 2 -4*1 2 2 -4 1 2 2 -4: syntax
    error in expression (error token is "2 2 -4 1 2 2 -4*1 2 2 -4 1 2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n    \
    \    signs=$((signs+${arr[i]}))\n    done\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sum=$((sum+${arr[i]}*${signs}))\n    done\n    echo \"$sum\"\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz2x6pise.sh: line 21: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sum\n  local product\n  local i\n  local j\n  local sign\n  local signs\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign\n    for sign in $arr; do\n        ((sum+=sign))\n    done\n \
    \   echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local product=1\n  local i\n  for i in $arr; do\n    sign=$((sign*i))\n\
    \    product=$((product*sign))\n    sum=$((sum+product))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$2\n\
    \    local sum=0\n    local product=1\n    local i\n    local sign\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        sign=${signs:$i:1}\n        if [[ $sign ==\
    \ \"-\" ]]; then\n            product*=-1\n        elif [[ $sign == \"+\" ]];\
    \ then\n            product*=1\n        fi\n        sum+=${arr[i]}*$product\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[i]}\n\
    \        if (( elem == 0 )); then\n            sum=$(( sum + sign ))\n       \
    \     sign=1\n        elif (( elem > 0 )); then\n            sign=$(( sign * -1\
    \ ))\n        else\n            sign=$(( sign * 1 ))\n        fi\n    done\n \
    \   echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpii_8gdfe.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpii_8gdfe.sh: line 24: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  for i in \"${arr[@]}\"; do\n    signs=$((signs+$i))\n\
    \  done\n  for i in \"${arr[@]}\"; do\n    sum=$((sum+$i*$signs))\n  done\n  echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6pib832y.sh: line 21: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ signs\n  local product\n  local sign\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    sign=${arr[i]}\n    signs=$((signs+sign))\n  done\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=${arr[i]}\n    product=$((product*sign))\n  done\n  sum=$((sum+signs))\n\
    \  sum=$((sum*product))\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw1iyc4ff.sh: line 28: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\n\
    \  local sum=0\n  local product=1\n  local i\n  local sign\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=\"${arr[i]}\"\n    signs=\"${signs} ${sign}\"\n  done\n\
    \  signs=\"${signs} 1\"\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=\"${arr[i]}\"\
    \n    sign=\"${sign} 1\"\n    product=\"${product} * ${sign}\"\n  done\n  sum=\"\
    ${product}\"\n  echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=\"\
    \"\n    local sign\n    local sum=0\n    local i\n    local j\n    local sign\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=${arr[i]}\n        if ((\
    \ sign < 0 )); then\n            signs=\"${signs} -1\"\n        else\n       \
    \     signs=\"${signs} 1\"\n        fi\n        sum=$(( sum + ${arr[i]} * ${signs}\
    \ ))\n    done\n    echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptpphyat5.sh: line 25: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmptpphyat5.sh: line 30: sum + 1 2 2 -4 *  1 : syntax error in expression
    (error token is "2 2 -4 *  1 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[$i]}\n\
    \        if (( elem == 0 )); then\n            sign=0\n        elif (( elem >\
    \ 0 )); then\n            sign=1\n        fi\n        sum=$(( sum + sign * elem\
    \ ))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuabmf6mj.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpuabmf6mj.sh: line 23: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmpuabmf6mj.sh: line 26: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sign\n  local sum=0\n  local product=1\n  local i\n  local j\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  for sign in ${arr}; do\n    signs=$((signs*sign))\n\
    \  done\n  for sign in ${arr}; do\n    sum=$((sum+signs*sign))\n  done\n  echo\
    \ $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sign\n\
    \    local sum\n    local i\n    local j\n    local signs\n    local sign\n  \
    \  local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n    local product\n    local\
    \ signs\n    local sign\n    local product\n    local signs\n    local sign\n\
    \    local product\n    local signs\n    local sign\n\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local sign=1\n  local i\n  for i in $arr; do\n    (( sum += sign * i ))\n \
    \   (( sign *= -1 ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local \n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  local j\n  local signs\n  local signs_len\n  local\
    \ signs_product\n  local signs_product2\n  local signs_product3\n  local signs_product4\n\
    \  local signs_product5\n  local signs_product6\n  local signs_product7\n  local\
    \ signs_product8\n  local signs_product9\n  local signs_product10\n  local signs_product11\n\
    \  local signs_product12\n  local signs_product13\n  local signs_product14\n \
    \ local signs_product15\n  local signs_product16\n  local signs_product17\n  local\
    \ signs_product18\n  local signs_product19\n  local signs_product20\n  local signs_product21\n\
    \  local signs_product22\n  local signs_product23\n  local signs_product24\n \
    \ local signs_product25\n  local signs_product26\n  local signs_product27\n  local\
    \ signs_product28\n  local signs_product29\n  local signs_product30\n  local signs_product31\n\
    \  local signs_product32\n  local signs_product33\n  local signs_product34\n \
    \ local signs_product35\n  local signs_product36\n  local signs_product37\n  local\
    \ signs_product38\n  local signs_product39\n  local signs_product40\n  local signs_product41\n\
    \  local signs_product42\n  local signs_product43\n  local signs_product44\n \
    \ local signs_product45\n  local signs_product46\n  local signs_product47\n  local\
    \ signs_product48\n  local signs_product49\n  local signs_product50\n  local signs_product51\n\
    \  local signs_product52\n  local signs_product53\n  local signs_product54\n \
    \ local signs_product55\n  local signs_product56\n  local signs_product57\n  local\
    \ signs_product58\n  local signs_product59\n  local signs_product60\n  local signs_product61\n\
    \  local signs_product62\n  local signs_product63\n  local signs_product64\n \
    \ local signs_product65\n  local signs_product66\n  local signs_product67\n  local\
    \ signs_product68\n  local signs_\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=$((signs\
    \ + $i))\n    product=$((product * $i))\n  done\n  if [[ $signs -gt 0 ]]; then\n\
    \    sum=$((sum + signs * product))\n  fi\n  if [[ $signs -lt 0 ]]; then\n   \
    \ sum=$((sum - signs * product))\n  fi\n  if [[ $sum -eq 0 ]]; then\n    sum=\"\
    None\"\n  fi\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n  local sum=0\n  local product=1\n\
    \  local sign\n  for sign in $signs; do\n    sum=$((sum + $sign * $product))\n\
    \    product=$((product * $sign))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2\
    \ -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | sed 's/ /\\n/g' | sed 's/^/1/g' | sed 's/$/-1/g' | sed 's/^/1/g'\
    \ | sed 's/$/-1/g')\n  local sum=0\n  local product=1\n  local sign\n  for sign\
    \ in $signs; do\n    sum=$((sum + sign*product))\n    product=$((product*sign))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sign\n\
    \    local signs\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sum\n    local product\n    local\
    \ i\n    local j\n    local sign\n    local signs\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sum\n  \
    \  local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sum\n    local product\n    local i\n    local j\n    local sign\n\
    \    local signs\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sum\n    local product\n    local\
    \ i\n    local j\n    local sign\n    local signs\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sum\n  \
    \  local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sum\n    local product\n    local i\n    local j\n    local sign\n\
    \    local signs\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sum\n    local product\n    local\
    \ i\n    local j\n    local sign\n    local signs\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sum\n  \
    \  local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sum\n    local product\n    local i\n    local j\n    local sign\n\
    \    local signs\n    local sum\n    local product\n    local i\n    local j\n\
    \    local sign\n    local signs\n    local sum\n    local product\n    local\
    \ i\n    local j\n    local sign\n    local signs\n    local sum\n    local product\n\
    \    local i\n    local j\n    local sign\n    local signs\n    local sum\n  \
    \  local product\n    local i\n    local j\n    local sign\n    local signs\n\
    \    local sum\n    local product\n    local i\n    local j\n    local sign\n\
    \    local \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$2\n\
    \  local sum=0\n  local product=1\n  local i\n  for i in $arr; do\n    local sign=$signs\n\
    \    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      sign=$((sign*$i))\n    fi\n    sum=$((sum+sign))\n\
    \    product=$((product*sign))\n  done\n  echo $((sum*product))\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n  local signs_arr=($signs)\n  local signs_arr_len=${#signs_arr[@]}\n\
    \  local signs_arr_i=0\n  local signs_arr_j=0\n  local signs_arr_sign=0\n  local\
    \ signs_arr_product=1\n  local signs_arr_sum=0\n  local signs_arr_product2=1\n\
    \  local signs_arr_product3=1\n  local signs_arr_product4=1\n  local signs_arr_product5=1\n\
    \  local signs_arr_product6=1\n  local signs_arr_product7=1\n  local signs_arr_product8=1\n\
    \  local signs_arr_product9=1\n  local signs_arr_product10=1\n  local signs_arr_product11=1\n\
    \  local signs_arr_product12=1\n  local signs_arr_product13=1\n  local signs_arr_product14=1\n\
    \  local signs_arr_product15=1\n  local signs_arr_product16=1\n  local signs_arr_product17=1\n\
    \  local signs_arr_product18=1\n  local signs_arr_product19=1\n  local signs_arr_product20=1\n\
    \  local signs_arr_product21=1\n  local signs_arr_product22=1\n  local signs_arr_product23=1\n\
    \  local signs_arr_product24=1\n  local signs_arr_product25=1\n  local signs_arr_product26=1\n\
    \  local signs_arr_product27=1\n  local signs_arr_product28=1\n  local signs_arr_product29=1\n\
    \  local signs_arr_product30=1\n  local signs_arr_product31=1\n  local signs_arr_product32=1\n\
    \  local signs_arr_product33=1\n  local signs_arr_product34=1\n  local signs_arr_product35=1\n\
    \  local signs_arr_product36=1\n  local signs_arr_product37=1\n  local signs_arr_product38=1\n\
    \  local signs_arr_product39=1\n  local signs_arr_product40=1\n  local signs_arr_product41=1\n\
    \  local signs_arr_product42=1\n  local signs_arr_product43=1\n  local signs_arr_product44=1\n\
    \  local signs_arr_product45=1\n  local signs_arr_product46=1\n  local signs_arr_product47=1\n\
    \  local signs_arr_product48=1\n  local signs_arr_product49\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local j\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    signs+=(\"${arr[i]}\")\n  done\n  for ((i=0; i<${#signs[@]};\
    \ i++)); do\n    product=$((product * ${signs[i]}))\n  done\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sum=$((sum + ${arr[i]} * ${product}))\n  done\n  echo \"${sum}\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsqcrxuv1.sh: line 26: product * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=$((signs * $i))\n    sum=$((sum + $i))\n  done\n  product=$((signs\
    \ * product))\n  if (( signs > 0 )); then\n    product=$((product*-1))\n  fi\n\
    \  echo $((sum*product))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpxppt_cxi.sh: line 22: signs * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n    local signs_sum=0\n  \
    \  local signs_product=1\n    for sign in $signs; do\n        signs_sum=$((signs_sum\
    \ + $sign))\n        signs_product=$((signs_product * $sign))\n    done\n    echo\
    \ \"$signs_sum * $signs_product\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  for sign in ${arr[@]}; do\n    ((signs+=sign))\n\
    \  done\n  for sign in ${arr[@]}; do\n    ((sum+=sign*signs))\n  done\n  echo\
    \ $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"\
    0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  local j\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=$((signs\
    \ + $i))\n    product=$((product * $i))\n  done\n  sum=$((signs * product))\n\
    \  if [[ $sum -eq 0 ]]; then\n    return 0\n  else\n    return $sum\n  fi\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n    local signs_sum=0\n    local signs_product=1\n\
    \    for sign in $signs; do\n        signs_sum=$((signs_sum + $sign))\n      \
    \  signs_product=$((signs_product * $sign))\n    done\n    echo \"$signs_sum *\
    \ $signs_product\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n    \
    \    local val=${arr[i]}\n        if [[ ${val} =~ ^-?[0-9]+$ ]]; then\n      \
    \      signs=$((signs+1))\n            sum=$((sum+val))\n        else\n      \
    \      signs=$((signs+1))\n        fi\n    done\n    if [[ ${signs} -eq 0 ]];\
    \ then\n        echo \"0\"\n    elif [[ ${signs} -eq 1 ]]; then\n        echo\
    \ \"1\"\n    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \   if [[ ${arr[i]} == 0 ]]; then\n            sum=$((sum+sign))\n           \
    \ sign=0\n        elif [[ ${arr[i]} > 0 ]]; then\n            sum=$((sum+sign*${arr[i]}))\n\
    \            sign=1\n        elif [[ ${arr[i]} < 0 ]]; then\n            sum=$((sum+sign*${arr[i]}))\n\
    \            sign=-1\n        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptohck5ey.sh: line 25: sum+sign*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    signs+=(\"${arr[i]}\")\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    product=$((product * ${signs[i]}))\n  done\n  sum=$((${product} * ${#signs[@]}))\n\
    \  echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe0vv0q2u.sh: line 25: product * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local i\n    local sum=0\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sign=${arr[i]}\n        if (( sign < 0 )); then\n            signs=$((signs+1))\n\
    \        fi\n        sum=$((sum+sign*signs))\n    done\n    if (( sum == 0 ));\
    \ then\n        echo \"None\"\n    else\n        echo \"${sum}\"\n    fi\n}\n\n\
    candidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu53l64ee.sh: line 23: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpu53l64ee.sh: line 26: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local sign\n    for sign in ${arr[@]}; do\n        ((signs+=sign))\n\
    \    done\n    for sign in ${arr[@]}; do\n        ((sum+=sign*$signs))\n    done\n\
    \    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs+=(\
    \ $(( i % 2 )) )\n    sum+=( $(( i * product )) )\n    product=$(( product * 2\
    \ ))\n  done\n  if [ -z \"$arr\" ]; then\n    return 0\n  fi\n  echo \"$sum\"\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n    local sum=0\n    local product=1\n    for sign\
    \ in $signs; do\n        sum=$((sum + $sign*$product))\n        product=$((product*$sign))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    local sign=${arr[i]}\n    if [[ ${sign} == -* ]]; then\n      signs=\"\
    ${signs} -1\"\n    elif [[ ${sign} == +* ]]; then\n      signs=\"${signs} 1\"\n\
    \    else\n      signs=\"${signs} 0\"\n    fi\n    sum=$((sum + ${signs}))\n \
    \   product=$((product * ${sign}))\n  done\n  echo \"${sum}\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7jw4nqu6.sh: line 31: product * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n    \
    \    signs=$((signs+${arr[i]}))\n    done\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        sum=$((sum+${arr[i]}*${signs}))\n    done\n    echo \"$sum\"\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz2x6pise.sh: line 21: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  local i\n  local j\n  local sign\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    sign=${arr[i]}\n    signs=$((signs*sign))\n  done\n\
    \  for ((i=0; i<${#arr[@]}; i++)); do\n    sign=${arr[i]}\n    signs=$((signs*sign))\n\
    \  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n   \
    \ signs=$((signs*sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n\
    \    sign=${arr[i]}\n    signs=$((signs*sign))\n  done\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    sign=${arr[i]}\n    signs=$((signs*sign))\n  done\n  for i in\
    \ $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs*sign))\n\
    \  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n   \
    \ signs=$((signs*sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n\
    \    sign=${arr[i]}\n    signs=$((signs*sign))\n  done\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    sign=${arr[i]}\n    signs=$((signs*sign))\n  done\n  for i in\
    \ $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n    signs=$((signs*sign))\n\
    \  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n    sign=${arr[i]}\n   \
    \ signs=$((signs*sign))\n  done\n  for i in $(seq 0 $((${#arr[@]} - 1))); do\n\
    \    sign=${arr[i]}\n    signs=$((signs*sign))\n  done\n  for i in $(seq 0 $((${#arr[@]}\
    \ - 1))); do\n    sign=${arr[i]}\n    signs=$((signs*sign))\n  done\n  for i in\
    \ $(seq 0 $((${\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpynp2syzz.sh: line 75: unexpected EOF while looking for matching
    `)''

    /tmp/tmpynp2syzz.sh: line 95: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    local product=1\n    for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n        local elem=${arr[i]}\n        if [[ ${elem} -eq 0 ]]; then\n   \
    \         echo \"None\"\n            return\n        fi\n        local sign=${elem}\n\
    \        sum=$((sum + sign*product))\n        product=$((product*sign))\n    done\n\
    \    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\"\
    ) = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n \
    \   [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk1gipbev.sh: line 22: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpk1gipbev.sh: line 27: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \   ((sum+=${arr[i]}*sign))\n        ((sign=sign*-1))\n    done\n    echo \"$sum\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnwzmdlh7.sh: line 21: ((: sum+=1 2 2 -4*sign: syntax error in expression
    (error token is "2 2 -4*sign")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=()\n  local product=1\n  local i\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    signs+=(\"${arr[i]}\")\n  done\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    product=$((product * ${signs[i]}))\n  done\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sum=$((sum + ${arr[i]} * product))\n  done\n\n  echo \"$sum\"\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzoqyyjb6.sh: line 27: product * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -u)\n    local signs_len=${#signs}\n\
    \    local signs_sum=0\n    local signs_product=1\n    local signs_product2=0\n\
    \    local signs_product3=0\n    local signs_product4=0\n    local signs_product5=0\n\
    \    local signs_product6=0\n    local signs_product7=0\n    local signs_product8=0\n\
    \    local signs_product9=0\n    local signs_product10=0\n    local signs_product11=0\n\
    \    local signs_product12=0\n    local signs_product13=0\n    local signs_product14=0\n\
    \    local signs_product15=0\n    local signs_product16=0\n    local signs_product17=0\n\
    \    local signs_product18=0\n    local signs_product19=0\n    local signs_product20=0\n\
    \    local signs_product21=0\n    local signs_product22=0\n    local signs_product23=0\n\
    \    local signs_product24=0\n    local signs_product25=0\n    local signs_product26=0\n\
    \    local signs_product27=0\n    local signs_product28=0\n    local signs_product29=0\n\
    \    local signs_product30=0\n    local signs_product31=0\n    local signs_product32=0\n\
    \    local signs_product33=0\n    local signs_product34=0\n    local signs_product35=0\n\
    \    local signs_product36=0\n    local signs_product37=0\n    local signs_product38=0\n\
    \    local signs_product39=0\n    local signs_product40=0\n    local signs_product41=0\n\
    \    local signs_product42=0\n    local signs_product43=0\n    local signs_product44=0\n\
    \    local signs_product45=0\n    local signs_product46=0\n    local signs_product47=0\n\
    \    local signs_product48=0\n    local signs_product49=0\n    local signs_product50=0\n\
    \    local signs_product51=0\n    local signs_product52=0\n    local signs_product53=0\n\
    \    local signs_product54=0\n    local signs_product55=0\n    local signs_product56=0\n\
    \    local signs_product57=0\n    local signs_product58=0\n    local signs_\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sign\n    local sum=0\n    local i\n    local j\n    local sign\n \
    \   local product\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=\"${signs} ${i}\"\n  done\n  signs=\"${signs}1\"\n  for i in \"${arr[@]}\"\
    ; do\n    product=$((product*$i))\n  done\n  sum=$((product*$signs))\n  if [ -z\
    \ \"$sum\" ]; then\n    sum=0\n  fi\n  echo \"$sum\"\n}\n\ncandidate() {\n   \
    \ prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq4947tui.sh: line 26: product*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -u -c)\n    local signs_arr=()\n\
    \    for sign in $signs; do\n        signs_arr+=(\"$sign\")\n    done\n    local\
    \ sum=0\n    for sign in $signs_arr; do\n        sum=$((sum + sign*${arr[$((${#arr[@]}\
    \ - 1))]}))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm41jhkdo.sh: line 24: sum + sign*1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  for i in $arr; do\n    signs=$((signs * $i))\n \
    \ done\n  for i in $arr; do\n    sum=$((sum + $i * $signs))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sign\n\
    \    local sum\n    local i\n    local signs\n    local signs_sum\n    local signs_product\n\
    \    local signs_product2\n    local signs_product3\n    local signs_product4\n\
    \    local signs_product5\n    local signs_product6\n    local signs_product7\n\
    \    local signs_product8\n    local signs_product9\n    local signs_product10\n\
    \    local signs_product11\n    local signs_product12\n    local signs_product13\n\
    \    local signs_product14\n    local signs_product15\n    local signs_product16\n\
    \    local signs_product17\n    local signs_product18\n    local signs_product19\n\
    \    local signs_product20\n    local signs_product21\n    local signs_product22\n\
    \    local signs_product23\n    local signs_product24\n    local signs_product25\n\
    \    local signs_product26\n    local signs_product27\n    local signs_product28\n\
    \    local signs_product29\n    local signs_product30\n    local signs_product31\n\
    \    local signs_product32\n    local signs_product33\n    local signs_product34\n\
    \    local signs_product35\n    local signs_product36\n    local signs_product37\n\
    \    local signs_product38\n    local signs_product39\n    local signs_product40\n\
    \    local signs_product41\n    local signs_product42\n    local signs_product43\n\
    \    local signs_product44\n    local signs_product45\n    local signs_product46\n\
    \    local signs_product47\n    local signs_product48\n    local signs_product49\n\
    \    local signs_product50\n    local signs_product51\n    local signs_product52\n\
    \    local signs_product53\n    local signs_product54\n    local signs_product55\n\
    \    local signs_product56\n    local signs_product57\n    local signs_product58\n\
    \    local signs_product59\n    local signs_product60\n    local signs_product61\n\
    \    local signs_product62\n    local signs_product63\n    local signs_product64\n\
    \    local signs_product65\n    local signs_product66\n    local signs_product67\n\
    \    local signs_product68\n    local signs_product69\n    \n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -u | wc -l)\n    local signs_sum=0\n\
    \    local signs_product=1\n    for sign in $signs; do\n        signs_sum=$((signs_sum\
    \ + $sign))\n        signs_product=$((signs_product * $sign))\n    done\n    if\
    \ [ $signs_sum -eq 0 ]; then\n        echo \"None\"\n    else\n        echo \"\
    $signs_sum * $signs_product\"\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  local j\n  local sum1\n  local sum2\n\
    \  local sum3\n  local sum4\n  local sum5\n  local sum6\n  local sum7\n  local\
    \ sum8\n  local sum9\n  local sum10\n  local sum11\n  local sum12\n  local sum13\n\
    \  local sum14\n  local sum15\n  local sum16\n  local sum17\n  local sum18\n \
    \ local sum19\n  local sum20\n  local sum21\n  local sum22\n  local sum23\n  local\
    \ sum24\n  local sum25\n  local sum26\n  local sum27\n  local sum28\n  local sum29\n\
    \  local sum30\n  local sum31\n  local sum32\n  local sum33\n  local sum34\n \
    \ local sum35\n  local sum36\n  local sum37\n  local sum38\n  local sum39\n  local\
    \ sum40\n  local sum41\n  local sum42\n  local sum43\n  local sum44\n  local sum45\n\
    \  local sum46\n  local sum47\n  local sum48\n  local sum49\n  local sum50\n \
    \ local sum51\n  local sum52\n  local sum53\n  local sum54\n  local sum55\n  local\
    \ sum56\n  local sum57\n  local sum58\n  local sum59\n  local sum60\n  local sum61\n\
    \  local sum62\n  local sum63\n  local sum64\n  local sum65\n  local sum66\n \
    \ local sum67\n  local sum68\n  local sum69\n  local sum70\n  local sum71\n  local\
    \ sum72\n  local sum73\n  local sum74\n  local sum75\n  local sum76\n  local sum77\n\
    \  local sum78\n  local sum79\n  local sum80\n  local sum81\n  local sum82\n \
    \ local sum83\n  local sum84\n  local sum85\n  local sum86\n  local sum87\n  local\
    \ sum88\n  local sum89\n  local sum90\n  local sum91\n  local sum92\n  local sum93\n\
    \  local sum94\n  local sum95\n  local sum96\n  local sum97\n\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\n\
    \  local sum=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local\
    \ signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local sign\n\
    \  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n  local\
    \ sign\n  local signs\n  local sign\n  local signs\n  local sign\n  local signs\n\
    \  local sign\n  local \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        local elem=${arr[$i]}\n\
    \        if [[ ${elem} -eq 0 ]]; then\n            signs=0\n        elif [[ ${elem}\
    \ -gt 0 ]]; then\n            signs=1\n        elif [[ ${elem} -lt 0 ]]; then\n\
    \            signs=-1\n        fi\n        sum=$(( sum + signs * elem ))\n   \
    \ done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmph8awbut3.sh: line 21: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmph8awbut3.sh: line 23: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmph8awbut3.sh: line 25: [[: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmph8awbut3.sh: line 28: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sign\n    local sign\n    local sum=0\n    local i\n    local j\n \
    \   local sign\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sign=\"${arr[i]}\"\
    \n        signs+=(\"$sign\")\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        sign=\"${arr[i]}\"\n        sign=${sign//-/+}\n        sign=${sign//+/-}\n\
    \        sign=${sign//0/+}\n        sign=${sign//1/-}\n        sign=${sign//2/+}\n\
    \        sign=${sign//3/-}\n        sign=${sign//4/+}\n        sign=${sign//5/-}\n\
    \        sign=${sign//6/+}\n        sign=${sign//7/-}\n        sign=${sign//8/+}\n\
    \        sign=${sign//9/-}\n        sign=${sign//+/-}\n        sign=${sign//-/+}\n\
    \        sign=${sign//+/-}\n        sign=${sign//0/+}\n        sign=${sign//1/-}\n\
    \        sign=${sign//2/+}\n        sign=${sign//3/-}\n        sign=${sign//4/+}\n\
    \        sign=${sign//5/-}\n        sign=${sign//6/+}\n        sign=${sign//7/-}\n\
    \        sign=${sign//8/+}\n        sign=${sign//9/-}\n        sign=${sign//+/-}\n\
    \        sign=${sign//-/+}\n        sign=${sign//+/-}\n        sign=${sign//0/+}\n\
    \        sign=${sign//1/-}\n        sign=${sign//2/+}\n        sign=${sign//3/-}\n\
    \        sign=${sign//4/+}\n        sign=${sign//5/-}\n        sign=${sign//6/+}\n\
    \        sign=${sign//7/-}\n        sign=${sign//8/+}\n        sign=${sign//9/-}\n\
    \        sign=${sign//+/-}\n        sign=${sign//-/+}\n        sign=${sign//+/-}\n\
    \        sign=${sign//0/+}\n        sign=${sign//1/-}\n        sign=${sign//2/+}\n\
    \        sign=${sign//3/-}\n        sign=${sign//4/+}\n        sign=${sign//5/-\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp12nhrnnv.sh: line 96: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    local sign\n    for sign in \"${arr[@]}\"; do\n      \
    \  ((signs+=sign))\n    done\n    for sign in \"${arr[@]}\"; do\n        ((sum+=sign*signs))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpvyn07rn1.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmpvyn07rn1.sh: line 24: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local sign=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n     \
    \   ((sign*=arr[i]))\n        sum+=sign\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6exz0vs_.sh: line 21: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | head -1)\n    local\
    \ signs_count=$(echo $signs | wc -w)\n    local signs_sum=0\n    local signs_product=1\n\
    \    for sign in $signs; do\n        signs_sum=$((signs_sum + $sign))\n      \
    \  signs_product=$((signs_product * $sign))\n    done\n    echo $signs_sum\n \
    \   if [[ $signs_count -gt 0 ]]; then\n        echo $signs_product\n    else\n\
    \        echo \"None\"\n    fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  local signs\n  local signs_len\n  local signs_product\n\
    \  local signs_product2\n  local signs_product3\n  local signs_product4\n  local\
    \ signs_product5\n  local signs_product6\n  local signs_product7\n  local signs_product8\n\
    \  local signs_product9\n  local signs_product10\n  local signs_product11\n  local\
    \ signs_product12\n  local signs_product13\n  local signs_product14\n  local signs_product15\n\
    \  local signs_product16\n  local signs_product17\n  local signs_product18\n \
    \ local signs_product19\n  local signs_product20\n  local signs_product21\n  local\
    \ signs_product22\n  local signs_product23\n  local signs_product24\n  local signs_product25\n\
    \  local signs_product26\n  local signs_product27\n  local signs_product28\n \
    \ local signs_product29\n  local signs_product30\n  local signs_product31\n  local\
    \ signs_product32\n  local signs_product33\n  local signs_product34\n  local signs_product35\n\
    \  local signs_product36\n  local signs_product37\n  local signs_product38\n \
    \ local signs_product39\n  local signs_product40\n  local signs_product41\n  local\
    \ signs_product42\n  local signs_product43\n  local signs_product44\n  local signs_product45\n\
    \  local signs_product46\n  local signs_product47\n  local signs_product48\n \
    \ local signs_product49\n  local signs_product50\n  local signs_product51\n  local\
    \ signs_product52\n  local signs_product53\n  local signs_product54\n  local signs_product55\n\
    \  local signs_product56\n  local signs_product57\n  local signs_product58\n \
    \ local signs_product59\n  local signs_product60\n  local signs_product61\n  local\
    \ signs_product62\n  local signs_product63\n  local signs_product64\n  local signs_product65\n\
    \  local signs_product66\n  local signs_product67\n  local signs_product68\n \
    \ local signs_product69\n  \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 2
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n\n  for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n    local sign=${arr[i]}\n    signs=\"${signs} ${sign}\"\n  done\n\
    \n  signs=\"${signs} 0\"\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    local\
    \ sign=${arr[i]}\n    local signs=${signs//${sign}//}\n    local signs=${signs//1/}\n\
    \    local signs=${signs//-1/}\n    local signs=${signs//0/}\n    local signs=${signs//+/}\n\
    \    local signs=${signs//-/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\\
    +/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local\
    \ signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\\
    +/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local\
    \ signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\\
    +/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local\
    \ signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\\
    +/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local\
    \ signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\\
    +/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local\
    \ signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\\
    +/}\n    local signs=${signs//\\+/}\n    local signs=${signs//\\+/}\n\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv_o7p4_u.sh: line 67: syntax error near unexpected token `}''

    /tmp/tmpv_o7p4_u.sh: line 67: `}''

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    ((signs+=${i}*${signs})) || return 0\n    ((sum+=${i}*${product})) || return\
    \ 0\n    ((product*=${signs}))\n  done\n  ((signs+=${product})) || return 0\n\
    \  ((sum+=${product})) || return 0\n  echo \"${sum}\"\n}\n\ncandidate() {\n  \
    \  prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\"\
    ) = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1\
    \ 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\"\
    ) = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptekrhx3s.sh: line 22: ((: signs+=1 2 2 -4*0: syntax error in expression
    (error token is "2 2 -4*0")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    local i\n    local j\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        ((j=${arr[i]}+${sign}))\n        ((sum+=j))\n        ((sign=sign*-1))\n\
    \    done\n    echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmphw2qp3gj.sh: line 22: ((: j=1 2 2 -4+1: syntax error in expression
    (error token is "2 2 -4+1")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=$(echo\
    \ \"$arr\" | tr \" \" \"\\n\" | sort -n | uniq -c | awk '{print $2}')\n  local\
    \ signs_sum=0\n  local signs_product=1\n  for sign in $signs; do\n    signs_sum=$((signs_sum\
    \ + sign))\n    signs_product=$((signs_product * sign))\n  done\n  echo \"$signs_sum\
    \ * $signs_product\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040162
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local product=1\n    local i\n    local j\n    local sign\n\
    \    local sign1\n    local sign2\n    local sign3\n    local sign4\n    local\
    \ sign5\n    local sign6\n    local sign7\n    local sign8\n    local sign9\n\
    \    local sign10\n    local sign11\n    local sign12\n    local sign13\n    local\
    \ sign14\n    local sign15\n    local sign16\n    local sign17\n    local sign18\n\
    \    local sign19\n    local sign20\n    local sign21\n    local sign22\n    local\
    \ sign23\n    local sign24\n    local sign25\n    local sign26\n    local sign27\n\
    \    local sign28\n    local sign29\n    local sign30\n    local sign31\n    local\
    \ sign32\n    local sign33\n    local sign34\n    local sign35\n    local sign36\n\
    \    local sign37\n    local sign38\n    local sign39\n    local sign40\n    local\
    \ sign41\n    local sign42\n    local sign43\n    local sign44\n    local sign45\n\
    \    local sign46\n    local sign47\n    local sign48\n    local sign49\n    local\
    \ sign50\n    local sign51\n    local sign52\n    local sign53\n    local sign54\n\
    \    local sign55\n    local sign56\n    local sign57\n    local sign58\n    local\
    \ sign59\n    local sign60\n    local sign61\n    local sign62\n    local sign63\n\
    \    local sign64\n    local sign65\n    local sign66\n    local sign67\n    local\
    \ sign68\n    local sign69\n    local sign70\n    local sign71\n    local sign72\n\
    \    local sign73\n    local sign74\n    local sign75\n    local sign76\n    local\
    \ sign77\n    local sign78\n    local sign79\n    local sign80\n    local sign81\n\
    \    local sign82\n    local sign83\n    local sign84\n    local sign85\n    local\
    \ sign86\n    local sign87\n    local sign88\n    local sign89\n    local sign90\n\
    \    local sign91\n    local sign92\n    local sign93\n    local sign94\n    local\
    \ sign95\n    local sign\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local sign\n  local i\n  for i in $arr; do\n    sign=$(( $i\
    \ < 0 ? -1 : 1 ))\n    signs=$(( $signs * sign ))\n    sum=$(( $sum + $i * sign\
    \ ))\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=0\n\
    \    local sign\n    local sign\n    local sum=0\n    local i\n    local j\n \
    \   local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local i\n  local j\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    signs=$((signs+${arr[i]}))\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n\
    \    sum=$((sum+${arr[i]}*${signs}))\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj5qwxo2b.sh: line 22: signs+1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -c | sort -nr | head -1)\n    local\
    \ signs_sum=0\n    local signs_product=1\n    for sign in $signs; do\n       \
    \ signs_sum=$((signs_sum + $sign))\n        signs_product=$((signs_product * $sign))\n\
    \    done\n    echo \"$signs_sum * $signs_product\"\n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: -1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local sign\n  for sign in $arr; do\n \
    \   signs=\"$signs $sign\"\n  done\n  signs=\"$signs 0\"\n  while [ -n \"$signs\"\
    \ ]; do\n    sign=\"$(echo $signs | cut -d \" \" -f 1)\"\n    sum=\"$((sum + $sign))\"\
    \n    product=\"$((product * $sign))\"\n    signs=\"$(echo $signs | cut -d \"\
    \ \" -f 2)\"\n  done\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660040168
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=()\n\
    \    local sum=0\n    local product=1\n    for (( i=0; i<${#arr[@]}; i++ )); do\n\
    \        local elem=${arr[i]}\n        signs+=(\"${elem}\"*)\n        sum+=${elem}\n\
    \        product*=${elem}\n    done\n    echo \"${signs[*]}\" | xargs -I {} echo\
    \ \"${sum} * ${product}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpnmgslmr4.sh: line 24: product*=1: command not found

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local sign=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    local elem=${arr[i]}\n\
    \    if (( elem < 0 )); then\n      sign=-1\n    elif (( elem > 0 )); then\n \
    \     sign=1\n    fi\n    sum=$(( sum + sign*elem ))\n  done\n  echo $sum\n}\n\
    \ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptwmgj9q9.sh: line 22: ((: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmptwmgj9q9.sh: line 24: ((: 1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    /tmp/tmptwmgj9q9.sh: line 27: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ signs\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local\
    \ sign\n  local sign\n  local sign\n  local sign\n  local sign\n  local sign\n\
    \  local sign\n  local sign\n  local sign\n  \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=0\n\
    \  local sign\n  local i\n  local sum=0\n  local product=1\n  local sign\n  for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n    sign=${arr[i]}\n    if [[ ${sign} -gt 0\
    \ ]]; then\n      signs=$((signs+1))\n    fi\n    product=$((product*sign))\n\
    \  done\n  sum=$((product*signs))\n  if [[ ${#arr[@]} -gt 0 ]]; then\n    sum=$((sum+prod_signs\
    \ ${arr[@]}))\n  fi\n  echo $sum\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmposc6xlmz.sh: line 25: [[: 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    /tmp/tmposc6xlmz.sh: line 28: 1 2 2 -4: syntax error in expression (error token
    is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=()\n\
    \  local sum=0\n  local product=1\n  local i\n  local j\n  local sign\n  local\
    \ signsCount\n  local signsCountMax\n  local signsCountMin\n  local signsCountMinMax\n\
    \  local signsCountMaxMin\n  local signsCountMaxMinMax\n  local signsCountMinMaxMin\n\
    \  local signsCountMinMaxMinMax\n  local signsCountMinMaxMinMaxMin\n  local signsCountMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMin\n  local signsCountMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMin\n  local signsCountMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMin\n  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\n  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n  local\
    \ signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n\
    \  local signsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local signs=0\n    local product=1\n    for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n        signs=$(( signs + ${arr[i]} ))\n    done\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        product=$(( product * ${arr[i]} ))\n    done\n    sum=$((\
    \ signs * product ))\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8rvh3ctn.sh: line 21: signs + 1 2 2 -4 : syntax error in expression
    (error token is "2 2 -4 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs\n\
    \    local sign\n    local sum\n    local i\n    local j\n    local sign\n   \
    \ local sum\n    local product\n    local sign\n    local product\n    local sign\n\
    \    local product\n    local sign\n    local product\n    local sign\n    local\
    \ product\n    local sign\n    local product\n    local sign\n    local product\n\
    \    local sign\n    local product\n    local sign\n    local product\n    local\
    \ sign\n    local product\n    local sign\n    local product\n    local sign\n\
    \    local product\n    local sign\n    local product\n    local sign\n    local\
    \ product\n    local sign\n    local product\n    local sign\n    local product\n\
    \    local sign\n    local product\n    local sign\n    local product\n    local\
    \ sign\n    local product\n    local sign\n    local product\n    local sign\n\
    \    local product\n    local sign\n    local product\n    local sign\n    local\
    \ product\n    local sign\n    local product\n    local sign\n    local product\n\
    \    local sign\n    local product\n    local sign\n    local product\n    local\
    \ sign\n    local product\n    local sign\n    local product\n    local sign\n\
    \    local product\n    local sign\n    local product\n    local sign\n    local\
    \ product\n    local sign\n    local product\n    local sign\n    local product\n\
    \    local sign\n    local product\n    local sign\n    local product\n    local\
    \ sign\n    local product\n    local sign\n    local product\n    local sign\n\
    \    local product\n    local sign\n    local product\n    local sign\n    local\
    \ product\n    local sign\n    local product\n    local sign\n    local product\n\
    \    local sign\n    local product\n    local sign\n    local product\n    local\
    \ sign\n    local product\n    local sign\n    local product\n    local sign\n\
    \    local product\n    local sign\n    local product\n    local sign\n    local\
    \ product\n    local sign\n    local product\n    local sign\n    local product\n\
    \    local sign\n    local product\n    local sign\n    local product\n    local\
    \ sign\n    local product\n    local sign\n    local product\n    local sign\n\
    \    local product\n    local sign\n    local product\n    local sign\n    local\
    \ product\n    local sign\n    local product\n    \n}\n\ncandidate() {\n    prod_signs\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\"\
    \ ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1\
    \ 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\"\
    \ ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1\
    \ 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs=$(echo\
    \ \"$arr\" | sed 's/ /\\n/g')\n    local sum=0\n    local product=1\n    for sign\
    \ in $signs; do\n        sum=$((sum + sign*product))\n        product=$((product\
    \ * sign))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sign\n\
    \  local sum\n  local i\n  sum=0\n  for i in \"${arr[@]}\"; do\n    sign=$(( ${i}\
    \ == 1 || ${i} == -1 || ${i} == 0 ? 1 : 0 ))\n    sum=$(( ${sum} * ${sign} ))\n\
    \  done\n  echo \"${sum}\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpp4k13rwk.sh: line 22: 1 2 2 -4 == 1 || 1 2 2 -4 == -1 || 1 2 2
    -4 == 0 ? 1 : 0 : syntax error in expression (error token is "2 2 -4 == 1 || 1
    2 2 -4 == -1 || 1 2 2 -4 == 0 ? 1 : 0 ")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n\
    \    local sign=1\n    local i\n    local j\n    local signs\n    local signs_len\n\
    \    local signs_sum\n\n    if [ -z \"$arr\" ]; then\n        echo \"None\"\n\
    \        return\n    fi\n\n    signs=$(echo \"$arr\" | tr \" \" \"\\n\" | sort\
    \ -n)\n    signs_len=$(echo \"$signs\" | wc -l)\n    signs_sum=$(echo \"$signs\"\
    \ | tr \"\\n\" \"+\" | bc)\n\n    for ((i=0; i<signs_len; i++)); do\n        sign=$(echo\
    \ \"$signs\" | sed -n \"$i\"p)\n        sum=$(echo \"$sum + $sign*$signs_sum\"\
    \ | bc)\n    done\n\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    sed: -e expression #1, char 2: invalid usage of line address 0

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 2: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local signs\n\
    \    local sign\n    local signs\n    local sum\n    local i\n    local j\n  \
    \  local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \    local sign\n    local sign\n    local sign\n    local sign\n    local sign\n\
    \n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n\
    \    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\"\
    ) = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate\
    \ \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n  \
    \  [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local sum=0\n\
    \    local signs=0\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n    \
    \    signs=$((signs * ${arr[i]}))\n        sum=$((sum + ${arr[i]}))\n    done\n\
    \    echo $((sum * signs))\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpdk8mys_6.sh: line 21: signs * 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local signs=$2\n\
    \  local sum=0\n  local product=1\n  local i\n  local sign\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    sign=${signs:$i:1}\n    if [[ ${sign} == -* ]]; then\n      sign=-1\n\
    \    elif [[ ${sign} == +* ]]; then\n      sign=1\n    else\n      sign=0\n  \
    \  fi\n    sum=$((sum + ${arr[i]} * ${sign}))\n    product=$((product * sign))\n\
    \  done\n  echo $sum\n  echo $product\n}\n\ncandidate() {\n    prod_signs \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n  \
    \  [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\")\
    \ = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0qhatu_c.sh: line 31: sum + 1 2 2 -4 * 0: syntax error in expression
    (error token is "2 2 -4 * 0")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs\n\
    \  local sign\n  local sum\n  local i\n  local j\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n \
    \ local product\n  local signs\n  local sign\n  local product\n  local signs\n\
    \  local sign\n  local product\n  local signs\n  local sign\n  local product\n\
    \  local signs\n  local sign\n  local product\n  local signs\n  local sign\n\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\")\n    local sum=0\n    local product=1\n    for sign\
    \ in $signs; do\n        sum=$((sum + $sign * product))\n        product=$((product\
    \ * $sign))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    prod_signs \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n\
    \    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\"\
    ) = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"\
    2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n\
    \    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local signs=\"\
    \"\n  local sum=0\n  local product=1\n  local i\n  for i in $arr; do\n    signs=\"\
    $signs $(( i % 2 ))\"\n    product=$(( product * i ))\n    sum=$(( sum + product\
    \ ))\n  done\n  if [ -z \"$signs\" ]; then\n    return 0\n  else\n    echo \"\
    $sum $signs\"\n  fi\n}\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate\
    \ \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n \
    \   [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2 -1 -1 9\"\
    ) = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"0\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n\
    \  local signs=0\n  local product=1\n  local i\n  for i in \"${arr[@]}\"; do\n\
    \    signs=$((signs + $i))\n    product=$((product * $i))\n  done\n  sum=$((signs\
    \ * product))\n  if [[ $sum -eq 0 ]]; then\n    sum=1\n  fi\n  echo \"$sum\"\n\
    }\n\ncandidate() {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxl63kd_7.sh: line 22: signs + 1 2 2 -4: syntax error in expression
    (error token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n    local arr=$1\n    local signs=$(echo\
    \ $arr | tr \" \" \"\\n\" | sort -n | uniq -c | sort -n)\n    local signs_sum=0\n\
    \    local signs_product=1\n    for sign in $signs; do\n        signs_sum=$((signs_sum\
    \ + $sign))\n        signs_product=$((signs_product * $sign))\n    done\n    echo\
    \ \"$signs_sum * $signs_product\"\n}\n\ncandidate() {\n    prod_signs \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 2 -4\") = \"-9\" ]]\n    [[\
    \ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 -1 1\") = \"\
    -10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"2 4 1 2\
    \ -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1 -1 1\") = \"4\" ]]\n    [[\
    \ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate \"-1 1 1 0\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660040163
- exit_code: 1
  program: "#!/bin/bash\n# You are given an array arr of integers and you need to\
    \ return\n# sum of magnitudes of integers multiplied by product of all signs\n\
    # of each number in the array, represented by 1, -1 or 0.\n# Note: return None\
    \ for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>>\
    \ $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1\
    \ is a space-separated list\nprod_signs() {\n  local arr=$1\n  local sum=0\n \
    \ local signs=0\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    signs=$((${signs}*${arr[i]}))\n\
    \    sum=$((${sum}+${arr[i]}))\n  done\n  if [[ ${#arr[@]} -eq 0 ]]; then\n  \
    \  echo ${sum}\n    return 0\n  fi\n  echo ${sum}\n  echo ${signs}\n}\n\ncandidate()\
    \ {\n    prod_signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 2 -4\") = \"-9\" ]]\n    [[ $(candidate \"0 1\") = \"0\" ]]\n    [[ $(candidate\
    \ \"1 1 1 2 3 -1 1\") = \"-10\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n \
    \   [[ $(candidate \"2 4 1 2 -1 -1 9\") = \"20\" ]]\n    [[ $(candidate \"-1 1\
    \ -1 1\") = \"4\" ]]\n    [[ $(candidate \"-1 1 1 1\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"-1 1 1 0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpse359x1k.sh: line 21: 0*1 2 2 -4: syntax error in expression (error
    token is "2 2 -4")

    '
  stdout: ''
  timestamp: 1660040163
