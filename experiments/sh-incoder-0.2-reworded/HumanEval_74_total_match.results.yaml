language: sh
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1} + 0))\n    len2=$((${#list_2}\
    \ + 0))\n    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n\
    \        echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1} + 0))\n    len2=$((${#list_2}\
    \ + 0))\n    if [ \"${len1}\" -eq \"${len2}\" ]; then\n        echo \"${list_1}\"\
    \n    else\n        echo \"${list_1}\" | xargs -n 1 -I {} echo \"${list_2}\" |\
    \ grep -F -e \"{}\" -e \"{}\" | wc -l\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | grep -E \"(${list_2})\" | grep -v \"(${list_2})\"\
    \n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 -eq $len2 ]]; then\n        echo \"$list1\"\n    else\n      \
    \  echo \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ total=0\n    local i\n    local j\n    local k\n    local match\n    local match2\n\
    \    local match3\n    local match4\n    local match5\n    local match6\n    local\
    \ match7\n    local match8\n    local match9\n    local match10\n    local match11\n\
    \    local match12\n    local match13\n    local match14\n    local match15\n\
    \    local match16\n    local match17\n    local match18\n    local match19\n\
    \    local match20\n    local match21\n    local match22\n    local match23\n\
    \    local match24\n    local match25\n    local match26\n    local match27\n\
    \    local match28\n    local match29\n    local match30\n    local match31\n\
    \    local match32\n    local match33\n    local match34\n    local match35\n\
    \    local match36\n    local match37\n    local match38\n    local match39\n\
    \    local match40\n    local match41\n    local match42\n    local match43\n\
    \    local match44\n    local match45\n    local match46\n    local match47\n\
    \    local match48\n    local match49\n    local match50\n    local match51\n\
    \    local match52\n    local match53\n    local match54\n    local match55\n\
    \    local match56\n    local match57\n    local match58\n    local match59\n\
    \    local match60\n    local match61\n    local match62\n    local match63\n\
    \    local match64\n    local match65\n    local match66\n    local match67\n\
    \    local match68\n    local match69\n    local match70\n    local match71\n\
    \    local match72\n    local match73\n    local match74\n    local match75\n\
    \    local match76\n    local match77\n    local match78\n    local match79\n\
    \    local match80\n    local match81\n    local match82\n    local match83\n\
    \    local match84\n    local match85\n    local match86\n    local match87\n\
    \    local match88\n    local match89\n    local match90\n    local match91\n\
    \    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1}))\n   \
    \ len2=$((${#list_2}))\n    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"\
    ${list_1}\"\n    else\n        echo \"${list_1}\" | awk '{print $1}' | sort |\
    \ uniq -c | sort -nr | head -1\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total=0\n    local i\n    local j\n    local k\n    local l\n    local m\n \
    \   local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ result\n    local i\n    local j\n    local k\n    local l\n    local m\n  \
    \  local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    local len\n    local i\n    local j\n    local result\n    local count\n\
    \    local char\n    local char1\n    local char2\n    local char3\n    local\
    \ char4\n    local char5\n    local char6\n    local char7\n    local char8\n\
    \    local char9\n    local char10\n    local char11\n    local char12\n    local\
    \ char13\n    local char14\n    local char15\n    local char16\n    local char17\n\
    \    local char18\n    local char19\n    local char20\n    local char21\n    local\
    \ char22\n    local char23\n    local char24\n    local char25\n    local char26\n\
    \    local char27\n    local char28\n    local char29\n    local char30\n    local\
    \ char31\n    local char32\n    local char33\n    local char34\n    local char35\n\
    \    local char36\n    local char37\n    local char38\n    local char39\n    local\
    \ char40\n    local char41\n    local char42\n    local char43\n    local char44\n\
    \    local char45\n    local char46\n    local char47\n    local char48\n    local\
    \ char49\n    local char50\n    local char51\n    local char52\n    local char53\n\
    \    local char54\n    local char55\n    local char56\n    local char57\n    local\
    \ char58\n    local char59\n    local char60\n    local char61\n    local char62\n\
    \    local char63\n    local char64\n    local char65\n    local char66\n    local\
    \ char67\n    local char68\n    local char69\n    local char70\n    local char71\n\
    \    local char72\n    local char73\n    local char74\n    local char75\n    local\
    \ char76\n    local char77\n    local char78\n    local char79\n    local char80\n\
    \    local char81\n    local char82\n    local char83\n    local char84\n    local\
    \ char85\n    local char86\n    local char87\n    local char88\n    local char89\n\
    \    local \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ \"${len1}\" -eq \"${len2}\" ]; then\n        echo \"${list_1}\"\n  \
    \  else\n        echo \"${list_1}\" | sed 's/ /\\n/g' | sort | uniq -c | sort\
    \ -nr | head -n 1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local result\n    \n    if [ $len1 -eq $len2 ]; then\n \
    \       result=( $list1 )\n    else\n        result=()\n        len=0\n      \
    \  for (( i=0; i<len1; i++ )); do\n            len=$(( len + ${#list1}[i] ))\n\
    \        done\n        for (( j=0; j<len2; j++ )); do\n            len=$(( len\
    \ + ${#list2}[j] ))\n        done\n        for (( i=0; i<len; i++ )); do\n   \
    \         for (( j=0; j<len; j++ )); do\n                if [ \"${list1}[i]\"\
    \ = \"${list2}[j]\" ]; then\n                    result+=( \"${list1}[i]\" )\n\
    \                    list1=\"${list1#*$list2[j]}\"\n                    len=$((\
    \ len - ${#list2}[j] ))\n                    break\n                fi\n     \
    \       done\n        done\n    fi\n    \n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1zr69lju.sh: line 35: len + 8[i] : syntax error: invalid arithmetic
    operator (error token is "[i] ")

    '
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    local len\n    local i\n    local j\n    local total=0\n    local match\n\
    \    local match_list\n    local match_list_1\n    local match_list_2\n    local\
    \ match_list_3\n    local match_list_4\n    local match_list_5\n    local match_list_6\n\
    \    local match_list_7\n    local match_list_8\n    local match_list_9\n    local\
    \ match_list_10\n    local match_list_11\n    local match_list_12\n    local match_list_13\n\
    \    local match_list_14\n    local match_list_15\n    local match_list_16\n \
    \   local match_list_17\n    local match_list_18\n    local match_list_19\n  \
    \  local match_list_20\n    local match_list_21\n    local match_list_22\n   \
    \ local match_list_23\n    local match_list_24\n    local match_list_25\n    local\
    \ match_list_26\n    local match_list_27\n    local match_list_28\n    local match_list_29\n\
    \    local match_list_30\n    local match_list_31\n    local match_list_32\n \
    \   local match_list_33\n    local match_list_34\n    local match_list_35\n  \
    \  local match_list_36\n    local match_list_37\n    local match_list_38\n   \
    \ local match_list_39\n    local match_list_40\n    local match_list_41\n    local\
    \ match_list_42\n    local match_list_43\n    local match_list_44\n    local match_list_45\n\
    \    local match_list_46\n    local match_list_47\n    local match_list_48\n \
    \   local match_list_49\n    local match_list_50\n    local match_list_51\n  \
    \  local match_list_52\n    local match_list_53\n    local match_list_54\n   \
    \ local match_list_55\n    local match_list_56\n    local match_list_57\n    local\
    \ match_list_58\n    local match_list_59\n    local match_list_60\n    local match_list_61\n\
    \    local match_list_62\n    local match_list_63\n    local match_list_64\n \
    \   local match_list_65\n    local match_list_66\n    local match_list_67\n  \
    \  local match_list_68\n    local match_list_69\n    local match_list_70\n   \
    \ local match_list_71\n    local match_list_72\n    local match_list_73\n    local\
    \ match_list_74\n    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local len1=${#list1[@]}\n    local len2=${#list2[@]}\n    local len\n   \
    \ local i\n    local j\n    local match\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local \n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=$((${#list1} + 0))\n    len2=$((${#list2}\
    \ + 0))\n    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list1}\"\n \
    \   else\n        echo \"${list1}\" | xargs -n 1 -I {} echo \"${list2}\" | grep\
    \ -E \"^{}$\" | wc -l\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    local len\n    local i\n    local j\n    local match\n    local total\n \
    \   local count\n    local char\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars\n    local chars1\n    local\
    \ chars2\n    local chars\n    local chars1\n    local chars2\n    local chars\n\
    \    local char\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ ${len1} -eq ${len2} ]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort -nr | head\
    \ -n 1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1} + 0))\n\
    \    len2=$((${#list_2} + 0))\n    if [[ $len1 -eq $len2 ]]; then\n        echo\
    \ \"$list_1\"\n    else\n        echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1} + 0))\n\
    \    len2=$((${#list_2} + 0))\n    if [[ ${len1} -eq ${len2} ]]; then\n      \
    \  echo \"${list_1}\"\n    else\n        echo \"${list_1}\" | grep -E \"(${list_2})\"\
    \ | awk '{print $2}'\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 -gt $len2 ]]; then\n        echo \"$list1\"\n    else\n      \
    \  echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=$(echo \"${list_1}\" | wc -c)\n    local\
    \ len2\n    len2=$(echo \"${list_2}\" | wc -c)\n    if [ \"${len1}\" -eq \"${len2}\"\
    \ ]; then\n        echo \"${list_1}\"\n    else\n        echo \"${list_1}\" |\
    \ awk '{print $1}' | sort | uniq -c | sort -nr | head -n 1\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \    fi\n    local i\n    local j\n    local total\n    total=0\n    for ((i=0;\
    \ i<${#list_1[@]}; i++)); do\n        for ((j=0; j<${#list_2[@]}; j++)); do\n\
    \            if [[ ${list_1[i]} == ${list_2[j]} ]]; then\n                ((total+=1))\n\
    \            fi\n        done\n    done\n    echo $list_1[$i]\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    local i\n    local j\n    local total=0\n    local match\n    local match_list\n\
    \    local match_list2\n    local match_list3\n    local match_list4\n    local\
    \ match_list5\n    local match_list6\n    local match_list7\n    local match_list8\n\
    \    local match_list9\n    local match_list10\n    local match_list11\n    local\
    \ match_list12\n    local match_list13\n    local match_list14\n    local match_list15\n\
    \    local match_list16\n    local match_list17\n    local match_list18\n    local\
    \ match_list19\n    local match_list20\n    local match_list21\n    local match_list22\n\
    \    local match_list23\n    local match_list24\n    local match_list25\n    local\
    \ match_list26\n    local match_list27\n    local match_list28\n    local match_list29\n\
    \    local match_list30\n    local match_list31\n    local match_list32\n    local\
    \ match_list33\n    local match_list34\n    local match_list35\n    local match_list36\n\
    \    local match_list37\n    local match_list38\n    local match_list39\n    local\
    \ match_list40\n    local match_list41\n    local match_list42\n    local match_list43\n\
    \    local match_list44\n    local match_list45\n    local match_list46\n    local\
    \ match_list47\n    local match_list48\n    local match_list49\n    local match_list50\n\
    \    local match_list51\n    local match_list52\n    local match_list53\n    local\
    \ match_list54\n    local match_list55\n    local match_list56\n    local match_list57\n\
    \    local match_list58\n    local match_list59\n    local match_list60\n    local\
    \ match_list61\n    local match_list62\n    local match_list63\n    local match_list64\n\
    \    local match_list65\n    local match_list66\n    local match_list67\n    local\
    \ match_list68\n    local match_list69\n    local match_list70\n    local match_list71\n\
    \    local match_list72\n    local match_list73\n    local match_list74\n    local\
    \ match_list75\n    local match_list76\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \    fi\n    local i\n    local j\n    local total\n    local match\n    local\
    \ match_list\n    local match_list2\n    local match_list3\n    local match_list4\n\
    \    local match_list5\n    local match_list6\n    local match_list7\n    local\
    \ match_list8\n    local match_list9\n    local match_list10\n    local match_list11\n\
    \    local match_list12\n    local match_list13\n    local match_list14\n    local\
    \ match_list15\n    local match_list16\n    local match_list17\n    local match_list18\n\
    \    local match_list19\n    local match_list20\n    local match_list21\n    local\
    \ match_list22\n    local match_list23\n    local match_list24\n    local match_list25\n\
    \    local match_list26\n    local match_list27\n    local match_list28\n    local\
    \ match_list29\n    local match_list30\n    local match_list31\n    local match_list32\n\
    \    local match_list33\n    local match_list34\n    local match_list35\n    local\
    \ match_list36\n    local match_list37\n    local match_list38\n    local match_list39\n\
    \    local match_list40\n    local match_list41\n    local match_list42\n    local\
    \ match_list43\n    local match_list44\n    local match_list45\n    local match_list46\n\
    \    local match_list47\n    local match_list48\n    local match_list49\n    local\
    \ match_list50\n    local match_list51\n    local match_list52\n    local match_list53\n\
    \    local match_list54\n    local match_list55\n    local match_list56\n    local\
    \ match_list57\n    local match_list58\n    local match_list59\n    local match_list60\n\
    \    local match_list61\n    local match_list62\n    local match_list63\n    local\
    \ match_list64\n    local match_list65\n    local match_list66\n    local match_list67\n\
    \    local match_list68\n    local match_list69\n    local match_list70\n    local\
    \ match_list71\n    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1}))\n   \
    \ len2=$((${#list_2}))\n    local i\n    local j\n    local total\n    local match\n\
    \    local char\n    local chars\n    local len\n    local len1\n    local len2\n\
    \    local i\n    local j\n    local total\n    local match\n    local char\n\
    \    local chars\n    local len\n    local len1\n    local len2\n    local i\n\
    \    local j\n    local total\n    local match\n    local char\n    local chars\n\
    \    local len\n    local len1\n    local len2\n    local i\n    local j\n   \
    \ local total\n    local match\n    local char\n    local chars\n    local len\n\
    \    local len1\n    local len2\n    local i\n    local j\n    local total\n \
    \   local match\n    local char\n    local chars\n    local len\n    local len1\n\
    \    local len2\n    local i\n    local j\n    local total\n    local match\n\
    \    local char\n    local chars\n    local len\n    local len1\n    local len2\n\
    \    local i\n    local j\n    local total\n    local match\n    local char\n\
    \    local chars\n    local len\n    local len1\n    local len2\n    local i\n\
    \    local j\n    local total\n    local match\n    local char\n    local chars\n\
    \    local len\n    local len1\n    local len2\n    local i\n    local j\n   \
    \ local total\n    local match\n    local char\n    local chars\n    local len\n\
    \    local len1\n    local len2\n    local i\n    local j\n    local total\n \
    \   local match\n    local char\n    local chars\n    local len\n    local len1\n\
    \    local len2\n    local i\n    local j\n    local total\n    local match\n\
    \    local char\n    local chars\n    local len\n    local len1\n    local len2\n\
    \    local i\n    local j\n    local total\n    local match\n    local char\n\
    \    local chars\n    local len\n    local len1\n\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort -nr | head\
    \ -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local len1=\"${#list1}\"\n    local len2=\"${#list2}\"\n    local result\n\
    \    if [ \"${len1}\" -eq \"${len2}\" ]; then\n        result=\"${list1}\"\n \
    \   else\n        result=$(echo \"${list1}\" | sed 's/ /\\n/g' | sort | uniq -c\
    \ | sort -nr | head -n 1)\n    fi\n    echo \"${result}\"\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    local len\n    local i\n    local j\n    local match\n    local count\n \
    \   local total\n    local chars\n    local char\n    local char_count\n    local\
    \ char_total\n    local result\n    local match\n    local count\n    local total\n\
    \    local chars\n    local char\n    local char_count\n    local char_total\n\
    \    local result\n    local match\n    local count\n    local total\n    local\
    \ chars\n    local char\n    local char_count\n    local char_total\n    local\
    \ result\n    local match\n    local count\n    local total\n    local chars\n\
    \    local char\n    local char_count\n    local char_total\n    local result\n\
    \    local match\n    local count\n    local total\n    local chars\n    local\
    \ char\n    local char_count\n    local char_total\n    local result\n    local\
    \ match\n    local count\n    local total\n    local chars\n    local char\n \
    \   local char_count\n    local char_total\n    local result\n    local match\n\
    \    local count\n    local total\n    local chars\n    local char\n    local\
    \ char_count\n    local char_total\n    local result\n    local match\n    local\
    \ count\n    local total\n    local chars\n    local char\n    local char_count\n\
    \    local char_total\n    local result\n    local match\n    local count\n  \
    \  local total\n    local chars\n    local char\n    local char_count\n    local\
    \ char_total\n    local result\n    local match\n    local count\n    local total\n\
    \    local chars\n    local char\n    local char_count\n    local char_total\n\
    \    local result\n    local match\n    local count\n    local total\n    local\
    \ chars\n    local char\n    local char_count\n    local char_total\n    local\
    \ result\n    local match\n    local count\n    local total\n    local chars\n\
    \    local char\n    local char_count\n    local char_total\n    local result\n\
    \    local match\n    local count\n    local total\n    local chars\n    local\
    \ char\n    local char_count\n    local char_total\n    local result\n    local\
    \ match\n\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local len1=${#list1[@]}\n    local len2=${#list2[@]}\n    local len\n   \
    \ local i\n    local j\n    local total\n    local match\n    local match_list\n\
    \    local match_list2\n    local match_list3\n    local match_list4\n    local\
    \ match_list5\n    local match_list6\n    local match_list7\n    local match_list8\n\
    \    local match_list9\n    local match_list10\n    local match_list11\n    local\
    \ match_list12\n    local match_list13\n    local match_list14\n    local match_list15\n\
    \    local match_list16\n    local match_list17\n    local match_list18\n    local\
    \ match_list19\n    local match_list20\n    local match_list21\n    local match_list22\n\
    \    local match_list23\n    local match_list24\n    local match_list25\n    local\
    \ match_list26\n    local match_list27\n    local match_list28\n    local match_list29\n\
    \    local match_list30\n    local match_list31\n    local match_list32\n    local\
    \ match_list33\n    local match_list34\n    local match_list35\n    local match_list36\n\
    \    local match_list37\n    local match_list38\n    local match_list39\n    local\
    \ match_list40\n    local match_list41\n    local match_list42\n    local match_list43\n\
    \    local match_list44\n    local match_list45\n    local match_list46\n    local\
    \ match_list47\n    local match_list48\n    local match_list49\n    local match_list50\n\
    \    local match_list51\n    local match_list52\n    local match_list53\n    local\
    \ match_list54\n    local match_list55\n    local match_list56\n    local match_list57\n\
    \    local match_list58\n    local match_list59\n    local match_list60\n    local\
    \ match_list61\n    local match_list62\n    local match_list63\n    local match_list64\n\
    \    local match_list65\n    local match_list66\n    local match_list67\n    local\
    \ match_list68\n    local match_list69\n    local match_list70\n    local match_list71\n\
    \    local match_list72\n    local match_list73\n    local match_list74\n    local\
    \ match_list75\n    local match_list76\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | grep -E \"(${list_2})\" | awk '{print $1}'\n   \
    \ fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1} + 0))\n    len2=$((${#list_2}\
    \ + 0))\n    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n\
    \        echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local match\n    local match1\n    local match2\n    local\
    \ match3\n    local match4\n    local match5\n    local match6\n    local match7\n\
    \    local match8\n    local match9\n    local match10\n    local match11\n  \
    \  local match12\n    local match13\n    local match14\n    local match15\n  \
    \  local match16\n    local match17\n    local match18\n    local match19\n  \
    \  local match20\n    local match21\n    local match22\n    local match23\n  \
    \  local match24\n    local match25\n    local match26\n    local match27\n  \
    \  local match28\n    local match29\n    local match30\n    local match31\n  \
    \  local match32\n    local match33\n    local match34\n    local match35\n  \
    \  local match36\n    local match37\n    local match38\n    local match39\n  \
    \  local match40\n    local match41\n    local match42\n    local match43\n  \
    \  local match44\n    local match45\n    local match46\n    local match47\n  \
    \  local match48\n    local match49\n    local match50\n    local match51\n  \
    \  local match52\n    local match53\n    local match54\n    local match55\n  \
    \  local match56\n    local match57\n    local match58\n    local match59\n  \
    \  local match60\n    local match61\n    local match62\n    local match63\n  \
    \  local match64\n    local match65\n    local match66\n    local match67\n  \
    \  local match68\n    local match69\n    local match70\n    local match71\n  \
    \  local match72\n    local match73\n    local match74\n    local match75\n  \
    \  local match76\n    local match77\n    local match78\n    local match79\n  \
    \  local match80\n    local match81\n    local match82\n    local match83\n  \
    \  local match84\n    local match85\n    local match86\n    local match87\n  \
    \  local match88\n    local match89\n    local match90\n    local match91\n  \
    \  local match92\n    local match93\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        local i\n        local j\n        local match\n        local temp\n \
    \       local temp2\n        local temp3\n        local temp4\n        local temp5\n\
    \        local temp6\n        local temp7\n        local temp8\n        local\
    \ temp9\n        local temp10\n        local temp11\n        local temp12\n  \
    \      local temp13\n        local temp14\n        local temp15\n        local\
    \ temp16\n        local temp17\n        local temp18\n        local temp19\n \
    \       local temp20\n        local temp21\n        local temp22\n        local\
    \ temp23\n        local temp24\n        local temp25\n        local temp26\n \
    \       local temp27\n        local temp28\n        local temp29\n        local\
    \ temp30\n        local temp31\n        local temp32\n        local temp33\n \
    \       local temp34\n        local temp35\n        local temp36\n        local\
    \ temp37\n        local temp38\n        local temp39\n        local temp40\n \
    \       local temp41\n        local temp42\n        local temp43\n        local\
    \ temp44\n        local temp45\n        local temp46\n        local temp47\n \
    \       local temp48\n        local temp49\n        local temp50\n        local\
    \ temp51\n        local temp52\n        local temp53\n        local temp54\n \
    \       local temp55\n        local temp56\n        local temp57\n        local\
    \ temp58\n        local temp59\n        local temp60\n        local temp61\n \
    \       local temp62\n        local temp63\n        local temp64\n        local\
    \ temp65\n        local temp66\n        local temp67\n        local temp68\n \
    \       local temp69\n        local temp70\n        local temp71\n        local\
    \ temp72\n        local temp73\n        local temp74\n        local temp75\n \
    \       local temp76\n        local temp77\n        local temp78\n        local\
    \ temp79\n        local temp80\n        local temp81\n        local temp82\n \
    \       local temp83\n        local temp84\n        local temp85\n        local\
    \ temp86\n        local temp87\n\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo35zlyd4.sh: line 121: syntax error near unexpected token `}''

    /tmp/tmpo35zlyd4.sh: line 121: `}''

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local len1=\"${#list1}\"\n    local len2=\"${#list2}\"\n    local len3\n\
    \    local total\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    \n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \    fi\n    local result\n    result=()\n    for (( i=0; i<${#list_1[*]}; i++\
    \ )); do\n        if [[ ${list_1[$i]} < ${list_2[$i]} ]]; then\n            result+=(\"\
    ${list_1[$i]}\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        local i=0\n        while [ $i -lt\
    \ $len1 ]; do\n            if [[ ${list_1:$i:1} == ${list_2:$i:1} ]]; then\n \
    \               list_1=$(echo $list_1 | sed -E -e \"s/$list_1:$i:1//g\")\n   \
    \             list_2=$(echo $list_2 | sed -E -e \"s/$list_2:$i:1//g\")\n     \
    \           ((i++))\n            else\n                break\n            fi\n\
    \        done\n    fi\n    echo $list_1\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local len1=$((${#list1[@]}))\n    local len2=$((${#list2[@]}))\n    local\
    \ len=$((${#list1[@]}+${#list2[@]}))\n    local i=0\n    local j=0\n    local\
    \ result=()\n    while [ $i -lt $len ]; do\n        if [ $i -lt $len1 ]; then\n\
    \            local char=$list1[$i]\n            local char1=$list2[$j]\n     \
    \       local char2=$list2[$((j+1))]\n            if [ $char -gt $char1 ]; then\n\
    \                result+=(\"$char\")\n            fi\n            if [ $char1\
    \ -gt $char2 ]; then\n                result+=(\"$char1\")\n            fi\n \
    \           i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660041625
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=(${list_1//[![:space:]]/ })\n\
    \        list_2=(${list_2//[![:space:]]/ })\n        list_1=( \"${list_1[@]}\"\
    \ )\n        list_2=( \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n\
    \        list_2=( \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n  \
    \      list_2=( \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n    \
    \    list_2=( \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n      \
    \  list_2=( \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n        list_2=(\
    \ \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n        list_2=( \"\
    ${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n        list_2=( \"${list_2[@]}\"\
    \ )\n        list_1=( \"${list_1[@]}\" )\n        list_2=( \"${list_2[@]}\" )\n\
    \        list_1=( \"${list_1[@]}\" )\n        list_2=( \"${list_2[@]}\" )\n  \
    \      list_1=( \"${list_1[@]}\" )\n        list_2=( \"${list_2[@]}\" )\n    \
    \    list_1=( \"${list_1[@]}\" )\n        list_2=( \"${list_2[@]}\" )\n      \
    \  list_1=( \"${list_1[@]}\" )\n        list_2=( \"${list_2[@]}\" )\n        list_1=(\
    \ \"${list_1[@]}\" )\n        list_2=( \"${list_2[@]}\" )\n        list_1=( \"\
    ${list_1[@]}\" )\n        list_2=( \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\"\
    \ )\n        list_2=( \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n\
    \        list_2=( \"${list_2[@]}\" )\n        list_1=( \"${list_1[@]}\" )\n  \
    \      list_2=\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyqip0afn.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpyqip0afn.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq 0 && $len2 -eq 0 ]]; then\n        echo \"$list_1\"\n   \
    \ elif [[ $len1 -eq 0 && $len2 -eq 1 ]]; then\n        echo \"$list_2\"\n    elif\
    \ [[ $len1 -eq 1 && $len2 -eq 0 ]]; then\n        echo \"$list_1\"\n    elif [[\
    \ $len1 -eq 1 && $len2 -eq 1 ]]; then\n        echo \"$list_2\"\n    elif [[ $len1\
    \ -eq 1 && $len2 -eq 2 ]]; then\n        echo \"$list_1 $list_2\"\n    elif [[\
    \ $len1 -eq 2 && $len2 -eq 0 ]]; then\n        echo \"$list_1 $list_2\"\n    elif\
    \ [[ $len1 -eq 2 && $len2 -eq 1 ]]; then\n        echo \"$list_1 $list_2\"\n \
    \   elif [[ $len1 -eq 2 && $len2 -eq 2 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 3 && $len2 -eq 0 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 3 && $len2 -eq 1 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 3 && $len2 -eq 2 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 3 && $len2 -eq 3 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 4 && $len2 -eq 0 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 4 && $len2 -eq 1 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 4 && $len2 -eq 2 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 4 && $len2 -eq 3 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 4 && $len2 -eq 4 ]]; then\n        echo \"$list_1 $list_2\"\
    \n    elif [[ $len1 -eq 5 && $len2 \n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1wgcapzm.sh: line 61: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmp1wgcapzm.sh: line 61: syntax error near `$len2''

    /tmp/tmp1wgcapzm.sh: line 61: `    elif [[ $len1 -eq 5 && $len2 ''

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local len1=$((${#list1[@]} + 1))\n    local len2=$((${#list2[@]} + 1))\n\
    \    local len=$((len1 < len2 ? len1 : len2))\n    local result\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    \n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1} + 1))\n    local len2=$((${#list_2}\
    \ + 1))\n    local len\n    local i\n    local j\n    local match\n    local match_list\n\
    \    local char\n    local char_count\n    local char_count_1\n    local char_count_2\n\
    \    local char_count_3\n    local char_count_4\n    local char_count_5\n    local\
    \ char_count_6\n    local char_count_7\n    local char_count_8\n    local char_count_9\n\
    \    local char_count_10\n    local char_count_11\n    local char_count_12\n \
    \   local char_count_13\n    local char_count_14\n    local char_count_15\n  \
    \  local char_count_16\n    local char_count_17\n    local char_count_18\n   \
    \ local char_count_19\n    local char_count_20\n    local char_count_21\n    local\
    \ char_count_22\n    local char_count_23\n    local char_count_24\n    local char_count_25\n\
    \    local char_count_26\n    local char_count_27\n    local char_count_28\n \
    \   local char_count_29\n    local char_count_30\n    local char_count_31\n  \
    \  local char_count_32\n    local char_count_33\n    local char_count_34\n   \
    \ local char_count_35\n    local char_count_36\n    local char_count_37\n    local\
    \ char_count_38\n    local char_count_39\n    local char_count_40\n    local char_count_41\n\
    \    local char_count_42\n    local char_count_43\n    local char_count_44\n \
    \   local char_count_45\n    local char_count_46\n    local char_count_47\n  \
    \  local char_count_48\n    local char_count_49\n    local char_count_50\n   \
    \ local char_count_51\n    local char_count_52\n    local char_count_53\n    local\
    \ char_count_54\n    local char_count_55\n    local char_count_56\n    local char_count_57\n\
    \    local char_count_58\n    local char_count_59\n    local char_count_60\n \
    \   local char_count_61\n    local char_count_62\n    local char_count_63\n  \
    \  local char_count_64\n    local char_count_65\n    local char_count_66\n   \
    \ local char_count_67\n    local char_count_68\n    local char_count_69\n    local\
    \ char_count_70\n    local char_count_71\n    local char_count_72\n    local char_count_73\n\
    \    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1} + 1))\n    len2=$((${#list_2}\
    \ + 1))\n    local i j\n    local list\n    list=\"\"\n    for (( i=0; i<${len1};\
    \ i++ )); do\n        for (( j=0; j<${len2}; j++ )); do\n            if [[ ${list_1:$i:1}\
    \ == ${list_2:$j:1} ]]; then\n                list=\"${list} ${list_1:$i:1}\"\n\
    \            fi\n        done\n    done\n    echo \"${list}\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local match\n    local match1\n    local match2\n    local\
    \ match3\n    local match4\n    local match5\n    local match6\n    local match7\n\
    \    local match8\n    local match9\n    local match10\n    local match11\n  \
    \  local match12\n    local match13\n    local match14\n    local match15\n  \
    \  local match16\n    local match17\n    local match18\n    local match19\n  \
    \  local match20\n    local match21\n    local match22\n    local match23\n  \
    \  local match24\n    local match25\n    local match26\n    local match27\n  \
    \  local match28\n    local match29\n    local match30\n    local match31\n  \
    \  local match32\n    local match33\n    local match34\n    local match35\n  \
    \  local match36\n    local match37\n    local match38\n    local match39\n  \
    \  local match40\n    local match41\n    local match42\n    local match43\n  \
    \  local match44\n    local match45\n    local match46\n    local match47\n  \
    \  local match48\n    local match49\n    local match50\n    local match51\n  \
    \  local match52\n    local match53\n    local match54\n    local match55\n  \
    \  local match56\n    local match57\n    local match58\n    local match59\n  \
    \  local match60\n    local match61\n    local match62\n    local match63\n  \
    \  local match64\n    local match65\n    local match66\n    local match67\n  \
    \  local match68\n    local match69\n    local match70\n    local match71\n  \
    \  local match72\n    local match73\n    local match74\n    local match75\n  \
    \  local match76\n    local match77\n    local match78\n    local match79\n  \
    \  local match80\n    local match81\n    local match82\n    local match83\n  \
    \  local match84\n    local match85\n    local match86\n    local match87\n  \
    \  local match88\n    local match89\n    local match90\n    local match91\n  \
    \  local match92\n    local match93\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1}))\n   \
    \ len2=$((${#list_2}))\n    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\
    \n    else\n        echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list1}\"\n    else\n\
    \        echo \"${list1}\" | xargs -n 1 -I {} grep -E '[{}]' {} | sort | uniq\
    \ -c | sort -nr\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: hi admin: No such file or directory

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    local i\n    local j\n    local total\n    total=0\n    for (( i=0; i<${len1};\
    \ i++ )); do\n        for (( j=0; j<${len2}; j++ )); do\n            if [[ ${list_1:$i:1}\
    \ == ${list_2:$j:1} ]]; then\n                (( total+=1 ))\n            fi\n\
    \        done\n    done\n    if [[ ${total} == ${len1} ]]; then\n        echo\
    \ \"${list_1}\"\n    else\n        echo \"${list_2}\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | xargs -n 1 -I {} echo \"${list_2}\" | grep -F -v\
    \ \"{}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1} + 0))\n    local len2=$((${#list_2}\
    \ + 0))\n    if [[ $len1 -gt $len2 ]]; then\n        list_1=(${list_1// / })\n\
    \        list_2=(${list_2// / })\n    fi\n    local len3=$((${#list_1} + ${#list_2}))\n\
    \    local len4=$((${#list_1} + ${#list_2}))\n    local len5=$((${#list_1} + ${#list_2}))\n\
    \    local len6=$((${#list_1} + ${#list_2}))\n    local len7=$((${#list_1} + ${#list_2}))\n\
    \    local len8=$((${#list_1} + ${#list_2}))\n    local len9=$((${#list_1} + ${#list_2}))\n\
    \    local len10=$((${#list_1} + ${#list_2}))\n    local len11=$((${#list_1} +\
    \ ${#list_2}))\n    local len12=$((${#list_1} + ${#list_2}))\n    local len13=$((${#list_1}\
    \ + ${#list_2}))\n    local len14=$((${#list_1} + ${#list_2}))\n    local len15=$((${#list_1}\
    \ + ${#list_2}))\n    local len16=$((${#list_1} + ${#list_2}))\n    local len17=$((${#list_1}\
    \ + ${#list_2}))\n    local len18=$((${#list_1} + ${#list_2}))\n    local len19=$((${#list_1}\
    \ + ${#list_2}))\n    local len20=$((${#list_1} + ${#list_2}))\n    local len21=$((${#list_1}\
    \ + ${#list_2}))\n    local len22=$((${#list_1} + ${#list_2}))\n    local len23=$((${#list_1}\
    \ + ${#list_2}))\n    local len24=$((${#list_1} + ${#list_2}))\n    local len25=$((${#list_1}\
    \ + ${#list_2}))\n    local len26=$((${#list_1} + ${#list_2}))\n    local len27=$((${#list_1}\
    \ + ${#list_2}))\n    local len28=$((${#\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoqp6zxu8.sh: line 54: unexpected EOF while looking for matching
    `)''

    /tmp/tmpoqp6zxu8.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 == $len2 ]]; then\n        echo \"$list1\"\n    else\n       \
    \ echo \"$list1\" | xargs -n 1 -I {} echo \"$list2\" | grep -Fvx \"{}\"\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1} + 1))\n    local len2=$((${#list_2}\
    \ + 1))\n    local len\n    local i\n    local j\n    local match\n    local result\n\
    \    len=$((${#list_1} + ${#list_2}))\n    for (( i = 0; i < ${#list_1}; i++ ));\
    \ do\n        match=false\n        for (( j=0; j < ${#list_2}; j++ )); do\n  \
    \          if [[ ${list_1:i:1} == ${list_2:j:1} ]]; then\n                match=true\n\
    \                break\n            fi\n        done\n        if [[ ${match} ==\
    \ false ]]; then\n            result=(\"${result[@]}\" ${list_1:i:1})\n      \
    \  fi\n    done\n    for (( i = 0; i < ${#list_2}; i++ )); do\n        match=false\n\
    \        for (( j=0; j < ${#list_1}; j++ )); do\n            if [[ ${list_2:i:1}\
    \ == ${list_1:j:1} ]]; then\n                match=true\n                break\n\
    \            fi\n        done\n        if [[ ${match} == false ]]; then\n    \
    \        result=(\"${result[@]}\" ${list_2:i:1})\n        fi\n    done\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local len1=${#list1[@]}\n    local len2=${#list2[@]}\n    local len\n   \
    \ local i\n    local j\n    local total\n    local match\n    local match1\n \
    \   local match2\n    local match3\n    local match4\n    local match5\n    local\
    \ match6\n    local match7\n    local match8\n    local match9\n    local match10\n\
    \    local match11\n    local match12\n    local match13\n    local match14\n\
    \    local match15\n    local match16\n    local match17\n    local match18\n\
    \    local match19\n    local match20\n    local match21\n    local match22\n\
    \    local match23\n    local match24\n    local match25\n    local match26\n\
    \    local match27\n    local match28\n    local match29\n    local match30\n\
    \    local match31\n    local match32\n    local match33\n    local match34\n\
    \    local match35\n    local match36\n    local match37\n    local match38\n\
    \    local match39\n    local match40\n    local match41\n    local match42\n\
    \    local match43\n    local match44\n    local match45\n    local match46\n\
    \    local match47\n    local match48\n    local match49\n    local match50\n\
    \    local match51\n    local match52\n    local match53\n    local match54\n\
    \    local match55\n    local match56\n    local match57\n    local match58\n\
    \    local match59\n    local match60\n    local match61\n    local match62\n\
    \    local match63\n    local match64\n    local match65\n    local match66\n\
    \    local match67\n    local match68\n    local match69\n    local match70\n\
    \    local match71\n    local match72\n    local match73\n    local match74\n\
    \    local match75\n    local match76\n    local match77\n    local match78\n\
    \    local match79\n    local match80\n    local match81\n    local match82\n\
    \    local match83\n    local match84\n    local match85\n    local match86\n\
    \    local match87\n    local match88\n    local match89\n    local match90\n\
    \    local match91\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1}))\n    len2=$((${#list_2}))\n\
    \    local i j\n    local total\n    total=0\n    for (( i=0; i<${len1}; i++ ));\
    \ do\n        for (( j=0; j<${len2}; j++ )); do\n            if [[ ${list_1}[$i]\
    \ == \"${list_2}[$j]\" ]]; then\n                total=$((${total} + 1))\n   \
    \         fi\n        done\n    done\n    if [[ ${total} -eq ${len1} ]]; then\n\
    \        echo \"${list_1}\"\n    else\n        echo \"${list_2}\"\n    fi\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local len1=$((${#list1[@]} + 1))\n    local len2=$((${#list2[@]} + 1))\n\
    \    local len=$((len1 < len2 ? len1 : len2))\n    local result\n    local i\n\
    \    local j\n    local k\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1} + 1))\n    len2=$((${#list_2}\
    \ + 1))\n    local i j\n    local result\n    for ((i=1; i <= len1; i++)); do\n\
    \        for ((j=1; j <= len2; j++)); do\n            if [[ ${list_1:$i:1} ==\
    \ ${list_2:$j:1} ]]; then\n                result=$list_1\n                break\n\
    \            fi\n        done\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1} + 0))\n    len2=$((${#list_2}\
    \ + 0))\n    if [[ $len1 -gt $len2 ]]; then\n        list_1=$list_2\n        list_2=$list_1\n\
    \        len1=$len2\n        len2=$len1\n    fi\n    local i\n    local j\n  \
    \  local total\n    total=0\n    for (( i=0; i<len1; i++ )); do\n        for ((\
    \ j=0; j<len2; j++ )); do\n            if [[ ${list_1:$i:1} == ${list_2:$j:1}\
    \ ]]; then\n                (( total++ ))\n            fi\n        done\n    done\n\
    \    echo $list_1\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    local total\n    total=0\n    for (( i=0; i<${len1}; i++ )); do\n       \
    \ if [[ ${list_1:$i:1} == ${list_2:$i:1} ]]; then\n            total=$(( total\
    \ + 1 ))\n        fi\n    done\n    if [[ ${len1} == ${len2} ]]; then\n      \
    \  echo \"${list_1}\"\n    else\n        echo \"${list_1}\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    len=$((${#list_1}+${#list_2}))\n    local i\n    local j\n\
    \    local total\n    total=0\n    for ((i=0;i<${#list_1};i++));\n    do\n   \
    \     for ((j=0;j<${#list_2};j++));\n        do\n            if [[ ${list_1:$i:1}\
    \ == ${list_2:$j:1} ]]; then\n                ((total+=1))\n            fi\n \
    \       done\n    done\n    if [[ ${total} -le ${len} ]]; then\n        echo \"\
    ${list_1}\"\n    else\n        echo \"${list_2}\"\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 -eq $len2 ]]; then\n        echo \"$list1\"\n    else\n      \
    \  echo \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    local i\n    local j\n    local match\n    local count\n \
    \   local result\n    local count1\n    local count2\n    local count3\n    local\
    \ count4\n    local count5\n    local count6\n    local count7\n    local count8\n\
    \    local count9\n    local count10\n    local count11\n    local count12\n \
    \   local count13\n    local count14\n    local count15\n    local count16\n \
    \   local count17\n    local count18\n    local count19\n    local count20\n \
    \   local count21\n    local count22\n    local count23\n    local count24\n \
    \   local count25\n    local count26\n    local count27\n    local count28\n \
    \   local count29\n    local count30\n    local count31\n    local count32\n \
    \   local count33\n    local count34\n    local count35\n    local count36\n \
    \   local count37\n    local count38\n    local count39\n    local count40\n \
    \   local count41\n    local count42\n    local count43\n    local count44\n \
    \   local count45\n    local count46\n    local count47\n    local count48\n \
    \   local count49\n    local count50\n    local count51\n    local count52\n \
    \   local count53\n    local count54\n    local count55\n    local count56\n \
    \   local count57\n    local count58\n    local count59\n    local count60\n \
    \   local count61\n    local count62\n    local count63\n    local count64\n \
    \   local count65\n    local count66\n    local count67\n    local count68\n \
    \   local count69\n    local count70\n    local count71\n    local count72\n \
    \   local count73\n    local count74\n    local count75\n    local count76\n \
    \   local count77\n    local count78\n    local count79\n    local count80\n \
    \   local count81\n    local count82\n    local count83\n    local count84\n \
    \   local count85\n    local count86\n    local count87\n    local count88\n \
    \   local count89\n    local \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \    fi\n    local len\n    len=${#list_1[@]}\n    local i\n    local j\n    local\
    \ match\n    local result\n    local count\n    local char\n    local chars\n\
    \    local chars1\n    local chars2\n    local chars3\n    local chars4\n    local\
    \ chars5\n    local chars6\n    local chars7\n    local chars8\n    local chars9\n\
    \    local chars10\n    local chars11\n    local chars12\n    local chars13\n\
    \    local chars14\n    local chars15\n    local chars16\n    local chars17\n\
    \    local chars18\n    local chars19\n    local chars20\n    local chars21\n\
    \    local chars22\n    local chars23\n    local chars24\n    local chars25\n\
    \    local chars26\n    local chars27\n    local chars28\n    local chars29\n\
    \    local chars30\n    local chars31\n    local chars32\n    local chars33\n\
    \    local chars34\n    local chars35\n    local chars36\n    local chars37\n\
    \    local chars38\n    local chars39\n    local chars40\n    local chars41\n\
    \    local chars42\n    local chars43\n    local chars44\n    local chars45\n\
    \    local chars46\n    local chars47\n    local chars48\n    local chars49\n\
    \    local chars50\n    local chars51\n    local chars52\n    local chars53\n\
    \    local chars54\n    local chars55\n    local chars56\n    local chars57\n\
    \    local chars58\n    local chars59\n    local chars60\n    local chars61\n\
    \    local chars62\n    local chars63\n    local chars64\n    local chars65\n\
    \    local chars66\n    local chars67\n    \n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \        len1=$len2\n        len2=$len1\n    fi\n    local i j k \n    for ((\
    \ i=0; i<$len1; i++ )); do\n        for (( j=0; j<$len2; j++ )); do\n        \
    \    if [[ $list_1[i] == $list_2[j] ]]; then\n                list_1=(${list_1[@]:0:i}\
    \ $list_1[i] ${list_1[@]:(i+1):})\n                list_2=(${list_2[@]:0:j} $list_2[j]\
    \ ${list_2[@]:(j+1):})\n                break\n            fi\n        done\n\
    \    done\n    echo \"${list_1[@]}\"\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=$((${#list1} + 1))\n    len2=$((${#list2}\
    \ + 1))\n    local i j\n    local result\n    local count\n    local chars\n \
    \   local char\n    local temp\n    local temp2\n    local temp3\n    local temp4\n\
    \    local temp5\n    local temp6\n    local temp7\n    local temp8\n    local\
    \ temp9\n    local temp10\n    local temp11\n    local temp12\n    local temp13\n\
    \    local temp14\n    local temp15\n    local temp16\n    local temp17\n    local\
    \ temp18\n    local temp19\n    local temp20\n    local temp21\n    local temp22\n\
    \    local temp23\n    local temp24\n    local temp25\n    local temp26\n    local\
    \ temp27\n    local temp28\n    local temp29\n    local temp30\n    local temp31\n\
    \    local temp32\n    local temp33\n    local temp34\n    local temp35\n    local\
    \ temp36\n    local temp37\n    local temp38\n    local temp39\n    local temp40\n\
    \    local temp41\n    local temp42\n    local temp43\n    local temp44\n    local\
    \ temp45\n    local temp46\n    local temp47\n    local temp48\n    local temp49\n\
    \    local temp50\n    local temp51\n    local temp52\n    local temp53\n    local\
    \ temp54\n    local temp55\n    local temp56\n    local temp57\n    local temp58\n\
    \    local temp59\n    local temp60\n    local temp61\n    local temp62\n    local\
    \ temp63\n    local temp64\n    local temp65\n    local temp66\n    local temp67\n\
    \    local temp68\n    local temp69\n    local temp70\n    local temp71\n    local\
    \ temp72\n    local temp73\n    local temp74\n    local temp75\n    local temp76\n\
    \    local temp77\n    local temp78\n    local temp79\n    local temp80\n    local\
    \ temp81\n    local temp82\n    local temp83\n    local temp84\n    local temp85\n\
    \    local temp86\n    local temp87\n    local temp88\n    \n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1}))\n   \
    \ len2=$((${#list_2}))\n    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\
    \n    else\n        echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local result\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=$(echo \"${list_1}\" | wc -c)\n    local\
    \ len2\n    len2=$(echo \"${list_2}\" | wc -c)\n    if [ \"${len1}\" -eq \"${len2}\"\
    \ ]; then\n        echo \"${list_1}\"\n    else\n        echo \"${list_1}\" |\
    \ awk '{print $1}' | sort | uniq -c | sort -nr | head -1\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=$((${#list1} + 1))\n    len2=$((${#list2}\
    \ + 1))\n    if [[ ${#list1} -eq ${#list2} ]]; then\n        echo \"${list1}\"\
    \n    else\n        local i\n        local j\n        local total\n        local\
    \ len\n        local list\n        local list2\n        list2=\"${list2//[![:space:]]/}\"\
    \n        list2=\"${list2//[[:space:]]/}\"\n        list2=\"${list2//[[:digit:]]/}\"\
    \n        list2=\"${list2//[[:alpha:]]/}\"\n        list2=\"${list2//[[:punct:]]/}\"\
    \n        list2=\"${list2//[[:blank:]]/}\"\n        list2=\"${list2//[[:graph:]]/}\"\
    \n        list2=\"${list2//[[:print:]]/}\"\n        list2=\"${list2//[[:blank:]]/}\"\
    \n        list2=\"${list2//[[:punct:]]/}\"\n        list2=\"${list2//[[:space:]]/}\"\
    \n        list2=\"${list2//[[:digit:]]/}\"\n        list2=\"${list2//[[:alpha:]]/}\"\
    \n        list2=\"${list2//[[:graph:]]/}\"\n        list2=\"${list2//[[:print:]]/}\"\
    \n        list2=\"${list2//[[:blank:]]/}\"\n        list2=\"${list2//[[:punct:]]/}\"\
    \n        list2=\"${list2//[[:space:]]/}\"\n        list2=\"${list2//[[:digit:]]/}\"\
    \n        list2=\"${list2//[[:alpha:]]/}\"\n        list2=\"${list2//[[:graph:]]/}\"\
    \n        list2=\"${list2//[[:print:]]/}\"\n        list2=\"${list2//[[:blank:]]/}\"\
    \n        list2=\"${list2//[[:punct:]]/}\"\n        list2=\"${list2//[[:space:]]/}\"\
    \n        list2=\"${list2//[[:digit:]]/}\"\n        list2=\"${list2//[[:alpha:]]/}\"\
    \n        list2=\"${list2//[[:graph:]]/}\"\n        list2=\"${list2//[[:print:]]/}\"\
    \n        list\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprxppbgsr.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmprxppbgsr.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=$(echo \"${list_1}\" | wc -c)\n    local\
    \ len2\n    len2=$(echo \"${list_2}\" | wc -c)\n    if [[ ${len1} -eq ${len2}\
    \ ]]; then\n        echo \"${list_1}\"\n    else\n        echo \"${list_1}\" |\
    \ awk '{print $1}' | sort | uniq -c | sort -nr | head -n 1\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort -nr | head\
    \ -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local total=0\n    local match\n    local match1\n    local\
    \ match2\n    local match3\n    local match4\n    local match5\n    local match6\n\
    \    local match7\n    local match8\n    local match9\n    local match10\n   \
    \ local match11\n    local match12\n    local match13\n    local match14\n   \
    \ local match15\n    local match16\n    local match17\n    local match18\n   \
    \ local match19\n    local match20\n    local match21\n    local match22\n   \
    \ local match23\n    local match24\n    local match25\n    local match26\n   \
    \ local match27\n    local match28\n    local match29\n    local match30\n   \
    \ local match31\n    local match32\n    local match33\n    local match34\n   \
    \ local match35\n    local match36\n    local match37\n    local match38\n   \
    \ local match39\n    local match40\n    local match41\n    local match42\n   \
    \ local match43\n    local match44\n    local match45\n    local match46\n   \
    \ local match47\n    local match48\n    local match49\n    local match50\n   \
    \ local match51\n    local match52\n    local match53\n    local match54\n   \
    \ local match55\n    local match56\n    local match57\n    local match58\n   \
    \ local match59\n    local match60\n    local match61\n    local match62\n   \
    \ local match63\n    local match64\n    local match65\n    local match66\n   \
    \ local match67\n    local match68\n    local match69\n    local match70\n   \
    \ local match71\n    local match72\n    local match73\n    local match74\n   \
    \ local match75\n    local match76\n    local match77\n    local match78\n   \
    \ local match79\n    local match80\n    local match81\n    local match82\n   \
    \ local match83\n    local match84\n    local match85\n    local match86\n   \
    \ local match87\n    local match88\n    local match89\n    local match90\n   \
    \ local match91\n    local match92\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1}))\n    len2=$((${#list_2}))\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    local len\n    local i\n    local j\n    local total\n    local match\n \
    \   local char\n    local chars\n    local match_list\n    local match_list2\n\
    \    local match_list3\n    local match_list4\n    local match_list5\n    local\
    \ match_list6\n    local match_list7\n    local match_list8\n    local match_list9\n\
    \    local match_list10\n    local match_list11\n    local match_list12\n    local\
    \ match_list13\n    local match_list14\n    local match_list15\n    local match_list16\n\
    \    local match_list17\n    local match_list18\n    local match_list19\n    local\
    \ match_list20\n    local match_list21\n    local match_list22\n    local match_list23\n\
    \    local match_list24\n    local match_list25\n    local match_list26\n    local\
    \ match_list27\n    local match_list28\n    local match_list29\n    local match_list30\n\
    \    local match_list31\n    local match_list32\n    local match_list33\n    local\
    \ match_list34\n    local match_list35\n    local match_list36\n    local match_list37\n\
    \    local match_list38\n    local match_list39\n    local match_list40\n    local\
    \ match_list41\n    local match_list42\n    local match_list43\n    local match_list44\n\
    \    local match_list45\n    local match_list46\n    local match_list47\n    local\
    \ match_list48\n    local match_list49\n    local match_list50\n    local match_list51\n\
    \    local match_list52\n    local match_list53\n    local match_list54\n    local\
    \ match_list55\n    local match_list56\n    local match_list57\n    local match_list58\n\
    \    local match_list59\n    local match_list60\n    local match_list61\n    local\
    \ match_list62\n    local match_list63\n    local match_list64\n    local match_list65\n\
    \    local match_list66\n    local match_list67\n    local match_list68\n    local\
    \ match_list69\n    local match_list70\n    local match_list71\n    local match_list72\n\
    \    local match_list73\n    local match_list74\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1}))\n   \
    \ len2=$((${#list_2}))\n    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\
    \n    else\n        echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1}))\n    len2=$((${#list_2}))\n\
    \    if [[ ${len1} == ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | grep -E \"(${list_2})\" | awk '{print $1}'\n   \
    \ fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ \"${len1}\" == \"${len2}\" ]; then\n        echo \"${list_1}\"\n   \
    \ else\n        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort\
    \ -nr | head -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 -eq $len2 ]]; then\n        echo \"$list1\"\n    else\n      \
    \  echo \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ \"${len1}\" == \"${len2}\" ]; then\n        echo \"${list_1}\"\n   \
    \ else\n        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort\
    \ -nr | head -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        local i\n        local j\n        local match\n        local len\n  \
    \      local count\n        local list_3\n        list_3=\"\"\n        len=${#list_1}\n\
    \        count=${len}\n        for ((i=1; i<${len}; i++)); do\n            for\
    \ ((j=1; j<${len}; j++)); do\n                if [[ ${list_1} == ${list_2} ]];\
    \ then\n                    match=\"${list_1}\"\n                    break\n \
    \               fi\n                if [[ ${list_1} == ${list_2} ]]; then\n  \
    \                  match=\"${list_2}\"\n                    break\n          \
    \      fi\n            done\n            if [[ ${list_1} == ${list_2} ]]; then\n\
    \                list_3=\"${match}\"\n                break\n            fi\n\
    \        done\n        echo \"${list_3}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | sed -e 's/ /\\n/g' | sort | uniq -c | sort -nr |\
    \ head -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    local i\n    local j\n    local total=0\n    local match\n\
    \    local match_list\n    local match_list2\n    local match_list3\n    local\
    \ match_list4\n    local match_list5\n    local match_list6\n    local match_list7\n\
    \    local match_list8\n    local match_list9\n    local match_list10\n    local\
    \ match_list11\n    local match_list12\n    local match_list13\n    local match_list14\n\
    \    local match_list15\n    local match_list16\n    local match_list17\n    local\
    \ match_list18\n    local match_list19\n    local match_list20\n    local match_list21\n\
    \    local match_list22\n    local match_list23\n    local match_list24\n    local\
    \ match_list25\n    local match_list26\n    local match_list27\n    local match_list28\n\
    \    local match_list29\n    local match_list30\n    local match_list31\n    local\
    \ match_list32\n    local match_list33\n    local match_list34\n    local match_list35\n\
    \    local match_list36\n    local match_list37\n    local match_list38\n    local\
    \ match_list39\n    local match_list40\n    local match_list41\n    local match_list42\n\
    \    local match_list43\n    local match_list44\n    local match_list45\n    local\
    \ match_list46\n    local match_list47\n    local match_list48\n    local match_list49\n\
    \    local match_list50\n    local match_list51\n    local match_list52\n    local\
    \ match_list53\n    local match_list54\n    local match_list55\n    local match_list56\n\
    \    local match_list57\n    local match_list58\n    local match_list59\n    local\
    \ match_list60\n    local match_list61\n    local match_list62\n    local match_list63\n\
    \    local match_list64\n    local match_list65\n    local match_list66\n    local\
    \ match_list67\n    local match_list68\n    local match_list69\n    local match_list70\n\
    \    local match_list71\n    local match_list72\n    local match_list73\n    local\
    \ match_list74\n    local match_list75\n    \n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ list3\n    local len3\n    local i\n    local j\n    local len\n    local match\n\
    \    local match2\n    local match3\n    local match4\n    local match5\n    local\
    \ match6\n    local match7\n    local match8\n    local match9\n    local match10\n\
    \    local match11\n    local match12\n    local match13\n    local match14\n\
    \    local match15\n    local match16\n    local match17\n    local match18\n\
    \    local match19\n    local match20\n    local match21\n    local match22\n\
    \    local match23\n    local match24\n    local match25\n    local match26\n\
    \    local match27\n    local match28\n    local match29\n    local match30\n\
    \    local match31\n    local match32\n    local match33\n    local match34\n\
    \    local match35\n    local match36\n    local match37\n    local match38\n\
    \    local match39\n    local match40\n    local match41\n    local match42\n\
    \    local match43\n    local match44\n    local match45\n    local match46\n\
    \    local match47\n    local match48\n    local match49\n    local match50\n\
    \    local match51\n    local match52\n    local match53\n    local match54\n\
    \    local match55\n    local match56\n    local match57\n    local match58\n\
    \    local match59\n    local match60\n    local match61\n    local match62\n\
    \    local match63\n    local match64\n    local match65\n    local match66\n\
    \    local match67\n    local match68\n    local match69\n    local match70\n\
    \    local match71\n    local match72\n    local match73\n    local match74\n\
    \    local match75\n    local match76\n    local match77\n    local match78\n\
    \    local match79\n    local match80\n    local match81\n    local match82\n\
    \    local match83\n    local match84\n    local match85\n    local match86\n\
    \    local match87\n    local match88\n    local match89\n    local match90\n\
    \    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1} + 1))\n\
    \    len2=$((${#list_2} + 1))\n    local i\n    local j\n    local total\n   \
    \ total=0\n    for (( i=0; i<${len1}; i++ )); do\n        for (( j=0; j<${len2};\
    \ j++ )); do\n            if [[ ${list_1:$i:1} == ${list_2:$j:1} ]]; then\n  \
    \              let total+=1\n            fi\n        done\n    done\n    if [[\
    \ ${total} -eq ${len1} ]]; then\n        echo \"${list_1}\"\n    else\n      \
    \  echo \"${list_2}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local len1=\"${#list1}\"\n    local len2=\"${#list2}\"\n    local len3\n\
    \    local len4\n    local len5\n    local len6\n    local len7\n    local len8\n\
    \    local len9\n    local len10\n    local len11\n    local len12\n    local\
    \ len13\n    local len14\n    local len15\n    local len16\n    local len17\n\
    \    local len18\n    local len19\n    local len20\n    local len21\n    local\
    \ len22\n    local len23\n    local len24\n    local len25\n    local len26\n\
    \    local len27\n    local len28\n    local len29\n    local len30\n    local\
    \ len31\n    local len32\n    local len33\n    local len34\n    local len35\n\
    \    local len36\n    local len37\n    local len38\n    local len39\n    local\
    \ len40\n    local len41\n    local len42\n    local len43\n    local len44\n\
    \    local len45\n    local len46\n    local len47\n    local len48\n    local\
    \ len49\n    local len50\n    local len51\n    local len52\n    local len53\n\
    \    local len54\n    local len55\n    local len56\n    local len57\n    local\
    \ len58\n    local len59\n    local len60\n    local len61\n    local len62\n\
    \    local len63\n    local len64\n    local len65\n    local len66\n    local\
    \ len67\n    local len68\n    local len69\n    local len70\n    local len71\n\
    \    local len72\n    local len73\n    local len74\n    local len75\n    local\
    \ len76\n    local len77\n    local len78\n    local len79\n    local len80\n\
    \    local len81\n    local len82\n    local len83\n    local len84\n    local\
    \ len85\n    local len86\n    local len87\n    local len88\n    local len89\n\
    \    local len90\n    local len91\n    local len92\n    local len93\n    local\
    \ len94\n    local len95\n    local len96\n    local len97\n    local len\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$(echo \"${list_1}\"\
    \ | wc -c)\n    len2=$(echo \"${list_2}\" | wc -c)\n    if [ \"${len1}\" -eq \"\
    ${len2}\" ]; then\n        echo \"${list_1}\"\n    else\n        echo \"${list_1}\"\
    \ | xargs -n 1 -I {} echo \"${list_2}\" | grep -F -v \"{}\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 -eq $len2 ]]; then\n        echo \"$list1\"\n    else\n      \
    \  echo \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \        len1=$len2\n        len2=$len1\n    fi\n    local i\n    local j\n  \
    \  local total\n    local match\n    local char\n    local count\n    local match_list\n\
    \    match_list=($list_1)\n    for ((i=1; i<=$len1; i++))\n    do\n        char=${list_1[i]}\n\
    \        for ((j=1; j<=$len2; j++))\n        do\n            char=${list_2[j]}\n\
    \            if [[ $char -gt $char ]]; then\n                match=$char\n   \
    \             count=$((count+1))\n            else\n                if [[ $count\
    \ -eq 0 ]]; then\n                    match_list=($match)\n                else\n\
    \                    match_list=(${match_list[@]} $match)\n                fi\n\
    \                count=0\n            fi\n        done\n    done\n    if [[ $count\
    \ -eq 0 ]]; then\n        match_list=(${match_list[@]})\n    fi\n    echo ${match_list[@]}\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ ${len1} -eq ${len2} ]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | grep -E \"(${list_2})\" | sort | uniq\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1}))\n   \
    \ len2=$((${#list_2}))\n    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\
    \n    else\n        echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \    fi\n    local total\n    total=0\n    for i in $(seq 0 $((len1 - 1))); do\n\
    \        total=$((total + ${list_1[i]}))\n    done\n    for i in $(seq 0 $((len2\
    \ - 1))); do\n        total=$((total + ${list_2[i]}))\n    done\n    echo $list_1[$((len1\
    \ - 1))]\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1}))\n   \
    \ len2=$((${#list_2}))\n    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\
    \n    else\n        echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \    fi\n    local len\n    len=${#list_1[@]}\n    for (( i=0; i<$len; i++ ));\
    \ do\n        if [[ ${list_1[$i]} < ${list_2[$i]} ]]; then\n            list_1=(${list_1[@]:0:i}\
    \ ${list_1[@]:i+1})\n        fi\n    done\n    len=${#list_1[@]}\n    for (( i=0;\
    \ i<$len; i++ )); do\n        if [[ ${list_1[$i]} > ${list_2[$i]} ]]; then\n \
    \           list_2=(${list_2[@]:0:i} ${list_2[@]:i+1})\n        fi\n    done\n\
    \    len=${#list_1[@]}\n    list_1=(${list_1[@]:0:len})\n    list_2=(${list_2[@]:0:len})\n\
    \    echo ${list_1[@]}\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local len1=$((${#list1[@]} + 1))\n    local len2=$((${#list2[@]} + 1))\n\
    \    local len=$((len1 < len2 ? len1 : len2))\n    local result=()\n    local\
    \ i\n    for ((i = 0; i <= len; i++)); do\n        if [[ ${list1[$i]} < ${list2[$i]}\
    \ ]]; then\n            result+=(\"${list1[$i]}\")\n        else\n           \
    \ result+=(\"${list2[$i]}\")\n        fi\n    done\n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    local i\n    local j\n    local k\n    local l\n    local m\n   \
    \ local n\n    local o\n    local p\n    local q\n    local r\n    local s\n \
    \   local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ result\n    \n    if [ $len1 -eq $len2 ]; then\n        result=$list1\n    else\n\
    \        len=0\n        for (( i=0; i<$len1; i++ )); do\n            len=$((len+${#list1}[i]))\n\
    \        done\n        for (( i=0; i<$len2; i++ )); do\n            len=$((len+${#list2}[i]))\n\
    \        done\n        result=$(echo $list1 | sed 's/^/'\"$(echo $list1 | sed\
    \ 's/ /\"/' | sed 's/^/'\"$(echo $list2 | sed 's/ /\"/' | sed 's/^/'\"$(echo $list1\
    \ | sed 's/ /\"/' | sed 's/^/'\"$(echo $list2 | sed 's/ /\"/' | sed 's/^/'\"$len\"\
    )\")\"')\"')\"')\n    fi\n    \n    echo \"$result\"\n}\n\ncandidate() {\n   \
    \ total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnhk0e5i0.sh: line 37: unexpected EOF while looking for matching
    `''''

    /tmp/tmpnhk0e5i0.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ list3\n    local len3\n    local i\n    local j\n    local k\n    local len\n\
    \    local len2\n    local len1\n    local len3\n    local len4\n    local len5\n\
    \    local len6\n    local len7\n    local len8\n    local len9\n    local len10\n\
    \    local len11\n    local len12\n    local len13\n    local len14\n    local\
    \ len15\n    local len16\n    local len17\n    local len18\n    local len19\n\
    \    local len20\n    local len21\n    local len22\n    local len23\n    local\
    \ len24\n    local len25\n    local len26\n    local len27\n    local len28\n\
    \    local len29\n    local len30\n    local len31\n    local len32\n    local\
    \ len33\n    local len34\n    local len35\n    local len36\n    local len37\n\
    \    local len38\n    local len39\n    local len40\n    local len41\n    local\
    \ len42\n    local len43\n    local len44\n    local len45\n    local len46\n\
    \    local len47\n    local len48\n    local len49\n    local len50\n    local\
    \ len51\n    local len52\n    local len53\n    local len54\n    local len55\n\
    \    local len56\n    local len57\n    local len58\n    local len59\n    local\
    \ len60\n    local len61\n    local len62\n    local len63\n    local len64\n\
    \    local len65\n    local len66\n    local len67\n    local len68\n    local\
    \ len69\n    local len70\n    local len71\n    local len72\n    local len73\n\
    \    local len74\n    local len75\n    local len76\n    local len77\n    local\
    \ len78\n    local len79\n    local len80\n    local len81\n    local len82\n\
    \    local len83\n    local len84\n    local len85\n    local len86\n    local\
    \ len87\n    local len88\n    local len89\n    \n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1} + 0))\n    len2=$((${#list_2}\
    \ + 0))\n    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n    fi\n\
    \    if [[ $len2 -gt $len1 ]]; then\n        list_2=($list_2)\n    fi\n    local\
    \ i j\n    local result\n    for (( i=0; i<${#list_1[@]}; i++ )); do\n       \
    \ for (( j=0; j<${#list_2[@]}; j++ )); do\n            if [[ ${list_1[i]} < ${list_2[j]}\
    \ ]]; then\n                result=(${list_1[i]})\n                break\n   \
    \         fi\n        done\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    local i=0\n    local j=0\n    local total=0\n    while [ $i -lt $len1 ];\
    \ do\n        local char=$(echo $list_1 | cut -d'\"' -f${i})\n        if [ \"\
    $char\" -lt \"$list_2\" ]; then\n            total=$((total+1))\n            list_1=$list_1${list_1:$i:1}\n\
    \            i=$((i+1))\n        else\n            list_2=$list_2${list_2:$j:1}\n\
    \            j=$((j+1))\n        fi\n    done\n    if [ $i -eq $len1 ]; then\n\
    \        list_1=$list_1${list_1:$i:1}\n    fi\n    if [ $j -eq $len2 ]; then\n\
    \        list_2=$list_2${list_2:$j:1}\n    fi\n    echo $list_1\n    echo $list_2\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660041625
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ total\n    local i\n    local j\n    local match\n    local match2\n    local\
    \ match3\n    local match4\n    local match5\n    local match6\n    local match7\n\
    \    local match8\n    local match9\n    local match10\n    local match11\n  \
    \  local match12\n    local match13\n    local match14\n    local match15\n  \
    \  local match16\n    local match17\n    local match18\n    local match19\n  \
    \  local match20\n    local match21\n    local match22\n    local match23\n  \
    \  local match24\n    local match25\n    local match26\n    local match27\n  \
    \  local match28\n    local match29\n    local match30\n    local match31\n  \
    \  local match32\n    local match33\n    local match34\n    local match35\n  \
    \  local match36\n    local match37\n    local match38\n    local match39\n  \
    \  local match40\n    local match41\n    local match42\n    local match43\n  \
    \  local match44\n    local match45\n    local match46\n    local match47\n  \
    \  local match48\n    local match49\n    local match50\n    local match51\n  \
    \  local match52\n    local match53\n    local match54\n    local match55\n  \
    \  local match56\n    local match57\n    local match58\n    local match59\n  \
    \  local match60\n    local match61\n    local match62\n    local match63\n  \
    \  local match64\n    local match65\n    local match66\n    local match67\n  \
    \  local match68\n    local match69\n    local match70\n    local match71\n  \
    \  local match72\n    local match73\n    local match74\n    local match75\n  \
    \  local match76\n    local match77\n    local match78\n    local match79\n  \
    \  local match80\n    local match81\n    local match82\n    local match83\n  \
    \  local match84\n    local match85\n    local match86\n    local match87\n  \
    \  local match88\n    local match89\n    local match90\n    local match91\n  \
    \  local match92\n    local match93\n\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$(echo \"$list_1\" |\
    \ wc -c)\n    len2=$(echo \"$list_2\" | wc -c)\n    if [ \"$len1\" -eq \"$len2\"\
    \ ]; then\n        echo \"$list_1\"\n    else\n        echo \"$list_2\"\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 == $len2 ]]; then\n        echo \"$list1\"\n    else\n       \
    \ echo \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | sed -e 's/ /\\n/g' | sort | uniq -c | sort -nr |\
    \ head -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local match\n    local total\n    local match1\n    local\
    \ match2\n    local match3\n    local match4\n    local match5\n    local match6\n\
    \    local match7\n    local match8\n    local match9\n    local match10\n   \
    \ local match11\n    local match12\n    local match13\n    local match14\n   \
    \ local match15\n    local match16\n    local match17\n    local match18\n   \
    \ local match19\n    local match20\n    local match21\n    local match22\n   \
    \ local match23\n    local match24\n    local match25\n    local match26\n   \
    \ local match27\n    local match28\n    local match29\n    local match30\n   \
    \ local match31\n    local match32\n    local match33\n    local match34\n   \
    \ local match35\n    local match36\n    local match37\n    local match38\n   \
    \ local match39\n    local match40\n    local match41\n    local match42\n   \
    \ local match43\n    local match44\n    local match45\n    local match46\n   \
    \ local match47\n    local match48\n    local match49\n    local match50\n   \
    \ local match51\n    local match52\n    local match53\n    local match54\n   \
    \ local match55\n    local match56\n    local match57\n    local match58\n   \
    \ local match59\n    local match60\n    local match61\n    local match62\n   \
    \ local match63\n    local match64\n    local match65\n    local match66\n   \
    \ local match67\n    local match68\n    local match69\n    local match70\n   \
    \ local match71\n    local match72\n    local match73\n    local match74\n   \
    \ local match75\n    local match76\n    local match77\n    local match78\n   \
    \ local match79\n    local match80\n    local match81\n    local match82\n   \
    \ local match83\n    local match84\n    local match85\n    local match86\n   \
    \ local match87\n    local match88\n    local match89\n    local match90\n   \
    \ local match91\n    local match92\n\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq 0 ]] || [[ ${len2} -eq 0 ]]; then\n        echo \"[]\"\n\
    \    elif [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        local i\n        local j\n        local total\n        local match\n\
    \        local list_3\n        list_3=\"\"\n        total=0\n        for ((i=0;\
    \ i<${len1}; i++)); do\n            match=0\n            for ((j=0; j<${len2};\
    \ j++)); do\n                if [[ ${list_1}[$i] == ${list_2}[$j] ]]; then\n \
    \                   match=1\n                    break\n                fi\n \
    \           done\n            if [[ ${match} -eq 0 ]]; then\n                total=$((${total}\
    \ + 1))\n                list_3=\"${list_3} ${list_1}[$i]\"\n            fi\n\
    \        done\n        list_3=\"${list_3} ${list_2}\"\n        list_3=\"${list_3%\
    \ }\"\n        echo \"${list_3}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    local i\n    local j\n    local total\n    local match\n \
    \   local match_list\n    local match_len\n    local match_index\n    local match_char\n\
    \    local match_char_index\n    local match_char_index2\n    local match_char_index3\n\
    \    local match_char_index4\n    local match_char_index5\n    local match_char_index6\n\
    \    local match_char_index7\n    local match_char_index8\n    local match_char_index9\n\
    \    local match_char_index10\n    local match_char_index11\n    local match_char_index12\n\
    \    local match_char_index13\n    local match_char_index14\n    local match_char_index15\n\
    \    local match_char_index16\n    local match_char_index17\n    local match_char_index18\n\
    \    local match_char_index19\n    local match_char_index20\n    local match_char_index21\n\
    \    local match_char_index22\n    local match_char_index23\n    local match_char_index24\n\
    \    local match_char_index25\n    local match_char_index26\n    local match_char_index27\n\
    \    local match_char_index28\n    local match_char_index29\n    local match_char_index30\n\
    \    local match_char_index31\n    local match_char_index32\n    local match_char_index33\n\
    \    local match_char_index34\n    local match_char_index35\n    local match_char_index36\n\
    \    local match_char_index37\n    local match_char_index38\n    local match_char_index39\n\
    \    local match_char_index40\n    local match_char_index41\n    local match_char_index42\n\
    \    local match_char_index43\n    local match_char_index44\n    local match_char_index45\n\
    \    local match_char_index46\n    local match_char_index47\n    local match_char_index48\n\
    \    local match_char_index49\n    local match_char_index50\n    local match_char_index51\n\
    \    local match_char_index52\n    local match_char_index53\n    local match_char_index54\n\
    \    local match_char_index55\n    local match_char_index56\n    local match_char_index57\n\
    \    local match_char_index58\n    local match_char_index59\n    local match_char_index60\n\
    \    local match_char_index61\n    local match_char_index\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    local len\n    local i\n    local j\n    local result\n    len=0\n    for\
    \ i in $(seq 0 $((len1 - 1))); do\n        len=$((len + ${#list_1}[i]))\n    done\n\
    \    len=$((len + len2))\n    for i in $(seq 0 $((len1 - 1))); do\n        for\
    \ j in $(seq 0 $((len2 - 1))); do\n            if [[ ${list_1}[i] == ${list_2}[j]\
    \ ]]; then\n                len=$((len + 1))\n            fi\n        done\n \
    \   done\n    if [[ $len -gt $len1 ]]; then\n        result=$list_1\n    else\n\
    \        result=$list_2\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n  \
    \  total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl4udhmsp.sh: line 31: len + 8[i]: syntax error: invalid arithmetic
    operator (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=$((${#list_1} + 0))\n    len2=$((${#list_2}\
    \ + 0))\n    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n\
    \    else\n        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort\
    \ -nr | head -n 1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local len1=\"${#list1}\"\n    local len2=\"${#list2}\"\n    local len3\n\
    \    local len4\n    local len5\n    local len6\n    local len7\n    local len8\n\
    \    local len9\n    local len10\n    local len11\n    local len12\n    local\
    \ len13\n    local len14\n    local len15\n    local len16\n    local len17\n\
    \    local len18\n    local len19\n    local len20\n    local len21\n    local\
    \ len22\n    local len23\n    local len24\n    local len25\n    local len26\n\
    \    local len27\n    local len28\n    local len29\n    local len30\n    local\
    \ len31\n    local len32\n    local len33\n    local len34\n    local len35\n\
    \    local len36\n    local len37\n    local len38\n    local len39\n    local\
    \ len40\n    local len41\n    local len42\n    local len43\n    local len44\n\
    \    local len45\n    local len46\n    local len47\n    local len48\n    local\
    \ len49\n    local len50\n    local len51\n    local len52\n    local len53\n\
    \    local len54\n    local len55\n    local len56\n    local len57\n    local\
    \ len58\n    local len59\n    local len60\n    local len61\n    local len62\n\
    \    local len63\n    local len64\n    local len65\n    local len66\n    local\
    \ len67\n    local len68\n    local len69\n    local len70\n    local len71\n\
    \    local len72\n    local len73\n    local len74\n    local len75\n    local\
    \ len76\n    local len77\n    local len78\n    local len79\n    local len80\n\
    \    local len81\n    local len82\n    local len83\n    local len84\n    local\
    \ len85\n    local len86\n    local len87\n    local len88\n    local len89\n\
    \    local len90\n    local len91\n    local len92\n    local len93\n    local\
    \ len94\n    local len95\n    local len96\n    local len97\n    local len\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local result\n    local\
    \ i\n    local j\n    local count\n    local temp\n    local temp2\n    local\
    \ temp3\n    local temp4\n    local temp5\n    local temp6\n    local temp7\n\
    \    local temp8\n    local temp9\n    local temp10\n    local temp11\n    local\
    \ temp12\n    local temp13\n    local temp14\n    local temp15\n    local temp16\n\
    \    local temp17\n    local temp18\n    local temp19\n    local temp20\n    local\
    \ temp21\n    local temp22\n    local temp23\n    local temp24\n    local temp25\n\
    \    local temp26\n    local temp27\n    local temp28\n    local temp29\n    local\
    \ temp30\n    local temp31\n    local temp32\n    local temp33\n    local temp34\n\
    \    local temp35\n    local temp36\n    local temp37\n    local temp38\n    local\
    \ temp39\n    local temp40\n    local temp41\n    local temp42\n    local temp43\n\
    \    local temp44\n    local temp45\n    local temp46\n    local temp47\n    local\
    \ temp48\n    local temp49\n    local temp50\n    local temp51\n    local temp52\n\
    \    local temp53\n    local temp54\n    local temp55\n    local temp56\n    local\
    \ temp57\n    local temp58\n    local temp59\n    local temp60\n    local temp61\n\
    \    local temp62\n    local temp63\n    local temp64\n    local temp65\n    local\
    \ temp66\n    local temp67\n    local temp68\n    local temp69\n    local temp70\n\
    \    local temp71\n    local temp72\n    local temp73\n    local temp74\n    local\
    \ temp75\n    local temp76\n    local temp77\n    local temp78\n    local temp79\n\
    \    local temp80\n    local temp81\n    local temp82\n    local temp83\n    local\
    \ temp84\n    local temp85\n    local temp86\n    local temp87\n    local temp88\n\
    \    local temp89\n    local temp90\n    local temp91\n    local temp92\n    local\
    \ temp93\n\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list1}\"\n    else\n\
    \        echo \"${list1}\" | xargs -n 1 -I {} grep -E \"^${list2}\" {} | wc -l\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: hi admin: No such file or directory

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list1}\"\n    else\n\
    \        echo \"${list1}\" | awk '{print $1}' | sort | uniq -c | sort -nr | head\
    \ -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1\n    local len2\n    len1=${#list1}\n    len2=${#list2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list1\"\n    else\n      \
    \  echo \"$list1 $list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1} + 0))\n\
    \    len2=$((${#list_2} + 0))\n    if [[ ${len1} -eq ${len2} ]]; then\n      \
    \  echo \"${list_1}\"\n    else\n        echo \"${list_1}\" | grep -E \"(${list_2})\"\
    \ | sort | uniq\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local result\n    \n    if [[ $len1 -eq 0 && $len2 -eq 0\
    \ ]]; then\n        result=()\n    elif [[ $len1 -eq 0 ]]; then\n        result=$list2\n\
    \    elif [[ $len2 -eq 0 ]]; then\n        result=$list1\n    elif [[ $len1 -eq\
    \ $len2 ]]; then\n        result=$list1\n    elif [[ $len1 > $len2 ]]; then\n\
    \        result=()\n        for ((i=0; i<$len1; i++)); do\n            if [[ $list1[i]\
    \ -gt $list2[i] ]]; then\n                result+=(\"$list1[i]\")\n          \
    \  fi\n        done\n    else\n        result=()\n        for ((i=0; i<$len2;\
    \ i++)); do\n            if [[ $list2[i] -gt $list1[i] ]]; then\n            \
    \    result+=(\"$list2[i]\")\n            fi\n        done\n    fi\n    \n   \
    \ echo \"${result[@]}\"\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8yxdi_px.sh: line 40: [[: hi admin[i]: syntax error in expression
    (error token is "admin[i]")

    /tmp/tmp8yxdi_px.sh: line 40: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp8yxdi_px.sh: line 40: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp8yxdi_px.sh: line 40: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp8yxdi_px.sh: line 40: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp8yxdi_px.sh: line 40: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp8yxdi_px.sh: line 40: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    /tmp/tmp8yxdi_px.sh: line 40: [[: hi admin[i]: syntax error in expression (error
    token is "admin[i]")

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    local i\n    local j\n    local match\n    local result\n\
    \    local count\n    local char\n    local count1\n    local count2\n    local\
    \ count3\n    local count4\n    local count5\n    local count6\n    local count7\n\
    \    local count8\n    local count9\n    local count10\n    local count11\n  \
    \  local count12\n    local count13\n    local count14\n    local count15\n  \
    \  local count16\n    local count17\n    local count18\n    local count19\n  \
    \  local count20\n    local count21\n    local count22\n    local count23\n  \
    \  local count24\n    local count25\n    local count26\n    local count27\n  \
    \  local count28\n    local count29\n    local count30\n    local count31\n  \
    \  local count32\n    local count33\n    local count34\n    local count35\n  \
    \  local count36\n    local count37\n    local count38\n    local count39\n  \
    \  local count40\n    local count41\n    local count42\n    local count43\n  \
    \  local count44\n    local count45\n    local count46\n    local count47\n  \
    \  local count48\n    local count49\n    local count50\n    local count51\n  \
    \  local count52\n    local count53\n    local count54\n    local count55\n  \
    \  local count56\n    local count57\n    local count58\n    local count59\n  \
    \  local count60\n    local count61\n    local count62\n    local count63\n  \
    \  local count64\n    local count65\n    local count66\n    local count67\n  \
    \  local count68\n    local count69\n    local count70\n    local count71\n  \
    \  local count72\n    local count73\n    local count74\n    local count75\n  \
    \  local count76\n    local count77\n    local count78\n    local count79\n  \
    \  local count80\n    local count81\n    local count82\n    local count83\n  \
    \  local count84\n    local count85\n    local count86\n    local count87\n  \
    \  local count88\n    local count\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local result\n    local count\n    local match\n    local\
    \ char\n    local count1\n    local count2\n    local count3\n    local count4\n\
    \    local count5\n    local count6\n    local count7\n    local count8\n    local\
    \ count9\n    local count10\n    local count11\n    local count12\n    local count13\n\
    \    local count14\n    local count15\n    local count16\n    local count17\n\
    \    local count18\n    local count19\n    local count20\n    local count21\n\
    \    local count22\n    local count23\n    local count24\n    local count25\n\
    \    local count26\n    local count27\n    local count28\n    local count29\n\
    \    local count30\n    local count31\n    local count32\n    local count33\n\
    \    local count34\n    local count35\n    local count36\n    local count37\n\
    \    local count38\n    local count39\n    local count40\n    local count41\n\
    \    local count42\n    local count43\n    local count44\n    local count45\n\
    \    local count46\n    local count47\n    local count48\n    local count49\n\
    \    local count50\n    local count51\n    local count52\n    local count53\n\
    \    local count54\n    local count55\n    local count56\n    local count57\n\
    \    local count58\n    local count59\n    local count60\n    local count61\n\
    \    local count62\n    local count63\n    local count64\n    local count65\n\
    \    local count66\n    local count67\n    local count68\n    local count69\n\
    \    local count70\n    local count71\n    local count72\n    local count73\n\
    \    local count74\n    local count75\n    local count76\n    local count77\n\
    \    local count78\n    local count79\n    local count80\n    local count81\n\
    \    local count82\n    local count83\n    local count84\n    local count85\n\
    \    local count86\n    local count87\n    local count88\n    local count89\n\
    \    local count90\n    local \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1\n    local len2\n    local result\n    len1=${#list1}\n    len2=${#list2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        result=()\n        for (( i=0; i<$len1;\
    \ i++ )); do\n            if [[ ${list1:$i:1} == ${list2:$i:1} ]]; then\n    \
    \            result+=(\"${list1:$i:1}\")\n            fi\n        done\n    else\n\
    \        result=(\"$list1\")\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local len1=\"${#list1}\"\n    local len2=\"${#list2}\"\n    local len3\n\
    \    local len4\n    local len5\n    local len6\n    local len7\n    local len8\n\
    \    local len9\n    local len10\n    local len11\n    local len12\n    local\
    \ len13\n    local len14\n    local len15\n    local len16\n    local len17\n\
    \    local len18\n    local len19\n    local len20\n    local len21\n    local\
    \ len22\n    local len23\n    local len24\n    local len25\n    local len26\n\
    \    local len27\n    local len28\n    local len29\n    local len30\n    local\
    \ len31\n    local len32\n    local len33\n    local len34\n    local len35\n\
    \    local len36\n    local len37\n    local len38\n    local len39\n    local\
    \ len40\n    local len41\n    local len42\n    local len43\n    local len44\n\
    \    local len45\n    local len46\n    local len47\n    local len48\n    local\
    \ len49\n    local len50\n    local len51\n    local len52\n    local len53\n\
    \    local len54\n    local len55\n    local len56\n    local len57\n    local\
    \ len58\n    local len59\n    local len60\n    local len61\n    local len62\n\
    \    local len63\n    local len64\n    local len65\n    local len66\n    local\
    \ len67\n    local len68\n    local len69\n    local len70\n    local len71\n\
    \    local len72\n    local len73\n    local len74\n    local len75\n    local\
    \ len76\n    local len77\n    local len78\n    local len79\n    local len80\n\
    \    local len81\n    local len82\n    local len83\n    local len84\n    local\
    \ len85\n    local len86\n    local len87\n    local len88\n    local len89\n\
    \    local len90\n    local len91\n    local len92\n    local len93\n    local\
    \ len94\n    local len95\n    local len96\n    local len97\n    local len\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ result\n    local i\n    local j\n    local k\n    local l\n    local m\n  \
    \  local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    local i\n    local j\n    local total\n    local match\n \
    \   local char\n    local char1\n    local char2\n    local char3\n    local char4\n\
    \    local char5\n    local char6\n    local char7\n    local char8\n    local\
    \ char9\n    local char10\n    local char11\n    local char12\n    local char13\n\
    \    local char14\n    local char15\n    local char16\n    local char17\n    local\
    \ char18\n    local char19\n    local char20\n    local char21\n    local char22\n\
    \    local char23\n    local char24\n    local char25\n    local char26\n    local\
    \ char27\n    local char28\n    local char29\n    local char30\n    local char31\n\
    \    local char32\n    local char33\n    local char34\n    local char35\n    local\
    \ char36\n    local char37\n    local char38\n    local char39\n    local char40\n\
    \    local char41\n    local char42\n    local char43\n    local char44\n    local\
    \ char45\n    local char46\n    local char47\n    local char48\n    local char49\n\
    \    local char50\n    local char51\n    local char52\n    local char53\n    local\
    \ char54\n    local char55\n    local char56\n    local char57\n    local char58\n\
    \    local char59\n    local char60\n    local char61\n    local char62\n    local\
    \ char63\n    local char64\n    local char65\n    local char66\n    local char67\n\
    \    local char68\n    local char69\n    local char70\n    local char71\n    local\
    \ char72\n    local char73\n    local char74\n    local char75\n    local char76\n\
    \    local char77\n    local char78\n    local char79\n    local char80\n    local\
    \ char81\n    local char82\n    local char83\n    local char84\n    local char85\n\
    \    local char86\n    local char87\n    local char88\n    local char89\n    local\
    \ \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$(echo \"${list_1}\"\
    \ | wc -c)\n    len2=$(echo \"${list_2}\" | wc -c)\n    if [[ ${len1} -eq ${len2}\
    \ ]]; then\n        echo \"${list_1}\"\n    else\n        echo \"${list_1}\" |\
    \ awk '{print $1}' | sort | uniq -c | sort -nr | head -n 1\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort -nr | head\
    \ -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq 0 ]]; then\n        echo \"$list_2\"\n    elif [[ $len2 -eq\
    \ 0 ]]; then\n        echo \"$list_1\"\n    elif [[ $len1 -eq $len2 ]]; then\n\
    \        echo \"$list_1\"\n    else\n        echo \"$list_1\" | sed 's/ /\\n/g'\
    \ | sort | uniq -c | sort -nr | head -1\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local result\n    local len\n    local char\n    local char1\n\
    \    local char2\n    local char3\n    local char4\n    local char5\n    local\
    \ char6\n    local char7\n    local char8\n    local char9\n    local char10\n\
    \    local char11\n    local char12\n    local char13\n    local char14\n    local\
    \ char15\n    local char16\n    local char17\n    local char18\n    local char19\n\
    \    local char20\n    local char21\n    local char22\n    local char23\n    local\
    \ char24\n    local char25\n    local char26\n    local char27\n    local char28\n\
    \    local char29\n    local char30\n    local char31\n    local char32\n    local\
    \ char33\n    local char34\n    local char35\n    local char36\n    local char37\n\
    \    local char38\n    local char39\n    local char40\n    local char41\n    local\
    \ char42\n    local char43\n    local char44\n    local char45\n    local char46\n\
    \    local char47\n    local char48\n    local char49\n    local char50\n    local\
    \ char51\n    local char52\n    local char53\n    local char54\n    local char55\n\
    \    local char56\n    local char57\n    local char58\n    local char59\n    local\
    \ char60\n    local char61\n    local char62\n    local char63\n    local char64\n\
    \    local char65\n    local char66\n    local char67\n    local char68\n    local\
    \ char69\n    local char70\n    local char71\n    local char72\n    local char73\n\
    \    local char74\n    local char75\n    local char76\n    local char77\n    local\
    \ char78\n    local char79\n    local char80\n    local char81\n    local char82\n\
    \    local char83\n    local char84\n    local char85\n    local char86\n    local\
    \ char87\n    local char88\n    local char89\n    local char90\n    local char91\n\
    \    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    local i j\n    local total\n    total=0\n    for (( i=0; i<${#list_1}; i++\
    \ )); do\n        for (( j=0; j<${#list_2}; j++ )); do\n            if [[ ${list_1:$i:1}\
    \ == ${list_2:$j:1} ]]; then\n                (( total+=1 ))\n            fi\n\
    \        done\n    done\n    if [[ ${len1} == ${len2} ]]; then\n        echo \"\
    ${list_1}\"\n    else\n        echo \"${list_1}\"\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ ${len1} -eq ${len2} ]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort -nr | head\
    \ -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ ${len1} -eq ${len2} ]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | awk '{print $1}' | sort | uniq -c | sort -nr | head\
    \ -1\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1} + 0))\n\
    \    len2=$((${#list_2} + 0))\n    if [ $len1 -eq $len2 ]; then\n        echo\
    \ \"$list_1\"\n    else\n        echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -gt $len2 ]]; then\n        list_1=($list_1)\n        list_2=($list_2)\n\
    \    fi\n    local i\n    local j\n    local total\n    local match\n    local\
    \ result\n    total=0\n    for (( i=0; i<${#list_1[@]}; i++ )); do\n        match=0\n\
    \        for (( j=0; j<${#list_2[@]}; j++ )); do\n            if [[ ${list_1[i]}\
    \ == ${list_2[j]} ]]; then\n                match=1\n                break\n \
    \           fi\n        done\n        if [[ $match == 1 ]]; then\n           \
    \ total=$((total+1))\n        fi\n    done\n    result=()\n    for (( i=0; i<${#list_1[@]};\
    \ i++ )); do\n        if [[ ${list_1[i]} == ${list_2[i]} ]]; then\n          \
    \  result+=(\"${list_1[i]}\")\n        fi\n    done\n    if [[ $total -eq 0 ]];\
    \ then\n        result=()\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [[ $len1 -eq $len2 ]]; then\n        echo \"$list1\"\n    else\n      \
    \  echo \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=$1\n\
    \    list2=$2\n    local len1 len2\n    len1=${#list1}\n    len2=${#list2}\n \
    \   if [ $len1 -eq $len2 ]; then\n        echo \"$list1\"\n    else\n        echo\
    \ \"$list1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=$((${#list1} + 1))\n    local len2=$((${#list2} + 1))\n    local\
    \ len=$((len1 > len2 ? len1 : len2))\n    local list3\n    local i\n    local\
    \ j\n    local match\n    local match1\n    local match2\n    local match3\n \
    \   local match4\n    local match5\n    local match6\n    local match7\n    local\
    \ match8\n    local match9\n    local match10\n    local match11\n    local match12\n\
    \    local match13\n    local match14\n    local match15\n    local match16\n\
    \    local match17\n    local match18\n    local match19\n    local match20\n\
    \    local match21\n    local match22\n    local match23\n    local match24\n\
    \    local match25\n    local match26\n    local match27\n    local match28\n\
    \    local match29\n    local match30\n    local match31\n    local match32\n\
    \    local match33\n    local match34\n    local match35\n    local match36\n\
    \    local match37\n    local match38\n    local match39\n    local match40\n\
    \    local match41\n    local match42\n    local match43\n    local match44\n\
    \    local match45\n    local match46\n    local match47\n    local match48\n\
    \    local match49\n    local match50\n    local match51\n    local match52\n\
    \    local match53\n    local match54\n    local match55\n    local match56\n\
    \    local match57\n    local match58\n    local match59\n    local match60\n\
    \    local match61\n    local match62\n    local match63\n    local match64\n\
    \    local match65\n    local match66\n    local match67\n    local match68\n\
    \    local match69\n    local match70\n    local match71\n    local match72\n\
    \    local match73\n    local match74\n    local match75\n    local match76\n\
    \    local match77\n    local match78\n    local match79\n    local match80\n\
    \    local match81\n    local match82\n    local match83\n    local match84\n\
    \    local match85\n    local match86\n    local match87\n    local match88\n\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$(echo \"${list_1}\"\
    \ | wc -c)\n    len2=$(echo \"${list_2}\" | wc -c)\n    if [ \"${len1}\" -eq \"\
    ${len2}\" ]; then\n        echo \"${list_1}\"\n    else\n        echo \"${list_1}\"\
    \ | awk '{print $1}' | sort | uniq -c | sort -nr\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=$((${#list_1} + 0))\n\
    \    len2=$((${#list_2} + 0))\n    if [[ ${len1} -eq ${len2} ]]; then\n      \
    \  echo \"${list_1}\"\n    else\n        echo \"${list_1}\" | xargs -n 1 -I {}\
    \ bash -c 'echo \"${list_2}\" | grep -w \"{}\"' {} \\\n        | xargs -n 1 -I\
    \ {} bash -c 'echo \"${list_1}\" | grep -w \"{}\"' {} \\\n        | xargs -n 1\
    \ -I {} bash -c 'echo \"${list_2}\" | grep -w \"{}\"' {} \\\n        | xargs -n\
    \ 1 -I {} bash -c 'echo \"${list_1}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_2}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_1}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_2}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_1}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_2}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_1}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_2}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_1}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_2}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_1}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_2}\" | grep -w \"{}\"' {} \\\n        | xargs\
    \ -n 1 -I {} bash -c 'echo \"${list_1}\" | grep -w \"{}\"' {} \\\n        | \n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdmhi6iue.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpdmhi6iue.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | xargs -n 1 -I {} echo \"${list_2}\" | grep -E \"\
    (${list_1})\" | wc -l\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local len1=\"${#list1}\"\n    local len2=\"${#list2}\"\n    local result=()\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n\n}\n\ncandidate() {\n  \
    \  total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    len1=${#list_1}\n    local len2\n    len2=${#list_2}\n\
    \    local len\n    len=$((len1 + len2))\n    local i\n    local j\n    local\
    \ total\n    local match\n    local result\n    local count\n    local char\n\
    \    local char1\n    local char2\n    local char3\n    local char4\n    local\
    \ char5\n    local char6\n    local char7\n    local char8\n    local char9\n\
    \    local char10\n    local char11\n    local char12\n    local char13\n    local\
    \ char14\n    local char15\n    local char16\n    local char17\n    local char18\n\
    \    local char19\n    local char20\n    local char21\n    local char22\n    local\
    \ char23\n    local char24\n    local char25\n    local char26\n    local char27\n\
    \    local char28\n    local char29\n    local char30\n    local char31\n    local\
    \ char32\n    local char33\n    local char34\n    local char35\n    local char36\n\
    \    local char37\n    local char38\n    local char39\n    local char40\n    local\
    \ char41\n    local char42\n    local char43\n    local char44\n    local char45\n\
    \    local char46\n    local char47\n    local char48\n    local char49\n    local\
    \ char50\n    local char51\n    local char52\n    local char53\n    local char54\n\
    \    local char55\n    local char56\n    local char57\n    local char58\n    local\
    \ char59\n    local char60\n    local char61\n    local char62\n    local char63\n\
    \    local char64\n    local char65\n    local char66\n    local char67\n    local\
    \ char68\n    local char69\n    local char70\n    local char71\n    local char72\n\
    \    local char73\n    local char74\n    local char75\n    local char76\n    local\
    \ char77\n    local char78\n    local char79\n    local char80\n    local char81\n\
    \    local char82\n    local char83\n    local char84\n    local char85\n    local\
    \ char\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local len1=${#list1}\n    local len2=${#list2}\n    local len\n    local\
    \ i\n    local j\n    local result\n    local len\n    local chars\n    local\
    \ char\n    local chars\n    local char\n    local chars\n    local char\n   \
    \ local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    local chars\n    local char\n    local chars\n    local char\n\
    \    local chars\n    local char\n    local chars\n    local char\n    local chars\n\
    \    local char\n    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local len1=${#list1[@]}\n    local len2=${#list2[@]}\n    local len\n   \
    \ local i\n    local j\n    local match\n    local match_list\n    local match_list2\n\
    \    local match_list3\n    local match_list4\n    local match_list5\n    local\
    \ match_list6\n    local match_list7\n    local match_list8\n    local match_list9\n\
    \    local match_list10\n    local match_list11\n    local match_list12\n    local\
    \ match_list13\n    local match_list14\n    local match_list15\n    local match_list16\n\
    \    local match_list17\n    local match_list18\n    local match_list19\n    local\
    \ match_list20\n    local match_list21\n    local match_list22\n    local match_list23\n\
    \    local match_list24\n    local match_list25\n    local match_list26\n    local\
    \ match_list27\n    local match_list28\n    local match_list29\n    local match_list30\n\
    \    local match_list31\n    local match_list32\n    local match_list33\n    local\
    \ match_list34\n    local match_list35\n    local match_list36\n    local match_list37\n\
    \    local match_list38\n    local match_list39\n    local match_list40\n    local\
    \ match_list41\n    local match_list42\n    local match_list43\n    local match_list44\n\
    \    local match_list45\n    local match_list46\n    local match_list47\n    local\
    \ match_list48\n    local match_list49\n    local match_list50\n    local match_list51\n\
    \    local match_list52\n    local match_list53\n    local match_list54\n    local\
    \ match_list55\n    local match_list56\n    local match_list57\n    local match_list58\n\
    \    local match_list59\n    local match_list60\n    local match_list61\n    local\
    \ match_list62\n    local match_list63\n    local match_list64\n    local match_list65\n\
    \    local match_list66\n    local match_list67\n    local match_list68\n    local\
    \ match_list69\n    local match_list70\n    local match_list71\n    local match_list72\n\
    \    local match_list73\n    local match_list74\n    local match_list75\n    local\
    \ match_list76\n    local match\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ ${len1} -eq ${len2} ]]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_1}\" | xargs -n 1 -I {} grep -E \"(${list_2})\" {} | awk\
    \ '{print $1}'\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: hi admin: No such file or directory

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        list_1\n    else\n        list_2\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc1k5zev0.sh: line 28: list_1: command not found

    /tmp/tmpc1k5zev0.sh: line 30: list_2: command not found

    '
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}-1))\n    local len2=$((${#list_2}-1))\n\
    \    local len\n    local result\n    if [[ $len1 -gt $len2 ]]; then\n       \
    \ len=$len1\n        result=$list_1\n    else\n        len=$len2\n        result=$list_2\n\
    \    fi\n    local i\n    for (( i=0; i<$len; i++ )); do\n        if [[ \"$list_1\"\
    \ =~ (^|[[:space:]])\"$list_2\"($|[[:space:]]) ]]; then\n            result=(\"\
    ${result[@]}\" \"$list_1\")\n        fi\n    done\n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1=$((${#list_1}))\n    local len2=$((${#list_2}))\n\
    \    if [ $len1 -eq $len2 ]; then\n        echo \"$list_1\"\n    else\n      \
    \  echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041620
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1 len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 -eq $len2 ]]; then\n        echo \"$list_1\"\n    else\n    \
    \    echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list_1 list_2\n    list_1=$1\n\
    \    list_2=$2\n    local len1\n    local len2\n    len1=${#list_1}\n    len2=${#list_2}\n\
    \    if [[ $len1 == $len2 ]]; then\n        echo \"$list_1\"\n    else\n     \
    \   echo \"$list_1\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660041619
