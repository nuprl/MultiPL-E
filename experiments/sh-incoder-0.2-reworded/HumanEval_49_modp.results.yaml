language: sh
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    while (( i < j )); do\n        i=$(( i\
    \ + 1 ))\n    done\n    echo $(( i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local r\n    local n\n   \
    \ local m\n    local x\n    local y\n    local z\n    local w\n    local a\n \
    \   local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i < j )); do\n\t\t(( i++ ))\n\tdone\n\t\
    echo $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal mod=$(( p + q - p % q))\n\tlocal\
    \ rem=$(( p - mod ))\n\tlocal modp=$(( mod * q))\n\tlocal modq=$(( mod * p))\n\
    \tlocal modpmodq=$(( modp + modq))\n\tlocal modpmodqmod=$(( modpmodq + mod ))\n\
    \tlocal modpmodqmodmod=$(( modpmodqmod + mod ))\n\tlocal modpmodqmodmodmod=$((\
    \ modpmodqmodmod + mod ))\n\tlocal modpmodqmodmodmodmod=$(( modpmodqmodmodmod\
    \ + mod ))\n\tlocal modpmodqmodmodmodmodmod=$(( modpmodqmodmodmodmod + mod ))\n\
    \tlocal modpmodqmodmodmodmodmod=$(( modpmodqmodmodmodmodmod + mod ))\n\tlocal\
    \ modpmodqmodmodmodmodmodmod=$(( modpmodqmodmodmodmodmodmod + mod ))\n\tlocal\
    \ modpmodqmodmodmodmodmodmodmod=$(( modpmodqmodmodmodmodmodmodmod + mod ))\n\t\
    local modpmodqmodmodmodmodmodmodmodmod=$(( modpmodqmodmodmodmodmodmodmod + mod\
    \ ))\n\tlocal modpmodqmodmodmodmodmodmodmodmod=$(( modpmodqmodmodmodmodmodmodmodmod\
    \ + mod ))\n\tlocal modpmodqmodmodmodmodmodmodmodmodmod=$(( modpmodqmodmodmodmodmodmodmodmodmod\
    \ + mod ))\n\tlocal modpmodqmodmodmodmodmodmodmodmodmodmod=$(( modpmodqmodmodmodmodmodmodmodmodmod\
    \ + mod ))\n\tlocal modpmodqmodmodmodmodmodmodmodmodmodmod=$(( modpmodqmodmodmodmodmodmodmodmodmodmod\
    \ + mod ))\n\tlocal modpmodqmodmodmodmodmodmodmodmodmodmodmod=$(( modpmodqmodmodmodmodmodmodmodmodmodmodmodmod\
    \ + mod ))\n\tlocal modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmod=$((\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpjdktouij.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmpjdktouij.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042755
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i n p\n    i=$1\n    n=$2\n    p=$3\n    [ $n -gt 0 ] || return 1\n\
    \    [ $n -eq 1 ] || return $i\n    [ $n -eq 2 ] || return $(( $i % $p ))\n  \
    \  [ $n -eq 3 ] || return $(( $i % $p ))\n    [ $n -eq 4 ] || return $(( $i %\
    \ $p ))\n    [ $n -eq 5 ] || return $(( $i % $p ))\n    [ $n -eq 6 ] || return\
    \ $(( $i % $p ))\n    [ $n -eq 7 ] || return $(( $i % $p ))\n    [ $n -eq 8 ]\
    \ || return $(( $i % $p ))\n    [ $n -eq 9 ] || return $(( $i % $p ))\n    [ $n\
    \ -eq 10 ] || return $(( $i % $p ))\n    [ $n -eq 11 ] || return $(( $i % $p ))\n\
    \    [ $n -eq 12 ] || return $(( $i % $p ))\n    [ $n -eq 13 ] || return $(( $i\
    \ % $p ))\n    [ $n -eq 14 ] || return $(( $i % $p ))\n    [ $n -eq 15 ] || return\
    \ $(( $i % $p ))\n    [ $n -eq 16 ] || return $(( $i % $p ))\n    [ $n -eq 17\
    \ ] || return $(( $i % $p ))\n    [ $n -eq 18 ] || return $(( $i % $p ))\n   \
    \ [ $n -eq 19 ] || return $(( $i % $p ))\n    [ $n -eq 20 ] || return $(( $i %\
    \ $p ))\n    [ $n -eq 21 ] || return $(( $i % $p ))\n    [ $n -eq 22 ] || return\
    \ $(( $i % $p ))\n    [ $n -eq 23 ] || return $(( $i % $p ))\n    [ $n -eq 24\
    \ ] || return $(( $i % $p ))\n    [ $n -eq 25 ] || return $(( $i % $p ))\n   \
    \ [ $n -eq 26 ] || return $(( $i % $p ))\n    [ $n -eq 27 ] || return $(( $i %\
    \ $p ))\n    [ $n -eq 28 ] || return $(( $i % $p ))\n    [ $n -eq 29 ] || return\
    \ $(( $i % \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpltq1ummz.sh: line 50: unexpected EOF while looking for matching
    `)''

    /tmp/tmpltq1ummz.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod\n    mod=$(( (j % i) + i ))\n\
    \    echo $mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res\n    local i\n    local j\n   \
    \ local k\n    local m\n    local nmodp\n    local nmodpmodp\n    local nmodpmodpmodp\n\
    \    local nmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$3\n\tlocal m=$4\n\tlocal d=$5\n\
    \tlocal s=$6\n\tlocal t=$7\n\tlocal u=$8\n\tlocal v=$9\n\tlocal w=$10\n\tlocal\
    \ x=$11\n\tlocal y=$12\n\tlocal z=$13\n\tlocal A=$14\n\tlocal B=$15\n\tlocal C=$16\n\
    \tlocal D=$17\n\tlocal E=$18\n\tlocal F=$19\n\tlocal G=$20\n\tlocal H=$21\n\t\
    local I=$22\n\tlocal J=$23\n\tlocal K=$24\n\tlocal L=$25\n\tlocal M=$26\n\tlocal\
    \ N=$27\n\tlocal O=$28\n\tlocal P=$29\n\tlocal Q=$30\n\tlocal R=$31\n\tlocal S=$32\n\
    \tlocal T=$33\n\tlocal U=$34\n\tlocal V=$35\n\tlocal W=$36\n\tlocal X=$37\n\t\
    local Y=$38\n\tlocal Z=$39\n\tlocal a=$40\n\tlocal b=$41\n\tlocal c=$42\n\tlocal\
    \ d=$43\n\tlocal e=$44\n\tlocal f=$45\n\tlocal g=$46\n\tlocal h=$47\n\tlocal i=$48\n\
    \tlocal j=$49\n\tlocal k=$50\n\tlocal l=$51\n\tlocal m=$52\n\tlocal n=$53\n\t\
    local o=$54\n\tlocal p=$55\n\tlocal q=$56\n\tlocal r=$57\n\tlocal s=$58\n\tlocal\
    \ t=$59\n\tlocal u=$60\n\tlocal v=$61\n\tlocal w=$62\n\tlocal x=$63\n\tlocal y=$64\n\
    \tlocal z=$65\n\tlocal A=$66\n\tlocal B=$67\n\tlocal C=$68\n\tlocal D=$69\n\t\
    local E=$70\n\tlocal F=$71\n\tlocal G=$72\n\tlocal H=$73\n\tlocal I=$74\n\tlocal\
    \ J=$75\n\tlocal K=$76\n\tlocal L=$77\n\tlocal M=$78\n\tlocal N=$79\n\tlocal O=$80\n\
    \tlocal P=$81\n\tlocal Q=$82\n\tlocal R=$83\n\tlocal S=$84\n\tlocal T\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $q % $p ))\n \
    \   i=$(( $q / $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i\
    \ % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n\
    \    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i\
    \ % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n\
    \    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i\
    \ % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n\
    \    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i\
    \ % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n\
    \    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i\
    \ % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n\
    \    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i\
    \ % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n\
    \    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i\
    \ % $p ))\n    i=$(( $i % $p ))\n    i=$(( $i % $p ))\n    i=\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod\n    mod=$(( (j % i) + i ))\n\
    \    echo $mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal r\n\tlocal n\n\tlocal m\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile [ $i -le $j ]; do\n\t\ti=$(( $i + 1 ))\n\t\
    done\n\techo $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res\n    local mod\n    local modp\n\
    \    local modp2\n    local modp2modp\n    local modp2modpmod\n    local modp2modpmodp\n\
    \    local modp2modpmodpmod\n    local modp2modpmodpmodp\n    local modp2modpmodpmodpmod\n\
    \    local modp2modpmodpmodpmodp\n    local modp2modpmodpmodpmodpmod\n    local\
    \ modp2modpmodpmodpmodpmod\n    local modp2modpmodpmodpmodpmodp\n    local modp2modpmodpmodpmodpmodpmod\n\
    \    local modp2modpmodpmodpmodpmodpmod\n    local modp2modpmodpmodpmodpmodpmod\n\
    \    local modp2modpmodpmodpmodpmodpmodp\n    local modp2modpmodpmodpmodpmodpmodpmod\n\
    \    local modp2modpmodpmodpmodpmodpmodpmod\n    local modp2modpmodpmodpmodpmodpmodpmod\n\
    \    local modp2modpmodpmodpmodpmodpmodpmodp\n    local modp2modpmodpmodpmodpmodpmodpmodpmod\n\
    \    local modp2modpmodpmodpmodpmodpmodpmodpmod\n    local modp2modpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local modp2modpmodpmodpmodpmodpmodpmodpmodpmod\n    local modp2modpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local modp2modpmodpmodpmodpmodpmodpmodpmodpmodpmod\n    local modp2modpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \    local modp2modpmodpmodpmodpmodpmodpmodpmodpmodpmod\n    local modp2modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \    local modp2modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local mod=$(( n % p ))\n    [ $mod -eq 0\
    \ ] && return $n || return $mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i < j )); do\n\t\t(( i++ ))\n\tdone\n\t\
    echo $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal nmodpmodp\n\tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod\n    mod=$(( (j % i) + i ))\n\
    \    echo $mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal nmodpmodp\n\tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local nmod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod\n    mod=$(( i % j))\n    if\
    \ [ $mod -eq 0 ]; then\n        mod=$(( j - mod ))\n    fi\n    echo $mod\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  (( i = $1 ))\n  (( j = $2 ))\n  (( i % j == 0 )) && echo $i ||\
    \ echo $(( i % j + j ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i < j )); do\n\t\ti=$(( i + 1 ))\n\tdone\n\
    \techo $(( i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local n=$1\n    local p=$2\n    local mod=$(( p - 1 ))\n \
    \   local modp=$(( mod * n ))\n    local modpmod=$(( modp + mod ))\n    local\
    \ modpmodp=$(( modpmod * n ))\n    local modpmodpmod=$(( modpmodp + mod ))\n \
    \   local modpmodpmodp=$(( modpmodpmod + mod ))\n    local modpmodpmodpmod=$((\
    \ modpmodpmodmod + mod ))\n    local modpmodpmodpmodp=$(( modpmodpmodpmod + mod\
    \ ))\n    local modpmodpmodpmodpmod=$(( modpmodpmodpmodmod + mod ))\n    local\
    \ modpmodpmodpmodpmodp=$(( modpmodpmodpmodpmod + mod ))\n    local modpmodpmodpmodpmodpmod=$((\
    \ modpmodpmodpmodpmodpmod + mod ))\n    local modpmodpmodpmodpmodpmodp=$(( modpmodpmodpmodpmodpmodmod\
    \ + mod ))\n    local modpmodpmodpmodpmodpmodpmod=$(( modpmodpmodpmodpmodpmodpmod\
    \ + mod ))\n    local modpmodpmodpmodpmodpmodpmod=$(( modpmodpmodpmodpmodpmodpmodmod\
    \ + mod ))\n    local modpmodpmodpmodpmodpmodpmodpmod=$(( modpmodpmodpmodpmodpmodpmodpmodmod\
    \ + mod ))\n    local modpmodpmodpmodpmodpmodpmodpmodp=$(( modpmodpmodpmodpmodpmodpmodpmodmod\
    \ + mod ))\n    local modpmodpmodpmodpmodpmodpmodpmodp=$(( modpmodpmodpmodpmodpmodpmodpmodpmod\
    \ + mod ))\n    local modpmodpmodpmodpmodpmodpmodpmodpmod=$(( modpmodpmodpmodpmodpmodpmodpmodpmodpmod\
    \ + mod ))\n    local \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i n p\n\ti=$1\n\tn=$2\n\tp=$3\n\t(( i % p )) && echo $(( i % p ))\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmplue9a6de.sh: line 21: ((: i % p : division by 0 (error token is
    "p ")

    '
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal\
    \ q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal w\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1; j=$2\n    while (( i > 0 )); do\n        i=$(( i % $j\
    \ ))\n    done\n    echo \"$i\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=29 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=27 encoding='utf-8'>
  timestamp: 1660042760
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal pmodq\n\tlocal qmodp\n\tlocal qmodq\n\
    \tlocal qmodqmodp\n\tlocal qmodqmodq\n\tlocal qmodqmodqmodp\n\tlocal qmodqmodqmodq\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodq\n\
    \tlocal qmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodq\n\tlocal qmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodqmodq\n\tlocal qmodqmodqmodqmodqmodqmodqmodp\n\tlocal\
    \ qmodqmodqmodqmodqmodqmodqmodq\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodp\n\t\
    local qmodqmodqmodqmodqmodqmodqmodqmodq\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$3\n\tlocal r\n\tlocal s\n\t\
    local t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\t\
    local a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\t\
    local h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\t\
    local o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\t\
    local v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\t\
    local c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\t\
    local j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\t\
    local q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\t\
    local x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\t\
    local e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\t\
    local l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\t\
    local s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\t\
    local z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\t\
    local g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\t\
    local n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\t\
    local u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\t\
    local b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\t\
    local i\n\t\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal r\n\tlocal n\n\tlocal m\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $p % $q ))\n\t(( $n !=\
    \ 0 )) && return $n\n\ti=$(( $q - 1 ))\n\tj=$(( $p - $q + 1 ))\n\t(( $j > 0 ))\
    \ && return $j\n\t(( $j < 0 )) && return $j\n\t(( $i == 0 )) && return $j\n\t\
    (( $i == 1 )) && return $n\n\t(( $i == 2 )) && return $n\n\t(( $i == 3 )) && return\
    \ $n\n\t(( $i == 4 )) && return $n\n\t(( $i == 5 )) && return $n\n\t(( $i == 6\
    \ )) && return $n\n\t(( $i == 7 )) && return $n\n\t(( $i == 8 )) && return $n\n\
    \t(( $i == 9 )) && return $n\n\t(( $i == 10 )) && return $n\n\t(( $i == 11 ))\
    \ && return $n\n\t(( $i == 12 )) && return $n\n\t(( $i == 13 )) && return $n\n\
    \t(( $i == 14 )) && return $n\n\t(( $i == 15 )) && return $n\n\t(( $i == 16 ))\
    \ && return $n\n\t(( $i == 17 )) && return $n\n\t(( $i == 18 )) && return $n\n\
    \t(( $i == 19 )) && return $n\n\t(( $i == 20 )) && return $n\n\t(( $i == 21 ))\
    \ && return $n\n\t(( $i == 22 )) && return $n\n\t(( $i == 23 )) && return $n\n\
    \t(( $i == 24 )) && return $n\n\t(( $i == 25 )) && return $n\n\t(( $i == 26 ))\
    \ && return $n\n\t(( $i == 27 )) && return $n\n\t(( $i == 28 )) && return $n\n\
    \t(( $i == 29 )) && return $n\n\t(( $i == 30 )) && return $n\n\t(( $i == 31 ))\
    \ && return $n\n\t(( $i == 32 )) && return $n\n\t(( $i == 33 )) && return $n\n\
    \t(( $i == 34 )) && return $n\n\t(( $i == 35 )) && return $n\n\t(( $i == 36 ))\
    \ && return $n\n\t(( $i == 37 )) && return $n\n\t(( $i == 38 )) \n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal m=$(( p - n ))\n\tlocal r=$(( n % p ))\n\t\
    (( m >= 0 )) && return $(( m + r ))\n\t(( m <= 0 )) && return $(( m + p ))\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $q % $p ))\n \
    \   local d=$(( $p / $q ))\n    local a=$(( $n % $d ))\n    local b=$(( $q / $d\
    \ ))\n    local c=$(( $n % $b ))\n    local d=$(( $q / $b ))\n    local e=$((\
    \ $n % $c ))\n    local f=$(( $q / $c ))\n    local g=$(( $n % $e ))\n    local\
    \ h=$(( $q / $e ))\n    local i=$(( $n % $f ))\n    local j=$(( $q / $f ))\n \
    \   echo $(( $n * $d + $a * $j + $b * $g + $c * $h + $d * $i + $e * $j + $f *\
    \ $g + $f * $h + $f * $i + $f * $j + $f * $g + $f * $h + $f * $i + $f * $j + $f\
    \ * $g + $f * $h + $f * $i + $f * $j + $f * $g + $f * $h + $f * $i + $f * $j +\
    \ $f * $g + $f * $h + $f * $i + $f * $j + $f * $g + $f * $h + $f * $i + $f * $j\
    \ + $f * $g + $f * $h + $f * $i + $f * $j + $f * $g + $f * $h + $f * $i + $f *\
    \ $j + $f * $g + $f * $h + $f * $i + $f * $j + $f * $g + $f * $h + $f * $i + $f\
    \ * $j + $f * $g + $f * $h + $f * $i + $f * $j + $f * $g + $f * $h + $f * $i +\
    \ $f * $j + $f * $g + $f * $h + $f * $i + $f * $j + $f * $g + $f * $h + $f * $i\
    \ + $f * $j + $f * $g + $f * $h + $f * $i + $f * $j + $f * $g + $f * $h + $f *\
    \ $i + $f * $j + $f * $g + $f * $h + $f * $i + $f * $j\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjpcic8rw.sh: line 32: unexpected EOF while looking for matching
    `)''

    /tmp/tmpjpcic8rw.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$(( p % q))\n  \
    \  local rem=$(( p / q))\n    local modp=$(( mod * q))\n    local remp=$(( rem\
    \ % q))\n    local remq=$(( rem / q))\n    local remmodp=$(( remq * q))\n    local\
    \ remremq=$(( remmod * q))\n    local remremmodp=$(( remremq * q))\n    local\
    \ remremremq=$(( remremmodp * q))\n    local remremremmodp=$(( remremremq * q))\n\
    \    local remremremremq=$(( remremremmodp * q))\n    local remremremremmodp=$((\
    \ remremremremq * q))\n    local remremremremremq=$(( remremremremp * q))\n  \
    \  local remremremremmodp=$(( remremremremq * q))\n    local remremremremremq=$((\
    \ remremremremmodp * q))\n    local remremremremmodp=$(( remremremremq * q))\n\
    \    local remremremremq=$(( remremremmodp * q))\n    local remremremmodp=$((\
    \ remremremq * q))\n    local remremremq=$(( remremremmodp * q))\n    local remremremmodp=$((\
    \ remremremq * q))\n    local remremremq=$(( remremremmodp * q))\n    local remremremmodp=$((\
    \ remremremq * q))\n    local remremremq=$(( remremremmodp * q))\n    local remremremmodp=$((\
    \ remremremq * q))\n    local remremremq=$(( remremremmodp * q))\n    local remremremmodp=$((\
    \ remremremq * q))\n    local remremremq=$(( remremremmodp * q))\n    local remremremmodp=$((\
    \ remremremq * q))\n    local remremremq=$(( remremremmodp * q))\n    local rem\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $p % $q ))\n\t(( $n % $q\
    \ ))\n\techo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal mod=$(( n % p ))\n\tif [ $mod -eq 0 ]; then\n\
    \t\tmod=$p\n\tfi\n\techo $mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( p * q % p ))\n\
    \    i=$(( p * q / p ))\n    j=$(( q % p ))\n    i=$(( i % p ))\n    j=$(( j %\
    \ p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=$(( i % p ))\n    j=$(( j % p ))\n    i=$(( i % p ))\n    j=$((\
    \ j % p ))\n    i=\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal s=$(( n % p ))\n\tlocal r=$(( n / p ))\n\t\
    echo $(( s * p + r ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$((p-1))\n    local\
    \ res\n    local modp\n    local modq\n    local modqmod\n    local modqmodp\n\
    \    local modqmodq\n    local modqmodqmod\n    local modqmodqmodp\n    local\
    \ modqmodqmodq\n    local modqmodqmodqmod\n    local modqmodqmodqmodp\n    local\
    \ modqmodqmodqmodq\n    local modqmodqmodqmodqmod\n    local modqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodq\n    local modqmodqmodqmodqmodqmod\n    local\
    \ modqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodq\n    local modqmodqmodqmodqmodqmodqmod\n\
    \    local modqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodq\n\
    \    local modqmodqmodqmodqmodqmodqmodqmod\n    local modqmodqmodqmodqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodq\n    local modqmodqmodqmodqmodqmodqmodqmodqmod\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodq\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodqmod\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodq\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodq\n\
    \    local modq\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local mod=$(( (n%p) + p ))\n    echo $mod\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    while (( i > 0 )); do\n        i=$(( i\
    \ - j ))\n        j=$(( j - 1 ))\n    done\n    echo \"$j\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  i=$1\n  j=$2\n  (( i % j == 0 )) && return $i\n  (( i % j != 0\
    \ )) && return $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local m=$((p-1))\n    local r=$(echo \"$n\
    \ / $p\" | bc)\n    local q=$((r * $m))\n    local r=$((r - q))\n    echo $q\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i <= j )); do\n\t\ti=$(( i + 1 ))\n\t\
    done\n\techo $(( i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i < j )); do\n\t\ti=$(( i + 1 ))\n\tdone\n\
    \techo $(( i % $2 ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local m=$(( p + 1 ))\n    local d=$(( p -\
    \ m ))\n    local r=$(( n / m ))\n    local s=$(( n % m ))\n    echo $(( r * m\
    \ + ( s * d )))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\tlocal mod\n\tmod=$(( (j % i) + i ))\n\techo $mod\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local p=$3\n    local mod=$((p-1))\n \
    \   local modp=$((mod*i))\n    local modpmod=$((modp*j))\n    local modpmodp=$((modpmod*p))\n\
    \    echo $modpmodp\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( p - q + 1 ))\n\
    \    local d=$(( p - q + 1 ))\n    local m=$(( p - q + 1 ))\n    local r=$(( p\
    \ - q + 1 ))\n    local s=$(( p - q + 1 ))\n    local t=$(( p - q + 1 ))\n   \
    \ local u=$(( p - q + 1 ))\n    local v=$(( p - q + 1 ))\n    local w=$(( p -\
    \ q + 1 ))\n    local x=$(( p - q + 1 ))\n    local y=$(( p - q + 1 ))\n    local\
    \ z=$(( p - q + 1 ))\n    local A=$(( p - q + 1 ))\n    local B=$(( p - q + 1\
    \ ))\n    local C=$(( p - q + 1 ))\n    local D=$(( p - q + 1 ))\n    local E=$((\
    \ p - q + 1 ))\n    local F=$(( p - q + 1 ))\n    local G=$(( p - q + 1 ))\n \
    \   local H=$(( p - q + 1 ))\n    local I=$(( p - q + 1 ))\n    local J=$(( p\
    \ - q + 1 ))\n    local K=$(( p - q + 1 ))\n    local L=$(( p - q + 1 ))\n   \
    \ local M=$(( p - q + 1 ))\n    local N=$(( p - q + 1 ))\n    local O=$(( p -\
    \ q + 1 ))\n    local P=$(( p - q + 1 ))\n    local Q=$(( p - q + 1 ))\n    local\
    \ R=$(( p - q + 1 ))\n    local S=$(( p - q + 1 ))\n    local T=$(( p - q + 1\
    \ ))\n    local U=$(( p - q + 1 ))\n    local V=$(( p - q + 1 ))\n    local W=$((\
    \ p - q + 1 ))\n    local X=$(( p - q + 1 ))\n    local Y=$(( p - q + 1 ))\n \
    \   local Z=$(( p - q + 1 ))\n    local AA=$(( p - q + 1 ))\n    local AB=$((\
    \ p - q + 1 ))\n    local AC=$(( p - q + 1 ))\n    local AD\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal res\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal m\n\tlocal nmodp\n\tlocal modp\n\tlocal modpmodp\n\
    \tlocal modpmodpmodp\n\tlocal modpmodpmodpmodp\n\tlocal modpmodpmodpmodpmodp\n\
    \tlocal modpmodpmodpmodpmodpmodp\n\tlocal modpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ modpmodpmodpmodpmodpmodpmodpmodp\n\tlocal modpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ modpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ modp\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( p - q + 1 ))\n\
    \    local d=$(( p - q + 1 ))\n    local s=0\n    local t=$(( p / q ))\n    local\
    \ u=$(( p % q ))\n    local v=$(( q / q ))\n    local w=$(( q % q ))\n    local\
    \ x=$(( p / q ))\n    local y=$(( p % q ))\n    local z=$(( q / q ))\n    local\
    \ a=$(( q % q ))\n    local b=$(( p / q ))\n    local c=$(( p % q ))\n    local\
    \ d=$(( q / q ))\n    local e=$(( q % q ))\n    local f=$(( p / q ))\n    local\
    \ g=$(( p % q ))\n    local h=$(( q / q ))\n    local i=$(( q % q ))\n    local\
    \ j=$(( p / q ))\n    local k=$(( p % q ))\n    local l=$(( q / q ))\n    local\
    \ m=$(( q % q ))\n    local n=$(( p / q ))\n    local o=$(( p % q ))\n    local\
    \ p=$(( q / q ))\n    local q=$(( q % q ))\n    local r=$(( p / q ))\n    local\
    \ s=$(( p % q ))\n    local t=$(( q / q ))\n    local u=$(( q % q ))\n    local\
    \ v=$(( p / q ))\n    local w=$(( p % q ))\n    local x=$(( q / q ))\n    local\
    \ y=$(( q % q ))\n    local z=$(( p / q ))\n    local a=$(( p % q ))\n    local\
    \ b=$(( q / q ))\n    local c=$(( q % q ))\n    local d=$(( p / q ))\n    local\
    \ e=$(( p % q ))\n    local f=$(( q / q ))\n    local g=$(( q % q ))\n    local\
    \ h=$(( p / q ))\n    local i=$(( p % q ))\n    local j=$\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfdw0qydc.sh: line 47: p / q : division by 0 (error token is "q
    ")

    '
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal m=$(( (n%p) + p ))\n\t[ \"$m\" -gt \"$p\"\
    \ ] && m=$(( m + p ))\n\t[ \"$m\" -lt \"$p\" ] && m=$(( m - p ))\n\techo $m\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod\n    mod=$(( (j % i) + i ))\n\
    \    echo $mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local r\n    local n\n   \
    \ local m\n    local x\n    local y\n    local z\n    local a\n    local b\n \
    \   local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal q\n\tlocal r\n\tlocal s\n\
    \tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\t\
    local a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\t\
    local h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal nmodp\n\
    \tlocal pmodp\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal q\n\
    \tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\t\
    local y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\t\
    local f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\t\
    local m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal nmodp\n\t\
    local pmodp\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\
    \tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $p % $q ))\n\t[ \"$n\"\
    \ -eq 0 ] && return $q\n\t[ \"$n\" -eq 1 ] && return $q\n\t[ \"$n\" -eq 2 ] &&\
    \ return $q\n\t[ \"$n\" -eq 3 ] && return $q\n\t[ \"$n\" -eq 4 ] && return $q\n\
    \t[ \"$n\" -eq 5 ] && return $q\n\t[ \"$n\" -eq 6 ] && return $q\n\t[ \"$n\" -eq\
    \ 7 ] && return $q\n\t[ \"$n\" -eq 8 ] && return $q\n\t[ \"$n\" -eq 9 ] && return\
    \ $q\n\t[ \"$n\" -eq 10 ] && return $q\n\t[ \"$n\" -eq 11 ] && return $q\n\t[\
    \ \"$n\" -eq 12 ] && return $q\n\t[ \"$n\" -eq 13 ] && return $q\n\t[ \"$n\" -eq\
    \ 14 ] && return $q\n\t[ \"$n\" -eq 15 ] && return $q\n\t[ \"$n\" -eq 16 ] &&\
    \ return $q\n\t[ \"$n\" -eq 17 ] && return $q\n\t[ \"$n\" -eq 18 ] && return $q\n\
    \t[ \"$n\" -eq 19 ] && return $q\n\t[ \"$n\" -eq 20 ] && return $q\n\t[ \"$n\"\
    \ -eq 21 ] && return $q\n\t[ \"$n\" -eq 22 ] && return $q\n\t[ \"$n\" -eq 23 ]\
    \ && return $q\n\t[ \"$n\" -eq 24 ] && return $q\n\t[ \"$n\" -eq 25 ] && return\
    \ $q\n\t[ \"$n\" -eq 26 ] && return $q\n\t[ \"$n\" -eq 27 ] && return $q\n\t[\
    \ \"$n\" -eq 28 ] && return $q\n\t[ \"$n\" -eq 29 ] && return $q\n\t[ \"$n\" -eq\
    \ 30 ] && return $q\n\t[ \"$n\" -eq 31 ] && return $q\n\t[ \"$n\" -eq 32 ] &&\
    \ return $q\n\t[ \"$n\" -eq 33 ] && return $q\n\t[ \"$n\" -eq 34 ] && return $q\n\
    \t[ \"$n\" -eq 35 ] && return $q\n\t[ \"$n\" -eq 36 ] && return $q\n\t\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\n\techo \"$(( ($i % $j) + $j))\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local mod=$(( n % p ))\n    if [ $mod -eq\
    \ 0 ]; then\n        mod=$p\n    fi\n    echo \"$mod\"\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local p=$3\n    local mod=$4\n    local\
    \ modp\n    modp=$(( ($i % $p) + $mod ))\n    echo $modp\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzajjg7wk.sh: line 23: (3 % ) +  : syntax error: operand expected
    (error token is ") +  ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal mod=$(( n % p ))\n\techo $mod\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$((p%q))\n    local\
    \ rem=$((q%p))\n    local modp=$((mod+rem))\n    echo $modp\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local mod=$((p-1))\n    local rem=$((n%p))\n\
    \    echo $((rem+mod))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal mod=$(( (n%p) + p ))\n\techo \"$mod\"\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $p + $q ))\n\tlocal d=$((\
    \ $p - $q ))\n\tlocal s=$(( $n % $p ))\n\tlocal t=$(( $n % $q ))\n\tlocal u=$((\
    \ $n / $p ))\n\tlocal v=$(( $n / $q ))\n\tlocal w=$(( $d % $p ))\n\tlocal x=$((\
    \ $d % $q ))\n\tlocal y=$(( $d / $p ))\n\tlocal z=$(( $d / $q ))\n\tlocal a=$((\
    \ $s * $t ))\n\tlocal b=$(( $s * $u ))\n\tlocal c=$(( $t * $u ))\n\tlocal d=$((\
    \ $t * $v ))\n\tlocal e=$(( $u * $v ))\n\tlocal f=$(( $u * $w ))\n\tlocal g=$((\
    \ $v * $w ))\n\tlocal h=$(( $v * $x ))\n\tlocal i=$(( $w * $x ))\n\tlocal j=$((\
    \ $w * $y ))\n\tlocal k=$(( $x * $y ))\n\tlocal l=$(( $x * $z ))\n\tlocal m=$((\
    \ $y * $z ))\n\tlocal n=$(( $n * $z ))\n\tlocal o=$(( $n * $p ))\n\tlocal p=$((\
    \ $n * $q ))\n\tlocal q=$(( $n * $r ))\n\tlocal r=$(( $n * $s ))\n\tlocal s=$((\
    \ $n * $t ))\n\tlocal t=$(( $n * $u ))\n\tlocal u=$(( $n * $v ))\n\tlocal v=$((\
    \ $n * $w ))\n\tlocal w=$(( $n * $x ))\n\tlocal x=$(( $n * $y ))\n\tlocal y=$((\
    \ $n * $z ))\n\tlocal z=$(( $n * $r ))\n\tlocal r=$(( $n * $s ))\n\tlocal s=$((\
    \ $n * $t ))\n\tlocal t=$(( $n * $u ))\n\tlocal u=$(( $n * $v ))\n\tlocal v=$((\
    \ $n * $w ))\n\tlocal w=$(( $n * $x ))\n\tlocal x=$(( $n * $y ))\n\tlocal y=$((\
    \ $n * $z ))\n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpref8v5jh.sh: line 46: 0 *  : syntax error: operand expected (error
    token is "*  ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( ($p + $q - 1) % $q ))\n\
    \ti=$(( $p - $n ))\n\tj=$(( $q - $n ))\n\techo $(( $i * $j / $q ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$(( p + q % p ))\n\
    \    local rem=$(( q - mod ))\n    local modp=$(( mod - p ))\n    local remmodp=$((\
    \ rem % p ))\n    local remrem=$(( rem - modp ))\n    local modq=$(( mod - q ))\n\
    \    local remmodq=$(( rem - modq ))\n    local modprem=$(( mod - rem ))\n   \
    \ local remmodprem=$(( rem - modprem ))\n    local modqrem=$(( mod - remrem))\n\
    \    local remmodqrem=$(( rem - modqrem ))\n    local modpremrem=$(( mod - remmodp\
    \ ))\n    local remmodpremrem=$(( rem - modprem))\n    local modqremrem=$(( mod\
    \ - remmodq))\n    local remmodqremrem=$(( rem - modqremrem))\n    local modpremremrem=$((\
    \ mod - remmodprem))\n    local remmodpremrem=$(( rem - modpremrem))\n    local\
    \ modqremrem=$(( mod - remmodqrem))\n    local remmodqremrem=$(( rem - modqremrem))\n\
    \    local modpremremrem=$(( mod - remmodprem))\n    local remmodpremrem=$(( rem\
    \ - modpremrem))\n    local modqremrem=$(( mod - remmodqrem))\n    local remmodqremrem=$((\
    \ rem - modqremrem))\n    local modpremremrem=$(( mod - remmodpremrem))\n    local\
    \ remmodpremrem=$(( rem - modpremremrem))\n    local modqremrem=$(( mod - remmodqremrem))\n\
    \    local remmodqremrem=$(( rem - modqremremrem))\n    local modpremremrem=$((\
    \ mod - remmodpremrem))\n    local remmodpremrem=$(( rem - modpremremrem))\n \
    \   local modqremrem=$(( mod - remmodqremrem))\n    local remmodqremrem=$\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p + $q - $p %\
    \ $q ))\n    local r=$(( $n % $p ))\n    local s=$(( $p % $q ))\n    local u=$((\
    \ $p / $q ))\n    local t=$(( $u * $q ))\n    local v=$(( $u + $s ))\n    local\
    \ w=$(( $v * $q ))\n    local x=$(( $u + $s ))\n    local y=$(( $v * $q ))\n \
    \   local z=$(( $u * $q ))\n    local A=$(( $u + $s ))\n    local B=$(( $v * $q\
    \ ))\n    local C=$(( $u * $q ))\n    local D=$(( $u + $s ))\n    local E=$((\
    \ $v * $q ))\n    local F=$(( $u * $q ))\n    local G=$(( $u + $s ))\n    local\
    \ H=$(( $v * $q ))\n    local I=$(( $u * $q ))\n    local J=$(( $u + $s ))\n \
    \   local K=$(( $v * $q ))\n    local L=$(( $u * $q ))\n    local M=$(( $u + $s\
    \ ))\n    local N=$(( $v * $q ))\n    local O=$(( $u * $q ))\n    local P=$((\
    \ $u + $s ))\n    local Q=$(( $v * $q ))\n    local R=$(( $u * $q ))\n    local\
    \ S=$(( $u + $s ))\n    local T=$(( $v * $q ))\n    local U=$(( $u * $q ))\n \
    \   local V=$(( $u + $s ))\n    local W=$(( $v * $q ))\n    local X=$(( $u + $s\
    \ ))\n    local Y=$(( $v * $q ))\n    local Z=$(( $u * $q ))\n    local AA=$((\
    \ $u + $s ))\n    local AB=$(( $v * $q ))\n    local AC=$(( $u * $q ))\n    local\
    \ AD=$(( $u + $s ))\n    local AE=$(( $v * $q \n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn9t8w4_5.sh: line 60: unexpected EOF while looking for matching
    `)''

    /tmp/tmpn9t8w4_5.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile [ $i -gt 0 ]; do\n\t\ti=$(( $i - $j ))\n\t\
    \tj=$(( $j + $j ))\n\tdone\n\techo $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $p % $q ))\n\t(( $n % $q\
    \ ))\n\techo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i > 0 )) ; do\n\t\ti=$(( i - j ))\n\t\t\
    j=$(( j - 1 ))\n\tdone\n\techo $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$(( p % q))\n  \
    \  local rem=$(( p / q))\n    local remmod=$(( rem % q))\n    local remrem=$((\
    \ rem / q))\n    local remremmod=$(( remrem % q))\n    local remremremmod=$((\
    \ remremrem % q))\n    local remremremmod=$(( remremremrem % q))\n    local remremremremmod=$((\
    \ remremremremrem % q))\n    local remremremremremmod=$(( remremremremremrem %\
    \ q))\n    local remremremremremremmod=$(( remremremremremrem% q))\n    local\
    \ remremremremremremremmod=$(( remremremremremrem% q))\n    local remremremremremremremmod=$((\
    \ remremremremremrem% q))\n    local remremremremremremremmod=$(( remremremremremrem%\
    \ q))\n    local remremremremremremremremremmod=$(( remremremremremremrem% q))\n\
    \    local remremremremremremremremremmod=$(( remremremremremremrem% q))\n   \
    \ local remremremremremremremremmod=$(( remremremremremrem% q))\n    local remremremremremremremremmod=$((\
    \ remremremremremrem% q))\n    local remremremremremremremremmod=$(( remremremremremremrem%\
    \ q))\n    local remremremremremremremremremmod=$(( remremremremremremrem% q))\n\
    \    local remremremremremremremremremmod=$(( remremremremremrem% q))\n    local\
    \ remremremremremremremremremmod=$(( remremremremremrem% q))\n    local remremremremremremremremmod=$((\
    \ remremremremremrem% q))\n    local remremremremremremremremmod=$(( remremremremremrem%\
    \ q))\n    local remremremremremremremremremmod=$(( remremremremremrem% \n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp8r3_njx6.sh: line 43: unexpected EOF while looking for matching
    `)''

    /tmp/tmp8r3_njx6.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  local p=$1\n  local q=$2\n  local mod=$((p%q))\n  i=$((q%p))\n\
    \  j=$((p%q))\n  if (( mod != 0 )); then\n    i=$((q%p))\n    j=$((p%q))\n  fi\n\
    \  if (( i != 0 )); then\n    i=$((q%p))\n  fi\n  if (( j != 0 )); then\n    j=$((p%q))\n\
    \  fi\n  echo $(( p + q - i*q - j*p ))\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\n\tlocal mod\n\tmod=\"$(( (j % i) + i ))\"\
    \n\techo \"$mod\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $p % $q ))\n\ti=$(( $p\
    \ - $n ))\n\tj=$(( $q - $i ))\n\techo $(( $n * $j + $i ))\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i < j )); do\n\t\ti=$(( i + 1 ))\n\tdone\n\
    \techo $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=$(( (n % p) + p ))\n    if [ $r -eq\
    \ 0 ]; then\n        r=$p\n    fi\n    echo \"$r\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  local p=$1\n  local q=$2\n  local r=$(( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxob7rk47.sh: line 20: unexpected EOF while looking for matching
    `)''

    /tmp/tmpxob7rk47.sh: line 39: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local p=$3\n    local mod=$((p-1))\n \
    \   local modp=$((mod*i))\n    local modp2=$((modp*j))\n    local modp3=$((modp2*i))\n\
    \    echo $modp3\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$((p%q))\n    local\
    \ rem=$((q%p))\n    local modp=$((mod+rem))\n    echo $modp\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local x=$(( (n % p) + p ))\n  echo \"$x\"\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal pmodpmod\n\tlocal pmodpmodp\n\tlocal\
    \ pmodpmodpmod\n\tlocal pmodpmodpmodp\n\tlocal pmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmodpmod\n\tlocal\
    \ pmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ pmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodp\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal r\n\tlocal n\n\tlocal m\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal\
    \ e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal mod=$((p%q))\n\tlocal rem=$((q%p))\n\
    \tlocal ret=$mod\n\tlocal mod2=$((mod+1))\n\twhile ((mod2 < mod)); do\n\t\tret=$((ret+1))\n\
    \t\tmod2=$((mod2+1))\n\tdone\n\twhile ((rem > 0)); do\n\t\tret=$((ret+1))\n\t\t\
    rem=$((rem-1))\n\tdone\n\techo $ret\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p % $q ))\n \
    \   local d=$(( $q - $n ))\n    local s=$(( $p / $q ))\n    local m=$(( $p - $s\
    \ * $q ))\n    local a=$(( $q * $q - $s * $s * $q ))\n    local b=$(( $s * $s\
    \ * $q ))\n    local c=$(( $s * $s * $s * $q ))\n    local d=$(( $q * $q * $q\
    \ ))\n    local e=$(( $q * $q * $q * $q ))\n    local f=$(( $q * $q * $q * $q\
    \ * $q ))\n    local g=$(( $q * $q * $q * $q * $q * $q ))\n    local h=$(( $q\
    \ * $q * $q * $q * $q * $q * $q ))\n    local i=$(( $q * $q * $q * $q * $q * $q\
    \ * $q * $q ))\n    local j=$(( $q * $q * $q * $q * $q * $q * $q * $q * $q ))\n\
    \    local k=$(( $q * $q * $q * $q * $q * $q * $q * $q * $q * $q ))\n    local\
    \ l=$(( $q * $q * $q * $q * $q * $q * $q * $q * $q * $q * $q ))\n    local m=$((\
    \ $q * $q * $q * $q * $q * $q * $q * $q * $q * $q * $q ))\n    local n=$(( $q\
    \ * $q * $q * $q * $q * $q * $q * $q * $q * $q * $q * $q ))\n    local o=$(( $q\
    \ * $q * $q * $q * $q * $q * $q * $q * $q * $q * $q * $q * $q ))\n    local p=$((\
    \ $q * $q * $q * $q * $q * $q * $q * $q * $\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpndo535xe.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmpndo535xe.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\n\tlocal p=\"$3\"\n\tlocal m=\"$4\"\n\tlocal\
    \ n=\"$5\"\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\
    \tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\t\
    local k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\t\
    local r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\t\
    local y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\t\
    local f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\t\
    local m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\t\
    local t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\t\
    local a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\t\
    local h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\t\
    local o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\t\
    local v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\t\
    local c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\t\
    local j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\t\
    local q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\t\
    local x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\t\
    local e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\t\
    local l\n\tlocal \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p % $q ))\n \
    \   local d=$(( $q - $n ))\n    local r=$(( $n % $p ))\n    local s=$(( $p - $r\
    \ ))\n    local u=$(( $q + $s ))\n    echo $(( $u + $r ))\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$(( p % q))\n  \
    \  i=$(( p / q))\n    j=$(( q - mod * q))\n    echo $(( i * q + j))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res\n    local i\n    local j\n   \
    \ local k\n    local m\n    local nmodp\n    local nmodpmodp\n    local nmodpmodpmodp\n\
    \    local nmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( p - q + 1 ))\n\
    \    local d=$(( p - q + 1 ))\n    local r=$(( p - q + 1 ))\n    local s=$(( p\
    \ - q + 1 ))\n    local t=$(( p - q + 1 ))\n    local u=$(( p - q + 1 ))\n   \
    \ local v=$(( p - q + 1 ))\n    local w=$(( p - q + 1 ))\n    local x=$(( p -\
    \ q + 1 ))\n    local y=$(( p - q + 1 ))\n    local z=$(( p - q + 1 ))\n    local\
    \ A=$(( p - q + 1 ))\n    local B=$(( p - q + 1 ))\n    local C=$(( p - q + 1\
    \ ))\n    local D=$(( p - q + 1 ))\n    local E=$(( p - q + 1 ))\n    local F=$((\
    \ p - q + 1 ))\n    local G=$(( p - q + 1 ))\n    local H=$(( p - q + 1 ))\n \
    \   local I=$(( p - q + 1 ))\n    local J=$(( p - q + 1 ))\n    local K=$(( p\
    \ - q + 1 ))\n    local L=$(( p - q + 1 ))\n    local M=$(( p - q + 1 ))\n   \
    \ local N=$(( p - q + 1 ))\n    local O=$(( p - q + 1 ))\n    local P=$(( p -\
    \ q + 1 ))\n    local Q=$(( p - q + 1 ))\n    local R=$(( p - q + 1 ))\n    local\
    \ S=$(( p - q + 1 ))\n    local T=$(( p - q + 1 ))\n    local U=$(( p - q + 1\
    \ ))\n    local V=$(( p - q + 1 ))\n    local W=$(( p - q + 1 ))\n    local X=$((\
    \ p - q + 1 ))\n    local Y=$(( p - q + 1 ))\n    local Z=$(( p - q + 1 ))\n \
    \   local AA=$(( p - q + 1 ))\n    local AB=$(( p - q + 1 ))\n    local AC=$((\
    \ p - q + 1 ))\n    local AD=$(( p - q + 1 ))\n    local AE\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local r\n    local n\n   \
    \ local d\n\n    # Make sure both arguments are integers\n    if [[ $1 =~ ^[0-9]+$\
    \ ]] || [[ $2 =~ ^[0-9]+$ ]]; then\n        # $1 is a number\n        # $2 is\
    \ a number\n        if [[ $1 -gt $2 ]]; then\n            # $1 is greater than\
    \ $2\n            i=$(( $1 - $2 ))\n            if [[ $i -eq 0 ]]; then\n    \
    \            # $1 is equal to $2\n                echo \"$1\"\n            else\n\
    \                # $1 is less than $2\n                j=$(( $i - 1 ))\n     \
    \           n=$(echo \"$j + $p\" | bc)\n                if [[ $n -eq 0 ]]; then\n\
    \                    # $1 is equal to $2\n                    echo \"$1\"\n  \
    \              else\n                    # $1 is greater than $2\n           \
    \         r=$(( $n - 1 ))\n                    d=$(echo \"$r + $q\" | bc)\n  \
    \                  if [[ $d -eq 0 ]]; then\n                        # $1 is equal\
    \ to $2\n                        echo \"$1\"\n                    else\n     \
    \                   # $1 is less than $2\n                        echo \"$(( $n\
    \ % $d ))\"\n                    fi\n                fi\n            fi\n    \
    \    else\n            # $1 is less than $2\n            i=$(( $2 - $1 ))\n  \
    \          if [[ $i -eq 0 ]]; then\n                # $1 is equal to $2\n    \
    \            echo \"$2\"\n            else\n                # $1 is greater than\
    \ $2\n                j=$(( $i - 1 ))\n                n=$(echo \"$j + $p\" |\
    \ bc)\n                if [[ $n -eq 0 ]]; then\n                    # $1 is equal\
    \ to $2\n                    echo \"$2\"\n                else\n             \
    \       # $1 is greater than $2\n                    r=$(( $n - 1 ))\n       \
    \             d=$(echo \"$r + $q\" | bc)\n                    if [[ $d -eq 0 ]];\
    \ then\n                        # $1 is equal to $2\n                        echo\
    \ \"$2\"\n                    else\n                        # $1 is less than\
    \ $2\n                        echo \"$(( $n % $d ))\"\n                    fi\n\
    \                fi\n            fi\n        fi\n    else\n        # $1 is not\
    \ a number\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal\
    \ m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ w\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal m\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal w\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal m\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal w\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal\
    \ m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ w\n\tlocal m\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal w\n\tlocal m\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal w\n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p % $q ))\n \
    \   i=$(( $p / $q ))\n    i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n   \
    \ i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$((\
    \ $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n   \
    \ i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$((\
    \ $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n   \
    \ i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$((\
    \ $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n   \
    \ i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$((\
    \ $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n   \
    \ i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$((\
    \ $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n   \
    \ i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$((\
    \ $i + ( $n / $q )))\n    i=$(( $i % $q ))\n    i=$(( $i + ( $n / $q )))\n   \
    \ i=$(( $i % $q ))\n    i=$(( $i \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptx_ogzuv.sh: line 61: unexpected EOF while looking for matching
    `)''

    /tmp/tmptx_ogzuv.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal nmodpmodp\n\tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local nmod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i > 0 )) ; do\n\t\ti=$(( i % j ))\n\t\
    done\n\techo $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=49 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=47 encoding='utf-8'>
  timestamp: 1660042761
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local r\n    local s\n   \
    \ local t\n    local u\n    local v\n    local w\n    local x\n    local y\n \
    \   local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$((p%q))\n    local\
    \ rem=$((q%p))\n    local modp=$((mod*q+rem))\n    echo $modp\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p + $q - 1 ))\n\
    \    local d=$(( $p - $q ))\n    local s=$(( $p % $q ))\n    local u=$(( $p /\
    \ $q ))\n    local r=$(( $n % $q ))\n    local t=$(( $n / $q ))\n    local m=$((\
    \ $d % $q ))\n    local l=$(( $d / $q ))\n    local h=$(( $n % $q ))\n    local\
    \ g=$(( $n / $q ))\n    local f=$(( $n % $q ))\n    local e=$(( $n / $q ))\n \
    \   local c=$(( $d % $q ))\n    local b=$(( $d / $q ))\n    local a=$(( $n % $q\
    \ ))\n    local j=$(( $n / $q ))\n    local i=$(( $n % $q ))\n    local k=$((\
    \ $n / $q ))\n    local l=$(( $n % $q ))\n    local j=$(( $n / $q ))\n    local\
    \ i=$(( $n % $q ))\n    local k=$(( $n / $q ))\n    local l=$(( $n % $q ))\n \
    \   local j=$(( $n / $q ))\n    local i=$(( $n % $q ))\n    local k=$(( $n / $q\
    \ ))\n    local l=$(( $n % $q ))\n    local j=$(( $n / $q ))\n    local i=$((\
    \ $n % $q ))\n    local k=$(( $n / $q ))\n    local l=$(( $n % $q ))\n    local\
    \ j=$(( $n / $q ))\n    local i=$(( $n % $q ))\n    local k=$(( $n / $q ))\n \
    \   local l=$(( $n % $q ))\n    local j=$(( $n / $q ))\n    local i=$(( $n % $q\
    \ ))\n    local k=$(( $n / $q ))\n    local l=$(( $n % $q ))\n    local j=$((\
    \ $n / $q ))\n    local i=$(( $n % $q ))\n    local k=$(( $n / $q ))\n    local\
    \ l=$(( $n % \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpft8jkz7c.sh: line 62: unexpected EOF while looking for matching
    `)''

    /tmp/tmpft8jkz7c.sh: line 81: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\n\t[ \"$i\" -eq \"$j\" ] && return \"$i\"\n\
    \t[ \"$j\" -lt \"$i\" ] && return \"$i\"\n\t[ \"$j\" -gt \"$i\" ] && return \"\
    $j\"\n\t[ \"$i\" -lt \"$j\" ] && return \"$j\"\n\t[ \"$i\" -gt \"$j\" ] && return\
    \ \"$i\"\n\t[ \"$i\" -eq \"$j\" ] && return \"$i\"\n\t[ \"$j\" -lt \"$i\" ] &&\
    \ return \"$i\"\n\t[ \"$j\" -gt \"$i\" ] && return \"$j\"\n\t[ \"$i\" -lt \"$j\"\
    \ ] && return \"$j\"\n\t[ \"$i\" -gt \"$j\" ] && return \"$i\"\n\t[ \"$i\" -eq\
    \ \"$j\" ] && return \"$i\"\n\t[ \"$j\" -lt \"$i\" ] && return \"$i\"\n\t[ \"\
    $j\" -gt \"$i\" ] && return \"$j\"\n\t[ \"$i\" -lt \"$j\" ] && return \"$j\"\n\
    \t[ \"$i\" -gt \"$j\" ] && return \"$i\"\n\t[ \"$i\" -eq \"$j\" ] && return \"\
    $i\"\n\t[ \"$j\" -lt \"$i\" ] && return \"$i\"\n\t[ \"$j\" -gt \"$i\" ] && return\
    \ \"$j\"\n\t[ \"$i\" -lt \"$j\" ] && return \"$j\"\n\t[ \"$i\" -gt \"$j\" ] &&\
    \ return \"$i\"\n\t[ \"$i\" -eq \"$j\" ] && return \"$i\"\n\t[ \"$j\" -lt \"$i\"\
    \ ] && return \"$i\"\n\t[ \"$j\" -gt \"$i\" ] && return \"$j\"\n\t[ \"$i\" -lt\
    \ \"$j\" ] && return \"$j\"\n\t[ \"$i\" -gt \"$j\" ] && return \"$i\"\n\t[ \"\
    $i\" -eq \"$j\" ] && return \"$i\"\n\t[ \"$j\" -lt \"$i\" ] && return \"$i\"\n\
    \t[ \"$j\" -gt \"$i\" ] && return \"$j\"\n\t[ \"$i\" -lt \"$j\" ] && return \"\
    $j\"\n\t[ \"$i\" -gt \"$j\" ] && return \"$i\"\n\t[ \"$i\" -eq \"$j\" ] && return\
    \ \"$i\"\n\t[ \"$j\" -lt \"$i\" ] && return \"$i\"\n\t[ \"$j\" -gt \"$i\" ] &&\
    \ return \"$j\"\n\t[ \"$\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9cdg33ub.sh: line 68: unexpected EOF while looking for matching
    `"''

    /tmp/tmp9cdg33ub.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local m=$(( p - n ))\n    local r=$(( n %\
    \ p ))\n    echo $(( r + m ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i < j )); do\n\t\t(( i++ ))\n\tdone\n\t\
    echo $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local x\n  x=$(( (n % p) + p ))\n  echo \"$x\"\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( ($p + $q - 1)\
    \ % $p ))\n    i=$(( $p - $n ))\n    j=$(( $q - $n ))\n    echo $(( $i * $j +\
    \ $n ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod\n    mod=$(( (j % i) + i ))\n\
    \    echo $mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local m=$(( (n%p) + p ))\n    echo $m\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal pmodpmod\n\tlocal pmodpmodp\n\tlocal\
    \ pmodpmodpmod\n\tlocal pmodpmodpmodp\n\tlocal pmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmodpmod\n\tlocal\
    \ pmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ pmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodp\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local p=$3\n    local mod=$(( p + 1 ))\n\
    \    local modp=$(( mod ))\n    local modp2=$(( mod + 1 ))\n    local modp3=$((\
    \ modp2 + 1 ))\n    local modp4=$(( modp3 + 1 ))\n    local modp5=$(( modp4 +\
    \ 1 ))\n    local modp6=$(( modp5 + 1 ))\n    local modp7=$(( modp6 + 1 ))\n \
    \   local modp8=$(( modp7 + 1 ))\n    local modp9=$(( modp8 + 1 ))\n    local\
    \ modp10=$(( modp9 + 1 ))\n    local modp11=$(( modp10 + 1 ))\n    local modp12=$((\
    \ modp11 + 1 ))\n    local modp13=$(( modp12 + 1 ))\n    local modp14=$(( modp13\
    \ + 1 ))\n    local modp15=$(( modp14 + 1 ))\n    local modp16=$(( modp15 + 1\
    \ ))\n    local modp17=$(( modp16 + 1 ))\n    local modp18=$(( modp17 + 1 ))\n\
    \    local modp19=$(( modp18 + 1 ))\n    local modp20=$(( modp19 + 1 ))\n    local\
    \ modp21=$(( modp20 + 1 ))\n    local modp22=$(( modp21 + 1 ))\n    local modp23=$((\
    \ modp22 + 1 ))\n    local modp24=$(( modp23 + 1 ))\n    local modp25=$(( modp24\
    \ + 1 ))\n    local modp26=$(( modp25 + 1 ))\n    local modp27=$(( modp26 + 1\
    \ ))\n    local modp28=$(( modp27 + 1 ))\n    local modp29=$(( modp28 + 1 ))\n\
    \    local modp30=$(( modp29 + 1 ))\n    local modp31=$(( modp30 + 1 ))\n    local\
    \ modp32=$(( modp31 + 1 ))\n    local modp33=$(( modp32 + 1 ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    while [ $i -le $j ]; do\n        i=$((\
    \ $i % $2 ))\n    done\n    echo \"$i\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=32 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660042761
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod=$(( (j % i) + i ))\n    echo\
    \ $mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\n\tlocal mod=\"$3\"\n\tlocal modp=\"$mod\"\
    \n\tlocal modplen=\"$modp\"\n\tlocal modplen2=\"$modplen\"\n\tlocal modplen3=\"\
    $modplen\"\n\tlocal modplen4=\"$modplen\"\n\tlocal modplen5=\"$modplen\"\n\tlocal\
    \ modplen6=\"$modplen\"\n\tlocal modplen7=\"$modplen\"\n\tlocal modplen8=\"$modplen\"\
    \n\tlocal modplen9=\"$modplen\"\n\tlocal modplen10=\"$modplen\"\n\tlocal modplen11=\"\
    $modplen\"\n\tlocal modplen12=\"$modplen\"\n\tlocal modplen13=\"$modplen\"\n\t\
    local modplen14=\"$modplen\"\n\tlocal modplen15=\"$modplen\"\n\tlocal modplen16=\"\
    $modplen\"\n\tlocal modplen17=\"$modplen\"\n\tlocal modplen18=\"$modplen\"\n\t\
    local modplen19=\"$modplen\"\n\tlocal modplen20=\"$modplen\"\n\tlocal modplen21=\"\
    $modplen\"\n\tlocal modplen22=\"$modplen\"\n\tlocal modplen23=\"$modplen\"\n\t\
    local modplen24=\"$modplen\"\n\tlocal modplen25=\"$modplen\"\n\tlocal modplen26=\"\
    $modplen\"\n\tlocal modplen27=\"$modplen\"\n\tlocal modplen28=\"$modplen\"\n\t\
    local modplen29=\"$modplen\"\n\tlocal modplen30=\"$modplen\"\n\tlocal modplen31=\"\
    $modplen\"\n\tlocal modplen32=\"$modplen\"\n\tlocal modplen33=\"$modplen\"\n\t\
    local modplen34=\"$modplen\"\n\tlocal modplen35=\"$modplen\"\n\tlocal modplen36=\"\
    $modplen\"\n\tlocal modplen37=\"$modplen\"\n\tlocal modplen38=\"$modplen\"\n\t\
    local modplen39=\"$modplen\"\n\tlocal modplen40=\"$modplen\"\n\tlocal modplen\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $q % $p ))\n \
    \   local d=$(( $p / $q ))\n    local s=$(( $n % $d ))\n    local t=$(( $d / $q\
    \ ))\n    local u=$(( $q * $t ))\n    local v=$(( $p * $t ))\n    local w=$((\
    \ $q * $u ))\n    local x=$(( $p * $u ))\n    local y=$(( $q * $v ))\n    local\
    \ z=$(( $p * $v ))\n    local A=$(( $p * $w ))\n    local B=$(( $q * $x ))\n \
    \   local C=$(( $p * $y ))\n    local D=$(( $q * $z ))\n    echo $(( $A % $p ))\n\
    \    echo $(( $B % $q ))\n    echo $(( $C % $p ))\n    echo $(( $D % $q ))\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp64chp2j4.sh: line 22: 2 % 0 : division by 0 (error token is "0
    ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$((p%q))\n    local\
    \ rem=$((q%p))\n    i=$((p%q))\n    j=$((q%p))\n    if [ $i -eq 0 ]; then\n  \
    \      echo \"$mod\"\n    elif [ $j -eq 0 ]; then\n        echo \"$rem\"\n   \
    \ else\n        echo \"$mod$rem\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( ($p + $q - 1) % $q ))\n\
    \techo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res\n    if [ $n -eq 0 ]; then\n  \
    \      echo \"0\"\n    elif [ $n -eq 1 ]; then\n        echo \"1\"\n    elif [\
    \ $n -ge 2 ]; then\n        res=$(echo \"$n % ($p * 2)\" | bc)\n        if [ $res\
    \ -gt $n ]; then\n            res=$n\n        fi\n        echo \"$res\"\n    else\n\
    \        echo \"$n\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local m=$(( p + 1 ))\n    local s=$(( n -\
    \ m ))\n    local r=$(( n % p ))\n    if [ $r -eq 0 ]; then\n        echo \"$m\"\
    \n    else\n        echo \"$s\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i > 0 )) ; do\n\t\ti=$(( i - 1 ))\n\t\t\
    j=$(( j * 2 ))\n\tdone\n\techo $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $1 % $2 ))\n\tlocal m=$((\
    \ $1 % $p ))\n\tlocal r=$(( $m / $p ))\n\tlocal s=$(( $m % $p ))\n\tlocal t=$((\
    \ $p / $q ))\n\tlocal u=$(( $p % $q ))\n\tlocal v=$(( $q / $p ))\n\tlocal w=$((\
    \ $q % $p ))\n\tlocal x=$(( $p / $q ))\n\tlocal y=$(( $p % $q ))\n\tlocal z=$((\
    \ $q / $p ))\n\tlocal A=$(( $p / $q ))\n\tlocal B=$(( $p % $q ))\n\tlocal C=$((\
    \ $q / $p ))\n\tlocal D=$(( $q % $p ))\n\tlocal E=$(( $p / $q ))\n\tlocal F=$((\
    \ $p % $q ))\n\tlocal G=$(( $q / $p ))\n\tlocal H=$(( $q % $p ))\n\tlocal I=$((\
    \ $p / $q ))\n\tlocal J=$(( $p % $q ))\n\tlocal K=$(( $q / $p ))\n\tlocal L=$((\
    \ $q % $p ))\n\tlocal M=$(( $p / $q ))\n\tlocal N=$(( $p % $q ))\n\tlocal O=$((\
    \ $q / $p ))\n\tlocal P=$(( $q % $p ))\n\tlocal Q=$(( $p / $q ))\n\tlocal R=$((\
    \ $p % $q ))\n\tlocal S=$(( $q / $p ))\n\tlocal T=$(( $q % $p ))\n\tlocal U=$((\
    \ $p / $q ))\n\tlocal V=$(( $p % $q ))\n\tlocal W=$(( $q / $p ))\n\tlocal X=$((\
    \ $q % $p ))\n\tlocal Y=$(( $p / $q ))\n\tlocal Z=$(( $p % $q ))\n\tlocal AA=$((\
    \ $p / $q ))\n\tlocal AB=$(( $p % $q ))\n\tlocal AC=$(( $q / $p ))\n\tlocal AD=$((\
    \ $q % $p ))\n\tlocal AE=$((\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsdvaja6q.sh: line 61: unexpected EOF while looking for matching
    `)''

    /tmp/tmpsdvaja6q.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i < j )); do\n\t\t(( i++ ))\n\tdone\n\t\
    echo $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local mod=$(( p - 1 ))\n  local rem=$(( n % p ))\n\
    \  echo $(( rem + mod ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal r\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal\
    \ q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal\
    \ x\n\tlocal y\n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal r=$(( (n % p) + p ))\n\t[ \"$r\" -gt \"0\"\
    \ ] && r=$(( r - p ))\n\t[ \"$r\" -lt \"p\" ] && r=$(( r + p ))\n\t[ \"$r\" -gt\
    \ \"p\" ] && r=$(( r - p ))\n\t[ \"$r\" -lt \"p\" ] && r=$(( r + p ))\n\t[ \"\
    $r\" -gt \"p\" ] && r=$(( r - p ))\n\t[ \"$r\" -lt \"p\" ] && r=$(( r + p ))\n\
    \t[ \"$r\" -gt \"p\" ] && r=$(( r - p ))\n\t[ \"$r\" -lt \"p\" ] && r=$(( r +\
    \ p ))\n\t[ \"$r\" -gt \"p\" ] && r=$(( r - p ))\n\t[ \"$r\" -lt \"p\" ] && r=$((\
    \ r + p ))\n\t[ \"$r\" -gt \"p\" ] && r=$(( r - p ))\n\t[ \"$r\" -lt \"p\" ] &&\
    \ r=$(( r + p ))\n\t[ \"$r\" -gt \"p\" ] && r=$(( r - p ))\n\t[ \"$r\" -lt \"\
    p\" ] && r=$(( r + p ))\n\t[ \"$r\" -gt \"p\" ] && r=$(( r - p ))\n\t[ \"$r\"\
    \ -lt \"p\" ] && r=$(( r + p ))\n\t[ \"$r\" -gt \"p\" ] && r=$(( r - p ))\n\t\
    [ \"$r\" -lt \"p\" ] && r=$(( r + p ))\n\t[ \"$r\" -gt \"p\" ] && r=$(( r - p\
    \ ))\n\t[ \"$r\" -lt \"p\" ] && r=$(( r + p ))\n\t[ \"$r\" -gt \"p\" ] && r=$((\
    \ r - p ))\n\t[ \"$r\" -lt \"p\" ] && r=$(( r + p ))\n\t[ \"$r\" -gt \"p\" ] &&\
    \ r=$(( r - p ))\n\t[ \"$r\" -lt \"p\" ] && r=$(( r + p ))\n\t[ \"$r\" -gt \"\
    p\" ] && r=$(( r - p ))\n\t[ \"$r\" -lt \"p\" ] && r=$(( \n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz5cvmija.sh: line 45: unexpected EOF while looking for matching
    `)''

    /tmp/tmpz5cvmija.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local r\n    local n\n   \
    \ local m\n    local x\n    local y\n    local z\n    local w\n    local a\n \
    \   local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i n p ret\n    i=$1\n    n=$2\n    p=$3\n    if [ $n -eq 0 ]\n    then\n\
    \        echo \"0\"\n    elif [ $n -eq 1 ]\n    then\n        echo \"1\"\n   \
    \ elif [ $n -ge 2 ]\n    then\n        echo \"$(( ( ( $i % $p ) + $p ) % $p ))\"\
    \n    else\n        echo \"$(( ( ( $i % $p ) + $p ) % $p ))\"\n    fi\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl1s4ugbn.sh: line 29: ( ( 3 %  ) +  ) %  : syntax error: operand
    expected (error token is ") +  ) %  ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$3\n\tlocal mod=$4\n\tlocal\
    \ res\n\tlocal modp\n\tlocal modq\n\tlocal modn\n\tlocal modmod\n\tlocal modmodp\n\
    \tlocal modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal modmodmodp\n\tlocal\
    \ modmodmodq\n\tlocal modmodmodn\n\tlocal modmodmodmod\n\tlocal modmodmodmodp\n\
    \tlocal modmodmodmodq\n\tlocal modmodmodmodn\n\tlocal modmodmodmodmod\n\tlocal\
    \ modmodmodmodp\n\tlocal modmodmodmodq\n\tlocal modmodmodmodn\n\tlocal modmodmodmod\n\
    \tlocal modmodmodp\n\tlocal modmodmodq\n\tlocal modmodmodn\n\tlocal modmodmod\n\
    \tlocal modmodp\n\tlocal modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal\
    \ modmodp\n\tlocal modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal modmodp\n\
    \tlocal modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal modmodp\n\tlocal\
    \ modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal modmodp\n\tlocal modmodq\n\
    \tlocal modmodn\n\tlocal modmodmod\n\tlocal modmodp\n\tlocal modmodq\n\tlocal\
    \ modmodn\n\tlocal modmodmod\n\tlocal modmodp\n\tlocal modmodq\n\tlocal modmodn\n\
    \tlocal modmodmod\n\tlocal modmodp\n\tlocal modmodq\n\tlocal modmodn\n\tlocal\
    \ modmodmod\n\tlocal modmodp\n\tlocal modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\
    \tlocal modmodp\n\tlocal modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal\
    \ modmodp\n\tlocal modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal modmodp\n\
    \tlocal modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal modmodp\n\tlocal\
    \ modmodq\n\tlocal modmodn\n\tlocal modmodmod\n\tlocal modmodp\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $p % $q ))\n\tlocal r=$((\
    \ $q - $n ))\n\tlocal s=$(( $p - $n ))\n\tlocal t=$(( $q + 1 ))\n\tlocal u=$((\
    \ $q + 1 ))\n\tlocal v=$(( $q + 1 ))\n\tlocal w=$(( $q + 1 ))\n\tlocal x=$(( $q\
    \ + 1 ))\n\tlocal y=$(( $q + 1 ))\n\tlocal z=$(( $q + 1 ))\n\tlocal A=$(( $q +\
    \ 1 ))\n\tlocal B=$(( $q + 1 ))\n\tlocal C=$(( $q + 1 ))\n\tlocal D=$(( $q + 1\
    \ ))\n\tlocal E=$(( $q + 1 ))\n\tlocal F=$(( $q + 1 ))\n\tlocal G=$(( $q + 1 ))\n\
    \tlocal H=$(( $q + 1 ))\n\tlocal I=$(( $q + 1 ))\n\tlocal J=$(( $q + 1 ))\n\t\
    local K=$(( $q + 1 ))\n\tlocal L=$(( $q + 1 ))\n\tlocal M=$(( $q + 1 ))\n\tlocal\
    \ N=$(( $q + 1 ))\n\tlocal O=$(( $q + 1 ))\n\tlocal P=$(( $q + 1 ))\n\tlocal Q=$((\
    \ $q + 1 ))\n\tlocal R=$(( $q + 1 ))\n\tlocal S=$(( $q + 1 ))\n\tlocal T=$(( $q\
    \ + 1 ))\n\tlocal U=$(( $q + 1 ))\n\tlocal V=$(( $q + 1 ))\n\tlocal W=$(( $q +\
    \ 1 ))\n\tlocal X=$(( $q + 1 ))\n\tlocal Y=$(( $q + 1 ))\n\tlocal Z=$(( $q + 1\
    \ ))\n\tlocal a=$(( $q + 1 ))\n\tlocal b=$(( $q + 1 ))\n\tlocal c=$(( $q + 1 ))\n\
    \tlocal d=$(( $q + 1 ))\n\tlocal e=$(( $q + 1 ))\n\tlocal f=$(( $q + 1 ))\n\t\
    local g=$(( $q + 1 ))\n\tlocal h=$(( $q + 1 ))\n\tlocal i=$(( $q + 1 \n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz1fg0zba.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmpz1fg0zba.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal m=$((p-1))\n\tlocal r=$(\n\t\techo $((\n\t\
    \t\t$((\n\t\t\t\t$((\n\t\t\t\t\t$((\n\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t$((\n\t\t\t\
    \t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\
    \t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    $((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    $((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    $((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    $((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t$((\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$((\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu4f_jpsv.sh: line 21: unexpected EOF while looking for matching
    `)''

    /tmp/tmpu4f_jpsv.sh: line 105: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$(( (p * q) % p\
    \ ))\n    i=$(( (p - mod) / q ))\n    j=$(( (mod - p * q) / q ))\n    echo \"\
    $i$j\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal mod=$(( n % p ))\n\techo $mod\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( $q % $p ))\n\t(( $n !=\
    \ 0 )) && return $n\n\t(( $q == 0 )) && return 1\n\t(( $q > $p )) && return $q\n\
    \t(( $q == $p )) && return 0\n\t(( $p > $q )) && return $p\n\t(( $q == $p )) &&\
    \ return 0\n\t(( $q == 0 )) && return 1\n\t(( $q > $p )) && return $q\n\t(( $q\
    \ == $p )) && return 0\n\t(( $p > $q )) && return $p\n\t(( $q == $p )) && return\
    \ 0\n\t(( $q == 0 )) && return 1\n\t(( $q > $p )) && return $q\n\t(( $q == $p\
    \ )) && return 0\n\t(( $p > $q )) && return $p\n\t(( $q == $p )) && return 0\n\
    \t(( $q == 0 )) && return 1\n\t(( $q > $p )) && return $q\n\t(( $q == $p )) &&\
    \ return 0\n\t(( $p > $q )) && return $p\n\t(( $q == $p )) && return 0\n\t(( $q\
    \ == 0 )) && return 1\n\t(( $q > $p )) && return $q\n\t(( $q == $p )) && return\
    \ 0\n\t(( $p > $q )) && return $p\n\t(( $q == $p )) && return 0\n\t(( $q == 0\
    \ )) && return 1\n\t(( $q > $p )) && return $q\n\t(( $q == $p )) && return 0\n\
    \t(( $p > $q )) && return $p\n\t(( $q == $p )) && return 0\n\t(( $q == 0 )) &&\
    \ return 1\n\t(( $q > $p )) && return $q\n\t(( $q == $p )) && return 0\n\t(( $p\
    \ > $q )) && return $p\n\t(( $q == $p )) && return 0\n\t(( $q == 0 )) && return\
    \ 1\n\t(( $q > $p )) && return $q\n\t(( $q == $p )) && return 0\n\t(( $p > $q\
    \ )) \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal pmodq\n\tlocal qmodp\n\tlocal qmodq\n\
    \tlocal qmodqmodp\n\tlocal qmodqmodq\n\tlocal qmodqmodqmodp\n\tlocal qmodqmodqmodq\n\
    \tlocal qmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodq\n\tlocal qmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodq\n\tlocal qmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodq\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodq\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodq\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodq\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal qmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal qmodqmod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal d=$(( p - n ))\n\tlocal r=$(( n % p ))\n\t\
    echo $(( r + d ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$((p%q))\n    local\
    \ rem=$((q%p))\n    i=$((p%q))\n    j=$((q%p))\n    local res\n    if [ $mod -eq\
    \ 0 ]; then\n        res=$p\n    else\n        res=$mod\n    fi\n    if [ $rem\
    \ -eq 0 ]; then\n        res=$res$j\n    else\n        res=$res$j$i\n    fi\n\
    \    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  local p=$1\n  local q=$2\n  local n=$(( ( ( $p > $q ) ? ( $q -\
    \ $p ) : ( $p - $q ) ) + 1 ))\n  local m=$(( $n % $q ))\n  (( $n -= $m ))\n  ((\
    \ $n %= $q ))\n  (( $n += $q ))\n  (( $n %= $p ))\n  (( $n -= $p ))\n  (( $n %=\
    \ $q ))\n  (( $n += $q ))\n  (( $n %= $p ))\n  (( $n -= $p ))\n  (( $n %= $q ))\n\
    \  (( $n += $q ))\n  (( $n %= $p ))\n  (( $n -= $p ))\n  (( $n %= $q ))\n  ((\
    \ $n += $q ))\n  (( $n %= $p ))\n  (( $n -= $p ))\n  (( $n %= $q ))\n  (( $n +=\
    \ $q ))\n  (( $n %= $p ))\n  (( $n -= $p ))\n  (( $n %= $q ))\n  (( $n += $q ))\n\
    \  (( $n %= $p ))\n  (( $n -= $p ))\n  (( $n %= $q ))\n  (( $n += $q ))\n  ((\
    \ $n %= $p ))\n  (( $n -= $p ))\n  (( $n %= $q ))\n  (( $n += $q ))\n  (( $n %=\
    \ $p ))\n  (( $n -= $p ))\n  (( $n %= $q ))\n  (( $n += $q ))\n  (( $n %= $p ))\n\
    \  (( $n -= $p ))\n  (( $n %= $q ))\n  (( $n += $q ))\n  (( $n %= $p ))\n  ((\
    \ $n -= $p ))\n  (( $n %= $q ))\n  (( $n += $q ))\n  (( $n %= $p ))\n  (( $n -=\
    \ $p ))\n  (( $n %= $q ))\n  (( $n += $q ))\n  (( $n %= $p ))\n  (( $n -= $p ))\n\
    \  (( $n %= $q ))\n  (( $n \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps5eldod8.sh: line 72: unexpected EOF while looking for matching
    `)''

    /tmp/tmps5eldod8.sh: line 91: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local p=$3\n    local mod=$((p-1))\n \
    \   local modp=$((mod*i))\n    modp=$((modp+j))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$((modp%p))\n    modp=$((modp+p))\n    modp=$((modp%p))\n    modp=$((modp+p))\n\
    \    modp=$\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe_12dg8n.sh: line 24: modp%p: division by 0 (error token is "p")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  local p=$1\n  local q=$2\n  local n=$(( $p % $q ))\n  (( $n %\
    \ $q ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal n=$1\n\tlocal p=$2\n\tlocal m=$((p-1))\n\tlocal r=$((p-1))\n\
    \tlocal s=0\n\tlocal t=$((p-1))\n\tlocal u=$((p-1))\n\tlocal v=$((p-1))\n\tlocal\
    \ w=$((p-1))\n\tlocal x=$((p-1))\n\tlocal y=$((p-1))\n\tlocal z=$((p-1))\n\tlocal\
    \ A=$((p-1))\n\tlocal B=$((p-1))\n\tlocal C=$((p-1))\n\tlocal D=$((p-1))\n\tlocal\
    \ E=$((p-1))\n\tlocal F=$((p-1))\n\tlocal G=$((p-1))\n\tlocal H=$((p-1))\n\tlocal\
    \ I=$((p-1))\n\tlocal J=$((p-1))\n\tlocal K=$((p-1))\n\tlocal L=$((p-1))\n\tlocal\
    \ M=$((p-1))\n\tlocal N=$((p-1))\n\tlocal O=$((p-1))\n\tlocal P=$((p-1))\n\tlocal\
    \ Q=$((p-1))\n\tlocal R=$((p-1))\n\tlocal S=$((p-1))\n\tlocal T=$((p-1))\n\tlocal\
    \ U=$((p-1))\n\tlocal V=$((p-1))\n\tlocal W=$((p-1))\n\tlocal X=$((p-1))\n\tlocal\
    \ Y=$((p-1))\n\tlocal Z=$((p-1))\n\tlocal AA=$((p-1))\n\tlocal AB=$((p-1))\n\t\
    local AC=$((p-1))\n\tlocal AD=$((p-1))\n\tlocal AE=$((p-1))\n\tlocal AF=$((p-1))\n\
    \tlocal AG=$((p-1))\n\tlocal AH=$((p-1))\n\tlocal AI=$((p-1))\n\tlocal AJ=$((p-1))\n\
    \tlocal AK=$((p-1))\n\tlocal AL=$((p-1))\n\tlocal AM=$((p-1))\n\tlocal AN=$((p-1))\n\
    \tlocal AO=$((p-1))\n\tlocal AP=$((p-1))\n\tlocal AQ=$((p-1))\n\tlocal AR=$((p-1))\n\
    \tlocal AS=$((p-1))\n\tlocal AT=$((p-1))\n\tlocal AU=$((p-1))\n\tlocal AV=$((p-1))\n\
    \tlocal AW=$((p-1))\n\tlocal AX=$((p-1))\n\tlocal AY=$((p-1))\n\tlocal AZ=$((p-1))\n\
    \t\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  i=$1\n  j=$2\n  (( i % j == 0 )) && return $i\n  (( i % j != 0\
    \ )) && return $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local mod=$(( n % p ))\n    echo $mod\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$((p%q))\n    local\
    \ rem=$((q%p))\n    if [ $mod -eq 0 ]; then\n        i=$((p+q))\n    else\n  \
    \      i=$((p+q+1))\n    fi\n    i=$((i%q))\n    i=$((i%p))\n    echo \"$i\"\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$((p%q))\n    local\
    \ rem=$((q%p))\n    local remmod=$((q%mod))\n    local remrem=$((q%remmod))\n\
    \    local remremmod=$((q%remrem))\n    local remremremmod=$((q%remremmod))\n\
    \    local remremremmod=$((q%remremremmod))\n    local remremremremmod=$((q%remremremmod))\n\
    \    local remremremremmod=$((q%remremremremmod))\n    local remremremremremmod=$((q%remremremremremmod))\n\
    \    local remremremremremremmod=$((q%remremremremremremmod))\n    local remremremremremremremmod=$((q%remremremremremremmod))\n\
    \    local remremremremremremremmod=$((q%remremremremremmod))\n    local remremremremremremremremmod=$((q%remremremremremremremmod))\n\
    \    local remremremremremremremremremremmod=$((q%remremremremremremremremmod))\n\
    \    local remremremremremremremremremremremmod=$((q%remremremremremremremremmod))\n\
    \    local remremremremremremremremremremmod=$((q%remremremremremremremremmod))\n\
    \    local remremremremremremremremremremremmod=$((q%remremremremremremremremremremmod))\n\
    \    local remremremremremremremremremremremremremmod=$((q%remremremremremremremremremremremremmod))\n\
    \    local remremremremremremremremremremremremremmod=$((q%remremremremremremremremremremremremmod))\n\
    \    local remremremremremremremremremremremremremmod=$((q%remremremremremremremremremremremremmod))\n\
    \    local remremremremremremremremremremremremremremmod=$((q%remremremremremremremremremremremremremremremmod))\n\
    \    local \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp65l5ny7l.sh: line 25: q%remremmod: division by 0 (error token is
    "remremmod")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod\n    mod=$(( i % j))\n    if\
    \ [ $mod -eq 0 ]; then\n        mod=$(( j - 1))\n    fi\n    echo $mod\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal m=$((p-1))\n\tlocal s=$((n%m))\n\tlocal e=$((p-1))\n\
    \tlocal r=$((n%p))\n\techo \"$(( (((n%p)*$((p-1))+$((p-1))) % $((p-1)) ))\"\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmplap8duyf.sh: line 38: unexpected EOF while looking for matching
    `"''

    /tmp/tmplap8duyf.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal mod=$((p%q))\n\tlocal rem=$((p%q))\n\
    \tlocal modp=$((mod*q))\n\tlocal remp=$((rem*q))\n\tlocal remq=$((rem*q))\n\t\
    local modq=$((mod*q))\n\tlocal modqp=$((modq*q))\n\tlocal modqq=$((modq*q))\n\t\
    local modqqp=$((modqq*q))\n\tlocal modqqpp=$((modqq*q))\n\tlocal modqqppp=$((modqq*q))\n\
    \tlocal modqqpppp=$((modqq*q))\n\tlocal modqqppppp=$((modqq*q))\n\tlocal modqqpppppp=$((modqq*q))\n\
    \tlocal modqqppppppp=$((modqq*q))\n\tlocal modqqpppppppp=$((modqq*q))\n\tlocal\
    \ modqqppppppppp=$((modqq*q))\n\tlocal modqqpppppppppp=$((modqq*q))\n\tlocal modqqppppppppppp=$((modqq*q))\n\
    \tlocal modqqpppppppppppp=$((modqq*q))\n\tlocal modqqppppppppppppp=$((modqq*q))\n\
    \tlocal modqqpppppppppppppp=$((modqq*q))\n\tlocal modqqppppppppppppppp=$((modqq*q))\n\
    \tlocal modqqpppppppppppppppp=$((modqq*q))\n\tlocal modqqppppppppppppppppp=$((modqq*q))\n\
    \tlocal modqqpppppppppppppppp=$((modqq*q))\n\tlocal modqqppppppppppppppppp=$((modqq*q))\n\
    \tlocal modqqpppppppppppppppppp=$((modqq*q))\n\tlocal modqqppppppppppppppppppp=$((modq\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmppz6jmpnr.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmppz6jmpnr.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local m=$(( p + 1 ))\n    local r=$(( n %\
    \ m ))\n    if [ $r -eq 0 ]; then\n        echo \"$m\"\n    else\n        echo\
    \ \"$m\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    if [ $i -eq 0 ]; then return 1; fi\n \
    \   if [ $j -eq 0 ]; then return $i; fi\n    while [ $i -gt 0 ]; do\n        i=$((\
    \ $i % $j ))\n        j=$(( $j / 10 ))\n    done\n    return $j\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiui7oe9w.sh: line 23: 3 % 0 : division by 0 (error token is "0
    ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( ${#p} + ${#q}\
    \ - 1 ))\n    local d=$(( ${#p} - ${#q} - 1 ))\n    local s=0\n    local t=$((\
    \ ${#p} - 1 ))\n    local u=$(( ${#q} - 1 ))\n    local v=$(( ${#p} + ${#q} -\
    \ 1 ))\n    local w=$(( ${#p} + ${#q} ))\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal d=$(( p - n ))\n\tlocal m=$(( p + d ))\n\t\
    echo $(( n % p )) $(( m % p ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local res\n    local mod\n\
    \    local modp\n    local modq\n    local modqmodp\n    local modqmodq\n    local\
    \ modqmodqmodp\n    local modqmodqmodq\n    local modqmodqmodqmodp\n    local\
    \ modqmodqmodqmodq\n    local modqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodq\n\
    \    local modqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n    local\
    \ modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \    local modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmod\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal res\n\tlocal mod\n\tlocal modp\n\
    \tlocal modq\n\tlocal modqmodp\n\tlocal modqmodq\n\tlocal modqmodqmodp\n\tlocal\
    \ modqmodqmodq\n\tlocal modqmodqmodqmodp\n\tlocal modqmodqmodqmodq\n\tlocal modqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodq\n\
    \tlocal modqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodq\n\
    \tlocal modqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodp\n\t\
    local modqmodqmodqmodqmodqmodqmodq\n\tlocal modqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodq\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodq\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodq\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $1 % $2 ))\n \
    \   local d=$(( $2 % $1 ))\n    local r=$(( $n % $2 ))\n    local s=$(( $r + $d\
    \ ))\n    local t=$(( $q + $s ))\n    local u=$(( $t - $q ))\n    local v=$((\
    \ $r - $d ))\n    local w=$(( $q - $s ))\n    local x=$(( $u + $v ))\n    local\
    \ y=$(( $t + $w ))\n    echo $(( $x + $y ))\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1; j=$2\n    local p=$3\n    local m=$(( (j % p) + p ))\n\
    \    local r=$(echo $(( (i % p) + p )) | bc)\n    echo $(( m + r ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsvyuzfdw.sh: line 20: (j % p) + p : division by 0 (error token
    is "p) + p ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p % $q ))\n \
    \   i=$(( $q - $n ))\n    j=$(( $p - $n ))\n    echo $(( $j + $i ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( (q * p) % p ))\n\tlocal\
    \ d=$(( q % p ))\n\tlocal s=$(( p / d ))\n\tlocal u=$(( p % d ))\n\tlocal t=$((\
    \ q / p ))\n\tlocal u=$(( q % p ))\n\tlocal r=$(( q * p ))\n\tlocal r=$(( r /\
    \ p ))\n\tlocal r=$(( r * p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\
    \tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal\
    \ r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$((\
    \ r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r /\
    \ p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\
    \tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal\
    \ r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$((\
    \ r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r /\
    \ p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\
    \tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal\
    \ r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$(( r / p ))\n\tlocal r=$((\
    \ r / p ))\n\tlocal r=$(( r / p \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi7_kjhpm.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmpi7_kjhpm.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal res\n\tlocal mod\n\tlocal modp\n\
    \tlocal modq\n\tlocal modqmodp\n\tlocal modqmodq\n\tlocal modqmodqmodp\n\tlocal\
    \ modqmodqmodq\n\tlocal modqmodqmodqmodp\n\tlocal modqmodqmodqmodq\n\tlocal modqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal\
    \ modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\tlocal modqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodqmodp\n\
    \tlocal modqmodqmodqmodqmodqmodq\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $q % $p ))\n \
    \   local r=$(( $q / $p ))\n    local d=$(( $p - $q ))\n    local t=$(( $d / $p\
    \ ))\n    local u=$(( $d % $p ))\n    local m=$(( $u + $t ))\n    local s=$((\
    \ $u - $t ))\n    local a=$(( $d + $t ))\n    local b=$(( $d + $t ))\n    local\
    \ c=$(( $d + $t ))\n    local d=$(( $d + $t ))\n    local e=$(( $d + $t ))\n \
    \   local f=$(( $d + $t ))\n    local g=$(( $d + $t ))\n    local h=$(( $d + $t\
    \ ))\n    local i=$(( $d + $t ))\n    local j=$(( $d + $t ))\n    local k=$((\
    \ $d + $t ))\n    local l=$(( $d + $t ))\n    local m=$(( $d + $t ))\n    local\
    \ n=$(( $d + $t ))\n    local o=$(( $d + $t ))\n    local p=$(( $d + $t ))\n \
    \   local q=$(( $d + $t ))\n    local r=$(( $d + $t ))\n    local s=$(( $d + $t\
    \ ))\n    local t=$(( $d + $t ))\n    local u=$(( $d + $t ))\n    local v=$((\
    \ $d + $t ))\n    local w=$(( $d + $t ))\n    local x=$(( $d + $t ))\n    local\
    \ y=$(( $d + $t ))\n    local z=$(( $d + $t ))\n    local A=$(( $d + $t ))\n \
    \   local B=$(( $d + $t ))\n    local C=$(( $d + $t ))\n    local D=$(( $d + $t\
    \ ))\n    local E=$(( $d + $t ))\n    local F=$(( $d + $t ))\n    local G=$((\
    \ $d + $t ))\n    local H=$(( $d + $t ))\n    local I=$(( $d + $t ))\n    local\
    \ J=$(( $d + $t ))\n    local K=$(( $d + $t ))\n    local L=$((\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp01iooein.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmp01iooein.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res\n    if [[ $n -eq 0 ]]; then\n\
    \        echo 0\n    elif [[ $n -eq 1 ]]; then\n        echo $p\n    elif [[ $n\
    \ -ge 2 ]]; then\n        local m=$((p-1))\n        local q=$((p-2))\n       \
    \ local r=$((p-1))\n        local s=$((p-1))\n        local t=$((p-1))\n     \
    \   local u=$((p-1))\n        local v=$((p-1))\n        local w=$((p-1))\n   \
    \     local x=$((p-1))\n        local y=$((p-1))\n        local z=$((p-1))\n \
    \       local a=$((p-1))\n        local b=$((p-1))\n        local c=$((p-1))\n\
    \        local d=$((p-1))\n        local e=$((p-1))\n        local f=$((p-1))\n\
    \        local g=$((p-1))\n        local h=$((p-1))\n        local i=$((p-1))\n\
    \        local j=$((p-1))\n        local k=$((p-1))\n        local l=$((p-1))\n\
    \        local m=$((p-1))\n        local n=$((p-1))\n        local o=$((p-1))\n\
    \        local p=$((p-1))\n        local q=$((p-1))\n        local r=$((p-1))\n\
    \        local s=$((p-1))\n        local t=$((p-1))\n        local u=$((p-1))\n\
    \        local v=$((p-1))\n        local w=$((p-1))\n        local x=$((p-1))\n\
    \        local y=$((p-1))\n        local z=$((p-1))\n        local a=$((p-1))\n\
    \        local b=$((p-1))\n        local c=$((p-1))\n        local d=$((p-1))\n\
    \        local e=$((p-1))\n        local f=$((p-1))\n        local g=$((p-1))\n\
    \        local h=$((p-1))\n        local i=$((p-1))\n        local j=$((p-1))\n\
    \        local k=$((p-1))\n        local l=$((p-1))\n        local m=$((p-1))\n\
    \        local n=$((p-1))\n        local o=$((p-1))\n        local p=$((p-1))\n\
    \        local q=$((p-1))\n        local r=$((p-1))\n        local s=$((p-1))\n\
    \        local t=$((p-1))\n        local \n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdwe4was_.sh: line 83: syntax error near unexpected token `}''

    /tmp/tmpdwe4was_.sh: line 83: `}''

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p % $q ))\n \
    \   i=$(( $q - $n ))\n    j=$(( $p - $n ))\n    echo $(( $j * $i ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod=$(( i % $j ))\n    if [ $mod\
    \ -eq 0 ]; then\n        mod=$(( $j - 1 ))\n    fi\n    echo $mod\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local mod=$(( p - 1 ))\n    local ret=$((\
    \ n % mod ))\n    if [ $ret -eq 0 ]; then\n        echo \"0\"\n    else\n    \
    \    echo $ret\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal pmodpmod\n\tlocal pmodpmodp\n\tlocal\
    \ pmodpmodpmod\n\tlocal pmodpmodpmodp\n\tlocal pmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmodpmod\n\tlocal\
    \ pmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ pmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmod\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \tlocal pmodpmodpmodpmodpmodpmodpmodpmodpmodp\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( ($p + $q - 1)\
    \ % $q ))\n    local s=$(( $p - $n % $q ))\n    local t=$(( $q - $s ))\n    local\
    \ u=$(( $q - $t ))\n    local v=$(( $q - $u ))\n    local w=$(( $q - $v ))\n \
    \   local x=$(( $q - $w ))\n    local y=$(( $q - $x ))\n    local z=$(( $q - $y\
    \ ))\n    echo $(( $n * $q + $s * $t + $t * $u + $u * $v + $v * $w + $w * $x +\
    \ $x * $y + $y * $z + $z * $p ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p % $q ))\n \
    \   i=$(( $q - $n ))\n    j=$(( $p - $n ))\n    echo $(( $j + $i ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1; shift\n    j=$1; shift\n    while (( i < j )); do\n\
    \        (( i++ ))\n    done\n    echo $(( i % $2 ))\n}\n\ncandidate() {\n   \
    \ modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg3k1b2gl.sh: line 23: i %  : syntax error: operand expected (error
    token is "%  ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local mod=$(( (p * q) % p\
    \ ))\n    local res\n    local modp\n    local modq\n    local modpmodq\n    local\
    \ modpmodqmod\n    local modpmodqmodmod\n    local modpmodqmodmodmod\n    local\
    \ modpmodqmodmodmodmod\n    local modpmodqmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmodmodmod\n    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmodmodmodmod\n\
    \    local modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmodmodmodmodmod\n    local\
    \ modpmodqmodmodmodmodmodmodmodmodmodmodmodmodmodmodmodmodmodmodmod\n    local\
    \ mod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res\n    local i\n    local j\n   \
    \ local k\n    local m\n    local nmodp\n    local pmodp\n    local pmodpmod\n\
    \    local pmodpmodp\n    local pmodpmodpmod\n    local pmodpmodpmodp\n    local\
    \ pmodpmodpmodpmod\n    local pmodpmodpmodpmodp\n    local pmodpmodpmodpmodpmod\n\
    \    local pmodpmodpmodpmodpmodp\n    local pmodpmodpmodpmodpmodpmod\n    local\
    \ pmodpmodpmodpmodpmodpmodp\n    local pmodpmodpmodpmodpmodpmodpmod\n    local\
    \ pmodpmodpmodpmodpmodpmodpmod\n    local pmodpmodpmodpmodpmodpmodpmodp\n    local\
    \ pmodpmodpmodpmodpmodpmodpmodpmod\n    local pmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local pmodpmodpmodpmodpmodpmodpmodpmodpmod\n    local pmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local pmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local pmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \    local pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \    local pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n    local pmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmod\n\
    \    local pmodpmodpmodpmodpmodpmodpmodp\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i n p x\n    i=$1\n    n=$2\n    p=$3\n    x=$(( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcpcpqnds.sh: line 21: unexpected EOF while looking for matching
    `)''

    /tmp/tmpcpcpqnds.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p % $q ))\n \
    \   local d=$(( $q - $n ))\n    local s=$(( $p / $q ))\n    local r=$(( $n % $q\
    \ ))\n    local t=$(( $q - $r ))\n    local u=$(( $q - $t ))\n    local v=$((\
    \ $q - $u ))\n    local w=$(( $q - $v ))\n    local x=$(( $q - $w ))\n    local\
    \ y=$(( $q - $x ))\n    local z=$(( $q - $y ))\n    local A=$(( $q - $z ))\n \
    \   local B=$(( $q - $A ))\n    local C=$(( $q - $B ))\n    local D=$(( $q - $C\
    \ ))\n    local E=$(( $q - $D ))\n    local F=$(( $q - $E ))\n    local G=$((\
    \ $q - $F ))\n    local H=$(( $q - $G ))\n    local I=$(( $q - $H ))\n    local\
    \ J=$(( $q - $I ))\n    local K=$(( $q - $J ))\n    local L=$(( $q - $K ))\n \
    \   local M=$(( $q - $L ))\n    local N=$(( $q - $M ))\n    local O=$(( $q - $N\
    \ ))\n    local P=$(( $q - $O ))\n    local Q=$(( $q - $P ))\n    local R=$((\
    \ $q - $Q ))\n    local S=$(( $q - $R))\n    local T=$(( $q - $S ))\n    local\
    \ U=$(( $q - $T ))\n    local V=$(( $q - $U ))\n    local W=$(( $q - $V ))\n \
    \   local X=$(( $q - $W ))\n    local Y=$(( $q - $X ))\n    local Z=$(( $q - $Y\
    \ ))\n    local AA=$(( $q - $Z ))\n    local AB=$(( $q - $AA ))\n    local AC=$((\
    \ $q - $AB ))\n    local AD=$(( $q - $AC ))\n    local \n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local r\n    local s\n   \
    \ local t\n    local u\n    local v\n    local w\n    local x\n    local y\n \
    \   local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal n=$1\n\tlocal p=$2\n\tlocal mod=$((p-1))\n\tlocal rem=$((n%p))\n\
    \tlocal modp=$((mod*(rem+1)))\n\techo $modp\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( p * q % p ))\n\
    \    if [ $n -eq 0 ]; then\n        n=$(( p + q % p ))\n    fi\n    i=$(( p -\
    \ n ))\n    j=$(( q - n ))\n    if [ $i -eq 0 ]; then\n        i=$(( p + q % p\
    \ ))\n    fi\n    if [ $j -eq 0 ]; then\n        j=$(( p + q % p ))\n    fi\n\
    \    echo \"$i$j\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local mod\n    mod=$(( (j % i) + i ))\n\
    \    if [[ $mod -eq 0 ]]; then\n        mod=$(( mod - 1 ))\n    fi\n    echo $mod\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( ($p + $q - 1)\
    \ % $p ))\n    echo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local res\n    local mod\n\
    \    local modp\n    local modq\n    local modpmodq\n    local modqmodp\n    local\
    \ modpmodqmodq\n    local modqmodpmodq\n    local modpmodqmodp\n    local modqmodpmodp\n\
    \    local modpmodqmodqmodp\n    local modqmodpmodqmodp\n    local modpmodqmodqmodpmodq\n\
    \    local modqmodpmodqmodpmodq\n    local modpmodqmodqmodpmodqmodp\n    local\
    \ modqmodpmodqmodpmodqmodp\n    local modpmodqmodqmodpmodqmodpmodq\n    local\
    \ modqmodpmodqmodpmodqmodpmodqmodp\n    local modpmodqmodqmodpmodqmodpmodqmodpmodq\n\
    \    local modqmodpmodqmodpmodqmodpmodqmodpmodqmodp\n    local modpmodqmodqmodpmodqmodpmodqmodpmodqmodpmodq\n\
    \    local modqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodp\n    local modpmodqmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodq\n\
    \    local modqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodp\n    local\
    \ modpmodqmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodq\n    local modqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodp\n\
    \    local modpmodqmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodq\n\
    \    local modqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodqmodpmodq\n\
    \    local modpmodqmodqmodpmod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local m=$(( p - n ))\n    local r=$(( n %\
    \ p ))\n    if [ $m -eq 0 ]; then\n        echo \"$r\"\n    else\n        echo\
    \ \"$(( r + m ))\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local p=$3\n    local mod=$(( p + 1 ))\n\
    \    local rem=$(( i - j % p ))\n    echo $(( rem % mod ))\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2x47gffo.sh: line 22: i - j % p : division by 0 (error token is
    "p ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=\"$1\"\n\tj=\"$2\"\n\tlocal mod\n\tmod=\"$(( (j % i) + i ))\"\
    \n\techo \"$mod\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal mod=$(( p % q ))\n\ti=$(( p -\
    \ mod ))\n\tj=$(( q - mod ))\n\techo $(( i * j / q ))\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i n p\n    i=$1; n=$2; p=$3\n    if [ $n -eq 0 ]\n    then\n      \
    \  echo \"0\"\n    elif [ $n -eq 1 ]\n    then\n        echo \"1\"\n    elif [\
    \ $n -le 0 ]\n    then\n        echo \"$(( 2**$n % $p ))\"\n    else\n       \
    \ echo \"$(( 2**$n - 1 ))\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local x=$(( n % p ))\n  echo \"$x\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i n p\n\t(( i = $1 ))\n\t(( n = $2 ))\n\t(( p = $3 ))\n\t(( n = $n % p\
    \ ))\n\t(( i = $i + ( n - n % p ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t((\
    \ i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i =\
    \ $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i +\
    \ ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p\
    \ - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - (\
    \ n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n %\
    \ p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p )\
    \ ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\
    \t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i\
    \ = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i\
    \ + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + (\
    \ p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p -\
    \ ( n % p ) ) ))\n\t(( i = $i + ( p - ( n % p ) ) ))\n\t(( i = $i + ( p - ( n\
    \ % p ) ) ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu0qgchnl.sh: line 20: ((: p =  : syntax error: operand expected
    (error token is "=  ")

    /tmp/tmpu0qgchnl.sh: line 21: ((: n = 5 % p : division by 0 (error token is "p
    ")

    /tmp/tmpu0qgchnl.sh: line 22: ((: i = 3 + ( n - n % p ) : division by 0 (error
    token is "p ) ")

    /tmp/tmpu0qgchnl.sh: line 23: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 24: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 25: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 26: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 27: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 28: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 29: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 30: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 31: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 32: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 33: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 34: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 35: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 36: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 37: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 38: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 39: ((: i = 3 + ( p - ( n % p ) ) : division by 0 (error
    token is "p ) ) ")

    /tmp/tmpu0qgchnl.sh: line 40: ((: i = 3 +'
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( ($p + $q - 1)\
    \ % $q ))\n    i=$(( $p - $n % $p ))\n    j=$(( $q - $n % $q ))\n    echo $((\
    \ $i * $j + $n ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local x=$(( (n % p) + p ))\n    echo $x\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i n p\n    i=$1\n    n=$2\n    p=$3\n    if [ $n -eq 0 ]\n    then\n\
    \        echo \"0\"\n    elif [ $n -eq 1 ]\n    then\n        echo \"$i\"\n  \
    \  elif [ $n -ge 2 ]\n    then\n        echo \"$(( ($i % $p) + $p ))\"\n    else\n\
    \        echo \"$(( ($i % $p) + $p ))\"\n    fi\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp08thps__.sh: line 29: (3 % ) +  : syntax error: operand expected
    (error token is ") +  ")

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  local p=$1\n  local q=$2\n  local n=$(( $1 % $2 ))\n  local r=$((\
    \ $1 % $p ))\n  local s=$(( $1 % $q ))\n  local t=$(( $p % $q ))\n  local u=$((\
    \ $p % $p ))\n  local v=$(( $q % $q ))\n  local w=$(( $q % $p ))\n  local x=$((\
    \ $n % $q ))\n  local y=$(( $n % $p ))\n  local z=$(( $n % $q ))\n  local A=$((\
    \ $p % $p ))\n  local B=$(( $q % $q ))\n  local C=$(( $q % $p ))\n  local D=$((\
    \ $p % $p ))\n  local E=$(( $n % $q ))\n  local F=$(( $n % $p ))\n  local G=$((\
    \ $n % $q ))\n  local H=$(( $n % $p ))\n  local I=$(( $n % $p ))\n  local J=$((\
    \ $n % $q ))\n  local K=$(( $n % $p ))\n  local L=$(( $n % $q ))\n  local M=$((\
    \ $n % $p ))\n  local N=$(( $n % $q ))\n  local O=$(( $n % $p ))\n  local P=$((\
    \ $n % $q ))\n  local Q=$(( $n % $p ))\n  local R=$(( $n % $q ))\n  local S=$((\
    \ $n % $p ))\n  local T=$(( $n % $q ))\n  local U=$(( $n % $p ))\n  local V=$((\
    \ $n % $q ))\n  local W=$(( $n % $p ))\n  local X=$(( $n % $q ))\n  local Y=$((\
    \ $n % $p ))\n  local Z=$(( $n % $q ))\n  local a=$(( $p % $p ))\n  local b=$((\
    \ $q % $q ))\n  local c=$(( $q % $p ))\n  local d=$(( $p % $p ))\n  local e=$((\
    \ $n % $q ))\n  local f=$(( $n % $p ))\n  local g=$(( $n % $q ))\n  local h=$((\
    \ $n % $p ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    local n\n    local p\n    local q\n  \
    \  local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local A\n    local B\n    local C\n\
    \    local D\n    local E\n    local F\n    local G\n    local H\n    local I\n\
    \    local J\n    local K\n    local L\n    local M\n    local N\n    local O\n\
    \    local P\n    local Q\n    local R\n    local S\n    local T\n    local U\n\
    \    local V\n    local W\n    local X\n    local Y\n    local Z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local A\n    local B\n    local C\n    local D\n    local E\n\
    \    local F\n    local G\n    local H\n    local I\n    local J\n    local K\n\
    \    local L\n    local M\n    local N\n    local O\n    local P\n    local Q\n\
    \    local R\n    local S\n    local T\n    local U\n    local V\n    local W\n\
    \    local X\n    local Y\n    local Z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local A\n\
    \    local B\n    local C\n    local D\n    local E\n    local F\n    local G\n\
    \    local H\n    local I\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( $p % $q ))\n \
    \   local d=$(( $q - $n ))\n    local s=$(( $p - $n ))\n    local m=$(( $q + 1\
    \ ))\n    local a=$(( $q + 1 ))\n    local b=$(( $q + 1 ))\n    local c=$(( $q\
    \ + 1 ))\n    local d=$(( $q + 1 ))\n    local e=$(( $q + 1 ))\n    local f=$((\
    \ $q + 1 ))\n    local g=$(( $q + 1 ))\n    local h=$(( $q + 1 ))\n    local i=$((\
    \ $q + 1 ))\n    local j=$(( $q + 1 ))\n    local k=$(( $q + 1 ))\n    local l=$((\
    \ $q + 1 ))\n    local m=$(( $q + 1 ))\n    local n=$(( $q + 1 ))\n    local o=$((\
    \ $q + 1 ))\n    local p=$(( $q + 1 ))\n    local q=$(( $q + 1 ))\n    local r=$((\
    \ $q + 1 ))\n    local s=$(( $q + 1 ))\n    local t=$(( $q + 1 ))\n    local u=$((\
    \ $q + 1 ))\n    local v=$(( $q + 1 ))\n    local w=$(( $q + 1 ))\n    local x=$((\
    \ $q + 1 ))\n    local y=$(( $q + 1 ))\n    local z=$(( $q + 1 ))\n    local A=$((\
    \ $q + 1 ))\n    local B=$(( $q + 1 ))\n    local C=$(( $q + 1 ))\n    local D=$((\
    \ $q + 1 ))\n    local E=$(( $q + 1 ))\n    local F=$(( $q + 1 ))\n    local G=$((\
    \ $q + 1 ))\n    local H=$(( $q + 1 ))\n    local I=$(( $q + 1 ))\n    local J=$((\
    \ $q + 1 ))\n    local K=$(( $q + 1 ))\n    local L=$(( $q + 1 ))\n    local M=$((\
    \ $q + 1 ))\n    local N=$(( $q + 1 ))\n    local O=$(( $q + 1 \n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8_jron4f.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmp8_jron4f.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal mod=$(( p * q % p ))\n\tlocal\
    \ res\n\tlocal modp\n\tlocal modq\n\tlocal modpmodq\n\tlocal modpmodqmod\n\tlocal\
    \ modpmodqmodmod\n\tlocal modpmodqmodmodmod\n\tlocal modpmodqmodmodmodmod\n\t\
    local modpmodqmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\
    \tlocal modpmodqmodmodmodmodmod\n\tlocal modpmodqmodmodmodmodmod\n\tlocal modp\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local n=$(( p - q + 1 ))\n\
    \    local d=$(( p - q + 1 ))\n    local r=$(( p - q + 1 ))\n    local s=$(( p\
    \ - q + 1 ))\n    local t=$(( p - q + 1 ))\n    local u=$(( p - q + 1 ))\n   \
    \ local v=$(( p - q + 1 ))\n    local w=$(( p - q + 1 ))\n    local x=$(( p -\
    \ q + 1 ))\n    local y=$(( p - q + 1 ))\n    local z=$(( p - q + 1 ))\n    local\
    \ A=$(( p - q + 1 ))\n    local B=$(( p - q + 1 ))\n    local C=$(( p - q + 1\
    \ ))\n    local D=$(( p - q + 1 ))\n    local E=$(( p - q + 1 ))\n    local F=$((\
    \ p - q + 1 ))\n    local G=$(( p - q + 1 ))\n    local H=$(( p - q + 1 ))\n \
    \   local I=$(( p - q + 1 ))\n    local J=$(( p - q + 1 ))\n    local K=$(( p\
    \ - q + 1 ))\n    local L=$(( p - q + 1 ))\n    local M=$(( p - q + 1 ))\n   \
    \ local N=$(( p - q + 1 ))\n    local O=$(( p - q + 1 ))\n    local P=$(( p -\
    \ q + 1 ))\n    local Q=$(( p - q + 1 ))\n    local R=$(( p - q + 1 ))\n    local\
    \ S=$(( p - q + 1 ))\n    local T=$(( p - q + 1 ))\n    local U=$(( p - q + 1\
    \ ))\n    local V=$(( p - q + 1 ))\n    local W=$(( p - q + 1 ))\n    local X=$((\
    \ p - q + 1 ))\n    local Y=$(( p - q + 1 ))\n    local Z=$(( p - q + 1 ))\n \
    \   local _=$(( p - q + 1 ))\n    local a=$(( p - q + 1 ))\n    local b=$(( p\
    \ - q + 1 ))\n    local c=$(( p - q + 1 ))\n    local d\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  i=$1\n  j=$2\n  (( i % j == 0 )) && return $i\n  (( i % j != 0\
    \ )) && return $j\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal n=$(( ($p + $q - 1) % $q ))\n\
    \t(( $n >= $p )) && return $p\n\t(( $n <= $q )) && return $n\n\t(( $p < $q ))\
    \ && return $q\n\t(( $p > $q )) && return $p\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1\n\tj=$2\n\twhile (( i < j )); do\n\t\t(( i++ ))\n\tdone\n\t\
    echo $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ l\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal\
    \ s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal\
    \ z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal\
    \ g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal\
    \ n\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal nmodpmodp\n\tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal pmodp\n\tlocal modp\n\tlocal modp2\n\tlocal modp3\n\
    \tlocal modp4\n\tlocal modp5\n\tlocal modp6\n\tlocal modp7\n\tlocal modp8\n\t\
    local modp9\n\tlocal modp10\n\tlocal modp11\n\tlocal modp12\n\tlocal modp13\n\t\
    local modp14\n\tlocal modp15\n\tlocal modp16\n\tlocal modp17\n\tlocal modp18\n\
    \tlocal modp19\n\tlocal modp20\n\tlocal modp21\n\tlocal modp22\n\tlocal modp23\n\
    \tlocal modp24\n\tlocal modp25\n\tlocal modp26\n\tlocal modp27\n\tlocal modp28\n\
    \tlocal modp29\n\tlocal modp30\n\tlocal modp31\n\tlocal modp32\n\tlocal modp33\n\
    \tlocal modp34\n\tlocal modp35\n\tlocal modp36\n\tlocal modp37\n\tlocal modp38\n\
    \tlocal modp39\n\tlocal modp40\n\tlocal modp41\n\tlocal modp42\n\tlocal modp43\n\
    \tlocal modp44\n\tlocal modp45\n\tlocal modp46\n\tlocal modp47\n\tlocal modp48\n\
    \tlocal modp49\n\tlocal modp50\n\tlocal modp51\n\tlocal modp52\n\tlocal modp53\n\
    \tlocal modp54\n\tlocal modp55\n\tlocal modp56\n\tlocal modp57\n\tlocal modp58\n\
    \tlocal modp59\n\tlocal modp60\n\tlocal modp61\n\tlocal modp62\n\tlocal modp63\n\
    \tlocal modp64\n\tlocal modp65\n\tlocal modp66\n\tlocal modp67\n\tlocal modp68\n\
    \tlocal modp69\n\tlocal modp70\n\tlocal modp71\n\tlocal modp72\n\tlocal modp73\n\
    \tlocal modp74\n\tlocal modp75\n\tlocal modp76\n\tlocal modp77\n\tlocal modp78\n\
    \tlocal \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1\n    j=$2\n    if [ $i -eq 0 ]\n    then\n        echo\
    \ \"0\"\n    elif [ $j -eq 0 ]\n    then\n        echo \"1\"\n    elif [ $i -eq\
    \ $j ]\n    then\n        echo \"0\"\n    elif [ $i -gt $j ]\n    then\n     \
    \   echo \"$(( ($j % $i) + $i ))\"\n    else\n        echo \"$(( ($i % $j) + $j\
    \ ))\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local p=$1\n    local q=$2\n    local r\n    local n\n   \
    \ local m\n    local x\n    local y\n    local z\n    local a\n    local b\n \
    \   local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=$1; j=$2\n    local mod=$(( (j % i) + i ))\n    echo $mod\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res\n    local i\n    local j\n   \
    \ local k\n    local m\n    local nmodp\n    local nmodpmodp\n    local nmodpmodpmodp\n\
    \    local nmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \    local \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\tlocal p=$1\n\tlocal q=$2\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal\
    \ u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal\
    \ b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal\
    \ i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal\
    \ p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal\
    \ w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal\
    \ d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal\
    \ k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal\
    \ r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal\
    \ f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal\
    \ m\n\tlocal n\n\tlocal o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal\
    \ t\n\tlocal u\n\tlocal v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal\
    \ a\n\tlocal b\n\tlocal c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal\
    \ h\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal l\n\tlocal m\n\tlocal n\n\tlocal\
    \ o\n\tlocal p\n\tlocal q\n\tlocal r\n\tlocal s\n\tlocal t\n\tlocal u\n\tlocal\
    \ v\n\tlocal w\n\tlocal x\n\tlocal y\n\tlocal z\n\tlocal a\n\tlocal b\n\tlocal\
    \ c\n\tlocal d\n\tlocal e\n\tlocal f\n\tlocal g\n\tlocal h\n\tlocal i\n\tlocal\
    \ j\n\tlocal k\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local mod=$((p-1))\n    local res=$(echo\
    \ $(( ($n % $mod) + $mod )) | bc)\n    echo $res\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042756
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal res\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ m\n\tlocal nmodp\n\tlocal nmodpmodp\n\tlocal nmodpmodpmodp\n\tlocal nmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal\
    \ nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\
    \tlocal nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local nmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodpmodp\n\t\
    local nmod\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660042755
