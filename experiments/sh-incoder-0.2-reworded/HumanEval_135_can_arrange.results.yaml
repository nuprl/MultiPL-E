language: sh
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arrange=\"$1\"\n    local -a sorted=()\n    local\
    \ -n max\n    local -i maxindex\n    local -i i\n    local -n element\n    local\
    \ -n element2\n    local -n element3\n    local -n element4\n    local -n element5\n\
    \    local -n element6\n    local -n element7\n    local -n element8\n    local\
    \ -n element9\n    local -n element10\n    local -n element11\n    local -n element12\n\
    \    local -n element13\n    local -n element14\n    local -n element15\n    local\
    \ -n element16\n    local -n element17\n    local -n element18\n    local -n element19\n\
    \    local -n element20\n    local -n element21\n    local -n element22\n    local\
    \ -n element23\n    local -n element24\n    local -n element25\n    local -n element26\n\
    \    local -n element27\n    local -n element28\n    local -n element29\n    local\
    \ -n element30\n    local -n element31\n    local -n element32\n    local -n element33\n\
    \    local -n element34\n    local -n element35\n    local -n element36\n    local\
    \ -n element37\n    local -n element38\n    local -n element39\n    local -n element40\n\
    \    local -n element41\n    local -n element42\n    local -n element43\n    local\
    \ -n element44\n    local -n element45\n    local -n element46\n    local -n element47\n\
    \    local -n element48\n    local -n element49\n    local -n element50\n    local\
    \ -n element51\n    local -n element52\n    local -n element53\n    local -n element54\n\
    \    local -n element55\n    local -n element56\n    local -n element57\n    local\
    \ -n element58\n    local -n element59\n    local -n element60\n    local -n element61\n\
    \    local -n element62\n    local -n element63\n    local -n element64\n    local\
    \ -n element65\n    local -n element66\n    local -n element67\n    local -n element68\n\
    \    local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm2d58toa.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n      max=$j\n    fi\n  done\n  echo \"$max\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprfy42hti.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  local element\n  while (( index < max )); do\n    element=\"${array[index]}\"\
    \n    if [[ \"$element\" -gt \"$array[$(( index + 1 ))]\" ]]; then\n      max=$index\n\
    \    fi\n    (( index++ ))\n  done\n  if (( index == max )); then\n    echo \"\
    -1\"\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpenj0jtt3.sh: line 20: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    /tmp/tmpenj0jtt3.sh: line 20: [[: 1 2 4 3 5[2]: syntax error in expression (error
    token is "2 4 3 5[2]")

    /tmp/tmpenj0jtt3.sh: line 20: [[: 1 2 4 3 5[3]: syntax error in expression (error
    token is "2 4 3 5[3]")

    /tmp/tmpenj0jtt3.sh: line 20: [[: 1 2 4 3 5[4]: syntax error in expression (error
    token is "2 4 3 5[4]")

    /tmp/tmpenj0jtt3.sh: line 20: [[: 1 2 4 3 5[5]: syntax error in expression (error
    token is "2 4 3 5[5]")

    /tmp/tmpenj0jtt3.sh: line 20: [[: 1 2 4 3 5[6]: syntax error in expression (error
    token is "2 4 3 5[6]")

    /tmp/tmpenj0jtt3.sh: line 20: [[: 1 2 4 3 5[7]: syntax error in expression (error
    token is "2 4 3 5[7]")

    /tmp/tmpenj0jtt3.sh: line 20: [[: 1 2 4 3 5[8]: syntax error in expression (error
    token is "2 4 3 5[8]")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n last=$3\n  local\
    \ -n result=$4\n  local -n i\n  local -n j\n  local -n len\n\n  local -n maxidx=$5\n\
    \  local -n maxval=$6\n\n  local -n maxidxidx=$7\n  local -n maxvalidx=$8\n\n\
    \  local -n maxidxidxidx=$9\n  local -n maxvalidxidx=$10\n\n  local -n maxidxidxidxidx=$11\n\
    \  local -n maxvalidxidxidx=$12\n\n  local -n maxidxidxidxidxidx=$13\n  local\
    \ -n maxvalidxidxidxidx=$14\n\n  local -n maxidxidxidxidxidxidx=$15\n  local -n\
    \ maxvalidxidxidxidxidx=$16\n\n  local -n maxidxidxidxidxidxidxidx=$17\n  local\
    \ -n maxvalidxidxidxidxidxidx=$18\n\n  local -n maxidxidxidxidxidxidxidxidx=$19\n\
    \  local -n maxvalidxidxidxidxidxidxidx=$20\n\n  local -n maxidxidxidxidxidxidxidxidxidx=$21\n\
    \  local -n maxvalidxidxidxidxidxidxidxidx=$22\n\n  local -n maxidxidxidxidxidxidxidxidxidxidx=$23\n\
    \  local -n maxvalidxidxidxidxidxidxidxidxidx=$24\n\n  local -n maxidxidxidxidxidxidxidxidxidxidxidx=$25\n\
    \  local -n maxvalidxidxidxidxidxidxidxidxidxidx=$26\n\n  local -n maxidxidxidxidxidxidxidxidxidxidxidx=$27\n\
    \  local -n maxvalidxidxidxidxidxidxidxidxidxidxidx=$28\n\n  local -n maxidxidxidxidxidxidxidxidxidxidxidxidx=$29\n\
    \  local -n maxvalidxidxidxidxidxidxidxidxidxidxidxidx=$30\n\n  local -n maxidxidxidxidxidxidxidxidxidxidxidxidxidxidx=$31\n\
    \  local -n maxvalidxidxidxidxidxidxidxidxidxidxidxidxidx=$32\n\n  local -n maxidxidxidxidxidxidxidxidxidxidxidxidxidxidx=$33\n\
    \  local -n maxvalidxidx\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkh1byy39.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpkh1byy39.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpkh1byy39.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpkh1byy39.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpkh1byy39.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpkh1byy39.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpkh1byy39.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpkh1byy39.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpkh1byy39.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpkh1byy39.sh: line 29: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 31: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 32: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 34: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 35: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 37: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 38: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 40: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 41: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 43: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpkh1byy39.sh: line 44: local: `0'': invalid variable name for name reference

    /tmp/tmpkh1byy39.sh: line 46: local: `1'': invalid variable name for name reference

    /tmp/tmpkh1byy39.sh: line 47: local: `2'': invalid variable name for name reference

    /tmp/tmpkh1byy39.sh: line 49: local: `3'': invalid variable name for name reference

    /tmp/tmpkh1byy39.sh: line 50: local: `4'': invalid variable name for name reference

    /tmp/tmpkh1byy39.sh: line 52: local: `5'': invalid variable name for name reference

    /tmp/tmpkh1byy39.sh: line 5'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n maxi\n  local -n maxj\n  local -n maxi1\n  local\
    \ -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n\
    \  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local\
    \ -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n\
    \  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local\
    \ -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n\
    \  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local\
    \ -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n\
    \  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local\
    \ -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n\
    \  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local\
    \ -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n\
    \  local -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n maxi1\n  local\
    \ -n maxj1\n  local -n maxi1\n  local -n maxj1\n  local -n max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9jcqnidx.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp9jcqnidx.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=$((\
    \ ${#array[@]} - 1 ))\n    local maxIndex=0\n    local element\n\n    while ((\
    \ index < max )); do\n        element=${array[index]}\n        if (( element <=\
    \ ${array[index-1]} )); then\n            (( index++ ))\n        else\n      \
    \      (( maxIndex++ ))\n        fi\n    done\n\n    if (( maxIndex == 0 )); then\n\
    \        echo \"-1\"\n    else\n        echo \"$maxIndex\"\n    fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  local val\n  local -n result=$2\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -n val\n  local -n val\n  local -n val\n  local -n val\n  local\
    \ -n val\n  local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvwiz67l1.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpvwiz67l1.sh: line 18: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ len=${#arr[@]}\n  local maxlen=${#max}\n  local maxidx\n  local maxval\n  local\
    \ maxidx2\n  local maxval2\n  local maxidx3\n  local maxval3\n  local maxidx4\n\
    \  local maxval4\n  local maxidx5\n  local maxval5\n  local maxidx6\n  local maxval6\n\
    \  local maxidx7\n  local maxval7\n  local maxidx8\n  local maxval8\n  local maxidx9\n\
    \  local maxval9\n  local maxidx10\n  local maxval10\n  local maxidx11\n  local\
    \ maxval11\n  local maxidx12\n  local maxval12\n  local maxidx13\n  local maxval13\n\
    \  local maxidx14\n  local maxval14\n  local maxidx15\n  local maxval15\n  local\
    \ maxidx16\n  local maxval16\n  local maxidx17\n  local maxval17\n  local maxidx18\n\
    \  local maxval18\n  local maxidx19\n  local maxval19\n  local maxidx20\n  local\
    \ maxval20\n  local maxidx21\n  local maxval21\n  local maxidx22\n  local maxval22\n\
    \  local maxidx23\n  local maxval23\n  local maxidx24\n  local maxval24\n  local\
    \ maxidx25\n  local maxval25\n  local maxidx26\n  local maxval26\n  local maxidx27\n\
    \  local maxval27\n  local maxidx28\n  local maxval28\n  local maxidx29\n  local\
    \ maxval29\n  local maxidx30\n  local maxval30\n  local maxidx31\n  local maxval31\n\
    \  local maxidx32\n  local maxval32\n  local maxidx33\n  local maxval33\n  local\
    \ maxidx34\n  local maxval34\n  local maxidx35\n  local maxval35\n  local maxidx36\n\
    \  local maxval36\n  local maxidx37\n  local maxval37\n  local maxidx38\n  local\
    \ maxval38\n  local maxidx39\n  local maxval39\n  local maxidx40\n  local \n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n\
    \    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        j=$((i+1))\n\
    \        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n            max=${arr[i]}\n \
    \       elif [[ ${arr[i]} -lt ${arr[j]} ]]; then\n            max=${arr[j]}\n\
    \        fi\n    done\n    echo \"${max}\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp62mefmyw.sh: line 21: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    /tmp/tmp62mefmyw.sh: line 23: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arrange=$1\n    local -a arranged\n    local -a\
    \ arranged_sorted\n    local -a arranged_sorted2\n    local -a arranged_sorted3\n\
    \    local -a arranged_sorted4\n    local -a arranged_sorted5\n    local -a arranged_sorted6\n\
    \    local -a arranged_sorted7\n    local -a arranged_sorted8\n    local -a arranged_sorted9\n\
    \    local -a arranged_sorted10\n    local -a arranged_sorted11\n    local -a\
    \ arranged_sorted12\n    local -a arranged_sorted13\n    local -a arranged_sorted14\n\
    \    local -a arranged_sorted15\n    local -a arranged_sorted16\n    local -a\
    \ arranged_sorted17\n    local -a arranged_sorted18\n    local -a arranged_sorted19\n\
    \    local -a arranged_sorted20\n    local -a arranged_sorted21\n    local -a\
    \ arranged_sorted22\n    local -a arranged_sorted23\n    local -a arranged_sorted24\n\
    \    local -a arranged_sorted25\n    local -a arranged_sorted26\n    local -a\
    \ arranged_sorted27\n    local -a arranged_sorted28\n    local -a arranged_sorted29\n\
    \    local -a arranged_sorted30\n    local -a arranged_sorted31\n    local -a\
    \ arranged_sorted32\n    local -a arranged_sorted33\n    local -a arranged_sorted34\n\
    \    local -a arranged_sorted35\n    local -a arranged_sorted36\n    local -a\
    \ arranged_sorted37\n    local -a arranged_sorted38\n    local -a arranged_sorted39\n\
    \    local -a arranged_sorted40\n    local -a arranged_sorted41\n    local -a\
    \ arranged_sorted42\n    local -a arranged_sorted43\n    local -a arranged_sorted44\n\
    \    local -a arranged_sorted45\n    local -a arranged_sorted46\n    local -a\
    \ arranged_sorted47\n    local -a arranged_sorted48\n    local -a arranged_sorted49\n\
    \    local -a arrange\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl877tyd8.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n\
    \    local -i i\n    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[$i]}\
    \ -gt ${arr[$(( $i - 1 ))]} ]]; then\n            max=i\n        fi\n    done\n\
    \    echo \"$max\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpla4ppvkq.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arrange=\"$1\"\n    local -n max=\"$2\"\n    local\
    \ -n i\n    local -n j\n    local -n len=\"$#\" # length of arrange\n    local\
    \ -n maxlen=\"$#\" # length of max\n    local -n maxidx=\"$#\" # index of max\n\
    \    local -n maxval=\"$#\" # value of max\n    local -n maxidx2=\"$#\" # index\
    \ of max after swapping\n    local -n maxval2=\"$#\" # value of max after swapping\n\
    \    local -n maxidx3=\"$#\" # index of max after swapping again\n    local -n\
    \ maxval3=\"$#\" # value of max after swapping again\n    local -n maxidx4=\"\
    $#\" # index of max after swapping again\n    local -n maxval4=\"$#\" # value\
    \ of max after swapping again\n    local -n maxidx5=\"$#\" # index of max after\
    \ swapping again\n    local -n maxval5=\"$#\" # value of max after swapping again\n\
    \    local -n maxidx6=\"$#\" # index of max after swapping again\n    local -n\
    \ maxval6=\"$#\" # value of max after swapping again\n    local -n maxidx7=\"\
    $#\" # index of max after swapping again\n    local -n maxval7=\"$#\" # value\
    \ of max after swapping again\n    local -n maxidx8=\"$#\" # index of max after\
    \ swapping again\n    local -n maxval8=\"$#\" # value of max after swapping again\n\
    \    local -n maxidx9=\"$#\" # index of max after swapping again\n    local -n\
    \ maxval9=\"$#\" # value of max after swapping again\n    local -n maxidx10=\"\
    $#\" # index of max after swapping again\n    local -n maxval10=\"$#\" # value\
    \ of max after swapping again\n    local -n maxidx11=\"$#\" # index of max after\
    \ swapping again\n    local -n maxval11=\"$#\" # value of max after swapping again\n\
    \    local -n maxidx12=\"$#\" # index of max after swapping again\n    local -n\
    \ maxval12=\"$#\" # value of max after swapping again\n    local -n maxidx13=\"\
    $#\" # index of max after sw\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdid3nv5x.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpdid3nv5x.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpdid3nv5x.sh: line 18: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 19: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 20: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 21: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 22: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 23: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 24: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 25: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 26: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 27: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 28: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 29: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 31: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 32: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 33: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 36: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 37: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 38: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 39: local: `1'': invalid variable name for name reference

    /tmp/tmpdid3nv5x.sh: line 40: local: `1'': invalid variable name for'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n arr=\"$2\"\n  local -n\
    \ max=\"$3\"\n  local -n i\n  local -n j\n  local -n len=\"$#\" # length of $arrange\n\
    \  local -n maxlen=\"$max\" # length of $arr\n  local -n maxidx\n  local -n maxval\n\
    \  local -n maxval2\n  local -n maxval3\n  local -n maxval4\n  local -n maxval5\n\
    \  local -n maxval6\n  local -n maxval7\n  local -n maxval8\n  local -n maxval9\n\
    \  local -n maxval10\n  local -n maxval11\n  local -n maxval12\n  local -n maxval13\n\
    \  local -n maxval14\n  local -n maxval15\n  local -n maxval16\n  local -n maxval17\n\
    \  local -n maxval18\n  local -n maxval19\n  local -n maxval20\n  local -n maxval21\n\
    \  local -n maxval22\n  local -n maxval23\n  local -n maxval24\n  local -n maxval25\n\
    \  local -n maxval26\n  local -n maxval27\n  local -n maxval28\n  local -n maxval29\n\
    \  local -n maxval30\n  local -n maxval31\n  local -n maxval32\n  local -n maxval33\n\
    \  local -n maxval34\n  local -n maxval35\n  local -n maxval36\n  local -n maxval37\n\
    \  local -n maxval38\n  local -n maxval39\n  local -n maxval40\n  local -n maxval41\n\
    \  local -n maxval42\n  local -n maxval43\n  local -n maxval44\n  local -n maxval45\n\
    \  local -n maxval46\n  local -n maxval47\n  local -n maxval48\n  local -n maxval49\n\
    \  local -n maxval50\n  local -n maxval51\n  local -n maxval52\n  local -n maxval53\n\
    \  local -n maxval54\n  local -n maxval55\n  \n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5k2rnhyf.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp5k2rnhyf.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp5k2rnhyf.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp5k2rnhyf.sh: line 19: local: `1'': invalid variable name for name reference

    /tmp/tmp5k2rnhyf.sh: line 20: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=0\n\
    \    local maxIndex=0\n    local current\n    local currentIndex\n    local currentMax\n\
    \    local currentMaxIndex\n    local currentMaxValue\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local \n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n idx2=$5\n  local -n val2=$6\n  local -n idx3=$7\n  local\
    \ -n val3=$8\n  local -n idx4=$9\n  local -n val4=$10\n  local -n idx5=$11\n \
    \ local -n val5=$12\n  local -n idx6=$13\n  local -n val6=$14\n  local -n idx7=$15\n\
    \  local -n val7=$16\n  local -n idx8=$17\n  local -n val8=$18\n  local -n idx9=$19\n\
    \  local -n val9=$20\n  local -n idx10=$21\n  local -n val10=$22\n  local -n idx11=$23\n\
    \  local -n val11=$24\n  local -n idx12=$25\n  local -n val12=$26\n  local -n\
    \ idx13=$27\n  local -n val13=$28\n  local -n idx14=$29\n  local -n val14=$30\n\
    \  local -n idx15=$31\n  local -n val15=$32\n  local -n idx16=$33\n  local -n\
    \ val16=$34\n  local -n idx17=$35\n  local -n val17=$36\n  local -n idx18=$37\n\
    \  local -n val18=$38\n  local -n idx19=$39\n  local -n val19=$40\n  local -n\
    \ idx20=$41\n  local -n val20=$42\n  local -n idx21=$43\n  local -n val21=$44\n\
    \  local -n idx22=$45\n  local -n val22=$46\n  local -n idx23=$47\n  local -n\
    \ val23=$48\n  local -n idx24=$49\n  local -n val24=$50\n  local -n idx25=$51\n\
    \  local -n val25=$52\n  local -n idx26=$53\n  local -n val26=$54\n  local -n\
    \ idx27=$55\n  local -n val27=$56\n  local -n idx28=$57\n  local -\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgskx5p7f.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpgskx5p7f.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -n max=$2\n\
    \  local -n prev=$3\n  local -n i\n  local -n j\n  local -n len\n  local -n maxlen\n\
    \  local -n maxidx\n  local -n maxval\n  local -n maxidx2\n  local -n maxval2\n\
    \  local -n maxidx3\n  local -n maxval3\n  local -n maxidx4\n  local -n maxval4\n\
    \  local -n maxidx5\n  local -n maxval5\n  local -n maxidx6\n  local -n maxval6\n\
    \  local -n maxidx7\n  local -n maxval7\n  local -n maxidx8\n  local -n maxval8\n\
    \  local -n maxidx9\n  local -n maxval9\n  local -n maxidx10\n  local -n maxval10\n\
    \  local -n maxidx11\n  local -n maxval11\n  local -n maxidx12\n  local -n maxval12\n\
    \  local -n maxidx13\n  local -n maxval13\n  local -n maxidx14\n  local -n maxval14\n\
    \  local -n maxidx15\n  local -n maxval15\n  local -n maxidx16\n  local -n maxval16\n\
    \  local -n maxidx17\n  local -n maxval17\n  local -n maxidx18\n  local -n maxval18\n\
    \  local -n maxidx19\n  local -n maxval19\n  local -n maxidx20\n  local -n maxval20\n\
    \  local -n maxidx21\n  local -n maxval21\n  local -n maxidx22\n  local -n maxval22\n\
    \  local -n maxidx23\n  local -n maxval23\n  local -n maxidx24\n  local -n maxval24\n\
    \  local -n maxidx25\n  local -n maxval25\n  local -n maxidx26\n  local -n maxval26\n\
    \  local -n maxidx27\n  local -n maxval27\n  local -n maxidx28\n  local -n maxval28\n\
    \  local -n maxidx29\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsr4d_78i.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpsr4d_78i.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpsr4d_78i.sh: line 17: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n maxi\n  local -n maxj\n  local -n maxi1\n  local\
    \ -n maxj1\n  local -n maxi2\n  local -n maxj2\n  local -n maxi3\n  local -n maxj3\n\
    \  local -n maxi4\n  local -n maxj4\n  local -n maxi5\n  local -n maxj5\n  local\
    \ -n maxi6\n  local -n maxj6\n  local -n maxi7\n  local -n maxj7\n  local -n maxi8\n\
    \  local -n maxj8\n  local -n maxi9\n  local -n maxj9\n  local -n maxi10\n  local\
    \ -n maxj10\n  local -n maxi11\n  local -n maxj11\n  local -n maxi12\n  local\
    \ -n maxj12\n  local -n maxi13\n  local -n maxj13\n  local -n maxi14\n  local\
    \ -n maxj14\n  local -n maxi15\n  local -n maxj15\n  local -n maxi16\n  local\
    \ -n maxj16\n  local -n maxi17\n  local -n maxj17\n  local -n maxi18\n  local\
    \ -n maxj18\n  local -n maxi19\n  local -n maxj19\n  local -n maxi20\n  local\
    \ -n maxj20\n  local -n maxi21\n  local -n maxj21\n  local -n maxi22\n  local\
    \ -n maxj22\n  local -n maxi23\n  local -n maxj23\n  local -n maxi24\n  local\
    \ -n maxj24\n  local -n maxi25\n  local -n maxj25\n  local -n maxi26\n  local\
    \ -n maxj26\n  local -n maxi27\n  local -n maxj27\n  local -n maxi28\n  local\
    \ -n maxj28\n  local -n maxi29\n  local -n maxj29\n  local -n maxi30\n\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0k1d4f52.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp0k1d4f52.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  local val\n  for i in $(seq 0 $max); do\n    val=${arr[$i]}\n    if\
    \ [[ $val -gt $(( ${arr[$(( i - 1 ))]} )) ]]; then\n      max=$i\n    fi\n  done\n\
    \  if [[ $max -eq 0 ]]; then\n    return -1\n  else\n    echo \"$max\"\n  fi\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzqbd1n8_.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  local -n val\n  for i in $(seq 0 $max); do\n    val=${arr[i]}\n    if\
    \ [[ ${val} -gt $(( ${arr[i-1]} + 1 )) ]]; then\n      max=$i\n    fi\n  done\n\
    \  echo \"$max\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpav_p94m7.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a sorted=()\n  local -a candidates=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted\n}\n\ncandidate() {\n   \
    \ can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe9xp8cej.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  local -n elem\n  for i in ${!arr[@]}; do\n    elem=${arr[i]}\n    if\
    \ [[ $elem -gt $max ]]; then\n      max=$i\n    fi\n  done\n  if [[ $max -eq 0\
    \ ]]; then\n    return -1\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvvzqh1as.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local i\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_hxgnkbl.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n maxidx=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n\
    \  local -n maxidxval2=$8\n  local -n maxidxval3=$9\n  local -n maxidxval4=$10\n\
    \  local -n maxidxval5=$11\n  local -n maxidxval6=$12\n  local -n maxidxval7=$13\n\
    \  local -n maxidxval8=$14\n  local -n maxidxval9=$15\n  local -n maxidxval10=$16\n\
    \  local -n maxidxval11=$17\n  local -n maxidxval12=$18\n  local -n maxidxval13=$19\n\
    \  local -n maxidxval14=$20\n  local -n maxidxval15=$21\n  local -n maxidxval16=$22\n\
    \  local -n maxidxval17=$23\n  local -n maxidxval18=$24\n  local -n maxidxval19=$25\n\
    \  local -n maxidxval20=$26\n  local -n maxidxval21=$27\n  local -n maxidxval22=$28\n\
    \  local -n maxidxval23=$29\n  local -n maxidxval24=$30\n  local -n maxidxval25=$31\n\
    \  local -n maxidxval26=$32\n  local -n maxidxval27=$33\n  local -n maxidxval28=$34\n\
    \  local -n maxidxval29=$35\n  local -n maxidxval30=$36\n  local -n maxidxval31=$37\n\
    \  local -n maxidxval32=$38\n  local -n maxidxval33=$39\n  local -n maxidxval34=$40\n\
    \  local -n maxidxval35=$41\n  local -n maxidxval36=$42\n  local -n maxidxval37=$43\n\
    \  local -n maxidxval38=$44\n  local -n maxidxval39=$45\n  local -n maxidxval40=$46\n\
    \  local -n maxidxval41=$47\n  local -n maxidxval42=$48\n  \n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkwjx7afu.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpkwjx7afu.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpkwjx7afu.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpkwjx7afu.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpkwjx7afu.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpkwjx7afu.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpkwjx7afu.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpkwjx7afu.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpkwjx7afu.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpkwjx7afu.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpkwjx7afu.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpkwjx7afu.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpkwjx7afu.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmpkwjx7afu.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmpkwjx7afu.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmpkwjx7afu.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmpkwjx7afu.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n prev=$5\n  local -n maxidx=$6\n  local -n maxval=$7\n\
    \  local -n maxprev=$8\n  local -n maxmaxidx=$9\n  local -n maxmaxval=$10\n  local\
    \ -n maxmaxprev=$11\n  local -n maxmaxmaxidx=$12\n  local -n maxmaxmaxval=$13\n\
    \  local -n maxmaxmaxprev=$14\n  local -n maxmaxmaxmaxidx=$15\n  local -n maxmaxmaxmaxval=$16\n\
    \  local -n maxmaxmaxmaxprev=$17\n  local -n maxmaxmaxmaxmaxidx=$18\n  local -n\
    \ maxmaxmaxmaxmaxval=$19\n  local -n maxmaxmaxmaxmaxprev=$20\n  local -n maxmaxmaxmaxmaxmaxidx=$21\n\
    \  local -n maxmaxmaxmaxmaxval=$22\n  local -n maxmaxmaxmaxmaxprev=$23\n  local\
    \ -n maxmaxmaxmaxmaxmaxidx=$24\n  local -n maxmaxmaxmaxmaxval=$25\n  local -n\
    \ maxmaxmaxmaxmaxprev=$26\n  local -n maxmaxmaxmaxmaxmaxidx=$27\n  local -n maxmaxmaxmaxmaxval=$28\n\
    \  local -n maxmaxmaxmaxmaxprev=$29\n  local -n maxmaxmaxmaxmaxmaxidx=$30\n  local\
    \ -n maxmaxmaxmaxmaxval=$31\n  local -n maxmaxmaxmaxmaxprev=$32\n  local -n maxmaxmaxmaxmaxmaxidx=$33\n\
    \  local -n maxmaxmaxmaxmaxval=$34\n  local -n maxmaxmaxmaxmaxprev=$35\n  local\
    \ -n maxmaxmaxmaxmaxmaxidx=$36\n  local -n maxmaxmaxmaxmaxval=$37\n  local -n\
    \ maxmaxmaxmaxmaxprev=$38\n  local -n maxmaxmaxmaxmaxmaxidx=$39\n  local -n maxmaxmaxmaxmaxval=$40\n\
    \  local -n maxmaxmaxmaxmaxprev=$41\n  local -n maxmaxmaxmaxmaxmaxidx=$42\n  local\
    \ -n maxmaxmaxmaxmaxval=$43\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw9njx8_q.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpw9njx8_q.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpw9njx8_q.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpw9njx8_q.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpw9njx8_q.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpw9njx8_q.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpw9njx8_q.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpw9njx8_q.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpw9njx8_q.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpw9njx8_q.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpw9njx8_q.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpw9njx8_q.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpw9njx8_q.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmpw9njx8_q.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmpw9njx8_q.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmpw9njx8_q.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmpw9njx8_q.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n maxidx=$5\n\n  local -n maxval=$max\n  local -n maxidxval=$maxidx\n\
    \n  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n idxval2=$idx\n\
    \  local -n valval2=$val\n\n  local -n idxval3=$idx\n  local -n valval3=$val\n\
    \n  local -n idxval4=$idx\n  local -n valval4=$val\n\n  local -n idxval5=$idx\n\
    \  local -n valval5=$val\n\n  local -n idxval6=$idx\n  local -n valval6=$val\n\
    \n  local -n idxval7=$idx\n  local -n valval7=$val\n\n  local -n idxval8=$idx\n\
    \  local -n valval8=$val\n\n  local -n idxval9=$idx\n  local -n valval9=$val\n\
    \n  local -n idxval10=$idx\n  local -n valval10=$val\n\n  local -n idxval11=$idx\n\
    \  local -n valval11=$val\n\n  local -n idxval12=$idx\n  local -n valval12=$val\n\
    \n  local -n idxval13=$idx\n  local -n valval13=$val\n\n  local -n idxval14=$idx\n\
    \  local -n valval14=$val\n\n  local -n idxval15=$idx\n  local -n valval15=$val\n\
    \n  local -n idxval16=$idx\n  local -n valval16=$val\n\n  local -n idxval17=$idx\n\
    \  local -n valval17=$val\n\n  local -n idxval18=$idx\n  local -n valval18=$val\n\
    \n  local -n idxval19=$idx\n  local -n valval19=$val\n\n  local -n idxval20=$idx\n\
    \  local -n valval20=$val\n\n  local -n idxval21=$idx\n  local -n valval21=$val\n\
    \n  local -n idxval22=$idx\n  local -n valval22=$val\n\n  local -n idxval23=$idx\n\
    \  local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd0kf8942.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpd0kf8942.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 41: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 42: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 44: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 45: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 47: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 48: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 50: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 51: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 53: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 54: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 56: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 57: local: `'': not a valid identifier

    /tmp/tmpd0kf8942.sh: line 59: local: '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a max\n  local -a i\n  local maxidx\n\
    \  local maxval\n  local imax\n  local i\n  local val\n  local idx\n  local len\n\
    \  local maxlen\n  local maxidx\n  local maxval\n  local imax\n  local i\n  local\
    \ val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n\
    \  local imax\n  local i\n  local val\n  local idx\n  local len\n  local maxlen\n\
    \  local maxidx\n  local maxval\n  local imax\n  local i\n  local val\n  local\
    \ idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local imax\n\
    \  local i\n  local val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n\
    \  local maxval\n  local imax\n  local i\n  local val\n  local idx\n  local len\n\
    \  local maxlen\n  local maxidx\n  local maxval\n  local imax\n  local i\n  local\
    \ val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n\
    \  local imax\n  local i\n  local val\n  local idx\n  local len\n  local maxlen\n\
    \  local maxidx\n  local maxval\n  local imax\n  local i\n  local val\n  local\
    \ idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local imax\n\
    \  local i\n  local val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n\
    \  local maxval\n  local imax\n  local i\n  local val\n  local idx\n  local len\n\
    \  local maxlen\n  local maxidx\n  local maxval\n  local imax\n  local i\n  local\
    \ val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n\
    \  local imax\n  local i\n  local val\n  local idx\n  local len\n  local maxlen\n\
    \  local maxidx\n  local maxval\n  local imax\n  local i\n  local val\n  \n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoa9skyyg.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $(( ${#arr[@]} - 1 ))); do\n    local j=$(( i + 1 ))\n\
    \    if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n      max=$(( ${i} + 1 ))\n    fi\n\
    \  done\n  if [[ ${max} -eq ${#arr[@]} ]]; then\n    return -1\n  else\n    echo\
    \ \"${max}\"\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl76ymwgg.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -a arranged_indices\n\
    \  local -a arranged_values\n  local -a arranged_values2\n  local -a arranged_values3\n\
    \  local -a arranged_values4\n  local -a arranged_values5\n  local -a arranged_values6\n\
    \  local -a arranged_values7\n  local -a arranged_values8\n  local -a arranged_values9\n\
    \  local -a arranged_values10\n  local -a arranged_values11\n  local -a arranged_values12\n\
    \  local -a arranged_values13\n  local -a arranged_values14\n  local -a arranged_values15\n\
    \  local -a arranged_values16\n  local -a arranged_values17\n  local -a arranged_values18\n\
    \  local -a arranged_values19\n  local -a arranged_values20\n  local -a arranged_values21\n\
    \  local -a arranged_values22\n  local -a arranged_values23\n  local -a arranged_values24\n\
    \  local -a arranged_values25\n  local -a arranged_values26\n  local -a arranged_values27\n\
    \  local -a arranged_values28\n  local -a arranged_values29\n  local -a arranged_values30\n\
    \  local -a arranged_values31\n  local -a arranged_values32\n  local -a arranged_values33\n\
    \  local -a arranged_values34\n  local -a arranged_values35\n  local -a arranged_values36\n\
    \  local -a arranged_values37\n  local -a arranged_values38\n  local -a arranged_values39\n\
    \  local -a arranged_values40\n  local -a arranged_values41\n  local -a arranged_values42\n\
    \  local -a arranged_values43\n  local -a arranged_values44\n  local -a arranged_values45\n\
    \  local -a arranged_values46\n  local -a arranged_values47\n  local -a arranged_values48\n\
    \  local -a arranged_\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc1q5fs33.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n len=\"$#\"\n  local -n maxlen=\"$max\"\n  local\
    \ -n maxidx=\"$max\"\n  local -n maxval=\"$max\"\n  local -n maxidx2=\"$max\"\n\
    \  local -n maxval2=\"$max\"\n  local -n maxidx3=\"$max\"\n  local -n maxval3=\"\
    $max\"\n  local -n maxidx4=\"$max\"\n  local -n maxval4=\"$max\"\n  local -n maxidx5=\"\
    $max\"\n  local -n maxval5=\"$max\"\n  local -n maxidx6=\"$max\"\n  local -n maxval6=\"\
    $max\"\n  local -n maxidx7=\"$max\"\n  local -n maxval7=\"$max\"\n  local -n maxidx8=\"\
    $max\"\n  local -n maxval8=\"$max\"\n  local -n maxidx9=\"$max\"\n  local -n maxval9=\"\
    $max\"\n  local -n maxidx10=\"$max\"\n  local -n maxval10=\"$max\"\n  local -n\
    \ maxidx11=\"$max\"\n  local -n maxval11=\"$max\"\n  local -n maxidx12=\"$max\"\
    \n  local -n maxval12=\"$max\"\n  local -n maxidx13=\"$max\"\n  local -n maxval13=\"\
    $max\"\n  local -n maxidx14=\"$max\"\n  local -n maxval14=\"$max\"\n  local -n\
    \ maxidx15=\"$max\"\n  local -n maxval15=\"$max\"\n  local -n maxidx16=\"$max\"\
    \n  local -n maxval16=\"$max\"\n  local -n maxidx17=\"$max\"\n  local -n maxval17=\"\
    $max\"\n  local -n maxidx18=\"$max\"\n  local -n maxval18=\"$max\"\n  local -n\
    \ maxidx19=\"$max\"\n  local -n maxval19=\"$max\"\n  local -n maxidx20=\"$max\"\
    \n  local -n maxval20=\"$max\"\n  local -n maxidx21=\"$max\"\n  local -n maxval21=\"\
    $max\"\n  local -n max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp90lx8qk1.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp90lx8qk1.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 18: local: `1'': invalid variable name for name reference

    /tmp/tmp90lx8qk1.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 23: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 24: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 25: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 26: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 27: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 28: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 29: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 30: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 31: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 32: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 33: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 34: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 35: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 36: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 37: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 38: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 39: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 40: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 41: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 42: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 43: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 44: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 45: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.sh: line 46: local: `'': not a valid identifier

    /tmp/tmp90lx8qk1.s'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=$((\
    \ ${#array[@]} - 1 ))\n    local value\n    while (( index < max )); do\n    \
    \    value=${array[$index]} # get the current value\n        (( index++ )) # increment\
    \ the index\n        if (( index == max )); then\n            (( index-- )) #\
    \ decrement the index\n            (( max-- )) # decrement the max\n        fi\n\
    \        if (( value <= ${array[$index]} )); then\n            (( max-- )) # decrement\
    \ the max\n        fi\n    done\n    if (( index == 0 )); then\n        echo \"\
    -1\"\n    else\n        echo \"$max\"\n    fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local currentMax=0\n  local currentMaxIndex=0\n  local currentIndex=0\n\
    \  while [ \"$index\" -lt \"$#\" ] && [ \"$max\" -lt \"$currentMax\" ];\n  do\n\
    \    currentMax=$max\n    currentMaxIndex=$maxIndex\n    currentIndex=$index\n\
    \    local element=$array[$index]\n    local nextIndex=$((index+1))\n    while\
    \ [ \"$nextIndex\" -lt \"$#\" ] && [ \"$element\" -gt \"$array[$nextIndex]\" ];\n\
    \    do\n      nextIndex=$((nextIndex+1))\n    done\n    if [ \"$nextIndex\" -eq\
    \ \"$#\" ];\n    then\n      max=$element\n      maxIndex=$currentIndex\n    fi\n\
    \    array[$index]=${array[$nextIndex]}\n    array[$nextIndex]=${array[$index]}\n\
    \    index=$nextIndex\n  done\n  if [ \"$index\" -eq \"$#\" ];\n  then\n    return\
    \ -1\n  fi\n  return $maxIndex\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n\
    \  local maxIndex=$((${#array}-1))\n  while (( ${#array} > 0 )); do\n    local\
    \ element=${array[$index]}\n    local previousElement=${array[$index-1]}\n   \
    \ if (( ${element} <= ${previousElement} )); then\n      maxIndex=$index\n   \
    \   max=$element\n    fi\n    ((index++))\n  done\n  echo \"${maxIndex}\"\n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660044093
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ maxIndex\n  local maxValue\n  local maxIndexValue\n  local maxIndexValue2\n\
    \  local maxIndexValue3\n  local maxIndexValue4\n  local maxIndexValue5\n  local\
    \ maxIndexValue6\n  local maxIndexValue7\n  local maxIndexValue8\n  local maxIndexValue9\n\
    \  local maxIndexValue10\n  local maxIndexValue11\n  local maxIndexValue12\n \
    \ local maxIndexValue13\n  local maxIndexValue14\n  local maxIndexValue15\n  local\
    \ maxIndexValue16\n  local maxIndexValue17\n  local maxIndexValue18\n  local maxIndexValue19\n\
    \  local maxIndexValue20\n  local maxIndexValue21\n  local maxIndexValue22\n \
    \ local maxIndexValue23\n  local maxIndexValue24\n  local maxIndexValue25\n  local\
    \ maxIndexValue26\n  local maxIndexValue27\n  local maxIndexValue28\n  local maxIndexValue29\n\
    \  local maxIndexValue30\n  local maxIndexValue31\n  local maxIndexValue32\n \
    \ local maxIndexValue33\n  local maxIndexValue34\n  local maxIndexValue35\n  local\
    \ maxIndexValue36\n  local maxIndexValue37\n  local maxIndexValue38\n  local maxIndexValue39\n\
    \  local maxIndexValue40\n  local maxIndexValue41\n  local maxIndexValue42\n \
    \ local maxIndexValue43\n  local maxIndexValue44\n  local maxIndexValue45\n  local\
    \ maxIndexValue46\n  local maxIndexValue47\n  local maxIndexValue48\n  local maxIndexValue49\n\
    \  local maxIndexValue50\n  local maxIndexValue51\n  local maxIndexValue52\n \
    \ local maxIndexValue53\n  local maxIndexValue54\n  local maxIndexValue55\n  local\
    \ maxIndexValue56\n  local maxIndexValue57\n  local maxIndexValue58\n  local maxIndexValue59\n\
    \  local maxIndexValue60\n  local maxIndexValue61\n  local maxIndexValue62\n \
    \ local maxIndexValue63\n  local maxIndexValue64\n  local maxIndexValue65\n  local\
    \ maxIndexValue66\n  local maxIndexValue67\n  local maxIndexValue68\n  local maxIndexValue69\n\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -a result=()\n\
    \  local -a candidates=()\n  local -a candidates_sorted=()\n  local -a candidates_result=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_result=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_result=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_result=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_result=()\n  local -a candidates_sorted=()\n  local -a candidates_result=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_result=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_result=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_result=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_result=()\n  local -a candidates_sorted=()\n  local -a candidates_result=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_result=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_result=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_result=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_result=()\n  local -a candidates_sorted=()\n  local -a candidates_result=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_result=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_result=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_result=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_result=()\n  local -a candidates_sorted=()\n  local -a candidates_result=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_result=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_result=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_result=()\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkbdbnodn.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$((${#arr[@]} - 1))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$((i + 1))\n    if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]; then\n      max=$j\n    fi\n  done\n  echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3qwi0_j_.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  local value\n  while (( index < max )); do\n    value=${array:$index:1}\n\
    \    if [[ ${array:$(( index + 1 )):1} -gt $value ]]; then\n      max=$(( index\
    \ + 1 ))\n    else\n      (( index++ ))\n    fi\n  done\n  if (( index == max\
    \ )); then\n    return -1\n  else\n    return $(( index + 1 ))\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=39 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=28 encoding='utf-8'>
  timestamp: 1660044093
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n len=\"${#arrange[@]}\"\n  local -n maxlen=\"${#max}\"\
    \n  local -n maxval\n  local -n maxidx\n  local -n maxidx2\n  local -n maxidx3\n\
    \  local -n maxidx4\n  local -n maxidx5\n  local -n maxidx6\n  local -n maxidx7\n\
    \  local -n maxidx8\n  local -n maxidx9\n  local -n maxidx10\n  local -n maxidx11\n\
    \  local -n maxidx12\n  local -n maxidx13\n  local -n maxidx14\n  local -n maxidx15\n\
    \  local -n maxidx16\n  local -n maxidx17\n  local -n maxidx18\n  local -n maxidx19\n\
    \  local -n maxidx20\n  local -n maxidx21\n  local -n maxidx22\n  local -n maxidx23\n\
    \  local -n maxidx24\n  local -n maxidx25\n  local -n maxidx26\n  local -n maxidx27\n\
    \  local -n maxidx28\n  local -n maxidx29\n  local -n maxidx30\n  local -n maxidx31\n\
    \  local -n maxidx32\n  local -n maxidx33\n  local -n maxidx34\n  local -n maxidx35\n\
    \  local -n maxidx36\n  local -n maxidx37\n  local -n maxidx38\n  local -n maxidx39\n\
    \  local -n maxidx40\n  local -n maxidx41\n  local -n maxidx42\n  local -n maxidx43\n\
    \  local -n maxidx44\n  local -n maxidx45\n  local -n maxidx46\n  local -n maxidx47\n\
    \  local -n maxidx48\n  local -n maxidx49\n  local -n maxidx50\n  local -n maxidx51\n\
    \  local -n maxidx52\n  local -n maxidx53\n  local -n maxidx54\n  local -n maxidx55\n\
    \  local -n maxidx56\n  local -n max\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpppmpmf8c.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpppmpmf8c.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpppmpmf8c.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmpppmpmf8c.sh: line 19: local: `0'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ k\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local maxidx2\n\
    \  local maxval2\n  local maxidx3\n  local maxval3\n  local maxidx4\n  local maxval4\n\
    \  local maxidx5\n  local maxval5\n  local maxidx6\n  local maxval6\n  local maxidx7\n\
    \  local maxval7\n  local maxidx8\n  local maxval8\n  local maxidx9\n  local maxval9\n\
    \  local maxidx10\n  local maxval10\n  local maxidx11\n  local maxval11\n  local\
    \ maxidx12\n  local maxval12\n  local maxidx13\n  local maxval13\n  local maxidx14\n\
    \  local maxval14\n  local maxidx15\n  local maxval15\n  local maxidx16\n  local\
    \ maxval16\n  local maxidx17\n  local maxval17\n  local maxidx18\n  local maxval18\n\
    \  local maxidx19\n  local maxval19\n  local maxidx20\n  local maxval20\n  local\
    \ maxidx21\n  local maxval21\n  local maxidx22\n  local maxval22\n  local maxidx23\n\
    \  local maxval23\n  local maxidx24\n  local maxval24\n  local maxidx25\n  local\
    \ maxval25\n  local maxidx26\n  local maxval26\n  local maxidx27\n  local maxval27\n\
    \  local maxidx28\n  local maxval28\n  local maxidx29\n  local maxval29\n  local\
    \ maxidx30\n  local maxval30\n  local maxidx31\n  local maxval31\n  local maxidx32\n\
    \  local maxval32\n  local maxidx33\n  local maxval33\n  local maxidx34\n  local\
    \ maxval34\n  local maxidx35\n  local maxval35\n  local maxidx36\n  local maxval36\n\
    \  local maxidx37\n  local maxval37\n  local maxidx38\n  local maxval38\n  local\
    \ maxidx39\n  local maxval39\n  local maxidx40\n  local maxval40\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpacmgw9m9.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n\
    \    local -i i\n    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[$i]}\
    \ -gt ${arr[$(( i - 1 ))]} ]]; then\n            max=i\n        fi\n    done\n\
    \    if [[ $max -eq 0 ]]; then\n        echo \"-1\"\n    else\n        echo \"\
    $max\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe6xlxxo2.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local arr=( $1 )\n    local max=$( echo $arr | sort -n |\
    \ tail -n 1 )\n    local i\n    for (( i=1; i<${#arr[@]}; i++ )); do\n       \
    \ if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n\
    \    done\n    if [[ ${max} -eq ${arr[0]} ]]; then\n        echo -1\n    else\n\
    \        echo $max\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a sorted=()\n  local -n max=$2\n\
    \  local -n maxidx=$3\n  local -n maxval=$4\n  local -n idx=$5\n  local -n val=$6\n\
    \  local -n i\n  local -n j\n  local -n len=$#\n  local -n maxlen=$max\n  local\
    \ -n maxidxlen=$maxidx\n  local -n maxvallen=$maxval\n  local -n maxidxidx=$((maxidxlen\
    \ + 1))\n  local -n maxvalidx=$((maxvallen + 1))\n  local -n maxidxval=$((maxidxidx\
    \ + 1))\n  local -n maxvalval=$((maxvalidx + 1))\n  local -n maxidxidxval=$((maxidxidxval\
    \ + 1))\n  local -n maxvalvalval=$((maxvalvalval + 1))\n  local -n maxidxidxvalval=$((maxidxidxvalval\
    \ + 1))\n  local -n maxvalvalvalval=$((maxvalvalvalval + 1))\n  local -n maxidxidxvalvalval=$((maxidxidxvalvalval\
    \ + 1))\n  local -n maxvalvalvalval=$((maxvalvalvalval + 1))\n  local -n maxidxidxvalvalval=$((maxidxidxvalvalval\
    \ + 1))\n  local -n maxvalvalvalval=$((maxvalvalvalval + 1))\n  local -n maxidxidxvalvalvalval=$((maxidxidxvalvalvalval\
    \ + 1))\n  local -n maxvalvalvalvalval=$((maxvalvalvalvalval + 1))\n  local -n\
    \ maxidxidxvalvalvalval=$((maxidxidxvalvalvalval + 1))\n  local -n maxvalvalvalvalval=$((maxvalvalvalvalval\
    \ + 1))\n  local -n maxidxidxvalvalvalval=$((maxidxidxvalvalvalval + 1))\n  local\
    \ -n maxvalvalvalvalval=$((maxvalvalvalvalval + 1))\n  local -n maxidxidxvalvalvalvalval=$((maxidxidxvalvalvalvalval\
    \ + 1))\n  local -n maxvalvalvalvalvalval=$((maxvalvalvalvalvalval + 1))\n  local\
    \ -n maxidxidxvalvalvalvalval\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoez1xc8k.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpoez1xc8k.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpoez1xc8k.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpoez1xc8k.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpoez1xc8k.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpoez1xc8k.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpoez1xc8k.sh: line 23: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpoez1xc8k.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpoez1xc8k.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpoez1xc8k.sh: line 27: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 28: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 29: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 31: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 32: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 33: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 36: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 37: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 38: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 39: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 40: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 41: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 42: local: `1'': invalid variable name for name reference

    /tmp/tmpoez1xc8k.sh: line 43: loca'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -a result=()\n\
    \  local -i i\n  local max\n  local maxidx\n  local maxval\n  local val\n  local\
    \ idx\n  local vals\n  local -a vals\n  local -a idxs\n  local -a idx\n  local\
    \ -a idxs\n  local -a val\n  local -a vals\n  local -a idx\n  local -a idxs\n\
    \  local -a val\n  local -a vals\n  local -a idx\n  local -a idxs\n  local -a\
    \ val\n  local -a vals\n  local -a idx\n  local -a idxs\n  local -a val\n  local\
    \ -a vals\n  local -a idx\n  local -a idxs\n  local -a val\n  local -a vals\n\
    \  local -a idx\n  local -a idxs\n  local -a val\n  local -a vals\n  local -a\
    \ idx\n  local -a idxs\n  local -a val\n  local -a vals\n  local -a idx\n  local\
    \ -a idxs\n  local -a val\n  local -a vals\n  local -a idx\n  local -a idxs\n\
    \  local -a val\n  local -a vals\n  local -a idx\n  local -a idxs\n  local -a\
    \ val\n  local -a vals\n  local -a idx\n  local -a idxs\n  local -a val\n  local\
    \ -a vals\n  local -a idx\n  local -a idxs\n  local -a val\n  local -a vals\n\
    \  local -a idx\n  local -a idxs\n  local -a val\n  local -a vals\n  local -a\
    \ idx\n  local -a idxs\n  local -a val\n  local -a vals\n  local -a idx\n  local\
    \ -a idxs\n  local -a val\n  local -a vals\n  local -a idx\n  local -a idxs\n\
    \  local -a val\n  local -a vals\n  local -a idx\n  local -a idxs\n  local -a\
    \ val\n  local -a vals\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7svy7v4b.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local max=$(( ${#array} - 1 ))\n  local\
    \ index=0\n  local element\n  while (( index < max )); do\n    element=\"${array[index]}\"\
    \n    index=$(expr index + 1)\n    if [[ ${array[index]} -gt ${element} ]]; then\n\
    \      max=$index\n    fi\n  done\n  echo \"${max}\"\n}\n\ncandidate() {\n   \
    \ can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660044093
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -a sorted=()\n  local -a result=()\n\
    \  local -a tmp=()\n  local -i max=0\n  local -i i\n  local -a tmp2\n  local -a\
    \ tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a tmp7\n \
    \ local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local -a tmp11\n  local\
    \ -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n  local -a tmp16\n\
    \  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local -a tmp20\n  local\
    \ -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n  local -a tmp25\n\
    \  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local -a tmp29\n  local\
    \ -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n  local -a tmp34\n\
    \  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local -a tmp38\n  local\
    \ -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n  local -a tmp43\n\
    \  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local -a tmp47\n  local\
    \ -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n  local -a tmp52\n\
    \  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local -a tmp56\n  local\
    \ -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n  local -a tmp61\n\
    \  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local -a tmp65\n  local\
    \ -a tmp66\n  local -a tmp67\n  local -a tmp68\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2xapkrma.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -a sorted=()\n  local -a candidates=()\n\
    \  local -a candidate\n  local -a candidate_index\n  local -a candidate_value\n\
    \  local -a candidate_indexes\n  local -a candidate_values\n  local -a candidate_indexes_sorted\n\
    \  local -a candidate_values_sorted\n  local -a candidate_indexes_sorted_index\n\
    \  local -a candidate_values_sorted_index\n  local -a candidate_indexes_sorted_value\n\
    \  local -a candidate_values_sorted_value\n  local -a candidate_indexes_sorted_index\n\
    \  local -a candidate_values_sorted_index\n  local -a candidate_indexes_sorted_value\n\
    \  local -a candidate_values_sorted_value\n  local -a candidate_indexes_sorted_index\n\
    \  local -a candidate_values_sorted_index\n  local -a candidate_values_sorted_value\n\
    \  local -a candidate_indexes_sorted_index\n  local -a candidate_values_sorted_index\n\
    \  local -a candidate_values_sorted_value\n  local -a candidate_indexes_sorted_index\n\
    \  local -a candidate_values_sorted_index\n  local -a candidate_values_sorted_value\n\
    \  local -a candidate_indexes_sorted_index\n  local -a candidate_values_sorted_index\n\
    \  local -a candidate_values_sorted_value\n  local -a candidate_indexes_sorted_index\n\
    \  local -a candidate_values_sorted_index\n  local -a candidate_values_sorted_value\n\
    \  local -a candidate_indexes_sorted_index\n  local -a candidate_values_sorted_index\n\
    \  local -a candidate_values_sorted_value\n  local -a candidate_indexes_sorted_index\n\
    \  local -a candidate_values_sorted_index\n  local -a candidate_values_sorted_value\n\
    \  local -a candidate_indexes_sorted_index\n  local -a candidate_values_sorted_index\n\
    \  local -a candidate_values_sorted_value\n  local -a candidate_indexes_sorted_index\n\
    \  local -a candidate_values_sorted_index\n  local -a candidate_values_sorted_value\n\
    \  local -a candidate_indexes_sorted_index\n  local -a candidate_values_sorted_index\n\
    \  local -a candidate_values_sorted_value\n  local -a candidate_indexes_sorted_index\n\
    \  local -a candidate_values_sorted_index\n  local -a candidate_values_sorted_value\n\
    \  local -a candidate_indexes_sorted_index\n  local -a candidate_values_sorted_index\n\
    \  local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuwrij0ic.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local element\n\n  for element in $array; do\n    if [ \"$element\"\
    \ -gt \"$max\" ]; then\n      max=\"$element\"\n      maxIndex=\"$index\"\n  \
    \  fi\n    ((index++))\n  done\n\n  if [ \"$maxIndex\" -eq \"$index\" ]; then\n\
    \    return -1\n  else\n    echo \"$maxIndex\"\n  fi\n}\n\ncandidate() {\n   \
    \ can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n maxi\n  local -n maxj\n  local -n maxi1\n  local\
    \ -n maxj1\n  local -n maxi1j\n  local -n maxj1i\n  local -n maxi1j1\n  local\
    \ -n maxj1i1\n  local -n maxi1j2\n  local -n maxj1i2\n  local -n maxi1j3\n  local\
    \ -n maxj1i3\n  local -n maxi1j4\n  local -n maxj1i4\n  local -n maxi1j5\n  local\
    \ -n maxj1i5\n  local -n maxi1j6\n  local -n maxj1i6\n  local -n maxi1j7\n  local\
    \ -n maxj1i7\n  local -n maxi1j8\n  local -n maxj1i8\n  local -n maxi1j9\n  local\
    \ -n maxj1i9\n  local -n maxi1j10\n  local -n maxj1i10\n  local -n maxi1j11\n\
    \  local -n maxj1i11\n  local -n maxi1j12\n  local -n maxj1i12\n  local -n maxi1j13\n\
    \  local -n maxj1i13\n  local -n maxi1j14\n  local -n maxj1i14\n  local -n maxi1j15\n\
    \  local -n maxj1i15\n  local -n maxi1j16\n  local -n maxj1i16\n  local -n maxi1j17\n\
    \  local -n maxj1i17\n  local -n maxi1j18\n  local -n maxj1i18\n  local -n maxi1j19\n\
    \  local -n maxj1i19\n  local -n maxi1j20\n  local -n maxj1i20\n  local -n maxi1j21\n\
    \  local -n maxj1i21\n  local -n maxi1j22\n  local -n maxj1\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdyo7i6bc.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpdyo7i6bc.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local arr=( $1 )\n    local max=$(( ${#arr[@]} - 1 ))\n \
    \   local i\n    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[$i]} -gt\
    \ ${arr[$(( i - 1 ))]} ]]; then\n            max=i\n        fi\n    done\n   \
    \ echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=42 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660044093
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local max=$2\n  local index=0\n  local\
    \ element\n  while IFS= read -r element; do\n    if [[ $element -gt $max ]]; then\n\
    \      max=$element\n      index=$((index+1))\n    fi\n  done <<< \"$array\"\n\
    \  echo \"$index\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5vtkr720.sh: line 19: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j\n    for j in $(seq 0 $(( i\
    \ + 1 ))); do\n      if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n        max=$(expr\
    \ ${i} + 1)\n        break\n      fi\n    done\n  done\n  echo \"$max\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9tsruvic.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -a result=()\n\
    \  local -i max=0\n  local -i index=0\n  local -i i\n  local -a tmp\n\n  for ((i=0;\
    \ i < ${#arr[@]}; i++)); do\n    local -n elem=${arr[i]}\n    local -n elem1\n\
    \    elem1=${elem}\n    sorted+=(\"$elem1\")\n  done\n\n  for ((i=0; i < ${#sorted[@]};\
    \ i++)); do\n    local -n elem=${sorted[i]}\n    local -n elem1\n    elem1=${elem}\n\
    \    if [[ ${elem1} -gt $max ]]; then\n      max=${elem1}\n      index=i\n   \
    \ fi\n  done\n\n  if [[ ${index} -eq 0 ]]; then\n    return -1\n  else\n    result+=(\"\
    ${arr[index]}\")\n  fi\n\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp8itayfx.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=0\n  local\
    \ -n maxidx=0\n  local -n maxval=$max\n  local -n val=$maxval\n  local -n vals=()\n\
    \  local -n maxvals=()\n  local -n maxidxs=()\n  local -n maxvalidxs=()\n  local\
    \ -n maxidx=0\n  local -n maxvalidx=0\n  local -n maxidxs=()\n  local -n maxvalidxs=()\n\
    \  local -n maxvals=()\n  local -n maxvalidxs=()\n  local -n maxidx=0\n  local\
    \ -n maxvalidx=0\n  local -n maxidxs=()\n  local -n maxvalidxs=()\n  local -n\
    \ maxvals=()\n  local -n maxvalidxs=()\n  local -n maxvalidx=0\n  local -n maxvalidx=0\n\
    \  local -n maxvalidxs=()\n  local -n maxvalidxs=()\n  local -n maxvals=()\n \
    \ local -n maxvalidxs=()\n  local -n maxvalidx=0\n  local -n maxvalidx=0\n  local\
    \ -n maxvalidxs=()\n  local -n maxvalidxs=()\n  local -n maxvals=()\n  local -n\
    \ maxvalidxs=()\n  local -n maxvalidx=0\n  local -n maxvalidx=0\n  local -n maxvalidxs=()\n\
    \  local -n maxvalidxs=()\n  local -n maxvals=()\n  local -n maxvalidxs=()\n \
    \ local -n maxvalidx=0\n  local -n maxvalidx=0\n  local -n maxvalidxs=()\n  local\
    \ -n maxvalidxs=()\n  local -n maxvals=()\n  local -n maxvalidxs=()\n  local -n\
    \ maxvalidx=0\n  local -n maxvalidx=0\n  local -n maxvalidxs=()\n  local -n maxvalidxs=()\n\
    \  local -n maxvals=()\n  local -n maxvalidxs=()\n  local -n maxvalidx=0\n  local\
    \ -n maxvalidx=0\n  local -n maxvalidxs=()\n  local -n \n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp47ft261z.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp47ft261z.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp47ft261z.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmp47ft261z.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmp47ft261z.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp47ft261z.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp47ft261z.sh: line 20: local: vals: reference variable cannot be an array

    /tmp/tmp47ft261z.sh: line 21: local: maxvals: reference variable cannot be an
    array

    /tmp/tmp47ft261z.sh: line 22: local: maxidxs: reference variable cannot be an
    array

    /tmp/tmp47ft261z.sh: line 23: local: maxvalidxs: reference variable cannot be
    an array

    /tmp/tmp47ft261z.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmp47ft261z.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmp47ft261z.sh: line 26: local: maxidxs: reference variable cannot be an
    array

    /tmp/tmp47ft261z.sh: line 27: local: maxvalidxs: reference variable cannot be
    an array

    /tmp/tmp47ft261z.sh: line 28: local: maxvals: reference variable cannot be an
    array

    /tmp/tmp47ft261z.sh: line 29: local: maxvalidxs: reference variable cannot be
    an array

    /tmp/tmp47ft261z.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmp47ft261z.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmp47ft261z.sh: line 32: local: maxidxs: reference variable cannot be an
    array

    /tmp/tmp47ft261z.sh: line 33: local: maxvalidxs: reference variable cannot be
    an array

    /tmp/tmp47ft261z.sh: line 34: local: maxvals: reference variable cannot be an
    array

    /tmp/tmp47ft261z.sh: line 35: local: maxvalidxs: reference variable cannot be
    an array

    /tmp/tmp47ft261z.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmp47ft261z.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmp47ft261z.sh: line 38: local: maxvalidxs: reference variable cannot be
    an '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local max=$2\n    local i\n    local\
    \ j\n    local k\n    local len=${#arr[@]}\n    local maxlen=${#max}\n    local\
    \ maxidx\n    local maxval\n    local maxidx2\n    local maxval2\n    local maxidx3\n\
    \    local maxval3\n    local maxidx4\n    local maxval4\n    local maxidx5\n\
    \    local maxval5\n    local maxidx6\n    local maxval6\n    local maxidx7\n\
    \    local maxval7\n    local maxidx8\n    local maxval8\n    local maxidx9\n\
    \    local maxval9\n    local maxidx10\n    local maxval10\n    local maxidx11\n\
    \    local maxval11\n    local maxidx12\n    local maxval12\n    local maxidx13\n\
    \    local maxval13\n    local maxidx14\n    local maxval14\n    local maxidx15\n\
    \    local maxval15\n    local maxidx16\n    local maxval16\n    local maxidx17\n\
    \    local maxval17\n    local maxidx18\n    local maxval18\n    local maxidx19\n\
    \    local maxval19\n    local maxidx20\n    local maxval20\n    local maxidx21\n\
    \    local maxval21\n    local maxidx22\n    local maxval22\n    local maxidx23\n\
    \    local maxval23\n    local maxidx24\n    local maxval24\n    local maxidx25\n\
    \    local maxval25\n    local maxidx26\n    local maxval26\n    local maxidx27\n\
    \    local maxval27\n    local maxidx28\n    local maxval28\n    local maxidx29\n\
    \    local maxval29\n    local maxidx30\n    local maxval30\n    local maxidx31\n\
    \    local maxval31\n    local maxidx32\n    local maxval32\n    local maxidx33\n\
    \    local maxval33\n    local maxidx34\n    local maxval34\n    local maxidx35\n\
    \    local maxval35\n    local maxidx36\n    local maxval36\n    local maxidx37\n\
    \    local maxval37\n    local maxidx38\n    local maxval38\n    local maxidx39\n\
    \    local maxval39\n    local \n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplgsv15vn.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index\n  local max\n  local maxIndex\n\
    \  local value\n\n  maxIndex=0\n  max=0\n  for index in \"${!array}\"; do\n  \
    \  value=\"${array[index]}\"\n    if [ \"$max\" -lt \"$value\" ]; then\n     \
    \ max=\"$value\"\n      maxIndex=\"$index\"\n    fi\n  done\n\n  if [ \"$maxIndex\"\
    \ -eq \"$maxIndex\" ]; then\n    echo \"$maxIndex\"\n  else\n    echo \"-1\"\n\
    \  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpizg8rgij.sh: line 22: 1 2 4 3 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a sorted=()\n  local -a result=()\n\
    \  local -a tmp=()\n  local -a tmp2=()\n  local -a tmp3=()\n  local -a tmp4=()\n\
    \  local -a tmp5=()\n  local -a tmp6=()\n  local -a tmp7=()\n  local -a tmp8=()\n\
    \  local -a tmp9=()\n  local -a tmp10=()\n  local -a tmp11=()\n  local -a tmp12=()\n\
    \  local -a tmp13=()\n  local -a tmp14=()\n  local -a tmp15=()\n  local -a tmp16=()\n\
    \  local -a tmp17=()\n  local -a tmp18=()\n  local -a tmp19=()\n  local -a tmp20=()\n\
    \  local -a tmp21=()\n  local -a tmp22=()\n  local -a tmp23=()\n  local -a tmp24=()\n\
    \  local -a tmp25=()\n  local -a tmp26=()\n  local -a tmp27=()\n  local -a tmp28=()\n\
    \  local -a tmp29=()\n  local -a tmp30=()\n  local -a tmp31=()\n  local -a tmp32=()\n\
    \  local -a tmp33=()\n  local -a tmp34=()\n  local -a tmp35=()\n  local -a tmp36=()\n\
    \  local -a tmp37=()\n  local -a tmp38=()\n  local -a tmp39=()\n  local -a tmp40=()\n\
    \  local -a tmp41=()\n  local -a tmp42=()\n  local -a tmp43=()\n  local -a tmp44=()\n\
    \  local -a tmp45=()\n  local -a tmp46=()\n  local -a tmp47=()\n  local -a tmp48=()\n\
    \  local -a tmp49=()\n  local -a tmp50=()\n  local -a tmp51=()\n  local -a tmp52=()\n\
    \  local -a tmp53=()\n  local -a tmp54=()\n  local -a \n}\n\ncandidate() {\n \
    \   can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9pan32dt.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -n max=$2\n    local -n idx=0\n\
    \    local -n maxidx=0\n    local -n maxval=$max\n    local -n maxvalidx=0\n \
    \   local -n maxvalidx2=0\n    local -n maxvalidx3=0\n    local -n maxvalidx4=0\n\
    \    local -n maxvalidx5=0\n    local -n maxvalidx6=0\n    local -n maxvalidx7=0\n\
    \    local -n maxvalidx8=0\n    local -n maxvalidx9=0\n    local -n maxvalidx10=0\n\
    \    local -n maxvalidx11=0\n    local -n maxvalidx12=0\n    local -n maxvalidx13=0\n\
    \    local -n maxvalidx14=0\n    local -n maxvalidx15=0\n    local -n maxvalidx16=0\n\
    \    local -n maxvalidx17=0\n    local -n maxvalidx18=0\n    local -n maxvalidx19=0\n\
    \    local -n maxvalidx20=0\n    local -n maxvalidx21=0\n    local -n maxvalidx22=0\n\
    \    local -n maxvalidx23=0\n    local -n maxvalidx24=0\n    local -n maxvalidx25=0\n\
    \    local -n maxvalidx26=0\n    local -n maxvalidx27=0\n    local -n maxvalidx28=0\n\
    \    local -n maxvalidx29=0\n    local -n maxvalidx30=0\n    local -n maxvalidx31=0\n\
    \    local -n maxvalidx32=0\n    local -n maxvalidx33=0\n    local -n maxvalidx34=0\n\
    \    local -n maxvalidx35=0\n    local -n maxvalidx36=0\n    local -n maxvalidx37=0\n\
    \    local -n maxvalidx38=0\n    local -n maxvalidx39=0\n    local -n maxvalidx40=0\n\
    \    local -n maxvalidx41=0\n    local -n maxvalidx42=0\n    local -n maxvalidx43=0\n\
    \    local -n maxvalidx44=0\n    local -n maxvalidx45=0\n    local -n maxvalidx46=0\n\
    \    local -n maxvalidx47=0\n    local -\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn78bpo9h.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpn78bpo9h.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpn78bpo9h.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpn78bpo9h.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmpn78bpo9h.sh: line 38: local: `0'': invalid variable name for name reference

    /tm'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -n max=$2\n    local -n last=$3\n\
    \    local -n i\n    local -n j\n    local -n len=${#arr[@]}\n    local -n maxlen=${#max}\n\
    \    local -n maxidx=0\n    local -n maxval=${max[maxidx]}\n    local -n maxidx2=0\n\
    \    local -n maxval2=${max[maxidx2]}\n    local -n maxidx3=0\n    local -n maxval3=${max[maxidx3]}\n\
    \    local -n maxidx4=0\n    local -n maxval4=${max[maxidx4]}\n    local -n maxidx5=0\n\
    \    local -n maxval5=${max[maxidx5]}\n    local -n maxidx6=0\n    local -n maxval6=${max[maxidx6]}\n\
    \    local -n maxidx7=0\n    local -n maxval7=${max[maxidx7]}\n    local -n maxidx8=0\n\
    \    local -n maxval8=${max[maxidx8]}\n    local -n maxidx9=0\n    local -n maxval9=${max[maxidx9]}\n\
    \    local -n maxidx10=0\n    local -n maxval10=${max[maxidx10]}\n    local -n\
    \ maxidx11=0\n    local -n maxval11=${max[maxidx11]}\n    local -n maxidx12=0\n\
    \    local -n maxval12=${max[maxidx12]}\n    local -n maxidx13=0\n    local -n\
    \ maxval13=${max[maxidx13]}\n    local -n maxidx14=0\n    local -n maxval14=${max[maxidx14]}\n\
    \    local -n maxidx15=0\n    local -n maxval15=${max[maxidx15]}\n    local -n\
    \ maxidx16=0\n    local -n maxval16=${max[maxidx16]}\n    local -n maxidx17=0\n\
    \    local -n maxval17=${max[maxidx17]}\n    local -n maxidx18=0\n    local -n\
    \ maxval18=${max[maxidx18]}\n    local -n maxidx19=0\n    local -n maxval19=${max[maxidx19]}\n\
    \    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4887d699.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp4887d699.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 24: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 26: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 28: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 30: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 32: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 34: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 36: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 38: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 39: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 40: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 41: local: `0'': invalid variable name for name reference

    /tmp/tmp4887d699.sh: line 42: local: `'': not a valid identifier

    /tmp/tmp4887d699.sh: line 43: local: `0'': inva'
  stdout: ''
  timestamp: 1660044088
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]}\
    \ - 1))\n  local -n j=$((${#arr[@]} - 1))\n  local -n maxi=$((${#max[@]} - 1))\n\
    \  local -n maxj=$((${#max[@]} - 1))\n  local -n maxval=$((${#max[@]} - 1))\n\
    \  local -n maxvalj=$((${#max[@]} - 1))\n  local -n maxvali=$((${#max[@]} - 1))\n\
    \  local -n maxvalji=$((${#max[@]} - 1))\n  local -n maxvaljij=$((${#max[@]} -\
    \ 1))\n  local -n maxvaljiji=$((${#max[@]} - 1))\n  local -n maxvaljijij=$((${#max[@]}\
    \ - 1))\n  local -n maxvaljijiji=$((${#max[@]} - 1))\n  local -n maxvaljijijij=$((${#max[@]}\
    \ - 1))\n  local -n maxvaljijijiji=$((${#max[@]} - 1))\n  local -n maxvaljijijijij=$((${#max[@]}\
    \ - 1))\n  local -n maxvaljijijijiji=$((${#max[@]} - 1))\n  local -n maxvaljijijijijij=$((${#max[@]}\
    \ - 1))\n  local -n maxvaljijijijijiji=$((${#max[@]} - 1))\n  local -n maxvaljijijijijijij=$((${#max[@]}\
    \ - 1))\n  local -n maxvaljijijijijijiji=$((${#max[@]} - 1))\n  local -n maxvaljijijijijijijij=$((${#max[@]}\
    \ - 1))\n  local -n maxvaljijijijijijijiji=$((${#max[@]} - 1))\n  local -n maxvaljijijijijijijijij=$((${#max[@]}\
    \ - 1))\n  local -n maxvaljijijijijijijijiji=$((${#max[@]} - 1))\n  local -n maxvaljijijijijijijijijij=$((${#max[@\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgka5q_g1.sh: line 40: unexpected EOF while looking for matching
    `)''

    /tmp/tmpgka5q_g1.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -n max=$2\n\
    \  local -n cur=$3\n  local -n prev=$4\n  local -n maxidx=$5\n  local -n maxval=$6\n\
    \  local -n idx=0\n  local -n val=0\n  local -n maxidxidx=0\n  local -n maxvalidx=0\n\
    \  local -n maxidxval=0\n  local -n maxvalval=0\n  local -n maxidxidxidx=0\n \
    \ local -n maxvalidxidx=0\n  local -n maxidxvalidx=0\n  local -n maxvalvalidx=0\n\
    \  local -n maxidxidxval=0\n  local -n maxvalidxval=0\n  local -n maxidxvalval=0\n\
    \  local -n maxvalvalval=0\n  local -n maxidxidxidxidx=0\n  local -n maxvalidxidxidx=0\n\
    \  local -n maxidxvalidxidx=0\n  local -n maxvalvalidxidx=0\n  local -n maxidxidxvalidx=0\n\
    \  local -n maxvalidxvalidx=0\n  local -n maxvalvalidxidx=0\n  local -n maxidxvalvalidx=0\n\
    \  local -n maxvalvalvalidx=0\n  local -n maxidxidxidxval=0\n  local -n maxvalidxidxval=0\n\
    \  local -n maxidxvalidxval=0\n  local -n maxvalvalidxval=0\n  local -n maxidxidxvalval=0\n\
    \  local -n maxvalvalvalidx=0\n  local -n maxidxidxidxidxval=0\n  local -n maxvalidxidxidxval=0\n\
    \  local -n maxidxvalidxval=0\n  local -n maxvalvalidxval=0\n  local -n maxidxidxvalval=0\n\
    \  local -n maxvalvalvalidx=0\n  local -n maxidxidxidxidxval=0\n  local -n maxvalidxidxidxval=0\n\
    \  local -n maxidxvalidxval=0\n  local -n maxvalvalidxval=0\n  local -n maxidxidxvalval=0\n\
    \  local -n maxvalvalvalidx=0\n  local -n maxidxidxidxidxval=0\n  local -n maxvalidxidxidxval\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp13majn4p.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp13majn4p.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp13majn4p.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp13majn4p.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp13majn4p.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp13majn4p.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp13majn4p.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 38: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 39: local: `0'': invalid variable name for name reference

    /tmp/tmp13majn4p.sh: line 40: local: `0'': invalid variable n'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]}\
    \ - 1))\n  local -n j=$((${#arr[@]} - 1))\n  local -n maxIndex=$((${#arr[@]} -\
    \ 1))\n  local -n maxVal=$((${#arr[@]} - 1))\n\n  while (( ${#arr[@]} > 0 ));\
    \ do\n    local -n val=${arr[i]}\n    local -n valPrev=${arr[j]}\n    if (( val\
    \ > valPrev )); then\n      maxIndex=$i\n      maxVal=$val\n      (( i = j - 1\
    \ ))\n    else\n      (( j = i - 1 ))\n    fi\n  done\n\n  echo \"${maxIndex}\"\
    \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdmy1hyzl.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpdmy1hyzl.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpdmy1hyzl.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmpdmy1hyzl.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmpdmy1hyzl.sh: line 18: local: `-1'': invalid variable name for name reference

    /tmp/tmpdmy1hyzl.sh: line 19: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local max=$2\n  local index=0\n  local\
    \ element\n  local count\n\n  while IFS= read -r element; do\n    ((count++))\n\
    \    if [[ $element -gt $max ]]; then\n      max=$element\n      index=$count\n\
    \    fi\n  done <<< \"$array\"\n\n  if [[ $index -eq 0 ]]; then\n    return -1\n\
    \  fi\n\n  echo \"$index\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnpzjscn2.sh: line 22: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local max=$2\n    local i\n    local\
    \ j\n    local len\n\n    len=${#arr[@]}\n    for ((i=1; i<len; i++)); do\n  \
    \      if (( ${arr[i]} <= max )); then\n            max=${arr[i]}\n          \
    \  j=$i\n        fi\n    done\n    if [ $j -eq $i ]; then\n        echo \"$i\"\
    \n    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_wfxcr4i.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp_wfxcr4i.sh: line 27: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  local -n elem\n  for i in $(seq 0 $max); do\n    elem=${arr[$i]}\n \
    \   if [[ ${elem} -gt $(( ${arr[$(( $i - 1 ))]} + 1 )) ]]; then\n      max=$i\n\
    \    fi\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpib8ftipb.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  while [ $index -lt ${#array} ]; do\n    if [[ ${array[$index]}\
    \ -gt ${array[$maxIndex]} ]]; then\n      maxIndex=$index\n      max=$array[$index]\n\
    \    fi\n    ((index++))\n  done\n  if [[ ${maxIndex} -eq 0 ]]; then\n    echo\
    \ \"-1\"\n  else\n    echo \"${maxIndex}\"\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    /tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmpujxvk9r4.sh: line 19: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -a arranged_sorted\n\
    \  local -a arranged_sorted2\n  local -a arranged_sorted3\n  local -a arranged_sorted4\n\
    \  local -a arranged_sorted5\n  local -a arranged_sorted6\n  local -a arranged_sorted7\n\
    \  local -a arranged_sorted8\n  local -a arranged_sorted9\n  local -a arranged_sorted10\n\
    \  local -a arranged_sorted11\n  local -a arranged_sorted12\n  local -a arranged_sorted13\n\
    \  local -a arranged_sorted14\n  local -a arranged_sorted15\n  local -a arranged_sorted16\n\
    \  local -a arranged_sorted17\n  local -a arranged_sorted18\n  local -a arranged_sorted19\n\
    \  local -a arranged_sorted20\n  local -a arranged_sorted21\n  local -a arranged_sorted22\n\
    \  local -a arranged_sorted23\n  local -a arranged_sorted24\n  local -a arranged_sorted25\n\
    \  local -a arranged_sorted26\n  local -a arranged_sorted27\n  local -a arranged_sorted28\n\
    \  local -a arranged_sorted29\n  local -a arranged_sorted30\n  local -a arranged_sorted31\n\
    \  local -a arranged_sorted32\n  local -a arranged_sorted33\n  local -a arranged_sorted34\n\
    \  local -a arranged_sorted35\n  local -a arranged_sorted36\n  local -a arranged_sorted37\n\
    \  local -a arranged_sorted38\n  local -a arranged_sorted39\n  local -a arranged_sorted40\n\
    \  local -a arranged_sorted41\n  local -a arranged_sorted42\n  local -a arranged_sorted43\n\
    \  local -a arranged_sorted44\n  local -a arranged_sorted45\n  local -a arranged_sorted46\n\
    \  local -a arranged_sorted47\n  local -a arranged_sorted48\n  local -a arranged_sorted49\n\
    \  local -a arrange\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1ie8iqh1.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( $1 )\n  local max=$(( ${#arr[@]} - 1 ))\n  local\
    \ i\n  for i in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$(( i + 1 ))]}\
    \ ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n  \
    \  can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -n max=$2\n    local -n i=$((\
    \ ${#arr[@]} - 1 ))\n    local -n j=$(( ${#arr[@]} - 1 ))\n    local -n maxIndex=$((\
    \ ${#arr[@]} - 1 ))\n    while (( ${#arr[@]} > 0 )); do\n        if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n            (( maxIndex = $i ))\n        fi\n      \
    \  (( i = $(( i + 1 )) ))\n        (( j = $(( j - 1 )) ))\n    done\n    echo\
    \ ${maxIndex}\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp32_6t0_z.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp32_6t0_z.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp32_6t0_z.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmp32_6t0_z.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmp32_6t0_z.sh: line 18: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local current\n\n  while read -r current; do\n    if [ \"$current\"\
    \ -gt \"$max\" ]; then\n      max=\"$current\"\n      maxIndex=\"$index\"\n  \
    \  fi\n    ((index++))\n  done <<< \"$array\"\n\n  if [ \"$max\" -eq \"$maxIndex\"\
    \ ]; then\n    return -1\n  else\n    return \"$maxIndex\"\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphig3kdxm.sh: line 21: [: 1 2 4 3 5: integer expression expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -a result=()\n\
    \  local -i i\n  local max\n  local index\n  local value\n\n  for i in \"${!arr[@]}\"\
    ; do\n    value=${arr[i]}\n    sorted+=(\"$value\")\n  done\n\n  sorted=(\"${sorted[@]}\"\
    \ | sort -n)\n\n  for i in \"${!sorted[@]}\"; do\n    value=${sorted[i]}\n   \
    \ index=$(expr \"$i\" \"$((i + 1))\")\n    if [ \"$value\" -gt \"$((sorted[index\
    \ - 1]))\" ]; then\n      max=$i\n    fi\n  done\n\n  if [ \"$max\" -eq 0 ]; then\n\
    \    return -1\n  else\n    echo ${sorted[$max]}\n  fi\n}\n\ncandidate() {\n \
    \   can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpixziev_e.sh: line 27: syntax error near unexpected token `|''

    /tmp/tmpixziev_e.sh: line 27: `  sorted=("${sorted[@]}" | sort -n)''

    /tmp/tmpixziev_e.sh: line 37: [: : integer expression expected

    /tmp/tmpixziev_e.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmpixziev_e.sh: line 42: `}''

    '
  stdout: '

    '
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]}\
    \ - 1))\n  local -n j=$((${#arr[@]} - 1))\n  local -n maxi=$((${#max[@]} - 1))\n\
    \  local -n maxj=$((${#max[@]} - 1))\n  local -n maxval=$((${#max[@]} - 1))\n\
    \  local -n maxvali=$((${#maxval[@]} - 1))\n  local -n maxvalj=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalk=$((${#maxval[@]} - 1))\n  local -n maxvall=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalm=$((${#maxval[@]} - 1))\n  local -n maxvaln=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalo=$((${#maxval[@]} - 1))\n  local -n maxvalp=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalq=$((${#maxval[@]} - 1))\n  local -n maxvalr=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvals=$((${#maxval[@]} - 1))\n  local -n maxvalt=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalu=$((${#maxval[@]} - 1))\n  local -n maxvalv=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalw=$((${#maxval[@]} - 1))\n  local -n maxvalx=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvaly=$((${#maxval[@]} - 1))\n  local -n maxvalz=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalaa=$((${#maxval[@]} - 1))\n  local -n maxvalab=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalac=$((${#maxval[@]} - 1))\n  local -n maxvalad=$((${#maxval[@]}\
    \ - 1))\n  local -n maxvalae=$((${#maxval[@]} - 1))\n  local -n \n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6j7mx1mn.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp6j7mx1mn.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp6j7mx1mn.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 18: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 19: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 20: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 21: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 22: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 23: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 24: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 25: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 26: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 27: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 28: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 29: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 30: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 31: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 32: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 33: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 34: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 35: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 36: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 37: local: `-1'': invalid variable name for name reference

    /tmp/tmp6j7mx1mn.sh: line 38: local: `-1'': in'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( $1 )\n  local max=$(( ${#arr[@]} - 1 ))\n  local\
    \ maxIndex=$(( ${#arr[@]} - 1 ))\n  local i\n  for i in $(seq 0 $(( ${#arr[@]}\
    \ - 1 ))); do\n    if [[ ${arr[$i]} -gt ${arr[$maxIndex]} ]]; then\n      maxIndex=$i\n\
    \    fi\n  done\n  if [[ $maxIndex -eq 0 ]]; then\n    echo \"-1\"\n  else\n \
    \   echo \"$maxIndex\"\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n\
    \    local -i i\n    local j\n    for (( i = 1; i < ${#arr[@]}; i++ )); do\n \
    \       for (( j = ( i + 1 ); j < ${#arr[@]}; j++ )); do\n            if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]; then\n                max=$(expr ${max} + 1)\n          \
    \  fi\n        done\n    done\n    echo \"${max}\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_h50g446.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -n max=$2\n    local -i maxidx=0\n\
    \    local -i idx=0\n    local -i len=${#arr[@]}\n    local -i maxlen=${#max}\n\
    \    local -i maxval=${max}\n    local -i maxidx1=0\n    local -i maxidx2=0\n\
    \    local -i maxidx3=0\n    local -i maxidx4=0\n    local -i maxidx5=0\n    local\
    \ -i maxidx6=0\n    local -i maxidx7=0\n    local -i maxidx8=0\n    local -i maxidx9=0\n\
    \    local -i maxidx10=0\n    local -i maxidx11=0\n    local -i maxidx12=0\n \
    \   local -i maxidx13=0\n    local -i maxidx14=0\n    local -i maxidx15=0\n  \
    \  local -i maxidx16=0\n    local -i maxidx17=0\n    local -i maxidx18=0\n   \
    \ local -i maxidx19=0\n    local -i maxidx20=0\n    local -i maxidx21=0\n    local\
    \ -i maxidx22=0\n    local -i maxidx23=0\n    local -i maxidx24=0\n    local -i\
    \ maxidx25=0\n    local -i maxidx26=0\n    local -i maxidx27=0\n    local -i maxidx28=0\n\
    \    local -i maxidx29=0\n    local -i maxidx30=0\n    local -i maxidx31=0\n \
    \   local -i maxidx32=0\n    local -i maxidx33=0\n    local -i maxidx34=0\n  \
    \  local -i maxidx35=0\n    local -i maxidx36=0\n    local -i maxidx37=0\n   \
    \ local -i maxidx38=0\n    local -i maxidx39=0\n    local -i maxidx40=0\n    local\
    \ -i maxidx41=0\n    local -i maxidx42=0\n    local -i maxidx43=0\n    local -i\
    \ maxidx44=0\n    local -i maxidx45=0\n    local -i maxidx46=0\n    local -i maxidx47=0\n\
    \    local -i maxidx48=0\n    local -i maxidx49=0\n    local -i maxidx50=0\n \
    \   local -i maxidx51=0\n    local -i maxidx52=0\n    local -i maxidx53=0\n  \
    \  local -i maxidx54=0\n    local -i maxidx55=0\n    local -i maxidx56=0\n   \
    \ local -i maxidx57\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv3s3c6wx.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpv3s3c6wx.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n      max=$(( i + 1 ))\n    fi\n  done\n  if [[ $max\
    \ -eq 0 ]]; then\n    return -1\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxnkpinx4.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local arr=( \"$1\" )\n    local max=$(( ${#arr[@]} - 1 ))\n\
    \    local i\n    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[$i]} -gt\
    \ ${arr[$(( i - 1 ))]} ]]; then\n            max=i\n        fi\n    done\n   \
    \ echo \"$max\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=0\n  local\
    \ -n maxidx=0\n  local -n maxval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalidx=0\n\
    \  local -n maxvalval=$(( ${#maxval} - 1 ))\n  local -n maxvalvalidx=0\n  local\
    \ -n maxvalvalval=$(( ${#maxvalval} - 1 ))\n  local -n maxvalvalvalidx=0\n  local\
    \ -n maxvalvalvalval=$(( ${#maxvalvalval} - 1 ))\n  local -n maxvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalval=$(( ${#maxvalvalvalval} - 1 ))\n  local -n maxvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalval=$(( ${#maxvalvalvalvalval} - 1 ))\n  local -n\
    \ maxvalvalvalvalvalvalidx=0\n  local -n maxvalvalvalvalvalvalval=$(( ${#maxvalvalvalvalvalval}\
    \ - 1 ))\n  local -n maxvalvalvalvalvalvalvalidx=0\n  local -n maxvalvalvalvalvalvalvalval=$((\
    \ ${#maxvalvalvalvalvalvalval} - 1 ))\n  local -n maxvalvalvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalvalvalvalval=$(( ${#maxvalvalvalvalvalvalvalvalval}\
    \ - 1 ))\n  local -n maxvalvalvalvalvalvalvalvalvalidx=0\n  local -n maxvalvalvalvalvalvalvalvalvalval=$((\
    \ ${#maxvalvalvalvalvalvalvalvalvalval} - 1 ))\n  local -n maxvalvalvalvalvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalvalvalvalvalval=$(( ${#maxvalvalvalvalvalvalvalvalvalvalval}\
    \ - 1 ))\n  local -n maxvalvalvalvalvalvalvalvalvalvalidx=0\n  local -n maxvalvalvalvalvalvalvalvalvalvalval=$((\
    \ ${#maxvalvalvalvalvalvalvalvalvalvalval} - 1 ))\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplo42vgln.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmplo42vgln.sh: line 15: local: `'': not a valid identifier

    /tmp/tmplo42vgln.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 18: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 20: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 22: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 24: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 26: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 28: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 30: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 32: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 34: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 36: local: `-1'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmplo42vgln.sh: line 38: local: `-1'': invalid variab'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  local element\n  while (( index < max )); do\n    element=\"${array[index]}\"\
    \n    if [[ ${array[index-1]} -gt ${element} ]]; then\n      index=$(( index +\
    \ 1 ))\n    else\n      break\n    fi\n  done\n  echo \"${index}\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp84cacem2.sh: line 20: array: bad array subscript

    /tmp/tmp84cacem2.sh: line 20: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n\
    \  local -n idx=$4\n  local -n val=$5\n  local -n idx2=$6\n  local -n val2=$7\n\
    \  local -n idx3=$8\n  local -n val3=$9\n  local -n idx4=$10\n  local -n val4=$11\n\
    \  local -n idx5=$12\n  local -n val5=$13\n  local -n idx6=$14\n  local -n val6=$15\n\
    \  local -n idx7=$16\n  local -n val7=$17\n  local -n idx8=$18\n  local -n val8=$19\n\
    \  local -n idx9=$20\n  local -n val9=$21\n  local -n idx10=$22\n  local -n val10=$23\n\
    \  local -n idx11=$24\n  local -n val11=$25\n  local -n idx12=$26\n  local -n\
    \ val12=$27\n  local -n idx13=$28\n  local -n val13=$29\n  local -n idx14=$30\n\
    \  local -n val14=$31\n  local -n idx15=$32\n  local -n val15=$33\n  local -n\
    \ idx16=$34\n  local -n val16=$35\n  local -n idx17=$36\n  local -n val17=$37\n\
    \  local -n idx18=$38\n  local -n val18=$39\n  local -n idx19=$40\n  local -n\
    \ val19=$41\n  local -n idx20=$42\n  local -n val20=$43\n  local -n idx21=$44\n\
    \  local -n val21=$45\n  local -n idx22=$46\n  local -n val22=$47\n  local -n\
    \ idx23=$48\n  local -n val23=$49\n  local -n idx24=$50\n  local -n val24=$51\n\
    \  local -n idx25=$52\n  local -n val25=$53\n  local -n idx26=$54\n  local -n\
    \ val26=$55\n  local -n idx27=$56\n  local -n val27=$57\n  local -\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0tlrv91c.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp0tlrv91c.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp0tlrv91c.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp0tlrv91c.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp0tlrv91c.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp0tlrv91c.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp0tlrv91c.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp0tlrv91c.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp0tlrv91c.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp0tlrv91c.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp0tlrv91c.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmp0tlrv91c.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmp0tlrv91c.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmp0tlrv91c.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmp0tlrv91c.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmp0tlrv91c.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmp0tlrv91c.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -i max=0\n \
    \ local -i i\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    local val=${arr[i]}\n\
    \    sorted+=(\"$val\")\n  done\n\n  sorted=($(sort -n <<<\"${sorted[@]}\"))\n\
    \  max=$((${sorted[0]} + 1))\n\n  for (( i=0; i<${#sorted[@]}; i++ )); do\n  \
    \  local val=${sorted[i]}\n    if [[ $val -gt $max ]]; then\n      max=$val\n\
    \    fi\n  done\n\n  if [[ $max -eq 0 ]]; then\n    return -1\n  fi\n\n  echo\
    \ ${max}\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprc6xa63m.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local element\n  while IFS= read -r element; do\n    if [[ \"\
    $element\" -gt \"$max\" ]]; then\n      max=$element\n      maxIndex=$index\n\
    \    fi\n    ((index++))\n  done\n  if [[ \"$max\" -gt \"$maxIndex\" ]]; then\n\
    \    return -1\n  else\n    return $maxIndex\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=16 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660044093
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -i max=0\n \
    \ local -i i\n  local -a candidates=()\n  local -a candidate\n  local -a candidates\n\
    \  local -a candidate\n  local -a candidates\n  local -a candidate\n  local -a\
    \ candidates\n  local -a candidate\n  local -a candidates\n  local -a candidate\n\
    \  local -a candidates\n  local -a candidate\n  local -a candidates\n  local -a\
    \ candidate\n  local -a candidates\n  local -a candidate\n  local -a candidates\n\
    \  local -a candidate\n  local -a candidates\n  local -a candidate\n  local -a\
    \ candidates\n  local -a candidate\n  local -a candidates\n  local -a candidate\n\
    \  local -a candidates\n  local -a candidate\n  local -a candidates\n  local -a\
    \ candidate\n  local -a candidates\n  local -a candidate\n  local -a candidates\n\
    \  local -a candidate\n  local -a candidates\n  local -a candidate\n  local -a\
    \ candidates\n  local -a candidate\n  local -a candidates\n  local -a candidate\n\
    \  local -a candidates\n  local -a candidate\n  local -a candidates\n  local -a\
    \ candidate\n  local -a candidates\n  local -a candidate\n  local -a candidates\n\
    \  local -a candidate\n  local -a candidates\n  local -a candidate\n  local -a\
    \ candidates\n  local -a candidate\n  local -a candidates\n  local -a candidate\n\
    \  local -a candidates\n  local -a candidate\n  local -a candidates\n  local -a\
    \ candidate\n  local -a candidates\n  local -a candidate\n  local -a candidates\n\
    \  local -a candidate\n  local -a candidates\n  local -a candidate\n  local -a\
    \ candidates\n  local -a candidate\n  local -a candidates\n  local -a candidate\n\
    \  local -a candidates\n  local -a candidate\n  local -a candidates\n  local -a\
    \ candidate\n  local -a candidates\n  local -a candidate\n  local -a candidates\n\
    \  local -a candidate\n  local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6yu3_75s.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=0\n  local\
    \ -n maxidx=0\n  local -n maxval=$max\n  local -n val=$maxval\n  local -n idx2=$idx\n\
    \  local -n val2=$val\n  local -n maxidx2=$maxidx\n  local -n maxval2=$maxval\n\
    \  local -n idx3=$idx\n  local -n val3=$val\n  local -n maxidx3=$maxidx\n  local\
    \ -n maxval3=$maxval\n  local -n idx4=$idx\n  local -n val4=$val\n  local -n maxidx4=$maxidx\n\
    \  local -n maxval4=$maxval\n  local -n idx5=$idx\n  local -n val5=$val\n  local\
    \ -n maxidx5=$maxidx\n  local -n maxval5=$maxval\n  local -n idx6=$idx\n  local\
    \ -n val6=$val\n  local -n maxidx6=$maxidx\n  local -n maxval6=$maxval\n  local\
    \ -n idx7=$idx\n  local -n val7=$val\n  local -n maxidx7=$maxidx\n  local -n maxval7=$maxval\n\
    \  local -n idx8=$idx\n  local -n val8=$val\n  local -n maxidx8=$maxidx\n  local\
    \ -n maxval8=$maxval\n  local -n idx9=$idx\n  local -n val9=$val\n  local -n maxidx9=$maxidx\n\
    \  local -n maxval9=$maxval\n  local -n idx10=$idx\n  local -n val10=$val\n  local\
    \ -n maxidx10=$maxidx\n  local -n maxval10=$maxval\n  local -n idx11=$idx\n  local\
    \ -n val11=$val\n  local -n maxidx11=$maxidx\n  local -n maxval11=$maxval\n  local\
    \ -n idx12=$idx\n  local -n val12=$val\n  local -n maxidx12=$maxidx\n  local -n\
    \ maxval12=$maxval\n  local -n idx13=$idx\n  local -n val13=$val\n  local -n max\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt3hudni9.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpt3hudni9.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmpt3hudni9.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpt3hudni9.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 31: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 40: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 41: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 42: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 43: local: `'': not a valid identifier

    /tmp/tmpt3hudni9.sh: line 44: local: `'': not a valid identifier'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 1\
    \ $((${#arr[@]} - 1))); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n\
    \    fi\n  done\n  if [[ ${max} -eq ${arr[$((${#arr[@]} - 1))} ]]; then\n    return\
    \ -1\n  else\n    return $((${#arr[@]} - 1))\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqqnzugo_.sh: line 22: ${arr[$((${#arr[@]} - 1))}: bad substitution

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n j=$(( ${#arr[@]} - 1 ))\n  local -n maxIndex=$(( ${#max[@]}\
    \ - 1 ))\n  local -n maxVal=${max[maxIndex]}\n  while (( ${#arr[@]} > 0 )); do\n\
    \    if (( ${arr[i]} <= ${maxVal} )); then\n      maxIndex=$i\n      maxVal=${arr[i]}\n\
    \      (( i++ ))\n    else\n      (( j-- ))\n      (( i-- ))\n    fi\n  done\n\
    \  echo $maxIndex\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt8md7gm5.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpt8md7gm5.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpt8md7gm5.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmpt8md7gm5.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmpt8md7gm5.sh: line 18: local: `-1'': invalid variable name for name reference

    /tmp/tmpt8md7gm5.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  local element\n  while (( index < max )); do\n    element=\"${array[index]}\"\
    \n    local next=$(( index + 1 ))\n    while (( next < max )); do\n      if [[\
    \ ${array[$next]} -gt ${element} ]]; then\n        next=$(( next + 1 ))\n    \
    \  else\n        break\n      fi\n    done\n    if [[ ${next} -eq ${max} ]]; then\n\
    \      break\n    fi\n    index=${next}\n  done\n  echo \"${index}\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5nv_voim.sh: line 22: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=0\n\
    \    local maxIndex=0\n    local element\n\n    for element in $array; do\n  \
    \      if [ \"$element\" -gt \"$max\" ]; then\n            max=$(expr \"$element\"\
    \ \"$max\")\n            maxIndex=$index\n        fi\n        index=$(expr \"\
    $index\" + 1)\n    done\n\n    if [ \"$maxIndex\" -eq \"$index\" ]; then\n   \
    \     echo \"-1\"\n    else\n        echo \"$maxIndex\"\n    fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20180\u2019\n/tmp/tmphkvnlca9.sh:\
    \ line 21: [: : integer expression expected\n/tmp/tmphkvnlca9.sh: line 21: [:\
    \ : integer expression expected\n/tmp/tmphkvnlca9.sh: line 21: [: : integer expression\
    \ expected\n/tmp/tmphkvnlca9.sh: line 21: [: : integer expression expected\n"
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index\n    local max\n    local\
    \ maxIndex\n    local value\n    local valueIndex\n    local valueLength\n   \
    \ local valueLengthMax\n    local valueLengthMaxIndex\n    local valueLengthMaxIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndex\n    local valueLengthMaxIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndex\n    local valueLengthMaxIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndex\n    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndex\n    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex\n    local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n    local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n    local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n    local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n    local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n    local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n    local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n    local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    local valueLengthMaxIndexIndexIndexIndexIndex\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n      max=$i\n    fi\n  done\n  if [[ $max -eq 0 ]];\
    \ then\n    return -1\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n \
    \   can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqwe90yyo.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local element\n  while IFS= read -r element; do\n    if [[ ${array:$index:1}\
    \ = ${element} ]]; then\n      ((index++))\n    else\n      if ((index > maxIndex));\
    \ then\n        maxIndex=$index\n        max=$element\n      fi\n      index=0\n\
    \    fi\n  done < <(echo \"$array\")\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=$1\n  local max=$2\n  local index\n  local i\n\n\
    \  for i in ${arr[@]}; do\n    if [[ ${i} -gt ${max} ]]; then\n      max=$i\n\
    \    fi\n  done\n\n  if [[ ${max} -eq ${arr[0]} ]]; then\n    return -1\n  fi\n\
    \n  for i in ${arr[@]}; do\n    if [[ ${i} -eq ${max} ]]; then\n      index=$(expr\
    \ ${i} - 1)\n      break\n    fi\n  done\n\n  echo ${index}\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5cpbexcy.sh: line 25: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n prev=$5\n  local -n i\n\n  for i in \"${arr[@]}\"; do\n\
    \    if [[ $i -gt $prev ]]; then\n      idx=$i\n      val=$i\n      prev=$i\n\
    \    elif [[ $i -eq $prev ]]; then\n      idx=$i\n      val=$i\n      prev=$i\n\
    \    elif [[ $i -le $prev ]]; then\n      idx=$i\n      val=$i\n      prev=$i\n\
    \    fi\n  done\n\n  if [[ $idx -eq -1 ]]; then\n    echo \"-1\"\n  else\n   \
    \ echo \"$idx\"\n  fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp890rmpzt.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp890rmpzt.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp890rmpzt.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp890rmpzt.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp890rmpzt.sh: line 18: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local element\n\n  while IFS= read -r element; do\n    if [ \"\
    $element\" -gt \"$max\" ]; then\n      max=\"$element\"\n      maxIndex=\"$index\"\
    \n    fi\n    ((index++))\n  done <<< \"$array\"\n\n  if [ \"$maxIndex\" -eq \"\
    $index\" ]; then\n    return -1\n  else\n    echo \"$maxIndex\"\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdpugc7jv.sh: line 21: [: 1 2 4 3 5: integer expression expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local element\n  while read element; do\n    if [ \"$element\"\
    \ -gt \"$max\" ]; then\n      max=\"$element\"\n      maxIndex=\"$index\"\n  \
    \  fi\n    ((index++))\n  done <<< \"$array\"\n  if [ \"$maxIndex\" -eq \"$index\"\
    \ ]; then\n    return -1\n  else\n    echo \"$maxIndex\"\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpeba9yk5k.sh: line 20: [: 1 2 4 3 5: integer expression expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n  local idx\n\
    \  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n  local\
    \ idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n\
    \  local idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local\
    \ val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n\
    \  local val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n  local\
    \ maxval\n  local val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n\
    \  local maxval\n  local val\n  local idx\n  local len\n  local maxlen\n  local\
    \ maxidx\n  local maxval\n  local val\n  local idx\n  local len\n  local maxlen\n\
    \  local maxidx\n  local maxval\n  local val\n  local idx\n  local len\n  local\
    \ maxlen\n  local maxidx\n  local maxval\n  local val\n  local idx\n  local len\n\
    \  local maxlen\n  local maxidx\n  local maxval\n  local val\n  local idx\n  local\
    \ len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n  local idx\n\
    \  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n  local\
    \ idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n\
    \  local idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local\
    \ val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n\
    \  local val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n  local\
    \ maxval\n  local val\n  local idx\n  local len\n  local maxlen\n  local maxidx\n\
    \  local maxval\n  local val\n  local idx\n  local len\n\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_xb2m7s8.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n maxi\n  local -n maxj\n  local -n maxval\n  local\
    \ -n maxvali\n  local -n maxvalj\n  local -n maxvalk\n  local -n maxvall\n  local\
    \ -n maxvalm\n  local -n maxvaln\n  local -n maxvalo\n  local -n maxvalp\n  local\
    \ -n maxvalq\n  local -n maxvalr\n  local -n maxvals\n  local -n maxvalt\n  local\
    \ -n maxvalu\n  local -n maxvalv\n  local -n maxvalw\n  local -n maxvalx\n  local\
    \ -n maxvaly\n  local -n maxvalz\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -n maxval\n  local\
    \ -n maxval\n  local -n maxval\n  local -n maxval\n  local -\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprujcl8w0.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmprujcl8w0.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    local val=${arr[$i]}\n\
    \    arr[$i]=${arr[$j]}\n    arr[$j]=$val\n    if [[ $i -eq $max ]]; then\n  \
    \    max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8ya0vi74.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  while [ \"$index\" -lt \"$max\" ]; do\n    local element=${array[$index]};\n\
    \    local previous=${array[$(( index - 1 ))]}\n    if [ \"$element\" -ge \"$previous\"\
    \ ]; then\n      index=$(( index + 1 ))\n    else\n      index=$(( index + 1 ))\n\
    \      max=$(( index + 1 ))\n    fi\n  done\n  echo \"$index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660044093
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n\
    \    local -i i\n    local j\n    for (( i=1; i<=$max; i++ )); do\n        j=$((\
    \ i - 1 ))\n        if [[ ${arr[j]} -gt ${arr[i]} ]]; then\n            max=i\n\
    \        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptzqajlfr.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index\n  local max\n  local maxIndex\n\
    \  local value\n  local valueIndex\n  local valueLength\n  local valueLengthMax\n\
    \  local valueLengthMaxIndex\n  local valueLengthMaxIndexIndex\n  local valueLengthMaxIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndex\n  local valueLengthMaxIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndex\n  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndex\n  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndex\n  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndex\n  local\
    \ valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \  local valueLengthMaxIndexIndexIndexIndexIndexIndex\n}\n\ncandidate() {\n  \
    \  can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index\n  local max\n  local maxIndex\n\
    \  local value\n  local valueIndex\n  local valueLength\n  local valueLengthIndex\n\
    \  local valueLengthMax\n  local valueLengthMaxIndex\n  local valueLengthMaxValue\n\
    \  local valueLengthMaxValueIndex\n  local valueLengthMaxValueLength\n  local\
    \ valueLengthMaxValueLengthIndex\n  local valueLengthMaxValueLengthMax\n  local\
    \ valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    \  local valueLengthMaxValueLengthMaxIndex\n  local valueLengthMaxValueLengthMaxIndex\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=0\n\
    \    local maxIndex=0\n    local current=0\n    local currentIndex=0\n    local\
    \ maxValue=0\n    local maxValueIndex=0\n    local maxValueIndexValue=0\n    local\
    \ maxValueIndexValue2=0\n    local maxValueIndexValue3=0\n    local maxValueIndexValue4=0\n\
    \    local maxValueIndexValue5=0\n    local maxValueIndexValue6=0\n    local maxValueIndexValue7=0\n\
    \    local maxValueIndexValue8=0\n    local maxValueIndexValue9=0\n    local maxValueIndexValue10=0\n\
    \    local maxValueIndexValue11=0\n    local maxValueIndexValue12=0\n    local\
    \ maxValueIndexValue13=0\n    local maxValueIndexValue14=0\n    local maxValueIndexValue15=0\n\
    \    local maxValueIndexValue16=0\n    local maxValueIndexValue17=0\n    local\
    \ maxValueIndexValue18=0\n    local maxValueIndexValue19=0\n    local maxValueIndexValue20=0\n\
    \    local maxValueIndexValue21=0\n    local maxValueIndexValue22=0\n    local\
    \ maxValueIndexValue23=0\n    local maxValueIndexValue24=0\n    local maxValueIndexValue25=0\n\
    \    local maxValueIndexValue26=0\n    local maxValueIndexValue27=0\n    local\
    \ maxValueIndexValue28=0\n    local maxValueIndexValue29=0\n    local maxValueIndexValue30=0\n\
    \    local maxValueIndexValue31=0\n    local maxValueIndexValue32=0\n    local\
    \ maxValueIndexValue33=0\n    local maxValueIndexValue34=0\n    local maxValueIndexValue35=0\n\
    \    local maxValueIndexValue36=0\n    local maxValueIndexValue37=0\n    local\
    \ maxValueIndexValue38=0\n    local maxValueIndexValue39=0\n    local maxValueIndexValue40=0\n\
    \    local maxValueIndexValue41=0\n    local maxValueIndexValue42=0\n    local\
    \ maxValueIndexValue43=0\n    local maxValueIndexValue44=0\n    local maxValueIndexValue45=0\n\
    \    local maxValueIndexValue46=0\n    local maxValueIndexValue47=0\n    local\
    \ maxValueIndexValue48=0\n    local maxValueIndexValue49=0\n    local maxValueIndexValue50=0\n\
    \    local maxValueIndexValue51=0\n    local maxValueIndexValue52=0\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local maxValue=0\n  local value\n  local i\n\n  for i in \"${array[@]}\"\
    ; do\n    value=$i\n    if [[ $i -lt $max ]]; then\n      max=$i\n      maxIndex=$index\n\
    \      maxValue=$value\n    fi\n    ((index++))\n  done\n\n  if [[ $maxIndex -eq\
    \ 0 ]]; then\n    return -1\n  fi\n\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpizjk03jf.sh: line 24: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n maxi\n  local -n maxj\n  local -n maxk\n  local -n maxl\n  local\
    \ -n maxm\n  local -n maxn\n  local -n maxo\n  local -n maxp\n  local -n maxq\n\
    \  local -n maxr\n  local -n maxs\n  local -n maxt\n  local -n maxu\n  local -n\
    \ maxv\n  local -n maxw\n  local -n maxx\n  local -n maxy\n  local -n maxz\n \
    \ local -n maxa\n  local -n maxb\n  local -n maxc\n  local -n maxd\n  local -n\
    \ maxe\n  local -n maxf\n  local -n maxg\n  local -n maxh\n  local -n maxi\n \
    \ local -n maxj\n  local -n maxk\n  local -n maxl\n  local -n maxm\n  local -n\
    \ maxn\n  local -n maxo\n  local -n maxp\n  local -n maxq\n  local -n maxr\n \
    \ local -n maxs\n  local -n maxt\n  local -n maxu\n  local -n maxv\n  local -n\
    \ maxw\n  local -n maxx\n  local -n maxy\n  local -n maxz\n  local -n maxa\n \
    \ local -n maxb\n  local -n maxc\n  local -n maxd\n  local -n maxe\n  local -n\
    \ maxf\n  local -n maxg\n  local -n maxh\n  local -n maxi\n  local -n maxj\n \
    \ local -n maxk\n  local -n maxl\n  local -n maxm\n  local -n maxn\n  local -n\
    \ maxo\n  local -n maxp\n  local -n maxq\n  local -n maxr\n  local -n maxs\n \
    \ local -n maxt\n  local -n maxu\n  local -n maxv\n  local -n maxw\n  local -n\
    \ maxx\n  local -n maxy\n  local -n maxz\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqh1wry6x.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpqh1wry6x.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -n arrange_index=$2\n  local -n\
    \ arrange_prev=$3\n  local -n arrange_next=$4\n  local -n arrange_last=$5\n  local\
    \ -n arrange_last_index=$6\n  local -n arrange_last_prev=$7\n  local -n arrange_last_next=$8\n\
    \  local -n arrange_last_last=$9\n  local -n arrange_last_last_index=$10\n  local\
    \ -n arrange_last_last_prev=$11\n  local -n arrange_last_last_next=$12\n  local\
    \ -n arrange_last_last_last=$13\n  local -n arrange_last_last_last_index=$14\n\
    \  local -n arrange_last_last_last_prev=$15\n  local -n arrange_last_last_last_next=$16\n\
    \  local -n arrange_last_last_last_last=$17\n  local -n arrange_last_last_last_last_index=$18\n\
    \  local -n arrange_last_last_last_last_prev=$19\n  local -n arrange_last_last_last_last_next=$20\n\
    \  local -n arrange_last_last_last_last_last=$21\n  local -n arrange_last_last_last_last_last_index=$22\n\
    \  local -n arrange_last_last_last_last_last_prev=$23\n  local -n arrange_last_last_last_last_last_next=$24\n\
    \  local -n arrange_last_last_last_last_last_last=$25\n  local -n arrange_last_last_last_last_last_last_index=$26\n\
    \  local -n arrange_last_last_last_last_last_last_prev=$27\n  local -n arrange_last_last_last_last_last_last_next=$28\n\
    \  local -n arrange_last_last_last_last_last_last_last=$29\n  local -n arrange_last_last_last_last_last_last_last_index=$30\n\
    \  local -n arrange_last_last_last_last_last_last_last_prev=$31\n  local -n arrange_last_last_last_last_last_last_last_next=$32\n\
    \  local -n arrange_last_last_last_last_last_last_last_last=$33\n  local -n arrange_last_last_last_last_last_last_last_last_index=$34\n\
    \  local -n arrange_last_last_last_last_last_last_last_prev=$35\n  local -n arrange_last_last_last_last_last_last_last_next=$36\n\
    \  local -n arrange_last_last_last_last_last_last_last_last=$37\n  local \n}\n\
    \ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc8vmyrzn.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpc8vmyrzn.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpc8vmyrzn.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpc8vmyrzn.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpc8vmyrzn.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpc8vmyrzn.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpc8vmyrzn.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpc8vmyrzn.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpc8vmyrzn.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpc8vmyrzn.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpc8vmyrzn.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpc8vmyrzn.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpc8vmyrzn.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmpc8vmyrzn.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmpc8vmyrzn.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmpc8vmyrzn.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmpc8vmyrzn.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  local element\n\n  while (( index < max )); do\n    element=${array:$index:1}\n\
    \    if [[ ${array:$(( index + 1 )):1} -gt $element ]]; then\n      max=$index\n\
    \    fi\n    (( index = index + 1 ))\n  done\n\n  if [[ $max -eq 0 ]]; then\n\
    \    return -1\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -a sorted=()\n  local -a candidates=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n\
    \  local -a candidates_sorted=()\n  local -a candidates_sorted=()\n  local -a\
    \ candidates_sorted=()\n  local -a candidates_sorted\n}\n\ncandidate() {\n   \
    \ can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptkk651i0.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( $1 )\n  local max=$( echo $arr | tr \" \" \"\\\
    n\" | sort -n | tail -1 )\n  local maxIndex=0\n  local maxIndexCount=0\n  local\
    \ maxIndexValue=0\n  local maxIndexValueCount=0\n  local maxIndexValueCountMax=0\n\
    \  local maxIndexValueCountMaxIndex=0\n  local maxIndexValueCountMaxIndexCount=0\n\
    \  local maxIndexValueCountMaxIndexCountMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndex=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndex=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndex=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndex=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndex=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n\
    \  local maxIndexValueCountMaxIndexCountMaxIndexMaxIndexMax=0\n  local maxIndexValueCount\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n\
    \  while [ $((index+1)) -lt $max ]; do\n    if [[ ${array[$index]} -gt ${array[$((index+1))]}\
    \ ]]; then\n      max=$((index+1))\n    fi\n    index=$((index+1))\n  done\n \
    \ if [[ $index -eq $max ]]; then\n    return -1\n  else\n    return $max\n  fi\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwqm7rnfg.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n\
    \    local -i i\n    local -n elem\n    for (( i=1; i<=$max; i++ )); do\n    \
    \    elem=${arr[$i]}\n        if (( ${elem} <= ${arr[$(( i - 1 ))]} )); then\n\
    \            max=i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkq_x3z59.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( $1 )\n  local max=$(( ${#arr[@]} - 1 ))\n  local\
    \ i\n  for i in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$(( i + 1 ))]}\
    \ ]]; then\n      max=$i\n    fi\n  done\n  if [[ $max -eq 0 ]]; then\n    return\
    \ -1\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=0\n  local\
    \ -n maxidx=0\n  local -n maxval=$(( ${#arr[@]} - 1 ))\n  local -n maxidxval=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval2=$(( ${#max} - 1 ))\n  local -n maxidxval3=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval4=$(( ${#max} - 1 ))\n  local -n maxidxval5=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval6=$(( ${#max} - 1 ))\n  local -n maxidxval7=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval8=$(( ${#max} - 1 ))\n  local -n maxidxval9=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval10=$(( ${#max} - 1 ))\n  local -n maxidxval11=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval12=$(( ${#max} - 1 ))\n  local -n maxidxval13=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval14=$(( ${#max} - 1 ))\n  local -n maxidxval15=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval16=$(( ${#max} - 1 ))\n  local -n maxidxval17=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval18=$(( ${#max} - 1 ))\n  local -n maxidxval19=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval20=$(( ${#max} - 1 ))\n  local -n maxidxval21=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval22=$(( ${#max} - 1 ))\n  local -n maxidxval23=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval24=$(( ${#max} - 1 ))\n  local -n maxidxval25=$((\
    \ ${#max} - 1 ))\n  local -n maxidxval26=$(( ${#max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphauyzkfo.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmphauyzkfo.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=$((${#array}-1))\n\
    \    for (( i=0; i<${#array}; i++ )); do\n        if [[ ${array[i]} -gt ${array[i+1]}\
    \ ]]; then\n            (( index++ ))\n        fi\n    done\n    if [[ ${index}\
    \ -gt ${max} ]]; then\n        echo \"${index}\"\n    else\n        echo \"-1\"\
    \n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprktz2hyv.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n maxi\n  local -n maxj\n  local -n maxi1\n  local\
    \ -n maxj1\n  local -n maxi1i\n  local -n maxj1j\n  local -n maxi1j\n  local -n\
    \ maxj1k\n  local -n maxi1k\n  local -n maxj1l\n  local -n maxi1l\n  local -n\
    \ maxj1m\n  local -n maxi1m\n  local -n maxj1n\n  local -n maxi1n\n  local -n\
    \ maxj1o\n  local -n maxi1o\n  local -n maxj1p\n  local -n maxi1p\n  local -n\
    \ maxj1q\n  local -n maxi1q\n  local -n maxj1r\n  local -n maxi1r\n  local -n\
    \ maxj1s\n  local -n maxi1s\n  local -n maxj1t\n  local -n maxi1t\n  local -n\
    \ maxj1u\n  local -n maxi1u\n  local -n maxj1v\n  local -n maxi1v\n  local -n\
    \ maxj1w\n  local -n maxi1w\n  local -n maxj1x\n  local -n maxi1x\n  local -n\
    \ maxj1y\n  local -n maxi1y\n  local -n maxj1z\n  local -n maxi1z\n  local -n\
    \ maxj1aa\n  local -n maxi1aa\n  local -n maxj1ab\n  local -n maxi1ab\n  local\
    \ -n maxj1ac\n  local -n maxi1ac\n  local -n maxj1ad\n  local -n maxi1ad\n  local\
    \ -n maxj1ae\n  local -n maxi1ae\n  local -n maxj1af\n  local -n maxi1af\n  local\
    \ -n maxj1ag\n  local -n maxi1ag\n  local -n maxj1ah\n  local -n \n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp30lc7zst.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp30lc7zst.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  while [ \"$index\" -lt \"$#\" ] && [ \"$max\" -lt \"$array[$index]\"\
    \ ]; do\n    local next=$((index+1))\n    local nextMax=$((max+array[$next]))\n\
    \    if [ \"$nextMax\" -gt \"$max\" ]; then\n      max=$nextMax\n      maxIndex=$index\n\
    \    fi\n    index=$next\n  done\n  if [ \"$max\" -gt \"$array[$index]\" ]; then\n\
    \    maxIndex=$index\n  fi\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9ya3tgae.sh: line 18: [: 1 2 4 3 5[0]: integer expression expected

    /tmp/tmp9ya3tgae.sh: line 27: [: 1 2 4 3 5[0]: integer expression expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  while [ $index -lt $max ]; do\n    local element=${array[$index]};\n\
    \    local previousElement=${array[$index-1]};\n    if [ \"$element\" -ge \"$previousElement\"\
    \ ]; then\n      index=$(( index + 1 ));\n    else\n      index=$(( index - 1\
    \ ));\n      max=$(( index - 1 ));\n    fi\n  done\n  echo \"$index\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzothxsuz.sh: line 19: array: bad array subscript

    /tmp/tmpzothxsuz.sh: line 20: [: 1 2 4 3 5: integer expression expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=($1)\n  local max=$((${#arr[@]} - 1))\n  local i\n\
    \  for i in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$((i + 1))]} ]];\
    \ then\n      max=$i\n    fi\n  done\n  if [[ $max -eq 0 ]]; then\n    return\
    \ -1\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local max=$2\n    local index=0\n  \
    \  local last=$((${#arr[@]} - 1))\n    local found=false\n    local i\n\n    for\
    \ (( i=1; i<${#arr[@]}; i++ )); do\n        if [[ ${arr[$i]} -gt $max ]]; then\n\
    \            found=true\n        fi\n        if [[ ${arr[$i]} -eq $max ]]; then\n\
    \            if [[ $found == true ]]; then\n                index=${i}\n     \
    \           break\n            fi\n        fi\n    done\n    if [[ $found == false\
    \ ]]; then\n        index=-1\n    fi\n    echo $index\n}\n\ncandidate() {\n  \
    \  can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3\
    \ 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn7jqa596.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local arr=($1)\n    local max=$((${#arr[@]} - 1))\n    local\
    \ i\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if (( ${arr[$i]} <= ${arr[$max]}\
    \ )) ; then\n            max=i\n        fi\n    done\n    if [[ ${max} -eq ${#arr[@]}\
    \ ]] ; then\n        echo \"-1\"\n    else\n        echo \"${max}\"\n    fi\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n\
    \  while (( index < max )); do\n    local element=${array:$index:1}\n    if [[\
    \ ${element} -gt $(( ${array:$((index+1)):1} )) ]]; then\n      max=$(( ${index}\
    \ ))\n    fi\n    (( index++ ))\n  done\n  if (( ${index} == 0 )); then\n    echo\
    \ \"-1\"\n  else\n    echo \"${array:$index:1}\"\n  fi\n}\n\ncandidate() {\n \
    \   can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -n max=$2\n\
    \  local -n last=$3\n  local -n result=$4\n  local -n i=$5\n\n  arranged=($arrange)\n\
    \  while (( i < ${#arrange[@]} )); do\n    local -n elem=${arrange[$i]}\n    local\
    \ -n index=$(expr index \"$arranged\" \"$elem\")\n    if (( index > 0 )); then\n\
    \      arranged[$i]=$elem\n      arrange[$i]=$elem\n      i=$(( i + 1 ))\n   \
    \ else\n      arranged[$i]=$elem\n      i=$(( i + 1 ))\n    fi\n  done\n\n  result=$((\
    \ ${#arrange[@]} - 1 ))\n  if (( ${#arrange[@]} > max )); then\n    max=${#arrange[@]}\n\
    \  fi\n\n  arrange=(${arrange[@]:0:$max})\n  arrange=(${arrange[@]:$result:$max})\n\
    \  arrange=(${arrange[@]:$max:${#arrange[@]}}) # remove trailing elements\n  arrange=(${arrange[@]:0:$result})\
    \ # remove leading elements\n\n  echo \"${arrange[@]}\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplv6_dv2n.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmplv6_dv2n.sh: line 16: local: `'': not a valid identifier

    /tmp/tmplv6_dv2n.sh: line 17: local: `'': not a valid identifier

    /tmp/tmplv6_dv2n.sh: line 18: local: `'': not a valid identifier

    /tmp/tmplv6_dv2n.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 0\
    \ $((${#arr}-1))); do\n    if [[ ${arr[$i]} -gt ${arr[$((i+1))]} ]]; then\n  \
    \    max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7v1cex5t.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n\n  local -n maxidx=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n\
    \n  local -n maxidxval=$8\n  local -n maxval=$9\n  local -n maxidxval=$10\n\n\
    \  local -n maxidxval=$11\n  local -n maxval=$12\n  local -n maxidxval=$13\n\n\
    \  local -n maxidxval=$14\n  local -n maxval=$15\n  local -n maxidxval=$16\n\n\
    \  local -n maxidxval=$17\n  local -n maxval=$18\n  local -n maxidxval=$19\n\n\
    \  local -n maxidxval=$20\n  local -n maxval=$21\n  local -n maxidxval=$22\n\n\
    \  local -n maxidxval=$23\n  local -n maxval=$24\n  local -n maxidxval=$25\n\n\
    \  local -n maxidxval=$26\n  local -n maxval=$27\n  local -n maxidxval=$28\n\n\
    \  local -n maxidxval=$29\n  local -n maxval=$30\n  local -n maxidxval=$31\n\n\
    \  local -n maxidxval=$32\n  local -n maxval=$33\n  local -n maxidxval=$34\n\n\
    \  local -n maxidxval=$35\n  local -n maxval=$36\n  local -n maxidxval=$37\n\n\
    \  local -n maxidxval=$38\n  local -n maxval=$39\n  local -n maxidxval=$40\n\n\
    \  local -n maxidxval=$41\n  local -n maxval=$42\n  local -n maxidxval=$43\n\n\
    \  local -n maxidxval=$44\n  local -n maxval=$45\n  local -n maxidxval=$46\n\n\
    \  local -n maxidxval=$47\n  local -n maxval=$48\n  local -n maxidxval=$49\n\n\
    \  local -n maxidxval=$50\n  local -n maxval=$51\n  local -n maxidxval=$52\n\n\
    \  local -n maxidxval=$53\n  local -n maxval=$\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaha0esjb.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpaha0esjb.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpaha0esjb.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpaha0esjb.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpaha0esjb.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpaha0esjb.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpaha0esjb.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpaha0esjb.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpaha0esjb.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpaha0esjb.sh: line 25: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 27: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 28: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 29: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 31: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 32: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 33: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 35: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 36: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 37: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpaha0esjb.sh: line 39: local: `0'': invalid variable name for name reference

    /tmp/tmpaha0esjb.sh: line 40: local: `1'': invalid variable name for name reference

    /tmp/tmpaha0esjb.sh: line 41: local: `2'': invalid variable name for name reference

    /tmp/tmpaha0esjb.sh: line 43: local: `3'': invalid variable name for name reference

    /tmp/tmpaha0esjb.sh: line 44: local: `4'': invalid variable name for name reference

    /tmp/tmpaha0esjb.sh: line 45: local: `5'': invalid variable name for name reference

    /tmp/tmpaha0esjb.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n idx2=$5\n  local -n val2=$6\n  local -n idx3=$7\n  local\
    \ -n val3=$8\n  local -n idx4=$9\n  local -n val4=$10\n  local -n idx5=$11\n \
    \ local -n val5=$12\n  local -n idx6=$13\n  local -n val6=$14\n  local -n idx7=$15\n\
    \  local -n val7=$16\n  local -n idx8=$17\n  local -n val8=$18\n  local -n idx9=$19\n\
    \  local -n val9=$20\n  local -n idx10=$21\n  local -n val10=$22\n  local -n idx11=$23\n\
    \  local -n val11=$24\n  local -n idx12=$25\n  local -n val12=$26\n  local -n\
    \ idx13=$27\n  local -n val13=$28\n  local -n idx14=$29\n  local -n val14=$30\n\
    \  local -n idx15=$31\n  local -n val15=$32\n  local -n idx16=$33\n  local -n\
    \ val16=$34\n  local -n idx17=$35\n  local -n val17=$36\n  local -n idx18=$37\n\
    \  local -n val18=$38\n  local -n idx19=$39\n  local -n val19=$40\n  local -n\
    \ idx20=$41\n  local -n val20=$42\n  local -n idx21=$43\n  local -n val21=$44\n\
    \  local -n idx22=$45\n  local -n val22=$46\n  local -n idx23=$47\n  local -n\
    \ val23=$48\n  local -n idx24=$49\n  local -n val24=$50\n  local -n idx25=$51\n\
    \  local -n val25=$52\n  local -n idx26=$53\n  local -n val26=$54\n  local -n\
    \ idx27=$55\n  local -n val27=$56\n  local -n idx28=$57\n  local -\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgskx5p7f.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpgskx5p7f.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpgskx5p7f.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpgskx5p7f.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmpgskx5p7f.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ maxIndex\n  local maxVal\n  local maxValIndex\n  local maxValIndex2\n  local\
    \ maxValIndex3\n  local maxValIndex4\n  local maxValIndex5\n  local maxValIndex6\n\
    \  local maxValIndex7\n  local maxValIndex8\n  local maxValIndex9\n  local maxValIndex10\n\
    \  local maxValIndex11\n  local maxValIndex12\n  local maxValIndex13\n  local\
    \ maxValIndex14\n  local maxValIndex15\n  local maxValIndex16\n  local maxValIndex17\n\
    \  local maxValIndex18\n  local maxValIndex19\n  local maxValIndex20\n  local\
    \ maxValIndex21\n  local maxValIndex22\n  local maxValIndex23\n  local maxValIndex24\n\
    \  local maxValIndex25\n  local maxValIndex26\n  local maxValIndex27\n  local\
    \ maxValIndex28\n  local maxValIndex29\n  local maxValIndex30\n  local maxValIndex31\n\
    \  local maxValIndex32\n  local maxValIndex33\n  local maxValIndex34\n  local\
    \ maxValIndex35\n  local maxValIndex36\n  local maxValIndex37\n  local maxValIndex38\n\
    \  local maxValIndex39\n  local maxValIndex40\n  local maxValIndex41\n  local\
    \ maxValIndex42\n  local maxValIndex43\n  local maxValIndex44\n  local maxValIndex45\n\
    \  local maxValIndex46\n  local maxValIndex47\n  local maxValIndex48\n  local\
    \ maxValIndex49\n  local maxValIndex50\n  local maxValIndex51\n  local maxValIndex52\n\
    \  local maxValIndex53\n  local maxValIndex54\n  local maxValIndex55\n  local\
    \ maxValIndex56\n  local maxValIndex57\n  local maxValIndex58\n  local maxValIndex59\n\
    \  local maxValIndex60\n  local maxValIndex61\n  local maxValIndex62\n  local\
    \ maxValIndex63\n  local maxValIndex64\n  local maxValIndex65\n  local maxValIndex66\n\
    \  local maxValIndex67\n  local maxValIndex68\n  local maxValIndex69\n\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ len=${#arr[@]}\n  local maxlen=${#max}\n  local maxidx\n  local maxval\n  local\
    \ maxidx2\n  local maxval2\n  local maxidx3\n  local maxval3\n  local maxidx4\n\
    \  local maxval4\n  local maxidx5\n  local maxval5\n  local maxidx6\n  local maxval6\n\
    \  local maxidx7\n  local maxval7\n  local maxidx8\n  local maxval8\n  local maxidx9\n\
    \  local maxval9\n  local maxidx10\n  local maxval10\n  local maxidx11\n  local\
    \ maxval11\n  local maxidx12\n  local maxval12\n  local maxidx13\n  local maxval13\n\
    \  local maxidx14\n  local maxval14\n  local maxidx15\n  local maxval15\n  local\
    \ maxidx16\n  local maxval16\n  local maxidx17\n  local maxval17\n  local maxidx18\n\
    \  local maxval18\n  local maxidx19\n  local maxval19\n  local maxidx20\n  local\
    \ maxval20\n  local maxidx21\n  local maxval21\n  local maxidx22\n  local maxval22\n\
    \  local maxidx23\n  local maxval23\n  local maxidx24\n  local maxval24\n  local\
    \ maxidx25\n  local maxval25\n  local maxidx26\n  local maxval26\n  local maxidx27\n\
    \  local maxval27\n  local maxidx28\n  local maxval28\n  local maxidx29\n  local\
    \ maxval29\n  local maxidx30\n  local maxval30\n  local maxidx31\n  local maxval31\n\
    \  local maxidx32\n  local maxval32\n  local maxidx33\n  local maxval33\n  local\
    \ maxidx34\n  local maxval34\n  local maxidx35\n  local maxval35\n  local maxidx36\n\
    \  local maxval36\n  local maxidx37\n  local maxval37\n  local maxidx38\n  local\
    \ maxval38\n  local maxidx39\n  local maxval39\n  local maxidx40\n\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp09kp9ti9.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    if [[ ${arr[i]} -gt ${arr[i-1]} ]];\
    \ then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpat_1zi3v.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -a sorted=()\n  local -n max\n\
    \  local -n i\n  local -n j\n  local -n len\n  local -n maxlen\n  local -n maxidx\n\
    \  local -n maxval\n  local -n maxidx2\n  local -n maxval2\n  local -n maxidx3\n\
    \  local -n maxval3\n  local -n maxidx4\n  local -n maxval4\n  local -n maxidx5\n\
    \  local -n maxval5\n  local -n maxidx6\n  local -n maxval6\n  local -n maxidx7\n\
    \  local -n maxval7\n  local -n maxidx8\n  local -n maxval8\n  local -n maxidx9\n\
    \  local -n maxval9\n  local -n maxidx10\n  local -n maxval10\n  local -n maxidx11\n\
    \  local -n maxval11\n  local -n maxidx12\n  local -n maxval12\n  local -n maxidx13\n\
    \  local -n maxval13\n  local -n maxidx14\n  local -n maxval14\n  local -n maxidx15\n\
    \  local -n maxval15\n  local -n maxidx16\n  local -n maxval16\n  local -n maxidx17\n\
    \  local -n maxval17\n  local -n maxidx18\n  local -n maxval18\n  local -n maxidx19\n\
    \  local -n maxval19\n  local -n maxidx20\n  local -n maxval20\n  local -n maxidx21\n\
    \  local -n maxval21\n  local -n maxidx22\n  local -n maxval22\n  local -n maxidx23\n\
    \  local -n maxval23\n  local -n maxidx24\n  local -n maxval24\n  local -n maxidx25\n\
    \  local -n maxval25\n  local -n maxidx26\n  local -n maxval26\n  local -n maxidx27\n\
    \  local -n maxval27\n  local -n maxidx28\n  local -n maxval28\n  local -n maxidx29\n\
    \  local -n maxval29\n  local \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb3lyfeg7.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n\
    \  while (( ${index} <= max )); do\n    local val=${array[$index]};\n    local\
    \ prev=${array[$((index-1))]};\n    if [[ ${val} -gt ${prev} ]]; then\n      max=$((index+1));\n\
    \    fi\n    index=$((index+1));\n  done\n  echo \"${max}\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptfjqgxm4.sh: line 19: array: bad array subscript

    /tmp/tmptfjqgxm4.sh: line 20: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    /tmp/tmptfjqgxm4.sh: line 20: [[: 1 2 4 3 5: syntax error in expression (error
    token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local arr=$1\n    local max=$2\n    local i\n    local j\n\
    \    local maxIndex\n    local maxVal\n    local val\n    local found\n    local\
    \ maxValIndex\n    local maxValIndex2\n    local maxValIndex3\n    local maxValIndex4\n\
    \    local maxValIndex5\n    local maxValIndex6\n    local maxValIndex7\n    local\
    \ maxValIndex8\n    local maxValIndex9\n    local maxValIndex10\n    local maxValIndex11\n\
    \    local maxValIndex12\n    local maxValIndex13\n    local maxValIndex14\n \
    \   local maxValIndex15\n    local maxValIndex16\n    local maxValIndex17\n  \
    \  local maxValIndex18\n    local maxValIndex19\n    local maxValIndex20\n   \
    \ local maxValIndex21\n    local maxValIndex22\n    local maxValIndex23\n    local\
    \ maxValIndex24\n    local maxValIndex25\n    local maxValIndex26\n    local maxValIndex27\n\
    \    local maxValIndex28\n    local maxValIndex29\n    local maxValIndex30\n \
    \   local maxValIndex31\n    local maxValIndex32\n    local maxValIndex33\n  \
    \  local maxValIndex34\n    local maxValIndex35\n    local maxValIndex36\n   \
    \ local maxValIndex37\n    local maxValIndex38\n    local maxValIndex39\n    local\
    \ maxValIndex40\n    local maxValIndex41\n    local maxValIndex42\n    local maxValIndex43\n\
    \    local maxValIndex44\n    local maxValIndex45\n    local maxValIndex46\n \
    \   local maxValIndex47\n    local maxValIndex48\n    local maxValIndex49\n  \
    \  local maxValIndex50\n    local maxValIndex51\n    local maxValIndex52\n   \
    \ local maxValIndex53\n    local maxValIndex54\n    local maxValIndex55\n    local\
    \ maxValIndex56\n    local maxValIndex57\n    local maxValIndex58\n    local maxValIndex59\n\
    \    local maxValIndex60\n    local maxValIndex61\n    local maxValIndex62\n \
    \   local maxValIndex63\n    local maxValIndex64\n    local maxValIndex65\n  \
    \  local maxValIndex66\n    local maxValIndex67\n    local maxValIndex68\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n\
    \    local -i i\n    for (( i=1; i<=$max; i++ )); do\n        if [[ ${arr[i]}\
    \ -gt ${arr[i-1]} ]]; then\n            max=i\n        fi\n    done\n    if [[\
    \ ${max} -eq ${#arr[@]} ]]; then\n        echo \"-1\"\n    else\n        echo\
    \ \"${max}\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjwh90oyw.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -n max=$2\n\
    \  local -n last=$3\n  local -n i=$4\n  local -n j=$5\n  local -n maxi=$6\n  local\
    \ -n maxj=$7\n  local -n maxval=$8\n  local -n maxvali=$9\n  local -n maxvalj=$10\n\
    \  local -n maxvalval=$11\n  local -n maxvalvali=$12\n  local -n maxvalvalj=$13\n\
    \  local -n maxvalvalval=$14\n  local -n maxvalvalvali=$15\n  local -n maxvalvalvalj=$16\n\
    \  local -n maxvalvalvalval=$17\n  local -n maxvalvalvalvali=$18\n  local -n maxvalvalvalvalj=$19\n\
    \  local -n maxvalvalvalvalval=$20\n  local -n maxvalvalvalvalvali=$21\n  local\
    \ -n maxvalvalvalvalvalj=$22\n  local -n maxvalvalvalvalvalval=$23\n  local -n\
    \ maxvalvalvalvalvalvali=$24\n  local -n maxvalvalvalvalvalvalj=$25\n  local -n\
    \ maxvalvalvalvalvalvalval=$26\n  local -n maxvalvalvalvalvalvalvali=$27\n  local\
    \ -n maxvalvalvalvalvalvalvalj=$28\n  local -n maxvalvalvalvalvalvalvalval=$29\n\
    \  local -n maxvalvalvalvalvalvalvalvali=$30\n  local -n maxvalvalvalvalvalvalvalvalj=$31\n\
    \  local -n maxvalvalvalvalvalvalvalvalval=$32\n  local -n maxvalvalvalvalvalvalvalvalvali=$33\n\
    \  local -n maxvalvalvalvalvalvalvalvalvalj=$34\n  local -n maxvalvalvalvalvalvalvalvalvalval=$35\n\
    \  local -n maxvalvalvalvalvalvalvalvalvalvali=$36\n  local -n maxvalvalvalvalvalvalvalvalvalvalj=$37\n\
    \  local -n maxvalvalvalvalvalvalvalvalvalvalval=$38\n  \n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4kfpesia.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp4kfpesia.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp4kfpesia.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp4kfpesia.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp4kfpesia.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp4kfpesia.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp4kfpesia.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp4kfpesia.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp4kfpesia.sh: line 23: local: `'': not a valid identifier

    /tmp/tmp4kfpesia.sh: line 24: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 25: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 26: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 27: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 28: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 29: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 30: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 31: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 32: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 33: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp4kfpesia.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmp4kfpesia.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmp4kfpesia.sh: line 36: local: `2'': invalid variable name for name reference

    /tmp/tmp4kfpesia.sh: line 37: local: `3'': invalid variable name for name reference

    /tmp/tmp4kfpesia.sh: line 38: local: `4'': invalid variable name for name reference

    /tmp/tmp4kfpesia.sh: line 39: local: `5'': invalid variable name for name reference

    /tmp/tmp4kfpesia.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=0\n\
    \    local maxIndex=0\n    local current\n    local currentIndex\n    local currentMax\n\
    \    local currentMaxIndex\n    local currentMaxValue\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local currentMaxValueIndex\n\
    \    local currentMaxValueIndex\n    local currentMaxValueIndex\n    local \n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=0\n  local\
    \ -n maxidx=0\n  local -n maxval=$max\n  local -n val=$maxval\n  local -n maxvalidx=0\n\
    \  local -n maxvalidx2=0\n  local -n maxvalidx3=0\n  local -n maxvalidx4=0\n \
    \ local -n maxvalidx5=0\n  local -n maxvalidx6=0\n  local -n maxvalidx7=0\n  local\
    \ -n maxvalidx8=0\n  local -n maxvalidx9=0\n  local -n maxvalidx10=0\n  local\
    \ -n maxvalidx11=0\n  local -n maxvalidx12=0\n  local -n maxvalidx13=0\n  local\
    \ -n maxvalidx14=0\n  local -n maxvalidx15=0\n  local -n maxvalidx16=0\n  local\
    \ -n maxvalidx17=0\n  local -n maxvalidx18=0\n  local -n maxvalidx19=0\n  local\
    \ -n maxvalidx20=0\n  local -n maxvalidx21=0\n  local -n maxvalidx22=0\n  local\
    \ -n maxvalidx23=0\n  local -n maxvalidx24=0\n  local -n maxvalidx25=0\n  local\
    \ -n maxvalidx26=0\n  local -n maxvalidx27=0\n  local -n maxvalidx28=0\n  local\
    \ -n maxvalidx29=0\n  local -n maxvalidx30=0\n  local -n maxvalidx31=0\n  local\
    \ -n maxvalidx32=0\n  local -n maxvalidx33=0\n  local -n maxvalidx34=0\n  local\
    \ -n maxvalidx35=0\n  local -n maxvalidx36=0\n  local -n maxvalidx37=0\n  local\
    \ -n maxvalidx38=0\n  local -n maxvalidx39=0\n  local -n maxvalidx40=0\n  local\
    \ -n maxvalidx41=0\n  local -n maxvalidx42=0\n  local -n maxvalidx43=0\n  local\
    \ -n maxvalidx44=0\n  local -n maxvalidx45=0\n  local -n maxvalidx46=0\n  local\
    \ -n \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpszhltugx.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpszhltugx.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpszhltugx.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpszhltugx.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpszhltugx.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: line 38: local: `0'': invalid variable name for name reference

    /tmp/tmpszhltugx.sh: l'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -n max=$2\n\
    \  local -n maxIndex=$3\n  local -n last=$4\n  local -n lastIndex=$5\n  local\
    \ -n lastValue=$6\n  local -n lastIndexValue=$7\n  local -n lastIndexValueIndex=$8\n\
    \  local -n lastIndexValueIndexValue=$9\n  local -n lastIndexValueIndexValueIndex=$10\n\
    \  local -n lastIndexValueIndexValueIndexValue=$11\n  local -n lastIndexValueIndexValueIndexValueIndex=$12\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValue=$13\n  local -n lastIndexValueIndexValueIndexValueIndexValueIndex=$14\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValue=$15\n  local\
    \ -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndex=$16\n  local\
    \ -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue=$17\n  local\
    \ -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue=$18\n  local\
    \ -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex=$19\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue=$20\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex=$21\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex=$22\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex=$23\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue=$24\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex=$25\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue=$26\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue=$27\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex=$28\n\
    \  local -n lastIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue=$29\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjxz6y9nf.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpjxz6y9nf.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpjxz6y9nf.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpjxz6y9nf.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpjxz6y9nf.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpjxz6y9nf.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpjxz6y9nf.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpjxz6y9nf.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpjxz6y9nf.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpjxz6y9nf.sh: line 24: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 25: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 26: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 27: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 28: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 29: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 30: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 31: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 32: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 33: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpjxz6y9nf.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpjxz6y9nf.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmpjxz6y9nf.sh: line 36: local: `2'': invalid variable name for name reference

    /tmp/tmpjxz6y9nf.sh: line 37: local: `3'': invalid variable name for name reference

    /tmp/tmpjxz6y9nf.sh: line 38: local: `4'': invalid variable name for name reference

    /tmp/tmpjxz6y9nf.sh: line 39: local: `5'': invalid variable name for name reference

    /tmp/tmpjxz6y9nf.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=0\n  local\
    \ -n maxidx=0\n  local -n maxval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalidx=0\n\
    \  local -n maxvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalidx=0\n  local\
    \ -n maxvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalidx=0\n  local\
    \ -n maxvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalvalvalvalvalval=$(( ${#arr[@]} - 1 ))\n  local -n maxvalvalvalvalvalvalvalvalidx=0\n\
    \  local -n maxvalvalvalvalval\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp23tkn9ya.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp23tkn9ya.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp23tkn9ya.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 18: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 20: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 22: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 24: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 26: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 28: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 30: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 32: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 34: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 36: local: `-1'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmp23tkn9ya.sh: line 38: local: `-1'': invalid variab'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=$1\n  local max=$2\n  local i\n  for i in $(seq 1\
    \ $((${#arr[@]} - 1))); do\n    if [[ ${arr[$i]} -gt $max ]]; then\n      max=${arr[$i]}\n\
    \    fi\n  done\n  if [[ ${max} -eq ${arr[$((${#arr[@]} - 1))} ]]; then\n    return\
    \ -1\n  else\n    return $((${#arr[@]} - 1))\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqqnzugo_.sh: line 22: ${arr[$((${#arr[@]} - 1))}: bad substitution

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index\n  local max\n  local maxIndex\n\
    \  local value\n\n  maxIndex=0\n  max=0\n  index=0\n  while [ $index -lt ${#array}\
    \ ]; do\n    value=${array[$index]};\n    if [ $value -gt $max ]; then\n     \
    \ max=$value;\n      maxIndex=$index;\n    fi\n    ((index++))\n  done\n  echo\
    \ \"$maxIndex\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp96ygcia9.sh: line 25: [: too many arguments

    /tmp/tmp96ygcia9.sh: line 25: [: -gt: unary operator expected

    /tmp/tmp96ygcia9.sh: line 25: [: -gt: unary operator expected

    /tmp/tmp96ygcia9.sh: line 25: [: -gt: unary operator expected

    /tmp/tmp96ygcia9.sh: line 25: [: -gt: unary operator expected

    /tmp/tmp96ygcia9.sh: line 25: [: -gt: unary operator expected

    /tmp/tmp96ygcia9.sh: line 25: [: -gt: unary operator expected

    /tmp/tmp96ygcia9.sh: line 25: [: -gt: unary operator expected

    /tmp/tmp96ygcia9.sh: line 25: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -n max=$2\n\
    \  local -n cur=$3\n  local -n prev=$4\n  local -n maxidx=$5\n  local -n maxval=$6\n\
    \  local -n idx=$7\n  local -n val=$8\n  local -n maxidx=$9\n  local -n maxval=$10\n\
    \  local -n idx=$11\n  local -n val=$12\n  local -n maxidx=$13\n  local -n maxval=$14\n\
    \  local -n idx=$15\n  local -n val=$16\n  local -n maxidx=$17\n  local -n maxval=$18\n\
    \  local -n idx=$19\n  local -n val=$20\n  local -n maxidx=$21\n  local -n maxval=$22\n\
    \  local -n idx=$23\n  local -n val=$24\n  local -n maxidx=$25\n  local -n maxval=$26\n\
    \  local -n idx=$27\n  local -n val=$28\n  local -n maxidx=$29\n  local -n maxval=$30\n\
    \  local -n idx=$31\n  local -n val=$32\n  local -n maxidx=$33\n  local -n maxval=$34\n\
    \  local -n idx=$35\n  local -n val=$36\n  local -n maxidx=$37\n  local -n maxval=$38\n\
    \  local -n idx=$39\n  local -n val=$40\n  local -n maxidx=$41\n  local -n maxval=$42\n\
    \  local -n idx=$43\n  local -n val=$44\n  local -n maxidx=$45\n  local -n maxval=$46\n\
    \  local -n idx=$47\n  local -n val=$48\n  local -n maxidx=$49\n  local -n maxval=$50\n\
    \  local -n idx=$51\n  local -n val=$52\n  local -n maxidx=$53\n  local -n maxval=$54\n\
    \  local -n idx=$55\n  local -n val=$56\n  local -n maxidx=$57\n  local -n maxval=$58\n\
    \  local -n idx=$59\n  local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr196qux6.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpr196qux6.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpr196qux6.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpr196qux6.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpr196qux6.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpr196qux6.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpr196qux6.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpr196qux6.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpr196qux6.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpr196qux6.sh: line 24: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 25: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 26: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 27: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 28: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 29: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 30: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 31: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 32: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 33: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpr196qux6.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpr196qux6.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmpr196qux6.sh: line 36: local: `2'': invalid variable name for name reference

    /tmp/tmpr196qux6.sh: line 37: local: `3'': invalid variable name for name reference

    /tmp/tmpr196qux6.sh: line 38: local: `4'': invalid variable name for name reference

    /tmp/tmpr196qux6.sh: line 39: local: `5'': invalid variable name for name reference

    /tmp/tmpr196qux6.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  local element\n\n  for element in $array; do\n    if [ \"$element\"\
    \ -gt \"$max\" ]; then\n      max=$element\n      maxIndex=$index\n    fi\n  \
    \  ((index++))\n  done\n\n  if [ \"$max\" -gt \"$maxIndex\" ]; then\n    return\
    \ -1\n  else\n    return $maxIndex\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( $1 )\n  local max=$( echo $arr | tr \" \" \"\\\
    n\" | sort -n | tail -n 1 | tr -d \"\\n\" )\n  local i\n  for (( i=1; i<${#arr[@]};\
    \ i++ )); do\n    if [[ ${arr[$i]} -gt ${max} ]]; then\n      max=${arr[$i]}\n\
    \    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n maxidx=$5\n  local -n maxval=$6\n\n  local -i maxidxidx=0\n\
    \  local -i maxidxval=0\n  local -i maxvalidx=0\n  local -i maxvalval=0\n\n  local\
    \ -i idxidx=0\n  local -i idxval=0\n  local -i validx=0\n  local -i valval=0\n\
    \n  local -i idxidxidx=0\n  local -i idxidxval=0\n  local -i idxvalidx=0\n  local\
    \ -i idxvalval=0\n\n  local -i validxidx=0\n  local -i validxval=0\n  local -i\
    \ valvalidx=0\n  local -i valvalval=0\n\n  local -i idxidxidxidx=0\n  local -i\
    \ idxidxidxval=0\n  local -i idxidxvalidx=0\n  local -i idxidxvalval=0\n\n  local\
    \ -i validxidxidx=0\n  local -i validxidxval=0\n  local -i validxvalidx=0\n  local\
    \ -i validxvalval=0\n\n  local -i valvalidxidx=0\n  local -i valvalidxval=0\n\
    \  local -i valvalidxidx=0\n  local -i valvalvalidx=0\n\n  local -i idxidxidxidxidx=0\n\
    \  local -i idxidxidxidxval=0\n  local -i idxidxidxvalval=0\n  local -i idxidxvalidx=0\n\
    \  local -i idxidxvalval=0\n\n  local -i validxidxidxidx=0\n  local -i validxidxidxval=0\n\
    \  local -i validxidxvalval=0\n  local -i validxvalidx=0\n  local -i validxvalval=0\n\
    \n  local -i valvalidxidx=0\n  local -i valvalidxidxval=0\n  local -i valvalidxidx=0\n\
    \  local -i valvalvalidx=0\n\n  local -i idxidxidxidxidxidx=0\n  local -i idxidxidxidxval=0\n\
    \  local -i idxidxidxvalval=0\n  local -i idxidxvalidx=0\n  local -i idxidxvalval=0\n\
    \n  local -i validxidxidxidx=0\n  local -i validxidxidxval=0\n  local -i validxidxvalval=0\n\
    \  local -i validxvalidx=0\n  local -i validxvalval=0\n\n\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfb7hmjlt.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpfb7hmjlt.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpfb7hmjlt.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpfb7hmjlt.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpfb7hmjlt.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpfb7hmjlt.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n i=$((${#arr[@]}\
    \ - 1))\n  local -n j=$((${#arr[@]} - 1))\n  local -n maxIndex=$((${#arr[@]} -\
    \ 1))\n  local -n maxVal=${arr[$maxIndex]}\n  while (( ${#arr[@]} > 0 )); do\n\
    \    if (( ${arr[$i]} <= ${arr[$j]} )); then\n      maxIndex=$i\n      maxVal=${arr[$i]}\n\
    \      (( i++ ))\n    else\n      maxIndex=$j\n      maxVal=${arr[$j]}\n     \
    \ (( j-- ))\n    fi\n  done\n  echo $maxIndex\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfml_6sz4.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpfml_6sz4.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpfml_6sz4.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmpfml_6sz4.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmpfml_6sz4.sh: line 18: local: `-1'': invalid variable name for name reference

    /tmp/tmpfml_6sz4.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n\
    \  local -n idx=$4\n  local -n val=$5\n\n  local -n maxval=$max\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxvalval=$maxidxval\n\
    \  local -n idxvalval=$idxval\n  local -n valvalval=$valval\n\n  local -n maxidxvalvalval=$maxidxvalval\n\
    \  local -n idxvalvalval=$idxvalval\n  local -n valvalvalval=$valvalval\n\n  local\
    \ -n maxidxvalvalvalval=$maxidxvalvalval\n  local -n idxvalvalvalval=$idxvalvalval\n\
    \  local -n valvalvalvalval=$valvalvalval\n\n  local -n maxidxvalvalvalvalval=$maxidxvalvalvalval\n\
    \  local -n idxvalvalvalvalval=$idxvalvalvalval\n  local -n valvalvalvalvalval=$valvalvalvalval\n\
    \n  local -n maxidxvalvalvalvalvalval=$maxidxvalvalvalvalval\n  local -n idxvalvalvalvalvalval=$idxvalvalvalvalval\n\
    \  local -n valvalvalvalvalvalval=$valvalvalvalvalval\n\n  local -n maxidxvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalval\n\
    \  local -n idxvalvalvalvalvalvalval=$idxvalvalvalvalvalval\n  local -n valvalvalvalvalvalvalval=$valvalvalvalvalvalval\n\
    \n  local -n maxidxvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalvalval\n  local\
    \ -n idxvalvalvalvalvalvalvalval=$idxvalvalvalvalvalvalvalval\n  local -n valvalvalvalvalvalvalval=$valvalvalvalvalvalvalval\n\
    \n  local -n maxidxvalvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalvalvalval\n\
    \  local -n idxvalvalvalvalvalvalvalvalval=$idxvalvalvalvalvalvalvalvalval\n \
    \ local -n valvalvalval\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps815wy7t.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmps815wy7t.sh: line 15: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 16: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 17: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 18: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 20: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 21: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 22: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 23: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 25: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 26: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 27: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 29: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 30: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 31: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 33: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 34: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 35: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 37: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 38: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 39: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 41: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 42: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 43: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 45: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 46: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 47: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 49: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 50: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 51: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 53: local: `'': not a valid identifier

    /tmp/tmps815wy7t.sh: line 54: local: '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local -a result=()\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local \n}\n\ncandidate() {\n    can_arrange \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n  \
    \  [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8\
    \ 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw0u01otf.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -n max=$2\n    local -n idx=$3\n\
    \    local -n val=$4\n\n    local -n maxidx=$max\n    local -n maxval=$max\n \
    \   local -n maxidxval=$max\n\n    local -n idxval=$idx\n    local -n idxval=$idx\n\
    \n    local -n valval=$val\n    local -n valval=$val\n\n    local -n idxvalval=$idxval\n\
    \    local -n idxvalval=$idxval\n\n    local -n maxidxvalval=$maxidxval\n    local\
    \ -n maxidxvalval=$maxidxval\n\n    local -n maxvalval=$maxvalval\n    local -n\
    \ maxvalval=$maxvalval\n\n    local -n maxidxvalvalval=$maxidxvalval\n    local\
    \ -n maxidxvalvalval=$maxidxvalval\n\n    local -n maxidxvalvalval=$maxidxvalvalval\n\
    \    local -n maxidxvalvalval=$maxidxvalvalval\n\n    local -n maxidxvalvalvalval=$maxidxvalvalval\n\
    \    local -n maxidxvalvalvalval=$maxidxvalvalvalval\n\n    local -n maxidxvalvalvalvalval=$maxidxvalvalvalval\n\
    \    local -n maxidxvalvalvalvalval=$maxidxvalvalvalvalval\n\n    local -n maxidxvalvalvalvalvalval=$maxidxvalvalvalvalval\n\
    \    local -n maxidxvalvalvalvalvalval=$maxidxvalvalvalvalvalval\n\n    local\
    \ -n maxidxvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalval\n    local -n maxidxvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalvalval\n\
    \n    local -n maxidxvalvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalvalvalval\n\
    \    local -n maxidxvalvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalvalvalvalval\n\
    \n    local -n maxidxvalvalvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalvalvalvalvalval\n\
    \    local -n maxidxvalvalvalvalvalvalvalvalvalval=$maxidxvalvalvalvalvalvalvalvalvalvalvalval\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdyjcq5ur.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpdyjcq5ur.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 41: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 42: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 44: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 45: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 47: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 48: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 50: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 51: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 53: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 54: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 56: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 57: local: `'': not a valid identifier

    /tmp/tmpdyjcq5ur.sh: line 59: local: '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a sorted=()\n  local -a result=()\n\
    \  local -a last=()\n  local -a lastindex=()\n  local -a lastvalue=()\n  local\
    \ -a lastvalueindex=()\n  local -a lastvaluevalue=()\n  local -a lastvaluevalueindex=()\n\
    \  local -a lastvaluevaluevalue=()\n  local -a lastvaluevaluevalueindex=()\n \
    \ local -a lastvaluevaluevaluevalue=()\n  local -a lastvaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevalue=()\n  local -a lastvaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevalue=()\n  local -a lastvaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevalue=()\n  local -a lastvaluevaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevalue=()\n  local -a lastvaluevaluevaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevalue=()\n  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevalue=()\n  local\
    \ -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevalueindex=()\n  local -a\
    \ lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalue=()\n  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalue=()\n \
    \ local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalue=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalue=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalue=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalueindex=()\n\
    \  local -a lastvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalue=()\n\
    \  local -\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp5nq6upe.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=0\n  while [ \"$index\" -lt \"$#\" ] && [ \"$max\" -lt \"$array[$index]\"\
    \ ]; do\n    local nextIndex=$((index+1))\n    local nextMax=$((max+array[$nextIndex]))\n\
    \    if [ \"$nextMax\" -gt \"$max\" ]; then\n      max=$nextMax\n      maxIndex=$nextIndex\n\
    \    fi\n    index=$(expr $nextIndex + 1)\n  done\n  echo \"$maxIndex\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpubm0wwpc.sh: line 18: [: 1 2 4 3 5[0]: integer expression expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n len=\"$#\" # length of arrange\n  local -n maxlen=\"\
    $#\" # length of max\n  local -n maxidx=\"$#\" # index of max\n  local -n maxval=\"\
    $#\" # value of max\n  local -n maxval2=\"$#\" # value of max\n  local -n maxval3=\"\
    $#\" # value of max\n  local -n maxval4=\"$#\" # value of max\n  local -n maxval5=\"\
    $#\" # value of max\n  local -n maxval6=\"$#\" # value of max\n  local -n maxval7=\"\
    $#\" # value of max\n  local -n maxval8=\"$#\" # value of max\n  local -n maxval9=\"\
    $#\" # value of max\n  local -n maxval10=\"$#\" # value of max\n  local -n maxval11=\"\
    $#\" # value of max\n  local -n maxval12=\"$#\" # value of max\n  local -n maxval13=\"\
    $#\" # value of max\n  local -n maxval14=\"$#\" # value of max\n  local -n maxval15=\"\
    $#\" # value of max\n  local -n maxval16=\"$#\" # value of max\n  local -n maxval17=\"\
    $#\" # value of max\n  local -n maxval18=\"$#\" # value of max\n  local -n maxval19=\"\
    $#\" # value of max\n  local -n maxval20=\"$#\" # value of max\n  local -n maxval21=\"\
    $#\" # value of max\n  local -n maxval22=\"$#\" # value of max\n  local -n maxval23=\"\
    $#\" # value of max\n  local -n maxval24=\"$#\" # value of max\n  local -n maxval25=\"\
    $#\" # value of max\n  local -n maxval26=\"$#\" # value of max\n  local -n maxval27=\"\
    $#\" # value of max\n  local -n maxval28=\"$#\" # value of max\n  local -n maxval29=\"\
    $#\" # value of max\n  local -n maxval30=\"$#\" # value of max\n  local -n maxval31=\"\
    $#\" # value of max\n  local -n maxval32=\"$#\" # \n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5jc627e4.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp5jc627e4.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp5jc627e4.sh: line 18: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 19: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 20: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 21: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 22: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 23: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 24: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 25: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 26: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 27: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 28: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 29: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 30: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 31: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 32: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 33: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 36: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 37: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 38: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 39: local: `1'': invalid variable name for name reference

    /tmp/tmp5jc627e4.sh: line 40: local: `1'': invalid variable name for'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n arrange_index=\"$2\"\n\
    \  local -n arrange_max=\"$3\"\n  local -n arrange_min=\"$4\"\n  local -n arrange_max_index=\"\
    $5\"\n  local -n arrange_min_index=\"$6\"\n  local -n arrange_max_val=\"$7\"\n\
    \  local -n arrange_min_val=\"$8\"\n  local -n arrange_max_val_index=\"$9\"\n\
    \  local -n arrange_min_val_index=\"$10\"\n  local -n arrange_max_val_val=\"$11\"\
    \n  local -n arrange_min_val_val=\"$12\"\n  local -n arrange_max_val_val_index=\"\
    $13\"\n  local -n arrange_min_val_val_index=\"$14\"\n  local -n arrange_max_val_val_val=\"\
    $15\"\n  local -n arrange_min_val_val_val_index=\"$16\"\n  local -n arrange_max_val_val_val_val=\"\
    $17\"\n  local -n arrange_min_val_val_val_val_index=\"$18\"\n  local -n arrange_max_val_val_val_val_val=\"\
    $19\"\n  local -n arrange_min_val_val_val_val_val_index=\"$20\"\n  local -n arrange_max_val_val_val_val_val_val=\"\
    $21\"\n  local -n arrange_min_val_val_val_val_val_val_index=\"$22\"\n  local -n\
    \ arrange_max_val_val_val_val_val_val_val=\"$23\"\n  local -n arrange_min_val_val_val_val_val_val_val_index=\"\
    $24\"\n  local -n arrange_max_val_val_val_val_val_val_val=\"$25\"\n  local -n\
    \ arrange_min_val_val_val_val_val_val_val_index=\"$26\"\n  local -n arrange_max_val_val_val_val_val_val_val_val=\"\
    $27\"\n  local -n arrange_min_val_val_val_val_val_val_val_index=\"$28\"\n  local\
    \ -n arrange_max_val_val_val_val_val_val_val_val=\"$29\"\n  local -n arrange_min_val_val_val_val_val_val_val_val_index=\"\
    $30\"\n  local -n arrange_max_val_val_val_val_val_val_val_val=\"$31\"\n  local\
    \ -n arrange_min_val_val_val_val_val_val_val_val_index=\"$32\"\n  local -n arrange_max_val_val_val_val_val_val_val_val=\"\
    $33\"\n  local -n arrange_min_val_val_val_val_\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz2ld4ys0.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpz2ld4ys0.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpz2ld4ys0.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpz2ld4ys0.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpz2ld4ys0.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpz2ld4ys0.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpz2ld4ys0.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpz2ld4ys0.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpz2ld4ys0.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpz2ld4ys0.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpz2ld4ys0.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpz2ld4ys0.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpz2ld4ys0.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmpz2ld4ys0.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmpz2ld4ys0.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmpz2ld4ys0.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmpz2ld4ys0.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arrange=\"$1\"\n    local -n max=\"$2\"\n    local\
    \ -n i\n    local -n maxi\n    local -n maxj\n    local -n maxk\n    local -n\
    \ maxl\n    local -n maxm\n    local -n maxn\n    local -n maxo\n    local -n\
    \ maxp\n    local -n maxq\n    local -n maxr\n    local -n maxs\n    local -n\
    \ maxt\n    local -n maxu\n    local -n maxv\n    local -n maxw\n    local -n\
    \ maxx\n    local -n maxy\n    local -n maxz\n    local -n maxa\n    local -n\
    \ maxb\n    local -n maxc\n    local -n maxd\n    local -n maxe\n    local -n\
    \ maxf\n    local -n maxg\n    local -n maxh\n    local -n maxi\n    local -n\
    \ maxj\n    local -n maxk\n    local -n maxl\n    local -n maxm\n    local -n\
    \ maxn\n    local -n maxo\n    local -n maxp\n    local -n maxq\n    local -n\
    \ maxr\n    local -n maxs\n    local -n maxt\n    local -n maxu\n    local -n\
    \ maxv\n    local -n maxw\n    local -n maxx\n    local -n maxy\n    local -n\
    \ maxz\n    local -n maxa\n    local -n maxb\n    local -n maxc\n    local -n\
    \ maxd\n    local -n maxe\n    local -n maxf\n    local -n maxg\n    local -n\
    \ maxh\n    local -n maxi\n    local -n maxj\n    local -n maxk\n    local -n\
    \ maxl\n    local -n maxm\n    local -n maxn\n    local -n maxo\n    local -n\
    \ maxp\n    local -n maxq\n    local -n maxr\n    local -n maxs\n    local -n\
    \ maxt\n    local -n maxu\n    local -n maxv\n    local -n maxw\n    local -n\
    \ maxx\n    local -n maxy\n    local -n maxz\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfod5bkoy.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpfod5bkoy.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n maxidx=$5\n\n  local -n maxidx=$6\n  local -n maxval=$7\n\
    \n  local -n idx=$8\n  local -n val=$9\n\n  local -n idx=$10\n  local -n val=$11\n\
    \n  local -n idx=$12\n  local -n val=$13\n\n  local -n idx=$14\n  local -n val=$15\n\
    \n  local -n idx=$16\n  local -n val=$17\n\n  local -n idx=$18\n  local -n val=$19\n\
    \n  local -n idx=$20\n  local -n val=$21\n\n  local -n idx=$22\n  local -n val=$23\n\
    \n  local -n idx=$24\n  local -n val=$25\n\n  local -n idx=$26\n  local -n val=$27\n\
    \n  local -n idx=$28\n  local -n val=$29\n\n  local -n idx=$30\n  local -n val=$31\n\
    \n  local -n idx=$32\n  local -n val=$33\n\n  local -n idx=$34\n  local -n val=$35\n\
    \n  local -n idx=$36\n  local -n val=$37\n\n  local -n idx=$38\n  local -n val=$39\n\
    \n  local -n idx=$40\n  local -n val=$41\n\n  local -n idx=$42\n  local -n val=$43\n\
    \n  local -n idx=$44\n  local -n val=$45\n\n  local -n idx=$46\n  local -n val=$47\n\
    \n  local -n idx=$48\n  local -n val=$49\n\n  local -n idx=$50\n  local -n val=$51\n\
    \n  local -n idx=$52\n  local -n val=$53\n\n  local -n idx=$54\n  local -n val=$55\n\
    \n  local -n idx=$56\n  local -n val=$57\n\n  local -n idx=$58\n  local -n val=$59\n\
    \n  local -n idx=$60\n  local -n val=$61\n\n  local -n idx=$62\n  local -n val=$63\n\
    \n  local -n idx\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprwxh_sly.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmprwxh_sly.sh: line 15: local: `'': not a valid identifier

    /tmp/tmprwxh_sly.sh: line 16: local: `'': not a valid identifier

    /tmp/tmprwxh_sly.sh: line 17: local: `'': not a valid identifier

    /tmp/tmprwxh_sly.sh: line 18: local: `'': not a valid identifier

    /tmp/tmprwxh_sly.sh: line 20: local: `'': not a valid identifier

    /tmp/tmprwxh_sly.sh: line 21: local: `'': not a valid identifier

    /tmp/tmprwxh_sly.sh: line 23: local: `'': not a valid identifier

    /tmp/tmprwxh_sly.sh: line 24: local: `'': not a valid identifier

    /tmp/tmprwxh_sly.sh: line 26: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 27: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 29: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 30: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 32: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 33: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 35: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 36: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 38: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 39: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmprwxh_sly.sh: line 41: local: `0'': invalid variable name for name reference

    /tmp/tmprwxh_sly.sh: line 42: local: `1'': invalid variable name for name reference

    /tmp/tmprwxh_sly.sh: line 44: local: `2'': invalid variable name for name reference

    /tmp/tmprwxh_sly.sh: line 45: local: `3'': invalid variable name for name reference

    /tmp/tmprwxh_sly.sh: line 47: local: `4'': invalid variable name for name reference

    /tmp/tmprwxh_sly.sh: line 48: local: `5'': invalid variable name for name reference

    /tmp/tmprwxh_sly.sh: line 5'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=($1)\n  local max=$((${#arr[@]} - 1))\n  local i\n\
    \  for i in $(seq 0 $max); do\n    if [[ ${arr[i]} -gt ${arr[i-1]} ]]; then\n\
    \      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -n array=$2\n  local -n largest=$3\n\
    \  local -n index=$4\n  local -n element=$5\n\n  local -n i\n  local -n j\n  local\
    \ -n k\n  local -n l\n  local -n m\n  local -n n\n\n  local -n max=$(( ${#array[@]}\
    \ - 1 ))\n\n  for i in $(seq 0 $max); do\n    local -n element=$array[$i]\n  \
    \  local -n index=$i\n\n    for j in $(seq 0 $(( ${#array[@]} - 1 )-1)); do\n\
    \      local -n element=$array[$j]\n      local -n index=$j\n\n      if (( index\
    \ > i )); then\n        break\n      fi\n    done\n\n    if (( index > i )); then\n\
    \      break\n    fi\n\n    local -n element=$array[$i]\n    local -n index=$i\n\
    \n    for k in $(seq 0 $(( ${#array[@]} - 1 )-1)); do\n      local -n element=$array[$k]\n\
    \      local -n index=$k\n\n      if (( index > i )); then\n        break\n  \
    \    fi\n    done\n\n    if (( index > i )); then\n      break\n    fi\n\n   \
    \ local -n element=$array[$i]\n    local -n index=$i\n\n    for l in $(seq 0 $((\
    \ ${#array[@]} - 1 )-1)); do\n      local -n element=$array[$l]\n      local -n\
    \ index=$l\n\n      if (( index > i )); then\n        break\n      fi\n    done\n\
    \n    if (( index > i )); then\n      break\n    fi\n\n    local -n element=$array[$i]\n\
    \    local -n index=$i\n\n    for m in $(seq 0 $(( ${#array[@]} - 1 )-1)); do\n\
    \      local -n element=$array[$m]\n      local -n index=$m\n\n      if (( index\
    \ > i )); then\n        break\n      fi\n    done\n\n    if (( index > i )); then\n\
    \      break\n    fi\n\n    local -n element=$array[$i]\n    local -n index=$i\n\
    \n    for n in $(seq 0 $(( ${#array[@]} - 1 )-1)); do\n      local -n element=$array[$n]\n\
    \      local -n index\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsigi3wcp.sh: line 100: syntax error near unexpected token `}''

    /tmp/tmpsigi3wcp.sh: line 100: `}''

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -n max=$2\n    local -n i=$((${#arr[@]}\
    \ - 1))\n    local -n j=$((${#arr[@]} - 1))\n    local -n maxIndex=$((${#arr[@]}\
    \ - 1))\n\n    while (( ${#arr[@]} > 0 )); do\n        if (( ${arr[i]} <= ${arr[j]}\
    \ )); then\n            (( maxIndex = i ))\n            (( i = j - 1 ))\n    \
    \    else\n            (( j = i - 1 ))\n        fi\n    done\n    echo ${maxIndex}\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg8o0u34k.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpg8o0u34k.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpg8o0u34k.sh: line 16: local: `-1'': invalid variable name for name reference

    /tmp/tmpg8o0u34k.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmpg8o0u34k.sh: line 18: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n\
    \  local maxIndex=$((${#array}-1))\n  while (( ${#array} > 0 )); do\n    local\
    \ element=${array[$index]};\n    local nextIndex=$((index+1));\n    if [[ ${element}\
    \ -gt ${array[$nextIndex]} ]]; then\n      maxIndex=$nextIndex\n      max=${element}\n\
    \    fi\n    index=${nextIndex}\n  done\n  echo \"${maxIndex}\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=27 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660044093
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -n max=$2\n\
    \  local -i maxidx=0\n  local -i idx=0\n  local -i len=${#arr[@]}\n  local -i\
    \ i\n  local val\n  local -n last=$((len-1))\n  local -n first=$((len-2))\n  local\
    \ -n prev=$((len-3))\n  local -n next=$((len-4))\n  local -n lastval\n  local\
    \ -n firstval\n  local -n prevval\n  local -n nextval\n  local -n lastidx\n  local\
    \ -n firstidx\n  local -n previdx\n  local -n nextidx\n  local -n lastvalidx\n\
    \  local -n firstvalidx\n  local -n prevvalidx\n  local -n nextvalidx\n  local\
    \ -n lastidxidx\n  local -n firstidxidx\n  local -n previdxidx\n  local -n nextidxidx\n\
    \  local -n lastvalidxidx\n  local -n firstvalidxidx\n  local -n prevvalidxidx\n\
    \  local -n nextvalidxidx\n  local -n lastidxidxidx\n  local -n firstidxidxidx\n\
    \  local -n previdxidxidx\n  local -n nextidxidxidx\n  local -n lastvalidxidxidx\n\
    \  local -n firstvalidxidxidx\n  local -n prevvalidxidxidx\n  local -n nextvalidxidxidx\n\
    \  local -n lastidxidxidxidx\n  local -n firstidxidxidxidx\n  local -n previdxidxidxidx\n\
    \  local -n nextidxidxidxidx\n  local -n lastvalidxidxidx\n  local -n firstvalidxidxidx\n\
    \  local -n prevvalidxidxidx\n  local -n nextvalidxidxidx\n  local -n lastidxidxidxidx\n\
    \  local -n firstidxidxidxidx\n  local -n previdxidxidxidx\n  local -n nextidxidxidxidx\n\
    \  local -n lastvalidxidxidx\n  local -n firstvalidxidxidx\n  local -n prevvalidxidxidx\n\
    \  local -n nextvalidxidxidx\n  local -n lastidxidxidxidx\n  local -n firstidxidxidxidx\n\
    \  \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\")\
    \ = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6q9cu594.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp6q9cu594.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp6q9cu594.sh: line 22: local: `-1'': invalid variable name for name reference

    /tmp/tmp6q9cu594.sh: line 23: local: `-2'': invalid variable name for name reference

    /tmp/tmp6q9cu594.sh: line 24: local: `-3'': invalid variable name for name reference

    /tmp/tmp6q9cu594.sh: line 25: local: `-4'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -i max=0\n \
    \ local -i i\n  local -n elem\n  for ((i=0; i<${#arr[@]}; i++)); do\n    elem=${arr[i]}\n\
    \    sorted+=(\"$elem\")\n  done\n  sorted=($(sort <<<\"${sorted[*]}\"))\n  for\
    \ ((i=0; i<${#sorted[@]}; i++)); do\n    if [[ ${sorted[i]} -gt ${sorted[i-1]}\
    \ ]]; then\n      max=$i\n    fi\n  done\n  if [[ ${max} -eq 0 ]]; then\n    echo\
    \ \"-1\"\n  else\n    echo \"${max}\"\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp30ku1fxl.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -a sorted=()\n  local -a indices=()\n\
    \  local -a max=0\n  local -i i\n  local -n maxindex\n  local -n maxval\n  local\
    \ -n maxpos\n  local -n maxpos2\n  local -n maxpos3\n  local -n maxpos4\n  local\
    \ -n maxpos5\n  local -n maxpos6\n  local -n maxpos7\n  local -n maxpos8\n  local\
    \ -n maxpos9\n  local -n maxpos10\n  local -n maxpos11\n  local -n maxpos12\n\
    \  local -n maxpos13\n  local -n maxpos14\n  local -n maxpos15\n  local -n maxpos16\n\
    \  local -n maxpos17\n  local -n maxpos18\n  local -n maxpos19\n  local -n maxpos20\n\
    \  local -n maxpos21\n  local -n maxpos22\n  local -n maxpos23\n  local -n maxpos24\n\
    \  local -n maxpos25\n  local -n maxpos26\n  local -n maxpos27\n  local -n maxpos28\n\
    \  local -n maxpos29\n  local -n maxpos30\n  local -n maxpos31\n  local -n maxpos32\n\
    \  local -n maxpos33\n  local -n maxpos34\n  local -n maxpos35\n  local -n maxpos36\n\
    \  local -n maxpos37\n  local -n maxpos38\n  local -n maxpos39\n  local -n maxpos40\n\
    \  local -n maxpos41\n  local -n maxpos42\n  local -n maxpos43\n  local -n maxpos44\n\
    \  local -n maxpos45\n  local -n maxpos46\n  local -n maxpos47\n  local -n maxpos48\n\
    \  local -n maxpos49\n  local -n maxpos50\n  local -n maxpos51\n  local -n maxpos52\n\
    \  local -n maxpos53\n  local -n maxpos54\n  local -n maxpos55\n  local -n maxpos56\n\
    \  local -n maxpos57\n  local -n maxpos\n}\n\ncandidate() {\n    can_arrange \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7\
    \ 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf61roq9p.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=-1\n  while [ \"$index\" -lt \"${#array}\" ]; do\n    local element=\"\
    ${array[$index]}\"\n    if [ \"$element\" -gt \"$max\" ]; then\n      max=\"$element\"\
    \n      maxIndex=\"$index\"\n    fi\n    index=$(expr \"$index\" + 1)\n  done\n\
    \  echo \"$maxIndex\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpysbtil1d.sh: line 20: [: 1 2 4 3 5: integer expression expected

    /tmp/tmpysbtil1d.sh: line 20: [: : integer expression expected

    /tmp/tmpysbtil1d.sh: line 20: [: : integer expression expected

    /tmp/tmpysbtil1d.sh: line 20: [: : integer expression expected

    /tmp/tmpysbtil1d.sh: line 20: [: : integer expression expected

    /tmp/tmpysbtil1d.sh: line 20: [: : integer expression expected

    /tmp/tmpysbtil1d.sh: line 20: [: : integer expression expected

    /tmp/tmpysbtil1d.sh: line 20: [: : integer expression expected

    /tmp/tmpysbtil1d.sh: line 20: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ k\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local val\n\
    \  local idx\n  local len\n  local maxidx\n  local maxval\n  local val\n  local\
    \ idx\n  local len\n  local maxidx\n  local maxval\n  local val\n  local idx\n\
    \  local len\n  local maxidx\n  local maxval\n  local val\n  local idx\n  local\
    \ len\n  local maxidx\n  local maxval\n  local val\n  local idx\n  local len\n\
    \  local maxidx\n  local maxval\n  local val\n  local idx\n  local len\n  local\
    \ maxidx\n  local maxval\n  local val\n  local idx\n  local len\n  local maxidx\n\
    \  local maxval\n  local val\n  local idx\n  local len\n  local maxidx\n  local\
    \ maxval\n  local val\n  local idx\n  local len\n  local maxidx\n  local maxval\n\
    \  local val\n  local idx\n  local len\n  local maxidx\n  local maxval\n  local\
    \ val\n  local idx\n  local len\n  local maxidx\n  local maxval\n  local val\n\
    \  local idx\n  local len\n  local maxidx\n  local maxval\n  local val\n  local\
    \ idx\n  local len\n  local maxidx\n  local maxval\n  local val\n  local idx\n\
    \  local len\n  local maxidx\n  local maxval\n  local val\n  local idx\n  local\
    \ len\n  local maxidx\n  local maxval\n  local val\n  local idx\n  local len\n\
    \  local maxidx\n  local maxval\n  local val\n  local idx\n  local len\n  local\
    \ maxidx\n  local maxval\n  local val\n  local idx\n  local len\n  local maxidx\n\
    \  local maxval\n  local val\n  local idx\n  local len\n  local maxidx\n  local\
    \ maxval\n  local val\n  local idx\n  local len\n  local maxidx\n  local maxval\n\
    \  local val\n  local idx\n  local len\n  local maxidx\n  local maxval\n  local\
    \ val\n  \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo3c41u31.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  local -n val=$2\n  local -n val2=$3\n  local -n val3=$4\n  local -n\
    \ val4=$5\n  local -n val5=$6\n  local -n val6=$7\n  local -n val7=$8\n  local\
    \ -n val8=$9\n  local -n val9=${10}\n  local -n val10=${11}\n  local -n val11=${12}\n\
    \  local -n val12=${13}\n  local -n val13=${14}\n  local -n val14=${15}\n  local\
    \ -n val15=${16}\n  local -n val16=${17}\n  local -n val17=${18}\n  local -n val18=${19}\n\
    \  local -n val19=${20}\n  local -n val20=${21}\n  local -n val21=${22}\n  local\
    \ -n val22=${23}\n  local -n val23=${24}\n  local -n val24=${25}\n  local -n val25=${26}\n\
    \  local -n val26=${27}\n  local -n val27=${28}\n  local -n val28=${29}\n  local\
    \ -n val29=${30}\n  local -n val30=${31}\n  local -n val31=${32}\n  local -n val32=${33}\n\
    \  local -n val33=${34}\n  local -n val34=${35}\n  local -n val35=${36}\n  local\
    \ -n val36=${37}\n  local -n val37=${38}\n  local -n val38=${39}\n  local -n val39=${40}\n\
    \  local -n val40=${41}\n  local -n val41=${42}\n  local -n val42=${43}\n  local\
    \ -n val43=${44}\n  local -n val44=${45}\n  local -n val45=${46}\n  local -n val46=${47}\n\
    \  local -n val47=${48}\n  local -n val48=${49}\n  local -n val49=${50}\n  \n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprezq6_8h.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmprezq6_8h.sh: line 17: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 18: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 19: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 20: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 21: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 22: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 23: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 24: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 25: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 26: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 27: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 28: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 29: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 30: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 31: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 32: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 33: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 34: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 35: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 36: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 37: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 38: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 39: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 40: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 41: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 42: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 43: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 44: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 45: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 46: local: `'': not a valid identifier

    /tmp/tmprezq6_8h.sh: line 47: local: '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arrange=$1\n    local -n arrange_index=$2\n    local\
    \ -n arrange_prev=$3\n    local -n arrange_next=$4\n    local -n arrange_result=$5\n\
    \    local -n arrange_result2=$6\n    local -n arrange_result3=$7\n    local -n\
    \ arrange_result4=$8\n    local -n arrange_result5=$9\n    local -n arrange_result6=$10\n\
    \    local -n arrange_result7=$11\n    local -n arrange_result8=$12\n    local\
    \ -n arrange_result9=$13\n    local -n arrange_result10=$14\n    local -n arrange_result11=$15\n\
    \    local -n arrange_result12=$16\n    local -n arrange_result13=$17\n    local\
    \ -n arrange_result14=$18\n    local -n arrange_result15=$19\n    local -n arrange_result16=$20\n\
    \    local -n arrange_result17=$21\n    local -n arrange_result18=$22\n    local\
    \ -n arrange_result19=$23\n    local -n arrange_result20=$24\n    local -n arrange_result21=$25\n\
    \    local -n arrange_result22=$26\n    local -n arrange_result23=$27\n    local\
    \ -n arrange_result24=$28\n    local -n arrange_result25=$29\n    local -n arrange_result26=$30\n\
    \    local -n arrange_result27=$31\n    local -n arrange_result28=$32\n    local\
    \ -n arrange_result29=$33\n    local -n arrange_result30=$34\n    local -n arrange_result31=$35\n\
    \    local -n arrange_result32=$36\n    local -n arrange_result33=$37\n    local\
    \ -n arrange_result34=$38\n    local -n arrange_result35=$39\n    local -n arrange_result36=$40\n\
    \    local -n arrange_result37=$41\n    local -n arrange_result38=$42\n    local\
    \ -n arrange_result39=$43\n    local -n arrange_result40=$44\n    local -n arrange_result41=$45\n\
    \    local -n arrange_result42=$46\n    local -n arrange_result43=$47\n    \n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_8k7wiyc.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp_8k7wiyc.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp_8k7wiyc.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp_8k7wiyc.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp_8k7wiyc.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp_8k7wiyc.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp_8k7wiyc.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp_8k7wiyc.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp_8k7wiyc.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp_8k7wiyc.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp_8k7wiyc.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmp_8k7wiyc.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmp_8k7wiyc.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmp_8k7wiyc.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmp_8k7wiyc.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmp_8k7wiyc.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmp_8k7wiyc.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n\
    \    local -i i\n    local -n elem\n    for (( i=1; i<=$max; i++ )); do\n    \
    \    elem=\"${arr[i]}\"\n        if [[ ${arr[$(( i - 1 ))]} -gt $elem ]]; then\n\
    \            max=i\n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbnsz6z42.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  while (( index < max )); do\n    local element=${array:$index:1}\n\
    \    if [[ ${element} -gt $(( ${array:$(( index + 1 )):1} )) ]]; then\n      max=$index\n\
    \    fi\n    (( index = index + 1 ))\n  done\n  if (( max < 0 )); then\n    echo\
    \ \"-1\"\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=$((\
    \ ${#array} -1 ))\n    local element\n    while (( index < max )); do\n      \
    \  element=\"${array[index]}\"\n        if [[ ${array[index+1]} -gt ${element}\
    \ ]]; then\n            (( index++ ))\n        else\n            echo \"${element}\"\
    \n            return ${index}\n        fi\n    done\n    echo \"-1\"\n    return\
    \ -1\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxdnzf_oq.sh: line 20: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  local -a result=()\n  for (( i=1; i<=$max; i++ )); do\n    local j=$((\
    \ i - 1 ))\n    local k=$(( i - 1 ))\n    while (( k > 0 )); do\n      if [[ ${arr[j]}\
    \ -gt ${arr[k]} ]]; then\n        arr[k]=${arr[j]}\n        j=$(( k - 1 ))\n \
    \     else\n        k=$(( k - 1 ))\n      fi\n    done\n    arr[$i]=${arr[i]}\n\
    \    result+=(\"${arr[i]}\")\n  done\n  printf '%s\\n' \"${result[@]}\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqf6vmdno.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -a candidates\n\
    \  local -a candidate\n  local -a candidate_index\n  local -a candidate_indexes\n\
    \  local -a candidates\n  local -a candidate\n  local -a candidate_index\n  local\
    \ -a candidate_indexes\n  local -a candidates\n  local -a candidate\n  local -a\
    \ candidate_index\n  local -a candidate_indexes\n  local -a candidates\n  local\
    \ -a candidate\n  local -a candidate_index\n  local -a candidate_indexes\n  local\
    \ -a candidates\n  local -a candidate\n  local -a candidate_index\n  local -a\
    \ candidate_indexes\n  local -a candidates\n  local -a candidate\n  local -a candidate_index\n\
    \  local -a candidate_indexes\n  local -a candidates\n  local -a candidate\n \
    \ local -a candidate_index\n  local -a candidate_indexes\n  local -a candidates\n\
    \  local -a candidate\n  local -a candidate_index\n  local -a candidate_indexes\n\
    \  local -a candidates\n  local -a candidate\n  local -a candidate_index\n  local\
    \ -a candidate_indexes\n  local -a candidates\n  local -a candidate\n  local -a\
    \ candidate_index\n  local -a candidate_indexes\n  local -a candidates\n  local\
    \ -a candidate\n  local -a candidate_index\n  local -a candidate_indexes\n  local\
    \ -a candidates\n  local -a candidate\n  local -a candidate_index\n  local -a\
    \ candidate_indexes\n  local -a candidates\n  local -a candidate\n  local -a candidate_index\n\
    \  local -a candidate_indexes\n  local -a candidates\n  local -a candidate\n \
    \ local -a candidate_index\n  local -a candidate_indexes\n  local -a candidates\n\
    \  local -a candidate\n  local -a candidate_index\n  local -a candidate_indexes\n\
    \  local -a candidates\n  local -a candidate\n  local -a candidate_index\n  local\
    \ -a candidate_indexes\n  local -a candidates\n  local -a candidate\n  local -a\
    \ candidate_index\n  local -a candidate_indexes\n  local -a candidates\n  local\
    \ -a candidate\n  local -a candidate_index\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp51mcfhiw.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local -i max=$(( ${#arr[@]} - 1 ))\n\
    \    local -i i\n    local val\n    for (( i = 1 ; i < ${#arr[@]} ; ++i )); do\n\
    \        val=${arr[$i]}\n        if (( val > max )); then\n            max=val\n\
    \        fi\n    done\n    if (( max > 0 )); then\n        echo ${max}\n    else\n\
    \        echo -1\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1hojh9db.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arr=()\n  local -i max=0\n\
    \  local -i i\n  local j\n  local k\n  local -n maxval=$2\n  local -n maxidx=$3\n\
    \  local -n maxval2=$4\n  local -n maxidx2=$5\n  local -n maxval3=$6\n  local\
    \ -n maxidx3=$7\n  local -n maxval4=$8\n  local -n maxidx4=$9\n  local -n maxval5=$10\n\
    \  local -n maxidx5=$11\n  local -n maxval6=$12\n  local -n maxidx6=$13\n  local\
    \ -n maxval7=$14\n  local -n maxidx7=$15\n  local -n maxval8=$16\n  local -n maxidx8=$17\n\
    \  local -n maxval9=$18\n  local -n maxidx9=$19\n  local -n maxval10=$20\n  local\
    \ -n maxidx10=$21\n  local -n maxval11=$22\n  local -n maxidx11=$23\n  local -n\
    \ maxval12=$24\n  local -n maxidx12=$25\n  local -n maxval13=$26\n  local -n maxidx13=$27\n\
    \  local -n maxval14=$28\n  local -n maxidx14=$29\n  local -n maxval15=$30\n \
    \ local -n maxidx15=$31\n  local -n maxval16=$32\n  local -n maxidx16=$33\n  local\
    \ -n maxval17=$34\n  local -n maxidx17=$35\n  local -n maxval18=$36\n  local -n\
    \ maxidx18=$37\n  local -n maxval19=$38\n  local -n maxidx19=$39\n  local -n maxval20=$40\n\
    \  local -n maxidx20=$41\n  local -n maxval21=$42\n  local -n maxidx21=$43\n \
    \ local -n maxval22=$44\n  local -n maxidx22=$45\n  local -n maxval23=$46\n  local\
    \ -n maxidx23=$47\n  local -n maxval24=$48\n  local -n maxidx24=$\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5jwpo0za.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp5jwpo0za.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp5jwpo0za.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp5jwpo0za.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp5jwpo0za.sh: line 23: local: `'': not a valid identifier

    /tmp/tmp5jwpo0za.sh: line 24: local: `'': not a valid identifier

    /tmp/tmp5jwpo0za.sh: line 25: local: `'': not a valid identifier

    /tmp/tmp5jwpo0za.sh: line 26: local: `'': not a valid identifier

    /tmp/tmp5jwpo0za.sh: line 27: local: `'': not a valid identifier

    /tmp/tmp5jwpo0za.sh: line 28: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 29: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 30: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 31: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 32: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 33: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 34: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 35: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 36: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 37: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp5jwpo0za.sh: line 38: local: `0'': invalid variable name for name reference

    /tmp/tmp5jwpo0za.sh: line 39: local: `1'': invalid variable name for name reference

    /tmp/tmp5jwpo0za.sh: line 40: local: `2'': invalid variable name for name reference

    /tmp/tmp5jwpo0za.sh: line 41: local: `3'': invalid variable name for name reference

    /tmp/tmp5jwpo0za.sh: line 42: local: `4'': invalid variable name for name reference

    /tmp/tmp5jwpo0za.sh: line 43: local: `5'': invalid variable name for name reference

    /tmp/tmp5jwpo0za.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  local -n elem\n  for (( i=1; i<=$max; i++ )); do\n    elem=${arr[$i]}\n\
    \    if [[ $elem -gt $(( ${arr[$(( i - 1 ))]} + 1 )) ]]; then\n      max=$i\n\
    \    fi\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    can_arrange \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate\
    \ \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk4y_zck9.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arr=$1\n    local max=$2\n    local i\n    local\
    \ j\n    local k\n    local len\n\n    len=${#arr[@]}\n    if [ $len -gt 0 ];\
    \ then\n        local maxIndex=0\n        local maxVal=${arr[0]}\n        for\
    \ ((i=1; i<len; i++)); do\n            if [[ ${arr[i]} -gt $maxVal ]]; then\n\
    \                maxVal=${arr[i]}\n                maxIndex=$i\n            fi\n\
    \        done\n        if [[ $maxIndex -gt 0 ]]; then\n            for ((j=1;\
    \ j<len; j++)); do\n                if [[ ${arr[j]} -eq $maxVal ]]; then\n   \
    \                 maxIndex=$j\n                    break\n                fi\n\
    \            done\n        fi\n        if [[ $maxIndex -gt 0 ]]; then\n      \
    \      for ((k=1; k<len; k++)); do\n                if [[ ${arr[k]} -eq $maxVal\
    \ ]]; then\n                    maxIndex=$k\n                    break\n     \
    \           fi\n            done\n        fi\n        if [[ $maxIndex -gt 0 ]];\
    \ then\n            echo \"$maxIndex\"\n        else\n            echo \"-1\"\n\
    \        fi\n    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0h47a0l2.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -n max=$2\n\
    \  local -n maxidx=$3\n  local -n maxval=$4\n  local -n idx=$5\n  local -n val=$6\n\
    \  local -n idx2=$7\n  local -n val2=$8\n  local -n idx3=$9\n  local -n val3=${10}\n\
    \  local -n idx4=${11}\n  local -n val4=${12}\n  local -n idx5=${13}\n  local\
    \ -n val5=${14}\n  local -n idx6=${15}\n  local -n val6=${16}\n  local -n idx7=${17}\n\
    \  local -n val7=${18}\n  local -n idx8=${19}\n  local -n val8=${20}\n  local\
    \ -n idx9=${21}\n  local -n val9=${22}\n  local -n idx10=${23}\n  local -n val10=${24}\n\
    \  local -n idx11=${25}\n  local -n val11=${26}\n  local -n idx12=${27}\n  local\
    \ -n val12=${28}\n  local -n idx13=${29}\n  local -n val13=${30}\n  local -n idx14=${31}\n\
    \  local -n val14=${32}\n  local -n idx15=${33}\n  local -n val15=${34}\n  local\
    \ -n idx16=${35}\n  local -n val16=${36}\n  local -n idx17=${37}\n  local -n val17=${38}\n\
    \  local -n idx18=${39}\n  local -n val18=${40}\n  local -n idx19=${41}\n  local\
    \ -n val19=${42}\n  local -n idx20=${43}\n  local -n val20=${44}\n  local -n idx21=${45}\n\
    \  local -n val21=${46}\n  local -n idx22=${47}\n  local -n val22=${48}\n  local\
    \ -n idx23=${49}\n  local -n val23=${50}\n  local -n idx24=${51}\n  local -n val24\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph9s_i23x.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmph9s_i23x.sh: line 16: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 17: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 18: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 19: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 20: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 21: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 22: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 23: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 24: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 25: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 26: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 27: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 28: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 29: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 30: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 31: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 32: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 33: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 34: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 35: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 36: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 37: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 38: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 39: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 40: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 41: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 42: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 43: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 44: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 45: local: `'': not a valid identifier

    /tmp/tmph9s_i23x.sh: line 46: local: '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index\n  local max\n  local maxIndex\n\
    \  local value\n  local valueIndex\n  local count\n  local countIndex\n  local\
    \ maxCount\n  local maxCountIndex\n  local maxCountValue\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local maxCountValueIndex\n  local maxCountValueIndex\n\
    \  local maxCountValueIndex\n  local max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n\
    \  local -n idx=$4\n  local -n val=$5\n  local -n maxval=$6\n  local -n maxidxval=$7\n\
    \  local -n idxval=$8\n  local -n valval=$9\n  local -n maxidxvalval=$10\n  local\
    \ -n idxvalval=$11\n  local -n valvalval=$12\n  local -n maxidxvalvalval=$13\n\
    \  local -n idxvalvalval=$14\n  local -n valvalvalval=$15\n  local -n maxidxvalvalvalval=$16\n\
    \  local -n idxvalvalvalval=$17\n  local -n valvalvalvalval=$18\n  local -n maxidxvalvalvalvalval=$19\n\
    \  local -n idxvalvalvalvalval=$20\n  local -n valvalvalvalvalval=$21\n  local\
    \ -n maxidxvalvalvalvalvalval=$22\n  local -n idxvalvalvalvalvalval=$23\n  local\
    \ -n valvalvalvalvalvalval=$24\n  local -n maxidxvalvalvalvalvalval=$25\n  local\
    \ -n idxvalvalvalvalvalvalval=$26\n  local -n valvalvalvalvalvalvalval=$27\n \
    \ local -n maxidxvalvalvalvalvalvalval=$28\n  local -n idxvalvalvalvalvalvalvalval=$29\n\
    \  local -n valvalvalvalvalvalvalvalval=$30\n  local -n maxidxvalvalvalvalvalvalvalval=$31\n\
    \  local -n idxvalvalvalvalvalvalvalvalval=$32\n  local -n valvalvalvalvalvalvalvalvalval=$33\n\
    \  local -n maxidxvalvalvalvalvalvalvalvalval=$34\n  local -n idxvalvalvalvalvalvalvalvalvalval=$35\n\
    \  local -n valvalvalvalvalvalvalvalvalvalval=$36\n  local -n maxidxvalvalvalvalvalvalvalvalvalval=$37\n\
    \  local -n idxvalvalvalvalvalvalvalvalvalvalval=$38\n  local -n valvalvalvalvalvalvalvalval\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfyk8zxxz.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpfyk8zxxz.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpfyk8zxxz.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpfyk8zxxz.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpfyk8zxxz.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpfyk8zxxz.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpfyk8zxxz.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpfyk8zxxz.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpfyk8zxxz.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpfyk8zxxz.sh: line 23: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 24: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 25: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 26: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 27: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 28: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 29: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 30: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 31: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 32: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpfyk8zxxz.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpfyk8zxxz.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpfyk8zxxz.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmpfyk8zxxz.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmpfyk8zxxz.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmpfyk8zxxz.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmpfyk8zxxz.sh: line 3'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n      max=$j\n    fi\n  done\n  echo \"$max\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprfy42hti.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$(( ${#array}\
    \ - 1 ))\n  local last=$(( ${#array} - 1 ))\n  while [ $index -lt $max ]; do\n\
    \    local current=$(( index + 1 ))\n    local currentValue=${array[$current]}\n\
    \    if [ $currentValue -gt $last ]; then\n      last=$currentValue\n    fi\n\
    \    index=$(expr $current + 1)\n  done\n  if [ $last -eq $(( ${#array} - 1 ))\
    \ ]; then\n    echo \"-1\"\n  else\n    echo \"$last\"\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl1uigmhj.sh: line 21: [: -gt: unary operator expected

    /tmp/tmpl1uigmhj.sh: line 21: [: -gt: unary operator expected

    /tmp/tmpl1uigmhj.sh: line 21: [: -gt: unary operator expected

    /tmp/tmpl1uigmhj.sh: line 21: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=$1\n  local -a arranged\n  local -n max=$2\n\
    \  local -n last=$3\n  local -n lastval=$4\n  local -n maxval=$5\n  local -n maxidx=$6\n\
    \  local -n maxidxval=$7\n  local -n maxidxidx=$8\n  local -n maxidxidxval=$9\n\
    \  local -n maxidxidxidx=$10\n  local -n maxidxidxidxval=$11\n  local -n maxidxidxidxidx=$12\n\
    \  local -n maxidxidxidxidxval=$13\n  local -n maxidxidxidxidxidx=$14\n  local\
    \ -n maxidxidxidxidxval=$15\n  local -n maxidxidxidxidxidxval=$16\n  local -n\
    \ maxidxidxidxidxidxidx=$17\n  local -n maxidxidxidxidxidxval=$18\n  local -n\
    \ maxidxidxidxidxidxidxval=$19\n  local -n maxidxidxidxidxidxidxval=$20\n  local\
    \ -n maxidxidxidxidxidxidxval=$21\n  local -n maxidxidxidxidxidxidxval=$22\n \
    \ local -n maxidxidxidxidxidxidxval=$23\n  local -n maxidxidxidxidxidxidxidxval=$24\n\
    \  local -n maxidxidxidxidxidxidxidxval=$25\n  local -n maxidxidxidxidxidxidxidxval=$26\n\
    \  local -n maxidxidxidxidxidxidxidxval=$27\n  local -n maxidxidxidxidxidxidxidxval=$28\n\
    \  local -n maxidxidxidxidxidxidxidxval=$29\n  local -n maxidxidxidxidxidxidxidxval=$30\n\
    \  local -n maxidxidxidxidxidxidxidxval=$31\n  local -n maxidxidxidxidxidxidxidxval=$32\n\
    \  local -n maxidxidxidxidxidxidxidxval=$33\n  local -n maxidxidxidxidxidxidxidxval=$34\n\
    \  local -n maxidxidxidxidxidxidxidxval=$35\n  local -n maxidxidxidxidxidxidxidxval=$36\n\
    \  local -n maxidxidxidxidxidxidxidxval=$37\n  local -n maxidx\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfq5itge_.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpfq5itge_.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpfq5itge_.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpfq5itge_.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpfq5itge_.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpfq5itge_.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpfq5itge_.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpfq5itge_.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpfq5itge_.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpfq5itge_.sh: line 24: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 25: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 26: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 27: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 28: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 29: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 30: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 31: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 32: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 33: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpfq5itge_.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpfq5itge_.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmpfq5itge_.sh: line 36: local: `2'': invalid variable name for name reference

    /tmp/tmpfq5itge_.sh: line 37: local: `3'': invalid variable name for name reference

    /tmp/tmpfq5itge_.sh: line 38: local: `4'': invalid variable name for name reference

    /tmp/tmpfq5itge_.sh: line 39: local: `5'': invalid variable name for name reference

    /tmp/tmpfq5itge_.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local array=\"$1\"\n    local index=0\n    local max=0\n\
    \    local maxIndex=0\n    local current\n\n    for current in $array; do\n  \
    \      if [ \"$current\" -gt \"$max\" ]; then\n            max=$(expr \"$current\"\
    \ \"$max\")\n            maxIndex=$index\n        fi\n        ((index++))\n  \
    \  done\n\n    if [ \"$max\" -gt 0 ]; then\n        echo \"$maxIndex\"\n    else\n\
    \        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20180\u2019\n/tmp/tmp_m85ctb3.sh:\
    \ line 21: [: : integer expression expected\n/tmp/tmp_m85ctb3.sh: line 21: [:\
    \ : integer expression expected\n/tmp/tmp_m85ctb3.sh: line 21: [: : integer expression\
    \ expected\n/tmp/tmp_m85ctb3.sh: line 21: [: : integer expression expected\n/tmp/tmp_m85ctb3.sh:\
    \ line 28: [: : integer expression expected\n"
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( $1 )\n  local max=$( echo $arr | tr \" \" \"\\\
    n\" | sort -n | tail -n 1 )\n  local i\n  for i in \"${arr[@]}\"; do\n    if [[\
    \ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n    local -n arrange=$1\n    local -a arranged\n    local -n\
    \ max=$2\n    local -n last=$3\n    local -n maxIndex=$4\n    local -n lastIndex=$5\n\
    \    local -n maxIndex=$6\n    local -n lastIndex=$7\n    local -n maxIndex=$8\n\
    \    local -n lastIndex=$9\n    local -n maxIndex=$10\n    local -n lastIndex=$11\n\
    \    local -n maxIndex=$12\n    local -n lastIndex=$13\n    local -n maxIndex=$14\n\
    \    local -n lastIndex=$15\n    local -n maxIndex=$16\n    local -n lastIndex=$17\n\
    \    local -n maxIndex=$18\n    local -n lastIndex=$19\n    local -n maxIndex=$20\n\
    \    local -n lastIndex=$21\n    local -n maxIndex=$22\n    local -n lastIndex=$23\n\
    \    local -n maxIndex=$24\n    local -n lastIndex=$25\n    local -n maxIndex=$26\n\
    \    local -n lastIndex=$27\n    local -n maxIndex=$28\n    local -n lastIndex=$29\n\
    \    local -n maxIndex=$30\n    local -n lastIndex=$31\n    local -n maxIndex=$32\n\
    \    local -n lastIndex=$33\n    local -n maxIndex=$34\n    local -n lastIndex=$35\n\
    \    local -n maxIndex=$36\n    local -n lastIndex=$37\n    local -n maxIndex=$38\n\
    \    local -n lastIndex=$39\n    local -n maxIndex=$40\n    local -n lastIndex=$41\n\
    \    local -n maxIndex=$42\n    local -n lastIndex=$43\n    local -n maxIndex=$44\n\
    \    local -n lastIndex=$45\n    local -n maxIndex=$46\n    local -n lastIndex=$47\n\
    \    local -n maxIndex=$48\n    local -n lastIndex=$49\n    local -n maxIndex=$50\n\
    \    local -n lastIndex=$51\n    local -n maxIndex=$52\n    local -n lastIndex=$53\n\
    \    local -n maxIndex=$54\n    local -n lastIndex=$55\n    local -n maxIndex=$56\n\
    \    local \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp57rbg8fg.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp57rbg8fg.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp57rbg8fg.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp57rbg8fg.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp57rbg8fg.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp57rbg8fg.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp57rbg8fg.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp57rbg8fg.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp57rbg8fg.sh: line 23: local: `'': not a valid identifier

    /tmp/tmp57rbg8fg.sh: line 24: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 25: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 26: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 27: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 28: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 29: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 30: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 31: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 32: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 33: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmp57rbg8fg.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmp57rbg8fg.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmp57rbg8fg.sh: line 36: local: `2'': invalid variable name for name reference

    /tmp/tmp57rbg8fg.sh: line 37: local: `3'': invalid variable name for name reference

    /tmp/tmp57rbg8fg.sh: line 38: local: `4'': invalid variable name for name reference

    /tmp/tmp57rbg8fg.sh: line 39: local: `5'': invalid variable name for name reference

    /tmp/tmp57rbg8fg.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ maxi\n  local maxj\n  local maxval\n  local val\n  local val1\n  local val2\n\
    \  local val3\n  local val4\n  local val5\n  local val6\n  local val7\n  local\
    \ val8\n  local val9\n  local val10\n  local val11\n  local val12\n  local val13\n\
    \  local val14\n  local val15\n  local val16\n  local val17\n  local val18\n \
    \ local val19\n  local val20\n  local val21\n  local val22\n  local val23\n  local\
    \ val24\n  local val25\n  local val26\n  local val27\n  local val28\n  local val29\n\
    \  local val30\n  local val31\n  local val32\n  local val33\n  local val34\n \
    \ local val35\n  local val36\n  local val37\n  local val38\n  local val39\n  local\
    \ val40\n  local val41\n  local val42\n  local val43\n  local val44\n  local val45\n\
    \  local val46\n  local val47\n  local val48\n  local val49\n  local val50\n \
    \ local val51\n  local val52\n  local val53\n  local val54\n  local val55\n  local\
    \ val56\n  local val57\n  local val58\n  local val59\n  local val60\n  local val61\n\
    \  local val62\n  local val63\n  local val64\n  local val65\n  local val66\n \
    \ local val67\n  local val68\n  local val69\n  local val70\n  local val71\n  local\
    \ val72\n  local val73\n  local val74\n  local val75\n  local val76\n  local val77\n\
    \  local val78\n  local val79\n  local val80\n  local val81\n  local val82\n \
    \ local val83\n  local val84\n  local val85\n  local val86\n  local val87\n  local\
    \ val88\n  local val89\n  local val90\n  local val91\n  local val92\n  local val93\n\
    \  local val94\n  \n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg129lbvi.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -n max=\"$2\"\n  local -n\
    \ i\n  local -n j\n  local -n maxi\n  local -n maxj\n  local -n maxi1\n  local\
    \ -n maxj1\n  local -n maxi1j\n  local -n maxj1j\n  local -n maxi1j1\n  local\
    \ -n maxj1j1\n  local -n maxi1j2\n  local -n maxj1j2\n  local -n maxi1j3\n  local\
    \ -n maxj1j3\n  local -n maxi1j4\n  local -n maxj1j4\n  local -n maxi1j5\n  local\
    \ -n maxj1j5\n  local -n maxi1j6\n  local -n maxj1j6\n  local -n maxi1j7\n  local\
    \ -n maxj1j7\n  local -n maxi1j8\n  local -n maxj1j8\n  local -n maxi1j9\n  local\
    \ -n maxj1j9\n  local -n maxi1j10\n  local -n maxj1j10\n  local -n maxi1j11\n\
    \  local -n maxj1j11\n  local -n maxi1j12\n  local -n maxj1j12\n  local -n maxi1j13\n\
    \  local -n maxj1j13\n  local -n maxi1j14\n  local -n maxj1j14\n  local -n maxi1j15\n\
    \  local -n maxj1j15\n  local -n maxi1j16\n  local -n maxj1j16\n  local -n maxi1j17\n\
    \  local -n maxj1j17\n  local -n maxi1j18\n  local -n maxj1j18\n  local -n maxi1j19\n\
    \  local -n maxj1j19\n  local -n maxi1j20\n  local -n maxj1j20\n  local -n maxi1j21\n\
    \  local -n maxj1j21\n  local -n maxi1j22\n  local -n max\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4o3nzyq0.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp4o3nzyq0.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n\
    \  local -n idx=$4\n  local -n val=$5\n\n  local -n maxval=$max\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$val\n\n  local -n maxidxval=$maxidx\n\
    \  local -n idxval=$idx\n  local -n valval=$\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6jlgrw5f.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp6jlgrw5f.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 23: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 25: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 26: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 27: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 29: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 30: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 31: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 33: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 34: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 35: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 37: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 38: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 39: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 41: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 42: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 43: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 45: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 46: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 47: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 49: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 50: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 51: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 53: local: `'': not a valid identifier

    /tmp/tmp6jlgrw5f.sh: line 54: local: '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n i\n  local -n j\n  local -n len\n  local -n maxidx\n \
    \ local -n maxval\n  local -n maxidx2\n  local -n maxval2\n  local -n maxidx3\n\
    \  local -n maxval3\n  local -n maxidx4\n  local -n maxval4\n  local -n maxidx5\n\
    \  local -n maxval5\n  local -n maxidx6\n  local -n maxval6\n  local -n maxidx7\n\
    \  local -n maxval7\n  local -n maxidx8\n  local -n maxval8\n  local -n maxidx9\n\
    \  local -n maxval9\n  local -n maxidx10\n  local -n maxval10\n  local -n maxidx11\n\
    \  local -n maxval11\n  local -n maxidx12\n  local -n maxval12\n  local -n maxidx13\n\
    \  local -n maxval13\n  local -n maxidx14\n  local -n maxval14\n  local -n maxidx15\n\
    \  local -n maxval15\n  local -n maxidx16\n  local -n maxval16\n  local -n maxidx17\n\
    \  local -n maxval17\n  local -n maxidx18\n  local -n maxval18\n  local -n maxidx19\n\
    \  local -n maxval19\n  local -n maxidx20\n  local -n maxval20\n  local -n maxidx21\n\
    \  local -n maxval21\n  local -n maxidx22\n  local -n maxval22\n  local -n maxidx23\n\
    \  local -n maxval23\n  local -n maxidx24\n  local -n maxval24\n  local -n maxidx25\n\
    \  local -n maxval25\n  local -n maxidx26\n  local -n maxval26\n  local -n maxidx27\n\
    \  local -n maxval27\n  local -n maxidx28\n  local -n maxval28\n  local -n maxidx29\n\
    \  local -n maxval29\n\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") =\
    \ \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpncruvcf3.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpncruvcf3.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpncruvcf3.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpncruvcf3.sh: line 17: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( $1 )\n  local max=$( echo $arr | sort -n | tail\
    \ -n 1 )\n  local i\n  for i in $(seq 0 $(( ${#arr[@]} - 1 ))); do\n    if [[\
    \ ${arr[$i]} -gt $max ]]; then\n      max=$arr[$i]\n    fi\n  done\n  echo $max\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgsafmeb9.sh: line 18: [[: 1[1]: syntax error: invalid arithmetic
    operator (error token is "[1]")

    /tmp/tmpgsafmeb9.sh: line 18: [[: 1[1]: syntax error: invalid arithmetic operator
    (error token is "[1]")

    /tmp/tmpgsafmeb9.sh: line 18: [[: 1[1]: syntax error: invalid arithmetic operator
    (error token is "[1]")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: -1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=0\n  local\
    \ maxIndex=-1\n  local element\n  while IFS= read -r element; do\n    if [ \"\
    $element\" -gt \"$max\" ]; then\n      max=\"$element\"\n      maxIndex=\"$index\"\
    \n    fi\n    ((index++))\n  done\n  echo \"$maxIndex\"\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=32 encoding='utf-8'>
  timestamp: 1660044093
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( \"$@\" )\n  local max=$(( ${#arr[@]} - 1 ))\n \
    \ local i\n  for i in $(seq 0 $max); do\n    if [[ ${arr[$i]} -gt ${arr[$(( i\
    \ + 1 ))]} ]]; then\n      max=$i\n    fi\n  done\n  if [[ $max -eq 0 ]]; then\n\
    \    return -1\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm4i3i3_m.sh: line 18: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local i\n  for i in ${arr[@]};\
    \ do\n    if [[ ${i} -gt ${max} ]]; then\n      max=$i\n    fi\n  done\n  if [[\
    \ ${max} -eq ${arr[0]} ]]; then\n    return -1\n  else\n    return ${max}\n  fi\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_7qow41o.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arrange=\"$1\"\n  local -a sorted=\"$2\"\n  local\
    \ -a result=()\n  local -n max=$3\n  local -n last=$(( ${#sorted[@]} - 1 ))\n\
    \  local -n i\n  local -n j\n  local -n len=$(( ${#arrange[@]} - 1 ))\n  local\
    \ -n maxlen=$(( ${#sorted[@]} - 1 ))\n  local -n maxidx=$(( ${#result[@]} - 1\
    \ ))\n  local -n maxval=$(( ${#arrange[@]} - 1 ))\n  local -n maxidx2=$(( ${#result[@]}\
    \ - 1 ))\n  local -n maxval2=$(( ${#arrange[@]} - 1 ))\n  local -n maxidx3=$((\
    \ ${#result[@]} - 1 ))\n  local -n maxval3=$(( ${#arrange[@]} - 1 ))\n  local\
    \ -n maxidx4=$(( ${#result[@]} - 1 ))\n  local -n maxval4=$(( ${#arrange[@]} -\
    \ 1 ))\n  local -n maxidx5=$(( ${#result[@]} - 1 ))\n  local -n maxval5=$(( ${#arrange[@]}\
    \ - 1 ))\n  local -n maxidx6=$(( ${#result[@]} - 1 ))\n  local -n maxval6=$((\
    \ ${#arrange[@]} - 1 ))\n  local -n maxidx7=$(( ${#result[@]} - 1 ))\n  local\
    \ -n maxval7=$(( ${#arrange[@]} - 1 ))\n  local -n maxidx8=$(( ${#result[@]} -\
    \ 1 ))\n  local -n maxval8=$(( ${#arrange[@]} - 1 ))\n  local -n maxidx9=$(( ${#result[@]}\
    \ - 1 ))\n  local -n maxval9=$(( ${#arrange[@]} - 1 ))\n  local -n maxidx10=$((\
    \ ${#result[@]} - 1 ))\n  local -n maxval10=$(( ${#arrange[@]} - 1 ))\n  local\
    \ -n maxidx11=$(( ${#result[@]} - 1 ))\n  local -n maxval11\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5nso58c6.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmp5nso58c6.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp5nso58c6.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 21: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 23: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 24: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 25: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 26: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 27: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 28: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 29: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 30: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 31: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 32: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 33: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 34: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 35: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 36: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 37: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 38: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 39: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 40: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 41: local: `-1'': invalid variable name for name reference

    /tmp/tmp5nso58c6.sh: line 42: local: `-1'': inva'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -a sorted=()\n  local -n max=$2\n\
    \  local -n idx=$3\n  local -n val=$4\n  local -n prev=$5\n  local -n maxidx=$6\n\
    \  local -n maxval=$7\n  local -n maxprev=$8\n  local -n maxmaxidx=$9\n  local\
    \ -n maxmaxval=$10\n  local -n maxmaxprev=$11\n  local -n maxmaxmaxidx=$12\n \
    \ local -n maxmaxmaxval=$13\n  local -n maxmaxmaxprev=$14\n  local -n maxmaxmaxmaxidx=$15\n\
    \  local -n maxmaxmaxmaxval=$16\n  local -n maxmaxmaxmaxprev=$17\n  local -n maxmaxmaxmaxmaxidx=$18\n\
    \  local -n maxmaxmaxmaxmaxval=$19\n  local -n maxmaxmaxmaxmaxprev=$20\n  local\
    \ -n maxmaxmaxmaxmaxmaxidx=$21\n  local -n maxmaxmaxmaxmaxval=$22\n  local -n\
    \ maxmaxmaxmaxmaxprev=$23\n  local -n maxmaxmaxmaxmaxmaxidx=$24\n  local -n maxmaxmaxmaxmaxval=$25\n\
    \  local -n maxmaxmaxmaxmaxprev=$26\n  local -n maxmaxmaxmaxmaxmaxidx=$27\n  local\
    \ -n maxmaxmaxmaxmaxval=$28\n  local -n maxmaxmaxmaxmaxprev=$29\n  local -n maxmaxmaxmaxmaxmaxidx=$30\n\
    \  local -n maxmaxmaxmaxmaxval=$31\n  local -n maxmaxmaxmaxmaxprev=$32\n  local\
    \ -n maxmaxmaxmaxmaxmaxidx=$33\n  local -n maxmaxmaxmaxmaxval=$34\n  local -n\
    \ maxmaxmaxmaxmaxprev=$35\n  local -n maxmaxmaxmaxmaxmaxidx=$36\n  local -n maxmaxmaxmaxmaxval=$37\n\
    \  local -n maxmaxmaxmaxmaxprev=$38\n  local -n maxmaxmaxmaxmaxmaxidx=$39\n  local\
    \ -n maxmaxmaxmaxmaxval=$40\n  local -n maxmaxmaxmaxmaxprev=$41\n  local -n maxmaxmaxmaxmaxmaxidx=$42\n\
    \  local -n max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqoticvcm.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmpqoticvcm.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpqoticvcm.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpqoticvcm.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpqoticvcm.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpqoticvcm.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpqoticvcm.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpqoticvcm.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpqoticvcm.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpqoticvcm.sh: line 24: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 25: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 26: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 27: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 28: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 29: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 30: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 31: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 32: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 33: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmpqoticvcm.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpqoticvcm.sh: line 35: local: `1'': invalid variable name for name reference

    /tmp/tmpqoticvcm.sh: line 36: local: `2'': invalid variable name for name reference

    /tmp/tmpqoticvcm.sh: line 37: local: `3'': invalid variable name for name reference

    /tmp/tmpqoticvcm.sh: line 38: local: `4'': invalid variable name for name reference

    /tmp/tmpqoticvcm.sh: line 39: local: `5'': invalid variable name for name reference

    /tmp/tmpqoticvcm.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n maxidx=$3\n\
    \  local -n idx=$4\n  local -n maxval=$5\n  local -n val=$6\n  local -n idx2=$7\n\
    \  local -n val2=$8\n\n  local -n maxidx2=$9\n  local -n maxval2=$10\n  local\
    \ -n idx3=$11\n  local -n val3=$12\n\n  local -n maxidx3=$13\n  local -n maxval3=$14\n\
    \  local -n idx4=$15\n  local -n val4=$16\n\n  local -n maxidx4=$17\n  local -n\
    \ maxval4=$18\n  local -n idx5=$19\n  local -n val5=$20\n\n  local -n maxidx5=$21\n\
    \  local -n maxval5=$22\n  local -n idx6=$23\n  local -n val6=$24\n\n  local -n\
    \ maxidx6=$25\n  local -n maxval6=$26\n  local -n idx7=$27\n  local -n val7=$28\n\
    \n  local -n maxidx7=$29\n  local -n maxval7=$30\n  local -n idx8=$31\n  local\
    \ -n val8=$32\n\n  local -n maxidx8=$33\n  local -n maxval8=$34\n  local -n idx9=$35\n\
    \  local -n val9=$36\n\n  local -n maxidx9=$37\n  local -n maxval9=$38\n  local\
    \ -n idx10=$39\n  local -n val10=$40\n\n  local -n maxidx10=$41\n  local -n maxval10=$42\n\
    \  local -n idx11=$43\n  local -n val11=$44\n\n  local -n maxidx11=$45\n  local\
    \ -n maxval11=$46\n  local -n idx12=$47\n  local -n val12=$48\n\n  local -n maxidx12=$49\n\
    \  local -n maxval12=$50\n  local -n idx13=$51\n  local -n val13=$52\n\n  local\
    \ -n maxidx13=$53\n  local -n maxval13=$54\n  local -n idx14\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptph_z7rk.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    /tmp/tmptph_z7rk.sh: line 15: local: `'': not a valid identifier

    /tmp/tmptph_z7rk.sh: line 16: local: `'': not a valid identifier

    /tmp/tmptph_z7rk.sh: line 17: local: `'': not a valid identifier

    /tmp/tmptph_z7rk.sh: line 18: local: `'': not a valid identifier

    /tmp/tmptph_z7rk.sh: line 19: local: `'': not a valid identifier

    /tmp/tmptph_z7rk.sh: line 20: local: `'': not a valid identifier

    /tmp/tmptph_z7rk.sh: line 21: local: `'': not a valid identifier

    /tmp/tmptph_z7rk.sh: line 23: local: `'': not a valid identifier

    /tmp/tmptph_z7rk.sh: line 24: local: `1 2 4 3 50'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 25: local: `1 2 4 3 51'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 26: local: `1 2 4 3 52'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 28: local: `1 2 4 3 53'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 29: local: `1 2 4 3 54'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 30: local: `1 2 4 3 55'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 31: local: `1 2 4 3 56'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 33: local: `1 2 4 3 57'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 34: local: `1 2 4 3 58'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 35: local: `1 2 4 3 59'': invalid variable name for
    name reference

    /tmp/tmptph_z7rk.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmptph_z7rk.sh: line 38: local: `1'': invalid variable name for name reference

    /tmp/tmptph_z7rk.sh: line 39: local: `2'': invalid variable name for name reference

    /tmp/tmptph_z7rk.sh: line 40: local: `3'': invalid variable name for name reference

    /tmp/tmptph_z7rk.sh: line 41: local: `4'': invalid variable name for name reference

    /tmp/tmptph_z7rk.sh: line 43: local: `5'': invalid variable name for name reference

    /tmp/tmptph_z7rk.sh: line 4'
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n\
    \  local maxIndex=0\n  local element\n\n  while (( index < max )); do\n    element=${array:$index:1}\n\
    \    if [[ ${element} -gt ${array:$((index-1)):1} ]]; then\n      maxIndex=$((index-1))\n\
    \      break\n    fi\n    (( index++ ))\n  done\n\n  if (( maxIndex == 0 )); then\n\
    \    echo \"-1\"\n  else\n    echo \"${maxIndex}\"\n  fi\n}\n\ncandidate() {\n\
    \    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\
    \ 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local array=\"$1\"\n  local index=0\n  local max=$((${#array}-1))\n\
    \  local maxIndex=0\n  local current=$((${#array}-1))\n  while [ $current -gt\
    \ 0 ]; do\n    local currentIndex=$((${#array}-1))\n    while [ $currentIndex\
    \ -gt 0 ]; do\n      if [[ ${array[$currentIndex]} -gt ${array[$currentIndex-1]}\
    \ ]]; then\n        local currentIndex=$((${currentIndex}-1))\n      else\n  \
    \      local currentIndex=$((${currentIndex}-1))\n        local current=$((${current}-1))\n\
    \      fi\n    done\n    local currentIndex=$((${currentIndex}-1))\n    if [[\
    \ ${array[$currentIndex]} -gt ${array[$currentIndex-1]} ]]; then\n      local\
    \ currentIndex=$((${currentIndex}-1))\n      local current=$((${current}-1))\n\
    \    else\n      local current=$((${current}-1))\n      local index=$((${index}+1))\n\
    \      local maxIndex=$((${maxIndex}+1))\n    fi\n  done\n  if [[ ${index} -gt\
    \ ${max} ]]; then\n    echo ${max}\n  else\n    echo -1\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeb9a2b7g.sh: line 22: [[: 1 2 4 3 5: syntax error in expression
    (error token is "2 4 3 5")

    /tmp/tmpeb9a2b7g.sh: line 30: array: bad array subscript

    /tmp/tmpeb9a2b7g.sh: line 30: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 2
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -n max=$2\n  local -n idx=$3\n  local\
    \ -n val=$4\n  local -n i=$(( ${#arr[@]} - 1 ))\n  local -n j=$(( ${#arr[@]} -\
    \ 1 ))\n  local -n k=$(( ${#arr[@]} - 1 ))\n  local -n maxidx=$(( ${#arr[@]} -\
    \ 1 ))\n  local -n maxval=$(( ${#arr[@]} - 1 ))\n  local -n maxidx2=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval2=$(( ${#arr[@]} - 1 ))\n  local -n maxidx3=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval3=$(( ${#arr[@]} - 1 ))\n  local -n maxidx4=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval4=$(( ${#arr[@]} - 1 ))\n  local -n maxidx5=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval5=$(( ${#arr[@]} - 1 ))\n  local -n maxidx6=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval6=$(( ${#arr[@]} - 1 ))\n  local -n maxidx7=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval7=$(( ${#arr[@]} - 1 ))\n  local -n maxidx8=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval8=$(( ${#arr[@]} - 1 ))\n  local -n maxidx9=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval9=$(( ${#arr[@]} - 1 ))\n  local -n maxidx10=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval10=$(( ${#arr[@]} - 1 ))\n  local -n maxidx11=$(( ${#arr[@]}\
    \ - 1 ))\n  local -n maxval11=$(( ${#arr[@]} - 1 ))\n  local -n maxidx12=$(( ${#arr\n\
    }\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"\
    -1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkhf42wt3.sh: line 43: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkhf42wt3.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n      max=$(( i + 1 ))\n    fi\n  done\n  if [[ $max\
    \ -eq 0 ]]; then\n    return -1\n  fi\n  echo $max\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk5_b0tjm.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n      max=$(( i + 1 ))\n    fi\n  done\n  if [[ $max\
    \ -eq 0 ]]; then\n    return -1\n  else\n    echo \"$max\"\n  fi\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxnkpinx4.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( $1 )\n  local max=$(( ${#arr[@]} - 1 ))\n  local\
    \ maxIndex=$(( ${#arr[@]} - 1 ))\n  local i\n  for (( i=1; i<${#arr[@]}; i++ ));\
    \ do\n    if [[ ${arr[$i]} -gt ${arr[$maxIndex]} ]]; then\n      maxIndex=$i\n\
    \    fi\n  done\n  if [[ ${arr[$maxIndex]} -gt ${#arr[@]} ]]; then\n    return\
    \ -1\n  else\n    return $maxIndex\n  fi\n}\n\ncandidate() {\n    can_arrange\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2\
    \ 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n \
    \   [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local max=$2\n  local i\n  local j\n  local\
    \ k\n  local len\n  local maxlen\n  local maxidx\n  local maxval\n  local maxidx2\n\
    \  local maxval2\n  local maxidx3\n  local maxval3\n  local maxidx4\n  local maxval4\n\
    \  local maxidx5\n  local maxval5\n  local maxidx6\n  local maxval6\n  local maxidx7\n\
    \  local maxval7\n  local maxidx8\n  local maxval8\n  local maxidx9\n  local maxval9\n\
    \  local maxidx10\n  local maxval10\n  local maxidx11\n  local maxval11\n  local\
    \ maxidx12\n  local maxval12\n  local maxidx13\n  local maxval13\n  local maxidx14\n\
    \  local maxval14\n  local maxidx15\n  local maxval15\n  local maxidx16\n  local\
    \ maxval16\n  local maxidx17\n  local maxval17\n  local maxidx18\n  local maxval18\n\
    \  local maxidx19\n  local maxval19\n  local maxidx20\n  local maxval20\n  local\
    \ maxidx21\n  local maxval21\n  local maxidx22\n  local maxval22\n  local maxidx23\n\
    \  local maxval23\n  local maxidx24\n  local maxval24\n  local maxidx25\n  local\
    \ maxval25\n  local maxidx26\n  local maxval26\n  local maxidx27\n  local maxval27\n\
    \  local maxidx28\n  local maxval28\n  local maxidx29\n  local maxval29\n  local\
    \ maxidx30\n  local maxval30\n  local maxidx31\n  local maxval31\n  local maxidx32\n\
    \  local maxval32\n  local maxidx33\n  local maxval33\n  local maxidx34\n  local\
    \ maxval34\n  local maxidx35\n  local maxval35\n  local maxidx36\n  local maxval36\n\
    \  local maxidx37\n  local maxval37\n  local maxidx38\n  local maxval38\n  local\
    \ maxidx39\n  local maxval39\n  local maxidx40\n  local maxval40\n}\n\ncandidate()\
    \ {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8 5 7 3\") = \"4\"\
    \ ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpacmgw9m9.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local arr=( \"$@\" )\n  local max=$( IFS=$'\\n' arr=( \"${arr[@]}\"\
    \ | sort -n | tail -n +2 | head -n -1 ) )\n  [[ $max -ge 0 ]] || return -1\n \
    \ echo $max\n}\n\ncandidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4\
    \ 5\") = \"-1\" ]]\n    [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4 8 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4gnjcqep.sh: command substitution: line 17: syntax error near unexpected
    token `|''

    /tmp/tmp4gnjcqep.sh: command substitution: line 17: `'' arr=( "${arr[@]}" | sort
    -n | tail -n +2 | head -n -1 ) )''

    '
  stdout: ''
  timestamp: 1660044088
- exit_code: 1
  program: "#!/bin/bash\n# Create a function which returns the largest index of an\
    \ element which\n# is not greater than or equal to the element immediately preceding\
    \ it. If\n# no such element exists then return -1. The given array will not contain\n\
    # duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n\
    # >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\n\
    can_arrange() {\n  local -n arr=$1\n  local -i max=$(( ${#arr[@]} - 1 ))\n  local\
    \ -i i\n  for i in $(seq 0 $max); do\n    local j=$(( i + 1 ))\n    if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]; then\n      max=$j\n    fi\n  done\n  echo \"$max\"\n}\n\n\
    candidate() {\n    can_arrange \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 3 5\") = \"3\" ]]\n    [[ $(candidate \"1 2 4 5\") = \"-1\" ]]\n   \
    \ [[ $(candidate \"1 4 2 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"4 8\
    \ 5 7 3\") = \"4\" ]]\n    [[ $(candidate \"\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpspsbff6n.sh: line 14: local: `1 2 4 3 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660044088
