name: HumanEval_126_is_sorted
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return whether or not they are\
  \ sorted\n;; in ascending order. If list has more than 1 duplicate of the same\n\
  ;; number, return False. Assume no negative numbers and only integers.\n;; Examples\n\
  ;; is_sorted([5]) \u279E True\n;; is_sorted([1, 2, 3, 4, 5]) \u279E True\n;; is_sorted([1,\
  \ 3, 2, 4, 5]) \u279E False\n;; is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n;; is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7]) \u279E True\n;; is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
  ;; is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n;; is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
  \ False\n(define (is_sorted lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n\
  \    (check-equal? (candidate (list 5)) #t)\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 1 2 3 4\
  \ 5 6 7)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5 6 7)) #f)\n    (check-equal?\
  \ (candidate (list )) #t)\n    (check-equal? (candidate (list 1)) #t)\n    (check-equal?\
  \ (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 2 2 3 4))\
  \ #f)\n    (check-equal? (candidate (list 1 2 3 3 3 4)) #f)\n    (check-equal? (candidate\
  \ (list 1 2 2 3 3 4)) #t)\n    (check-equal? (candidate (list 1 2 3 4)) #t)\n))\n\
  \n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
