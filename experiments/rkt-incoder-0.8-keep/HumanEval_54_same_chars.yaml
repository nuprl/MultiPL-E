name: HumanEval_54_same_chars
language: rkt
prompt: "#lang racket\n\n;; Check if two words have the same characters.\n;; >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n;; True\n;; >>> same_chars('abcd', 'dddddddabc')\n;; True\n\
  ;; >>> same_chars('dddddddabc', 'abcd')\n;; True\n;; >>> same_chars('eabcd', 'dddddddabc')\n\
  ;; False\n;; >>> same_chars('abcd', 'dddddddabce')\n;; False\n;; >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n;; False\n(define (same_chars s0 s1)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate same_chars))\n\
  \    (check-equal? (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t)\n    (check-equal?\
  \ (candidate \"abcd\" \"dddddddabc\") #t)\n    (check-equal? (candidate \"dddddddabc\"\
  \ \"abcd\") #t)\n    (check-equal? (candidate \"eabcd\" \"dddddddabc\") #f)\n  \
  \  (check-equal? (candidate \"abcd\" \"dddddddabcf\") #f)\n    (check-equal? (candidate\
  \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f)\n    (check-equal? (candidate \"aabb\"\
  \ \"aaccc\") #f)\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
