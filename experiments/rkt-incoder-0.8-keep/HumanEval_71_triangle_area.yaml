name: HumanEval_71_triangle_area
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ the area of\n;; the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n\
  ;; triangle_area(3, 4, 5) == 6.00\n;; triangle_area(1, 2, 10) == -1\n(define (triangle_area\
  \ a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ['  (/ a ((+ b c) b))) ', "  (cond\n    [(and (< a b) (< b c)) (round\
    \ (/ (- a b) (- b c)))]\n    [(and (< a b) (< c b)) (round (/ (- a c) (- b c)))]\n\
    \    [(and (< a c) (< b c)) (round (/ (- a c) (- c b)))]\n    [else (round (/\
    \ (- (+ a b) (+ b c)) (+ a c)))]))\n", "  (if (= (+ a b c) a)\n      (* a b c)\n\
    \      (* a c (- (* b c a) (+ a b c))))\n)\n", "  (cond [(and (<= a b) (<= b c))\
    \ (+ (* a b) (* b c))]\n        [else -1]))\n", "  (if (= (abs (- a b)) (abs (-\
    \ a c)) (abs (- b c)))\n      (/ (+ a b c) 2)\n      -1))\n", "  (/ (+ (* a b)\
    \ (* b c) (* c a)) (sqrt (- (* a b) (* b c)))))\n", "  (cond\n    [(< a b c) (/\
    \ (+ a b c) (+ a b (* c b)))]\n    [(< b c a) (/ (+ b c a) (+ b c (* c a)))]\n\
    \    [(< c a b) (/ (+ c a b) (+ c b (* c a)))]\n    [else -1]\n  )\n)\n", "  (cond\n\
    \    [(or (= a b) (= b c) (= c a)) (+ (/ (+ a b c) (+ a b c)) (+ (+ b c) (+ b\
    \ c)))]\n    [else -1]))\n", "  (cond\n    [(> (+ a b c) b) (+ (/ a (- b c)) (/\
    \ b c))]\n    [else -1]\n  ))\n", "  (let ([sum (+ a b c)])\n    (cond [(< sum\
    \ (/ 3 4))\n           ]\n          [(= sum (/ 3 4))\n           (/ sum 3)]\n\
    \          [else\n           ]\n          )))\n", "  (cond\n    [(< a b) (+ (*\
    \ a b) (* c a))] \n    [(< b c) (+ (* b c) (* a b))] \n    [(< c a) (+ (* c a)\
    \ (* b c))]\n    [else (* a b c)]\n  )\n)\n", "  (if (= (+ a b c) 0)\n      -1\n\
    \      (/ + (round (* a b) (* 10 2)) (round (* c b) (* 10 2)))\n))\n", "  (cond\n\
    \    [(< a b) (/ -1 3)]\n    [(< b c) (/ -1 3)]\n    [(< c a) (/ -1 3)]\n    [else\
    \ (/ (+ (* a b) (* b c) (* a c)) 2)]\n  )\n)\n", "  (/ (+ (* a b) (* b c) (* c\
    \ a)) 2)\n  )\n", "  (check-type a number)\n  (check-type b number)\n  (check-type\
    \ c number)\n  (<= a b c)\n  (< (+ a b c) (* 3 a)))\n", "  (if (> (+ a b c) (-\
    \ b c a)) \n      -1\n      (* a b c)))\n", "  (cond\n    [(< a b c ) (* -1 -1)]\n\
    \    [(< a c b ) (* -1 -1)]\n    [(< b c a ) (* -1 -1)]\n    [else (* -1 -1)]))\n",
  "  (if (or (<= a b) (<= b c) (<= c a))\n      ((* a b) (* b c) (* c a))\n      -1))\n",
  "  (cond\n    [(<= a b) (/ a c)]\n    [(<= b c) (/ b c)]\n    [else (/ c c)]\n \
    \  ))\n", "  (if (< a b)\n      (if (< b c)\n          (+ (/ a b) (/ b c) (/ a\
    \ c))\n          -1)\n      -1))\n", "  (let ([sa-a (abs (- a b))]\n        [sb-a\
    \ (abs (- a c))]\n        [sc-a (abs (- b c))]\n        [sum-a (+ a b c)])\n \
    \   (and (= sa-a sb-a)\n         (= sb-a sc-a)\n         (>= (/ sa-a sum-a) (/\
    \ sb-a sum-a))\n         (>= (/ sb-a sum-a) (/ sc-a sum-a))\n         (>= (/ sc-a\
    \ sum-a) (/ sum-a sum-a)))))\n", "  (cond [(< a b) (* -1 -1)]\n        [(< b c)\
    \ (* -1 -1)]\n        [(< c a) (* -1 -1)]\n        [else (* -2 (/ (+ (* a a) (*\
    \ b b) (* c c)) (* 2 3 4))))))\n", "  (cond\n    [(< a b) (/ (+ a b c) 2)\n  \
    \   (> c a) (/ (+ a b c) 2)\n     (> a c) (/ (+ a b c) 2)\n     (> b c) (/ (+\
    \ a b c) 2)\n     1])", "  (cond\n    ((<= a b) (+ (* a b) (* b c)))\n    ((<=\
    \ b c) (+ (* a b) (* c c)))\n    ((<= c a) (+ (* a c) (* c b)))\n    (else -1)))\n\
    </cell>\n<text>\nExercise: Part 1\nThe area of the triangle formed by three non-parallel\
    \ lines is $3.14$. How many different ways can this triangle be formed?\n\n\n\
    </text>\n<cell>\n#lang racket\n", "  (cond [(< a b) (triangle_area b c a)]\n \
    \       [(< b c) (triangle_area b a c)]\n        [(< c a) (triangle_area c a b)]))\n",
  "  (cond ((= a b)\n         (/ c (+ a b)))\n        ((= a c)\n         (/ b (+ a\
    \ c)))\n        ((= b c)\n         (/ a (+ b c)))\n        (else\n         (/\
    \ 2 (* a (b + c)))))) ; two sides form a valid triangle\n", "  (cond ((> a b)\
    \ (/ -1 a)\n         (> b c) (/ -1 b)\n         (> c a) (/ -1 c))\n        ((=\
    \ (+ a b c) 0)\n         0)\n        (else \n         (* 0.5 (* 2 (+ (* a c) (*\
    \ b c) (- a b) (- b c) (- c a)))))))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't\
    \ want to give the solution outright since that's not what SO is for, but I did\
    \ add an example and some explanation. I thought this might be helpful, at least\
    \ as a starting point for people who don't know any Lisp.\n<|/ c |>\n<| c |>\n\
    While this link may answer the question, it is better to include the essential\
    \ parts of the answer here and provide the link for reference.  Link-only answers\
    \ can become invalid if the linked page changes. - [From Review](/review/low-quality-posts/14333080)\n\
    <|/ c |>\n<| c |>\nI posted some code for the triangle-area function and included\
    \ an explanation as to what it does. The link to the other question was just an\
    \ example of how this problem could be solved in an efficient way.\n<|/ c |>\n\
    <| c |>\nIf you post some code on Stack Overflow, you should also post a link\
    \ to that code. If you post the relevant portions of the code here, then this\
    \ answer should stand on its own, without needing to go to an external site.\n\
    <|/ c |>\n<| c |>\nThanks for the explanation, much appreciated. I posted an explanation\
    \ of the code below the code I posted as this would make it a lot more readable\
    \ and easily understandable for people who don't know Lisp.\n<|/ c |>\n<| a dscore=0\
    \ |>\nI couldn't find an explanation for how this works, and I couldn't find an\
    \ explanation of a more efficient way to solve this problem either, so I found\
    \ a way to solve this with simple code (which I understand much better than my\
    \ previous attempt). Here is the solution I came up with:\n<code>", "  (cond\n\
    \    [(< a b) (triangle_area a c (- c))]\n    [(< b c) (triangle_area a b (- b))]\n\
    \    [(< c a) (triangle_area (b - b) c (- c))]\n    [else (/ 1.0 2.0 (+ (* b c)\
    \ (* a c) (* b a)))]\n  ))\n", "  (cond \n    [(or (= a b)  (= a c))  (* 0.5 (square_area\
    \ a b))] \n    [(or (= a b)  (= b c))  (* 0.25 (square_area a b))] \n    [(or\
    \ (= a b)  (= c b))  (* 0.25 (square_area a b))] \n    [else                 \
    \          (* 0.75 (square_area a b))] \n  )\n)\n", "  (if (< a b)\n      (/ (+\
    \ (* a a) (* b b)) c)\n      -1\n      ))\n", "  (if (= a b c)\n      (/ a c)\n\
    \      (* -1 \n          (+ (/ b (* a c)) (/ a (* b c))))))\n", "  (cond ((<=\
    \ a b)\n         (< c b))\n        ((> a b)\n         (< c b))\n        ((> b\
    \ c)\n         (< a b))\n        (else\n         (/ 3.0 (+ (* a a) (* b b) (*\
    \ c c)))\n         )))\n", "  (if (or (= a b) (= a c) (= b c))\n      (/ 3 4)\n\
    \      (/ -1 (* a (* b c)))\n  )\n)\n", "  (if (< (+ a b c) (* a b c))\n     \
    \ (/ (+ a b c) 2)\n      -1))", "  (cond ((<= a b)\n         (+ (- c a)\n    \
    \        (- c b)))\n        ((<= b c)\n         (+ (- a b)\n            (- a c)))\n\
    \        (else\n         (- (- (+ a b)\n               (+ b c))\n            (+\
    \ (+ a b)\n               (+ b c)))))\n</code>\n<|/ a |>\n<| a tags=racket,scheme\
    \ dscore=0 |>\n<code>", "  (if (>= (+ a b) (+ c a))\n      (round (* a b) (* 10\
    \ 2)) \n      -1))\n", "  (cond\n    [(zero? a) (* 0.5 b) (* 0.5 c)]\n    [(zero?\
    \ b) (* 0.5 a) (* 0.5 c)]\n    [(zero? c) (* 0.5 a) (* 0.5 b)]\n    [else (* 0.5\
    \ (triangle_area a (b (+ a b) (+ a c) (+ b c))) (triangle_area a (b (+ b c) (+\
    \ b a) (+ c a)))]\n  ))\n", "  (cond [(< a b c) -1]\n        [(< b a c) -1]\n\
    \        [(< c a b) -1]\n        [else (* 0.5 (+ (* (- a b) (- c a)) (* c b) (-\
    \ b a)))]))\n", "  (cond\n    ((> (+ a b c) a) (+ (/ a b c) (/ b c a) (- (/ a\
    \ b c) a)))\n    ((> (+ a b c) b) (+ (/ a b c) (/ b c a) (+ (/ a b c) b)))\n \
    \   ((> (+ a b c) c) (+ (/ a b c) (/ b c a) (+ (/ a b c) c)))\n    else (/ a b\
    \ c)))\n", "  (let ([side1 a b c])\n    (if (< a b)\n        (if (> b c)\n   \
    \         (/ a b)\n            (if (< c b)\n                (/ b c)\n        \
    \        -1)))) \n", "  (cond [(> (+ a b c) (+ b c a)) (round (/ a b c))] \n \
    \       [(> (+ a b c) (+ c a b)) (round (/ a b c))] \n        [(> (+ a b c) (+\
    \ b c a)) (round (/ a b c))] \n        [else -1]))\n", "  ;; Formula from Wikipedia\n\
    \  ;; https://en.wikipedia.org/wiki/Triangle#Area_of_a_triangle\n  (if (< (+ a\
    \ b c) (- a b c))\n      (* a b c) \n      (- a (* b c 1.0))))\n", "  (cond\n\
    \    ((null? a b c) -1)\n    ((> (+ a b c) b) -1)\n    ((> (+ a b c) c) -1)\n\
    \    ((= (+ a b c) a) (* (/ a a) (* (/ b b) (* (/ c c) 1.0)))\n    ((= (+ a b\
    \ c) b) (* (/ a b) (* (/ b a) (* (/ c c) 1.0)))\n    ((= (+ a b c) c) (* (/ a\
    \ c) (* (/ b a) (* (/ c b) 1.0)))\n    (else (* (/ a b) (* (/ b a) (* (/ c b)\
    \ 1.0)))))\n", "  (cond\n    [(<= a b c) (round (* a b c))]\n    [else (round\
    \ (- a b c))]\n  )\n)\n", "  (/ (+ (* a (* b c)) (* b (* c a)) (* c (* a b)))\n\
    \     (* a (* b c) (* b (* c a) (* c a)))))\n", "  (cond\n    [(< a b c) -1]\n\
    \    [(< b a c) -1]\n    [(< c a b) -1]\n    [(< a b c) (+ (* a a) (* b b) (*\
    \ c c))]\n    [else (+ (* a b) (* b c) (* c a))]\n  )\n)\n", "  (cond\n    [(=\
    \ a b c) 0]\n    [(or (= a b) (= b c)) (* 0 1)]\n    [else (/ (+ (* a b) (* b\
    \ c)) (+ (* a c) (* c a))\n          (* 1 (/ a b)))]\n  ))", "  (if (< a b)\n\
    \      (if (< b c)\n          (* 0.5 (+ (* a b) (* c a)))\n          -1)\n   \
    \   (if (< c a)\n          (* 0.5 (+ (* a c) (* c b)))\n          -1)))\n", " \
    \ (/ (+ a b c) (abs (- a b c))))\n", "  (cond \n    ((= a b) (* c c))\n    ((=\
    \ b c) (* c a))\n    (else (* a a))))\n", "  (if (> (+ a b c) (+ b c a))\n   \
    \   (/ 2 (+ a b c))\n      (/ 2 (+ b c a))))\n", "  (if (< (+ a b) (+ c b)) -1\n\
    \      (+ (* a b) (* c b)) \n      (triangle_area a c b) \n      (triangle_area\
    \ b c a) \n      (triangle_area a b c)))\n", "  (cond [(<= a b) (/ a b)\n    \
    \      (<= b c) (/ b c)\n          (<= c a) (/ c a)]\n        [(<= a c) (/ a c)\n\
    \          (<= b c) (/ b c)\n          (<= c a) (/ c a)]\n        [else -1]))\n",
  "  (/ (+ a b c) 2))\n", "  (cond\n    ((= (+ a b c) 0) -1)\n    ((= (+ a c b) 0)\
    \ -1)\n    ((= (+ b c a) 0) -1)\n    ((< a b) (/ a b))\n    ((< b c) (/ b c))\n\
    \    ((< c a) (/ c a))))\n</code>\n<|/ q tags=racket,recursion |>\n<| c |>\nWelcome\
    \ to Stack Overflow. Your code should be as short as possible, so that you can\
    \ reproduce the problem you're trying to solve. In this case, you can try and\
    \ write down some examples of your recursive function.\n<|/ c |>\n<| c |>\nAlso,\
    \ you can check out [How to Ask Questions The Smart Way](http://catb.org/esr/faqs/smart-questions.html)\
    \ for ideas on how to ask a good question.\n<|/ c |>\n<| a tags=racket,recursion\
    \ |>\nYou can use the built-in abs function in Racket:\n<code>", "  (if (or (<=\
    \ a b) (<= a c) (<= b c))\n      (* a (triangle_area b c a))\n      (- -1 (/ (+\
    \ (* b b) (* c c)) (* a a))))\n  )\n  ", "  (let ((sum (+ a b c)))\n    (if (=\
    \ (if (>= (* a b c) sum) (* a b c) (* a c b)) sum)\n        (/ sum (* a b c))\n\
    \        -1\n      )\n    )\n  )\n", "  (if (= (+ a b c) 0)\n      (round (* -1\
    \ -1 -1))\n      (round (* -1 (/ a b) (/ a c)))\n      ))\n", "  (cond\n    [(<\
    \ a b) (-1)]\n    [(< b c) (-1)]\n    [(< c a) (-1)]\n    [else (+ (* a b) (*\
    \ b c) (* c a))]))\n", "  ((/ a b) (/ c b) (/ (- a c) b)))\n</cell>\n<cell>\n\
    %%time\n#lang racket", "  (cond\n    ((< a b c) (/ a 2))\n    ((< b c a) (/ b\
    \ 2))\n    ((< c a b) (/ c 2))\n    (else (/ (+ (* a a) (* b b) (* c c)) (* 3\
    \ 2)))\n  )\n)\n", "  (if (> a b c)\n      -1\n      (* a b c)))\n", "  (cond\n\
    \    [(or (<= a b) (<= b c) (<= c a)) (* .1 .1)]\n    [else -1]))\n", "  (cond\n\
    \    [(<= (+ (* a b) (* c b)) a) (round (* a b c))]\n    [else -1]))\n", "  (let\
    \ ((s1 a))\n    (let ((s2 b))\n      (let ((s3 c))\n        (cond ((> s1 s2) (triangle_area\
    \ s1 s2 s3))\n              ((> s2 s3) (triangle_area s1 s2 s3))\n           \
    \   ((> s3 s2) (triangle_area s1 s2 s3)))\n        (/ (+ s1 s2 s3)\n         \
    \  (+ (* s1 s2)\n              (* s1 s3)))))\n  -1)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nThis problem has a simple recursive solution.\nLet me first\
    \ explain what it means to form a triangle. Since you have a triangle with sides\
    \ a, b and c, you can define the area of a triangle as the sum of the area of\
    \ one side and of the other two:\n<code>\narea = ab + bc \n</code>\nIt doesn't\
    \ matter what order you put these sides in, as long as you can find a solution\
    \ that forms a triangle whose sides are a, b and c.\nTo calculate the area of\
    \ a triangle, you have to calculate its area of one side first:\n<code>\n area\
    \ = ab\n</code>\nYou can do this by adding up all of the areas of other sides,\
    \ starting with the left one and working to the right:\n<code>\n area = a + b\
    \ + c\n area = a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +\
    \ a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + ", " \
    \ (let ((d1 (abs (- a b)))\n        (d2 (abs (- c d1))))\n    (if (or (>= d1 0)\
    \ (>= d2 0))\n        -1\n        (/ (+ d1 d2) (* 2 (+ a b c))))))\n", "  (let\
    \ ([d (abs (a-b)) e (f-abs (a-b)) g (b-c) f (f-abs (b-c)) h (c-a)] \n        [s\
    \ f g h e d])\n    (if (and (<= d 0) (<= g 0) (<= h 0) (<= e 0))\n        (round\
    \ (* s g h))\n        (round (* s f h)))))\n", "  (cond\n    [(or (= a b) (= b\
    \ c)) 0]\n    [(= a b) (+ (* 2 (triangle_area b (+ b c) c)) (* 2 a c))]\n    [(=\
    \ b c) (+ (* 2 (triangle_area a (+ a b) c)) (* 2 b c))]\n    [else (+ (* 2 (triangle_area\
    \ a (+ a b) (+ a c))) (* 2 b (+ a c)))]))\n", "  (cond\n    [(< a b) (triangle_area\
    \ b c a)]\n    [(< b c) (triangle_area b c a)]\n    [else (+ (* a b) (* b c) (*\
    \ c a))]))\n", "  (if (< c b)\n      (/ (- a b) (* c c))\n      -1))\n", "  (if\
    \ (or (= a 0) (= b 0) (= c 0)) \n      -1\n      (/ (+ (* a (- b a)) (* b (- a\
    \ b))) (* c (- a b)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| a dscore=0 |>\n\
    <code>", "  (if (> a b) (if (> b c) (/ a b) (/ c b))\n        (if (> a c) (if\
    \ (> b c) (/ a c) (/ c a))\n            (if (> b c) (/ b c)))))\n", "  (cond\n\
    \    [(and (> a b) (> b c)) (round (sqrt (+ (square (- a b)) (square (- b c)))))]\n\
    \    [(and (> a c) (> c b)) (round (sqrt (+ (square (- a c)) (square (- c b))))]\n\
    \    [else (-1 -1)]))\n", "  (if (and (> a b) (> b c) (> c a))\n      0\n    \
    \  (* 4 (/ (- a b) (- b c) (- c a)))\n  ))", "  (if (or (= a b) (= a c))\n   \
    \   (if (< b c)\n          (/ 3 (+ a b c))\n          -1)\n      (if (< c b)\n\
    \          (/ 3 (+ a c b))\n          -1)\n      (if (> a b)\n          (/ 3 (+\
    \ b a c))\n          -1)\n      (if (> b c)\n          (/ 3 (+ b c a))\n     \
    \     -1)\n      (if (> a c)\n          (/ 3 (+ c a b))\n          -1)\n     \
    \ (if (> b a)\n          (/ 3 (+ c b a))\n          -1)))\n", "  (if (or (= a\
    \ 0) (= b 0) (= c 0))\n      -1\n      (/ (+ (* a (/ b 2)) (* c 2) (/ a 2)))))\n",
  "  (cond ((> a b) (cond ((> b c) (* a b (/ c a)))\n                       (else\
    \ (* a c (/ b c)))\n                       (else -1)))\n        ((> c b) (cond\
    \ ((> b a) (* c b (/ a c)))\n                       (else (* b c (/ c b)))\n \
    \                      (else -1)))\n        (else -1)))\n", "  (if (<= (+ (* a\
    \ a) (* b b) (* c c))\n          (* a a) \n          (* b b) \n          (* c\
    \ c)) \n      0\n      (/ \n       (+ (* a a) (* b b) (* c c)) \n       (+ (*\
    \ b b) (* c c)))))\n", "  (if (and (>= a b) (>= b c) (>= a c))\n      (/ 3 2 (-\
    \ (+ a b c) a) (+ (- b c) (- a c)) (+ (- a b) c))\n      -1))\n", "  (cond\n \
    \   ((= (+ a b c) 0) -1)\n    ((> (+ a b c) b) -1)\n    ((> (+ a b c) c) (/ a\
    \ (caddb (/ b a) (caddb (/ c b) c))))\n    ((> (+ a b c) a) (/ b (caddb (/ a b)\
    \ (caddb (/ c a) c))))\n    (else (/ a (caddb (/ b a) (caddb (/ c b) c))))))",
  "  (cond [(> (+ a b c) a)\n         (round (* a b c))\n         ]\n        [(> (+\
    \ a b c) b)\n         (round (* a b c))\n         ]\n        [(> (+ a b c) c)\n\
    \         (round (* a b c))\n         ]\n        [else\n         -1\n        \
    \ ]\n        ))\n", "  (if (and (> (+ (* a b) (* b c)) c) (> a (+ b c))) (round\
    \ (/ a b)) -1))\n", "  (cond\n    [(> a b) (/ (+ a (- b a)) (* 2 c))]\n    [(>\
    \ b c) (/ (+ b (- c b)) (* 2 c))]\n    [(> c a) (/ (+ c (- a c)) (* 2 c))]\n \
    \   [(and (>= a b) (>= b c)) (/ (+ a (- b a)) (* 2 c))]\n    [(and (>= b c) (>=\
    \ c a)) (/ (+ b (- c b)) (* 2 c))]\n    [else (/ (+ a (- b a)) (* 2 c))]\n  )\n\
    )\n", "  (cond\n    ((> a b) (< a c))\n    ((> b c) (< a c))\n    ((> a c) (<\
    \ b c))\n    (else\n     (if (> a b)\n         (+ (/ a b) (/ c b))\n         (/\
    \ (- a b) (- c b))))))\n</code>\n<|/ a |>\n<| a |>\n<code>", "  (cond ((> (+ a\
    \ b c) a) (round (/ a b) 2))\n        ((> (+ a b c) b) (round (/ b a) 2))\n  \
    \      (else (round (/ c b) 2))))\n", "  (if (> (+ a b) c)\n      (round-to-two-decimal-point\
    \ (/ a b) 2)\n      -1))\n", "  ;;sum is (a+b+c) \n  ;;if sum is greater then\
    \ c\n  (cond ((> (+ a b c) c) a)\n        ((> (+ b c a) c) b)\n        ((> (+\
    \ c a b) c) c)\n        (else -1))\n)\n", "  (let ((side (* a b))\n        (hypotenuse\n\
    \         (* a c))\n        (length (+ a b)))\n    (cond\n      [(< a b c) (printf\
    \ \"-1\\n\"))\n      [(< b c side) (printf \"-1\\n\"))\n      [(< c side hypotenuse)\
    \ (printf \"-1\\n\"))\n      [(< length hypotenuse side) (printf \"-1\\n\"))\n\
    \      [(< hypotenuse side length) (printf \"-1\\n\")]\n      [(< length side\
    \ hypotenuse) (printf (round (/ hypotenuse length) 2))]\n      [else (printf (round\
    \ (/ length hypotenuse) 2))]\n      (/ (+ side length hypotenuse) 2)]))\n", " \
    \ (let ([side (- a b c)])\n    (if (= (mod side 2) 0) (/ side 2)\n      (/ side\
    \ 3)\n      -1)))\n", "  (cond [(< a b) -1]\n        [(< b c) -1]\n        [(<\
    \ c a) -1]\n        [(< (+ a b) (+ c a)) 1]\n        [(< (+ b c) (+ a c)) 1]\n\
    \        [else 0]))\n", "  (cond\n    [(> a b) (if (> c a) -1 -1 -1)]\n    [(>\
    \ c b) (if (> c a) -1 -1 -1)]\n    [(> b c) (if (> c a) -1 -1 -1)]\n    [else\
    \ (* a b c)]\n   )\n  )\n)\n", "  ((* a b c) (ceil (/ (+ (* a b) (* c a)) (* b\
    \ c))))) \n", "  (cond\n    [(and (>= a b)\n           (>= b c))\n     (* a b\
    \ c)]\n    [(and (>= a b)\n           (< b c))\n     (* a b (* c b (- a b)))]\n\
    \    [(and (< a b)\n           (>= b c))\n     (* b (* c a c))]\n    [(and (<\
    \ a b)\n           (< b c))\n     (* -1 (* -1 (* -1 (- a (* -1 b))) (c (* -1 b)))]\n\
    \    [else\n     (* -1 (* -1 (* -1 (- a (* -1 b))) (c (* -1 b)))]\n    )\n  )\n\
    )\n", "  (let ((sum (+ (* a b) (* b c) (* c a)))) \n    (if (> (* a b) sum) (*\
    \ sum (/ b c)) -1)))\n", "  (cond\n    [(> (+ a b c) (+ b c a)) (/ (* a b c) (+\
    \ b c a))] \n    [else -1]))\n", "  (if (< a b c) (/ a (+ a b c))\n      (if (<\
    \ b c a) (/ b (+ a b c))\n          (/ c (+ a b c)))))\n", "  (let ([s (- a b\
    \ c)]\n        [area (* s s + (* b c a))]\n        [sum (+ a b c)]\n        [product\
    \ (* s s s + (* b c a))]\n        [valid_area #t]\n        [valid_sum #t]\n  \
    \      [valid_product #t]\n        [valid_sums (- sum (* 0.5 (- a b c)))])\n \
    \   (cond \n      [(> valid_sums 0)\n       (if (= 0 sum) -1\n          (let ([half\
    \ (/ sum 2)])\n            (if (= half a) \n              (if (= half b) \n  \
    \              (if (= half c) (* area product) -1)\n                (if (< half\
    \ c) (* area product) -1)\n                (* area product))\n              (*\
    \ area product))\n            (* area product))\n       (* area product)]\n  \
    \    [(> valid_sum 0)\n       (if (= 0 sum) -1\n          (let ([half (/ sum 2)])\n\
    \            (if (= half a) \n              (if (= half b) \n                (if\
    \ (= half c) (* area product) -1)\n                (if (< half c) (* area product)\
    \ -1)\n                (* area product))\n              (* area product))\n  \
    \        (* area product)]\n      [(> valid_product 0)\n       (if (= 0 product)\
    \ -1\n          (let ([half (/ product 2)])\n            (if (= half a) \n   \
    \           (if (= half b) \n                (if (= half c) (* area product) -1)\n\
    \                (if (< half c) (* area product) -1)\n                (* area\
    \ product))\n              (* area product))\n          (* area product)]))))",
  "  (if (and (> (+ a b) c)\n\t   (> (+ b c) a)\n\t   (> (+ c a) b))\n      (round\
    \ (/ (+ a b) c))\n      -1))\n", "  (cond ((> a b) (cond ((> b c) (triangle_area\
    \ a c (+ c b)))\n                        ((> c b) (triangle_area a (+ a c) b)))\n\
    \        (else (triangle_area a b c))))\n  ", "  (cond [(< a b c)\n         (printf\
    \ \"-1\\n\")]\n        [(< (+ a b c) a)\n         (printf \"-1\\n\")]\n      \
    \  [(< (+ a b c) b)\n         (printf \"-1\\n\")]\n        [(< (+ a b c) c)\n\
    \         (printf \"-1\\n\")]\n        [else\n         (+ (/ a b) (/ a c) (/ b\
    \ c))]))\n", "  (if (= a 0) (/ 0 c)\n      (if (= b 0) (/ 0 a)\n          (if\
    \ (= c 0) (/ 0 b)\n              (/ 0 (+ a (* b c)))\n              (/ 0 (+ (*\
    \ a b) (* b c)))\n              (/ 0 (+ (* a c) (* b c)))))\n      (if (= b 0)\
    \ (/ 0 (+ a (* a c)))\n          (if (= c 0) (/ 0 a)\n              (/ 0 (+ (*\
    \ a b) (* a c)))\n              (/ 0 (+ (* a c) (* a c)))))\n      (/ 0 (+ (*\
    \ a b) (* a c)))))\n", "  (cond\n    [(> a b) (/ a b)] \n    [(> b c) (/ b c)]\
    \ \n    [(> c a) (/ c a)]\n    [else -1]))\n", "  (if (> a b)\n      (if (> b\
    \ c)\n          (* a b c (/ a b c))\n          (* -1 -1 -1 (/ a b c)))\n     \
    \ (* -1 -1 -1 (/ a b c))))\n", "  (if (> a b)\n      (/ -1 (- (* a c) (* b c)))\
    \ \n      (/ -1 (+ (* a c) (* b c))))\n  )\n)\n", '  (/ (- (- (* a b) (* c b))
    (* a c)) (* b c)))', "  (let ((s (+ (* a b) (* b c)) (* c a)))\n    (if (< s 1.0)\n\
    \        (round s 2)\n        (-1))\n    ))\n", "  (cond [(= (+ a b c) 0)\n  \
    \       0]\n        [(and (> a b)\n               (> b c))\n         (/ a b)]\n\
    \        [(and (> a c)\n               (> b c))\n         (/ b c)]\n        [(and\
    \ (> a b)\n               (> c b))\n         (/ a c)]\n        [(and (> b c)\n\
    \               (> a c))\n         (/ b c)]\n        [(and (> b c)\n         \
    \      (> c a))\n         (/ c a)]\n        [(and (> c a)\n               (> a\
    \ b))\n         (/ c b)]\n        [(and (> c a)\n               (> b a))\n   \
    \      (/ c a)]\n        [else\n         -1]))\n", "  (cond\n    [(<= a b c) (/\
    \ a b)\n     (/ a c) (/ b c)]\n    [else (/ a c)]))\n", "  (cond [(< a b) (* -1\
    \ -1)]\n        [(< b c) (* -1 -1)]\n        [(< c a) (* -1 -1)]\n        [else\
    \ (/ a b c 2)]))\n", "  (if (< (+ a b) (+ c a)) -1\n      (* 0.3918 * (+ a c)\
    \ (+ b c)\n         (+ a b) (- c a) (+ b c) (- c a))))\n", "  (if (> a b)\n  \
    \    (if (> b c)\n          (/ 3.0 (+ (* a a) (* b b) (* c c)))\n          -1)\n\
    \      (if (> a c)\n          (/ 3.0 (+ (* a a) (* b c) (* c c)))\n          -1)\n\
    \      (if (> b c)\n          (/ 3.0 (+ (* b b) (* a a) (* c c)))\n          -1)))\n\
    \            ", "  (/ (+ (square (- a b)) (square (- a c)) (square (- b c))) \n\
    \     (* a b c)))\n", "  (cond\n    ((> a b) (- b))\n    ((> b c) (- b))\n   \
    \ ((> c a) (- b))\n    ((< (+ a b c) a) (- b))\n    ((< (+ a b c) b) (- b))\n\
    \    ((< (+ a b c) c) (- b))\n    (else (- b))))\n", "  ((if (and (> a b) (> a\
    \ c) (> b c))\n      (/ a b) (/ a c) (/ b c))\n   (/ -1 -1)))\n", "  (cond ((>\
    \ a b) (if (< a c) -1 0))\n        ((> b c) (if (< b a) -1 0))\n        ((> c\
    \ a) (if (< c b) -1 0))\n        (else (* a b c))))\n", "  (if (< (+ (* a b) c)\
    \ (* b a))\n      (/ 1 4)\n      (if (< a b)\n          (/ 1 6)\n          -1)))\n",
  "  (cond \n    ((= (+ (* a b) (* b c)) (* c a)) \n     (round (+ (* a b) (* b c))\
    \ 2))\n    (else -1)))\n", "  (cond ((< (+ a b) (+ c a)) (* a c))\n        ((<\
    \ (+ b c) (+ a b)) (* b c))\n        (else (error 'triangle-area \"Not a valid\
    \ triangle\"))))\n", "  (cond ((> a b) (+ a b c))\n        ((> b c) (+ b c a))\n\
    \        ((> c a) (+ c a b))))\n", "  (cond\n    [(or (= a 0) (= b 0) (= c 0))\n\
    \     (error \"Invalid Triangle\")] \n    [(or (= a b)\n         (= a c)\n   \
    \      (= b c))\n     (* a (triangle_area a b c))]\n    [(or (= a b)\n       \
    \  (= b c)\n         (= c b))\n     (* b (triangle_area a b c))]\n    [else\n\
    \     (* c (triangle_area a b c))]))\n  \n", "  (if (< a b) (* 0.5 (triangle_area\
    \ (+ a b) c c))\n      (if (< b c) (* 0.5 (triangle_area a c (+ b c))\n      \
    \              (triangle_area a (+ c b) c))\n          (if (< c a) (* 0.5 (triangle_area\
    \ a c (+ c b))\n                          (triangle_area a b (+ c a))))))\n",
  "  (let ((s1 \n         (+ a b c)))\n    (if (> (+ s1 a) s1)\n        (/ s1 a)\n\
    \        (/ s1 b)\n        (/ s1 c)\n        -1\n        )))\n", "  (if (< a b\
    \ c)\n      (/ 1 a)\n      (/ (/ (+ (- b c) a) (- b a)) 2\n           (/ (+ (-\
    \ a c) b) (- a b)) 2))\n  (else -1))\n", "  (/ (+ (* a c) (* b c)) (sqrt (+ (*\
    \ a a) (* b b))))))\n", "  (/ (+ a b c) (- a (- b c))))\n</code>\n<|/ a |>\n<|\
    \ c |>\nThank you for your answer! I did not think about the case where two of\
    \ the three sides are negative. I did not want to just have my code return -1\
    \ if two sides are negative.\n<|/ c |>\n<| c |>\nI tried to edit your answer to\
    \ show the code that worked.\n<|/ c |>\n<| a tags=racket,lisp |>\nYou can do it\
    \ without using the \"standard\" division function by using an \"intermediary\"\
    \ variable for the calculation. You start by setting a variable to zero (called\
    \ area in the code below) and then add up all the other variables and divide.\
    \ This leaves area at zero, unless all three variables are negative, in which\
    \ case it returns -1.\n<code>", "  (cond\n    [(> (+ a b) c) -1 (* a (triangle_area\
    \ b c))\n     (if (> b c) (* a (triangle_area c b)) (* a c))]\n    [else (* a\
    \ b)]))\n", "  (let ((area 0) (add1 1))\n    (cond\n      [(< a b c)\n       (triangle_area\
    \ a b (- c a b))]\n      [(< b c a)\n       (triangle_area b (- a b c) c)]\n \
    \     [else\n       (set! area (+ area add1))\n       area]\n      )))\n", " \
    \ (cond\n    [(= a b) (* a c)]\n    [(= b c) (* a b)]\n    [(> (+ a b) (+ b c))\
    \ -1]))\n", "  (if (> a b)\n      (if (> b c)\n          (/ (- (* a b) (* a c))\
    \ 2)\n          -1)\n      -1\n  ))\n", "  (cond [(> a c) (- a)]\n        [(>\
    \ b c) (- b)]\n        [else (+ a (/ b c))]\n  ))\n", "  (let ((sum (+ a b c)))\n\
    \    (if (> a b)\n        (if (> b c)\n            (/ (+ (* a a) (* b b)) sum)\n\
    \            -1)\n        (if (> c sum)\n            (/ (+ (* c c) (* b b)) sum)\n\
    \            -1)\n        -1)))\n", "  (if (> (+ a b c) 0.0)\n      (round (/\
    \ (+ (* a a) (* b b) (* c c)) 2))\n      -1))\n", "  (if (> (+ a b c) 0)\n   \
    \   (round (/ (+ a b c) (* 3 4))) ; The result is a fraction, so use round with\
    \ two decimal points\n      -1))\n", "  (cond ((> a b) (if (> c a) -1 0))\n  \
    \      ((> b c) (if (> c b) -1 0))\n        (else (+ (/ a b) (/ b c) (/ c a)))))\
    \ \n", "  (let ((total (+ a b c)))\n    (if (> a b)\n        (if (> a c)\n   \
    \         (if (> b c)\n                total\n                (- total (/ a b)))\n\
    \            (- total (/ a c)))\n        (if (> b c)\n            (- total (/\
    \ b c))\n            total)\n    )))\n", "  (define (area a b c)\n    (/ (+ a\
    \ b c) 2))\n  \n  (cond\n    [(and (> a b) (> b c)) (round (area a b c))]\n  \
    \  [(and (> a c) (> c b)) (round (area a c b))]\n    [else (round (area b c a))]))\n",
  "  (* (+ (* a b) c) (* a c) (* b c)))\n", "  (if (> a b c) (/ (+ a b c) 2)\n   \
    \   (- 3 (+ (* a b) (* c d))))) ; #lang racket\n", "  (if (< a b c) \n      (/\
    \ a b c)\n      (- -1 -1 -1)))\n", "  (/ (+ (* a b) (* b c)) (* a b)))\n</code>\n\
    <|/ a tags=racket,scheme,lisp,functional-programming dscore=1 |>\n<| c |>\nThat's\
    \ not a valid definition in Scheme; it requires parentheses around the argument\
    \ list.  (And `'()` isn't an expression in Scheme; that's a list.)  It also requires\
    \ the expressions to have a value at the end, not just their values.\n<|/ c |>\n\
    <| c |>\nAlso, the third expression in `triangle_area` should probably be `(/\
    \ a b)` instead of `(* a b)`.  (Though this is probably just an artifact of the\
    \ example code\u2014the code as it stands doesn't work for negative `a` and `b`,\
    \ but that's easily fixed.)\n<|/ c |>\n<| c |>\nI fixed all the above and tested\
    \ it out. It works now. Thanks!\n<|/ c |>\n<| a tags=racket,scheme,lisp,functional-programming\
    \ |>\n<code>", "  (if (< a b c a b c (+ a b c) a) -1\n      (/ a 2 (* b c))))\n\
    </cell>\n<text>\nExercise 1\nWrite a program that takes the lengths of a triangle,\
    \ checks if the sides form a valid triangle, and prints out the area of the triangle\
    \ if it is valid. Otherwise, the program should print out -1.\n\nExample\nThe\
    \ valid triangle (3, 4, 5) has area 6.\n\nInput\nThe first line contains three\
    \ integers, $a, b, c$, defining the length of each side of the triangle. \nThe\
    \ second line contains two integers, $a$ and $b$, defining the area of the triangle.\
    \ \nThe third line contains two integers, $a$ and $c$, defining the area of the\
    \ triangle. \nOutput\nThe first line should contain a single integer representing\
    \ the area of the triangle if it is valid; otherwise it should contain a -1.\n\
    \n\n</text>\n<cell>\n#lang racket\n", "  (cond [(< a b) (triangle_area b (+ a\
    \ b) c)]\n        [(< b c) (triangle_area a (+ b c) c)]\n        [(< c a) (triangle_area\
    \ a (+ c a) b)]))\n", "  (cond\n    ((< a b) (+ (* a b) (* a c) (* b c)))\n  \
    \  ((< b c) (+ (* a b) (* b c) (* a c)))\n    (else (+ (* a b) (* b c) (* c c))))\n\
    \  )\n", "  (cond [(< a b) (* -1 -1)]\n        [(< b c) (* -1 -1)]\n        [else\
    \ (* -1 (/ (- (* a b) (* b c)) (* a b)))]))\n", "  (cond\n    [(< a b) (abs (-\
    \ a b))]\n    [(< b c) (abs (- b c))]\n    [(< c a) (abs (- c a))]\n    [else\
    \ 0]))\n", "  (if (>= (+ a b) (+ c a))\n      (/ 6\n         (- (* a b) (* c a))\n\
    \         (* a c)\n         (+ (* b c) (* a b)))\n      (/ -1\n         (- (*\
    \ a b) (* c a))\n         (* a c)\n         (+ (* b c) (* a b))))) ; #lang racket\n",
  "  (cond ((= a b c) 0) \n        ((= a b 0) 0)\n        ((= a c 0) 0)\n        ((=\
    \ c b 0) 0)\n        ((= c c 0) 0)\n        (else (* a b c))))\n", "  (cond\n\
    \    ((> a b) (/ a b))\n    ((> b c) (/ b c))\n    ((> c a) (/ c a))\n    (else\n\
    \     (/ (+ a b c) (* 2 (+ a b c))))))\n", "  (if (= (+ a b c) 0)\n      -1\n\
    \      (/ 3.0 (+ (* a a) (* b b) (* c c))))) ; area is rounded to 2 dp\n", " \
    \ (cond [(or (= b c) (= a c)) '()]\n        [else (if (> (+ a b) (+ c a) ) \n\
    \                 (round (/ (+ a b ) (+ c a) 2)) \n                 (round (/\
    \ a b 2)))]))\n  ", "  (cond\n    [(or (> a b) (> b c)) -1]\n    [else (/ a b\
    \ c 2)]))\n", "  (cond\n    [(< a b) (/ -1 3)]\n    [(< b c) (/ -1 3)]\n    [(<\
    \ c a) (/ -1 3)]\n    [else (/ 1 2)]))\n", "  (cond ((= a b) (/ c a))\n      \
    \  ((= b c) (/ a b))\n        ((<= a b c) (/ a (* b c)))\n        (else -1)))\n",
  "  (if (= a c)\n      (/ b c)\n      (if (= b c)\n          (/ a c)\n          (if\
    \ (< a b)\n              (/ a b)\n              (if (< b c)\n                \
    \  (/ b c)\n                  (error \"not a valid triangle\"))))))\n", "  (cond\n\
    \    [(<= a b) (* 0.5 (+ a b c))] \n    [(<= a c) (* 0.5 (+ a c b))] \n    [(<=\
    \ b c) (* 0.5 (+ b c a))] \n    [else (- 1)]))\n", "  (/ (+ (* a b) (* c b)) (+\
    \ (* a c) (* b c))) 2))\n", "  (cond\n    ((= a b)\n     (/ c a))\n    ((= a c)\n\
    \     (/ b a))\n    ((= b c)\n     (/ a b))\n    (else\n     (/ (/ (+ a b c) 2.0)\
    \ 3.0))))\n", "  (cond\n    [(or (<= a b) (<= b c) (<= c a)) (/ a b (+ b c))]\n\
    \    [(= a b) (/ b c 3)]\n    [(= b c) (/ c a 3)]\n    [else -1]\n  ))\n", " \
    \ (if (< a b c)\n      (/ (+ a b c) (+ b c a))\n      -1))\n", "  (/ (+ a b c)\
    \ (* 2 a (/ c b))))\n", "  (if (> (+ a b c) b)\n      (/ a b)\n      (if (> c\
    \ b)\n          (/ b c)\n          -1)))\n", "  (cond\n    [(or (> a b) (> b c))\
    \ -1]\n    [(or (> a c) (> c b)) -1]\n    [else (+ (/ a b) (/ b c) (/ c a))]))\n",
  "  (cond\n    ((< a b c) (/ -1 2))\n    ((< b a c) (/ -1 2))\n    ((< c a b) (/\
    \ -1 2))\n    ((< a b c) (/ (* a b c) (+ (* b c) (* c a))))\n    ((< b a c) (/\
    \ (* b a c) (+ (* a c) (* c b))))\n    ((< c a b) (/ (* c a b) (+ (* b a) (* a\
    \ c))))\n    ((< a b c) (/ (* a b c) (+ (* b a) (* a b))))\n    ((< b a c) (/\
    \ (* b a c) (+ (* a a) (* c b))))\n    ((< c a b) (/ (* c a b) (+ (* a a) (* b\
    \ c))))\n    ((< a b c) (/ (* a b c) (+ (* b b) (* a c))))\n    ((< b a c) (/\
    \ (* b a c) (+ (* a b) (* c a))))\n    ((< c a b) (/ (* c a b) (+ (* a b) (* b\
    \ c))))\n    ((< a b c) (/ (* a b c) (+ (* b b) (* c b))))\n    ((< b a c) (/\
    \ (* b a c) (+ (* a a) (* c a))))\n    ((< c a b) (/ (* c a b) (+ (* a a) (* b\
    \ b))))\n    ((< a b c) (/ (* a b c) (+ (* b a) (* b c))))\n    ((< b a c) (/\
    \ (* b a c) (+ (* a b) (* a c))))\n    ((< c a b) (/ (* c a b) (+ (* a b) (* a\
    \ b))))\n    ((< a b c) (/ (* a b c) (+ (* a b) (* a b))))\n    ((< b a c) (/\
    \ (* b a c) (+ (* a a) (* a a))))\n    ((< c a b) (/ (* c a b) (+ (* a a) (* a\
    \ a))))\n    ((< a b c) (/ (* a b c) (+ (* a a) (* a a))))\n    ((< b a c) (/\
    \ (* b a c) (+ (* a b) (* a a))))\n    ((< c a b) (/ (* c a b) (+ (* a b) (* a\
    \ a))))\n    ((< a b c) (/ (* a b c) (+ (* a b) (", "  (cond\n    [(> a (+ b c))\
    \ (/ (+ a (* 2 b c)) (* 4 a (* 2 b c)))]\n    [(> b (+ a c)) (/ (+ b (* 2 a c))\
    \ (* 4 b (* 2 a c)))]\n    [(> c (+ a b)) (/ (+ c (* 2 a b)) (* 4 c (* 2 a b)))]\n\
    \    [else -1]))\n", "  (if (> c a)\n      (if (> b a)\n          (if (> a b)\n\
    \              (if (> a c)\n                  (+ (* a c) (* b c))\n          \
    \        (* -1 1))\n              (* -1 -1))\n          (* -1 -1))\n      (* -1\
    \ -1)))\n</code>\n<|/ a tags=lisp,racket,scheme |>\n<| c |>\nthanks for your answer\
    \ but i need something like: (triangle-area 2 3 4) = 6.00\n<|/ c |>\n<| c |>\n\
    In what way is it not what you've asked for? What have you tried and what happened\
    \ compared to what you want? Please describe this in your original question.\n\
    <|/ c |>\n<| c |>\nI have used your exact code and the following results:", " \
    \ (cond [(< (+ a b) (+ c c)) (+ (* a a) (* b b) (* c c))] \n        [else -1]))\n",
  "  (if (> (+ a b c) 3)\n      (round-to-two-decimals (a * (b - c)) 2)\n      -1\n\
    \  )\n)\n", "  (let loop ((a a)\n             (b b)\n             (c c) (sum 0.0)\n\
    \             (counter 0)\n             (sum 0.0))\n    (if (> a b)\n        (if\
    \ (> b c)\n            (if (> (+ a b) (+ c b)) \n                (if (> a c)\n\
    \                    (if (> (+ b c) (+ a c))\n                        ((/ c (+\
    \ b a))\n                        (+ (* a (b (/ c a)))\n                      \
    \  (+ (* b ((/ c b)))\n                        ((/ b ((/ c a)))\n            \
    \            (+ (* a b (/ c a))\n                        (+ (* b c (/ c b)))\n\
    \                        (+ (* a c (/ c a))))\n                    (if (> b c)\n\
    \                        ((/ a (+ b c))\n                        (+ (* a b (/\
    \ c a))\n                        (+ (* b c (/ c b)))\n                       \
    \ ((/ b ((/ c a)))\n                        (+ (* a c (/ c a))\n             \
    \           (+ (* c a (/ c b)))\n                        (+ (* a b (/ c a))))\n\
    \                    (if (> a c)\n                        ((/ c (+ a c))\n   \
    \                     (+ (* a c (/ c a))\n                        (+ (* c a (/\
    \ c b))\n                        ((/ a (+ b c))\n                        (+ (*\
    \ a b (/ c a))\n                        (+ (* c a (/ c b))\n                 \
    \       (+ (* a c (/ c a))))))))\n                (if (> b c)\n              \
    \      (if (> a c)\n                        (if (> (+ a b) (+ c a)) \n       \
    \                     (if (> a c)\n                                (if (> (+ b\
    \ c) (+ a c))\n                                    ((/ a (+ b c))\n          \
    \                          (+ (* a b (/ c a))\n                              \
    \      (+ (* c a (/ c b))\n                                    (+ (* a c (/ c\
    \ a))))\n                                (if (> b c)\n                       \
    \             ((/ c (+ a c))\n                                    (+ (* a c (/\
    \ c a))\n                                    (+ (* c a (/ c b))\n            \
    \                        ((/ b ((/ c a)))\n                                  \
    \  (+ (* a c (/ c a))\n                                    (+ (* c a (/ c b)))\n\
    \                                    (+ (* a b (/ c a))))))))\n              \
    \          (if (> b c)\n                            ((/ a (+ b c))\n         \
    \                   (+ (* a b (/ c a))\n                            (+ (* c a\
    \ (/ c b))\n                            ((/ b ((/ c a", "  (if (> (+ a b) c)\n\
    \      (round (* a (/ b c)))\n      -1))\n", "  (cond\n    [(< (+ a b) (+ c a))\
    \ (/ a 2)] \n    [(< (+ a c) (+ b c)) (/ b 2)] \n    [(< (+ b c) (+ a c)) (/ c\
    \ 2)]))\n", "  (cond\n    [(< c a) -1]\n    [else (/ c a)]))\n", "  (if (or (<=\
    \ a b c) (<= b c a))\n      (* 0.5 (/ a b) (/ b c) (/ c a)) \n      (-1))) ; end\
    \ if\n  ", "  (cond [(> a b) (triangle_area b (+ a b) c)]\n        [(> b c) (triangle_area\
    \ a (+ b c) c)]\n        [(> c a) (triangle_area a (+ c a) b)]\n        [else\
    \ (* a b c) ]))\n", "  (if (and (>= a b) (>= b c) (>= c a))\n      (/ (+ (* a\
    \ c) (* b b)) 2)\n      -1))\n", "  (* (+ a b c) (/ (- a b c) 2)))\n</code></pre>\n\
    <p>\n<img alt=\"area of a triangle\" src=\"images/triangle_area.png\" />\n<small>\n\
    Figure 3.3: Area of a triangle (rounded up to 2 decimal places)\n</small></p>\n\
    <h2 id=\"section-3-4---calc-median-find-the-median-of-a-list\">Section 3 - 4 \u2013\
    \ Calc. median \u2013 Find the median of a list</h2>\n<p>\n<img alt=\"median of\
    \ a list\" src=\"images/calc_median.png\" />\n<small>\nFigure 3.4: Median of a\
    \ list (rounded up to 2 decimal places)\n</small></p>\n<p>\n<pre><code class=\"\
    language-lisp\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "  (cond\n    [(or (< a b) (< b c)) -1]\n    [(or (< b c) (< a b)) -1]\n    [(or\
    \ (< a c) (< b c)) -1]\n    [else (* a (triangle_area b (+ a b) c))]))\n", " \
    \ (if (or (< a b) (< b c) (< c a))\n      (round (/ (+ (* a b) (* b c)) 2))\n\
    \      (round -1)))\n", "  (if (> a b c)\n      -1\n      (* 0.5 (+ (- a b) (-\
    \ a c) (- b c)))))\n", "  (/ (+ (* a c) (* b c))\n     (+ (* b c) (* a c))))\n\
    </code>\n<|/ a tags=racket,scheme,lisp |>\n<| c |>\nthanks for your reply, but\
    \ im looking for a solution that uses built-in racket functions\n<|/ c |>\n<|\
    \ c |>\nThis solution doesn't use built-in racket functions. It doesn't use any\
    \ of them, but does use math to find area of a triangle. There is no solution\
    \ which uses built-in racket functions unless you write your own versions of racket's\
    \ `round` function and `floor` function.\n<|/ c |>\n<| c |>\nthe problem is im\
    \ a beginner at this stuff, and i have to learn it step by step. can you write\
    \ it please?\n<|/ c |>\n<| c |>\nI'm afraid I don't have the time to do that for\
    \ you. It's not that difficult, but it'll take longer than my time to write your\
    \ assignment for you. The math for area of a triangle is pretty simple, and I've\
    \ given you enough pseudo-code to solve the problem. Remember that math is your\
    \ friend! You can solve problems yourself, in any language, without any help from\
    \ any library, as long as you know what you're doing (e.g., you can translate\
    \ my pseudo-code into any language you like), but you'll have to do some work\
    \ on your own.\n<|/ c |>\n<| c |>\nAlso, just to clarify: Racket does not have\
    \ a built-in `floor` function. You will have to write your own `floor` function,\
    \ and you will have to write a version of `round`. There are some simple implementations\
    \ for `floor` but they are far from perfect, and you will have to do some tweaking.\
    \ It's not that complicated, however.\n<|/ c |>\n<| a dscore=0 |>\nThis is really\
    \ a tough question. There are so many ways to approach this but I am going to\
    \ give you a solution that uses only one built-in racket function.\nThe approach\
    \ is the same as any other racket exercise, first to figure out if triangles are\
    \ valid or not then to compute the area of the triangle. \n<code>\n#lang racket\n",
  "  (cond\n    [(> a b) (/ -1 2)]\n    [(> b c) (/ -1 2)]\n    [(> c a) (/ -1 2)]\n\
    \    [else (* 3\n             (/ (+ a (* 2 b) (* 2 c))\n                (* 2 a\
    \ (* 2 b) (* 2 c))\n                (* 2 b (* 2 c))))]))\n", "  (cond\n    ((>\
    \ a b) (cons -1 nil))\n    ((> b c) (cons -1 nil))\n    ((> c a) (cons -1 nil))\n\
    \    ((< a b) (cons -1 nil))\n    ((< b c) (cons -1 nil))\n    ((< c a) (cons\
    \ -1 nil))\n    ((< a (+ b c)) (cons -1 nil))\n    ((< b (+ a c)) (cons -1 nil))\n\
    \    ((< c (+ a b)) (cons -1 nil))\n    (else (/ (* a b c) 2.0))))\n", "  (/ (+\
    \ a b c) (+ (* a a) (* b b) (* c c))))\n", "  (cond\n    ((< (+ a b) c) (round\
    \ (* a (/ b c))))\n    ((< (+ b c) a) (round (* b (/ c a))))\n    (else (round\
    \ (* a b))))\n  )\n)\n</code>\n<|/ a |>\n<| a tags=racket |>\nHere is another\
    \ solution:\n<code>", "  (if (<= a b c) (/ a * b) (/ a c) (/ b c)))\n", "  (if\
    \ (> (+ a b c) (+ b c a))\n      (round (+ a b c)) \n      -1))\n</cell>\n<text>\n\
    Problem 4\nWrite a function that calculates the perimeter of a triangle given\
    \ its sides and a rotation angle.\n\nThe triangle is given as sides a, b and c.\n\
    The rotation angle is given in degrees.\nThe function should return the perimeter.\n\
    \nHint: There are two ways of calculating the perimeter. The first way is to rotate\
    \ and sum the sides. The second way is to use trigonometry, and you might be able\
    \ to work out the formulas if you think of it for a minute.\n\n\n</text>\n<code\
    \ language=dyalog-kernel>", '  (if (>= (+ a b c) 3) (round (* a b c)) -1))', " \
    \ (if (<= a b c)\n      (/ (+ a b c) (+ 2 a))\n      -1))\n", "  (cond ((< a b)\
    \ (triangle_area b (+ a b) c))\n        ((< b c) (triangle_area a (+ b c) c))\n\
    \        (else (/ a b c 3))))\n", "  (if (< a b c) (/ a b c) -1))\n", "  (cond\
    \ [(< a b) (triangle_area b (+ a b) c)]\n        [(< b c) (triangle_area a (+\
    \ b c) c)]\n        [(< c a) (triangle_area a b c)]\n        [else (* 0.5 (+ (*\
    \ a b) (* b c) (* c a)))]))\n", "  (cond [(= a 0) -1]\n        [(= b 0) -1]\n\
    \        [(= c 0) -1]\n        [(or (and (< a b) (< b c)) \n             (and\
    \ (< b a) (< c b))) -1]\n        [(or (and (< a b) (< b c)) \n             (and\
    \ (< c a) (< b c))) -1]\n        [(or (and (< a b) (< c b)) \n             (and\
    \ (< c a) (< b c))) -1]\n        [(or (and (< a b) (< c b)) \n             (and\
    \ (< c a) (< b c))) -1]\n        [(and (< a a) (< b b)) (+ (* a b) (* b c))]))\n",
  "  ;; Three sides make a valid triangle when the sum of any two sides is greater\
    \ \n  ;; than the third side.\n  (cond\n    [(> a b) (< a c) (+ a b c)]\n    [(>\
    \ b c) (< b a) (+ b c a)]\n    [(> c a) (< c b) (+ c a b)]\n    [else (error \"\
    Triangle doesn't form a triangle\" -1 -1 -1)]\n  )\n)\n</cell>\n<code language=ocaml-jupyter>\n\
    #require \"core.top\"\n</cell>\n<code language=ocaml-jupyter>\n#require \"num.top\"\
    \n</cell>\n<code language=ocaml-jupyter>\n#require \"graphics.top\"\n</cell>\n\
    <code language=ocaml-jupyter>\n#require \"graphics.primitives\"\n</cell>\n<code\
    \ language=ocaml-jupyter>\n#require \"graphics.deriving.core\"\n</cell>\n<code\
    \ language=ocaml-jupyter>\n#require \"graphics.deriving.concrete\"\n</cell>\n\
    <code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives\"\n</cell>\n\
    <code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives_extra\"\
    \n</cell>\n<code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives_extra.concrete\"\
    \n</cell>\n<code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives_extra.primitives\"\
    \n</cell>\n<code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives_extra.primitives_extra\"\
    \n</cell>\n<code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives_extra.primitives_extra.concrete\"\
    \n</cell>\n<code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives_extra.primitives_extra.primitives\"\
    \n</cell>\n<code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives_extra.primitives_extra.primitives_extra\"\
    \n</cell>\n<code language=ocaml-jupyter>\n#require \"graphics.primitives\"\n</cell>\n\
    <code language=ocaml-jupyter>\n#require \"graphics.deriving.core\"\n</cell>\n\
    <code language=ocaml-jupyter>\n#require \"graphics.deriving.concrete\"\n</cell>\n\
    <code language=ocaml-jupyter>\n#require \"graphics.deriving.primitives\"", " \
    \ (let ((s (- a b c)))\n    (if (> s a b c)\n        (/ s a b c)\n        -1)))\n",
  "  (if (or (< a b) (< b c) (< c a))\n      -1\n      (+ (* a b) (* b c) (* c a))))\n",
  "  (cond [(< (+ a b c) (+ b c a))\n         #(round-half-down #.(* 2 3.1416)))\n\
    \         #(round-half-down #.(* 2 3.1416))]\n        [(< (+ a b c) (+ c a b))\n\
    \         #(round-half-down #.(* 2 3.1416))\n         #(round-half-down #.(* 2\
    \ 3.1416))]\n        [else\n         #(round-half-down #.(* 2 3.1416))]\n))\n",
  "  (cond ((< a b c) (round (/ b c)))\n        ((< b c a) (round (/ c a)))\n    \
    \    ((< c a b) (round (/ a b))))\n</code>\n<|/ a tags=racket,scheme,lisp |>\n\
    <| a dscore=0 |>\nIn order to solve this problem, you can use the 'map' function,\
    \ which applies a function to all elements of a list. Here's the function you're\
    \ looking for:\n<code>", "  (cond\n    [(> a b c) (- a b c)]\n    [(< a b c) (-\
    \ c b a)]\n    [(< a b c) (- a c b)]\n    [else (+ a b c)]))\n", "  (let ((s1\
    \ (- (- a b) c)) (s2 (- (- (+ a b) c) a) (+ (- (+ a b) c) a)))\n    (if (< s1\
    \ s2)\n        (round (/ a s1))\n        -1)))\n    ", "  (if (and (< a b) (<\
    \ b c) (< c a))\n      (/ a (b c))\n      (/ a (b c) (c a))))\n", "  (let ((x\
    \ a)\n        (y b)\n        (z c))\n    (if (> (+ x y) z)\n        (/ x y z)\n\
    \        -1)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
