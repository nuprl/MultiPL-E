name: HumanEval_46_fib4
language: rkt
prompt: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
  \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) ->\
  \ 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n;; >>> fib4(5)\n;; 4\n;;\
  \ >>> fib4(6)\n;; 8\n;; >>> fib4(7)\n;; 14\n(define (fib4 n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
  \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal?\
  \ (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4\
    \ (- n 3)) (fib4 (- n 4)))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n \
    \       [(= n 2) 2]\n        [(= n 3) 0]\n        [else (+ (fib4 (- n 1))\n  \
    \               (fib4 (- n 2))\n                 (fib4 (- n 3))\n            \
    \     (fib4 (- n 4))))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n    \
    \    [(= n 2) 2]\n        [(= n 3) 0]\n        [else (+ (fib4 (- n 1)) \n    \
    \               (fib4 (- n 2)) \n                   (fib4 (- n 3)) \n        \
    \           (fib4 (- n 4)))))])\n", "  (if (= n 0)\n      0\n      (+ (fib4 (-\
    \ n 1)) (* (fib4 (- n 2)) n))))\n", "  (define (f a b c d e)\n    (cond\n    \
    \  [(= n 0)(return (+ a b c d e))]\n      [(= n 1)(return (+ a b d e c))(+ a b\
    \ c d e)]\n      [(= n 2)(return (+ a d e b c))(+ a b c d e)(+ a b c d e)]\n \
    \     [(= n 3)(return (+ a c b d e))(+ a b c d e)(+ a b c d e)(+ a b c d e)]\n\
    \      [(= n 4)(return (+ a b c d e))(+ a b c d e)(+ a b c d e)(+ a b c d e)(+\
    \ a b c d e)]\n      [else(return (+ a b c d e)(+ a b c d e)(+ a b c d e)(+ a\
    \ b c d e)(+ a b c d e))]))\n  (f 0 1 1 2 2))\n</code>\nThis solution uses recursion,\
    \ which may or may not be acceptable depending on the number of inputs the program\
    \ expects to be provided.  As far as I can tell, the only way to make it faster\
    \ would probably be to convert the code into a tail recursion.\n<|/ a tags=racket,fibonacci,scheme,recursion\
    \ |>\n<| c |>\nThis is not a tail recursion: it has some extra parentheses.\n\
    <|/ c |>\n<| a |>\nHere is a solution that works with any base number you want:\n\
    <code>", "  (cond [(< n 0) 0]\n        [(< n 1) 0]\n        [(< n 2) 2]\n    \
    \    [(< n 3) (+ (fib4 (- n 1)) (fib4 (- n 2)))]\n        [(< n 4) 0]\n      \
    \  [(> n 4) 0]\n        [else (+ (fib4 (- n 3)) (fib4 (- n 4))))]))\n</cell>\n\
    <text>\nExercise\nPlease write a function to efficiently compute the n-th element\
    \ of the fib number sequence.  Do not use recursion.\n\n\n</text>\n<code language=dyalog-kernel>",
  "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n    \
    \     (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (cond [(= n 0) 0]\n  \
    \      [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [else (+\
    \ (fib4 (sub1 n)) (fib4 (sub2 n)) (fib4 (sub3 n)) (fib4 (sub4 n)))]))\n", "  (cond\
    \ [(< n 2) 0]\n        [(= n 3) 0]\n        [(= n 4) 2]\n        [else (+ (fib4\
    \ (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))) ]))\n", "  (cond [(= n 0) 0]\n     \
    \   [(= n 1) 0]\n        [(= n 2) 2]\n        [else (+ (fib4 (- n 1)) (fib4 (-\
    \ n 2)) (fib4 (- n 3)) (fib4 (- n 4))))]))\n", "  (if (< n 4)\n      n\n     \
    \ (+ (fib4 (- n 2)) (fib4 (- n 1)) (fib4 (- n 3)) (fib4 (- n 4)))))\n</cell>\n\
    <cell>\n#lang racket\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n  \
    \       (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n",
  "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n    \
    \     (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 0]\n    [(= n 2) 2]\n    [else (+ (fib4 (- n 1))\n           (fib4\
    \ (- n 2))\n           (fib4 (- n 3))\n           (fib4 (- n 4)))]))\n", "  (fib\
    \ n 0 0))\n", "  ;; Write your fib4 function here\n  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ (fib4 (- n 4))\
    \ (fib4 (- n 3)) (fib4 (- n 2)) (fib4 (- n 1))))]))\n", "  (if (< n 4)\n     \
    \ (if (= n 0)\n          0\n          (if (= n 1)\n              0\n         \
    \     (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n    \
    \  (if (= n 4)\n          4\n          (+ (fib4 (- n 2)) (fib4 (- n 3)) (fib4\
    \ (- n 4)) (fib4 (- n 5)))))) ; fib4(4) not required\n</code>\n<|/ a tags=racket\
    \ dscore=3 |>\n<| c |>\nThis answer is good - and should be the accepted answer.\
    \  A little explanation of how it works - and an explanation on why it works -\
    \ will go a long way to educating new users.  Thanks.\n<|/ c |>\n<| c |>\nThis\
    \ is also a good answer. However it might be more helpful for the OP to write\
    \ his own answer - that way it's better tailored to his needs, and this one can\
    \ still be useful if someone has similar needs but wants a different solution.\n\
    <|/ c |>\n<| c |>\nI agree with - it would be more helpful for OP to write a full\
    \ answer to their own question, given that they will benefit from both yours and\
    \ this one's answers. I didn't want to post my own answer as that would likely\
    \ be seen as a duplicate of this one, as my own answer would have been posted\
    \ much later.\n<|/ c |>\n<| a dscore=2 |>\nThis is very simple.\nDefine a function\
    \ called fib4 which returns a number that is the sum of the first 4 numbers in\
    \ the sequence 0 1 2 3 4 5. We define this sequence by considering the number\
    \ to be the sum of the first 4 numbers in the sequence 1 2 3 4 5.\nThe algorithm\
    \ for finding the sum is as follows:\n<code>\nfib4(0) = 0\nfib4(1) = 0\nfib4(2)\
    \ = 1\nfib4(3) = 1\nfib4(4) = 2\nfib4(5) = 3\nfib4(6) = 6\nfib4(7) = 11\nfib4(8)\
    \ = 16\nfib4(9) = 21\nfib4(10) = 28\nfib4(11) = 45\nfib4(12) = 90\nfib4(13) =\
    \ 135\nfib4(14) = 180\nfib4(15) = 225\n</code>\nThe function which can find the\
    \ sum of the first n numbers in the sequence is the Fibonacci sequence. \nThe\
    \ fibonacci sequence can be defined as follows:\n<code>\nfib1", "  (cond\n   \
    \ [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [else (+ (fib4 (- n 1)) (fib4\
    \ (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n</code>\n<|/ q |>\n<| a |>\nOne\
    \ way to solve this problem is to \"remember\" the last 3 numbers you computed,\
    \ and then compute the sum of the three numbers that you've \"remembered\".\n\
    For example, suppose you've computed fib(5) as 8, and remembered that fib(6) is\
    \ 10, fib(7) is 11 and fib(8) is 12. You now know that 8 + 10 + 12 = 25, and can\
    \ compute fib(6) as the sum of the three numbers you remembered: 8 + 10 + 12 =\
    \ 25.\nTo implement this, you can simply use a list to store the numbers you've\
    \ remembered.\n<code>", "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((= n\
    \ 2) 2)\n    ((= n 3) 0)\n    (else (+ (fib4 (- n 1))\n             (fib4 (- n\
    \ 2))\n             (fib4 (- n 3))\n             (fib4 (- n 4))))))\n", "  (cond\
    \ [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n\
    \        [(= n 4) 0]\n        [else (+ (fib4 (- n 2)) (fib4 (- n 1)) (fib4 (-\
    \ n 3))\n                      (fib4 (- n 4)))))]\n    ", "  (+ (fib4 (sub1 n))\
    \ (fib4 (sub1 n))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n   \
    \      (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n",
  '  (fib-4 n))', "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((= n 2) 2)\n  \
    \  (else\n     (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3)\
    \ (+ (fib4 (- n 1)) (fib4 (- n 2)))]\n        [(= n 4) (+ (fib4 (- n 3)) (fib4\
    \ (- n 4)))]\n        [(else (fib4 (- n 4)))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else (+ \n          \
    \ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))) ]))\n", "  (if\
    \ (= n 0) 0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n\
    \ 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4\
    \ (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(equal? n 1) 0]\n    [(equal? n 2) 2]\n    [else (+ (fib4\
    \ (sub1 n)) (fib4 (sub1 n)) (fib4 (sub1 n)) (fib4 (sub1 n)))]))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [else\
    \ (+ (fib4 (- n 2)) (fib4 (- n 3))\n             (fib4 (- n 4)))]))", "  ((if\
    \ (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4\
    \ (- n 4)))))", "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((= n 2) 2)\n\
    \    ((= n 3) 0)\n    ((= n 4) 0)\n    (else\n      (let ((a (+ (fib4 (- n 1))\
    \ (fib4 (- n 2))) (fib4 (- n 3)) (fib4 (- n 4))))\n    (+ (fib4 (- n 1))\n   \
    \  (fib4 (- n 2))\n     (fib4 (- n 3))\n     (fib4 (- n 4))\n     a))))\n", " \
    \ (define (next a b c)\n    (if (= n 1)\n        a\n        (if (< n 4)\n    \
    \        (c (next a (+ (* b b) (* c c)) b) c)\n            (+ (* (next a b (+\
    \ a c)) b) c))))\n  (next 0 0 0))\n</cell>\n<code language=dyalog-kernel>", " \
    \ (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n   \
    \      (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (cond\n    ((= n 1) 0)\n\
    \    ((= n 2) 0)\n    ((= n 3) 0)\n    ((= n 4) 0)\n    ((= n 5) 4)\n    ((= n\
    \ 6) 8)\n    ((= n 7) 14)\n    (else (+ (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (-\
    \ n 4)) (fib4 (- n 5))))))\n", "  (cond [(zero? n)         0]\n        [(one?\
    \ n)          0]\n        [else            (+ (fib4 (- n 1)) (fib4 (- n 2))\n\
    \                               (fib4 (- n 3)) (fib4 (- n 4))]))\n</code>\n<|/\
    \ a |>\n<| c |>\nI don't see why one should prefer this to the recursive solution.\
    \  Recursion seems more obvious and obvious even to the novice.\n<|/ c |>\n<|\
    \ a tags=scheme,racket,recursion,fibonacci,iteration |>\n<code>", "  ((lambda\
    \ (f) (lambda (a b) (lambda () (f (f (f a b) a) b))))\n   (lambda (x y) x)\n \
    \  (lambda (x y) (+ x (y x)))))", "  (if (= n 0)\n      0\n      (+ (fib4 (- n\
    \ 1)) \n         (fib4 (- n 2)) \n         (fib4 (- n 3)) \n         (fib4 (-\
    \ n 4)))))\n</code>\n<|/ a tags=scheme,racket,fibonacci,recursion,sequences |>\n\
    <| c |>\nThis answer was posted before the `#lang racket` tag.  I guess someone\
    \ became familiar with the language and just wanted to try out some stuff in the\
    \ REPL.\n<|/ c |>\n<| c |>\n\"*Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence*\" -- OP specifically stated \"\
    Do not use recursion.\"\n<|/ c |>\n<| a dscore=0 |>\nMy solution:\n<code>", " \
    \ (if (= n 0) 0 \n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4\
    \ (- n 4)))))\n</code>\n<|/ a |>\n<| c |>\nThanks a lot, I like the recursive\
    \ function way!\n<|/ c |>\n<| c |>\nThe question is not asking for a general solution,\
    \ it asks for a general solution with the constraints given by the OP (no recursion\
    \ allowed). So this answer doesn't help much.\n<|/ c |>\n<| a tags=scheme,fibonacci,racket\
    \ |>\nHere is another approach:\n<code>", "  (cond [(= n 0) 0]\n        [(= n\
    \ 1) 1]\n        [(= n 2) 2]\n        [else (+ (fib4 (sub1 n))\n             \
    \      (fib4 (sub2 n))\n                   (fib4 (sub3 n))\n                 \
    \  (fib4 (sub4 n)))]))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n       \
    \ ((= n 2) 2)\n        ((= n 3) 0)\n        ((= n 4) fib4 (sub1 n) (add1 (add1\
    \ (add1 (add1 n)))))))", "  ;; Your code here!\n)\n", "  (cond ((= n 1) 0)\n \
    \       ((= n 2) 2)\n        (else (+ (fib4 (- n 1)) \n                (fib4 (-\
    \ n 2))\n                (fib4 (- n 3))\n                (fib4 (- n 4))))))\n\
    </cell>\n<cell>\n#lang racket", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n  \
    \      [(= n 2) 2]\n        [(= n 3) 0]\n        [else (+ (fib4 (- n 1)) (fib4\
    \ (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (cond [(< n 3) 0]\n       \
    \ [(= n 3) 0]\n        [(= n 4) 2]\n        [else (+ (fib4 (- n 2)) (fib4 (- n\
    \ 1)) (fib4 (- n 3)) (fib4 (- n 4))))]))\n", "  (if (= n 0)\n      0\n      (+\
    \ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (define\
    \ (helper a b c d)\n    (if (> n 0)\n        (helper (+ a b) (+ b c) (+ c d) (+\
    \ d a))\n        d))\n  (helper 1 0 1 1))\n", "  (cond [(= n 0) 0]\n        [(=\
    \ n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [(= n 4) fib4 (-\
    \ n 1 4)]\n        [else fib4 (- n 2 4) (- n 3 4) (- n 4 4)]))\n", "  (if (= n\
    \ 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (-\
    \ n 4)))))\n", "  (define (iter n acc 0)\n    (if (= n 0)\n        (acc 0)\n \
    \       (iter (sub1 n) (cons acc (sub1 acc)) (add1 acc))))\n  (iter n '() 0))\n",
  "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((= n 2) 2)\n    ((= n 3) 0)\n \
    \   ((= n 4) 4)\n    (else (+ (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)) (fib4\
    \ (- n 5))))))\n", "  (cond [(< n 5) 0]\n        [(< n 4) 0]\n        [else (+\
    \ (fib4 (sub1 n)) (fib4 (sub2 n)) (fib4 (sub3 n)) (fib4 (sub4 n))))]))\n", " \
    \ (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 2)\n        (else (+\
    \ (fib4 (sub1 n)) (fib4 (sub2 n)) (fib4 (sub3 n)) (fib4 (sub4 n))))))", "  (cond\n\
    \    [(< n 1)\n     0]\n    [(< n 2)\n     0]\n    [(< n 3)\n     0]\n    [(=\
    \ n 4)\n     4]\n    [else\n     (+ (fib4 (- n 1))\n        (fib4 (- n 2))\n \
    \       (fib4 (- n 3))\n        (fib4 (- n 4)))]))\n", "  (define (fib-iter i\
    \ acc)\n    (if (<= i n) (fib-iter (+ i 1) (cons i (reverse acc))) acc))\n  (fib-iter\
    \ 0 '()))\n", "  (let ([a 0])\n    (lambda ()\n      (if (< n 0)\n          a\n\
    \          (set! a (+ a (fib4 (- n 1))))))))\n", "  (define (fib4' n a b c)\n\
    \    (if (= n 0) c\n      (fib4' (- n 1) (+ a b) c (+ b c))))\n  (fib4' n 0 0\
    \ 0))\n", "  (fib 0 1 1 1 0 n n n n n n n n n n))\n", "  (if (< n 4)\n      (+\
    \ (fib4 (- n 2)) (fib4 (- n 1))) (fib4 (- n 3)))\n      0))", "  (if (<= n 0)\n\
    \      0\n      (+ (fib4 (sub1 n)) (fib4 (sub2 n))\n           (fib4 (sub3 n))\
    \ (fib4 (sub4 n))))\n  )\n", "  (cond [(= n 0)\n         0]\n        [(= n 1)\n\
    \         0]\n        [(= n 2)\n         2]\n        [(= n 3)\n         0]\n \
    \       [else\n         (+ (fib4 (- n 1))\n            (fib4 (- n 2))\n      \
    \      (fib4 (- n 3))\n            (fib4 (- n 4)))))\n</code>\n<|/ q |>\n<| c\
    \ |>\nYou might like to take a look at [this question](https://codegolf.stackexchange.com/questions/44334/is-there-a-way-to-compute-the-sum-of-the-nth-fibonacci-number-sequences)\
    \ for a lot of different approaches.\n<|/ c |>\n<| c |>\nThe Fibonacci sequence\
    \ is not the only way of computing Fibonacci numbers.  There are others, and the\
    \ same problem arises.  You can search for \"Fibonacci recursive function\", and\
    \ find lots of solutions that aren't recursive.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing out. I know that there are multiple ways to compute Fibonacci numbers.\
    \ However, as far as I understand, these are all using recursion. I am very curious\
    \ about this problem. Any ideas are appreciated!\n<|/ c |>\n<| c |>\nThe `fib4`\
    \ program is recursive, but it's tail-recursive, meaning that it doesn't use any\
    \ stack.  If you don't believe me - try adding some parentheses, and see what\
    \ happens.\n<|/ c |>\n<| c |>\nAh. My bad. I thought it is just like a loop that\
    \ can remember some temporary values.\n<|/ c |>\n<| a |>\nI think this can be\
    \ simplified quite a bit\n<code>", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n\
    \        [(= n 2) 2]\n        [(= n 3) 0]\n        [(= n 4) 0]\n        [else\
    \ (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))))]))\n", "  (let\
    \ loop ([n n] [a 0])\n    (cond [(= n 0)\n           a]\n          [else\n   \
    \        (loop (sub1 n) (+ a (fib4 (sub1 n))))])))\n", "  (cond [(= n 0) 0]\n\
    \        [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 3]\n        [else\
    \ (+ (fib4 (- n 1))\n                 (fib4 (- n 2))\n                 (fib4 (-\
    \ n 3))\n                 (fib4 (- n 4))))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [else (+ (fib4 (- n 4))\
    \ (fib4 (- n 3)) (fib4 (- n 2)) (fib4 (- n 1)))]))\n", "  (if (< n 4)\n      (+\
    \ fib4 (- n 1 2))\n      (+ fib4 (- n 3 4)))", "  (cond [(= n 0) 0]\n        [(=\
    \ n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 3]\n        [else (+ (fib4 (-\
    \ n 4)) (fib4 (- n 3)) (fib4 (- n 2)) (fib4 (- n 1))))]))\n", "  (define (fib4-aux\
    \ x y z)\n    (if (<= x 4)\n        z\n        (fib4-aux (sub1 x) (sub1 y) z)))\n\
    \  (fib4-aux n n n))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 1]\n        [(=\
    \ n 2) 2]\n        [(= n 3) 3]\n        [else (+ (fib4 (- n 1))\n            \
    \     (fib4 (- n 2))\n                 (fib4 (- n 3))\n                 (fib4\
    \ (- n 4)))))])\n</cell>\n<code language=ocaml-jupyter>\n#show fib4\n</cell>\n\
    <text>\nQuestion 4\nWrite a function to compute the factorial of a number.\n\n\
    \n</text>\n<code language=ocaml-jupyter>", "  (define (iter i x)\n    (cond\n\
    \      [(= i n) x]\n      [else (iter (+ i 1) (+ (fib4 i) (fib4 i)))]))\n  (iter\
    \ 0 0))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n \
    \       [(= n 3) 0]\n        [(= n 4) 0]\n        [else (+ (fib4 (- n 4)) (fib4\
    \ (- n 3)) (fib4 (- n 2)) (fib4 (- n 1))))]))\n", "  (define (fib n a b)\n   \
    \ (if (< n 0)\n      a\n      (fib (- n 1) (+ a b) (+ a b))))\n  (fib n () 0))\n",
  "  (fib4-helper n 0 1 2 3 4))\n", "  (if (= n 0) 0\n      (if (= n 1) 0\n      \
    \    (+ (fib4 (- n 1))\n             (fib4 (- n 2))\n             (fib4 (- n 3))\n\
    \             (fib4 (- n 4)))))))\n\n#lang racket\n", "  ;; (define (fib4 n) ...)\
    \ defines fib4 as a function taking n as a parameter\n  (define (helper n acc\
    \ 0)\n    ;; (define (helper n acc 0) ...) defines a helper function for computing\
    \ the nth fib4 number\n    ;; ((if (> n 3) ...) defines a condition that says\
    \ what to do if the n is greater than 3\n    ((if (> n 3)\n        ;; ((if (>\
    \ n 3) ...) defines a condition that says what to do if the n is greater than\
    \ 3\n        ;; fib4(3) -> 0\n        0\n        ;; fib4(2) -> 2\n        (+ acc\
    \ (* 2 (fib4 (- n 1))))\n        ;; fib4(1) -> 0\n        (fib4 (- n 1))\n   \
    \     ;; fib4(0) -> 0\n        acc))\n    ;; ((if (> n 3) ...) defines a condition\
    \ that says what to do if the n is greater than 3\n    ((if (> n 3)\n        ;;\
    \ ((if (> n 3) ...) defines a condition that says what to do if the n is greater\
    \ than 3\n        ;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    \        (helper (- n 1) acc (+ acc (* 2 (fib4 (- n 1)))))\n        ;; fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n        (helper (- n 1) acc\
    \ (+ acc (* 2 (fib4 (- n 1)))))))\n  ;; ((define (fib4 n) ...) defines fib4 as\
    \ a function taking n as a parameter\n  ;; ((define (fib4 n) ...) defines fib4\
    \ as a function taking n as a parameter\n  (helper n 0 1))\n  ;; ((define (fib4\
    \ n) ...) defines fib4 as a function taking n as a parameter\n  (helper n 0 1))\n\
    \  ;; ((define (fib4 n) ...) defines fib4 as a function taking n as a parameter\n\
    \  (helper n 0 1))\n  ;; ((define (fib4 n) ...) defines fib4 as a function taking\
    \ n as a parameter\n  (helper n 0 1))\n  ;; ((define (fib4 n) ...) defines fib4\
    \ as a function taking n as a parameter\n  (helper n 0 1))\n  ;; ((define (fib4\
    \ n) ...) defines fib4 as a function taking n as a parameter\n  (helper n 0 1))",
  "  (let ([fib4 (\u03BB (x)\n                (\u03BB (x)\n                  (\u03BB\
    \ (x)\n                    (\u03BB (x)\n                      (\u03BB (x)\n  \
    \                      (\u03BB (x)\n                        (\u03BB (x)\n    \
    \                     (\u03BB (x)\n                          (\u03BB (x)\n   \
    \                        (\u03BB (x)\n                             (\u03BB (x)\n\
    \                             (\u03BB (x)\n                             (\u03BB\
    \ (x)\n                              (\u03BB (x)\n                           \
    \   (\u03BB (x)\n                              (\u03BB (x)\n                 \
    \             (\u03BB (x)\n                              (\u03BB (x)\n       \
    \                       (\u03BB (x)\n                                (\u03BB (x)\n\
    \                                (\u03BB (x)\n                               \
    \ (\u03BB (x)\n                                (\u03BB (x)\n                 \
    \               (\u03BB (x)\n                                (\u03BB (x)\n   \
    \                             (\u03BB (x)\n                                (\u03BB\
    \ (x)\n                                (\u03BB (x)\n                         \
    \       (\u03BB (x)\n                                (\u03BB (x)\n           \
    \                     (\u03BB (x)\n                                (\u03BB (x)\n\
    \                                (\u03BB (x)\n                               \
    \ (\u03BB (x)\n                                (\u03BB (x)\n                 \
    \               (\u03BB (x)\n                                (\u03BB (x)\n   \
    \                             (\u03BB (x)\n                                (\u03BB\
    \ (x)\n                                (\u03BB (x)\n                         \
    \       (\u03BB (x)\n                                (\u03BB (x)\n           \
    \                     (\u03BB (x)\n                                (\u03BB (x)\n\
    \                                (\u03BB (x)\n                               \
    \ (\u03BB (x)\n                                (\u03BB (x)\n                 \
    \               (\u03BB (x)\n                                (\u03BB (x)\n   \
    \                             (\u03BB (x)\n                                (\u03BB\
    \ (x)\n                                (\u03BB (x)\n                         \
    \       (\u03BB (x)\n                                (\u03BB (x)\n           \
    \                     (\u03BB (x)\n                                (\u03BB (x)\n\
    \                                (\u03BB (x)\n                               \
    \ (\u03BB (x)\n                                (\u03BB (x)\n                 \
    \               (\u03BB (x)\n                                (\u03BB (x)\n   \
    \                             (\u03BB (x)\n                                (\u03BB\
    \ (x)\n                                (\u03BB (x)\n                         \
    \       (\u03BB (x)\n                                (\u03BB (x)\n           \
    \                     (\u03BB (x)\n                                (\u03BB (x)\n\
    \                                (\u03BB (x)\n                               \
    \ (\u03BB (x)\n                                (\u03BB (x)\n                 \
    \               (\u03BB (x)\n                                (\u03BB (x)\n   \
    \                             ", "  ;; Base Case\n  (if (= n 0)\n      0\n   \
    \   ;; Recursive Case\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n    \
    \     (fib4 (- n 3))\n         (fib4 (- n 4)))))", "  (cond [(= n 0) 0]\n    \
    \    [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [else (+ (fib4\
    \ (- n 1))\n                 (fib4 (- n 2))\n                 (fib4 (- n 3))\n\
    \                 (fib4 (- n 4)))]))\n", "  (if (= n 0)\n      0\n      (+ (fib4\
    \ (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (cond [(= n\
    \ 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n     \
    \   [else (+ (fib4 (- n 1))\n                 (fib4 (- n 2))\n               \
    \  (fib4 (- n 3))\n                 (fib4 (- n 4))))]))\n", "  (if (= n 0)\n \
    \     0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 2)\n        ((= n 3)\
    \ (+ (fib4 (- n 1))\n                     (fib4 (- n 2))\n                   \
    \  (fib4 (- n 3))\n                     (fib4 (- n 4)))))", "  (cond\n    ((=\
    \ n 0)\n     0)\n    ((= n 1)\n     0)\n    ((= n 2)\n     2)\n    ((= n 3)\n\
    \     0)\n    ((= n 4)\n     (+ fib4 (- n 1)))\n    (else\n     (+ fib4 (- n 2))\n\
    \     (+ fib4 (- n 3))\n     (+ fib4 (- n 4))\n     )))\n", "  (if (= n 0) 0\n\
    \      (+ (fib4 (- n 1)) \n         (fib4 (- n 2)) \n         (fib4 (- n 3))\n\
    \         (fib4 (- n 4)))))\n</cell>\n<cell>\n#lang racket\n", "  (cond ((= n\
    \ 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 2)\n        ((= n 3) 0)\n     \
    \   (else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))))))\n",
  "  (define (helper n result)\n    (cond ((= n 0) result)\n          ((= n 1) result)\n\
    \          ((= n 2) 2)\n          ((= n 3) (helper n (helper n-1 (helper n-2 (helper\
    \ n-3 0)))))\n          (else (helper n (helper n-1 (helper n-2 (helper n-3 0))))))))\n\
    \  (helper n 0))\n", "  (if (< n 4)\n      n\n      (+ (fib4 (- n 1))\n      \
    \   (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", " \
    \ ;; base case\n  (if (= n 0)\n      0\n      ;; recursive case\n      (+ (fib4\
    \ (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (-\
    \ n 4)))))\n</code>\n<|/ a |>\n<| a |>\nThis is a very basic implementation of\
    \ Fibonacci series in Scheme.  It's a straightforward recursive function that\
    \ has O(2^n) complexity.  The first few terms are the two extreme numbers; the\
    \ others are the recursive terms.  Because the base case is at the end, it's easy\
    \ to calculate the sum of the last n terms of the series, and then calculate the\
    \ nth term.  The only tricky part is dealing with large numbers: in Scheme, numbers\
    \ are represented by a pair: first the integer, and then the remainder of the\
    \ integer if greater than or equal to 10^9.  So for n = 9 (the first element of\
    \ the series, where you want the nth term and also the first element of the sequence\
    \ for that term), the number is represented as the pair (9, '(9 . 9)) and the\
    \ remainder of the integer is 9 (the second element of the pair).\n<code>", " \
    \ (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n\
    \    [else (+ (fib4 (sub1 n)) (fib4 (sub2 n)) (fib4 (sub3 n)) (fib4 (sub4 n))))]\n\
    \  )\n)\n", "  (let loop ((n n))\n    (cond ((= n 0) 0)\n          ((= n 1) 0)\n\
    \          ((= n 2) 2)\n          ((= n 3) 0)\n          ((= n 4) \n         \
    \  (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))))\n        \
    \  (else\n           (loop (- n 1)))))))\n</cell>\n<text>\nExercise\nNow use the\
    \ loop function you wrote to compute the n-th element of the fib4 number sequence.\
    \  Try it out with different values of n.\n\n\n</text>\n<code language=racket-cdf-en>",
  "  (let loop ((i 0) (f (lambda (x) (* x x)))\n             (result 0))\n    (if\
    \ (= i n)\n        result\n        (loop (+ i 1) (f result) (+ result (* i (f\
    \ result)))))\n    result))", "  (cond\n    ((< n 1) 0)\n    ((= n 1) 0)\n   \
    \ ((= n 2) 2)\n    (else (fib4 (- n 4) (+ (* n 3) (* n 2)) (+ (* n 2) (* n 1))))))",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [else (+\
    \ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))) ]\n        )\n\
    \  )\n", "  (if (= n 0) 0\n      (if (= n 1) 1\n          (+ (fib4 (- n 1)) \n\
    \             (fib4 (- n 2)) \n             (fib4 (- n 3))\n             (fib4\
    \ (- n 4))))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2)\
    \ 2]\n        [(= n 3) 0]\n        [(= n 4) 0]\n        [else (+ (fib4 (- n 2))\
    \ (fib4 (- n 1)) (fib4 (- n 3)) (fib4 (- n 4))))]))\n", "  (define (helper n a\
    \ b c d)\n    (if (= n 0)\n        a\n        (helper (- n 1)\n           (+ a\
    \ b)\n           (+ b c)\n           (+ c d))\n      )\n    )\n  (helper n 0 0\
    \ 1 1))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (-\
    \ n 4))) ]\n  ))\n", "  (if (= n 4)\n      0\n      (+ (fib4 (- n 1))\n      \
    \   (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", " \
    \ (define (fib-iter n a b c)\n    (if (< n 4)\n        a\n        (fib-iter (-\
    \ n 1) (+ a b) b (+ c d))))\n  (fib-iter n 0 1 1))\n", "  (cond\n    [(= n 0)\
    \ 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) (+ (fib4 (- n 1)) \n    \
    \            (fib4 (- n 2)) \n                (fib4 (- n 3)) \n              \
    \  (fib4 (- n 4)))]\n    [else (+ (fib4 (- n 1)) \n             (fib4 (- n 2))\
    \ \n             (fib4 (- n 3)) \n             (fib4 (- n 4)))))", "  (fib 1 n))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3)\
    \ (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)))]\n        [else (+ (fib4 (-\
    \ n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))", "  (define (loop i x)\n\
    \    (if (< i n)\n        x\n        (loop (+ i 1) (+ (* i x) (i))))))\n", " \
    \ (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n\
    \    [else (+ (fib4 (sub1 n))\n              (fib4 (sub2 n))\n              (fib4\
    \ (sub3 n))\n              (fib4 (sub4 n)))]))\n", "  (let ((a 0)\n        (b\
    \ 1))\n    (cond ((= n 0)\n           a)\n          ((= n 1)\n           a)\n\
    \          ((= n 2)\n           b)\n          ((= n 3)\n           (fib4 (- n\
    \ 4)))\n          ((= n 4)\n           ((+ a b) (* (fib4 (- n 4)) (fib4 (- n 3)))))\n\
    \          (else\n           ((+ a b) (* (fib4 (- n 4)) (fib4 (- n 3))\n     \
    \                    (+ a b) (* b fib4 (- n 3)))))))\n", "  (if (<= n 4)\n   \
    \   (if (= n 0)\n          0\n          (+ (fib4 (- n 2)) (fib4 (- n 1))))\n \
    \     (if (= n 1)\n          0\n          (+ (fib4 (- n 3)) (fib4 (- n 2))))\n\
    \      (if (= n 2)\n          0\n          (+ (fib4 (- n 4)) (fib4 (- n 3)))))\n",
  "  (let ((x (- n 2))) ; x = 0\n    (cond ((< x n) 0) ; x < n\n          ((= x 0)\
    \ 0) ; x = n\n          ((< x 3) (+ x x x x)) ; x = 4\n          ((< x 5) (+ x\
    \ x x x x x)) ; x = 6\n          (else (+ x (fib4 (- x 1))\n                 \
    \       (fib4 (- x 2))\n                        (fib4 (- x 3))\n             \
    \           (fib4 (- x 4))))))) ; x = 7\n</cell>\n<code language=dyalog-kernel>",
  "  (if (= n 4)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4\
    \ (- n 4)))))\n", "  (if (= n 0)\n      0\n      (if (= n 1)\n          0\n  \
    \        (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))))))\n",
  "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n    \
    \     (fib4 (- n 3))\n         (fib4 (- n 4)))))", "  (define (fib4a n a b)\n\
    \    (if (= n 0)\n        a\n        (fib4a (- n 1) (+ a b) (+ b a))))\n  (fib4a\
    \ n 0 0))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2))\
    \ (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4\
    \ (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (-\
    \ n 4)))))\n", "  (cond [(= n 0)0 (+ fib4 (- n 1)))\n        [(= n 1)0 (+ fib4\
    \ (- n 2)))\n        [(= n 2)0 (+ fib4 (- n 3)))\n        [(= n 3)0 (+ fib4 (-\
    \ n 4)))\n        [else0 (+ fib4 (- n 4) (+ fib4 (- n 3) (+ fib4 (- n 2) (+ fib4\
    \ (- n 1) 0))))]])\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 2]\n        [(= n 3) 0]\n        [(= n 4) 0]\n        [else (+ (fib4 (-\
    \ n 1))\n                 (fib4 (- n 2))\n                 (fib4 (- n 3))\n  \
    \               (fib4 (- n 4)))))])\n", "  (if (= n 0)\n      0\n      (if (=\
    \ n 1)\n          1\n          (+ (fib4 (sub1 n))\n             (fib4 (sub2 n))))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3)\
    \ 0]\n        [else (+ (fib4 (sub1 n)) (fib4 (sub1 n)) (fib4 (sub1 n)) (fib4 (sub1\
    \ n)))))])\n", "  (define (fib4a a b c d)\n    (cond\n      [(zero? n) d]\n  \
    \    [(> n 2) (fib4a b c d)]\n      [else (fib4a (+ (fib4b b a) c) (fib4b c b)\
    \ (fib4c d c))]\n      )\n    )\n  (define (fib4b a b)\n    (cond\n      [(zero?\
    \ n) b]\n      [else (fib4b a (+ (fib4a a b 0) (fib4a b 0 a)))]\n    )\n  (define\
    \ (fib4c a b)\n    (cond\n      [(zero? n) a]\n      [else (fib4c a (+ (fib4a\
    \ a b 0) (fib4a b 0 a)))]\n    )\n  (fib4a 0 1 1 1))\n</code>\n<|/ q dscore=0\
    \ |>\n<| c |>\nThis is my first time posting here. I would love any tips on how\
    \ I could improve my question. Thanks!\n<|/ c |>\n<| c |>\nHow many times can\
    \ you call `fib4`?\n<|/ c |>\n<| c |>\nThis question appears to be off-topic because\
    \ it is about how to program and debugging is more appropriate.\n<|/ c |>\n<|\
    \ c |>\nWhat is the expected output? What is the actual output? Why?\n<|/ c |>\n\
    <| c |>\nThere are a number of very good tips on how to improve your question\
    \ [here](http://stackoverflow.com/help/how-to-ask). It's also a good idea to read\
    \ through the [help] section of this site, especially [ask]. Good luck.\n<|/ c\
    \ |>\n<| a |>\n<code>", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4\
    \ (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (cond [(zero? n) 0]\n     \
    \   [(equal? n 1) 0]\n        [(equal? n 2) 2]\n        [else (+ (fib4 (sub1 n))\n\
    \                  (fib4 (sub2 n))\n                  (fib4 (sub3 n))\n      \
    \            (fib4 (sub4 n))))])", "  (cond\n    [(= n 0)\n      0]\n    [(= n\
    \ 1)\n      0]\n    [(= n 2)\n      2]\n    [(= n 3)\n      0]\n    [else\n  \
    \    (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n   \
    \      (fib4 (- n 4))\n         )])) ;; (* 3 4))\n", "  (cond [(= n 1) 0]\n  \
    \      [(= n 2) 2]\n        [(= n 3) 0]\n        [else (+ (fib4 (- n 1)) (fib4\
    \ (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))))))\n", "  (if (< n 4)\n      0\n   \
    \   (+ (fib4 (- n 2)) (fib4 (- n 1)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n       \
    \  (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (= n 0)\n      0\n  \
    \    (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n   \
    \      (fib4 (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (sub1 n))\
    \ (fib4 (sub2 n)) (fib4 (sub3 n)) (fib4 (sub4 n))))\n", "  (if (= n 0)\n     \
    \ 0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n\
    \         (fib4 (- n 4)))))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=fibonacci,racket,scheme\
    \ |>\nHere's a more concise solution in Racket:\n<code>", "  (if (< n 4)\n   \
    \   (fib4 (- n 1))\n      (+ (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n",
  "  (if (= n 0)\n      0\n      (+ \n         (fib4 (- n 1))\n         (fib4 (- n\
    \ 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (cond [(= n\
    \ 0)\n         0]\n        [(= n 1)\n         1]\n        [(= n 2)\n         2]\n\
    \        [(= n 3)\n         3]\n        [else\n         (+ (fib4 (- n 1)) (fib4\
    \ (- n 2)) (fib4 (- n 3)) (fib4 (- n 4))) ]))\n", "  (cond [(= n 0) 0]\n     \
    \   [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [(= n 4) (fib4\
    \ (- n 1))\n       (+ (fib4 (- n 2))\n          (fib4 (- n 3))\n          (fib4\
    \ (- n 4))\n          (fib4 (- n 5)))]))\n", "  (if (< n 4)\n      0\n      (+\
    \ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4\
    \ (- n 4)))))\n", "  (if (< n 3)\n      n\n      (+ (fib4 (- n 1) (- n 2)) (fib4\
    \ (- n 2) (- n 3)))))\n</code>\nThe first few functions were not included (e.g.,\
    \ fib4, fib5) in my code because they were not required for my answer.  But now\
    \ they are included.\nTesting\nTest your function with various argument values.\
    \  For instance:\n<code>", "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((=\
    \ n 2) 2)\n    ((= n 3) 0)\n    (else (+ (fib4 (- n 2)) (fib4 (- n 1)) (fib4 (-\
    \ n 3)) (fib4 (- n 4))))))\n", "  (if (zero? n)\n      0\n      (+ (fib4 (- n\
    \ 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n 4)))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3)\
    \ 0]\n        [else (+ (fib4 (- n 4)) (fib4 (- n 3))\n                   (fib4\
    \ (- n 2)) (fib4 (- n 1))))]))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (-\
    \ n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (* (fib4 (- n 4))\
    \ (fib4 (- n 3))))\n", "  (+ (fib4 (sub1 n)) (fib4 (sub2 n)) (fib4 (sub3 n)) (fib4\
    \ (sub4 n))))\n", "  (if (= n 0) 0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4\
    \ (- n 3)) (fib4 (- n 4)))))", "  (if (= n 0) 0\n      (+ (fib4 (- n 1)) (fib4\
    \ (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (fib 4 0 n))\n", "  (if (=\
    \ n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4\
    \ (- n 3))\n         (fib4 (- n 4)))))\n</code>\n<|/ a |>\n<| c |>\nI wish I could\
    \ upvote this multiple times. I really appreciate the details on how it works.\n\
    <|/ c |>\n<| c |>\nThank you! The `define` was the most difficult part for me\
    \ to understand. Glad to help :) I also added a few comments to the code.\n<|/\
    \ c |>\n<| c |>\nJust to clarify for anyone else reading this, as I spent the\
    \ last hour trying to wrap my head around it I realized that the `(define (fib4\
    \ n) (if (= n 0) (+ (fib4 (- n 1)) ...` is just the opposite of `(define (fib4\
    \ n) ...` where `...` is the body of the function `fib4` itself.\n<|/ c |>\n<|\
    \ a |>\nThe above answer by was great for me to understand what was going on.\
    \ Thank you for that.\nI just wanted to add that you can also use the inbuilt\
    \ function 'factorial' in this case. I was able to find it via my own research.\
    \ \n<code>", "  (if (< n 0)\n      (error \"fib4: bad argument: ~d\" n)\n    \
    \  0))\n", '  (fib 0 n 0 0))', "  (reverse\n   (for/fold ([x 0] ([y 0]) (i 0))\n\
    \            ([x 0] ([y 0]) (i 1))\n            ([x y] \n             (let ([next\
    \ (+ (fib4 i) y)])\n               (set! i (+ i 1))\n               (set! x (+\
    \ x next)))\n             [x y])\n   x))\n", "  ;; (fib4 0) = 0\n  ;; (fib4 1)\
    \ = 0\n  ;; (fib4 2) = 2\n  ;; (fib4 3) = 0\n  ;; (fib4 4) = 0\n  ;; (fib4 5)\
    \ = 4\n  ;; (fib4 6) = 8\n  ;; (fib4 7) = 14\n  ;; (fib4 n) = (fib4 (n - 1)) +\
    \ (fib4 (n - 2)) + (fib4 (n - 3)) + (fib4 (n - 4)).\n  (if (= n 0) 0\n      (+\
    \ (fib4 (- n 1)) ;; fib(n - 1)\n         (fib4 (- n 2)) ;; fib(n - 2)\n      \
    \   (fib4 (- n 3)) ;; fib(n - 3)\n         (fib4 (- n 4)) ;; fib(n - 4)\n    \
    \     )))\n", "  (define (helper n fib i acc k)\n    (if (= i n)\n        (acc)\n\
    \        (helper (- n i) fib (+ i 1) (+ k fib) k)))\n  (helper (- n 1) (list 0\
    \ 1 1 1) 0 0))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2)\
    \ 2]\n        [(= n 3) 0]\n        [else (+ (fib4 (sub1 n)) (fib4 (sub2 n)) (fib4\
    \ (sub3 n)) (fib4 (sub4 n))))]))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (-\
    \ n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (- n\
    \ 4)))))\n", "  (define (helper a b c d)\n    (if (= n 0)\n        a\n       \
    \ (helper (+ a b) (+ b c) (+ c d) d)))\n  (helper 0 1 0 1))\n", "  (if (<= n 4)\n\
    \      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n\
    <|/ c |>\n<| c |>\nSorry I posted the wrong link last time.  Here is a link to\
    \ the correct answer:\nhttp://stackoverflow.com/questions/3400491/fibonacci-sequence-with-racket\n\
    <|/ c |>\n<| c |>\nAh... but what about this one in Ruby? http://stackoverflow.com/questions/16845580/fibonacci-numbers-in-ruby\
    \ It's not Racket but I think it does a pretty good job at solving this problem.\
    \ http://en.wikipedia.org/wiki/Ruby_(programming_language)\n<|/ c |>\n<| a tags=fibonacci,racket,scheme\
    \ dscore=5 |>\nAnother Racket solution:\n<code>", "  (if (= n 0)\n      0\n  \
    \    (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", " \
    \ (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n\
    \    [else     (+ (fib4 (sub1 n)) (fib4 (sub2 n)) (fib4 (sub3 n)) (fib4 (sub4\
    \ n)))]))\n", "  (if (<= n 1)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2))\
    \ (fib4 (- n 3)) (fib4 (- n 4)))))\n<|/ a tags=racket,scheme |>\n<| c |>\nThe\
    \ question was tagged with Racket and R7RS and your answer uses R7RS and R6RS\
    \ features, which are not available to the question asker.\n<|/ c |>\n<| c |>\n\
    The question was tagged with Racket and R7RS and your answer uses R7RS and R6RS\
    \ features, which are not available to the question asker.\n<|/ c |>\n<| c |>\n\
    `fib4` does not produce the correct results for negative numbers. Try for example\
    \ `fib4(-1)`.\n<|/ c |>\n<| c |>\nthanks for pointing out. I just corrected my\
    \ code!\n<|/ c |>\n<| a dscore=5 |>\nHere's a lazy solution that doesn't require\
    \ using an accumulator or mutating a global variable:\n<code>", "  (cond [(< n\
    \ 0) 0]\n        [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 3]\n     \
    \   [else (+ (fib4 (- n 2)) (fib4 (- n 1))) (+ (fib4 (- n 3)) (fib4 (- n 2)))]\n\
    \      )\n)\n", "  ;; Use a helper function \"helper\" that receives four numbers\
    \ and returns the last one in the series.\n  (define (helper a b c d)\n    (+\
    \ a b c d))\n  ;; Use recursion.\n  (if (= n 0)\n      0\n      (helper (helper\
    \ (helper (helper 0 1 1 2) 1 2 3 4) 2 3 4 5) 6 7 8 9)))\n", "  (cond ((< n 3)\
    \ 0)\n        ((< n 5) 0)\n        ((< n 7) 0)\n        ((< n 9) 2)\n        (else\
    \ (+ (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)) (fib4 (- n 5))))))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fib4 (sub1 n)) (fib4 (sub2 n)) (fib4 (sub3 n)) (fib4\
    \ (sub4 n)))))\n", "  (if (zero? n)\n      0\n      (+ (fib4 (- n 1)) (fib4 (-\
    \ n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (cond ((= n 0) 0)\n        ((=\
    \ n 1) 0)\n        (else (+ (fib4 (- n 1)) \n                (fib4 (- n 2)) \n\
    \                (fib4 (- n 3)) \n                (fib4 (- n 4))))\n))\n", " \
    \ (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 2)\n        ((= n 3)\
    \ 0)\n        (else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n\
    \ 4))))))\n\n#lang racket\n", "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n   \
    \ ((= n 2) 2)\n    ((= n 3) 0)\n    ((= n 4) 5)\n    (else (+ (fib4 (- n 1))\n\
    \             (fib4 (- n 2))\n             (fib4 (- n 3))\n             (fib4\
    \ (- n 4))))))\n", "  (+ (fib4 (- n 1)) (* (fib4 (- n 2)) (* (fib4 (- n 3)) (*\
    \ (fib4 (- n 4)) 1))))\n)", "  ;; YOUR CODE HERE\n  ;;\n  ;; Return fib4(n - 4)\
    \ using recursion.\n  ;;\n)\n", "  (cond\n    ((= n 0)\n     0)\n    ((= n 1)\n\
    \     0)\n    ((= n 2)\n     2)\n    (else (+ (fib4 (sub1 n)) (fib4 (sub2 n))\
    \ (fib4 (sub3 n)) (fib4 (sub4 n))))))\n", "  (if (<= n 0)\n      0\n      (+ (fib4\
    \ (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (-\
    \ n 4)))))\n</cell>\n<text>\nProblem 8\nWrite a function that takes in a list\
    \ of integers and returns the maximum value of the list.\n\n\n</text>\n<code language=dyalog-kernel>",
  "  (define (iter i acc result)\n    (cond\n      [(= i n) (result acc)]\n      [(zero?\
    \ i) (iter (sub1 i) 0 (add1 acc))]\n      [(odd? i) (iter (add1 i) 0 (add1 acc))]\n\
    \      [(even? i) (iter (sub1 i) 0 (add1 acc))]\n      [else (iter (add1 i) 0\
    \ (add1 acc))]))\n  (iter 0 1 0))\n", "  (if (= n 1)\n      0\n      (+ (fib4\
    \ (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (if (= n 0)\n\
    \      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n         (fib4 (-\
    \ n 3))\n         (fib4 (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4\
    \ (- n 1))\n         (fib4 (- n 2))\n         (fib4 (- n 3))\n         (fib4 (-\
    \ n 4)))))", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4\
    \ (- n 3)) (fib4 (- n 4)))))", "  (define (fib a b c)\n    (cond\n      [(= n\
    \ 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [else (fib b (+ a c) (+ b\
    \ c))]))\n  (fib 0 1 2))\n</cell>\n<text>\nExercise: Find all prime numbers up\
    \ to 100,000.\n\n\n</text>\n<code language=racket-language>", "  (+ (fib4 n (-\
    \ n 1)) (fib4 n (- n 2))\n     (fib4 n (- n 3)) (fib4 n (- n 4))))", "  (if (=\
    \ n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (-\
    \ n 4)))))\n", "  ;; YOUR CODE HERE\n  ;; Use this as a hint to complete the exercise.\n\
    \n  (if (= n 0) \n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n\
    \         (fib4 (- n 3))\n         (fib4 (- n 4))))\n", "  (if (= n 0)\n     \
    \ 0\n      (+ (fib4 (- n 1)) (* (fib4 (- n 2)) 4) (fib4 (- n 3)))))\n", "  (cond\
    \ [(= n 0)\n         0]\n        [(= n 1)\n         0]\n        [(= n 2)\n   \
    \      2]\n        [(= n 3)\n         0]\n        [(= n 4)\n         (+ (fib4\
    \ (- n 4)) (fib4 (- n 3))\n             (fib4 (- n 2)) (fib4 (- n 1))))]\n   \
    \     (else (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))", " \
    \ (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n   \
    \      (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (cond [(= n 0)\n    \
    \     0]\n        [(= n 1)\n         0]\n        [(= n 2)\n         2]\n     \
    \   [else\n         (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n\
    \ 4))) ]))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 2)\n\
    \        ((= n 3) 0)\n        (else (+ (fib4 (- n 1))\n                  (fib4\
    \ (- n 2))\n                  (fib4 (- n 3))\n                  (fib4 (- n 4))))))\n",
  "  (if (= n 4)\n      n\n      (+ (fib4 (- n 1))\n         (fib4 (- n 2))\n    \
    \     (fib4 (- n 3))\n         (fib4 (- n 4)))))\n", "  (if (< n 4)\n      n\n\
    \      (+ (fib4 (- n 2)) (fib4 (- n 3)))))\n", "  ;; Make sure n is a natural\
    \ number.\n  (assert-type n (natural number))\n  (cond ((= n 0) 0)\n        ((=\
    \ n 1) 0)\n        ((= n 2) 2)\n        ((= n 3) 0)\n        ((= n 4) 0)\n   \
    \     (else (+ (fib4 (- n 1))\n                   (fib4 (- n 2))\n           \
    \        (fib4 (- n 3))\n                   (fib4 (- n 4)))))) ; <-- here's the\
    \ problem\n</code>\nAs you can see, that's not so easy. I don't know if there\
    \ is a standard procedure that does it for you, but I'll give it a try for fun.\
    \ After all, I don't want to reinvent the wheel.\n<code>", "  (if (= n 0)\n  \
    \    0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3)\
    \ 0]\n        [else (+ (fib4 (- n 2)) (fib4 (- n 1)) (fib4 (- n 3)) (fib4 (- n\
    \ 4)))]))\n</cell>\n<cell>\n#lang racket\n", "  (cond\n    [(= n 1) 0]\n    [(=\
    \ n 2) 2]\n    [else (+ (fib4 (- n 4)) (fib4 (- n 3))\n              (fib4 (-\
    \ n 2))\n              (fib4 (- n 1))))]))\n", "  (if (= n 0) 0\n      (+ (fib4\
    \ (sub1 n)) (fib4 (sub1 n)) (fib4 (sub1 n)) (fib4 (sub1 n))))\n  )\n", "  ;; YOUR\
    \ CODE HERE\n  (if (zero? n)\n      n\n      (+ (fib4 (- n 1)) (fib4 (- n 2))\
    \ (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (cond [(= n 0)  0]\n        [(= n 1)\
    \ 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [(= n 4) 0]\n        [(=\
    \ n 5) 0]\n        [(= n 6) 0]\n        [(= n 7) 0]\n        [else (+ (fib4 (-\
    \ n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n", "  (cond [(= n 0)\
    \ 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [(=\
    \ n 4) 0]\n        [else (+ (fib4 (- n 2)) (fib4 (- n 1)) (fib4 (- n 3)) (fib4\
    \ (- n 4))))]))\n</cell>\n<text>\nExercise: Write a procedure that computes the\
    \ sum of the elements of the Fibbonacci number sequence up to and including n.\
    \  The procedure is given by:\n", "  (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (-\
    \ n 3)) (fib4 (- n 4))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1))\
    \ (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (cond\n    ((= n 0) 0)\n\
    \    ((= n 1) 0)\n    ((= n 2) 2)\n    ((= n 3) 0)\n    ((= n 4) 0)\n    (else\
    \ (+ (fib4 (- n 4)) (fib4 (- n 3)) (fib4 (- n 2)) (fib4 (- n 1))))))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4\
    \ (- n 4)))))\n", "  (if (= n 0)\n      0\n      (+ (fib4 (- n 1)) (fib4 (- n\
    \ 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (let loop ((acc 0) (n n) (i 1))\n\
    \    (if (= i n)\n        acc\n        (loop (+ acc (* i i)) (- n i) (inc i))))))\n",
  "  (cond [(= n 0)\n         0]\n        [(= n 1)\n         0]\n        [(= n 2)\n\
    \         2]\n        [else\n         (+ (fib4 (- n 1))\n            (fib4 (-\
    \ n 2))\n            (fib4 (- n 3))\n            (fib4 (- n 4)))))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 0]\n    [else\
    \ (+ (fib4 (- n 1))\n              (fib4 (- n 2))\n              (fib4 (- n 3))\n\
    \              (fib4 (- n 4)))]))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n\
    \        ((= n 2) 2)\n        ((= n 3) 0)\n        (else (+ (fib4 (- n 2)) (fib4\
    \ (- n 1)) (fib4 (- n 3)) (fib4 (- n 4))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
