name: HumanEval_81_numerical_letter_grade
language: rkt
prompt: "#lang racket\n\n;; It is the last week of the semester and the teacher has\
  \ to give the grades\n;; to students. The teacher has been making her own algorithm\
  \ for grading.\n;; The only problem is, she has lost the code she used for grading.\n\
  ;; She has given you a list of GPAs for some students and you have to write \n;;\
  \ a function that can output a list of letter grades using the following table:\n\
  ;; GPA       |    Letter grade\n;; 4.0                A+\n;; > 3.7             \
  \   A \n;; > 3.3                A- \n;; > 3.0                B+\n;; > 2.7      \
  \          B \n;; > 2.3                B-\n;; > 2.0                C+\n;; > 1.7\
  \                C\n;; > 1.3                C-\n;; > 1.0                D+ \n;;\
  \ > 0.7                D \n;; > 0.0                D-\n;; 0.0                E\n\
  ;; Example:\n;; grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C',\
  \ 'A-']\n(define (numerical_letter_grade grades)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numerical_letter_grade))\n\
  \    (check-equal? (candidate (list 4.0 3 1.7 2 3.5)) (list \"A+\" \"B\" \"C-\"\
  \ \"C\" \"A-\"))\n    (check-equal? (candidate (list 1.2)) (list \"D+\"))\n    (check-equal?\
  \ (candidate (list 0.5)) (list \"D-\"))\n    (check-equal? (candidate (list 0.0))\
  \ (list \"E\"))\n    (check-equal? (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list\
  \ \"D\" \"D-\" \"C-\" \"B\" \"B+\"))\n    (check-equal? (candidate (list 0.0 0.7))\
  \ (list \"E\" \"D-\"))\n))\n\n(test-humaneval)"
completions: ["  (define (helper num grades)\n    (if (empty? grades)\n      'E\n\
    \      (if (> num 0)\n        (helper num (cdr grades))\n        (cons (- num\
    \ (floor (* num 4.0))) \n               (helper (+ num (floor (* num 4.0))) (cdr\
    \ grades))))))\n  (helper grades null))\n", "  (let ([mingrade (min grades [<\
    \ 0 -(- (length grades) 1) 3])\n        maxgrade (max grades [< 0 -(- (length\
    \ grades) 1) 3])])\n    (map \n      (lambda ([x y])\n        (cond (<= x mingrade)\
    \ (+ y 'A+) (<= x maxgrade) (+ y 'A) (<= x maxgrade y) (+ y 'A-)\n           \
    \   (<= x mingrade y) (+ y 'B+) (<= x maxgrade y) (+ y 'B) (<= x maxgrade y) (+\
    \ y 'B-)\n              (<= x mingrade y) (+ y 'C+) (<= x maxgrade y) (+ y 'C)\
    \ (<= x maxgrade y) (+ y 'C-)\n              (<= x mingrade y) (+ y 'D+) (<= x\
    \ maxgrade y) (+ y 'D) (<= x maxgrade y) (+ y 'D-)\n              (<= x mingrade\
    \ y) (+ y 'E) (<= x maxgrade y) (+ y 'F)))\n      grades))\n  )\n", "  (cond [(<\
    \ grades (/ 0.05 4))\n         (list 'A+)\n         (< grades (/ 0.05 3.7))\n\
    \         (list 'A)\n         (< grades (/ 0.05 3.3))\n         (list 'A-)\n \
    \        (< grades (/ 0.05 3))\n         (list 'B+)\n         (< grades (/ 0.05\
    \ 2.7))\n         (list 'B)\n         (< grades (/ 0.05 2.3))\n         (list\
    \ 'B-)\n         (< grades (/ 0.05 2))\n         (list 'C+)\n         (< grades\
    \ (/ 0.05 1.7))\n         (list 'C)\n         (< grades (/ 0.05 1.3))\n      \
    \   (list 'C-)\n         (< grades (/ 0.05 1))\n         (list 'D+)\n        \
    \ (< grades (/ 0.05 0.7))\n         (list 'D)\n         (< grades (/ 0.05 0))\n\
    \         (list 'D-)\n         (< grades (/ 0.05 0))\n         (list 'E)\n   \
    \      ])\n", "  (cond \n    [(= grades 0.0) 'D-]\n    [(= grades 1.0) 'D+]\n\
    \    [(= grades 2.0) 'C+]\n    [(= grades 2.3) 'C]\n    [(= grades 2.7) 'B]\n\
    \    [(= grades 3.0) 'B-]\n    [(= grades 3.3) 'B]\n    [(= grades 3.7) 'A]\n\
    \    [(= grades 4.0) 'A+]\n    [else (list->string (find-min/max (lambda (letter)\
    \ (/ grades 3.0))\n                                   'A'\n                  \
    \                 'A-'\n                                   'B+'\n            \
    \                       'B'\n                                   'B-'\n       \
    \                            'C+'\n                                   'C'\n  \
    \                                 'C-'\n                                   'D+'\n\
    \                                   'D'\n                                   'D-'))]))\n",
  "  (let ((min (apply min grades)))\n    (if (< (apply max grades) min)\n       \
    \ 'E\n        (list (map (lambda (x)\n                    (cond (<= x 0)\n   \
    \                       'E\n                          (< x min)\n            \
    \              (cond (= x min) (- x min) \n                              (< x\
    \ max (- min x))\n                              (else (+ min x)))\n          \
    \                (else x))\n                    grades)))))\n", "  (map (\u03BB\
    \ (x) \n         (cond ((> x 0) \n                (char (floor (* x 2.7) + 64)))\n\
    \              ((< x 0) \n                (char (floor (* x 2.7)))) \n       \
    \       (else \n                (char (floor (* x 1.7) + 96)))))\n      (cond\
    \ ((> grades 0) \n            (char (floor (* grades 2.7) + 64))) \n         \
    \   ((< grades 0) \n            (char (floor (* grades 2.7)))) \n            (else\
    \ \n            (char (floor (* grades 1.7) + 96)))) ))\n", "  (let* ((max-gpa\
    \ 4.0)\n         (minimum-gpa 3.0)\n         (first-gpa-diff 2.0)\n         (second-gpa-diff\
    \ 2.0)\n         (third-gpa-diff 2.0)\n         (fourth-gpa-diff 2.0)\n      \
    \   (fifth-gpa-diff 2.0)\n         (sixth-gpa-diff 2.0)\n         (seventh-gpa-diff\
    \ 2.0)\n         (eighth-gpa-diff 2.0)\n         (ninth-gpa-diff 2.0)\n      \
    \   (tenth-gpa-diff 2.0)\n         (eleventh-gpa-diff 2.0)\n         (twelfth-gpa-diff\
    \ 2.0)\n         (thirty-grade-diff 1.0)\n         (zero-grade-diff 0.0)\n   \
    \      (grade '()))\n    (if (empty? grades)\n        grade\n        (let* ((current-gpa\
    \ (car grades))\n               (next-gpa (cdr grades)))\n          (if (< current-gpa\
    \ max-gpa)\n              (if (< current-gpa (+ first-gpa-diff current-gpa))\n\
    \                  (cond ((< next-gpa minimum-gpa)\n                         \
    \  (cond ((< next-gpa (+ second-gpa-diff current-gpa))\n                     \
    \             (cond ((< next-gpa (+ third-gpa-diff current-gpa))\n           \
    \                               (cond ((< next-gpa (+ fourth-gpa-diff current-gpa))\n\
    \                                                  (cond ((< next-gpa (+ fifth-gpa-diff\
    \ current-gpa))\n                                                          (cond\
    \ ((< next-gpa (+ sixth-gpa-diff current-gpa))\n                             \
    \                                             (cond ((< next-gpa (+ seventh-gpa-diff\
    \ current-gpa))\n                                                            \
    \                      (cond ((< next-gpa (+ eighth-gpa-diff current-gpa))\n \
    \                                                                            \
    \             (cond ((< next-gpa (+ ninth-gpa-diff current-gpa))\n           \
    \                                                                            \
    \           (cond ((< next-gpa (+ tenth-gpa-diff current-gpa))\n             \
    \                                                                            \
    \                 (cond ((< next-gpa (+ eleventh-gpa-diff current-gpa))\n    \
    \                                                                            \
    \                              (cond ((< next-gpa (+ twelfth-gpa-diff current-gpa))\n\
    \                                                                            \
    \                                          (cond ((< next-gpa (+ thirty-grade-diff\
    \ current-gpa))\n                                                            \
    \    ", "  (let ((highest (sort grades (lambda (x y) (- y x)))))\n    (map (lambda\
    \ (x)\n           (if (< (car x) (car highest))\n               (cond ((= (car\
    \ x) (car highest)) (cons 'D+ highest))\n                     ((>= (car x) (car\
    \ highest)) (cons 'D+ highest))\n                     ((< (car x) (car highest))\
    \ (cons 'D- highest))\n                     ((>= (car x) (car highest)) (cons\
    \ 'D- highest))\n                     (else (cons 'E '())))\n               (cons\
    \ ((car x) (car highest)))\n               (cons 'E '())))\n          grades)))\n",
  "  (let ((gpa-list (map (fn [grade] \n                        (if (greater-than?\
    \ grade 0) (- grade 3.0)\n                            3.0)), grades))\n      \
    \  (grade-letters (list (reverse (map (fn [gpa] \n                           \
    \             (let ((letter (char->string (gpa >= 3.3) ?A+ (gpa < 3.3) ?A)))\n\
    \                                               (if (char->string (list letter))\n\
    \                                                   (append letter (list '-))\
    \ letter))\n                                     gpa-list)) '(? ?+))))\n    (concat\
    \ (map car (reverse grade-letters)))))\n", "  (let loop ((grades grades)\n   \
    \          (grades-length grades))\n    (cond\n      [(< grades-length 0)\n  \
    \     'E]\n      [(= grades-length 1)\n       (list (symbol->string (first grades)))]\n\
    \      [(> (car grades) (cadr grades))\n       (list (symbol->string (first grades)))]\n\
    \      [else\n       (loop (rest grades) (sub1 grades-length))]))))\n", "  (if\
    \ (null? grades)\n      'E\n      (let ((g (car grades))\n            (g1 (numerical_letter_grade\
    \ (cdr grades))))\n        (if (< g 0)\n            (cond ((< g 0) (cond ((< g\
    \ 0) (cond ((< g 0) 'B (cond ((< g 0) 'A (cond ((< g 0) 'A+ (cons g1 (cons g (cons\
    \ '-) 'E)))))) \n                                    ((< g 0) 'A- (cons g1 'E))))\n\
    \                  ((< g 0) 'B- (cons g 'E))))\n            (cond ((< g 0) 'C-\
    \ (cons g 'E))\n                  ((< g 0) 'D- (cons g 'E))\n                \
    \  ((< g 0) 'D+ (cons g 'E))\n                  (else 'E))))))\n", "  (cond\n\
    \    [(< grades 4.0) 'A+]\n    [(< grades 3.7) 'A]\n    [(< grades 3.3) 'A-]\n\
    \    [(< grades 3.0) 'B+]\n    [(< grades 2.7) 'B]\n    [(< grades 2.3) 'B-]\n\
    \    [(< grades 2.0) 'C+]\n    [(< grades 1.7) 'C]\n    [(< grades 1.3) 'C-]\n\
    \    [(< grades 1.0) 'D+]\n    [(< grades 0.7) 'D]\n    [(< grades 0.0) 'D-]\n\
    \    [else 'E]))\n", "  (cond ((= grades 0) 'E)\n        ((< grades 0) (cons grades\
    \ \n                           (numerical_letter_grade (/ grades 3.0))))\n   \
    \     (else (let ((g (numerical_letter_grade (/ grades 2.0)))\n              \
    \        (f (numerical_letter_grade (/ grades 1.0)))\n                      (e\
    \ (numerical_letter_grade (/ grades 0.0))))\n                (cons (append g f)\
    \ e))))) \n", "  (if (<= grades 0)\n      'E\n      (if (= grades 1) 'A\n    \
    \      (if (< grades 3) 'A- (if (< grades 3.3) 'B- (if (< grades 3.7 'C)) 'C-)\
    \ \n          (if (< grades 3.7 'C) 'C- (if (< grades 3.3 'B) 'B- (if (< grades\
    \ 2.7 'B) 'B-) \n          'B-) \n          (if (< grades 2.7 'B) 'B- (if (< grades\
    \ 2.3 'A) 'B- (if (< grades 1.7 'C) 'C-) \n          'C-) \n          (if (< grades\
    \ 1.7 'C) 'C- (if (< grades 1.3 'A) 'C- (if (< grades 1.0 'B) 'C-) \n        \
    \  'C-) \n          'C-)))) \n", "  (define (next_letter_grade grade i)\n    (if\
    \ (= i 0) 'E\n        (if (< grade 4.0) 'A+'\n            (if (< grade 3.7) 'A'\n\
    \                (if (< grade 3.3) 'A-'\n                    (if (< grade 3.0)\
    \ 'B+'\n                        (if (< grade 2.7) 'B'\n                      \
    \      (if (< grade 2.3) 'B-'\n                                (if (< grade 2.0)\
    \ 'C+'\n                                    (if (< grade 1.7) 'C'\n          \
    \                              (if (< grade 1.3) 'C-'\n                      \
    \                      (if (< grade 1.0) 'D+'\n                              \
    \                  (if (< grade 0.7) 'D'\n                                   \
    \                 (if (< grade 0.0) 'D-'\n                                   \
    \                     'E)))))))))))))\n  (map next_letter_grade grades (make-array\
    \ (+ 0 (array-length grades)) string))\n)\n", "  (cond ((< grades 0.7)   'A)\n\
    \        ((< grades 1.3)   'A-)\n        ((< grades 1.7)   'B)\n        ((< grades\
    \ 2.0)   'B-)\n        ((< grades 2.3)   'C)\n        ((< grades 2.7)   'C)\n\
    \        ((< grades 3.0)   'C)\n        ((< grades 3.3)   'C)\n        ((< grades\
    \ 3.7)   'D)\n        ((< grades 4.0)   'D)\n        ((< grades 4.3)   'D)\n \
    \       ((< grades 4.7)   'D)\n        ((< grades 5.0)   'D)\n        ((< grades\
    \ 5.3)   'D)\n        ((< grades 5.7)   'E)\n        ((< grades 6.0)   'E)\n \
    \       ((< grades 6.3)   'E)\n        ((< grades 6.7)   'E)\n        (else 'F)))\n",
  "  (let ([gpa (first grades)]\n        [gp (second grades)] \n        [a (+ (* gpa\
    \ 4.0) (* gp (- gpa 3.7)))]\n        [b (+ (* gpa 4.0) (* gp (- gpa 3.3)))]\n\
    \        [c (+ (* gpa 4.0) (* gp (- gpa 3.0)))]\n        [d (+ (* gpa 4.0) (*\
    \ gp (- gpa 2.7)))]\n        [e (+ (* gpa 4.0) (* gp (- gpa 2.3)))]\n        [f\
    \ (+ (* gpa 4.0) (* gp (- gpa 2.0)))]\n        [g (+ (* gpa 4.0) (* gp (- gpa\
    \ 1.7)))]\n        [h (+ (* gpa 4.0) (* gp (- gpa 1.3)))]\n        [i (+ (* gpa\
    \ 4.0) (* gp (- gpa 1.0)))]\n        [j (+ (* gpa 4.0) (* gp (- gpa 0.7)))]\n\
    \        [k (+ (* gpa 4.0) (* gp (- gpa 0.0)))]\n        [l (- (* gpa 4.0) (*\
    \ gp (+ gpa 3.5)))])\n    \n    (cond [(< gpa 4.0)\n           'A+']\n       \
    \   [(< gpa 3.7)\n           'A']\n          [(< gpa 3.3)\n           'A- ']\n\
    \          [(< gpa 3.0)\n           'B+']\n          [(< gpa 2.7)\n          \
    \ 'B']\n          [(< gpa 2.3)\n           'B-']\n          [(< gpa 2.0)\n   \
    \        'C+']\n          [(< gpa 1.7)\n           'C']\n          [(< gpa 1.3)\n\
    \           'C-']\n          [(< gpa 1.0)\n           'D+']\n          [(< gpa\
    \ 0.7)\n           'D']\n          [(< gpa 0.0)\n           'D- ']\n         \
    \ [else\n           'E'])))\n", "  (define (helper grade grades)\n    (cond\n\
    \      [(< grade 4.0) 'A+]\n      [(= grade 4.0) 'A]\n      [(< grade 3.7) 'A-]\n\
    \      [(= grade 3.7) 'A]\n      [(< grade 3.3) 'B+]\n      [(= grade 3.3) 'B]\n\
    \      [(< grade 3.0) 'B-]\n      [(= grade 3.0) 'B]\n      [(< grade 2.7) 'C+]\n\
    \      [(= grade 2.7) 'C]\n      [(< grade 2.3) 'C-]\n      [(= grade 2.3) 'C]\n\
    \      [(< grade 2.0) 'D+]\n      [(= grade 2.0) 'D]\n      [(< grade 1.7) 'D-]\n\
    \      [(= grade 1.7) 'D]\n      [(< grade 1.3) 'E]\n      [(= grade 1.3) 'E]\n\
    \      [(< grade 1.0) 'F]\n      [(= grade 1.0) 'F]\n      [(< grade 0.7) 'F]\n\
    \      [(= grade 0.7) 'F]\n      [else 'F]\n    )\n  )\n  (helper grades (remove\
    \ grades 1.0))\n)\n", "  (let loop ((g grades) (acc (make-array '(char)))\n  \
    \           (i 0))\n    (cond ((null? g) (reverse acc))\n          ((> g (car\
    \ g))\n           (loop (cdr g) (append acc (list (car (car g)))))\n         \
    \  (loop (cdr g) (append acc (list (car (car g)))))\n           (loop (cdr g)\
    \ acc i))))))\n", "  (let ([gpas grades])\n    (map (lambda (x)\n           (let\
    \ ([gpa\n                  result (cond ((>= gpa 3.3) 'A-)\n                 \
    \           ((>= gpa 3.7) (cons 'A 'A+))\n                            ((>= gpa\
    \ 3.0) 'B-)\n                            ((>= gpa 2.7) (cons 'B 'B+))\n      \
    \                      ((>= gpa 2.3) 'B-)\n                            ((>= gpa\
    \ 2.0) 'C+)\n                            ((>= gpa 1.7) 'C)\n                 \
    \           ((>= gpa 1.3) 'C-)\n                            ((>= gpa 1.0) 'D+)\n\
    \                            ((>= gpa 0.7) 'D)\n                            (else\
    \ 'D-)))]\n             (cond ((number? x) x)\n                  (else result))))\n\
    \        gpas)))\n", "  (define (grade n)\n    (if (= n 0)\n        'E\n     \
    \   (if (> n 4.0)\n            'A-\n            'B+\n            (if (> n 3.7)\n\
    \                'B-\n                'B+\n                (if (> n 3.3)\n   \
    \                 'B-\n                    'B+\n                    (if (> n 3.0)\n\
    \                        'B-\n                        'B+\n                  \
    \      (if (> n 2.7)\n                            'B-\n                      \
    \      'B+\n                            (if (> n 2.3)\n                      \
    \          'B-\n                                'B+\n                        \
    \        (if (> n 2.0)\n                                    'B-\n            \
    \                        'B+\n                                    (if (> n 1.7)\n\
    \                                        'B-\n                               \
    \         'B+\n                                        (if (> n 1.3)\n       \
    \                                     'B-\n                                  \
    \          'B+\n                                            (if (> n 1.0)\n  \
    \                                              'B-\n                         \
    \                       'B+\n                                                (if\
    \ (> n 0.7)\n                                                    'B-\n       \
    \                                             'B+\n                          \
    \                          (if (> n 0.0)\n                                   \
    \                     'B-\n                                                  \
    \      'B+)))))))))))))))\n    (map (lambda (grade)\n          (cond ((>= n 4.0)\n\
    \                 'A-)\n              ((<= n 3.7)\n                 'A)\n    \
    \          ((<= n 3.3)\n                 'A+\n                 'A-)\n        \
    \      ((<= n 3.0)\n                 'B+)\n              ((<= n 2.7)\n       \
    \          'B)\n              ((<= n 2.3)\n                 'B-)\n           \
    \   ((<= n 2.0)\n                 'C+)\n              ((<= n 1.7)\n          \
    \       'C)\n              ((<= n 1.3)\n                 'C-)\n              ((<=\
    \ n 1.0)\n                 'D+)\n              ((<= n 0.7)\n                 'D)\n\
    \              ((<= n 0.0)\n                 'D-)\n              (else 'E))\n\
    \          (grade n)))))\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, I will\
    \ check this out :)\n<|/ c |>\n<| a dscore=2 |>\nThis is an alternate solution\
    \ that doesn't use loops. But it uses recursion.\n<code>", "  (cond\n    [(> grades\
    \ 3.5) (list 'C)]\n    [(> grades 3.0) (list 'B)]\n    [(> grades 2.7) (list 'B)]\n\
    \    [(> grades 2.3) (list 'B-)]\n    [(> grades 2.0) (list 'A)]\n    [(> grades\
    \ 1.7) (list 'A)]\n    [(> grades 1.3) (list 'A-)]\n    [(> grades 1.0) (list\
    \ 'A)]\n    [(> grades 0.7) (list 'D)]\n    [(> grades 0.6) (list 'D)]\n    [(>\
    \ grades 0.5) (list 'D)]\n    [(> grades 0.4) (list 'D)]\n    [(> grades 0.3)\
    \ (list 'D)]\n    [(> grades 0.2) (list 'D)]\n    [(> grades 0.1) (list 'D)]\n\
    \    [(> grades 0.0) (list 'D)]\n    [(> grades 0.0) (list 'E)]))\n", "  (cond\
    \ ((= grades 0.0) 'E)\n        ((>= grades 1.0) 'D+)\n        ((>= grades 1.1)\
    \ 'D)\n        ((>= grades 1.2) 'D-)\n        ((>= grades 1.3) 'C+)\n        ((>=\
    \ grades 1.4) 'C)\n        ((>= grades 1.5) 'C-)\n        ((>= grades 1.6) 'B+)\n\
    \        ((>= grades 1.7) 'B)\n        ((>= grades 1.8) 'B-)\n        ((>= grades\
    \ 1.9) 'A+)\n        ((>= grades 2.0) 'A)\n        ((>= grades 2.1) 'A-)\n   \
    \     ((>= grades 2.2) 'B+)\n        ((>= grades 2.3) 'B)\n        ((>= grades\
    \ 2.4) 'B-)\n        ((>= grades 2.5) 'C+)\n        ((>= grades 2.6) 'C)\n   \
    \     ((>= grades 2.7) 'C-)\n        ((>= grades 2.8) 'D+)\n        ((>= grades\
    \ 2.9) 'D)\n        ((>= grades 3.0) 'D-)\n        ((>= grades 3.1) 'C+)\n   \
    \     ((>= grades 3.2) 'C)\n        ((>= grades 3.3) 'C-)\n        ((>= grades\
    \ 3.4) 'B+)\n        ((>= grades 3.5) 'B)\n        ((>= grades 3.6) 'B-)\n   \
    \     ((>= grades 3.7) 'A+)\n        ((>= grades 3.8) 'A)\n        ((>= grades\
    \ 3.9) 'A-)\n        ((>= grades 3.10) 'B+)\n        ((>= grades 3.11) 'B)\n \
    \       ((>= grades 3.12) 'B-)\n        ((>= grades 3.13) 'C+)\n        ((>= grades\
    \ 3.14) 'C)\n        ((>= grades 3.15) 'C-)\n        ((>= grades 3.16) 'D+)\n\
    \        ((>= grades 3.17) 'D)\n        ((>= grades 3.18) 'D-)\n        ((>= grades\
    \ 3.19) 'C+)\n        ((>= grades 3.20) 'C)\n        ((>= grades 3.21) 'C-)\n\
    \        ((>= grades 3.22) 'B+)\n        ((>= grades 3.23) 'B)\n        ((>= grades\
    \ 3.24) 'B-)\n        ((>= grades 3.", "  (let* ((grade_1 (floor grades 0))\n\
    \         (grade_2 (- grades grade_1))\n         (grade_3 (- grades grade_2)))\n\
    \    (cond ((< grade_1 0)\n           'E)\n          ((< grade_2 0)\n        \
    \   'D)\n          ((< grade_3 0)\n           'C)\n          ((< grade_4 0)\n\
    \           'B)\n          ((< grade_5 0)\n           'A)\n          ((< grade_6\
    \ 0)\n           'A+)\n          ((< grade_7 0)\n           'A-)\n          ((<\
    \ grade_8 0)\n           'B+)\n          ((< grade_9 0)\n           'B)\n    \
    \      ((< grade_10 0)\n           'B-)\n          ((< grade_11 0)\n         \
    \  'C+)\n          ((< grade_12 0)\n           'C)\n          ((< grade_13 0)\n\
    \           'C-)\n          ((< grade_14 0)\n           'D+)\n          ((< grade_15\
    \ 0)\n           'D)\n          ((< grade_16 0)\n           'D-)\n          (else\
    \ 'F))))\n", "  (define (add x y)\n    (cond ((= x 0) y)\n          ((= y 0) x)\n\
    \          ((< x 0) (sub (x) y))\n          (else (+ x y))))\n  (define (sub x\
    \ y)\n    (cond ((= x 0) (- y))\n          ((= y 0) (- x))\n          ((< x 0)\
    \ (add (- x) (- y)))\n          (else (- x y))))\n  (define (subtract x y)\n \
    \   (cond ((= x 0) y)\n          ((= y 0) x)\n          ((< x 0) (add (x) (- y)))\n\
    \          (else (+ x y))))\n  (define (multiply x y)\n    (cond ((= x 0) (* y\
    \ 1))\n          ((= y 0) (* x 1))\n          ((< x 0) (add (multiply (- x) y)\
    \ y))\n          (else (add (multiply x y) (multiply (- x) y)))))\n  (define (divide\
    \ x y)\n    (cond ((= x 0) 0)\n          ((= y 0) 0)\n          ((< x 0) (multiply\
    \ x y))\n          (else (multiply x (divide y x)))))\n  (define (round-down a\
    \ place)\n    (cond ((< place 0)\n           (sub a (quotient a place)))\n   \
    \       ((< place 1)\n           (divide a (quotient a place)))\n          (else\
    \ a)))\n  (define (floor a)\n    (cond ((< a 0)\n           (sub a (quotient a\
    \ 2)))\n          ((< a 1)\n           (divide a (quotient a 2)))\n          (else\
    \ a)))\n  (define (ceil a)\n    (cond ((< a 0)\n           (add\n            (floor\
    \ a 1)\n            (quotient a 2))))\n          ((< a 1)\n           (add\n \
    \           (floor a 1)\n            (quotient a 2))))\n          (else a)))\n\
    \  (define (floor_divide_round x y place)\n    (round-down (divide x y)\n    \
    \           (floor (divide y place))))\n  (define (floor_divide_round2 x y place)\n\
    \    (round-down (multiply x y)\n               (floor (multiply y place))))\n\
    \  (define (floor_divide_round3 x y place)\n    (round-down (add x y)\n      \
    \         (floor (add y place))))\n  (define (floor_divide_round4 x y place)\n\
    \    (round-down (sub x y)\n", "  (define (sum_of_gpas gpas)\n    (define (sum_of_gpa_and_gpas\
    \ gpas)\n      (define (sum_of_gpa_and_gpa gpa sum)\n        (cond\n         \
    \ [(< gpa 2.0) (sum sum 'A)]\n          [(< gpa 1.7) (sum sum 'B)]\n         \
    \ [(< gpa 1.0) (sum sum 'C)]\n          [else (sum sum 'D)])\n      (map sum_of_gpa_and_gpas\
    \ (rest gpas) (append (first gpas) sum)))\n    (sum_of_gpas (rest gpas)))\n  (map\
    \ (lambda (gpa)\n         (cond\n           [(< gpa 3.0) (list 'A)]\n        \
    \   [(< gpa 2.7) (list 'B)]\n           [(< gpa 2.3) (list 'B)]\n           [(<\
    \ gpa 2.0) (list 'C)]\n           [(< gpa 1.7) (list 'C)]\n           [(< gpa\
    \ 1.0) (list 'D)]\n           [(< gpa 0.7) (list 'D)]\n           [else (list\
    \ 'E)]))\n        (rest grades)))\n", "  (let loop ([gpa grades]\n           \
    \  [letter \"\"])\n    (if (null? grades)\n        [letter letter]\n        (let\
    \ ((gpa (first grades))\n              (next (first grades))\n              (grade\
    \ (if (> gpa 3.0) \"B+\" (if (> gpa 3.7) \"B\"\n                             \
    \       (if (> gpa 3.3) \"B-\" (if (> gpa 3.0) \"C+\" \n                     \
    \                                   \"C\")))\n              (next_grade (if (>\
    \ gpa 3.0) \"C\"\n                                    (if (> gpa 3.7) \"C-\"\n\
    \                                        (if (> gpa 3.3) \"C-\" \n           \
    \                                 \"C+\"))))\n          (loop (rest grades)\n\
    \                '(A B C D\n                   A B C D\n                   A B\
    \ C D\n                   A B C D\n                   A B C D\n              \
    \     A B C D\n                   A B C D\n                   A B C D\n      \
    \             A B C D\n                   A B C D\n                   A B C D\n\
    \                   A B C D\n                   A B C D\n                   A\
    \ B C D\n                   A B C D\n                   A B C D\n            \
    \       A B C D\n                   A B C D\n                   A B C D\n    \
    \               A B C D\n                   A B C D\n                   A B C\
    \ D\n                   A B C D\n                   A B C D\n                \
    \   A B C D\n                   A B C D\n                   A B C D\n        \
    \           A B C D\n                   A B C D\n                   A B C D\n\
    \                   A B C D\n                   A B C D\n                   A\
    \ B C D\n                   A B C D\n                   A B C D\n            \
    \       A B C D\n                   A B C D\n                   A B C D\n    \
    \               A B C D\n                   A B C D\n                   A B C\
    \ D\n                   A B C D\n                   A B C D\n                \
    \   A B C D\n                   A B C D\n                   A B C D\n        \
    \           A B C D\n                   A B C D\n                   A B C D\n\
    \                   A B C D\n                   A B C D\n                   A\
    \ B C D\n                   A B C D\n                   A B C D\n            \
    \       A B C D\n                   A B C D\n                   A B C D\n    \
    \               A B C D\n                   A B C D\n                   A B C\
    \ D\n", "  (cond [(< grades (/ 40.0 3.0)) \"A+\"]\n        [else (cond [(< grades\
    \ (/ 3.7 3.0)) \"A\"]\n                  [(< grades (/ 3.3 3.0)) \"A-\"]\n   \
    \               [(< grades (/ 3.0 3.0)) \"B+\"]\n                  [(< grades\
    \ (/ 2.7 3.0)) \"B\"]\n                  [(< grades (/ 2.3 3.0)) \"B-\"]\n   \
    \               [(< grades (/ 2.0 3.0)) \"C+\"]\n                  [(< grades\
    \ (/ 1.7 3.0)) \"C\"]\n                  [(< grades (/ 1.3 3.0)) \"C-\"]\n   \
    \               [(< grades (/ 1.0 3.0)) \"D+\"]\n                  [(< grades\
    \ (/ 0.7 3.0)) \"D\"]\n                  [(< grades (/ 0.0 3.0)) \"D-\"]\n   \
    \               [(< grades (/ 0.0 3.0)) \"E\"])])\n", "  (define (iter grade accum\
    \ total)\n    (if (< grade total)\n        (iter (- grade total) (incf accum)\
    \ total)\n        accum))\n  (iter grades '() 0))\n", "  (let ((n 0))\n    (loop\
    \ for grade in grades\n         unless (= grade 0)\n         do (add1 n)\n   \
    \      finally (return (append* '(A - B - C - D - E) (number->string n))))))\n",
  "  (if (= (modulo grades 5.0) 5.0)\n      (cons 'A+)\n      (cons 'A 'A-)\n    \
    \  (cons 'B+)\n      (cons 'B 'B-)\n      (cons 'C+)\n      (cons 'C )\n     \
    \ (cons 'C-)\n      (cons 'D+)\n      (cons 'D )\n      (cons 'D-)\n      (cons\
    \ 'E)))\n", "  (cond\n    [(< grades 0)\n      (error \"Numerical letter grade\
    \ must be greater than 0\" grades)\n     ]\n    [(< grades 4.0)\n      (error\
    \ \"Numerical letter grade must be between 4 and 4.9\" grades)\n     ]\n    [(<\
    \ grades 3.7)\n      '(a+) \n     ]\n    [(< grades 3.3)\n      '(a-)\n     ]\n\
    \    [(< grades 3.0)\n      '(b+)\n     ]\n    [(< grades 2.7)\n      '(b-)\n\
    \     ]\n    [(< grades 2.3)\n      '(c-)\n     ]\n    [(< grades 2.0)\n     \
    \ '(d-)\n     ]\n    [(< grades 1.7)\n      '(c)\n     ]\n    [(< grades 1.3)\n\
    \      '(c-)\n     ]\n    [(< grades 1.0)\n      (error \"Numerical letter grade\
    \ must be between 1.4 and 3.0\" grades)\n     ]\n    [(< grades 0.7)\n      '(d)\n\
    \     ]\n    [(< grades 0.0)\n      '(d)\n     ]\n    [else\n      (error \"Numerical\
    \ letter grade must be greater than 0\" grades)\n     ]\n   )\n  )\n", "  (define\
    \ (helper x list)\n    (if (null? list)\n        '()\n        (if (< (car list)\
    \ x)\n            (cons (car list) (helper (cdr list) list))\n            (helper\
    \ (cdr list) list))))\n  (helper grades '(A A B A C B B C C C B B A A A A A D\
    \ D A A A C A A A D C D D C D C A C C C D C A B C A B C C B C A B A B D D A A\
    \ A A A A C A B A A A A B A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A\
    \ A A A A A A A A A A A A A A A A A A A ", "  (let ([gpa (first grades)])\n  \
    \  (cond\n      ((< gpa 4.0)\n       (list 'A 'A 'A 'A))\n      ((> gpa 4.0)\n\
    \       (list 'B 'B 'B 'B))\n      ((> gpa 3.7)\n       (list 'C 'C 'C 'C))\n\
    \      ((> gpa 3.3)\n       (list 'D 'D 'D 'D))\n      ((> gpa 3.0)\n       (list\
    \ 'E 'E 'E 'E))\n      (else\n       (list 'F 'F 'F 'F)))\n      ))\n", "  (letrec\
    \ ([numerical_grades_helper [\n      [4.0, [ 'A+', ] ]\n      [(> 3.7 ) (< 3.7\
    \ ) (+ 3.0 'B+)]\n      [(> 3.3 ) (< 3.3 ) (+ 2.0 'B)]\n      [(> 3.0 ) (< 3.0\
    \ ) (+ 1.7 'C)]\n      [(> 2.7 ) (< 2.7 ) (+ 1.3 'C)]\n      [(> 2.3 ) (< 2.3\
    \ ) (+ 0.7 'C)]\n      [(> 2.0 ) (< 2.0 ) (+ 0.0 'D)]\n      [(> 1.7 ) (< 1.7\
    \ ) (+ 0.0 'D)]\n      [(> 1.3 ) (< 1.3 ) (+ 0.0 'D)]\n      [(> 1.0 ) (< 1.0\
    \ ) (+ 0.0 'D)]\n      [(> 0.7 ) (< 0.7 ) (+ 0.0 'D)]\n      [(< 0.0 ) (+ 0.0\
    \ 'E)]]\n    [(< 3.0 ) (+ 0.0 'E)]])\n    (cond\n      [(< grades 4.0) 'A+ \n\
    \       (letrec [numerical_grade [\n          (< grades 3.7) 'A \n          (<\
    \ grades 3.3) 'A-\n          (< grades 3.0) 'B+\n          (< grades 2.7) 'B \n\
    \          (< grades 2.3) 'B-\n          (< grades 2.0) 'C+\n          (< grades\
    \ 1.7) 'C\n          (< grades 1.3) 'C-\n          (< grades 1.0) 'D+ \n     \
    \     (< grades 0.7) 'D \n          (< grades 0.0) 'D-]\n          (cond\n   \
    \         [(< grades 3.0) (+ grades 0.0 'E)]\n            [(< grades 2.7) (+ grades\
    \ 0.0 'E)]\n            [(< grades 2.3) (+ grades 0.0 'E)]\n            [(< grades\
    \ 2.0) (+ grades 0.0 'E)]\n            [(< grades 1.7) (+ grades 0.0 'E)]\n  \
    \          [(< grades 1.3) (+ grades 0.0 'E)]\n            [(< grades 1.0) (+\
    \ grades 0.0 'E)]\n            [(< grades 0.7) (+ grades 0.0 'E)]\n          \
    \  [else (+ grades 0.0 'E)]) ]\n          (cond\n            [(< grades 4.0) (cons\
    \ numerical_grade numerical_grades_", "  (let loop ((grades grades)\n        \
    \     (letter #f)\n             (index 0))\n    (if (null? grades)\n        (list\
    \ letter)\n        (let ((gpa (car grades)))\n          (loop (cdr grades)\n \
    \                (if (> gpa 3.7)\n                     (cons (char (+ index 10)\
    \ (+ gpa 3.7) (modulo 26 13))\n                          (+ index 10))\n     \
    \                 (cons (char (+ index 10) (+ gpa 3.3))\n                    \
    \      (+ index 10))\n                      (cons (char (+ index 10) (+ gpa 3.0))\n\
    \                          (+ index 10))\n                      (cons (char (+\
    \ index 10) (+ gpa 2.7))\n                          (+ index 10))\n          \
    \            (cons (char (+ index 10) (+ gpa 2.3))\n                         \
    \ (+ index 10))\n                      (cons (char (+ index 10) (+ gpa 2.0))\n\
    \                          (+ index 10))\n                      (cons (char (+\
    \ index 10) (+ gpa 1.7))\n                          (+ index 10))\n          \
    \            (cons (char (+ index 10) (+ gpa 1.3))\n                         \
    \ (+ index 10))\n                      (cons (char (+ index 10) (+ gpa 1.0))\n\
    \                          (+ index 10))\n                      (cons (char (+\
    \ index 10) (+ gpa 0.7))\n                          (+ index 10))\n          \
    \            (cons (char (+ index 10) (+ gpa 0.0))\n                         \
    \ (+ index 10))\n                      (cons (char (+ index 10) (+ gpa 3.0))\n\
    \                          (+ index 10))\n                      (cons (char (+\
    \ index 10) (+ gpa 3.3))\n                          (+ index 10))\n          \
    \            (cons (char (+ index 10) (+ gpa 3.7))\n                         \
    \ (+ index 10))\n                      (cons (char (+ index 10) (+ gpa 4.0)))\n\
    \                      (cons (char (+ index 10) (+ gpa 4.7)))\n              \
    \        (cons (char (+ index 10) (+ gpa 5.3)))\n                      (cons (char\
    \ (+ index 10) (+ gpa 6.0)))\n                      (cons (char (+ index 10) (+\
    \ gpa 6.7)))\n                      (cons (char (+ index 10) (+ gpa 7.0)))\n \
    \                     (cons (char (+ index 10) (+ gpa 7.7)))\n               \
    \       (cons (char (+ index 10) (+ gpa 8.0)))\n                      (cons (char\
    \ (+ index ", "  (if (empty? grades) \n      'E\n      (let ([current-gpa (first\
    \ grades)]) \n        (if (< current-gpa 4.0)\n            (cond [(> current-gpa\
    \ 3.7) (append 'A+)]\n                  [(> current-gpa 3.3) (append 'A-)]\n \
    \                 [(> current-gpa 3.0) (append 'B+)]\n                  [(> current-gpa\
    \ 2.7) (append 'B)]\n                  [(> current-gpa 2.3) (append 'B-)]\n  \
    \                [(> current-gpa 2.0) (append 'C+)]\n                  [(> current-gpa\
    \ 1.7) (append 'C)]\n                  [(> current-gpa 1.3) (append 'C-)]\n  \
    \                [(> current-gpa 1.0) (append 'D+)]\n                  [(> current-gpa\
    \ 0.7) (append 'D)]\n                  [(> current-gpa 0.0) (append 'D-)]\n  \
    \                [(> current-gpa -3.0) (append 'B-)]\n                  [(> current-gpa\
    \ -2.3) (append 'B-)]\n                  [(> current-gpa -2.0) (append 'B)]\n\
    \                  [(> current-gpa -1.7) (append 'B)]\n                  [(> current-gpa\
    \ -1.3) (append 'B)]\n                  [(> current-gpa -1.0) (append 'A)]\n \
    \                 [(> current-gpa -0.7) (append 'A)]\n                  [(> current-gpa\
    \ -0.0) (append 'A)]\n                  [(> current-gpa -3.3) (append 'A-)]\n\
    \                  [(> current-gpa -3.7) (append 'A-)]\n                  [(>\
    \ current-gpa -3.0) (append 'A)]\n                  [(> current-gpa -2.7) (append\
    \ 'A)]\n                  [(> current-gpa -2.3) (append 'A)]\n               \
    \   [(> current-gpa -2.0) (append 'A)]\n                  [(> current-gpa -1.7)\
    \ (append 'A)]\n                  [(> current-gpa -1.3) (append 'A)]\n       \
    \           [(> current-gpa -1.0) (append 'A)]\n                  [(> current-gpa\
    \ -0.7) (append 'A)]\n                  [(> current-gpa -0.0) (append 'A)]\n \
    \                 [(> current-gpa -3.3) (append 'A)]\n                  [(> current-gpa\
    \ -3.7) (append 'A)]\n                  [(> current", "  (if (empty? grades)\n\
    \      empty\n      (let ([last-gpa (first grades)])\n        (if (> last-gpa\
    \ 4.0)\n            (cons 'A+ (rest grades))\n            (cons 'A (rest grades))\n\
    \            (cons 'B+ (rest grades))\n            (cons 'B (rest grades))\n \
    \           (cons 'B- (rest grades))\n            (cons 'C+ (rest grades))\n \
    \           (cons 'C (rest grades))\n            (cons 'C- (rest grades))\n  \
    \          (cons 'D+ (rest grades))\n            (cons 'D (rest grades))\n   \
    \         (cons 'D- (rest grades))\n            (cons 'E (rest grades)))))) ;\
    \ no letter grade for this student", "  (cond [(< grades 4.0)\n         (string-append\
    \ \"A+\")]\n        [(< grades 3.7)\n         (string-append \"A\")]\n       \
    \ [(< grades 3.3)\n         (string-append \"A-\")]\n        [(< grades 3.0)\n\
    \         (string-append \"B+\")]\n        [(< grades 2.7)\n         (string-append\
    \ \"B\")]\n        [(< grades 2.3)\n         (string-append \"B-\")]\n       \
    \ [(< grades 2.0)\n         (string-append \"C+\")]\n        [(< grades 1.7)\n\
    \         (string-append \"C\")]\n        [(< grades 1.3)\n         (string-append\
    \ \"C-\")]\n        [(< grades 1.0)\n         (string-append \"D+\")]\n      \
    \  [(< grades 0.7)\n         (string-append \"D\")]\n        [(< grades 0.0)\n\
    \         (string-append \"D-\")]\n        [(> grades 0.0)\n         (string-append\
    \ \"E\")]))\n", "  (if (and (number? grades)\n          (> grades 2.0)\n     \
    \     (< grades 4.0))\n      (string-append \"A+\" (string-append \"A\" (string-append\
    \ \"A\" \"\")))\n      (if (< grades 3.7) \n          (string-append \"A\" \"\"\
    ) \n          (string-append \"A\" \"\")))\n  (if (and (number? grades)\n    \
    \      (< grades 3.3)\n          (< grades 3.7))\n      (string-append \"A\" \"\
    \") \n      (if (< grades 2.3) \n          (string-append \"A\" \"\")\n      \
    \    (string-append \"A\" \"\")))\n  (if (and (number? grades)\n          (< grades\
    \ 3.0) \n          (< grades 3.3))\n      (string-append \"B+\" (string-append\
    \ \"B\" \"\") (string-append \"B\" \"\"))\n      (if (< grades 2.7) \n       \
    \   (string-append \"B\" \"\") \n          (string-append \"B\" \"\")))\n  (if\
    \ (and (number? grades)\n          (< grades 2.0) \n          (< grades 2.7))\n\
    \      (string-append \"B\" \"\") \n      (if (< grades 1.7) \n          (string-append\
    \ \"B\" \"\") \n          (string-append \"B\" \"\")))\n  (if (and (number? grades)\n\
    \          (< grades 1.0))\n      (string-append \"C+\" (string-append \"C\" \"\
    \") (string-append \"C\" \"\"))\n      (if (< grades 0.7) \n          (string-append\
    \ \"C\" \"\")\n          (string-append \"C\" \"\")))\n  (if (and (number? grades)\n\
    \          (< grades 0.0))\n      (string-append \"D+\" (string-append \"D\" \"\
    \") (string-append \"D\" \"\"))\n      (if (< grades 0.0)\n          (string-append\
    \ \"D\" \"\")\n          (string-append \"D\" \"\")))\n  (if (and (number? grades)\n\
    \          (< grades 0.0))\n      (string-append \"E\" \"\")\n      (string-append\
    \ \"E\" \"\")))\n", "  (cond\n    [(<= grades 0)\n     'D-]\n    [(< grades 4)\n\
    \     (cond \n\t[(< grades 1)\n\t (cond \n\t   [(< grades 2)\n\t    (cond \n\t\
    \    [(< grades 3)\n\t     (cond \n\t\t[(< grades 4)\n\t\t (cond \n\t\t   [(<\
    \ grades 5)\n\t\t    (cond \n\t\t\t[(< grades 6)\n\t\t\t (cond \n\t\t\t   [(<\
    \ grades 7)\n\t\t\t    (cond \n\t\t\t     [(< grades 8)\n\t\t\t      (cond \n\t\
    \t\t       [(< grades 9)\n\t\t\t        (cond \n\t\t\t         [(< grades 10)\n\
    \t\t\t          (cond \n\t\t\t           [(< grades 11)\n\t\t\t            (cond\
    \ \n\t\t\t             [(< grades 12)\n\t\t\t              (cond \n\t\t\t    \
    \           [(< grades 13)\n\t\t\t                (cond \n\t\t\t             \
    \    [(< grades 14)\n\t\t\t                  (cond \n\t\t\t                  \
    \ [(< grades 15)\n\t\t\t                    (cond \n\t\t\t                   \
    \  [(< grades 16)\n\t\t\t                      (cond \n\t\t\t                \
    \       [(< grades 17)\n\t\t\t                        (cond \n\t\t\t         \
    \                [(< grades 18)\n\t\t\t                          (cond \n\t\t\t\
    \                           [(< grades 19)\n\t\t\t                           \
    \ (cond \n\t\t\t                             [(< grades 20)\n\t\t\t          \
    \                    (cond \n\t\t\t                               [(< grades 21)\n\
    \t\t\t                                (cond \n\t\t\t                         \
    \      [(< grades 22)\n\t\t\t                                (cond \n\t\t\t  \
    \                             [(< grades 23)\n\t\t\t                         \
    \       (cond \n\t\t\t                               [(< grades 24)\n\t\t\t  \
    \                              (cond \n\t\t\t                               [(<\
    \ grades 25)\n\t\t\t                                (cond \n\t\t\t           \
    \                    [(< grades 26)\n\t\t\t                                (cond\
    \ \n\t\t\t                               [(< grades 27)\n\t\t\t              \
    \                  (cond \n\t\t\t                               [(< grades 28)\n\
    \t\t\t                                (cond \n\t\t\t                         \
    \      [(< grades 29)\n\t\t\t                                (cond \n\t\t\t  \
    \                             [(< grades 30)\n\t\t\t                         \
    \       (cond \n\t\t\t                               [(< grades 31)\n\t\t\t  \
    \                              (cond \n\t\t\t                               [(<\
    \ grades 32)\n\t\t\t                                (cond \n\t\t\t           \
    \                    [(< grades 33)\n\t\t\t                                (cond\
    \ \n\t\t\t                               [(< grades 34)\n\t\t\t              \
    \                  (cond \n\t\t\t                               [(< grades 35)\n\
    \t\t\t                                (cond \n\t\t\t                         \
    \      [(", "  (map (lambda (grade)\n         (let ((gpa (number->string (/ grade\
    \ 4.0))))\n           (cond ((< grade 3.7)\n                  (cons (char->string\
    \ 'A+) (cons gpa (cons ' ' gpa (substring gpa 1 2))))\n                 ((> grade\
    \ 3.3)\n                  (cons (char->string 'A) (cons gpa (cons ' ' gpa (substring\
    \ gpa 1 2))))\n                 ((> grade 3.0)\n                  (cons (char->string\
    \ 'B+) (cons gpa (cons ' ' gpa (substring gpa 1 2))))\n                 ((> grade\
    \ 2.7)\n                  (cons (char->string 'B) (cons gpa (cons ' ' gpa (substring\
    \ gpa 1 2))))\n                 ((> grade 2.3)\n                  (cons (char->string\
    \ 'B-) (cons gpa (cons ' ' gpa (substring gpa 1 2))))\n                 ((> grade\
    \ 2.0)\n                  (cons (char->string 'C+) (cons gpa (cons ' ' gpa (substring\
    \ gpa 1 2))))\n                 ((> grade 1.7)\n                  (cons (char->string\
    \ 'C) (cons gpa (cons ' ' gpa (substring gpa 1 2))))\n                 ((> grade\
    \ 1.3)\n                  (cons (char->string 'C-) (cons gpa (cons ' ' gpa (substring\
    \ gpa 1 2))))\n                 ((> grade 1.0)\n                  (cons (char->string\
    \ 'D+) (cons gpa (cons ' ' gpa (substring gpa 1 2))))\n                 ((> grade\
    \ 0.7)\n                  (cons (char->string 'D) (cons gpa (cons ' ' gpa (substring\
    \ gpa 1 2))))\n                 ((> grade 0.0)\n                  (cons (char->string\
    \ 'D-) (cons gpa (cons ' ' gpa (substring gpa 1 2))))\n                 (else\n\
    \                  (cons (char->string 'E) (cons gpa (cons ' ' gpa (substring\
    \ gpa 1 2)))))))\n         ))))", "  (define grades (map number->letter (reverse\
    \ grades))\n   \n  (define (sum-of-grades grades)\n    (define (sum-of-grades-helper\
    \ gpa grades)\n      (if (>= gpa 0)\n          (gpa \n          (+ (* (floor (/\
    \ gpa 4.0)) 3.0)\n             (* (floor (/ gpa 3.7)) 3.0)\n             (* (floor\
    \ (/ gpa 3.3)) 3.0)\n             (* (floor (/ gpa 3.0)) 2.7)\n             (*\
    \ (floor (/ gpa 2.7)) 2.7)\n             (* (floor (/ gpa 2.3)) 2.3)\n       \
    \      (* (floor (/ gpa 2.0)) 1.7)))\n          0))\n    (sum-of-grades-helper\
    \ grades grades)\n\n  (define (sum-of-grades-helper gpa grades)\n    (if (>= gpa\
    \ 0)\n        (let ((grades (reverse grades))\n            (gpa-count 0)\n   \
    \         (total-sum (sum-of-grades-helper gpa grades))\n            (letter (number->letter\
    \ (/ total-sum (length (reverse grades))))))\n          letter)\n          0))\n\
    \n  (let ((total-sum (sum-of-grades grades))\n        (grades (reverse grades))\n\
    \        (grade-count 0))\n    (if (< total-sum (* gpa 4.0))\n        (cons (number->letter\
    \ (/ total-sum (length (reverse grades))))\n              (sum-of-grades-helper\
    \ gpa (reverse grades)))\n        (cons 0 (sum-of-grades-helper gpa grades)))))\n",
  "  (cond [(zero? grades) 'E]\n        [(<= grades (/ 3.0 5.0)) 'C+ ]\n        [(<=\
    \ grades (/ 3.0 4.0)) 'C- ]\n        [(<= grades (/ 3.0 3.0)) 'C]\n        [(<=\
    \ grades (/ 3.0 2.0)) 'B ]\n        [(<= grades (/ 3.0 1.0)) 'B+ ]\n        [(<=\
    \ grades (/ 3.0 0.7)) 'B ]\n        [(<= grades (/ 3.0 0.5)) 'B- ]\n        [(<=\
    \ grades (/ 3.0 0.3)) 'B]\n        [(<= grades (/ 3.0 0.1)) 'B+ ]\n        [(<=\
    \ grades (/ 3.0 0)) 'A]\n        [else 'A+ ]))\n", "  (define (accumulator gpa)\n\
    \    (cond [(> gpa 3.0) 'A+]\n          [(> gpa 3.7) 'A]\n          [(> gpa 3.3)\
    \ 'A-]\n          [(> gpa 3.0) 'B+]\n          [(> gpa 2.7) 'B]\n          [(>\
    \ gpa 2.3) 'B-]\n          [(> gpa 2.0) 'C+]\n          [(> gpa 1.7) 'C]\n   \
    \       [(> gpa 1.3) 'C-]\n          [(> gpa 1.0) 'D+]\n          [(> gpa 0.7)\
    \ 'D]\n          [(> gpa 0.0) 'D-]\n          [(= gpa 0.0) 'E]\n          [else\
    \ '?]))\n  (apply accumulator grades))\n", "  (let ([g (first grades)])\n    (if\
    \ (null? (rest grades))\n        (cons \"E\" '())\n        (append (cons (- g\
    \ g) (letter grade-of g)) (numerical_letter_grade (rest grades))))\n    )\n)\n",
  "  (cond\n    [(<= grades 3.0) 'A+]\n    [(<= grades 3.3) 'A]\n    [(<= grades 3.7)\
    \ 'A-]\n    [(<= grades 4.0) 'B+]\n    [(<= grades 4.3) 'B]\n    [(<= grades 4.7)\
    \ 'B-]\n    [(<= grades 5.0) 'C+]\n    [(<= grades 5.3) 'C]\n    [(<= grades 5.7)\
    \ 'C-]\n    [(<= grades 6.0) 'D+]\n    [(<= grades 6.3) 'D]\n    [(<= grades 6.7)\
    \ 'D-]\n    [else 'E]))", "  (let* ((sum (apply + grades))\n         (diff (apply\
    \ - grades))\n         (grade (/ (- diff sum) 2.0)))\n    (cond ((< grade 3.0)\n\
    \           (cond ((< grade 2.0)\n                  (list 'A+))\n            \
    \    ((< grade 2.7)\n                  (list 'A))\n                ((< grade 2.3)\n\
    \                  (list 'A-))\n                ((< grade 2.0)\n             \
    \     (list 'B+))\n                ((< grade 2.7)\n                  (list 'B))\n\
    \                ((< grade 2.3)\n                  (list 'B-))\n             \
    \   ((< grade 2.0)\n                  (list 'C+))\n                ((< grade 2.7)\n\
    \                  (list 'C))\n                ((< grade 2.3)\n              \
    \    (list 'C-))\n                ((< grade 2.0)\n                  (list 'D+))\n\
    \                ((< grade 2.7)\n                  (list 'D))\n              \
    \  ((< grade 2.3)\n                  (list 'D-))\n                (list 'E))\n\
    \               ((< grade 3.0)\n                  (list 'F))\n               ((<\
    \ grade 3.0)\n                  (list 'G))\n               ((< grade 3.0)\n  \
    \                (list 'H))\n               ((< grade 3.0)\n                 \
    \ (list 'I))\n               ((< grade 3.0)\n                  (list 'J))\n  \
    \             ((< grade 3.0)\n                  (list 'K))\n               ((<\
    \ grade 3.0)\n                  (list 'L))\n               ((< grade 3.0)\n  \
    \                (list 'M))\n               ((< grade 3.0)\n                 \
    \ (list 'N))\n               ((< grade 3.0)\n                  (list 'O))\n  \
    \             ((< grade 3.0)\n                  (list 'P))\n               ((<\
    \ grade 3.0)\n                  (list 'Q))\n               ((< grade 3.0)\n  \
    \                (list 'R))\n               ((< grade 3.0)\n                 \
    \ (list 'S))\n               ((< grade 3.0)\n                  (list 'T))\n  \
    \             ((< grade 3.0)\n                  (list 'U))\n               ((<\
    \ grade 3.0)\n                  (list 'V))\n               ((< grade 3.0)\n  \
    \                (list ", "  (define (check grade grades)\n    (cond [(< grade\
    \ grades)\n           grade]\n          [(<= 0 grade grades)\n           (if (=\
    \ (mod (+ grade grades) 2.7) 0)\n               'D-\n               'D)]\n   \
    \       [(= grade grades)\n           'D]\n          [(>= grade grades)\n    \
    \       (if (= (mod (+ grade grades) 2.3) 0)\n               'B-\n           \
    \    'B)]))\n  (define (list n grades)\n    (if (= n 0)\n        '()\n       \
    \ (cond [(>= grades 0) 'E]\n              [(< grades 1)\n               (list\
    \ n (check grades (- grades 1)))]\n              [else\n               (append\
    \ (list 'A) (list (check grades (- grades 1)))\n                      (list (check\
    \ grades (- grades 2)))\n                      (list (check grades (- grades 3)))\n\
    \                      (list (check grades (- grades 4)))\n                  \
    \    (list (check grades (- grades 5)))\n                      (list (check grades\
    \ (- grades 6)))\n                      (list (check grades (- grades 7)))\n \
    \                     (list (check grades (- grades 8)))\n                   \
    \   (list (check grades (- grades 9))))]))\n  (append (list 'A) (list (numerical_letter_grade\
    \ grades))))\n", "  (let ([sum (apply + grades)])\n    (cond [(< sum 3.0) 'A+\
    \ \n           (> sum 3.0) 'A  \n           (> sum 3.3) 'A- \n           (> sum\
    \ 3.7) 'B+ \n           (> sum 3.7) 'B  \n           (> sum 3.7) 'B-\n       \
    \    (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n\
    \           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7)\
    \ 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum\
    \ 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n         \
    \  (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n \
    \          (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7)\
    \ 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum\
    \ 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n         \
    \  (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n \
    \          (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7)\
    \ 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum\
    \ 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n         \
    \  (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n \
    \          (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7)\
    \ 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum\
    \ 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n         \
    \  (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n \
    \          (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7)\
    \ 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum\
    \ 3.7) 'B-\n           (> sum 3.7) 'B-\n           (> sum 3.7) 'B-\n         \
    \  (> sum 3.7) '", "  (let* ((x grades)\n         (y '())\n         (z (car x))\n\
    \         (b (- x z))\n         (a (/ (car x) b) 2))\n    (if (< b 4)\n      \
    \  (cons ((- b 4) (- a b)) y)\n        (cons ((- b 3) (- a b)) (cons 'A y)))\n\
    \    (if (< b 3.7)\n        (cons ((- b 3.7) 'A) y)\n        (cons ((- b 3.3)\
    \ 'A) (cons 'A-A y)))\n    (if (< b 3.3)\n        (cons ((- b 3.3) 'A-) y)\n \
    \       (cons ((- b 3.0) 'B+) \n             (cons 'B+A y)))\n    (if (< b 2.7)\n\
    \        (cons ((- b 2.7) 'B) y)\n        (cons ((- b 2.3) 'B) (cons 'B-A y)))\n\
    \    (if (< b 2.3)\n        (cons ((- b 2.3) 'B-) y)\n        (cons ((- b 2.0)\
    \ 'C+) \n             (cons 'C+A y)))\n    (if (< b 1.7)\n        (cons ((- b\
    \ 1.7) 'C) y)\n        (cons ((- b 1.3) 'C) (cons 'C-A y)))\n    (if (< b 1.3)\n\
    \        (cons ((- b 1.3) 'C-) y)\n        (cons ((- b 1.0) 'D+) \n          \
    \   (cons 'D+A y)))\n    (if (< b 0.7)\n        (cons ((- b 0.7) 'D) y)\n    \
    \    (cons ((- b 0.0) 'D-) y)\n        (cons (car y))))\n  (sort (append (map\
    \ (fn [x] (if (>= x 7) 'E 'E-0)) y)\n            (reverse y)))\n  (display y)\
    \ (newline)\n  y)\n</code>\n<|/ a dscore=1 tags=scheme,racket,functional-programming\
    \ |>\n<| c |>\nThis is not an answer to the question\n<|/ c |>\n<| a |>\n<code>",
  "  (let ([grades_sum (reduce + grades)])\n    (if (< grades_sum 0)\n        'E\n\
    \        (if (> grades_sum 7.0)\n            'D\n            (if (> grades_sum\
    \ 3.0)\n                'C\n                (if (> grades_sum 2.0)\n         \
    \           'B\n                    (if (> grades_sum 1.0)\n                 \
    \       'A\n                        (if (< grades_sum 0.0)\n                 \
    \           'D-\n                            (if (< grades_sum -1.0)\n       \
    \                         'C-\n                                (if (< grades_sum\
    \ -2.0)\n                                    'B-\n                           \
    \         (if (< grades_sum -3.0)\n                                        'B-\n\
    \                                        (if (< grades_sum 4.0)\n            \
    \                                'A-\n                                       \
    \     (if (< grades_sum 6.0)\n                                               \
    \ 'A+\n                                                (if (< grades_sum 8.0)\n\
    \                                                    'A\n                    \
    \                                (if (< grades_sum 10.0)\n                   \
    \                                     'A \n                                  \
    \                      (if (< grades_sum 12.0)\n                             \
    \                               'A+\n                                        \
    \                    (if (< grades_sum 14.0)\n                               \
    \                                 'A-\n                                      \
    \                          (if (< grades_sum 16.0)\n                         \
    \                                           'A- \n                           \
    \                                         (if (< grades_sum 18.0)\n          \
    \                                                              'A-\n         \
    \                                                               (if (< grades_sum\
    \ 20.0)\n                                                                    \
    \        'A+\n                                                               \
    \             (if (< grades_sum 22.0)\n                                      \
    \                                          'A-\n                             \
    \                                                   (if (< grades_sum 24.0)\n\
    \                                                                            \
    \        'A- \n                                                              \
    \                      (if (< grades_sum 26.0)\n                             \
    \                                                           'A-\n            \
    \                                                            (if (< grades_sum\
    \ 28.0)\n                                                                    \
    \                        'A-\n                                               \
    \                                             (if (< grades_sum 30.0)\n      \
    \                                                                            \
    \              'A-\n                                                         \
    \                                       (if (< grades_sum 32.0)\n            \
    \                                                                            \
    \            'A-\n                                                           \
    \                                         (if (< grades_sum 34.0)\n          \
    \                                                                            \
    \                  'A-\n                                                     \
    \                                                   (if (< grades_sum 36.0)\n\
    \                                                                            \
    \                                'A-\n                                       \
    \                                                                     (if (< grades_sum\
    \ 38.0)\n                                                                    \
    \                                            'A-\n                           \
    \                                                                            \
    \         (if (< grades_sum 40.0)\n                                          \
    \                                                                          'A-\n\
    \                                                                            \
    \                                        (if (< grades_sum 42.0)\n           \
    \                                                                            \
    \                                 'A-\n                                      \
    \                                                                            \
    \      (if (< grades_sum 44.0)\n                                             \
    \                                                                            \
    \   'A-\n                                                                    \
    \                                                        (if (< grades_sum 46.0)\n\
    \                                                                            \
    \                                                                            \
    \        'A-\n                                                               \
    \                                                                            \
    \                     (if (< grades_sum 48.0)\n                              \
    \                                                                            \
    \                                                          'A-\n             \
    \                                                                            \
    \                                                                           (if\
    \ (< grades_sum 50.0)\n                                                      \
    \                                                                            \
    \                                      'A-\n                                 \
    \                                                                            \
    \                                                           (if (< grades_sum\
    \ 52.0)\n                                                                    \
    \                                                                            \
    \                            'A-\n                                           \
    \                     ", "  (if (null? grades)\n      'E\n      (append \n   \
    \     (if (> (car grades) 3.0)\n            (cons 'B 'A+)\n            (cons 'C\
    \ 'A-)\n            (cons 'D 'B+)\n            (cons 'E 'B)\n            (cons\
    \ 'F 'B-)\n            (cons 'G 'C+)\n            (cons 'H 'C)\n            (cons\
    \ 'I 'C-)\n            (cons 'J 'D+)\n            (cons 'K 'D)\n            (cons\
    \ 'L 'D-)\n            (cons 'M 'E)))))\n", "  (define (helper\n           current-gpa\
    \ \n           (grade-sum grades)\n           (letter grades))\n    (cond\n  \
    \    [(< current-gpa grades)\n       (helper (+ current-gpa grades)\n        \
    \       (sum-grades grades)\n               (append letter grades))]\n      [(>\
    \ current-gpa grades)\n       (helper (+ current-gpa grades)\n               (sum-grades\
    \ grades)\n               (append letter (list 'E)))]\n      [else\n       (append\
    \ letter (list current-gpa))]))\n  (helper 0 0 '()))\n", "  (define (f a b)\n\
    \    (if (< a b)\n      '(+ (char (- a b 'A)) 'A)\n      '(if (>= a b)\n     \
    \   (char (- b 'A))\n        'A)))\n  (define (g c d)\n    (if (< c d)\n     \
    \ '(+ (char (- c d 'C)) 'C)\n      '(if (>= c d)\n        (char (- d 'C))\n  \
    \      'C)))\n  (define (h e f)\n    (if (< e f)\n      '(+ (char (- e f 'E))\
    \ 'E)\n      '(if (>= e f)\n        (char (- f 'E))\n        'E)))\n  (map (lambda\
    \ (x)\n         (f x (+ x (/ 100 4))))\n       grades\n       (reverse grades)\n\
    \       (reverse grades)\n       (reverse grades))\n  (map (lambda (x)\n     \
    \    (g x (+ x (/ 100 3))))\n       grades\n       (reverse grades)\n       (reverse\
    \ grades)\n       (reverse grades))\n  (map (lambda (x)\n         (h x (+ x (/\
    \ 100 2))))\n       grades\n       (reverse grades)\n       (reverse grades)\n\
    \       (reverse grades))\n  (map (lambda (x)\n         (h x (+ x (/ 100 1))))\n\
    \       grades\n       (reverse grades)\n       (reverse grades)\n       (reverse\
    \ grades))\n  (map (lambda (x)\n         (h x 'E))\n       grades\n       (reverse\
    \ grades)\n       (reverse grades)\n       (reverse grades))\n  (map (lambda (x)\n\
    \         (h x (+ x (/ 100 0))))\n       grades\n       (reverse grades)\n   \
    \    (reverse grades)\n       (reverse grades))\n  (map char (reverse grades)))\
    \ ; reverse", "  (let* ((avg (/ (apply + (map gpa grades)) 5))\n         (gpa-min\
    \ (min grades))\n         (gpa-max (max grades))\n         (min-diff (- gpa-min\
    \ (- gpa-max gpa)))\n         (delta-diff (/ min-diff 12))\n         (delta-sign\
    \ (if (< delta-diff 0) -1 1))\n         (sum (* delta delta-sign))\n         (gpa-letters\
    \ (cond ((< gpa 4.0) '(A+))\n                            ((< gpa 3.7) '(A))\n\
    \                            ((< gpa 3.3) '(A- ))\n                          \
    \  ((< gpa 3.0) '(B+))\n                            ((< gpa 2.7) '(B))\n     \
    \                       ((< gpa 2.3) '(B- ))\n                            ((<\
    \ gpa 2.0) '(C+))\n                            ((< gpa 1.7) '(C))\n          \
    \                  ((< gpa 1.3) '(C- ))\n                            ((< gpa 1.0)\
    \ '(D+ ))\n                            ((< gpa 0.7) '(D ))\n                 \
    \           ((< gpa 0.0) '(D- ))\n                            (else 'E)))\n  \
    \       (letters (map (lambda (letter)\n                         (+ (* letter\
    \ delta-sign) sum))\n                        gpa-letters))\n         (result (list\
    \ (first letters) (second letters))))\n    result))\n", "  (cond\n    [(> (apply\
    \ - grades) 0) 'A+]\n    [(< (apply - grades) 0) 'A]\n    [(> (apply - grades)\
    \ 0) 'B-]\n    [(< (apply - grades) 0) 'B]\n    [(> (apply - grades) 0) 'C+]\n\
    \    [(< (apply - grades) 0) 'C]\n    [(> (apply - grades) 0) 'C-]\n    [(> (apply\
    \ - grades) 0) 'D+]\n    [(< (apply - grades) 0) 'D]\n    [(> (apply - grades)\
    \ 0) 'D-]\n    [(< (apply - grades) 0) 'E]\n    [else 'F])) ; this should be an\
    \ E\n</code>\n<|/ q |>\n<| c |>\nWhat have you tried so far? What about just looking\
    \ at some existing implementations of grading systems?\n<|/ c |>\n<| c |>\nI cannot\
    \ understand why you have a function that returns a list in the first place. Is\
    \ this supposed to simulate something like \"returning a tuple\"?\n<|/ c |>\n\
    <| c |>\nI cannot understand why you have a function that returns a list in the\
    \ first place. Is this supposed to simulate something like \"returning a tuple\"\
    ? - I do not understand what you are trying to say.\n<|/ c |>\n<| c |>\nIt looks\
    \ like a homework assignment.\n<|/ c |>\n<| c |>\nYes. it is homework. The teacher\
    \ has given us the code for the assignment and we have to use that code to solve\
    \ the problem. I have been trying to use \"return\" in the function and I have\
    \ not been able to get it to work so far. I am just starting out with Racket and\
    \ it is very confusing.\n<|/ c |>\n<| a dscore=1 |>\nA function definition always\
    \ returns a value. If you want to return multiple values from the function, you\
    \ need to have multiple return statements in that function. You can have as many\
    \ return statements as you want, and the last one will be the value returned by\
    \ the function. You should always return a value for every possible branch of\
    \ the conditional statement in your function.\n<code>", "  (cond [(< grades 3.0)\
    \ 'C+]\n        [(< grades 3.7) 'C]\n        [(< grades 3.3) 'B-]\n        [(<\
    \ grades 2.7) 'B]\n        [(< grades 2.3) 'B-]\n        [(< grades 2.0) 'B-]\n\
    \        [(< grades 1.7) 'B]\n        [(< grades 1.3) 'B-]\n        [(< grades\
    \ 1.0) 'B-]\n        [else 'B+])) ; else, just B+", "  (cond [(< grades 4.0 (+\
    \ grades (- 1.0)))\n         'A+']\n        [(< grades 3.7 (+ grades (- 1.0)))\n\
    \         'A']\n        [(< grades 3.3 (+ grades (- 1.0)))\n         'A-']\n \
    \       [(< grades 3.0 (+ grades (- 1.0)))\n         'B+']\n        [(< grades\
    \ 2.7 (+ grades (- 1.0)))\n         'B']\n        [(< grades 2.3 (+ grades (-\
    \ 1.0)))\n         'B-']\n        [(< grades 2.0 (+ grades (- 1.0)))\n       \
    \  'C+']\n        [(< grades 1.7 (+ grades (- 1.0)))\n         'C']\n        [(<\
    \ grades 1.3 (+ grades (- 1.0)))\n         'C-']\n        [(< grades 1.0 (+ grades\
    \ (- 1.0)))\n         'D+']\n        [(< grades 0.7 (+ grades (- 1.0)))\n    \
    \     'D']\n        [(< grades 0.0 (+ grades (- 1.0)))\n         'D-']\n     \
    \   [else 'E']))\n", "  (if (< grades (/ 4.0 1.0))\n      'A+ (/ 4.0 1.0)\n  \
    \    (if (< grades (/ 3.7 3.0))\n          'A (/ 3.7 3.0)\n          'B+ (/ 3.0\
    \ 3.7)\n          'B (/ 3.0 3.3)\n          'C+ (/ 2.0 3.0)\n          'C (/ 2.0\
    \ 2.7)\n          'D+ (/ 1.7 2.0)\n          'D (/ 1.7 1.7)\n          'E)))\n",
  "  (cond ((= grades 0.0) \"F\")\n        ((< grades 1.0) \"F\")\n        ((= grades\
    \ 2.3) \"C+\")\n        ((< grades 2.7) \"C\")\n        ((< grades 3.3) \"C\"\
    )\n        ((= grades 3.9) \"B+\")\n        ((< grades 4.0) \"B\")\n        ((<\
    \ grades 4.4) \"B\")\n        ((< grades 4.7) \"B-\")\n        ((< grades 5.0)\
    \ \"B-\")\n        ((< grades 5.3) \"B-\")\n        ((= grades 5.9) \"B+\")\n\
    \        ((< grades 6.0) \"B\")\n        ((< grades 6.4) \"B\")\n        ((< grades\
    \ 6.7) \"B-\")\n        ((< grades 7.0) \"B-\")\n        ((< grades 7.3) \"B-\"\
    )\n        ((< grades 7.7) \"B-\")\n        ((< grades 8.0) \"B-\")\n        ((<\
    \ grades 8.3) \"B-\")\n        ((< grades 8.7) \"B-\")\n        ((< grades 9.0)\
    \ \"B-\")\n        ((< grades 9.3) \"B-\")\n        ((< grades 9.7) \"B-\")\n\
    \        ((< grades 10.0) \"B-\")\n        ((< grades 10.3) \"B-\")\n        ((<\
    \ grades 10.7) \"B-\")\n        ((< grades 11.0) \"B-\")\n        ((< grades 11.3)\
    \ \"B-\")\n        ((< grades 11.7) \"B-\")\n        ((< grades 12.0) \"B-\")\n\
    \        ((< grades 12.3) \"B-\")\n        ((< grades 12.7) \"B-\")\n        ((<\
    \ grades 13.0) \"B-\")\n        ((< grades 13.3) \"B-\")\n        ((< grades 13.7)\
    \ \"B-\")\n        ((< grades 14.0) \"B-\")\n        ((< grades 14.3) \"B-\")\n\
    \        ((< grades 14.7) \"B-\")\n        ((< grades 15.0) \"B-\")\n        ((<\
    \ grades 15.3) \"B-\")\n        ((< grades 15.7) \"B-\")\n        ((< grades 16.0)\
    \ \"B-\")\n        ((< grades 16.3) \"B-\")\n        ((< grades 16.7) \"B-\")\n\
    \        ((< grades 17.0) \"B-\")\n        ((< grades 17.3) \"B-\")\n", "  (let\
    \ ([a (car grades)])\n    (cond\n      [(<= a 3.0) 'A+]\n      [(<= a 3.7) 'A]\n\
    \      [(<= a 3.3) 'A-]\n      [(<= a 3.0) 'B+]\n      [(<= a 2.7) 'B]\n     \
    \ [(<= a 2.3) 'B-]\n      [(<= a 2.0) 'C+]\n      [(<= a 1.7) 'C]\n      [(<=\
    \ a 1.3) 'C-]\n      [(<= a 1.0) 'D+]\n      [(<= a 0.7) 'D]\n      [(<= a 0.0)\
    \ 'D-]\n      [else 'E]))", "  (cond [(< grades 4.0) 'A+']\n        [(< grades\
    \ 3.7) 'A']\n        [(< grades 3.3) 'A-']\n        [(< grades 3.0) 'B+']\n  \
    \      [(< grades 2.7) 'B']\n        [(< grades 2.3) 'B-']\n        [(< grades\
    \ 2.0) 'C+']\n        [(< grades 1.7) 'C']\n        [(< grades 1.3) 'C-']\n  \
    \      [(< grades 1.0) 'D+']\n        [(< grades 0.7) 'D']\n        [(< grades\
    \ 0.0) 'D-']\n        [else 'E']))\n", "  (let loop ((grades grades)\n       \
    \      (letters '(A B C D)) \n             (letter empty))\n    (if (null? grades)\n\
    \        (reverse letters)\n        (loop (rest grades) (conj letter (car grades))\
    \ (substring (letters letter) (length letter))))))\n", "  (if (empty? grades)\n\
    \      'E\n      (cond [(<= (car grades) 0) 'E]\n            [(< 0 (car grades))\
    \ 'D-]\n            [(< 0 (car grades)) 'D+]\n            [(< 0 (car grades))\
    \ 'B-]\n            [(< 0 (car grades)) 'B+]\n            [(< 0 (car grades))\
    \ 'A-]\n            [else (cond [(< 0 (car grades)) 'C+]\n                   \
    \      [(< 0 (car grades)) 'C]\n                         [(< 0 (car grades)) 'C-]\n\
    \                         [(< 0 (car grades)) 'C+]\n                         [(<\
    \ 0 (car grades)) 'B-]\n                         [(< 0 (car grades)) 'B+]\n  \
    \                       [(< 0 (car grades)) 'A-]\n                         [(<\
    \ 0 (car grades)) 'A+]\n                         [(< 0 (car grades)) 'A]\n   \
    \                      [(< 0 (car grades)) 'A-]\n                         [(<\
    \ 0 (car grades)) 'A+]\n                         [(< 0 (car grades)) 'A]\n   \
    \                      [(< 0 (car grades)) 'A-]\n                         [(<\
    \ 0 (car grades)) 'A+]\n                         [(< 0 (car grades)) 'A]\n   \
    \                      [(< 0 (car grades)) 'A-]\n                         [(<\
    \ 0 (car grades)) 'A+]\n                         [(< 0 (car grades)) 'A]\n   \
    \                      [(< 0 (car grades)) 'A-]\n                         [(<\
    \ 0 (car grades)) 'A+]\n                         [(< 0 (car grades)) 'A]\n   \
    \                      [(< 0 (car grades)) 'A-]\n                         [(<\
    \ 0 (car grades)) 'A+]\n                         [(< 0 (car grades)) 'A]\n   \
    \                      [(< 0 (car grades)) 'A-]\n                         [(<\
    \ 0 (car grades)) 'A+]\n                         [(< 0 (car grades)) 'A]\n   \
    \                      [(< 0 (car grades)) 'A-]\n                         [(<\
    \ 0 (car grades)) 'A+]\n                         [(< 0 (car grades)) 'A]\n   \
    \                      [(< 0 (car grades)) 'A-]\n                         [(",
  "  (define (accumulator x) (+ x x))\n  (let loop ((accumulator '()) (list '())\n\
    \             (grades '()))\n    (cond ((< accumulator 0)\n           (reverse\
    \ accumulator))\n          ((null? (car grades)) (append accumulator list))\n\
    \          ((null? (cdr grades))\n           (loop (accumulator list)\n      \
    \           (cons (car grades)\n                       (loop (accumulator (car\
    \ grades))\n                            (cdr grades))\n                      \
    \ (cdr grades))))\n          (else (loop (accumulator (car grades))\n        \
    \               (append list (list (accumulator (car grades)))\n             \
    \                 (loop (accumulator (car grades))\n                         \
    \           (cdr grades))\n                       (cdr grades))))))\n  (loop '()\
    \ '() grades))\n", "  (define (sum_of_grades grades)\n    (if (null? grades)\n\
    \        'E\n        (+ (car grades)\n           (sum_of_grades (cdr grades)))))\n\
    \  (define (grade_accumulator grade grades)\n    (if (null? grades)\n        grade\n\
    \        (grade_accumulator (car grade)\n                           (cons (sum_of_grades\
    \ grades)\n                                grades))))\n  (define (letter_grades\
    \ grades)\n    (if (null? grades)\n        'E\n        (grade_accumulator (car\
    \ grades)\n                          (cdr grades))))\n  (letter_grades grades))\n",
  "  (letrec ([find_gpa (lambda (x)\n                         (let ([found (find (lambda\
    \ (y) equal? x (gpas y))) (gpas x)])\n                           (cond\n     \
    \                       [(empty? found) 'F]\n                            [(equal?\
    \ found 'S) (cons 'S (numerical_letter_grade (gpas x)))]\n                   \
    \         [(equal? found 'F) (cons 'F (numerical_letter_grade (gpas x)))]\n  \
    \                          [(equal? found 'S) (cons 'S (numerical_letter_grade\
    \ (gpas x)))]\n                            [else (cons 'S (numerical_letter_grade\
    \ (gpas x)))]))])\n    (find_gpa grades))))", "  (cond\n    [(empty? grades) 'E]\n\
    \    [(number? grades) (grade_equation grades)]\n    [(symbol? grades) (grade_equation\
    \ grades)]\n    [else '?]))\n", "  (if (null? grades)\n      'E\n      (if (>\
    \ (car grades) 0) \n          (if (> (quotient (car grades) 4) 0)\n          \
    \    (if (> (quotient (car grades) 4) 0)\n                  (if (> (quotient (car\
    \ grades) 3) 0)\n                      (if (> (quotient (car grades) 3) 0)\n \
    \                         (if (> (quotient (car grades) 2) 0)\n              \
    \                (if (> (quotient (car grades) 2) 0)\n                       \
    \           (if (> (quotient (car grades) 1) 0)\n                            \
    \          (if (> (quotient (car grades) 1) 0)\n                             \
    \             (if (> (quotient (car grades) 0) 0)\n                          \
    \                    (if (> (quotient (car grades) 0) 0)\n                   \
    \                               (cons (char 'A) (numerical_letter_grade (cdr grades)))\n\
    \                                                  (cons (char 'B) (numerical_letter_grade\
    \ (cdr grades)))\n                                                  (cons (char\
    \ 'C) (numerical_letter_grade (cdr grades)))\n                               \
    \                   (cons (char 'D) (numerical_letter_grade (cdr grades)))\n \
    \                                                 (cons (char 'E) (numerical_letter_grade\
    \ (cdr grades)))\n                                                  (cons (char\
    \ 'F) (numerical_letter_grade (cdr grades)))\n                               \
    \                   (cons (char 'G) (numerical_letter_grade (cdr grades)))\n \
    \                                                 (cons (char 'H) (numerical_letter_grade\
    \ (cdr grades)))\n                                                  (cons (char\
    \ 'I) (numerical_letter_grade (cdr grades)))\n                               \
    \                   (cons (char 'J) (numerical_letter_grade (cdr grades)))\n \
    \                                                 (cons (char 'K) (numerical_letter_grade\
    \ (cdr grades)))\n                                                  (cons (char\
    \ 'L) (numerical_letter_grade (cdr grades)))\n                               \
    \                   (cons (char 'M) (numerical_letter_grade (cdr grades)))\n \
    \                                                 (cons (char 'N) (numerical_letter_grade\
    \ (cdr grades)))\n                                                  (cons (char\
    \ 'O) (numerical_letter_grade (cdr grades)))\n                               \
    \                   (cons (char 'P) (numerical_letter_grade (cdr grades)))\n \
    \                                                 (cons (char 'Q) (numerical_letter_grade\
    \ (cdr grades)))\n                                                  (cons (char\
    \ 'R) (numerical_letter_grade (cdr grades)))\n                               \
    \                   (cons (char 'S) (numerical_letter_grade (cdr grades)))\n \
    \                                                 (", "  (define (helper grades\
    \ index)\n    (cond [(< grades (car grades))\n           (cond [(< index (length\
    \ grades))\n                  (cons grades (helper (cdr grades) (+ index 1)))]\n\
    \                  [else\n                  (cons grades empty)]]\n          [else\
    \ (cons (car grades) empty)]]))\n  (helper grades 0))\n", "  (let ((sum (reduce\
    \ + (map grade grades))))\n    (let ((grade (/ (- sum 0) (length grades))))\n\
    \      (cond [(<= grade 4.0)\n             'A+]\n            [(< grade 4.0)\n\
    \             (cond [(<= grade 3.7)\n                    'A]\n               \
    \   [(< grade 3.7)\n                   (cond [(<= grade 3.3)\n               \
    \            'A-]\n                         [(< grade 3.3)\n                 \
    \        (cond [(<= grade 3.0)\n                                'B+]\n       \
    \                    [(< grade 3.0)\n                            (cond [(<= grade\
    \ 2.7)\n                                    'B]\n                            \
    \   [(< grade 2.7)\n                               (cond [(<= grade 2.3)\n   \
    \                                    'B-]\n                                 [(<\
    \ grade 2.3)\n                                  (cond [(<= grade 2.0)\n      \
    \                                  'C+]\n                                   [(<\
    \ grade 2.0)\n                                    (cond [(<= grade 1.7)\n    \
    \                                        'C]\n                               [(<\
    \ grade 1.7)\n                               (cond [(<= grade 1.3)\n         \
    \                              'C-]\n                                 [(< grade\
    \ 1.3)\n                                  (cond [(<= grade 1.0)\n            \
    \                            'D+]\n                               [(< grade 1.0)\n\
    \                               (cond [(<= grade 0.7)\n                      \
    \                 'D]\n                               [else 'D-]))]))]))])", " \
    \ (let ([grades_table (list\n                    ['>3.7' 'A+']\n             \
    \       ['>3.3' 'A']\n                    ['>3.0' 'A-']\n                    ['>2.7'\
    \ 'B+']\n                    ['>2.3' 'B']\n                    ['>2.0' 'B-']\n\
    \                    ['>1.7' 'C+']\n                    ['>1.3' 'C']\n       \
    \             ['>1.0' 'C-']\n                    ['>0.7' 'D+']\n             \
    \       ['>0.0' 'D']\n                    ['>0.0' 'D-']\n                    ['>0.0'\
    \ 'E']\n                    ['>0.0' 'E']\n                    ['>0.0' 'E']\n \
    \                   ['>0.0' 'E']\n                    ['>0.0' 'E']\n         \
    \           ['>0.0' 'E']])\n        grade_sum (apply + grades)]\n    (let loop\
    \ ((n 0)\n              (sum 0)\n              (result '()))\n      (cond [(<\
    \ n grades_table?) (loop (+ n 1) sum result)]\n            [(>= n grades_table?)\
    \ (loop (+ n 1) sum result)]\n            [else (loop (+ n 1) (+ sum (grade_sum\
    \ grades_table n)) (conj result (grade_sum grades_table n))))]\n      result)))\n",
  "  (define (helper grade sum)\n    (cond\n      [(> (- grade sum) 0) (list '+ (list\
    \ '- '-) (list '* '-) (list '/ '-) (list '* '-))]\n      [(< grade sum) (list\
    \ '+ ' (list '- '-) (list '* '-) (list '/ '-) (list '* '+))]\n      [(= grade\
    \ sum) (list '+ ' (list '- '-) (list '* '+) (list '/ '+) (list '* '+))]\n    \
    \  [(< grade sum) (list '+ ' (list '- '+) (list '* '+) (list '/ '+) (list '* '+))]\n\
    \      [(> grade sum) (list '+ ' (list '- '+) (list '* '+) (list '/ '+) (list\
    \ '* '-))]\n      [(< grade sum) (list '+ ' (list '- '-) (list '* '+) (list '/\
    \ '+) (list '* '-))]\n      [(> grade sum) (list '+ ' (list '- '-) (list '* '-)\
    \ (list '/ '+) (list '* '+))]\n      [(= grade sum) (list '+ ' (list '- '-) (list\
    \ '* '-) (list '/ '+) (list '* '-))]\n      [(< grade sum) (list '+ ' (list '-\
    \ '+) (list '* '-) (list '/ '+) (list '* '-))]\n      [(> grade sum) (list '+\
    \ ' (list '- '+) (list '* '-) (list '/ '+) (list '* '+))]\n      [(= grade sum)\
    \ (list '+ ' (list '- '+) (list '* '+) (list '/ '+) (list '* '+))]\n      [(<\
    \ grade sum) (list '+ ' (list '- '+) (list '* '+) (list '/ '+) (list '* '+))]\n\
    \      [(> grade sum) (list '+ ' (list '- '-) (list '* '+) (list '/ '+) (list\
    \ '* '+))]\n      [(= grade sum) (list '+ ' (list '- '+) (list '* '+) (list '/\
    \ '+) (list '* '+))]\n      [(< grade sum) (list '+ ' (list '- '-) (list '* '-)\
    \ (list '/ '-) (list ", "  (let* ((letters '(A B B- C C+ D D+ E))\n         (gpa\
    \ grades))\n    (filter gpa (lambda (g)\n                (member (- g gpa) (length\
    \ letters))))\n    letters))\n</code>\n<|/ a tags=scheme dscore=1 |>\n<| c |>\n\
    Why did you use an \"and\" instead of \"or\" in your filter?  I'm confused why\
    \ it works.\n<|/ c |>\n<| c |>\nBecause if there are no `gpa`s that satisfy the\
    \ criteria of the `filter`, then `letters` would be empty, and thus `(filter gpa\
    \ (lambda (g) (member (- g gpa) (length letters)))) letters)` would be `()`, meaning\
    \ that the empty list would not be returned by the `filter` function. The `and`\
    \ means that both `gpa`s must exist in order for the letters to be returned.\n\
    <|/ c |>\n<| c |>\nThis code returns wrong results for some inputs: `(grade_equation\
    \ [3.4, 3.2, 2.3, 3.5, 3.7, 4.4])` returns \"B C C+ D D+ E\" which is wrong. \
    \ It should be \"B C C-\".\n<|/ c |>\n<| a dscore=0 |>\nHere's another way that\
    \ doesn't use filter, sort, and member:\n<code>", "  (let ([x 'z])\n    (define\
    \ (loop [i 0] [grades grades])\n      (if (null? grades) (list)\n        (if (<=\
    \ i (length grades)) (cons (char x i) (loop (+ i 1) (cdr grades))) \n        (loop\
    \ (+ i 1) (cdr grades))))))\n    (loop 1 grades)))\n", "  (if (null? grades) \n\
    \      'E\n      (let ((grade (car grades))\n            (gpa (/ (car grades)\
    \ 4.0)))\n        (cond ((< gpa 3.7)\n               `(~(if (< gpa 3.3) 'A `(`(B-)))\n\
    \               `(~(if (< gpa 2.3) 'B `(`(B-)))\n               `(~(if (< gpa\
    \ 1.3) 'C `(`(B-)))\n               `(~(if (< gpa 0.7) 'C `(`(B-)))\n        \
    \       `(~(if (< gpa 0.0) 'C `(`(B-)))\n               `(~(if (< gpa -1.0) 'C\
    \ `(`(B-)))\n               `(~(if (< gpa -2.0) 'C `(`(B-)))\n               `(~(if\
    \ (< gpa -3.0) 'C `(`(B-)))\n               `(~(if (< gpa -3.7) 'C `(`(B-)))\n\
    \               `(~(if (< gpa -4.0) 'C `(`(B-)))\n               `(~(if (< gpa\
    \ -4.7) 'C `(`(B-)))\n               `(~(if (< gpa -5.0) 'C `(`(B-)))\n      \
    \         `(~(if (< gpa -5.7) 'C `(`(B-)))\n               `(~(if (< gpa -6.0)\
    \ 'C `(`(B-)))\n               `(~(if (< gpa -6.7) 'C `(`(B-)))\n            \
    \   `(~(if (< gpa -7.0) 'C `(`(B-)))\n               `(~(if (< gpa -7.7) 'C `(`(B-)))\n\
    \               `(~(if (< gpa -8.0) 'C `(`(B-)))\n               `(~(if (< gpa\
    \ -8.7) 'C `(`(B-)))\n               `(~(if (< gpa -9.0) 'C `(`(B-)))\n      \
    \         `(~(if (< gpa -9.7) 'C `(`(B-)))\n               `(~(if (< gpa -10.0)\
    \ 'C `(`(B-)))\n               `(~(if (< gpa -10.7) 'C `(`(B-)))\n           \
    \    `(~(if (< gpa -11.0) 'C `(`(B-)))\n               `(~(if (< gpa -11.7) 'C\
    \ `(`(B-)))\n               `(~(if (< gpa -12.0) 'C `(`(B-)))\n              \
    \ `(~(if (< gpa -12.7) 'C `(`(B-)))", "  (let* ((grades-min (apply min grades))\n\
    \         (grades-max (apply max grades))\n         (grades-length (- (length\
    \ grades) 1)))\n    (cond\n      [(< grades-min 0) 'A-']\n      [(< grades-max\
    \ 4) 'A-']\n      [(< grades-max 3) 'A-']\n      [(< grades-max 2) 'A-']\n   \
    \   [(< grades-max 1) 'A-']\n      [(< grades-max 0) 'B-']\n      [(< grades-max\
    \ 5) 'B-']\n      [(< grades-max 4) 'B-']\n      [(< grades-max 3) 'B-']\n   \
    \   [(< grades-max 2) 'B-']\n      [(< grades-max 1) 'B-']\n      [(< grades-max\
    \ 0) 'B-']\n      [(< grades-max 5) 'B-']\n      [(< grades-max 4) 'B-']\n   \
    \   [(< grades-max 3) 'B-']\n      [(< grades-max 2) 'B-']\n      [(< grades-max\
    \ 1) 'B-']\n      [(< grades-max 0) 'B-']\n      [(< grades-max 5) 'B-']\n   \
    \   [(< grades-max 4) 'B-']\n      [(< grades-max 3) 'B-']\n      [(< grades-max\
    \ 2) 'B-']\n      [(< grades-max 1) 'B-']\n      [(< grades-max 0) 'B-']\n   \
    \   [(< grades-max 5) 'B-']\n      [(< grades-max 4) 'B-']\n      [(< grades-max\
    \ 3) 'B-']\n      [(< grades-max 2) 'B-']\n      [(< grades-max 1) 'B-']\n   \
    \   [(< grades-max 0) 'B-']\n      [(< grades-max 5) 'B-']\n      [(< grades-max\
    \ 4) 'B-']\n      [(< grades-max 3) 'B-']\n      [(< grades-max 2) 'B-']\n   \
    \   [(< grades-max 1) 'B-']\n      [(< grades-max 0) 'B-']\n      [(< grades-max\
    \ 5) 'B-']\n      [(< grades-max 4) 'B-']\n      [(< grades-max 3) 'B-']\n   \
    \   [(< grades-max 2) 'B-']\n      [(< grades-max 1) 'B-']\n      [(< grades-max\
    \ 0) 'B-']\n      [(< grades-max 5) 'B-']\n      [(", "  (let loop ((list '())\
    \ (n 0))\n    (if (empty? grades)\n        list\n        (loop (cons (modulo n\
    \ 100)\n                  (letters (modulo (quotient n 100) 26)))\n          \
    \    (+ 1 (modulo (quotient n 100) 100))))))\n", "  (cond ((= grades 0.0) 'D)\n\
    \        ((= grades 0.1) 'E)\n        ((< grades 0.9) 'B-)\n        ((< grades\
    \ 0.8) 'B-)\n        ((< grades 0.7) 'B-)\n        ((< grades 0.6) 'B-)\n    \
    \    ((< grades 0.5) 'B-)\n        ((< grades 0.4) 'B-)\n        ((< grades 0.3)\
    \ 'B-)\n        ((< grades 0.2) 'B-)\n        ((< grades 0.1) 'B-)\n        ((<\
    \ grades 0.0) 'B-)\n        ((< grades -0.0) 'B-)\n        ((< grades -0.1) 'B-)\n\
    \        ((< grades -0.2) 'B-)\n        ((< grades -0.3) 'B-)\n        ((< grades\
    \ -0.4) 'B-)\n        ((< grades -0.5) 'B-)\n        ((< grades -0.6) 'B-)\n \
    \       ((< grades -0.7) 'B-)\n        ((< grades -0.8) 'B-)\n        ((< grades\
    \ -0.9) 'B-)\n        ((< grades -1.0) 'B-)\n        ((< grades -2.0) 'B-)\n \
    \       ((< grades -3.0) 'B-)\n        ((< grades -4.0) 'B-)\n        ((< grades\
    \ -5.0) 'B-)\n        ((< grades -6.0) 'B-)\n        ((< grades -7.0) 'B-)\n \
    \       ((< grades -8.0) 'B-)\n        ((< grades -9.0) 'B-)\n        ((< grades\
    \ -10.0) 'B-)\n        ((< grades -11.0) 'B-)\n        ((< grades -12.0) 'B-)\n\
    \        ((< grades -13.0) 'B-)\n        ((< grades -14.0) 'B-)\n        ((< grades\
    \ -15.0) 'B-)\n        ((< grades -16.0) 'B-)\n        ((< grades -17.0) 'B-)\n\
    \        ((< grades -18.0) 'B-)\n        ((< grades -19.0) 'B-)\n        ((< grades\
    \ -20.0) 'B-)\n        ((< grades -21.0) 'B-)\n        ((< grades -22.0) 'B-)\n\
    \        ((< grades -23.0) 'B-)", "  (let*\n      ((sum (reduce + grades))\n \
    \      (count (length grades))\n       (base 'A)\n       (result (make-array (quotient\
    \ count 6) '(list base base base base base base))))\n    (dotimes (i count)\n\
    \      (set! result (append result (list grades (- sum i))))))\n  result)\n",
  "  (define (find-greater-than xs y)\n    (define (find xs y)\n      (if (null? xs)\n\
    \          (if (< y (car xs))\n              (list xs)\n              (list null))\n\
    \          (if (= (car xs) y)\n              (list xs)\n              (find (cdr\
    \ xs) y))))\n    (map (lambda (x)\n           (map (lambda (y)\n             \
    \      (cond [(null? y) (list null)]\n                         [(< (car x) y)\
    \ (list 'A)\n                           (< y (cadr x)) (list 'B)]\n          \
    \               [(< y (cadr x)) (list 'B-) \n                           (< x (car\
    \ x)) (list 'C)]\n                         [(> y (cadr x)) (list 'C-)\n      \
    \                     (> (car x) y) (list 'D)]\n                         [(> (car\
    \ x) y) (list 'D)\n                           (< (cadr x) y) (list 'E)]\n    \
    \                     [else (list 'F)])))\n          (find grades x)))\n  )\n\
    \  (find-greater-than grades 0))\n", "  (cond\n    [(null? grades) 'D-]\n    [(<=\
    \ (first grades) 4.0) 'A+]\n    [(< first grades 3.7) 'A]\n    [(< first grades\
    \ 3.3) 'A-]\n    [(< first grades 3.0) 'B+]\n    [(< first grades 2.7) 'B]\n \
    \   [(< first grades 2.3) 'B-]\n    [(< first grades 2.0) 'C+]\n    [(< first\
    \ grades 1.7) 'C]\n    [(< first grades 1.3) 'C-]\n    [(< first grades 1.0) 'D+]\n\
    \    [(< first grades 0.7) 'D]\n    [(< first grades 0.0) 'D-]\n    [else 'E]\n\
    \    )\n  )\n", "  (let ((g (car grades))\n        (w (cdr grades))\n        (grade_map\
    \ '(A A B B C C C D D D E E E E F)))\n    (if (null? grades)\n      'E\n     \
    \ (if (> (- g w) 3.0)\n          (if (> (- g w) 2.5)\n              (if (> (-\
    \ g w) 2.0)\n                  (if (> (- g w) 1.7)\n                      (if\
    \ (> (- g w) 1.0)\n                          (if (> (- g w) 0.7) 'D (if (> (-\
    \ g w) 0.0) 'D 'E 'F))\n                      'F\n                  )\n      \
    \        'E\n          )\n      'F\n    )\n  )\n)\n", "  (define (grade_function\
    \ gpa letter)\n    (let ([letter-value 'A])\n      (cond [(<= gpa 4.0)\n     \
    \        (cons letter letter-value)\n             (set! letter-value (cons letter\
    \ 'A+))]\n            [(< gpa 3.7)\n             (cons letter letter-value)\n\
    \             (set! letter-value (cons letter 'A-))]\n            [(< gpa 3.3)\n\
    \             (cons letter letter-value)\n             (set! letter-value (cons\
    \ letter 'B+))]\n            [(< gpa 3.0)\n             (cons letter letter-value)\n\
    \             (set! letter-value (cons letter 'B))]\n            [(< gpa 2.7)\n\
    \             (cons letter letter-value)\n             (set! letter-value (cons\
    \ letter 'B-))]\n            [(< gpa 2.3)\n             (cons letter letter-value)\n\
    \             (set! letter-value (cons letter 'B+))]\n            [(< gpa 2.0)\n\
    \             (cons letter letter-value)\n             (set! letter-value (cons\
    \ letter 'C+))]\n            [(< gpa 1.7)\n             (cons letter letter-value)\n\
    \             (set! letter-value (cons letter 'C))]\n            [(< gpa 1.3)\n\
    \             (cons letter letter-value)\n             (set! letter-value (cons\
    \ letter 'C-))]\n            [(< gpa 1.0)\n             (cons letter letter-value)\n\
    \             (set! letter-value (cons letter 'D+))]\n            [(< gpa 0.7)\n\
    \             (cons letter letter-value)\n             (set! letter-value (cons\
    \ letter 'D))]\n            [(< gpa 0.0)\n             (cons letter letter-value)\n\
    \             (set! letter-value (cons letter 'D-))]\n            [(= gpa 0.0)\n\
    \             (cons letter letter-value)\n             (set! letter-value (cons\
    \ letter 'E))]\n            [else\n             letter-value]))\n    (map (lambda\
    \ (letter graded-letter)\n           (cons letter graded-letter)) (list (grade_function\
    \ (car grades) 'A)) \n           (grade_function (car grades) 'A+)))\n", "  (if\
    \ (null? grades)\n      'E\n      (let ([number (first grades)])\n        (if\
    \ (> number 4.0)\n            (cond [(< number 3.7)\n                    (cond\
    \ [(< number 3.3)\n                            (cond [(< number 3.0)\n       \
    \                             (cond [(< number 2.7)\n                        \
    \                    (cond [(< number 2.3)\n                                 \
    \                   (cond [(< number 2.0)\n                                  \
    \                          (cond [(< number 1.7)\n                           \
    \                                         (cond [(< number 1.3)\n            \
    \                                                                (cond [(< number\
    \ 1.0)\n                                                                     \
    \               (cond [(< number 0.7)\n                                      \
    \                                                      (cond [(< number 0.0)\n\
    \                                                                            \
    \                        (cons 'A- (numerical_letter_grade (rest grades)))))\n\
    \                                                                    (cons 'B+\
    \ (numerical_letter_grade (rest grades)))))\n                                \
    \                    (cons 'C (numerical_letter_grade (rest grades)))))\n    \
    \                                (cons 'C-' (numerical_letter_grade (rest grades)))))\n\
    \                            (cons 'B-' (numerical_letter_grade (rest grades)))))\n\
    \                    (cons 'B+ (numerical_letter_grade (rest grades)))))\n   \
    \         (cons 'C (numerical_letter_grade (rest grades)))))\n        (cons 'A-'\
    \ (numerical_letter_grade (rest grades))))))\n", "  (define (add x y)\n    (if\
    \ (< x y)\n        (cons (char-code (- y x)) (cons '+ (car (list x y))))\n   \
    \     '()))\n\n  (define (subtract x y)\n    (if (< x y)\n        (cons (char-code\
    \ (- y x)) (cons '- (car (list x y))))\n        '()))\n\n  (define (divide x y)\n\
    \    (cond (> y 0)\n          (cons (char-code (/ y x)) (cons '/ (car (list x\
    \ y))))\n          (cons (char-code (/ x y)) (cons '/ (car (list x y))))\n   \
    \       (cons (char-code (/ y x)) (cons '/ (car (list x y))))\n          (cons\
    \ (char-code (- x y)) (cons '-)))\n\n  (define (multiply x y)\n    (cond ((> y\
    \ 0)\n           (cons (char-code (* y x)) (cons '* (car (list x y))))\n     \
    \      (cons (char-code (* x y)) (cons '* (car (list x y))))\n           (cons\
    \ (char-code (* y x)) (cons '* (car (list x y))))\n           (cons (char-code\
    \ (+ x y)) (cons '+ (car (list x y))))\n           0))\n\n  (define (negative)\n\
    \    (cond ((= x 0)\n           (cons '- '0))\n          (else\n           (cons\
    \ '- '(- x 1)))))\n\n  (define (add-to-letter grade letter)\n    (cond ((char-code\
    \ (> grade 0))\n           (cond ((char-code (< letter 0))\n                 \
    \  (cons '+ (cons '- letter)))\n                 (else\n                   (cons\
    \ '+ (cons '- letter))))\n          (else\n           (cons '+ letter))))\n  (let\
    \ loop ((x 0) (y 0) (letter ()))\n    (if (< x y)\n        (cons (char-code (-\
    \ x y)) letter)\n        (loop (+ x 1) (+ y 1) (add-to-letter (car grades) letter)))))\n",
  "  (cond\n    [(empty? grades) 'E]\n    [(> first grades) \n     (cond\n       [(<\
    \ second grades) \n        'D-\n       (< second grades) \n        'D]\n     \
    \  [(> second grades) \n        'B-\n        (> second grades) \n        'B]\n\
    \       [(< second grades) \n        'A-\n        (< second grades) \n       \
    \ 'A]\n       [(> second grades) \n        'A-\n        (> second grades) \n \
    \       'A]\n       [else \n        'A-]\n       [(> first grades) \n        'B-\n\
    \        (> first grades) \n        'B]\n       [(< first grades) \n        'B-\n\
    \        (< first grades) \n        'B]\n       [else \n        'B-])]\n    [(>\
    \ first grades) \n     (cond\n       [(< second grades) \n        'D\n       (<\
    \ second grades) \n        'D]\n       [(> second grades) \n        'B\n     \
    \   (> second grades) \n        'B]\n       [(< second grades) \n        'A\n\
    \        (< second grades) \n        'A]\n       [(> second grades) \n       \
    \ 'A\n        (> second grades) \n        'A]\n       [else \n        'A]\n  \
    \     [(> first grades) \n        'B\n        (> first grades) \n        'B]\n\
    \       [(< first grades) \n        'B\n        (< first grades) \n        'B]\n\
    \       [else \n        'B])]\n    [(< first grades) \n     (cond\n       [(>\
    \ second grades) \n        'B\n        (> second grades) \n        'B]\n     \
    \  [(< second grades) \n        'B\n        (< second grades) \n        'B]\n\
    \       [(> second grades) \n        'A\n        (> second grades) \n        'A]\n\
    \       [(< second grades) \n        'A\n        (< second grades) \n        'A]\n\
    \       [else \n        'A]\n       [(> first grades) \n        'B\n        (>\
    \ first grades) \n        'B]\n       [(< first grades) \n        'B\n       \
    \ (< first grades) \n        'B]\n       [else \n        'B])]\n    [else (cons\
    \ 'A-)]))\n", "  (define (helper gpa letters)\n    (cond [(< gpa 4.0) (cons letters\
    \ 'A+)]\n          [(< gpa 3.7) (cons letters 'A)]\n          [(< gpa 3.3) (cons\
    \ letters 'A-')]\n          [(< gpa 3.0) (cons letters 'B+')]\n          [(< gpa\
    \ 2.7) (cons letters 'B)]\n          [(< gpa 2.3) (cons letters 'B-')]\n     \
    \     [(< gpa 2.0) (cons letters 'C+')]\n          [(< gpa 1.7) (cons letters\
    \ 'C)]\n          [(< gpa 1.3) (cons letters 'C-')]\n          [(< gpa 1.0) (cons\
    \ letters 'D+')]\n          [(< gpa 0.7) (cons letters 'D)]\n          [(< gpa\
    \ 0.0) (cons letters 'D-')]\n          [(< gpa 0.0) letters]\n          [(> gpa\
    \ 0.0) letters]\n          [(< gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n\
    \          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(>\
    \ gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n\
    \          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(>\
    \ gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n\
    \          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(>\
    \ gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n\
    \          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(>\
    \ gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n\
    \          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(>\
    \ gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n\
    \          [(> gpa 0.0) letters]\n          [(> gpa 0.0) letters]\n          [(>\
    \ gpa 0.0) letters]\n          [(> ", "  (let ((letter \"\"))\n    (define (loop\
    \ i grades)\n      (cond ((null? grades) (set! letter (car grades)))\n       \
    \     ((>= (first grades) (first i))\n             (loop (rest i) (rest grades)))\n\
    \            (else (loop (+ i 1) (rest grades)))))\n    (loop 1 grades)\n    letter))\n",
  "  (let loop ((sum 0) (grades grades)\n             (letter \"E\") (i 0))\n    (cond\n\
    \      [(empty? grades) '()]\n      [(< i (length (first grades))) \n       (let\
    \ ((last-grade (first grades))\n             (last-gpa (second-last grades)))\n\
    \         (loop (+ sum last-gpa) (subseq grades i)\n               (+ letter last-grade)\
    \ (inc i)))]\n      [else (loop (+ sum grades) (subseq grades i)\n           \
    \      (+ letter grade) (inc i))]))))\n", "  (let* ((sum (+ grades 0))\n     \
    \    (count (length grades))\n         (average (/ sum count)))\n    (let* ((percent\
    \ (* 10 average))\n           (letter_grade (cond [(<= percent 3.7) 'A+]\n   \
    \                             [(<= percent 3.3) 'A]\n                        \
    \        [(<= percent 3.0) 'A-]\n                                [(<= percent\
    \ 2.7) 'B+]\n                                [(<= percent 2.3) 'B]\n         \
    \                       [(<= percent 2.0) 'B-]\n                             \
    \   [(<= percent 1.7) 'C+]\n                                [(<= percent 1.3)\
    \ 'C]\n                                [(<= percent 1.0) 'C-]\n              \
    \                  [(<= percent 0.7) 'D+]\n                                [(<=\
    \ percent 0.0) 'D]\n                                [else 'D-]\n             \
    \                  )))\n      (list (string-append (string letter_grade) \" \"\
    ))))\n</code>\n<|/ a |>\n<| c |>\nWell done for solving it yourself. Well done.\
    \ +1 For being a good teacher. I was thinking about writing a similar answer but\
    \ you were faster. :D\n<|/ c |>\n<| c |>\nThe teacher's not gonna give you the\
    \ code. He gave you a list of GPAs for some students and you have to write a function\
    \ that outputs a list of letter grades using the following table:\n\nGPA |   \
    \ Letter grade\n4.0                A+\n>3.7                A \n>3.3          \
    \      A- \n>3.0                B+\n>2.7                B \n>2.3             \
    \   B-\n>2.0                C+\n>1.7                C\n>1.3                C-\n\
    >1.0                D+ \n>0.7                D \n>0.0                D-\n0.0 \
    \               E\n\nExample:\n", "  (if (null? grades)\n      'E\n      (if (null?\
    \ (cdr grades))\n          (car grades)\n          (let* ((grade (car grades))\n\
    \                 (next_grade (cadr grades))\n                 (next_next_grade\
    \ (caddr grades)))\n            (cond\n              [(< grade next_grade) \n\
    \               (cons (char->list (car grades))\n                     (numerical_letter_grade\
    \ (cons next_grade (cons next_next_grade 'E))))]\n              [else (cons (char->list\
    \ (car grades))\n                         (numerical_letter_grade (cons next_grade\
    \ next_next_grade))))]\n              [(< next_grade next_next_grade)\n      \
    \         (cons (char->list (car grades))\n                     (numerical_letter_grade\
    \ (cons next_next_grade (cons next_grade 'E))))]\n              [else (cons (char->list\
    \ (car grades))\n                         (numerical_letter_grade (cons next_grade\
    \ next_next_grade))))]\n              [(< next_next_grade grade)\n           \
    \    (cons (char->list (car grades))\n                     (numerical_letter_grade\
    \ (cons next_next_grade (cons (cddr grades) 'E))))]\n              [else (cons\
    \ (char->list (car grades))\n                         (numerical_letter_grade\
    \ (cons next_next_grade (cons (cddr grades) (car grades))))))]\n             \
    \ [else (cons (char->list (car grades))\n                         (numerical_letter_grade\
    \ (cons (cddr grades) (car grades))))))]\n              [(< grade next_next_grade)\n\
    \               (cons (char->list (car grades))\n                     (numerical_letter_grade\
    \ (cons next_next_grade (cons (cddr grades) (car grades))))))]\n             \
    \ [else (cons (char->list (car grades))\n                         (numerical_letter_grade\
    \ (cons (cddr grades) (car grades))))))]\n              [else (cons (char->list\
    \ (car grades))\n                         (numerical_letter_grade (cons (cddr\
    \ grades) (car grades))))))]\n              [else (cons (char->list (car grades))\n\
    \                         (numerical_letter_grade (cons (cddr grades) (car grades))))))]\n\
    \              [else (cons (char->", "  (let ((num-grade 0))\n    (for/fold ([grade-range\
    \ (build-list 8 0)]\n              ([grade (car grades)])\n              ([remainder\
    \ (cdr grades)])\n              ([remainder-diff 0])\n              ([grade-diff\
    \ 0])\n              ([i 0])\n              ([j 0])\n              ([k 0])\n \
    \             ([grade (car grades)])\n              ([remainder (cdr grades)])\n\
    \              ([remainder-diff 0])\n              ([grade-diff 0])\n        \
    \      ([i 0])\n              ([j 0])\n              ([k 0])\n              ([grade\
    \ (car grades)])\n              ([remainder (cdr grades)])\n              ([remainder-diff\
    \ 0])\n              ([grade-diff 0])\n              ([i 0])\n              ([j\
    \ 0])\n              ([k 0]))\n          ((< grade grade-range)\n           (set!\
    \ remainder-diff (- remainder grade))\n           (set! grade-diff (- grade grade-range))\n\
    \           (set! i 0)\n           (set! j 0)\n           (set! k 0)\n       \
    \    (set! num-grade (+ (* i grade) grade-diff))\n           (set! grade-range\
    \ (+ remainder grade))\n           (set! i 1)\n           (set! j 0)\n       \
    \    (set! k 0))\n    (+ (numerical_letter num-grade)\n       (if (> remainder-diff\
    \ 0)\n           (numerical_letter grade-range)\n           '()))))\n", "  (define\
    \ (sum x y)\n    (+ x y))\n  (define (division x y)\n    (/ x y))\n  (define (square\
    \ x)\n    (* x x))\n  (define (floor x)\n    (/ x 1))\n  (define (absolute x)\n\
    \    (if (< x 0)\n        x\n        (- x)))\n  (define (subtract x y)\n    (if\
    \ (< x y)\n        x\n        y))\n  (define (multiply x y)\n    (if (< y 0)\n\
    \        x\n        (* x y)))\n  (define (add x y)\n    (if (< x y)\n        x\n\
    \        y))\n  (define (division_table grade points)\n    (let ((table_rows 0))\n\
    \      (loop for (x grade) \n            while (- (- points table_rows) (- x grade))\
    \ > 0 \n            collect (+ table_rows 1)))\n    (let* ((grade_name 'A+)(grade_points\
    \ 4)\n           (grade_letter 'A)(grade_letter_points 0)\n           (next_grade_name\
    \ 'B)(next_grade_points 0)\n           (next_grade_letter 'B)(next_grade_letter_points\
    \ 0)\n           (grade_letter_name 'A)(grade_letter_letter_points 0)\n      \
    \     (next_grade_letter_name 'B)(next_grade_letter_letter_points 0)\n       \
    \    (grade_letter_letter_name 'A)(grade_letter_letter_letter_points 0)\n    \
    \       (next_grade_letter_letter_name 'B)(next_grade_letter_letter_letter_points\
    \ 0))\n      (loop for grade in grades \n            while grade < 0.01 \n   \
    \         collect (list (grade grade_name)(grade grade_points)\n             \
    \             (grade grade_letter)(grade grade_letter_points)\n              \
    \            (grade next_grade_name)(grade next_grade_points)\n              \
    \            (grade next_grade_letter)(grade next_grade_letter_points)\n     \
    \                     (grade grade_letter_name)(grade grade_letter_letter_points)\n\
    \                          (grade next_grade_letter_name)(grade next_grade_letter_letter_points)\n\
    \                          (grade grade_letter_letter_name)(grade grade_letter_letter_letter_points)\n\
    \                          (grade next_grade_letter_letter_name)(grade next_grade_letter_letter_letter_points))))))\n\
    \n  (let ((letter_grades '(A B C D E)))\n    (loop for (grade points) in grades\n\
    \      collect (list (grade letter)(grade points) (list '(list '(list '(list '(list\
    \ '(list ", "  (letrec\n    (\n      [(g (lambda (x y) (if y 'B+ (- x y))\n  \
    \                    (if (< y 4.0) 'A- (/ x 4.0)))\n       (c (lambda (x y) (if\
    \ (< y 3.3) 'A- (/ x 3.3)))\n       (b (lambda (x y) (if (< y 3.0) 'B+ (- x y)))\n\
    \       (a (lambda (x y) (if (< y 2.3) 'B- (/ x 2.3)))\n       (d (lambda (x y)\
    \ (if (< y 2.0) 'C+ (- x y)))\n       (c (lambda (x y) (if (< y 1.7) 'C (/ x 1.7)))\n\
    \       (b (lambda (x y) (if (< y 1.3) 'C- (/ x 1.3)))\n       (a (lambda (x y)\
    \ (if (< y 1.0) 'D+ (- x y)))\n       (d (lambda (x y) (if (< y 0.7) 'D (/ x 0.7)))\n\
    \       (b (lambda (x y) (if (< y 0.0) 'D- (/ x 0.0)))\n       (a (lambda (x y)\
    \ (if (< y 0.0) 'E)))]\n    )\n      (map (lambda (grade i)\n            (g (grades\
    \ i) grade))\n           grades\n           grades)\n      (map (lambda (grade\
    \ i)\n            (c grade (i + 1))\n           grades\n           grades)\n \
    \     (map (lambda (grade i)\n            (b grade (i + 2))\n           grades\n\
    \           grades)\n      (map (lambda (grade i)\n            (a grade (i + 3))\n\
    \           grades\n           grades)\n      (map (lambda (grade i)\n       \
    \     (d grade (i + 4))\n           grades\n           grades)\n      (map (lambda\
    \ (grade i)\n            (c grade (i + 5))\n           grades\n           grades)\n\
    \      (map (lambda (grade i)\n            (b grade (i + 6))\n           grades\n\
    \           grades)\n      (map (lambda (grade i)\n            (a grade (i + 7))\n\
    \           grades\n           grades)\n      (map (lambda (grade i)\n       \
    \     (d grade (i + 8))\n           grades\n           grades)\n      (map (lambda\
    \ (grade i)\n            (c grade (i + 9))\n           grades\n           grades)\n\
    \      (map (lambda (grade i)\n            (b grade (i + 10))\n", "  (if (null?\
    \ (car grades))\n      'E\n      (cond\n        ((< 4.5 grades) (list 'A+))\n\
    \        ((< 3.5 grades) (list 'A))\n        ((< 3.0 grades) (list 'A-))\n   \
    \     ((< 2.5 grades) (list 'B+))\n        ((< 2.0 grades) (list 'B))\n      \
    \  ((< 1.5 grades) (list 'B-))\n        ((< 1.0 grades) (list 'C+))\n        ((<\
    \ 0.7 grades) (list 'C))\n        ((< 0.0 grades) (list 'C-))\n        (else (list\
    \ 'D+))))))\n", "  (define (compare grade1 grade2)\n    (cond\n      [(< grade1\
    \ grade2) 1]\n      [(> grade1 grade2) -1]\n      [(eq grade1 grade2) 0]\n   \
    \   [(< grade2 grade1) -1]\n      [(> grade2 grade1) 1]))\n  (let loop ((grades\
    \ (sort grades (partial compare 0))))\n    (cond\n      [(empty? grades) (list\
    \ 'E)]\n      [(> (car (first grades)) (car (last grades))) (list 'D- 'D)]\n \
    \     [(< (car (first grades)) (car (last grades))) (list 'D+ 'D)]\n      [(<\
    \ (car (first grades)) (car (last grades))) (list 'B- 'B)]\n      [(> (car (first\
    \ grades)) (car (last grades))) (list 'B+ 'B)]\n      [(< (car (first grades))\
    \ (car (last grades))) (list 'A- 'A)]\n      [(> (car (first grades)) (car (last\
    \ grades))) (list 'A+ 'A)]\n      [(< (car (first grades)) (car (last grades)))\
    \ (list 'C- 'C)]\n      [(> (car (first grades)) (car (last grades))) (list 'C+\
    \ 'C)]\n      [(< (car (first grades)) (car (last grades))) (list 'A- 'A)]\n \
    \     [(> (car (first grades)) (car (last grades))) (list 'A+ 'A)]\n      [(<\
    \ (car (first grades)) (car (last grades))) (list 'B- 'B)]\n      [(> (car (first\
    \ grades)) (car (last grades))) (list 'B+ 'B)]\n      [(< (car (first grades))\
    \ (car (last grades))) (list 'C- 'C)]\n      [(> (car (first grades)) (car (last\
    \ grades))) (list 'C+ 'C)]\n      [(< (car (first grades)) (car (last grades)))\
    \ (list 'D- 'D)]\n      [(> (car (first grades)) (car (last grades))) (list 'D+\
    \ 'D)]))))\n", "  (let loop ((i grades)\n             (grade 'A))\n    (if (null?\
    \ i)\n        grade\n        (loop (rest i) \n              (cond ((> i 3.5)\n\
    \                     'B)\n                    ((> i 3.0)\n                  \
    \   'C)\n                    ((> i 2.3)\n                     'D)\n          \
    \          ((> i 2.7)\n                     'E)\n                    ((> i 1.7)\n\
    \                     'F)\n                    ((> i 1.0)\n                  \
    \   'G)))))\n", "  (let loop ((n 0) (grades '()))\n    (cond ((> n grades)\n \
    \          (reverse (append (loop (add1 n) 'A') grades)))\n          ((< n 0)\n\
    \           (reverse (append (loop (add1 n) 'D') grades)))\n          ((< n 4)\n\
    \           (append (loop (add1 n) 'A-') grades))\n          ((< n 3.7)\n    \
    \       (append (loop (add1 n) 'A-') grades))\n          ((< n 3.3)\n        \
    \   (append (loop (add1 n) 'B-') grades))\n          ((< n 3)\n           (append\
    \ (loop (add1 n) 'B-') grades))\n          ((< n 2.7)\n           (append (loop\
    \ (add1 n) 'B-') grades))\n          ((< n 2.3)\n           (append (loop (add1\
    \ n) 'B-') grades))\n          ((< n 2)\n           (append (loop (add1 n) 'B-')\
    \ grades))\n          ((< n 1.7) \n           (append (loop (add1 n) 'C') grades))\n\
    \          ((< n 1.3) \n           (append (loop (add1 n) 'C') grades))\n    \
    \      ((< n 1) \n           (append (loop (add1 n) 'C') grades))\n          ((<\
    \ n 0.7)\n           (append (loop (add1 n) 'D') grades))\n          ((< n 0)\
    \ \n           (append (loop (add1 n) 'D') grades))\n          ((< n 0)\n    \
    \       (append (loop (add1 n) 'E') grades))\n          (else\n           (reverse\
    \ (append (loop (add1 n) 'F') grades)))))\n</code>\n<|/ a tags=scheme |>\n<| a\
    \ |>\nOne liner:\n<code>", "  (if (null? grades)\n      'E\n      (let ([gpa (first\
    \ grades)])\n        (if (> gpa 3.0)\n            'C'\n            (if (> gpa\
    \ 2.7)\n                'B'\n                (if (> gpa 2.0)\n               \
    \     'B'\n                    (if (> gpa 1.7)\n                        'B'\n\
    \                        (if (> gpa 1.0)\n                            'B'\n  \
    \                          (if (> gpa 0.7)\n                                'B'\n\
    \                                (if (> gpa 0.3)\n                           \
    \         'B'\n                                    (if (> gpa 0.0)\n         \
    \                               'B'\n                                        (if\
    \ (> gpa -0.3)\n                                            'B'\n            \
    \                                (if (> gpa -0.7)\n                          \
    \                      'B'\n                                                (if\
    \ (> gpa -1.0)\n                                                    'B'\n    \
    \                                                (if (> gpa -1.7)\n          \
    \                                              'B'\n                         \
    \                               (if (> gpa -2.0)\n                           \
    \                                 'B'\n                                      \
    \                      (if (> gpa -2.7)\n                                    \
    \                            'B'\n                                           \
    \                     (if (> gpa -3.0)\n                                     \
    \                               'B'\n                                        \
    \                            (if (> gpa -3.7)\n                              \
    \                                          'B'\n                             \
    \                                           (if (> gpa -4.0)\n               \
    \                                                             'B'\n          \
    \                                                                  (if (> gpa\
    \ -4.7)\n                                                                    \
    \            'B'\n                                                           \
    \                     (if (> gpa -5.0)\n                                     \
    \                                               'B'\n                        \
    \                                                            (if (> gpa -5.7)\n\
    \                                                                            \
    \            'B'\n                                                           \
    \                             (if (> gpa -6.0)\n                             \
    \                                                               'B'\n        \
    \                                                                            \
    \        (if (> gpa -6.7)\n                                                  \
    \                                              'B'\n                         \
    \                                                                       (if (>\
    \ gpa -7.0)\n                                                                \
    \                                                    'B'\n                   \
    \                                                                            \
    \                     (if (> gpa -7.7)\n                                     \
    \                                                                            \
    \       'B'\n                                                                \
    \                                                        (if (> gpa -8.0)\n  \
    \                                                                            \
    \                                              'B'\n                         \
    \                                                                            \
    \                       (if (> gpa -8.7)\n                                   \
    \                                                                            \
    \                                     'B'\n                                  \
    \                                                                            \
    \                                      (if (> gpa -9.0)\n                    \
    \                                                                            \
    \                                        'B'\n                               \
    \                                                                            \
    \                             (if (> gpa -9.7)\n                             \
    \                                                                            \
    \                                                                   'B'\n    \
    \                                                                            \
    \                                                                            \
    \                (if (> gpa -10.0)\n                                         \
    \                                                                            \
    \                                                           'B'\n            \
    \                                                                            \
    \                                                                            \
    \                                        'F)))))))))))))))))))))))))\n", "  (map\
    \ (lambda (grade) (letter grade)) (filter greater_than (student-gpa grades))))\n",
  "  (let ([min_grade (first grades)\n         max_grade (last  grades)])\n    (cond\
    \ [(< min_grade 0) 'E]\n          [(< max_grade 0) 'D]\n          [(< min_grade\
    \ max_grade) 'B-']\n          [(< max_grade min_grade) 'B-']\n          [else\
    \ (let ([percent (/ (- max_grade min_grade) max_grade)]\n                    \
    \ [letter (cond [(< percent .75) 'A+]\n                                 [(< percent\
    \ .50) 'A]\n                                 [(< percent .25) 'A-]\n         \
    \                        [(< percent .10) 'B+]\n                             \
    \    [(< percent .05) 'B]\n                                 [(< percent .025)\
    \ 'B-]\n                                 [(< percent .005) 'C+]\n            \
    \                     [(< percent .001) 'C]\n                                \
    \ [(< percent .0005 'C-]\n                                 [(< percent .0001)\
    \ 'C-]\n                                 [(< percent .0000) 'C+]\n           \
    \                      [(< percent .0000 'D-]))]\n                    (list letter\
    \ (numerical_letter_grade (rest grades))))]))))", "  (cond [(null? grades) 'E]\n\
    \        [(< grades 1) 'C]\n        [(< grades 2) 'B]\n        [(< grades 3) 'A-]\n\
    \        [(< grades 4) 'A]\n        [else 'B-])\n)\n", "  (cond\n    [(< grade\
    \ 0) 'E]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n\
    \    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(<\
    \ grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade\
    \ 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7)\
    \ 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n\
    \    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(<\
    \ grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade\
    \ 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7)\
    \ 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n\
    \    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(<\
    \ grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade\
    \ 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7)\
    \ 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n\
    \    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(< grade 0.7) 'D]\n    [(<\
    \ gra", "  (reverse\n   (foldl\n    (lambda (grades grade index)\n      (if (=\
    \ index 0)\n          (reverse grades)\n          (cons (if (> grade 3.7) (substring\
    \ 'A grades 'A+' grade) 'A)\n                (if (> grade 3.3) (substring 'A grades\
    \ 'A-' grade) 'A-)\n                (if (> grade 3.0) (substring 'B grades 'B+'\
    \ grade) 'B)\n                (if (> grade 2.7) (substring 'B grades 'B' grade)\
    \ 'B)\n                (if (> grade 2.3) (substring 'B grades 'B-' grade) 'B-)\n\
    \                (if (> grade 2.0) (substring 'C grades 'C+' grade) 'C)\n    \
    \            (if (> grade 1.7) (substring 'C grades 'C' grade) 'C)\n         \
    \       (if (> grade 1.3) (substring 'C grades 'C-' grade) 'C-)\n            \
    \    (if (> grade 1.0) (substring 'D grades 'D+' grade) 'D)\n                (if\
    \ (> grade 0.7) (substring 'D grades 'D' grade) 'D)\n                (if (> grade\
    \ 0.0) (substring 'E grades 'E grade' grade) 'E))))\n    '()\n    grades)))\n",
  "  (define (loop grade)\n    (if (< grade 4.0)\n        'A+\n      (if (< grade\
    \ 3.7)\n          'A\n        (if (< grade 3.3)\n          'A-\n        (if (<\
    \ grade 3.0)\n          'B+\n        (if (< grade 2.7)\n          'B\n       \
    \ (if (< grade 2.3)\n          'B-\n        (if (< grade 2.0)\n          'C+\n\
    \        (if (< grade 1.7)\n          'C\n        (if (< grade 1.3)\n        \
    \  'C-\n        (if (< grade 1.0)\n          'D+\n        (if (< grade 0.7)\n\
    \          'D\n        'D-))))))))))\n    (loop (first grades))))\n", "  (let\
    \ ((i 0))\n    (list (first grades) (number-of-letters grades)\n         (if (<\
    \ (+ i 1) (number-of-letters grades)) '+ '-)\n         '-' (numerical_letter_grade\
    \ (rest grades)))))\n", "  (cond [(> grades 3.0) 'A-]\n        [(< grades 3.0)\
    \ 'A+]\n        [(> grades 3.3) 'A-]\n        [(< grades 3.3) 'A+]\n        [(>\
    \ grades 3.7) 'B+]\n        [(< grades 3.7) 'B]\n        [(> grades 3.7) 'B-]\n\
    \        [(< grades 3.7) 'B+]\n        [(> grades 3.2) 'B-]\n        [(< grades\
    \ 3.2) 'B+]\n        [(> grades 3.0) 'B+]\n        [(< grades 3.0) 'B]\n     \
    \   [(> grades 3.0) 'B-]\n        [(< grades 3.0) 'B+]\n        [(> grades 2.7)\
    \ 'C+]\n        [(< grades 2.7) 'C]\n        [(> grades 2.7) 'C-]\n        [(<\
    \ grades 2.7) 'C+]\n        [(> grades 2.3) 'C-]\n        [(< grades 2.3) 'C+]\n\
    \        [(> grades 2.0) 'C+]\n        [(< grades 2.0) 'C]\n        [(> grades\
    \ 2.0) 'C-]\n        [(< grades 2.0) 'C+]\n        [(> grades 1.7) 'C]\n     \
    \   [(< grades 1.7) 'C+]\n        [(> grades 1.3) 'C-]\n        [(< grades 1.3)\
    \ 'C+]\n        [(> grades 1.0) 'C-]\n        [(< grades 1.0) 'C+]\n        [(>\
    \ grades 0.7) 'C+]\n        [(< grades 0.7) 'C]\n        [(> grades 0.7) 'C-]\n\
    \        [(< grades 0.7) 'C+]\n        [(> grades 0.3) 'C-]\n        [(< grades\
    \ 0.3) 'C+]\n        [(> grades 0.0) 'C-]\n        [(< grades 0.0) 'C+]\n    \
    \    [else 'E]))", "  (let ([letter_grades (list (if (< grades 3.0) 'A+ 'A 'A-\
    \ 'B+\n                                    'B 'B- 'C+\n                      \
    \              'C 'C- 'D+\n                                    'D 'D- 'E))])\n\
    \    (append-map (lambda (grade)\n                   (cond [(< grade 3.0) (cons\
    \ 'D+ 'D (cons letter_grades (list (cons 'D+ 'D letter_grades))))\n          \
    \               (< grade 3.7) (cons 'D 'D (cons letter_grades (list (cons 'D-\
    \ 'D letter_grades))))\n                         (< grade 3.3) (cons 'D- 'D (cons\
    \ letter_grades (list (cons 'D+ 'D letter_grades))))\n                       \
    \  (< grade 3.0) (cons 'D+ 'D (cons letter_grades (list (cons 'D+ 'D letter_grades))))\n\
    \                         (< grade 2.7) (cons 'B+ 'B (cons letter_grades (list\
    \ (cons 'B+ 'B letter_grades))))\n                         (< grade 2.3) (cons\
    \ 'B- 'B (cons letter_grades (list (cons 'B+ 'B letter_grades))))\n          \
    \               (< grade 2.0) (cons 'B+ 'B (cons letter_grades (list (cons 'B+\
    \ 'B letter_grades))))\n                         (< grade 1.7) (cons 'C+ 'C (cons\
    \ letter_grades (list (cons 'C+ 'C letter_grades))))\n                       \
    \  (< grade 1.3) (cons 'C- 'C (cons letter_grades (list (cons 'C+ 'C letter_grades))))\n\
    \                         (< grade 1.0) (cons 'C+ 'C (cons letter_grades (list\
    \ (cons 'C+ 'C letter_grades))))\n                         (< grade 0.7) (cons\
    \ 'C+ 'C (cons letter_grades (list (cons 'C+ 'C letter_grades))))\n          \
    \               (< grade 0.0) (cons 'C+ 'C (cons letter_grades (list (cons 'C+\
    \ 'C letter_grades))))\n                         (else (cons 'E 'E (cons letter_grades\
    \ (list (cons 'E 'E letter_grades))))))\n                grades)\n    ))", " \
    \ (cond\n    [(< grades 4.0) (list 'A+)]\n    [(> grades 4.0) (list 'A)]\n   \
    \ [(> grades 3.7) 'A- ]\n    [(> grades 3.3) 'A-']\n    [(> grades 3.0) (list\
    \ 'B+)]\n    [(> grades 2.7) 'B]\n    [(> grades 2.3) 'B-']\n    [(> grades 2.0)\
    \ (list 'C+)]\n    [(> grades 1.7) 'C]\n    [(> grades 1.3) 'C-']\n    [(> grades\
    \ 1.0) (list 'D+)]\n    [(> grades 0.7) (list 'D)]\n    [(> grades 0.0) (list\
    \ 'D-)]\n    [(> grades 0.0) (list 'E)]\n    [else 'None]))\n", "  (let ([g (car\
    \ grades)]\n        [a (cadr grades)]\n        [b (caddr grades)])\n    (cond\n\
    \      [(< g -5) (cons 'E '())]\n      [(< g 0) (cons 'D '())]\n      [(< g 1)\
    \ (cons 'C '())]\n      [(< g 2) (cons 'B '())]\n      [(< g 3) (cons 'A '())]\n\
    \      [(< g 4) (cons 'A- '())]\n      [(< g 5) (cons 'B+  '())]\n      [(< g\
    \ 6) (cons 'B '())]\n      [(< g 7) (cons 'C '())]\n      [(< g 8) (cons 'C '())]\n\
    \      [(< g 9) (cons 'A- '())]\n      [(< g 10) (cons 'A- '())]\n      [(< g\
    \ 11) (cons 'A- '())]\n      [(< g 12) (cons 'A- '())]\n      [(< g 13) (cons\
    \ 'B+  '())]\n      [(< g 14) (cons 'B '())]\n      [(< g 15) (cons 'B '())]\n\
    \      [(< g 16) (cons 'B '())]\n      [(< g 17) (cons 'C '())]\n      [(< g 18)\
    \ (cons 'C '())]\n      [(< g 19) (cons 'C '())]\n      [(< g 20) (cons 'D '())]\n\
    \      [(< g 21) (cons 'D '())]\n      [(< g 22) (cons 'D '())]\n      [(< g 23)\
    \ (cons 'D '())]\n      [(< g 24) (cons 'D '())]\n      [(< g 25) (cons 'D '())]\n\
    \      [(< g 26) (cons 'D '())]\n      [(< g 27) (cons 'D '())]\n      [(< g 28)\
    \ (cons 'D '())]\n      [(< g 29) (cons 'D '())]\n      [(< g 30) (cons 'D '())]\n\
    \      [(< g 31) (cons 'D '())]\n      [(< g 32) (cons 'D '())]\n      [(< g 33)\
    \ (cons 'D '())]\n      [(< g 34) (cons 'D '())]\n      [(< g 35) (cons 'D '",
  "  (if (> grades 3.0)\n    (if (> grades 2.7)\n      (if (> grades 2.0)\n      \
    \  'C-\n        'B-)\n      'B-)\n    'B-))\n", "  (define (accumulator acc grade\
    \ grades)\n    (cond\n      [(empty? grades) (cons grade acc)]\n      [(> grade\
    \ (first grades))\n       (accumulator acc (first grades) (rest grades))]\n  \
    \    [(< grade (first grades))\n       (accumulator acc (first grades) (append\
    \ (list (first grades)) (rest grades)))]\n      [else (accumulator acc (first\
    \ grades) (rest grades))]))\n  (accumulator '() '() (map numerical_gpa grades)))\n",
  "  (let* ((grade-list (list->string grades))\n         (gpa-list '()))\n    (cond\n\
    \      [(= (length grade-list) 0) 'E]\n      [else (cond \n              [(< '(length\
    \ grade-list) 0)\n               (if (= '(substring grade-list 0) '+) (cons 'A+'\
    \ gpa-list) (gpa-list (cons 'A+' gpa-list)))]\n              [(< '(length grade-list)\
    \ 2)\n               (if (= '(substring grade-list 0) '-) (cons 'A-' gpa-list)\
    \ (gpa-list (cons 'A-' gpa-list)))]\n              [(< '(length grade-list) 4)\n\
    \               (if (= '(substring grade-list 1) '+) (cons 'B+' gpa-list) (gpa-list\
    \ (cons 'B+' gpa-list)))]\n              [(< '(length grade-list) 6)\n       \
    \        (if (= '(substring grade-list 1) '-) (cons 'B-' gpa-list) (gpa-list (cons\
    \ 'B-' gpa-list)))]\n              [(< '(length grade-list) 8)\n             \
    \  (if (= '(substring grade-list 2) '+) (cons 'C+' gpa-list) (gpa-list (cons 'C+'\
    \ gpa-list)))]\n              [(< '(length grade-list) 10)\n               (if\
    \ (= '(substring grade-list 2) '-) (cons 'C-' gpa-list) (gpa-list (cons 'C-' gpa-list)))]\n\
    \              [(< '(length grade-list) 12)\n               (if (= '(substring\
    \ grade-list 3) '+) (cons 'D+' gpa-list) (gpa-list (cons 'D+' gpa-list)))]\n \
    \             [(< '(length grade-list) 14)\n               (if (= '(substring\
    \ grade-list 3) '-) (cons 'D-' gpa-list) (gpa-list (cons 'D-' gpa-list)))]\n \
    \             [(< '(length grade-list) 16)\n               (if (= '(substring\
    \ grade-list 4) '+) (cons 'E' gpa-list) (gpa-list (cons 'E' gpa-list)))]\n   \
    \           [(< '(length grade-list) 18)\n               (if (= '(substring grade-list\
    \ 4) '-) (cons 'E' gpa-list) (gpa-list (cons 'E' gpa-list)))]\n              [",
  "  (if (null? grades)\n      (list)\n      (if (<= (first grades) (first grades))\n\
    \          (cons (cond ((> grades (first grades)) (list (first grades) 'A+))\n\
    \                     ((= (first grades) (first grades)) (list 'A (first grades)\
    \ 'A+))\n                     ((= (first grades) (first grades)) (list (first\
    \ grades) 'A-))\n                     ((> grades (first grades)) (list (first\
    \ grades) 'B+))\n                     ((= (first grades) (first grades)) (list\
    \ 'B (first grades) 'B+))\n                     ((= (first grades) (first grades))\
    \ (list (first grades) 'B-))\n                     ((> grades (first grades))\
    \ (list (first grades) 'C+))\n                     ((= (first grades) (first grades))\
    \ (list 'C (first grades) 'C+))\n                     ((= (first grades) (first\
    \ grades)) (list (first grades) 'C-))\n                     ((> grades (first\
    \ grades)) (list (first grades) 'D+))\n                     ((= (first grades)\
    \ (first grades)) (list 'D (first grades) 'D+))\n                     ((= (first\
    \ grades) (first grades)) (list (first grades) 'D-))\n                     ((>\
    \ grades (first grades)) (list (first grades) 'E))\n                     ((= (first\
    \ grades) (first grades)) (list 'E 'E))\n                     (else (list grades\
    \ (cond ((< grades (first grades)) (list (first grades) 'E))\n               \
    \                                   ((> grades (first grades)) (list (first grades)\
    \ 'D-))\n                                                  (else (list (first\
    \ grades) 'D)))))))))\n", "  (let ([total_gpa (car grades)])\n    (cond\n    \
    \  [(< total_gpa 3.7) 'A+(* 2 3)]\n      [(< total_gpa 3.3) 'A- (* 2 3)]\n   \
    \   [(< total_gpa 3.0) 'B+(* 2 3)]\n      [(< total_gpa 2.7) 'B+(* 2 1)]\n   \
    \   [(< total_gpa 2.3) 'B- (* 2 1)]\n      [(< total_gpa 2.0) 'C+(* 2 1)]\n  \
    \    [(< total_gpa 1.7) 'C+(* 2 0)]\n      [(< total_gpa 1.3) 'C- (* 2 0)]\n \
    \     [(< total_gpa 1.0) 'D+(* 2 0)]\n      [(< total_gpa 0.7) 'D+(* 2 1)] \n\
    \      [else '(* 2 0)]))\n</code>\n<|/ a tags=scheme,racket,list |>\n<| c |>\n\
    This looks like a very interesting solution, and I learned something new from\
    \ it - however, I do remember that in school we used a list for a few things,\
    \ and in this case it's very important that we understand that these are lists.\
    \ I guess it's possible that my teacher used a different list for something else...\
    \ but still, thanks for the help! It's probably a good idea to revisit this question\
    \ in class once it has been marked for class\n<|/ c |>\n<| a |>\nI tried to solve\
    \ the problem using only basic data structures. I used the idea of the tail recursion\
    \ to find the letter grade from the tail of the list.\nI used a data structure\
    \ called a stack and push the element to the stack whenever I encounter a greater\
    \ than or less than sign. When I encounter a decimal number I pop the element\
    \ from the stack and check with the previous element in the stack. If the previous\
    \ element equals to 0 then I pop again because its the base case. I also used\
    \ the previous element to find the grade so if the previous element has a value\
    \ less than 3 then I increment the count of decimal places else I decrement it\
    \ so that if I am at 0.3 then the count of decimal places is 2 and if I am at\
    \ 0.3 then the count of decimal places is 1.\nHere is an implementation of it\
    \ in Scheme.\n<code>\n#lang racket\n", "  (define (helper a b)\n    (if (< (-\
    \ a b) 0.5)\n        (cons (- 'C a)\n              (if (< (+ a b) 0.5)\n     \
    \             'C 'B 'B-\n                  'B 'B-\n                  'B 'B-\n\
    \                  'B 'B-\n                  'C 'C 'C-\n                  'C 'C\
    \ 'C-\n                  'C 'C 'C-\n                  'D 'D 'D 'D\n          \
    \        'D 'D 'D\n                  'D 'D 'D\n                  'D 'D 'D\n  \
    \                'E 'E\n                  'E 'E)))\n        (cons (- 'B a)\n \
    \             (if (< (+ a b) 0.5)\n                  'B 'B+\n                \
    \  'B 'B+\n                  'B 'B+\n                  'B 'B+\n              \
    \    'B 'B+\n                  'B 'B+\n                  'C 'C 'C-\n         \
    \         'C 'C 'C-\n                  'C 'C 'C-\n                  'C 'C 'C-\n\
    \                  'D 'D 'D 'D\n                  'D 'D 'D\n                 \
    \ 'D 'D 'D\n                  'D 'D 'D\n                  'E 'E\n            \
    \      'E 'E)))\n        (cons (- 'A a)\n              (if (< (+ a b) 0.5)\n \
    \                 'A 'A+\n                  'A 'A+\n                  'A 'A+\n\
    \                  'A 'A+\n                  'A 'A+\n                  'A 'A+\n\
    \                  'A 'A+\n                  'A 'A+\n                  'B 'B 'B-\n\
    \                  'B 'B 'B-\n                  'B 'B 'B-\n                  'B\
    \ 'B 'B-\n                  'B 'B 'B-\n                  'C 'C 'C-\n         \
    \         'C 'C 'C-\n                  'C 'C 'C-\n                  'C 'C 'C-\n\
    \                  'C 'C 'C-\n                  'D 'D 'D 'D 'D\n             \
    \     'D 'D 'D 'D\n                  'D 'D 'D 'D\n                  'D 'D 'D 'D\n\
    \                  'E 'E\n                  'E 'E))))\n  (helper grades 0))\n",
  "  (cond\n    ((= 0 (/ grades 4.0f))  'A+')\n    ((> grades 3.7f) 'A)\n    ((> grades\
    \ 3.3f) 'A-)\n    ((> grades 3.00f) 'B+')\n    ((> grades 2.7f) 'B)\n    ((> grades\
    \ 2.3f) 'B-)')\n    ((> grades 2.00f) 'C+')\n    ((> grades 1.7f) 'C)\n    ((>\
    \ grades 1.3f) 'C-')\n    ((> grades 1.00f) 'D+')\n    ((> grades 0.7f) 'D)\n\
    \    ((> grades 0.3f) 'D-')\n    (else 'E)))\n", "  (cond\n    [(empty? grades)\
    \ 'D-]\n    [(< grades 2.0) (char 'A-)]\n    [(< grades 2.1) (cond \n        \
    \              [(< grades 2.7) (cond \n                                      \
    \ [(< grades 3.3) 'A-]\n                                       [(< grades 3.7)\
    \ 'A-]\n                                       [else 'B-])]\n                \
    \      [(< grades 3.0) (char 'B-)]\n                      [(< grades 3.1) (cond\
    \ \n                                       [(< grades 3.7) (cond \n          \
    \                                              [(< grades 4.3) 'A-]\n        \
    \                                                [(< grades 4.7) 'A-]\n      \
    \                                                  [else 'B-])]\n            \
    \                           [(< grades 4.0) (char 'B-)]\n                    \
    \                   [(< grades 4.1) (cond \n                                 \
    \                       [(< grades 4.7) (cond \n                             \
    \                                          [(< grades 5.3) 'A-]\n            \
    \                                                           [(< grades 5.7) 'A-]\n\
    \                                                                       [else\
    \ 'B-])]\n                                       [(< grades 5.0) (char 'B-)]\n\
    \                                       [(< grades 5.1) (cond \n             \
    \                                           [(< grades 5.7) (cond \n         \
    \                                                              [(< grades 6.3)\
    \ 'A-]\n                                                                     \
    \  [(< grades 6.7) 'A-]\n                                                    \
    \                   [else 'B-])]\n                                       [(< grades\
    \ 6.0) (char 'B-)]\n                                       [(< grades 6.1) (cond\
    \ \n                                                        [(< grades 6.7) (cond\
    \ \n                                                                       [(<\
    \ grades 7.3) 'A-]\n                                                         \
    \              [(< grades 7.7) 'A-]\n                                        \
    \                               [else 'B-])]\n                               \
    \        [(< grades 7.0) (char 'B-)]\n                                       [(<\
    \ grades 7.1) (cond \n                                                       \
    \ [(< grades 7.7) (cond \n                                                   \
    \                    [(< grades 8.3) 'A-]\n                                  \
    \                                     [(< grades 8.7) 'A-]\n                 \
    \                                                      [else 'B-])]\n        \
    \                               [(< grades 8.0) (char 'B-)]\n                \
    \                       [(< grades 8.1) (cond \n                             \
    \                           [(< grades 8.7) (cond \n                         \
    \                                              [(< grades 9.3) 'A-]\n        \
    \                                                               [(< grades 9.7)\
    \ 'A-]\n                                                                     \
    \  [else 'B-])]\n                                       [(< grades 9.0) (char\
    \ 'B-)]\n                                       [else 'B-])]\n               \
    \       [(< grades 9.1) (cond \n                                       [(< grades\
    \ 9.7) (cond ", "  (define (find_best_grade best-grade grades)\n    (if (null?\
    \ grades)\n        'E\n      (if (< (car grades) best-grade)\n          (find_best_grade\
    \ (car grades) (cdr grades))\n          (find_best_grade best-grade (cdr grades)))))\n\
    \  (define (iter best-grade grades)\n    (if (null? grades)\n        best-grade\n\
    \      (iter (find_best_grade best-grade (car grades)) (cdr grades))))\n  (iter\
    \ 0 grades))\n", "  (cond\n    [(or (number? grades) (null? grades)) 'E]\n   \
    \ [(< (cdr grades) 3.0)    'A+ (+ (* grades (car grades))))\n     (cond\n    \
    \   [(> (cdr grades) 3.7) 'A+ (+ (* grades (car grades))))\n       (cond\n   \
    \      [(> (cdr grades) 3.3) 'A (+ (* grades (car grades))))\n         (cond\n\
    \           [(> (cdr grades) 3.0) 'B+ (+ (* grades (car grades))))\n         \
    \  (cond\n             [(> (cdr grades) 2.7) 'B (+ (* grades (car grades))))\n\
    \             (cond\n               [(> (cdr grades) 2.3) 'B- (+ (* grades (car\
    \ grades))))]\n               (cond\n                 [(> (cdr grades) 2.0) 'C+\
    \ (+ (* grades (car grades))))\n                 (cond\n                   [(>\
    \ (cdr grades) 1.7) 'C (+ (* grades (car grades))))\n                    (cond\n\
    \                      [(> (cdr grades) 1.3) 'C- (+ (* grades (car grades))))]\n\
    \                      (cond\n                        [(> (cdr grades) 1.0) 'D+\
    \ (+ (* grades (car grades))))\n                        (cond\n              \
    \            [(> (cdr grades) 0.7) 'D (+ (* grades (car grades))))]\n        \
    \                  (cond\n                            [(> (cdr grades) 0.0) 'D-\
    \ (+ (* grades (car grades))))]\n                            (cond\n         \
    \                     [(number? grades) 'F]\n                              [else\
    \ 'E]))]))]))]))]))\n", "  (let loop ((grades '())\n             (letters '()))\n\
    \    (if (null? grades)\n        (reverse letters)\n        (loop (cdr grades)\n\
    \              (append letters\n                      (cons (gcdr (car grades)\n\
    \                                 (if (< 0 (expt (car grades) 2))\n          \
    \                           'A+\n                                    'A')\n  \
    \                           (list (char (expt (car grades) 2)))))\n          \
    \        )))))\n", "  (let ((g (first grades))\n        (a1 (second grades))\n\
    \        (a2 (second (third grades))))\n    (if (< g 0) \n        'E\n       \
    \ (if (> g (min a1 a2))\n            (if (< a1 g) \n                'C\n     \
    \           (if (< a2 g) \n                    'B\n                    (if (<\
    \ a1 a2) \n                        'A\n                        (if (< a1 g) \n\
    \                            'A+\n                            'D)))))))\n", " \
    \ (cond [(zero? grades) 'E]\n        [(< grades 3.7) 'A-']\n        [(< grades\
    \ 3.3) 'A- ']\n        [(< grades 3.0) 'B+ ']\n        [(< grades 2.7) 'B']\n\
    \        [(< grades 2.3) 'B-']\n        [(< grades 2.0) 'C+ ']\n        [(< grades\
    \ 1.7) 'C']\n        [(< grades 1.3) 'C-']\n        [(< grades 1.0) 'D+ ']\n \
    \       [(< grades 0.7) 'D']\n        [(< grades 0.0) 'D-']\n        [(> grades\
    \ 0.0) 'F]\n        [else 'Error']))\n", "  (let ((letter_grade '()))\n    (cond\
    \ ((< grades 4.0) (push grades 'A+))\n          ((< grades 3.7) \n           (cond\
    \ ((> grades 3.3) (push grades 'A-))\n                 ((> grades 3.0) (push grades\
    \ 'B+))\n                 ((> grades 2.7) \n                  (cond ((> grades\
    \ 2.3) (push grades 'B-))\n                        (else (push grades 'C+))))\n\
    \                 ((> grades 2.3) \n                  (cond ((> grades 2.0) (push\
    \ grades 'B-))\n                        (else (push grades 'C+)))))\n        \
    \  ((< grades 3.3) \n           (cond ((> grades 3.0) (push grades 'A-))\n   \
    \              ((> grades 2.7) (push grades 'B))\n                 ((> grades\
    \ 2.3) (push grades 'B-))\n                 ((> grades 2.0) (push grades 'C+)))))\n\
    \          ((< grades 3.0) (push grades 'A-))\n          ((< grades 2.7) (push\
    \ grades 'B))\n          ((< grades 2.3) (push grades 'B-))\n          ((< grades\
    \ 2.0) (push grades 'C+))\n          ((< grades 1.7) (push grades 'C))\n     \
    \     ((< grades 1.3) (push grades 'C-))\n          ((< grades 1.0) (push grades\
    \ 'D+))\n          ((< grades 0.7) (push grades 'D))\n          ((< grades 0.0)\
    \ (push grades 'D-))\n          ((< grades 0.0) (push grades 'E))\n          (else\
    \ (push grades 'E))))))\n", "  (letrec ((grade (lambda (grades i grade)\n    \
    \              (if (= i 0)\n                      grade\n                    \
    \  (grade grades (- i 1) grade))))\n           (grade_map (lambda (grades i)\n\
    \                        (if (= i 0)\n                            'A+\n      \
    \                      (grade grades (- i 1) 'A))))\n           (letter_grade_map\
    \ (lambda (grades)\n                              (let ((letters (list)))\n  \
    \                               (do ((grade grades (- i 1) (grade_map grades)))\n\
    \                                    ((>= grade 'E))\n                       \
    \             (cons (grade_map grades) letters))))\n           (num_grade_map\
    \ (lambda (i)\n                           (lambda (grades)\n                 \
    \            (let ((letters (list)))\n                               (do ((grade\
    \ grades (- i 1) (grade_map grades)))\n                                  ((>=\
    \ grade 'E))\n                                  (cons (grade_map grades) letters)))))\n\
    \           (num_grade_maps (lambda (grades)\n                             (let\
    \ ((maps (make-array (length grades) #:element-type 'number))\n              \
    \                     (i (- 0 (length grades))))\n                           \
    \    (do ((grade grades (- i 1))\n                                    (maps (+\
    \ i 1)))\n                                  ((< grade 'E))\n                 \
    \                 (cons (num_grade_map i) maps))))\n           (letter_grades\
    \ (lambda (grades)\n                           (let* ((maps (num_grade_maps grades))\n\
    \                                   (letters (map grade_map maps)))\n        \
    \                     (apply append (map letter_grade_map maps)))))))\n  (letters\
    \ letter_grades grades))\n", "  (map \n   (\u03BB (gpa grade)\n      (let ((grade\
    \ (cons grade '())))\n        (cond [(< grade 4.0)\n               '(A+)]\n  \
    \            [(< grade 3.7)\n               (cons '(A (cdr grade))\n         \
    \            (grade (cddr grade)))]\n              [(< grade 3.3)\n          \
    \     (cons '(A- '(cdr grade))\n                     (grade (cddr grade)))]\n\
    \              [(< grade 3.0)\n               (cons '(B+) (cdr grade))\n     \
    \          (grade (cddr grade))])\n              [(< grade 2.7)\n            \
    \   (cons '(B (cdr grade))\n                     (grade (cddr grade)))]\n    \
    \          [(< grade 2.3)\n               (cons '(B- '(cdr grade))\n         \
    \            (grade (cddr grade)))]\n              [(< grade 2.0)\n          \
    \     (cons '(C+) (cdr grade))\n               (grade (cddr grade))])\n      \
    \        [(< grade 1.7)\n               (cons '(C (cdr grade))\n             \
    \        (grade (cddr grade)))]\n              [(< grade 1.3)\n              \
    \ (cons '(C- (cdr grade))\n                     (grade (cddr grade)))]\n     \
    \         [(< grade 1.0)\n               (cons '(D+) (cdr grade))\n          \
    \     (grade (cddr grade))])\n              [(< grade 0.7)\n               (cons\
    \ '(D ('(cdr grade)))\n                     (grade (cddr grade)))]\n         \
    \     [(< grade 0.0)\n               (cons '(D-)\n                     (grade\
    \ (cddr grade)))]\n              [else '(E))]))\n  grades))", "  (let* ((max-score\
    \ 99)\n         (grade-table '(A A- B B+ C C-))\n         (result (make-vector\
    \ 5 #f))\n         (gpa-count (floor (/ (apply - grades) (apply - grade-table))))\n\
    \         (max-gpa (apply max grade-table))\n         (sum (apply + grades))\n\
    \         (sum-diff (apply - sum grades))\n         (sum-diff (+ sum-diff (apply\
    \ * grades grade-table)))\n         (sum-diff (- sum-diff (apply * grades grade-table)))\n\
    \         (sum-diff (/ sum-diff (apply - grade-table)))\n         (sum-diff (-\
    \ sum-diff (apply + grade-table)))\n         (sum-diff (- sum-diff (apply - grade-table))))\n\
    \    (if (<= gpa 0)\n        (reverse result)\n        (let ((grade-idx (modulo\
    \ (- gpa max-gpa) 5))\n              (grade-score (- grade (modulo (- sum (- grades\
    \ sum-diff)) 4))))\n          (if (< grade-idx 4)\n            (set! result[grade-idx]\
    \ grade-table)\n            (set! result[grade-idx] `(,(substring grade-table\
    \ grade-idx 1)\n                                 ,(substring grade-table grade-idx\
    \ 2)\n                                 ,(substring grade-table grade-idx 3)\n\
    \                                 ,(substring grade-table grade-idx 4)\n     \
    \                            ,(substring grade-table grade-idx 5))))))))\n", " \
    \ (cond [(< grades 4.0) 'A+]\n        [else \n          (cond [(< grades 3.7)\
    \ 'A]\n                [else \n                  (cond [(< grades 3.3) 'A-]\n\
    \                        [else (cond [(< grades 3.0) 'B+]\n                  \
    \                [else (cond [(< grades 2.7) 'B]\n                           \
    \               [else (cond [(< grades 2.3) 'B-]\n                           \
    \                       [else (cond [(< grades 2.0) 'C+]\n                   \
    \                                       [else (cond [(< grades 1.7) 'C]\n    \
    \                                                                [else (cond [(<\
    \ grades 1.3) 'C-]\n                                                         \
    \                 [else (cond [(< grades 1.0) 'D+]\n                         \
    \                                                         [else (cond [(< grades\
    \ 0.7) 'D]\n                                                                 \
    \                         [else (cond [(< grades 0.0) 'D-]\n                 \
    \                                                                            \
    \   [else 'E]))]))]))]))]))]))\n", "  (fold-right \n   (lambda (x acc)\n     (cond\
    \ ((= x 0.0) acc)\n           ((< x 0.0) 'E)\n           ((< x (/ 1.0 3.0)) 'F)\n\
    \           ((< x (/ 1.0 2.0)) 'D)\n           ((< x (/ 1.0 1.0)) 'C)\n      \
    \     ((> x (/ 1.0 3.0)) 'B)\n           ((> x (/ 1.0 2.0)) 'A)\n           ((>\
    \ x (/ 1.0 1.0)) 'A)\n           ((= x 1.0) 'A+)))\n   'E grades\n   (reverse\
    \ grades)))\n", "  (let ((gpas (map numerical_gpa grades)))\n    (if (null? gpas)\
    \ 'E\n        (let* ((grades (map (lambda (g) \n                             \
    \ (cond ((> g 4.0) 'A+)\n                                    ((< g 4.0) 'A)\n\
    \                                    ((> g 3.7) 'A-)\n                       \
    \             ((< g 3.3) 'A+)\n                                    ((< g 3.0)\
    \ 'B)\n                                    ((> g 2.7) 'B)\n                  \
    \                  ((< g 2.3) 'B-)\n                                    ((< g\
    \ 2.0) 'C)\n                                    ((> g 1.7) 'C)\n             \
    \                       ((< g 1.3) 'C-)\n                                    ((<\
    \ g 1.0) 'D)\n                                    ((> g 0.7) 'D)\n           \
    \                         ((< g 0.0) 'D-)\n                                  \
    \  ((< g 0.0) 'E)\n                                    (else 'E))\n          \
    \                  gpas)\n                 (grade (first grades)))\n         \
    \ (cons grade (apply (lambda (s i)\n                                (cond ((null?\
    \ s) 'E)\n                                      ((= i 0) (g 'A+))\n          \
    \                            ((< i 0) (g 'A))\n                              \
    \        ((< i 3) (g 'A-))\n                                      ((< i 6) (g\
    \ 'A+))\n                                      ((< i 7) (g 'A))\n            \
    \                          ((< i 9) (g 'A-))\n                               \
    \       ((< i 12) (g 'B+))\n                                      ((< i 13) (g\
    \ 'B))\n                                      ((< i 16) (g 'B-))\n           \
    \                           ((< i 19) (g 'B+))\n                             \
    \         ((< i 20) (g 'B))\n                                      ((< i 23) (g\
    \ 'B-))\n                                      ((< i 26) (g 'C+))\n          \
    \                            ((< i 27) (g 'C))\n                             \
    \         ((< i 30) (g 'C-))\n                                      ((< i 33)\
    \ (g 'C+))\n                                      ((< i 34) (g 'C))\n        \
    \                              ((< i 36) (g 'C-))\n                          \
    \            ((< i 39) (g 'D+))\n                                      ((< i 40)\
    \ (g 'D))\n                                      ((< i 43) (g 'D-))\n        \
    \                              ((< i 46) (g 'D+))\n                          \
    \            ((< i 47) (g 'D))\n                                      ((< i 50)\
    \ (g 'D-))\n                                      ((< i 53) (g 'E))\n        \
    \                              (else 'E))\n                              grades\
    \ (cdr grades)))))))\n", "  (cond [(< grades 4.0) (+ grades 1)]\n        [(< grades\
    \ 3.7) (+ grades 2)]\n        [(< grades 3.3) (+ grades 3)]\n        [(< grades\
    \ 3.0) (+ grades 4)]\n        [(< grades 2.7) (+ grades 5)]\n        [(< grades\
    \ 2.3) (+ grades 6)]\n        [(< grades 2.0) (+ grades 7)]\n        [(< grades\
    \ 1.7) (+ grades 8)]\n        [(< grades 1.3) (+ grades 9)]\n        [(< grades\
    \ 1.0) (+ grades 10)]\n        [else (+ grades 11)])) ; no letter for grade of\
    \ 11\n  ", "  (cond [(< (- grades 3.0) 4.0) 'A+ (* 2 3)]\n        [(< (- grades\
    \ 3.3) 3.7) (* 2 2)]\n        [(< (- grades 3.7) 3.3) 'A- (* 2 2)]\n        [(<\
    \ (- grades 3.5) 3.0) 'B+ (* 2 2)]\n        [(< (- grades 3.7) 2.7) (* 2 1)]\n\
    \        [(< (- grades 3.3) 2.3) 'B- (* 2 1)]\n        [(< (- grades 3.0) 2.0)\
    \ 'C+ (* 2 1)]\n        [(< (- grades 3.7) 1.7) 'C (* 2 1)]\n        [(< (- grades\
    \ 3.3) 1.3) 'C- (* 2 1)]\n        [(< (- grades 3.0) 1.0) 'D+ (* 2 1)]\n     \
    \   [(< (- grades 3.7) 0.7) 'D (* 2 1)]\n        [(< (- grades 3.3) 0.0) 'D- (*\
    \ 2 1)]\n        [else 'E]))\n", "  (define (helper gpa)\n    (cond\n      [(<=\
    \ gpa 3.0)\n       (append 'B-)\n       ;; This case is for GPA 3.0-3.7 which\
    \ is A+\n       ;; (>)\n       ;; (>)\n       (append 'A+)]\n      [(<= gpa 3.3)\n\
    \       (append 'B-)\n       ;; This case is for GPA 3.3-3.7 which is A-\n   \
    \    ;; (>)\n       ;; (>)\n       (append 'A-)]\n      [(<= gpa 3.7)\n      \
    \ (append 'B-)\n       ;; This case is for GPA 3.7-3.3 which is B+\n       ;;\
    \ (>)\n       ;; (>)\n       (append 'B+)]\n      [(<= gpa 3.8)\n       (append\
    \ 'B-)\n       ;; This case is for GPA 3.8-3.7 which is B\n       ;; (>)\n   \
    \    ;; (>)\n       (append 'B)]\n      [(<= gpa 3.9)\n       (append 'B-)\n \
    \      ;; This case is for GPA 3.9-3.8 which is B\n       ;; (>)\n       ;; (>)\n\
    \       (append 'B)] \n      [(<= gpa 4.0)\n       (append 'B-)\n       ;; This\
    \ case is for GPA 4.0+\n       ;; (>)\n       ;; (>)\n       (append 'A)]\n  \
    \    [(<= gpa 4.1)\n       (append 'B-)\n       ;; This case is for GPA 4.1-4.0\
    \ which is C+\n       ;; (>)\n       ;; (>)\n       (append 'C)]\n      [(<= gpa\
    \ 4.2)\n       (append 'B-)\n       ;; This case is for GPA 4.2-4.1 which is C\n\
    \       ;; (>)\n       ;; (>)\n       (append 'C)]\n      [(<= gpa 4.3)\n    \
    \   (append 'B-)\n       ;; This case is for GPA 4.3-4.2 which is C\n       ;;\
    \ (>)\n       ;; (>)\n       (append 'C)]\n      [(<= gpa 4.4)\n       (append\
    \ 'B-)\n       ;; This case is for GPA 4.4-4.3 which is C\n       ;; (>)\n   \
    \    ;; (>)\n       (append 'C)]\n      ", "  (define (helper grade index)\n \
    \   (cond\n      [(equal? index 0)\n       (concat [' ' grade])]\n      [(greater-equal?\
    \ (modulo grade 3.7) 0)\n       (concat ['+' grade])]\n      [(greater-equal?\
    \ (modulo grade 3.3) 0)\n       (concat ['-' grade])]\n      [(greater-equal?\
    \ (modulo grade 3.0) 0)\n       (concat [' ' grade])]\n      [(greater-equal?\
    \ (modulo grade 2.7) 0)\n       (concat ['+' grade])]\n      [(greater-equal?\
    \ (modulo grade 2.3) 0)\n       (concat ['-' grade])]\n      [(greater-equal?\
    \ (modulo grade 2.0) 0)\n       (concat [' ' grade])]\n      [(greater-equal?\
    \ (modulo grade 1.7) 0)\n       (concat ['+' grade])]\n      [(greater-equal?\
    \ (modulo grade 1.3) 0)\n       (concat ['-' grade])]\n      [(greater-equal?\
    \ (modulo grade 1.0) 0)\n       (concat [' ' grade])]\n      [(greater-equal?\
    \ (modulo grade 0.7) 0)\n       (concat ['+' grade])]\n      [(greater-equal?\
    \ (modulo grade 0.0) 0)\n       (concat ['-' grade])]\n      [(equal? grade 0.0)\n\
    \       (concat [' ' grade])]\n      [else (helper grade (sub1 index))]))\n  (helper\
    \ (first grades) 0))", "  (let* ((letters \n         (map (lambda (grade)\n  \
    \              (cond\n                  ((< grade 4.0) 'A)\n                 \
    \ ((and (< grade 3.7) \n                        (> grade 3.0)) 'A)\n         \
    \         ((and (< grade 3.3) \n                        (> grade 3.0)) 'A-)\n\
    \                  ((and (< grade 3.0) \n                        (> grade 2.7))\
    \ 'B)\n                  ((and (< grade 2.3) \n                        (> grade\
    \ 2.0)) 'B)\n                  ((and (< grade 2.0) \n                        (>\
    \ grade 1.7)) 'C)\n                  ((and (< grade 1.7) \n                  \
    \      (> grade 1.0)) 'C)\n                  ((and (< grade 1.3) \n          \
    \              (> grade 0.7)) 'D)\n                  ((and (< grade 0.7) \n  \
    \                      (> grade 0.0)) 'D)\n                  else 'E)\n      \
    \          )\n           grades)\n          )\n         (letters-reverse\n   \
    \       (append (map (lambda (letter) (cons x letter)) letters)\n            \
    \      (map (lambda (letter) (cons letter x)) letters)\n                  )\n\
    \          )\n         (letter-grades\n          (map (lambda (letter) (cons (car\
    \ letter) (cadr letter))) letters)\n          )\n         (letter-grades-reverse\n\
    \          (append (map (lambda (letter) (cons (cadr letter) (car letter))) letters)\n\
    \                  (map (lambda (letter) (cons (car letter) (cdar letter))) letters)\n\
    \                  )\n          )\n         (letter-grades-reverse-reverse\n \
    \         (append (map (lambda (letter) (cons (cdr (car letter)) (cadr (car letter)))\
    \ letters)\n                  (map (lambda (letter) (cons (cadr (car letter))\
    \ (cdr (car letter))) letters)\n                  )\n                  (map (lambda\
    \ (letter) (cons (cdr (cdr letter)) (cadr (cdr letter))) letters)\n          \
    \        )\n                  (map (lambda (letter) (cons (cadr (cdr letter))\
    \ (cdr (cdr letter))) letters)\n                  )\n                  (map (lambda\
    \ (letter) (cons (cdr (cdr cdr)) (cadr (cdr cdr))) letters)\n                \
    \  )\n                  (map (lambda (letter) (cons (cadr (cdr cdr)) (cdr (cdr\
    \ cd", "  (let ((grades-list (cons '0 grades)))\n    (cond ((< grades 4.0)\n \
    \          (cons 'A+ (grade_equation grades))) \n          ((> grades 3.7)\n \
    \          (cons 'A (grade_equation grades))) \n          ((> grades 3.3)\n  \
    \         (cons 'A- (grade_equation grades))) \n          ((> grades 3.0)\n  \
    \         (cons 'B+ (grade_equation grades))) \n          ((> grades 2.7)\n  \
    \         (cons 'B (grade_equation grades))) \n          ((> grades 2.3)\n   \
    \        (cons 'B- (grade_equation grades))) \n          ((> grades 2.0)\n   \
    \        (cons 'C+ (grade_equation grades))) \n          ((> grades 1.7)\n   \
    \        (cons 'C (grade_equation grades))) \n          ((> grades 1.3)\n    \
    \       (cons 'C- (grade_equation grades))) \n          ((> grades 1.0)\n    \
    \       (cons 'D+ (grade_equation grades))) \n          ((> grades 0.7)\n    \
    \       (cons 'D (grade_equation grades))) \n          ((> grades 0.0)\n     \
    \      (cons 'E (grade_equation grades))) \n          (else grades-list))\n))\n",
  "  (cond [(< grades 0.0)\n         \"\"]\n        [(< grades 4.0)\n          (append\
    \ \"A+\" \n                  (numerical_letter_grade (- grades 4.0)))]\n     \
    \   [(< grades 3.7)\n          (append \"A\"\n                  (numerical_letter_grade\
    \ (- grades 3.7)))]\n        [(< grades 3.3)\n          (append \"A-\"\n     \
    \             (numerical_letter_grade (- grades 3.3)))]\n        [(< grades 3.0)\n\
    \          (append \"B+\"\n                  (numerical_letter_grade (- grades\
    \ 3.0)))]\n        [(< grades 2.7)\n          (append \"B\"\n                \
    \  (numerical_letter_grade (- grades 2.7)))]\n        [(< grades 2.3)\n      \
    \    (append \"B-\"\n                  (numerical_letter_grade (- grades 2.3)))]\n\
    \        [(< grades 2.0)\n          (append \"C+\"\n                  (numerical_letter_grade\
    \ (- grades 2.0)))]\n        [(< grades 1.7)\n          (append \"C\"\n      \
    \            (numerical_letter_grade (- grades 1.7)))]\n        [(< grades 1.3)\n\
    \          (append \"C-\"\n                  (numerical_letter_grade (- grades\
    \ 1.3)))]\n        [(< grades 1.0)\n          (append \"D+\"\n               \
    \   (numerical_letter_grade (- grades 1.0)))]\n        [(< grades 0.7)\n     \
    \     (append \"D\"\n                  (numerical_letter_grade (- grades 0.7)))]\n\
    \        [(< grades 0.0)\n          (append \"D-\"\n                  (numerical_letter_grade\
    \ (- grades 0.0)))]\n        [else\n          (append \"E\"\n                \
    \  (numerical_letter_grade (- grades 0.0)))]))\n", "  (cond\n    [(< grades (-\
    \ 5)) (list 'E)]\n    [(< grades (- 3.4)) (list 'D-)]\n    [(< grades (- 3.0))\
    \ (list 'D)]\n    [(< grades (- 2.7)) (list 'B-)]\n    [(< grades (- 2.3)) (list\
    \ 'B)]\n    [(< grades (- 2.0)) (list 'B-)]\n    [(< grades (- 1.7)) (list 'B)]\n\
    \    [(< grades (- 1.2)) (list 'B-)]\n    [(< grades (- 1.0)) (list 'B)]\n   \
    \ [(< grades (- 0.7)) (list 'B-)]\n    [(< grades (- 0.6)) (list 'B-)]\n    [(<\
    \ grades (- 0.5)) (list 'B-)]\n    [(< grades (- 0.4)) (list 'B-)]\n    [(< grades\
    \ (- 0.3)) (list 'B-)]\n    [(< grades (- 0.2)) (list 'B-)]\n    [(< grades (-\
    \ 0.1)) 'B-]\n    [(< grades (- 0.0)) 'B-]\n    [(< grades (- 0.0)) 'B-]\n   \
    \ [else (list 'B-)]\n  )\n)\n", "  (define (get-gpa grades)\n    (if (null? grades)\n\
    \        'e\n        (let ((gpa (car grades))\n              (index (length grades))\n\
    \              (lowest-gpa-index 0))\n          (if (< gpa 0)\n              'e\n\
    \              (if (< gpa (- lowest-gpa-index index))\n                  lowest-gpa-index\n\
    \                  (get-gpa (rest grades)))))))\n  (define (get-letter-grade gpa\
    \ lowest-gpa-index)\n    (if (< gpa 0)\n        'e\n        (cond ((> gpa (- lowest-gpa-index\
    \ index))\n              'e\n              (if (> gpa 0)\n                  'A+\
    \ (+ (/ gpa lowest-gpa-index)\n                        (if (< gpa 2)\n       \
    \                     0\n                            1)))\n                ((<\
    \ gpa 2)\n                  'A- (- (/ gpa lowest-gpa-index)\n                \
    \        (if (< gpa 2)\n                            0\n                      \
    \      1)))\n                ((> gpa 2)\n                  'B+ (+ (/ gpa lowest-gpa-index)\n\
    \                        (if (< gpa 2)\n                            0\n      \
    \                      1)))\n                ((< gpa 3)\n                  'B-\
    \ (- (/ gpa lowest-gpa-index)\n                        (if (< gpa 2)\n       \
    \                     0\n                            1)))\n                ((>\
    \ gpa 3)\n                  'C+ (+ (/ gpa lowest-gpa-index)\n                \
    \        (if (< gpa 2)\n                            0\n                      \
    \      1)))\n                ((< gpa 4)\n                  'C- (- (/ gpa lowest-gpa-index)\n\
    \                        (if (< gpa 2)\n                            0\n      \
    \                      1)))\n                ((> gpa 4)\n                  'D+\
    \ (+ (/ gpa lowest-gpa-index)\n                        (if (< gpa 2)\n       \
    \                     0\n                            1)))\n                ((<\
    \ gpa 5)\n                  'D- (- (/ gpa lowest-gpa-index)\n                \
    \        (if (< gpa 2)\n                            0\n                      \
    \      1)))\n                ((> gpa 5)\n                  'E\n              \
    \    (gpa (- lowest-gpa-index index))))))\n  (define (sum-letter-grades letter-grades)\n\
    \    (if (null? letter-grades)\n        'e\n        (let ((total (car letter-grades))\n\
    \              (count (length letter-grades))\n              (letter null))\n\
    \          (cond ((> total 0)\n                 total)\n                (else\n\
    \                 (cond ((< total 1)\n                        (set! letter ",
  "  \n  (define (loop gpa sum)\n    (cond\n      [(< gpa 4.0) (cons \"E\" sum)]\n\
    \      [(< gpa 3.7) (cons \"D+\" sum)]\n      [(< gpa 3.3) (cons \"D\" sum)]\n\
    \      [(< gpa 3.0) (cons \"C-\" sum)]\n      [(< gpa 2.7) (cons \"B-\" sum)]\n\
    \      [(< gpa 2.3) (cons \"B\" sum)]\n      [(< gpa 2.0) (cons \"A-\" sum)]\n\
    \      [(< gpa 1.7) (cons \"A+\" sum)]\n      [(< gpa 1.3) (cons \"A\" sum)]\n\
    \      [(< gpa 1.0) (cons \"A\" sum)]\n      [(< gpa 0.7) (cons \"A\" sum)]\n\
    \      [else (cons \"A\" sum)]\n    ))\n  \n  (loop (car grades) (+ (car grades)\
    \ sum)))\n", "  (if (= (length (filter number? (range 0..4 0))) 0)\n      (map\
    \ 'identity 'A B C D)\n      (let ((gpa (map number? (range 0..4 0))\n       \
    \     (letter_grade 'A B C D)))\n        (set! letter_grade (filter (lambda (x)\n\
    \                                      (let ((x (* gpa x)))\n                \
    \                        (= x grades)))\n                                  letter_grade)))))\n\
    </code>\nI really don't know why you have the (map 'identity 'A B C D) line. I\
    \ guess you wanted to use the letters as grades, but that function does not return\
    \ grades. I guess that function should return a list of letters.\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nHi, thank you for replying so quickly! I'm having trouble understanding\
    \ the code though. I don't understand how this program is getting the letter grades\
    \ for each student. My thought process was that I wanted to take in the list of\
    \ grades from (grade_equation), and compare each number in the list to the number\
    \ in the table I created for GPAs. If the numbers in the list are in range of\
    \ the numbers I created for GPAs, I multiply the number in the list by each of\
    \ the numbers I created for GPAs and then subtract the number in each column of\
    \ the table to see which letter the new number would fall into.\n<|/ c |>\n<|\
    \ c |>\nAm I missing something or can this only work for the first student in\
    \ the list?\n<|/ c |>\n<| c |>\nYep. I forgot to comment out the `(map 'identity\
    \ 'A B C D)` line. It was supposed to show that you could use the letters as grades\
    \ in the function. I will correct that.\n<|/ c |>\n<| c |>\nI guess this could\
    \ be written in a more readable form, but it should be fine as is.\n<|/ c |>\n\
    <| c |>\nYeah I understand the grade_equation function. I think my main problem\
    \ is understanding the numerical letter grade function and how it's using the\
    \ table to determine the letter grades.\n<|/ c |>\n<| a |>\nYour grade_equation\
    \ function is returning all of the letter grades for each student.\n<code>", " \
    \ (let loop ((grades grades)\n             (letter #\\A))\n    (cond\n      [(<\
    \ grades 4.0)\n       (set! letter (cons (cond [(< grades 3.7)\n             \
    \                         'A+]\n                                   [(< grades\
    \ 3.3)\n                                      'A- ]\n                        \
    \           [(< grades 3.0)\n                                      'B+]\n    \
    \                               [(< grades 2.7)\n                            \
    \          'B- ]\n                                   [(< grades 2.3)\n       \
    \                               'B-]\n                                   [(< grades\
    \ 2.0)\n                                      'C+]\n                         \
    \          [(< grades 1.7)\n                                      'C]\n      \
    \                             [(< grades 1.3)\n                              \
    \        'C-]\n                                   [(< grades 1.0)\n          \
    \                            'D+]\n                                   [(< grades\
    \ 0.7)\n                                      'D]\n                          \
    \         [(< grades 0.0)\n                                      'D-]\n      \
    \                             [(< grades 0.0)\n                              \
    \        'E]]\n                               letter))]\n      [(< grades 3.0)\n\
    \       (set! letter (cons (cond [(< grades 2.7)\n                           \
    \           'B+]\n                                   [(< grades 2.3)\n       \
    \                               'B-]\n                                   [(< grades\
    \ 2.0)\n                                      'C+]\n                         \
    \          [(< grades 1.7)\n                                      'C]\n      \
    \                             [(< grades 1.3)\n                              \
    \        'C-]\n                                   [(< grades 1.0)\n          \
    \                            'D+]\n                                   [(< grades\
    \ 0.7)\n                                      'D]\n                          \
    \         [(< grades 0.0)\n                                      'D-]\n      \
    \                             [(< grades 0.0)\n                              \
    \        'E]]\n                               letter))]\n      [(< grades 2.0)\n\
    \       (set! letter (cons (cond [(< grades 1.7)\n                           \
    \           'C]\n                                   [(< grades 1.3)\n        \
    \                              'C-]\n                                   [(< grades\
    \ 1.0)\n                                      'D+]\n                         \
    \          [(< grades 0.7)\n                                      'D]\n      \
    \                             [(< grades 0.0)\n                              \
    \        'D-]\n                                   [(< grades 0.0)\n          \
    \                            'E]]\n                               letter))]\n\
    \      [(< grades 1.0)\n       (set! letter (cons (cond [(< grades 0.7)\n    \
    \                                  'D]\n                                   [(<\
    \ grades 0.0)\n                                      'D-]\n                  \
    \                 [(< grades 0.0)\n                                      'E]]\n\
    \                               letter))]\n      [else\n       (set! letter (cons\
    \ 'E))]\n    letter))\n", "  (define (grading-rules grade)\n    (cond [(< grade\
    \ 4.0) 'A+]\n          [(>= grade 4.0) 'A]\n          [(< grade 3.7) (cons 'A\
    \ '+)]\n          [(< grade 3.3) 'A-]\n          [(>= grade 3.3) 'B+]\n      \
    \    [(>= grade 3.0) 'B]\n          [(< grade 2.7) (cons 'B '+)]\n          [(<\
    \ grade 2.3) 'B-]\n          [(>= grade 2.3) 'C+]\n          [(>= grade 2.0) (cons\
    \ 'C '+)]\n          [(< grade 1.7) (cons 'C '+)]\n          [(>= grade 1.7) 'C]\n\
    \          [(< grade 1.3) 'C-]\n          [(>= grade 1.3) 'D+]\n          [(>=\
    \ grade 1.0) (cons 'D '+)]\n          [(< grade 0.7) (cons 'D '+)]\n         \
    \ [(>= grade 0.7) 'D]\n          [(< grade 0.0) (cons 'D '+)]\n          [(>=\
    \ grade 0.0) 'E]\n          [(< grade 0.0) 'E]))\n  (let loop ((grades grades)\n\
    \             (grades (reverse grades))\n             (current 0))\n    (if (null?\
    \ grades)\n        '()\n        (let ((grade (car grades)))\n          (loop (cdr\
    \ grades)\n                (+ (cdr (grading-rules grade))\n                  current)\n\
    \                (+ grade 1))))))\n", "  (let\n    ((student-grades ((lambda (x\
    \ y)\n                       (if (< x y) 'A+ (- x))\n                        \
    \ (if (< x y) 'A (- x))\n                         (if (< x y) 'B+ (- x))\n   \
    \                      (if (< x y) 'B (- x))\n                         (if (<\
    \ x y) 'C+ (- x))\n                         (if (< x y) 'C (- x))\n          \
    \               (if (< x y) 'D+ (- x))\n                         (if (< x y) 'D\
    \ (- x))\n                         (if (< x y) 'E (- x))))))\n      (student-grades\
    \ grades 0))\n    (student-grades grades 1)))\n", "  (map \n   (lambda (x)\n \
    \     (if (<= x 3.0)\n          'A+ (+ (- x 4.0) 2.7)\n          'A+ (+ (- x 4.0)\
    \ 2.3)\n          'A+ (+ (- x 4.0) 2.0)\n          'A+ (+ (- x 4.0) 1.7)\n   \
    \       'A+ (+ (- x 4.0) 1.3)\n          'A+ (+ (- x 4.0) 1.0)\n          'A+\
    \ (+ (- x 4.0) 0.7)\n          'A+ (+ (- x 4.0) 0.0)\n          'A+ (+ (- x 3.7)\
    \ 2.7)\n          'A+ (+ (- x 3.7) 2.3)\n          'A+ (+ (- x 3.7) 2.0)\n   \
    \       'A+ (+ (- x 3.7) 1.7)\n          'A+ (+ (- x 3.7) 1.3)\n          'A+\
    \ (+ (- x 3.7) 1.0)\n          'A+ (+ (- x 3.7) 0.7)\n          'A+ (+ (- x 3.7)\
    \ 0.0)\n          'A+ (+ (- x 3.3) 2.7)\n          'A+ (+ (- x 3.3) 2.3)\n   \
    \       'A+ (+ (- x 3.3) 2.0)\n          'A+ (+ (- x 3.3) 1.7)\n          'A+\
    \ (+ (- x 3.3) 1.3)\n          'A+ (+ (- x 3.3) 1.0)\n          'A+ (+ (- x 3.3)\
    \ 0.7)\n          'A+ (+ (- x 3.3) 0.0)\n          'A+ (+ (- x 3.0) 2.7)\n   \
    \       'A+ (+ (- x 3.0) 2.3)\n          'A+ (+ (- x 3.0) 2.0)\n          'A+\
    \ (+ (- x 3.0) 1.7)\n          'A+ (+ (- x 3.0) 1.3)\n          'A+ (+ (- x 3.0)\
    \ 1.0)\n          'A+ (+ (- x 3.0) 0.7)\n          'A+ (+ (- x 3.0) 0.0)\n   \
    \       'A+ (+ (- x 2.7) 2.7)\n          'A+ (+ (- x 2.7) 2.3)\n          'A+\
    \ (+ (- x 2.7) 2.0)\n          'A+ (+ (- x 2.7) 1.7)\n          'A+ (+ (- x 2.7)\
    \ 1.3)\n          'A+ (+ (- x 2.7) 1.0)\n          'A+ (+ (- x 2.7) 0.7)\n   \
    \       'A+ (+ (- x 2.7) 0.0)\n          'A+ (+ (- x 2.3) 2.7)\n          'A+\
    \ (+ (- x 2.3) 2.3)\n          'A+ (+ (- x 2.3) 2.0)\n          'A+ (+ (- x 2.3)\
    \ 1.7)\n          'A+ (+ (- x 2.3) 1.3)\n          'A+ (+ (- x 2.3) 1.0)\n   \
    \       'A+ (+ (- x 2.3) 0.", "  (cond\n    [(empty? grades) 'E]\n    [(< 4.0\
    \ (first grades)) 'A+]\n    [(< 3.7 (first grades)) 'A]\n    [(< 3.3 (first grades))\
    \ 'A-]\n    [(< 3.0 (first grades)) 'B+]\n    [(< 2.7 (first grades)) 'B]\n  \
    \  [(< 2.3 (first grades)) 'B-]\n    [(< 2.0 (first grades)) 'C+]\n    [(< 1.7\
    \ (first grades)) 'C]\n    [(< 1.3 (first grades)) 'C-]\n    [(< 1.0 (first grades))\
    \ 'D+]\n    [(< 0.7 (first grades)) 'D]\n    [(< 0.0 (first grades)) 'D-]\n  \
    \  [else (first grades)]\n  )\n)\n", "  (define (next_grade grades)\n    (cond\
    \ [(< grades 0.0) 'D-]\n          [(< grades 0.7) 'D]\n          [(< grades 1.0)\
    \ 'C]\n          [(< grades 1.3) 'C]\n          [(< grades 1.7) 'B]\n        \
    \  [(< grades 2.0) 'B]\n          [(< grades 2.3) 'B-]\n          [(< grades 2.7)\
    \ 'B-]\n          [(< grades 3.0) 'B-]\n          [(< grades 3.3) 'B-]\n     \
    \     [(< grades 3.7) 'B+]\n          [(< grades 4.0) 'A+]\n          [(< grades\
    \ 4.7) 'A+]\n          [(< grades 5.0) 'A]\n          [(< grades 5.7) 'A]\n  \
    \        [(< grades 6.0) 'A]\n          [(< grades 6.7) 'A-]\n          [(< grades\
    \ 7.0) 'A-]\n          [(< grades 7.7) 'A-]\n          [(< grades 8.0) 'A-]\n\
    \          [(< grades 8.7) 'A-]\n          [(< grades 9.0) 'A-]\n          [(<\
    \ grades 9.7) 'A-]\n          [(< grades 10.0) 'A-]\n          [(< grades 10.7)\
    \ 'A-]\n          [(< grades 11.0) 'A-]\n          [(< grades 11.7) 'A-]\n   \
    \       [(< grades 12.0) 'A-]\n          [(< grades 12.7) 'A-]\n          [(<\
    \ grades 13.0) 'A-]\n          [(< grades 13.7) 'A-]\n          [(< grades 14.0)\
    \ 'A-]\n          [(< grades 14.7) 'A-]\n          [(< grades 15.0) 'A-]\n   \
    \       [(< grades 15.7) 'A-]\n          [(< grades 16.0) 'A-]\n          [(<\
    \ grades 16.7) 'A-]\n          [(< grades 17.0) 'A-]\n          [(< grades 17.7)\
    \ 'A-]\n          [(< grades 18.0) 'A-]\n          [(< grades 18.7) 'A-]\n   \
    \       [(< grades 19.0) 'A-]\n          [(< grades 19.7) 'A-]\n          [(<\
    \ grades 20.0) 'A-]\n          [(", "  (let ((max_gpa 3.0))\n    (map (lambda\
    \ (gpa grade index)\n           (if (< (gpa max_gpa) (- grade max_gpa))\n    \
    \           (cond [(> grade (- max_gpa gpa))\n                       (cond [(<\
    \ grade (- max_gpa gpa))\n                             grade]\n              \
    \               [(< grade (- max_gpa gpa))\n                              'F]\n\
    \                             [(< grade (- max_gpa gpa))\n                   \
    \           'D-]\n                             [(< grade (- max_gpa gpa))\n  \
    \                            'C-]\n                             [(< grade (- max_gpa\
    \ gpa))\n                              'B-]\n                             [(<\
    \ grade (- max_gpa gpa))\n                              'A-]\n               \
    \              [(< grade (- max_gpa gpa))\n                              'A+]\n\
    \                             [(< grade (- max_gpa gpa))\n                   \
    \           'A+]\n                             [(< grade (- max_gpa gpa))\n  \
    \                            'D+]\n                             [(< grade (- max_gpa\
    \ gpa))\n                              'D+]\n                             [(<\
    \ grade (- max_gpa gpa))\n                              'C+]\n               \
    \              [(< grade (- max_gpa gpa))\n                              'C+]\n\
    \                             [(< grade (- max_gpa gpa))\n                   \
    \           'B-]\n                             [(< grade (- max_gpa gpa))\n  \
    \                            'B-]\n                             [(< grade (- max_gpa\
    \ gpa))\n                              'B-]\n                             [(<\
    \ grade (- max_gpa gpa))\n                              'B-]\n               \
    \              [(< grade (- max_gpa gpa))\n                              'B-]\n\
    \                             [(< grade (- max_gpa gpa))\n                   \
    \           'B-]\n                             [(< grade (- max_gpa gpa))\n  \
    \                            'B-]\n                             [(< grade (- max_gpa\
    \ gpa))\n                              'B-]\n                             [(<\
    \ grade (- max_gpa gpa))\n                              'B-]\n               \
    \              [(< grade (- max_gpa gpa))\n                              'B-]\n\
    \                             [(< grade (- max_gpa gpa))\n                   \
    \           'B-]\n                             [(< grade (- max_gpa gpa))\n  \
    \                            'B-]\n                             [(< grade (- max_gpa\
    \ gpa))\n                              'B-", "  ; Calculate the maximum grade.\
    \ \n  (define max-grade (max grades))\n  ; Calculate the minimum grade. \n  (define\
    \ min-grade (min grades))\n  ; Calculate the mid-point grade using the average.\n\
    \  (define mid-point (/ (apply + grades) (apply - grades grades)))\n  ; Calculate\
    \ the letter grade using the formula below. \n  (define letter \n    ((if (> mid-point\
    \ 0.0) \n      'A+ (if (> max-grade 3.0) \n            'A \n            (if (>\
    \ max-grade 2.7) 'A- 'B+ (if (> max-grade 2.3) 'B 'B- 'C+ (if (> max-grade 2.0)\
    \ 'C 'C-' \n                                                                 \
    \    'D+ (if (> max-grade 1.7) 'D \n                                         \
    \                                'D-' \n                                     \
    \                                    'E))))))\n     (if (< mid-point 0.0) \n \
    \     'A+ (if (< min-grade 3.0) \n            'A \n            (if (< min-grade\
    \ 2.7) 'A- 'B+ (if (< min-grade 2.3) 'B 'B- 'C+ (if (< min-grade 2.0) 'C 'C-'\
    \ \n                                                                     'D+ (if\
    \ (< min-grade 1.7) 'D \n                                                    \
    \                     'D-' \n                                                \
    \                         'E)))))))))\n  ; Return the letter grade.\n  letter)\n",
  "  (if (null? grades)\n      '(null)\n      (append (cons (quotient grades 4.0)\
    \ \n                    (g1_letter_grade (quotient grades 4.0)))\n           \
    \   (numerical_letter_grade (remainder grades 4.0)))\n      )\n      )\n", " \
    \ (let ([total (+ grades 4.0)]\n        [gpa (remainder total 4.0)]\n        [letter\
    \ \"A+\"])\n    (if (< gpa 3.7)\n        (cond [(< gpa 3.3) (cons (substring letter\
    \ (+ 1 0)) \"A\")]\n              [(< gpa 3.0) (cons (substring letter (+ 1 0))\
    \ \"B\")]\n              [(< gpa 2.7) (cons (substring letter (+ 1 0)) \"B\")]\n\
    \              [(< gpa 2.3) (cons (substring letter (+ 1 0)) \"B\")]\n       \
    \       [(< gpa 2.0) (cons (substring letter (+ 1 0)) \"C\")]\n              [(<\
    \ gpa 1.7) (cons (substring letter (+ 1 0)) \"C\")]\n              [(< gpa 1.3)\
    \ (cons (substring letter (+ 1 0)) \"C\")]\n              [(< gpa 1.0) (cons (substring\
    \ letter (+ 1 0)) \"D\")]\n              [(< gpa 0.7) (cons (substring letter\
    \ (+ 1 0)) \"D\")]\n              [(< gpa 0.0) (cons (substring letter (+ 1 0))\
    \ \"D\")]\n              [(< gpa 0.0) (cons (substring letter (+ 1 0)) \"E\")]\n\
    \              [(< gpa 0.0) (cons (substring letter (+ 1 0)) \"E\")]\n       \
    \       [(< gpa 0.0) (cons (substring letter (+ 1 0)) \"E\")]\n              [(<\
    \ gpa 0.0) (cons (substring letter (+ 1 0)) \"E\")]\n              [(< gpa 0.0)\
    \ (cons (substring letter (+ 1 0)) \"E\")]\n              [(< gpa 0.0) (cons (substring\
    \ letter (+ 1 0)) \"E\")]\n              [(< gpa 0.0) (cons (substring letter\
    \ (+ 1 0)) \"E\")]\n              [(< gpa 0.0) (cons (substring letter (+ 1 0))\
    \ \"E\")]\n              [(< gpa 0.0) (cons (substring letter (+ 1 0)) \"E\")]\n\
    \              [(< gpa 0.0) (cons (substring letter (+ 1 0)) \"E\")]\n       \
    \       [(< gpa 0.0) (cons (substring letter (+ 1 0)) \"E\")]\n              [(<\
    \ gpa 0.0) (cons (substring letter (+ 1 0)) \"E\")]\n              [(< gpa 0.0)\
    \ (cons (substring letter (+ 1 0)) \"E\")]\n              [(< gpa 0.0) (", " \
    \ (define (helper helper index)\n    (define (find-index i ranges)\n      (cond\
    \ ((null? ranges) index)\n            ((< i ranges) (+ 1 (find-index i (cdr ranges)))\n\
    \            (else index)))\n    (if (= index 0)\n        (cdr (helper (helper\
    \ (cdr helper) (car helper)) (car helper)))\n        (helper (helper (helper (cdr\
    \ helper) (car helper)) (car helper)) index)))\n  (if (null? grades)\n      \"\
    \"\n      (let ([min (floor grades (- 1 (/ (length grades) 2))) (max grades)])\n\
    \        (printf \"[~a, ~a, ~a]~%\" min max \n              (numerical_letter_grade\
    \ (apply + (range min max)))))))\n", "  (define (helper g1 g2)\n    (if (> g1\
    \ 3.5)\n        (cond ((< g1 2.5)\n              (cond ((< g1 2.0)\n         \
    \            (cond ((< g1 1.7)\n                            (cons g1 '(E)))\n\
    \                          ((< g1 1.3)\n                            (cons g1 '(E)))\n\
    \                          ((< g1 1.0)\n                            (cons g1 '(F)))\n\
    \                          ((< g1 0.7)\n                            (cons g1 '(G)))\n\
    \                          ((< g1 0.0)\n                            (cons g1 '(G))))\n\
    \                      ((< g1 0.0)\n                        (cons g1 '(G))))\n\
    \                  ((< g1 0.0)\n                    (cons g1 '(G))))\n       \
    \       ((< g1 0.0)\n                (cons g1 '(G))))\n          ((< g1 0.0)\n\
    \            (cons g1 '(G)))))\n    (cond ((< g1 3.5)\n          (cond ((< g1\
    \ 2.5)\n                 (cons g1 '(A+)))\n              ((< g1 2.5)\n       \
    \          (cons g1 '(A+)))\n              ((< g1 2.5)\n                 (cons\
    \ g1 '(A+)))\n              ((< g1 2.5)\n                 (cons g1 '(A+)))\n \
    \             ((< g1 2.5)\n                 (cons g1 '(A+)))\n              ((<\
    \ g1 2.5)\n                 (cons g1 '(A+)))\n              ((< g1 2.5)\n    \
    \             (cons g1 '(A+)))\n              ((< g1 2.5)\n                 (cons\
    \ g1 '(A+)))\n              ((< g1 2.5)\n                 (cons g1 '(A+)))\n \
    \             ((< g1 2.5)\n                 (cons g1 '(A+)))\n              ((<\
    \ g1 2.5)\n                 (cons g1 '(A+)))\n              ((< g1 2.5)\n    \
    \             (cons g1 '(A+)))\n              ((< g1 2.5)\n                 (cons\
    \ g1 '(A+)))\n              ((< g1 2.5)\n                 (cons g1 '(A+)))\n \
    \             ((< g1 2.5)\n                 (cons g1 '(A+)))\n              ((<\
    \ g1 2.5)\n                 (cons g1 '(A+)))\n              ((< g1 2.5)\n    \
    \             (cons g1 '(A+)))", "  (foldr\n    (lambda (x y)\n      (cond \n\
    \        ((< y 3.0) (list 'A+ (cons x y)))\n        ((< y 3.3) (list 'A (cons\
    \ x y)))\n        ((< y 3.7) (list 'A (cons x (sub1 y))))\n        ((< y 3.8)\
    \ (list 'B (cons x (sub1 y))))\n        ((< y 3.0) (list 'B (cons x (sub1 y))))\n\
    \        ((< y 3.3) (list 'B (cons x (sub1 y))))\n        ((< y 3.7) (list 'B\
    \ (cons x (sub1 y))))\n        ((< y 3.8) (list 'B (cons x (sub1 y))))\n     \
    \   ((< y 3.0) (list 'C (cons x (sub1 y))))\n        ((< y 3.3) (list 'C (cons\
    \ x (sub1 y))))\n        ((< y 3.7) (list 'C (cons x (sub1 y))))\n        ((<\
    \ y 3.8) (list 'C (cons x (sub1 y))))\n        ((< y 3.0) (list 'D (cons x (sub1\
    \ y))))\n        ((< y 3.3) (list 'D (cons x (sub1 y))))\n        ((< y 3.7) (list\
    \ 'D (cons x (sub1 y))))\n        ((< y 3.8) (list 'D (cons x (sub1 y))))\n  \
    \      ((< y 3.0) (list 'D (cons x (sub1 y))))\n        ((< y 3.3) (list 'D (cons\
    \ x (sub1 y))))\n        ((< y 3.7) (list 'D (cons x (sub1 y))))\n        ((<\
    \ y 3.8) (list 'D (cons x (sub1 y))))\n        ((< y 3.0) (list 'E (cons x (sub1\
    \ y))))\n        (else (list 'E (cons x (sub1 y))))\n      )\n    )\n    '(0 0\
    \ 0)\n    grades\n  )\n)\n", "  (let* ((min-gpa  (first grades))\n         (max-gpa\
    \  (second grades)))\n    (cond\n      [(> min-gpa max-gpa)\n       (string-append\
    \ \"D-\"]\n      [(< min-gpa max-gpa)\n       (string-append \"D+\"]\n      [(<\
    \ min-gpa max-gpa . 0)\n       (string-append \"D\"]\n      [(< min-gpa max-gpa\
    \ . 7) (string-append \"A-\"]\n      [(< min-gpa max-gpa . 3) (string-append \"\
    A+\"]\n      [(< min-gpa max-gpa . 6)  (string-append \"A-\"]\n      [(< min-gpa\
    \ max-gpa . 5)  (string-append \"B+\"]\n      [(< min-gpa max-gpa . 4)  (string-append\
    \ \"B-\"]\n      [(< min-gpa max-gpa . 2)  (string-append \"B+\"]\n      [(< min-gpa\
    \ max-gpa . 1)  (string-append \"B-\"]\n      [else (string-append \"C\"]))))))\n",
  "  (cond [(< grades 4)  'A+]\n        [(< grades 3.7)  'A]\n        [(< grades 3.3)\
    \ 'A-]\n        [(< grades 3)   'B+]\n        [(< grades 2.7)  'B]\n        [(<\
    \ grades 2.3) 'B-]\n        [(< grades 2)   'C+]\n        [(< grades 1.7)  'C]\n\
    \        [(< grades 1.3) 'C-]\n        [(< grades 1)   'D+]\n        [(< grades\
    \ 0.7)  'D]\n        [else             'D-]))", "  (if (null? grades)\n      'E\n\
    \      (cond (> (car grades) 0) \n             (let* ((a (car grades)) (c 'C)\
    \ (e 'E))\n               (cond ((< a 3) (cond ((< a 2) (cond ((< a 1) (cond ((<\
    \ a 0) (car e))) (cond ((< c 1) (cond ((< c 0) (car e))) (cond ((< e 2) (cond\
    \ ((< e 1) (car e))) (cond ((< c 2) (car e)))))) (car c))) (cond ((< c 2) (car\
    \ c))) (car c))) (car c))) (car c)))))\n", "  (define (helper score grade)\n \
    \   (cond\n      [(> score 0) (cons grade (helper score (- score 1)))]\n     \
    \ [(< score 0) '()]))\n  (helper grades 0))\n", "  (define grade-table (list\n\
    \                      [4.0 'A+']\n                      [(< 3.7 grades) 'A']\n\
    \                      [(< 3.3 grades) 'A-']\n                      [(< 3.0 grades)\
    \ 'B+']\n                      [(< 2.7 grades) 'B']\n                      [(<\
    \ 2.3 grades) 'B-']\n                      [(< 2.0 grades) 'C+']\n           \
    \           [(< 1.7 grades) 'C']\n                      [(< 1.3 grades) 'C-']\n\
    \                      [(< 1.0 grades) 'D+']\n                      [(< 0.7 grades)\
    \ 'D']\n                      [grades 'D-']\n                      [0 'E]))\n\
    \  (let ([current-grade (first grades)])\n    (cond\n      [(= current-grade 0.0)\
    \ 'E]\n      [(< current-grade 4.0) \n       (append (list current-grade) (numerical_letter_grade\
    \ (rest grades)))]\n      [(< current-grade 3.7)\n       (append (list current-grade)\
    \ (numerical_letter_grade (rest grades)))]\n      [(< current-grade 3.3)\n   \
    \    (append (list current-grade) (numerical_letter_grade (rest grades)))]\n \
    \     [(< current-grade 3.0)\n       (append (list current-grade) (numerical_letter_grade\
    \ (rest grades)))]\n      [(< current-grade 2.7)\n       (append (list current-grade)\
    \ (numerical_letter_grade (rest grades)))]\n      [(< current-grade 2.3)\n   \
    \    (append (list current-grade) (numerical_letter_grade (rest grades)))]\n \
    \     [(< current-grade 2.0)\n       (append (list current-grade) (numerical_letter_grade\
    \ (rest grades)))]\n      [(< current-grade 1.7)\n       (append (list current-grade)\
    \ (numerical_letter_grade (rest grades)))]\n      [(< current-grade 1.3)\n   \
    \    (append (list current-grade) (numerical_letter_grade (rest grades)))]\n \
    \     [(< current-grade 1.0)\n       (append (list current-grade) (numerical_letter_grade\
    \ (rest grades)))]\n      [(< current-grade 0.7)\n       (append (list current-grade)\
    \ (numerical_letter_grade (rest grades)))]\n      [else \n       (numerical_letter_grade\
    \ (rest grades))])))\n", "  (cond\n    ((null? grades) 'E) \n    ((< grades 0)\
    \ 'D-) \n    ((< grades 1) 'D+) \n    ((< grades 2) 'B+) \n    ((< grades 3) 'B)\
    \ \n    ((< grades 4) 'B-) \n    ((< grades 5) 'A-) \n    ((< grades 6) 'A) \n\
    \    ((< grades 7) 'A+) \n    (else 'A)))\n", "  (if (< (- grades 4.0) 0) \n \
    \     (cons 'A+ (numerical_letter_grade (- grades 4.0)))\n      (cons 'A (numerical_letter_grade\
    \ (- grades 4.0)))\n      (cons 'B+ (numerical_letter_grade (- grades 3.7)))\n\
    \      (cons 'B (numerical_letter_grade (- grades 3.7)))\n      (cons 'B- (numerical_letter_grade\
    \ (- grades 3.3)))\n      (cons 'C+ (numerical_letter_grade (- grades 3.3)))\n\
    \      (cons 'C (numerical_letter_grade (- grades 3.3)))\n      (cons 'C- (numerical_letter_grade\
    \ (- grades 3.0))))\n  (if (< (- grades 3.7) 0) \n      (cons 'A+ (numerical_letter_grade\
    \ (- grades 3.7)))\n      (cons 'A (numerical_letter_grade (- grades 3.7)))\n\
    \      (cons 'B+ (numerical_letter_grade (- grades 3.3)))\n      (cons 'B (numerical_letter_grade\
    \ (- grades 3.3)))\n      (cons 'B- (numerical_letter_grade (- grades 3.0))))\n\
    \  (if (< (- grades 3.3) 0) \n      (cons 'A+ (numerical_letter_grade (- grades\
    \ 3.3)))\n      (cons 'A (numerical_letter_grade (- grades 3.3)))\n      (cons\
    \ 'B+ (numerical_letter_grade (- grades 3.0))))\n  (if (< (- grades 3.0) 0) \n\
    \      (cons 'A+ (numerical_letter_grade (- grades 3.3)))\n      (cons 'A (numerical_letter_grade\
    \ (- grades 3.3)))\n      (cons 'B+ (numerical_letter_grade (- grades 2.7)))\n\
    \      (cons 'B (numerical_letter_grade (- grades 2.7)))\n      (cons 'B- (numerical_letter_grade\
    \ (- grades 2.3))))\n  (if (< (- grades 2.7) 0) \n      (cons 'A+ (numerical_letter_grade\
    \ (- grades 2.7)))\n      (cons 'A (numerical_letter_grade (- grades 2.7)))\n\
    \      (cons 'B+ (numerical_letter_grade (- grades 2.3)))\n      (cons 'B (numerical_letter_grade\
    \ (- grades 2.3)))\n      (cons 'B- (numerical_letter_grade (- grades 2.0))))\n\
    \  (if (< (- grades 2.3) ", "  (let loop ((grades (append grades ((list 'E))))\
    \ \n             (current-grades (first grades)) \n             (letters (second\
    \ grades)))\n    (cond ((null? grades) \n           (list letters))\n        \
    \  ((> (first grades) current-grades)\n           (append letters (numerical_letter_grade\
    \ (rest grades))))\n          (else\n           (loop (rest grades)\n        \
    \         (first grades)\n                 (cons (list (first current-grades)\
    \ letters)\n                      letters))))))\n", "  (let loop ((grades (in-list\
    \ grades))\n             (current-grade 0))\n    (if (null? grades)\n        null\n\
    \        (let* ((grade (car grades))\n               (remainder (expt grade -1))\n\
    \               (one-point (if (< grade 3) 1 0))\n               (two-point (if\
    \ (< grade 3) 2 0))\n               (three-point (if (< grade 3) 3 0))\n     \
    \          (four-point (if (< grade 3) 4 0))\n               (above-three-point\
    \ (if (< remainder 3) 4 0))\n               (above-two-point (if (< remainder\
    \ 3) 3 0))\n               (above-one-point (if (< remainder 3) 2 0))\n      \
    \         (above-zero 1))\n          (if (= one-point 4)\n              (if (=\
    \ two-point 4)\n                  (if (= three-point 4)\n                    \
    \  (if (= four-point 4)\n                          (if (< grades 3)\n        \
    \                      (if (< grades 2)\n                                  (if\
    \ (< grades 1)\n                                      (if (= remainder 0)\n  \
    \                                        (if (= remainder 3)\n               \
    \                               'D+\n                                        \
    \      'D-\n                                              (if (= remainder 2)\n\
    \                                                  'C+\n                     \
    \                             'C\n                                           \
    \       (if (= remainder 1)\n                                                \
    \      'B+\n                                                      'B\n       \
    \                                               'A-\n                        \
    \                              'A))))))\n                              (if (<\
    \ grades 3)\n                                  (if (< grades 2)\n            \
    \                          (if (< grades 1)\n                                \
    \          (if (= remainder 0)\n                                             \
    \ 'B+\n                                              'B\n                    \
    \                          (if (= remainder 1)\n                             \
    \                     'A-\n                                                  'A))))))\n\
    \                              (if (< grades 3)\n                            \
    \      (if (< grades 2)\n                                      (if (< grades 1)\n\
    \                                          (if (= remainder 0)\n             \
    \                                 'A-\n                                      \
    \        'A))))))\n                              (if (< grades 3)\n          \
    \                        (if (< grades 2)\n                                  \
    \    (if (< grades 1)\n                                          (if (= remainder\
    \ 0)\n                                              'A-\n                    \
    \                          'A))))))\n                          (if (= three-point\
    \ 4)\n                              (if (= four-point 4)\n                   \
    \               (if (< grades 3)\n                                      (if (<\
    \ grades 2)\n                                          (if (< grades 1)\n    \
    \                                          (if (= remainder 0)\n             \
    \                                     (if (= remainder 3)\n                  \
    \                                    'D+\n                                   \
    \                   'D\n                                                     \
    \ (if (= remainder 2)\n                                                      \
    \    'C+\n                                                          'C", "  (if\
    \ (= grades 0.0) 'D\n      (if (<= grades 3.0)\n          'A+\n          (if (<=\
    \ grades 3.7) \n              'A\n              (if (<= grades 3.3)\n        \
    \          'A-\n                  'B+\n                  (if (<= grades 2.7) \n\
    \                      'B\n                      (if (<= grades 2.3) \n      \
    \                    'B-\n                          'C+\n                    \
    \      (if (<= grades 1.7) \n                              'C\n              \
    \                (if (<= grades 1.3)\n                                  'C-\n\
    \                                  'D+\n                                  (if\
    \ (<= grades 0.7) \n                                      'D\n               \
    \                       'D-\n                                      'E)))))))))\n",
  "  (define (grade_list grade)\n    (define (helper curr next_grade next_grade-sum)\n\
    \      (cond ((null? next_grade) (append curr 'E))\n            ((< (/ next_grade\
    \ next_grade-sum) 0.0) 'E) ; < or =\n            (else (append curr (letter (/\
    \ next_grade next_grade-sum))))))\n    (helper grades '() 0.0))\n  (grade_list\
    \ grades))\n</code>\n<|/ a dscore=4 |>\n<| c |>\nthank you so much for that helpful\
    \ answer. I just started learning racket yesterday, and was wondering if there\
    \ are any resources you would recommend me to learn more about racket? like an\
    \ online tutorial or something?\n<|/ c |>\n<| c |>\nI don't know any particularly\
    \ good online tutorials. I've been meaning to learn about Racket for about a year\
    \ or two at my new job, though I haven't really tried anything yet. I think you'll\
    \ find [the book by Guido van Rossum from MIT](http://mitpress.mit.edu/racket/)\
    \ to be the best resource for learning Racket. If you want to know more about\
    \ Racket itself, I believe [Learn Racket](http://www.learnracket.org/) is a great\
    \ resource.\n<|/ c |>\n<| c |>\nThanks so much for your help. Really appreciate\
    \ it.\n<|/ c |>\n<| a |>\nHere's another solution which uses functional programming\
    \ and takes into account the fact that the sum of the grades should not exceed\
    \ 100, so that the grades are never negative and that there are no negative grades.\
    \ The sum is always positive, meaning that a negative grade would result in an\
    \ infinite list.\n<code>", "  (cond\n    [(empty? grades) 'E]\n    [(equal? (first\
    \ grades) 0.0) (cons 'D empty)]\n    [else (cons (cond\n                   [(<=\
    \ (first grades) 3.3)  'A- ]\n                   [(<= (first grades) 3.7)  'A\
    \ ]\n                   [(<= (first grades) 3.9)  'A+ ]\n                   [(<=\
    \ (first grades) 4.3)  'B ]\n                   [(<= (first grades) 4.7)  'B+\
    \ ]\n                   [(<= (first grades) 5.0)  'B ]\n                   [(<=\
    \ (first grades) 5.3)  'B-]\n                   [(<= (first grades) 5.7)  'B ]\n\
    \                   [(<= (first grades) 5.9)  'B+ ]\n                   [(<= (first\
    \ grades) 6.3)  'C- ]\n                   [(<= (first grades) 6.7)  'C ]\n   \
    \                [(<= (first grades) 6.9)  'C+ ]\n                   [(<= (first\
    \ grades) 7.3)  'C]\n                   [(<= (first grades) 7.7)  'C ]\n     \
    \              [(<= (first grades) 7.9)  'C+ ]\n                   [(<= (first\
    \ grades) 8.3)  'C-]\n                   [(<= (first grades) 8.7)  'C-]\n    \
    \               [(<= (first grades) 8.9)  'C- ]\n                   [(<= (first\
    \ grades) 9.3)  'C-]\n                   [(<= (first grades) 9.7)  'C- ]\n   \
    \                [(<= (first grades) 9.9)  'C-]\n                   [(<= (first\
    \ grades) 10.3)  'C- ]\n                   [(<= (first grades) 10.7)  'C- ]\n\
    \                   [(<= (first grades) 11.0)  'C ]\n                   [(<= (first\
    \ grades) 11.3)  'C+ ]\n                   [(<= (first grades) 11.7)  'C+ ]\n\
    \                   [(<= (first grades) 11.9)  'C+ ]\n                   [(<=\
    \ (first grades) 12.3)  'C+ ]\n                   [(<= (first grades) 12.7)  'C+\
    \ ]\n                   [(<= (first grades) 13.0)  'C+ ]\n                   [(<=\
    \ (first grades) 13.3)  'C+ ]\n                   [(<= (first grades) 13.7)  'C+\
    \ ]\n                   [(<= (first grades) 13.9)  'C+ ]\n                   [(<=\
    \ (first grades) 14.3)  'C+ ]\n                   [(<= (first grades) 14.7)  'C+\
    \ ]\n", "  (let ((lowest-grade (/ (* -1 5) (abs grades))))\n    (map (lambda (grade)\n\
    \           (if (< grade lowest-grade)\n               (cons 'D grade)\n     \
    \          (cons (if (> grade lowest-grade) (+ grade lowest-grade)\n         \
    \                    (- grade lowest-grade))\n                     (numerical_letter_grade\
    \ (- grade lowest-grade))))))\n    (map (lambda (grades)\n           (map (lambda\
    \ (grade)\n                   (if (< grade lowest-grade)\n                   \
    \    (cons 'D grade)\n                       (cons (if (> grade lowest-grade)\
    \ (+ grade lowest-grade)\n                                   (- grade lowest-grade))\n\
    \                            (numerical_letter_grade (- grade lowest-grade)))))\
    \ grades)) grades))", "  (cond\n    [(< grades 3.5) (cons 'A-)]\n    [(< grades\
    \ 3.0) (cons 'B-)]\n    [(< grades 2.7) (cons 'B-)]\n    [(< grades 2.3) (cons\
    \ 'B-)]\n    [(< grades 2.0) (cons 'C-)]\n    [(< grades 1.7) (cons 'C)]\n   \
    \ [(< grades 1.3) (cons 'C-)]\n    [(< grades 1.0) (cons 'D-)]\n    [(< grades\
    \ 0.7) (cons 'D)]\n    [(< grades 0.0) (cons 'D)]\n    [(< grades 0.0) (cons 'E)]\n\
    \    [else (cons 'F)]\n  )\n)\n", "  (let ([gpa (car (cons (car grades) (cdr grades)))])\n\
    \    (cond [(< gpa 3.0)\n           (cond [(< gpa 3.7)\n                    (cons\
    \ '+\n                           (cons 'A (numerical_letter_grade (cdr grades))))]\n\
    \                   [(< gpa 3.3)\n                    (cons '+\n             \
    \              (cons 'A '(numerical_letter_grade (cdr grades))))]\n          \
    \         [(< gpa 3.0)\n                    (cons '+\n                       \
    \    (cons 'A '(numerical_letter_grade (cdr grades))))]\n                   [(<\
    \ gpa 2.7)\n                    (cons '+'\n                           (cons 'B\
    \ (numerical_letter_grade (cdr grades))))]\n                   [(< gpa 2.3)\n\
    \                    (cons '+'\n                           (cons 'B (numerical_letter_grade\
    \ (cdr grades))))]\n                   [(< gpa 2.0)\n                    (cons\
    \ '+\n                           (cons 'B '(numerical_letter_grade (cdr grades))))]\n\
    \                   [(< gpa 1.7)\n                    (cons '+'\n            \
    \               (cons 'C (numerical_letter_grade (cdr grades))))]\n          \
    \         [(< gpa 1.3)\n                    (cons '+\n                       \
    \    (cons 'C '(numerical_letter_grade (cdr grades))))]\n                   [(<\
    \ gpa 1.0)\n                    (cons '+\n                           (cons 'C\
    \ '(numerical_letter_grade (cdr grades))))]\n                   [(< gpa 0.7)\n\
    \                    (cons '+'\n                           (cons 'D (numerical_letter_grade\
    \ (cdr grades))))]\n                   [(< gpa 0.0)\n                    (cons\
    \ '+'\n                           (cons 'D '(numerical_letter_grade (cdr grades))))]\n\
    \                   [(< gpa 0.0)\n                    (cons '+'\n            \
    \               (cons 'D '(numerical_letter_grade (cdr grades))))]\n         \
    \          [(< gpa 0.0)\n                    (cons '+'\n                     \
    \      (cons 'E '(numerical_letter_grade (cdr grades))))]\n                  \
    \ [(< gpa 0.0)\n                    (cons '+'\n                           (cons\
    \ 'E '(numerical_letter_grade (cdr grades))))])\n          [(< gpa 3.0)\n    \
    \       (cons '+\n                 (cons 'A '(numerical_letter_grade (cdr grades))))]\n\
    \          [(< gpa 3.0)\n           (con", "  (define (find x y grades)\n    (define\
    \ (loop a b)\n      (cond \n        [(< a b) (cond \n                   [(< x\
    \ a) (cons a-b b)]\n                   [else (cons a-b b)]\n                 \
    \ )]\n        [else (cons a-b b)]))\n    (loop grades \"\"))\n  (define (append\
    \ a b)\n    (if (eq? a \"\")\n        (concat b)\n        (cons a (cons b \"\"\
    ))))\n  (define (subtract a b)\n    (if (eq? a \"\")\n        (cons b \"-\")\n\
    \        (cons (sub1 a) (cons (sub1 b) \"\"))))\n  (define (sum a)\n    (if (null?\
    \ a)\n        0\n        (+ (car a) (sum (cdr a)))))\n  (define (mean a)\n   \
    \ (/ sum (length a)))\n  (define (numerical_average grades)\n    (/ mean (length\
    \ grades)))\n  (define (letters grades)\n    (append (find grades 0 grades)\n\
    \            (find grades 1 grades)\n            (find grades 2 grades)\n    \
    \        (find grades 3 grades))) \n  (letters grades))\n", "  (define (grade_helper\
    \ x)\n    (if (= x 0)\n        'E\n        (if (>= x 3.7)\n            (cond ((>\
    \ x 3.3)\n                  (cond ((> x 3.0) (cons 'B+) (cons 'B) (cons 'B-)))\n\
    \                      ((> x 3.0) (cons 'C+) (cons 'C) (cons 'C-)))\n        \
    \              ((> x 3.0) (cons 'D+) (cons 'D) (cons 'D-)))\n                \
    \      ((> x 3.0) (cons 'A-) (cons 'A) (cons 'A-)))\n                      (else\
    \ 'N))))\n    (grade_helper (/ x 4.0)))\n  (map grade_helper grades))\n", "  (let\
    \ ([g (first grades)])\n    (if (> g 4.0)\n        'D+'\n        (if (> g 3.7)\n\
    \            'D'\n            (if (> g 3.3)\n                'D-'\n          \
    \      (if (> g 3.0)\n                    'C+'\n                    (if (> g 2.7)\n\
    \                        'C'\n                        (if (> g 2.3)\n        \
    \                    'C-'\n                            (if (> g 2.0)\n       \
    \                         'B+'\n                                (if (> g 2.7)\n\
    \                                    'B'\n                                   \
    \ (if (> g 2.3)\n                                        'B-'\n              \
    \                          (if (> g 2.0)\n                                   \
    \         'A+'\n                                            (if (> g 1.7)\n  \
    \                                              'A'\n                         \
    \                       (if (> g 1.3)\n                                      \
    \              'A-'\n                                                    (if (>\
    \ g 1.0)\n                                                        'A'\n      \
    \                                                  'B)))))))))))))))\n", "  (define\
    \ (grade grade)\n    (cond ((< grade 4.0) '(A+))\n          ((< grade 3.7) '(A))\n\
    \          ((< grade 3.3) '(A- ))\n          ((< grade 3.0) '(B+))\n         \
    \ ((< grade 2.7) '(B))\n          ((< grade 2.3) '(B- ))\n          ((< grade\
    \ 2.0) '(C+))\n          ((< grade 1.7) '(C))\n          ((< grade 1.3) '(C- ))\n\
    \          ((< grade 1.0) '(D+))\n          ((< grade 0.7) '(D))\n          ((<\
    \ grade 0.0) '(D- ))\n          (else 'E))) \n  (let loop ((n grades)\n      \
    \       (acc '()))\n    (if (null? n)\n        acc\n        (loop (cdr n) (cons\
    \ (grade (car n)) acc))))) \n", "  (if (null? grades)\n      'E\n      (if (<=\
    \ (car grades) 2.3)\n          (if (<= (car grades) 2.7)\n              (if (<=\
    \ (car grades) 3.0)\n                  (if (<= (car grades) 3.3)\n           \
    \           (if (<= (car grades) 3.7)\n                          (if (<= (car\
    \ grades) 4.0)\n                              (if (<= (car grades) 4.3)\n    \
    \                              (if (<= (car grades) 4.7)\n                   \
    \                   'C+\n                                      (if (<= (car grades)\
    \ 5.0)\n                                          (if (<= (car grades) 5.3)\n\
    \                                              (if (<= (car grades) 5.7)\n   \
    \                                               'C\n                         \
    \                         (if (<= (car grades) 6.0)\n                        \
    \                              (if (<= (car grades) 6.3)\n                   \
    \                                       (if (<= (car grades) 6.7)\n          \
    \                                                    (if (<= (car grades) 7.0)\n\
    \                                                                  'C\n      \
    \                                                            (if (<= (car grades)\
    \ 7.3)\n                                                                     'C-\n\
    \                                                                     (if (<=\
    \ (car grades) 7.7)\n                                                        \
    \                 'C\n                                                       \
    \                  'B-\n                                                     \
    \                 (if (<= (car grades) 8.0)\n                                \
    \                                         'B\n                               \
    \                                          'A-\n                             \
    \                                            (if (<= (car grades) 8.3)\n     \
    \                                                                        'A-\n\
    \                                                                            \
    \ 'B+\n                                                                      \
    \     (if (<= (car grades) 8.7)\n                                            \
    \                                     'B\n                                   \
    \                                              'B-\n                         \
    \                                                        'A+\n               \
    \                                                              grades)\n     \
    \                                                                  grades)\n \
    \                                                                      grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                       grades)\n\
    \                                                                ", "  (cond ((<\
    \ grades (/ 7.0 3.0))   'A+'\n        ((> grades (/ 7.0 3.0)) 'A'\n        ((>\
    \ grades (/ 7.0 3.0))   'B+'\n        ((> grades (/ 7.0 3.0))   'B'\n        ((>\
    \ grades (/ 7.0 3.0))   'B-'\n        ((> grades (/ 7.0 3.0))   'C+'\n       \
    \ ((> grades (/ 7.0 3.0))   'C'\n        ((> grades (/ 7.0 3.0))   'C-'\n    \
    \    ((> grades (/ 7.0 3.0))   'D+'\n        ((> grades (/ 7.0 3.0))   'D'\n \
    \       ((> grades (/ 7.0 3.0))   'D-'\n        ((> grades (/ 7.0 3.0))   'E)))\n",
  "  (cond\n    ((< grades 4) 'A)\n    ((< grades 3.7) 'A)\n    ((< grades 3.3) 'A-)\n\
    \    ((< grades 3.0) 'B-)\n    ((< grades 2.7) 'B)\n    ((< grades 2.3) 'B-)\n\
    \    ((< grades 2.0) 'C)\n    ((< grades 1.7) 'C)\n    ((< grades 1.3) 'C-)\n\
    \    ((< grades 1.0) 'D)\n    ((< grades 0.7) 'D)\n    ((< grades 0.0) 'D)\n \
    \   ((< grades 0) 'E)\n    ((< grades -1) (error \"Not a grade\"))\n    ((< grades\
    \ -2) (error \"Not a grade\"))\n    (else (error \"Not a grade\"))))\n", "  (if\
    \ (> grades (rest grades))\n      (cons '+ (numerical_letter_grade (rest grades)))\n\
    \      (cons '+ (numerical_letter_grade (grade grades)))))\n", "  (define (find-highest_grade\
    \ grades)\n    (cond\n      [(null? grades) 'E]\n      [(>= (first grades) (first\
    \ grades)) 'C]\n      [(>= (first grades) (first grades)) 'B]\n      [(>= (first\
    \ grades) (first grades)) 'A]\n      [(>= (first grades) (first grades)) 'A]\n\
    \      [else (first grades)]\n      )\n    )\n  (define (find-lowest_grade grades)\n\
    \    (cond\n      [(null? grades) 'E]\n      [(<= (first grades) (first grades))\
    \ 'B]\n      [(<= (first grades) (first grades)) 'A]\n      [(<= (first grades)\
    \ (first grades)) 'C]\n      [else (first grades)]\n      )\n    )\n  (define\
    \ (find-average grades)\n    (cond\n      [(null? grades) 'E]\n      [(add1 (/\
    \ (first grades) (first grades)))]\n      [(add1 (/ (first grades) (first grades)))]\n\
    \      [(add1 (/ (first grades) (first grades)))]\n      [(add1 (/ (first grades)\
    \ (first grades)))]\n      [else (first grades)]\n      )\n    )\n  (define (find-letter\
    \ grade)\n    (cond\n      [(<= grade 3.0) 'A+]\n      [(<= grade 3.7) 'A]\n \
    \     [(<= grade 3.3) 'A-]\n      [(<= grade 3.0) 'B+]\n      [(<= grade 2.7)\
    \ 'B]\n      [(<= grade 2.3) 'B-]\n      [(<= grade 2.0) 'C+]\n      [(<= grade\
    \ 1.7) 'C]\n      [(<= grade 1.3) 'C-]\n      [(<= grade 1.0) 'D+]\n      [(<=\
    \ grade 0.7) 'D]\n      [(<= grade 0.0) 'D-]\n      [else (let ([letter (string-append\
    \ \"E\" )])\n         (cond\n           [(<= grade 3.0) (set! letter 'A+)]\n \
    \          [(<= grade 3.7) (set! letter 'A)]\n           [(<= grade 3.3) (set!\
    \ letter 'A-)]\n           [(<= grade 3.0) (set! letter 'B+)]\n           [(<=\
    \ grade 2.7) (set! letter", "  (define (loop (i)\n            (min (length grades)\
    \ i)))\n  (define (grade j)\n    (if (< i j)\n        (substring (string (substring\
    \ grades i j)) 1 1)\n        'E))\n  (let loop ((i 0))\n    (cond\n      [(= i\
    \ 0) 'E]\n      [else (cons ((grade i) 'A) \n               (loop (+ 1 i)))]))\n\
    \  ", "  (let loop ([g-list (list '0.0)]\n             [grade (first grades)]\n\
    \             [num-digit (number? (first grades))])\n    (if (= num-digit 0)\n\
    \        grade \n        (loop (rest grades)\n              (+ grade (list '0.0))\n\
    \              (- num-digit 1)))))\n", "  (let ([min-num (min grades)\n      \
    \    max-num (max grades)])\n    (if (< min-num 0)\n        'E\n        (if (>\
    \ max-num 0)\n            'D-\n            (if (<= (/ (- grades max-num) 2) 1.0)\n\
    \                'C-\n                (if (<= (/ (- grades min-num) 2) 1.0)\n\
    \                    'B-\n                    (if (<= (/ (- grades max-num) 0.7)\n\
    \                            'B-\n                            (if (<= (/ (- grades\
    \ min-num) 0.7)\n                                    'B-\n                   \
    \                 (if (<= (/ (- grades max-num) 0.3)\n                       \
    \                     'B-\n                                            (C (/ (-\
    \ grades min-num) 1.0)))))\n                                'B-\n            \
    \                    (if (<= (/ (- grades min-num) 0.3)\n                    \
    \                    'B-\n                                        (if (<= (/ (-\
    \ grades max-num) 0.2)\n                                                'B-\n\
    \                                                (C (/ (- grades min-num) 1.0)))))\n\
    \                                'B-\n                                (if (<=\
    \ (/ (- grades min-num) 0.2)\n                                        'B-\n  \
    \                                      (if (<= (/ (- grades max-num) 0.1)\n  \
    \                                              'B-\n                         \
    \                       (C (/ (- grades min-num) 1.0)))))\n                  \
    \              'B-\n                                (if (<= (/ (- grades min-num)\
    \ 0.1)\n                                        'B-\n                        \
    \                (C (/ (- grades min-num) 1.0))))))\n                        \
    \        'B-\n                                (if (<= (/ (- grades min-num) 0.0)\n\
    \                                        'B-\n                               \
    \         (C 'B))))\n                                'B-\n                   \
    \             (if (<= (/ (- grades max-num) 0.0)\n                           \
    \             'B-\n                                        (C 'B))))\n       \
    \                         'B-\n                                (if (<= (/ (- grades\
    \ min-num) 0.0)\n                                        'B-\n               \
    \                         (C 'B))))\n                                'B-\n   \
    \                             (C 'B)))))\n            'D-\n            (if (<=\
    \ (/ (- grades min-num) 1.0)\n                    'B-\n                    (if\
    \ (<= (/ (- grades max-num) 1.0)\n                            'B-\n          \
    \                  (if (<= (/ (- grades max-num) 0.7)\n                      \
    \              'B-\n                                    (if (<= (/ (- grades min-num)\
    \ 0.7)\n                                            'B-\n                    \
    \                        (C (/ (- grades min-num) 1.0)))))\n                 \
    \               'B-\n                                (if (<= (/ (- grades min-num)\
    \ 0.7)\n                                        'B-\n                        \
    \                (if (<= (/ (- grades max-num) 0.3)\n                        \
    \                        'B-\n                                               \
    \ (C (/ (- grades ", "  (cond [(< grades (/ grades 3.0))\n         (cond [(> grades\
    \ (/ grades 2.7))\n                (append 'B (numerical_letter_grade (- grades\
    \ 2.7)))]\n              [(> grades (/ grades 2.3))\n                (append 'B-\
    \ (numerical_letter_grade (- grades 2.3)))]\n              [(> grades (/ grades\
    \ 2.0))\n                (append 'C (numerical_letter_grade (- grades 2.0)))]\n\
    \              [(> grades (/ grades 1.7))\n                (append 'C (numerical_letter_grade\
    \ (- grades 1.7)))]\n              [(> grades (/ grades 1.3))\n              \
    \  (append 'C- (numerical_letter_grade (- grades 1.3)))]\n              [(> grades\
    \ (/ grades 1.0))\n                (append 'D+ (numerical_letter_grade (- grades\
    \ 1.0)))]\n              [(> grades (/ grades 0.7))\n                (append 'D\
    \ (numerical_letter_grade (- grades 0.7)))]\n              [(< grades (/ grades\
    \ 0.0))\n                (append 'D (numerical_letter_grade grades))])]\n    \
    \    [(< grades (/ grades 2.5))\n         (cond [(> grades (/ grades 3.0))\n \
    \               (append 'A (numerical_letter_grade (- grades 3.0)))]\n       \
    \       [(> grades (/ grades 2.7))\n                (append 'A+ (numerical_letter_grade\
    \ (- grades 2.7)))]\n              [(> grades (/ grades 2.3))\n              \
    \  (append 'A- (numerical_letter_grade (- grades 2.3)))]\n              [(> grades\
    \ (/ grades 2.0))\n                (append 'B (numerical_letter_grade (- grades\
    \ 2.0)))]\n              [(> grades (/ grades 1.7))\n                (append 'B\
    \ (numerical_letter_grade (- grades 1.7)))]\n              [(> grades (/ grades\
    \ 1.3))\n                (append 'B- (numerical_letter_grade (- grades 1.3)))]\n\
    \              [(> grades (/ grades 1.0))\n                (append 'C (numerical_letter_grade\
    \ (- grades 1.0)))]\n              [(> grades (/ grades 0.7))\n              \
    \  (append 'C (numerical_letter_grade (- grades 0.7)))]\n              [(< grades\
    \ (/ grades 0.0))\n                (append 'C (numerical_letter_grade ", "  (let*\
    \ ((sum (apply + (map (lambda (g) (* g 2)) grades))\n         (min (apply min\
    \ grades))\n         (range (- sum min))\n         (gpas (- range (/ min 4.0)))\n\
    \         (letters (list* 'A 'B 'C 'D 'E)))\n    (for/list ([gpa gpAs])\n    \
    \  (when (< gpa 3.0)\n        (cond (< gpa 3.7) (append letters (list 'A+))\n\
    \               (< gpa 3.3) (append letters (list 'A))\n               (< gpa\
    \ 3.0) (append letters (list 'B+))\n               (< gpa 2.7) (append letters\
    \ (list 'B))\n               (< gpa 2.3) (append letters (list 'B-))\n       \
    \        (< gpa 2.0) (append letters (list 'C+))\n               (< gpa 1.7) (append\
    \ letters (list 'C))\n               (< gpa 1.3) (append letters (list 'C-))\n\
    \               (< gpa 1.0) (append letters (list 'D+))\n               (< gpa\
    \ 0.7) (append letters (list 'D))\n               (< gpa 0.0) (append letters\
    \ (list 'D-))\n               (else '(append letters (list 'E))))))\n    letters))\n",
  "  (if (null? (rest grades)) 'E\n      (cons (+ (first grades) (/ (first grades)\
    \ 4.0)))\n      (cons (case (/ (first grades) 3.0)\n                (0.7 . 'D)\n\
    \                (1.0 . 'D+)\n                (0.3 . 'D-)\n                (1.0\
    \ . 'B+)\n                (2.0 . 'B)\n                (2.3 . 'B-))\n         \
    \   (numerical_letter_grade (rest grades)))))\n", "  (define (accumulate acc grade)\n\
    \    (if (< grade (length acc))\n        (append acc (list grade))\n        (list\
    \ acc)))\n  (define (letter grade)\n    (if (< grade 1.0)\n        'A'\n     \
    \   (if (< grade 3.0)\n            'A-'\n            (if (< grade 4.0)\n     \
    \           'B+'\n                (if (< grade 5.0)\n                    'B'\n\
    \                    (if (< grade 6.0)\n                        'B-'\n       \
    \                 (if (< grade 7.0)\n                            'C+'\n      \
    \                      (if (< grade 8.0)\n                                'C'\n\
    \                                (if (< grade 9.0)\n                         \
    \           'C-'\n                                    (if (< grade 10.0)\n   \
    \                                     'D+'\n                                 \
    \       (if (< grade 11.0)\n                                            'D'\n\
    \                                            (if (< grade 12.0)\n            \
    \                                    'D-'\n                                  \
    \              (if (< grade 13.0)\n                                          \
    \          'E'\n                                                    'F'))))))))))))\n\
    \  (define (letters grades)\n    (for grade grades\n      (accumulate letter grade)))\n\
    \  (for grade grades\n    (append (letters grade) (letter grade))))\n", "  (if\
    \ (null? grades)\n      empty\n      (append (list (+ grades (floor (/ (car grades)\
    \ 4.0)))\n                  (case (car grades)\n                    (< 3.7 . \"\
    A+\")\n                    (< 3.3 . \"A\")\n                    (< 3.0 . \"A-\
    \ \")\n                    (< 2.7 . \"B+\")\n                    (< 2.3 . \"B\"\
    )\n                    (< 2.0 . \"B-\")\n                    (< 1.7 . \"C+\")\n\
    \                    (< 1.3 . \"C\")\n                    (< 1.0 . \"C-\")\n \
    \                   (< 0.7 . \"D+\")\n                    (< 0.0 . \"D\")\n  \
    \                  (< 0 . \"D-\")\n                    (< 0 . \"E\")))\n     \
    \          (numerical_letter_grade (cdr grades))))) ", "  (cond [(empty? grades)\
    \ 'E]\n        [(greater-than? grades (first grades)) \n         (let ([numerical\
    \ (modulo grades 4.0)])\n           (cond [(positive? numerical) 'A+]\n      \
    \           [(negative? numerical) 'A-']\n                 [else 'B+]))]\n   \
    \     [(lesser-than? grades (first grades)) \n         (let ([numerical (modulo\
    \ grades 4.0)])\n           (cond [(positive? numerical) 'B+]\n              \
    \   [(negative? numerical) 'B-']\n                 [else 'C+]))]\n        [(greater-than?\
    \ grades (first grades) (first grades)) \n         'C']\n        [(lesser-than?\
    \ (first grades) (first grades)) \n         'C']\n        [(greater-than? (first\
    \ grades) (first grades) (first grades)) \n         'C']\n        [(lesser-than?\
    \ (first grades) (first grades) (first grades)) \n         'C']\n        [(greater-than?\
    \ (first grades) (first grades) (first grades)) \n         'C']\n        [(lesser-than?\
    \ (first grades) (first grades) (first grades)) \n         'C']\n        [(greater-than?\
    \ (first grades) (first grades) (first grades)) \n         'C']\n        [(lesser-than?\
    \ (first grades) (first grades) (first grades)) \n         'C']\n        [(greater-than?\
    \ (first grades) (first grades) (first grades)) \n         'C']\n        [(lesser-than?\
    \ (first grades) (first grades) (first grades)) \n         'C']\n        [else\
    \ (cons 'D+ (cons 'D (cons 'D- (cons 'E (rest grades)))))]))\n", "  (define (grand_total\
    \ grades)\n    (reduce + (map #(/ (first %) 2)) grades))\n  (define (calc_letter\
    \ grade)\n    (cond ((= grade 0) 'E) (< grade 0.7) 'C) (> grade 0.5) 'B) (> grade\
    \ 0.25) 'A))\n  (let ((total (grand_total grades)))\n    (list (list (list-ref\
    \ grades 0) (calc_instructor grades))\n          (list (list-ref grades 1) (calc_teacher\
    \ grades))\n          (list (list-ref grades 2) (calc_total grades)))))\n", " \
    \ (cond [(< grades 4.0)   'A+']\n        [(> grades 3.7)   'A']\n        [(> grades\
    \ 3.3)   'A-']\n        [(> grades 3.0)   'B+']\n        [(> grades 2.7)   'B']\n\
    \        [(> grades 2.3)   'B-']\n        [(> grades 2.0)   'C+']\n        [(>\
    \ grades 1.7)   'C']\n        [(> grades 1.3)   'C-']\n        [(> grades 1.0)\
    \   'D+']\n        [(> grades 0.7)   'D']\n        [(> grades 0.0)   'D-']\n \
    \       [(> grades 0.0)   'E']))\n", "  (let ((grade-list (sort grades)))\n  \
    \  (cond ((empty? grade-list) 'E)\n          ((< grade-list (car grade-list))\n\
    \           (list 'C+ (car grade-list)))\n          ((< grade-list (car grade-list)\
    \ (+ 1 1))\n           (list 'B+ (car grade-list)))\n          ((< grade-list\
    \ (car grade-list) (+ 1 2))\n           (list 'B (car grade-list)))\n        \
    \  ((< grade-list (car grade-list) (+ 1 3))\n           (list 'B- (car grade-list)))\n\
    \          ((< grade-list (car grade-list) (+ 1 4))\n           (list 'A- (car\
    \ grade-list)))\n          ((< grade-list (car grade-list) (+ 1 5))\n        \
    \   (list 'A- (car grade-list)))\n          ((< grade-list (car grade-list) (+\
    \ 1 6))\n           (list 'A+ (car grade-list)))\n          ((< grade-list (car\
    \ grade-list) (+ 1 7))\n           (list 'A (car grade-list)))\n          ((<\
    \ grade-list (car grade-list) (+ 1 8))\n           (list 'A+ (car grade-list)))\n\
    \          ((< grade-list (car grade-list) (+ 1 9))\n           (list 'A (car\
    \ grade-list)))\n          ((< grade-list (car grade-list) (+ 1 10))\n       \
    \    (list 'B- (car grade-list)))\n          (else\n           (list 'D+ (car\
    \ grade-list))))))\n", "  (let ([total_gpa (car grades)])\n    (cond [(< total_gpa\
    \ 3.0)\n           (list-append (list->string '(A A A A A)) \n               \
    \         (string '(A+))\n                        (list-append (list->string '(A\
    \ A A A A)) \n                                    (string '(A))\n            \
    \                        (list-append (list->string '(A A A A A)) \n         \
    \                                   (string '(A-))\n                         \
    \                   (list-append (list->string '(A A A A A)) \n              \
    \                                          (string '(B+))\n                  \
    \                                      (list-append (list->string '(A A A A A))\
    \ \n                                                                (string '(B))\n\
    \                                                                (list-append\
    \ (list->string '(A A A A A)) \n                                             \
    \                           (string '(B-))\n                                 \
    \                                       (list-append (list->string '(A A A A A))\
    \ \n                                                                         \
    \           (string '(C+))\n                                                 \
    \                                   (list-append (list->string '(A A A A A)) \n\
    \                                                                            \
    \                    (string '(C))\n                                         \
    \                                                       (list-append (list->string\
    \ '(A A A A A)) \n                                                           \
    \                                             (string '(C-))\n               \
    \                                                                            \
    \             (list-append (list->string '(A A A A A)) \n                    \
    \                                                                            \
    \                (string '(D+))\n                                            \
    \                                                                    (list-append\
    \ (list->string '(A A A A A)) \n                                             \
    \                                                                           (string\
    \ '(D))\n                                                                    \
    \                                                    (list-append (list->string\
    \ '(A A A A A)) \n                                                           \
    \                                                                     (string\
    \ '(D-))\n                                                                   \
    \                                                             (list-append (list->string\
    \ '(A A A A A)) \n                                                           \
    \                                                                         (string\
    \ '(E)))))))\n                          (list-append (list->string '(A A A A A))\
    \ \n                                    (string '(A-))\n                     \
    \               (list-append (list->string '(A A A A A)) \n                  \
    \                          (string '(A+)))\n                          (list-append\
    \ (list->string '(A A A A A)) \n                                    (string '(B+))\n\
    \                                    (list-append (list->string '(A A A A A))\
    \ \n                                            (string '(B))\n              \
    \                              (list-append (list->string '(A A A A A)) \n   \
    \                                                     (string '(B-))\n       \
    \                                                 (list-append (list->string '(A\
    \ A A A A)) \n                                                               \
    \ (string '(C+))\n                                                           \
    \     (list-append (list->string ", "  (let* ((total-grade-point (sum grades))\n\
    \         (gpa-total-point (/ (/ (first grades) total-grade-point) 100))\n   \
    \      (letter (string->letter (remainder gpa-total-point 10)))\n         (remainders\
    \ (filter (lambda (grade) (< gpa grade)) grades))\n         (remainder-sum (sum\
    \ (map (lambda (grade) (* gpa grade)) remainders)))\n         (letters (cond ((>\
    \ remainder-sum 0) (append letter letter))\n                      ((< remainder-sum\
    \ 0) (append letter 'E))\n                      (else (cons letter letters))))\n\
    \         (letters (append letters letter)))\n    (list letters)))\n", "  (if\
    \ (> grades 5.0) 'E\n      (if (> grades 3.0) 'D\n          (if (> grades 2.0)\
    \ 'C\n              (if (> grades 1.0) 'B\n                  (if (> grades 0.7)\
    \ 'A\n                      (if (> grades 0.5) 'A-\n                         \
    \ (if (> grades 0.3) 'A-\n                              (if (> grades 0.1) 'A-\n\
    \                                  (if (> grades 0.0) 'A-\n                  \
    \                    (if (> grades -0.1) 'A-\n                               \
    \           (if (> grades -0.3) 'A-\n                                        \
    \      (if (> grades -0.5) 'A-\n                                             \
    \     (if (> grades -0.7) 'A-\n                                              \
    \        (if (> grades -1.0) 'A-\n                                           \
    \             (if (> grades -1.3) 'A-\n                                      \
    \                      (if (> grades -1.7) 'A-\n                             \
    \                                   (if (> grades -2.0) 'A-\n                \
    \                                                    (if (> grades -2.3) 'A-\n\
    \                                                                        (if (>\
    \ grades -2.7) 'A-\n                                                         \
    \                   (if (> grades -3.0) 'A-\n                                \
    \                                                (if (> grades -3.3) 'A-\n   \
    \                                                                            \
    \     (if (> grades -3.7) 'A-\n                                              \
    \                                          (if (> grades -4.0) 'A-\n         \
    \                                                                            \
    \       (if (> grades -4.7) 'A-\n                                            \
    \                                                    (if (> grades -5.0) 'A-\n\
    \                                                                            \
    \                        (if (> grades -5.7) 'A-\n                           \
    \                                                                            \
    \ (if (> grades -6.0) 'A-\n                                                  \
    \                                                          (if (> grades -6.7)\
    \ 'A-\n                                                                      \
    \                                          (if (> grades -7.0) 'A-\n         \
    \                                                                            \
    \                               (if (> grades -7.7) 'A-\n                    \
    \                                                                            \
    \                        (if (> grades -8.0) 'A-\n                           \
    \                                                                            \
    \                     (if (> grades -8.7) 'A-\n                              \
    \                                                                            \
    \                      (if (> grades -9.0) 'A-\n                             \
    \                                                                            \
    \                           (if (> grades -9.7) 'A-\n                        \
    \                                                                            \
    \                                    (if (> grades -10.0) 'A-\n              \
    \                                                                            \
    \                                                  (if (> grades -10.7) 'A-\n\
    \                                                                            \
    \                                                                    (if (> grades\
    \ -11.0) 'A-\n                                                               \
    \                                                                            \
    \         (if (> grades -11.7) 'A-\n                                         \
    \                                                                            \
    \                                   (if (> grades -12.0) 'A-\n               \
    \                                                                            \
    \                                                                 (if (> grades\
    \ -12.7) 'A-\n                                                               \
    \                                                                            \
    \                     (if (> grades -13.0) 'A-\n                             \
    \                                                                            \
    \                                                           (if (> grades -13.7)\
    \ 'A-\n                                                                      \
    \                                                                            \
    \                      (if (> grades -14.0) ", "  (if (= (length grades) 0)\n\
    \      'E\n      (let ((numerical (map (lambda (x) (/ (car x) 4.0)) grades))\n\
    \            (grade (map (lambda (x) (cond ((<= x 3.7) (char 'A+))\n         \
    \                                     ((<= x 3.3) (char 'A))\n               \
    \                               ((<= x 3.0) (char 'B+))\n                    \
    \                          ((<= x 2.7) (char 'B))\n                          \
    \                    ((<= x 2.3) (char 'B-))\n                               \
    \               ((<= x 2.0) (char 'C+))\n                                    \
    \          ((<= x 1.7) (char 'C))\n                                          \
    \    ((<= x 1.3) (char 'C-))\n                                              ((<=\
    \ x 1.0) (char 'D+))\n                                              ((<= x 0.7)\
    \ (char 'D))\n                                              ((<= x 0.0) (char\
    \ 'D-))\n                                              ((>= x 0) (char 'E))))\n\
    \                      (take (length numerical) numerical)))))\n    ;; Not enough\
    \ GPAs in the list\n    (list 'E)))\n", "  (define (list-of-letters grades)\n\
    \    (if (empty? grades)\n      '()\n      (cond [(<= (car grades) 3.3) (cons\
    \ 'A \n                                 (list-of-letters (cdr grades)))]\n   \
    \         [(<= (car grades) 3.7) (cons 'A+' \n                               \
    \  (list-of-letters (cdr grades)))]\n            [(<= (car grades) 3.0) (cons\
    \ 'A- \n                                 (list-of-letters (cdr grades)))]\n  \
    \          [(<= (car grades) 2.7) (cons 'B+ \n                               \
    \  (list-of-letters (cdr grades)))]\n            [(<= (car grades) 2.3) (cons\
    \ 'B- \n                                 (list-of-letters (cdr grades)))]\n  \
    \          [(<= (car grades) 2.0) (cons 'C+ \n                               \
    \  (list-of-letters (cdr grades)))]\n            [(<= (car grades) 1.7) (cons\
    \ 'C \n                                 (list-of-letters (cdr grades)))]\n   \
    \         [(<= (car grades) 1.3) (cons 'C-' \n                               \
    \  (list-of-letters (cdr grades)))]\n            [(<= (car grades) 1.0) (cons\
    \ 'D+ \n                                 (list-of-letters (cdr grades)))]\n  \
    \          [(<= (car grades) 0.7) (cons 'D \n                                \
    \ (list-of-letters (cdr grades)))]\n            [else (cons 'D-\n            \
    \          (list-of-letters (cdr grades))))]))\n  (list-of-letters (reverse grades)))\n",
  "  (let* ((letters (string->list 'A+AB-BC-CD-DE-EF-'))\n         (grades (reverse\
    \ grades))\n         (index (/ (length letters) (length grades)) + 1))\n    (subseq\
    \ (interleave letters grades) 0 index)))\n", "  ; The teacher wrote the code below\
    \ without giving you the code.\n  ; Your job is to write the code that uses the\
    \ \"letter_grades\" table\n  ; to solve the problem above.\n  ;\n  ;; Your code\
    \ should return the output shown below:\n  ;; '['A-', 'A+', 'B-', 'C-', 'C', 'B+',\
    \ 'B', 'B+', 'C-', 'B-', 'C', 'C+', 'B+', 'B+', 'C']\n)\n", "  (define (helper\
    \ i grades)\n    (cond ((= i 0) (list)\n          ((< i 0) (helper (- i 1) grades))\n\
    \          (else (append (list i)\n                        (helper (- i 1) \n\
    \                              (cons grade grades)))))))\n  (helper grades (list\
    \ 'E)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
