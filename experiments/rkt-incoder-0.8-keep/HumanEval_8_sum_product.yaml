name: HumanEval_8_sum_product
language: rkt
prompt: "#lang racket\n\n;; For a given list of integers, return a tuple consisting\
  \ of a sum and a product of all the integers in a list.\n;; Empty sum should be\
  \ equal to 0 and empty product should be equal to 1.\n;; >>> sum_product([])\n;;\
  \ (0, 1)\n;; >>> sum_product([1, 2, 3, 4])\n;; (10, 24)\n(define (sum_product numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_product))\n\
  \    (check-equal? (candidate (list )) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 1 1)) (list 3 1))\n    (check-equal? (candidate (list 100 0)) (list 100\
  \ 0))\n    (check-equal? (candidate (list 3 5 7)) (list 15 105))\n    (check-equal?\
  \ (candidate (list 10)) (list 10 10))\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
