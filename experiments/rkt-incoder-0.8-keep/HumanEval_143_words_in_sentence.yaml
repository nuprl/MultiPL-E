name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; Example 1:\n;; Input: sentence = \"This is a test\"\
  \n;; Output: \"is\"\n;; Example 2:\n;; Input: sentence = \"lets go for swimming\"\
  \n;; Output: \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence\
  \ contains only letters\n(define (words_in_sentence sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
