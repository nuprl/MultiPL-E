name: HumanEval_91_is_bored
language: rkt
results:
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((null? S) 0)\n    ((equal? (car S) \"I\") 1)\n    (else (+ 1 (is_bored (cdr\
    \ S))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpajmkk1zs.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpajmkk1zs.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Is the sky blue?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpajmkk1zs.rkt:24:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpajmkk1zs.rkt:25:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpajmkk1zs.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"I feel good today. I\
    \ will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpajmkk1zs.rkt:27:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (index\
    \ 'I S)\n     (index '. S)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy7bkwk44.rkt:13:13: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; Return\
    \ the number of times \"I\" occurs in a string, ignoring periods.\n  (let ((i\
    \ 0))\n    ;; Scan the string until we get to 'I', and keep track of the position\n\
    \    ;; of the 'I' in the string. We'll use this later when we scan the\n    ;;\
    \ string for '!' and '?'.\n    (loop for c across S until (char=? c #\\I) (incf\
    \ i) do\n      (cond ((char=? c #\\.) #f)\n            ((char=? c #\\?) #f)\n\
    \            ((char=? c #\\!) #t)\n            (else #f))))\n  ;; If we reach\
    \ the end of the string, then return 0.\n  (= i (string-length S)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp47d_wkp1.rkt:17:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmp47d_wkp1.rkt:17:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ((not\
    \ (null? S))\n  ((char=? (first S) ?\\.)\n  ((char=? (first S) ?!)\n  (char=?\
    \ (first S) ??)\n  (char=? (first S) ?I))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgr4lzi59.rkt:16:27: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count_if\n\
    \   (lambda (s) (or (eq? (first s) 'I') (eq? (first s) '!') (eq? (first s) '.')))\n\
    \   (split-string (last S) \".\")))\n</code>\n<|/ a tags=scheme,racket,string\
    \ |>\n<| c |>\nHey Joshua! I appreciate your answer. I would love some help figuring\
    \ out why this solution does not work. Why doesn't it find \"!\" as a boredom?\
    \ How does the boredom function work? What does split-string do? And why is it\
    \ that the function returns false for \"!\" and true for \"!\"? Thanks so much\
    \ for answering!\n<|/ c |>\n<| c |>\nThe function `split-string` splits a string\
    \ into a list of strings. For example, `(split-string \"hello.world\" \".\")`\
    \ returns `'(\"hello\" \"world\")`.\n\nThe `split-function` splits a string into\
    \ a list of strings, using a given delimiter. This function is the equivalent\
    \ of [`split` in Python](https://docs.python.org/3/library/stdtypes.html#str.split).\n\
    \n`count_if` filters a list. `count_if` calls `f` on each element of the list\
    \ and returns a list of the results of `f`. That is, if the result of `f` equals\
    \ `#f`, then the element is removed.\n<|/ c |>\n<| c |>\nWhat happens if we try\
    \ to use \"!\" instead of \"I\" or \"!\" or \"!\"? I am having a hard time figuring\
    \ this out. I am thinking of using this function for a little project, and it\
    \ seems like this function works, except when I try to use \"!\" instead of \"\
    I\". I think my code should be fine to handle \"!\" correctly, since it is a boredom.\n\
    <|/ c |>\n<| c |>\nI see! Thank you for all the help!\n<|/ c |>\n<| a tags=scheme,racket,string\
    \ |>\nI didn't test the code but I think the problem is on the count_if function.\
    \ The problem is that you're not using the correct predicate function. As stated\
    \ in the docs:\n\nThe predicate is expected to be a function that takes exactly\
    \ one\n  argument, and is expected to return a boolean. The predicate must be\n\
    \  commutative and associative with respect to the base function. The predicate\n\
    \  should return #t if the base function yields a #f for any input.\n  Otherwise,\
    \ the predicate should return #f if the base function yields\n  a #t for any input.\n\
    \nSo your code should look like this:\n<code>\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7t5r5owh.rkt:13:37: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((i 0) (S S) (seen '(()))\n            (bored-count 0))\n    (if (< i 100)\n\
    \        (if (equal? (char-code (car S)) 13) ; line feed\n            (loop (+\
    \ i 1) (cdr S) (cons (car S) seen)\n                   (+ bored-count 1)))\n \
    \       (loop (+ i 1) (cdr S) seen (+ bored-count 1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpde7apdvj.rkt:15:8: if: missing an \"else\" expression\n  in: (if\
    \ (equal? (char-code (car S)) 13) (loop (+ i 1) (cdr S) (cons (car S) seen) (+\
    \ bored-count 1)))\n  location...:\n   /tmp/tmpde7apdvj.rkt:15:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((S (make-string S :initial-element #\\space))\n             (L (make-list 3\
    \ :initial-element #\\space)))\n    (cond [(string=? (first S) #\\space) (length\
    \ (rest S))\n           (begin (loop (rest S) (first L)))]\n          [(string=?\
    \ (first S) '!') (length (rest S))\n           (begin (loop (rest S) (first L)))]\n\
    \          [(string=? (first S) '?') (length (rest S))\n           (begin (loop\
    \ (rest S) (first L)))]\n          [(string=? (first S) '.') (length (rest S))\n\
    \           (begin (loop (rest S) (first L)))]\n          [(string=? (first S)\
    \ #\\newline) (length (rest S))\n           (begin (loop (rest S) (first L)))]\n\
    \          [(string=? (first S) #\\tab) (length (rest S))\n           (begin (loop\
    \ (rest S) (first L)))]\n          [(string=? (first S) #\\tab) (length (rest\
    \ S))\n           (begin (loop (rest S) (first L)))]\n          [else (begin (loop\
    \ (rest S) (first L)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnpxu9qjc.rkt:16:34: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (and (char=?\
    \ (first S) 'I)\n       (char=? (rest S) '!') ;; The first two characters must\
    \ be I, and then the rest must be !\n       (char=? (rest S) '.') ;; Sentences\
    \ must end with '.'\n       (char=? (rest S) '?') ;; Sentences must end with '?'\n\
    \       (char=? (rest S) '!') ;; Sentences must end with '!'\n       (char=? (rest\
    \ S) '?') ;; Sentences must end with '?'\n       (char=? (rest S) '!') ;; Sentences\
    \ must end with '!'\n       (char=? (rest S) '?') ;; Sentences must end with '?'\n\
    \       (char=? (rest S) '!') ;; Sentences must end with '!'\n       (char=? (rest\
    \ S) '?') ;; Sentences must end with '?'\n       (char=? (rest S) '!') ;; Sentences\
    \ must end with '!'))) ;; Sentences must end with '.' or '!' or '?'\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7x7120t6.rkt:13:27: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (string-match\
    \ \"^I[^.?!]*[.?!]\" S))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe95jo1g2.rkt:12:3: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpe95jo1g2.rkt:12:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ ((empty? S) 0)\n        ((string-prefix? \"I\" (car S))\n         (+ (is-bored\
    \ (cdr S)) 1))\n        ((string-prefix? \"!\" (car S))\n         (+ (is-bored\
    \ (cdr S)) 1))\n        ((string-prefix? \".\" (car S))\n         (+ (is-bored\
    \ (cdr S)) 1))\n        ((string-prefix? \"?\" (car S))\n         (+ (is-bored\
    \ (cdr S)) 1))\n        (else 0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkpf74_8o.rkt:14:13: is-bored: unbound identifier\n  in: is-bored\n\
    \  location...:\n   /tmp/tmpkpf74_8o.rkt:14:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (starts-with?\
    \ S \"I\")\n      (+ 1 (length (rest S)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp54gi1hrt.rkt:12:2: if: missing an \"else\" expression\n  in: (if\
    \ (starts-with? S \"I\") (+ 1 (length (rest S))))\n  location...:\n   /tmp/tmp54gi1hrt.rkt:12:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((null? S) #f)\n    ((not (is-word-start (car S))) #f)\n    (else (+ 1 (is_bored\
    \ (cdr S))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_c4t53_9.rkt:14:11: is-word-start: unbound identifier\n  in: is-word-start\n\
    \  location...:\n   /tmp/tmp_c4t53_9.rkt:14:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string-match \"I\" S) 0]\n        [else 1]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpocahu8_l.rkt:12:10: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpocahu8_l.rkt:12:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (bol S\
    \ (lambda (V) (or (string=? V \"\") \"I\")) \".?!\"))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpch9u60xk.rkt:12:3: bol: unbound identifier\n  in: bol\n  location...:\n\
    \   /tmp/tmpch9u60xk.rkt:12:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (helper S)\n    (cond [(char=? (first S) \"I\") (helper (rest S))]\n       \
    \   [(char=? (first S) \".\")  (+ 1 (helper (rest S)))]\n          [(char=? (first\
    \ S) \"?\") (+ 1 (helper (rest S)))]\n          [(char=? (first S) \"!\")  (+\
    \ 1 (helper (rest S)))]\n          [else 0]))\n  (helper S))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd7bt2jqz.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpd7bt2jqz.rkt:26:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd7bt2jqz.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpd7bt2jqz.rkt:28:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd7bt2jqz.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd7bt2jqz.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ boredom-p (string->list (string->symbol \"boredom\")))\n  ; Split the sentence\
    \ into two lists:\n  (define words (split-string (string S) \" \"))\n  (define\
    \ sentence-s (split-string (string-append \"I\" words) \".?!\"))\n  ; Find the\
    \ first element that is a boredom:\n  (define first (car (filter (lambda (ss)\
    \ (equal? (first ss) boredom-p)) sentence-s)))\n  (count-if eq? first boredom-p)\n\
    )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpff8cppzb.rkt:14:17: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpff8cppzb.rkt:14:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; Convert\
    \ to list of words, and remove 'I' from list\n  (define W (remove-if #(and (equal?\
    \ % \"I\") (not (equal? % \"I\"))) (string-split S)))\n  ;; Count number of boredom\
    \ sentences\n  (let loop ((W (remove-if #(and (equal? % \"I\") (not (equal? %\
    \ \"I\"))) W))\n             (n 0))\n    (if (null? W)\n        n\n        (loop\
    \ (remove-if #(and (equal? % \"I\") (equal? % \"I\")) W) (add1 n)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz4nk0yxi.rkt:13:13: remove-if: unbound identifier\n  in: remove-if\n\
    \  location...:\n   /tmp/tmpz4nk0yxi.rkt:13:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ bored-word (substring S 0 1))\n  (define (loop (sub-str S start end)\n     \
    \        bored-count found)\n    (if (< start end)\n        (if (equal? (substr\
    \ sub-str start 1) bored-word)\n            (loop (substr sub-str 2 end)\n   \
    \               bored-count (+ 1 found)))\n        (begin found)))\n  (loop '.\
    \ 0 false))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_0oamb5v.rkt:20:9: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    ['.?!]\n    [(#\\i . #\\j (#\\l . #\\v (#\\w . #\\p)) #\\s (#\\c . #\\\
    d) #\\n) 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwcz9jvbl.rkt:14:10: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match-end\
    \ (is-start S) S))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9alf7nss.rkt:12:3: match-end: unbound identifier\n  in: match-end\n\
    \  location...:\n   /tmp/tmp9alf7nss.rkt:12:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is-bored S index)\n    (cond\n      [(string=? S \"I\" (+ index 1))\n     \
    \  true]\n      [else\n       (is-bored (substring S index) (+ index 1))]))\n\
    \  (is-bored S 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0f4x2ry0.rkt:25:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0f4x2ry0.rkt:26:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0f4x2ry0.rkt:27:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0f4x2ry0.rkt:28:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0f4x2ry0.rkt:29:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0f4x2ry0.rkt:30:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: 1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(equal? S (substring S 0 (string-length S)))\n         0]\n        [(equal?\
    \ (substring S 0 (string-length S)) \"I\")\n         1]\n        [else (+ 0 (is_bored\
    \ (substring S (+ 0 (string-length S))))))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5zfp12_7.rkt:16:68: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (length\
    \ S)\n     (count\n      (lambda (w)\n        (= (position w \"I\")\n        \
    \  0)\n      )\n      S\n      )\n     )\n  )\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzr3qji5k.rkt:15:12: position: unbound identifier\n  in: position\n\
    \  location...:\n   /tmp/tmpzr3qji5k.rkt:15:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (length\
    \ (rest S)) 0)\n  (let\n      ((boredoms '()))\n    (cond\n        ((string=?\
    \ (car S) \"I\") (push S boredoms))\n        ((string=? (car S) \"?\") (push S\
    \ boredoms))\n        ((string=? (car S) \"!\") (push S boredoms))\n        (else\
    \ (push S boredoms))))\n  (length (filter (lambda (x)\n                     (string=?\
    \ (car x) \"I\"))\n                  boredoms))\n  )\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpypo_2a4f.rkt:16:33: push: unbound identifier\n  in: push\n  location...:\n\
    \   /tmp/tmpypo_2a4f.rkt:16:33\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((empty? S) #f)\n    ((equal? (first S) \"I\") 1)\n    (else\n     (+ (is_bored\
    \ (rest S)) (is_bored (first (rest S)))))\n    ))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdu5f7zt.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppdu5f7zt.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdu5f7zt.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppdu5f7zt.rkt:27:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdu5f7zt.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdu5f7zt.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (local\
    \ ((define (helper w bored)\n             (cond\n              [(string=? (first\
    \ w) \"I\") (+ 1 (helper (rest w) bored))]\n              [(string=? (first w)\
    \ \"?\") (+ 1 (helper (rest w) bored))]\n              [(string=? (first w) \"\
    !\") (+ 1 (helper (rest w) bored))]\n              [(string=? (first w) \".\"\
    ) (+ 1 (helper (rest w) bored))]\n              [(string=? (first w) \"!\") bored]))))\n\
    \    bored\n    (helper S 0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp42eofjs2.rkt:20:17: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    ['\"\" (0) ; empty string is zero\n    [\".\"(0) ; '.' is zero\n    [\"\
    ?\"(0) ; '?' is zero\n    [\"!\"(0); '!' is zero\n    [\"I\"(1) ; 'I' occurs once\n\
    \    [\"I \"(1) ; 'I' occurs once\n    [\"I.\"(1) ; 'I' occurs once\n    [\"I\
    \ .\"(1) ; 'I' occurs once\n    [\"? I\"(1) ; 'I' occurs once\n    [\"? I \"(1)\
    \ ; 'I' occurs once\n    [\"? I.\"(1) ; 'I' occurs once\n    [\"? I .\"(1) ; 'I'\
    \ occurs once\n    [\"! I\"(1) ; 'I' occurs once\n    [\"! I \"(1) ; 'I' occurs\
    \ once\n    [\"! I.\"(1) ; 'I' occurs once\n    [\"! I .\"(1) ; 'I' occurs once\n\
    \    [\"!? I\"(1) ; 'I' occurs once\n    [\"!? I \"(1) ; 'I' occurs once\n   \
    \ [\"!? I.\"(1) ; 'I' occurs once\n    [\"!? I .\"(1) ; 'I' occurs once\n    [\"\
    !? I?\"(1) ; 'I' occurs once\n    [\"!? I? \" (1) ; 'I' occurs once\n    [\"!?\
    \ I? \"(1) ; 'I' occurs once\n    [\"!? I? \"(1) ; 'I' occurs once\n    [\"!?\
    \ I? .\"(1) ; 'I' occurs once\n    [\"!? I? .\"(1) ; 'I' occurs once\n    [\"\
    !? I? .\"(1) ; 'I' occurs once\n    [\"!? I? .\"(1) ; 'I' occurs once\n    [\"\
    !? I? .\"(1) ; 'I' occurs once\n    [\"!? I? .\"(1) ; 'I' occurs once\n    [\"\
    !? I? .\"(1) ; 'I' occurs once\n    [\"!? I? .\"(1) ; 'I' occurs once\n    [\"\
    !? I? .\"(1) ; 'I' occurs once\n    [\"!? I? .\"(1) ; 'I' occurs once\n    [\"\
    !? I? .\"(1) ; 'I' occurs once\n    [\"!? I? .\"(1) ; 'I' occurs once\n    [\"\
    !? I? .\"(1) ; 'I' occurs once\n    [\"!? I? .\"(1) ; 'I' occurs once\n    [\"\
    !? I? .\"(1) ; 'I' occurs once\n    [\"!? I? .\"(1) ; 'I' occurs once\n    [\"\
    !\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpst9kyi41.rkt:64:60: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (string-match\
    \ \"^I\" S)\n      (length S)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9gom9qus.rkt:12:7: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp9gom9qus.rkt:12:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let*\
    \ ((words (map (lambda (w) (char->int (w))) (split S #\\. #\\? #\\!)))\n     \
    \    (first words)\n         (rest words))\n    (and (= first #\\I)\n        \
    \ (or (> first #\\!)\n             (= first #\\.)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppkqca7qg.rkt:12:34: char->int: unbound identifier\n  in: char->int\n\
    \  location...:\n   /tmp/tmppkqca7qg.rkt:12:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((bored-counts #())\n             (S (string->list S)))\n    (cond\n      [(empty?\
    \ S) 0]\n      [(string=? \"I\" (car S))\n       (loop (cons (car S) bored-counts)\
    \ (cdr S))\n       bored-counts]\n      [else (loop (cons (car S) bored-counts)\n\
    \                 (cdr S))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcv0wf833.rkt:20:29: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (and (>=\
    \ (first S) \"I\") (< (length (rest S)) 2)))\n)\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprdcvqnug.rkt:13:0: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(or (eq? (first S) \"I\") (eq? (first S) \".\") (eq? (first S) \"!\")) (add1\
    \ (length (filter (lambda (x) (char=? (first x) \"I\")) (rest S)))) ]\n      \
    \  [else 0]\n      )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpam41qhlp.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpam41qhlp.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpam41qhlp.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpam41qhlp.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpam41qhlp.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpam41qhlp.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (or (string-match\
    \ \"^I.*\" S)\n      (string-match \"^I.*?\\.\" S)\n      (string-match \"^I.*?\\\
    ?\" S)\n      (string-match \"^I.*?!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuc7ztn7_.rkt:13:20: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ ((null? S) #f)\n        ((eq? (car S) \"I\") (+ 1 (is_bored (cdr S))))\n   \
    \     (else (is_bored (cdr S)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppd0ymc4g.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppd0ymc4g.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Is the sky blue?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppd0ymc4g.rkt:23:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppd0ymc4g.rkt:24:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppd0ymc4g.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"I feel good today. I\
    \ will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppd0ymc4g.rkt:26:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((null? S) #f)\n    ((equal? (car S) 'I) (+ 1 (is_bored (cdr S))))\n    ((equal?\
    \ (car S) '.') (+ 1 (is_bored (cdr S))))\n    ((equal? (car S) '!') (+ 1 (is_bored\
    \ (cdr S))))\n    (else (is_bored (cdr S)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjyju5qt1.rkt:15:22: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; Write\
    \ your code below\n  (define (boredom S i)\n    (cond\n      [(equal? S \"I\"\
    ) i]\n      [(equal? S \".\") (boredom (substring S i (+ 1 i)) (+ 1 i))]\n   \
    \   [(equal? S \"?\") (boredom (substring S i (+ 1 i)) (+ 1 i))]\n      [(equal?\
    \ S \"!\") (boredom (substring S i (+ 1 i)) (+ 1 i))]\n      [else (boredom (substring\
    \ S i (+ 1 i)) (+ 1 i))]\n    )\n  )\n  (boredom S 0)\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc0p0hgky.rkt:30:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"H\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc0p0hgky.rkt:31:4\nactual:     1\nexpected:\
    \   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpc0p0hgky.rkt:33:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"b\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc0p0hgky.rkt:34:4\n\
    actual:     1\nexpected:   2\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpc0p0hgky.rkt:35:4\n\nsubstring:\
    \ ending index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string:\
    \ \"Y\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (< (length\
    \ (string-split S \".\")) 2)\n  (and (equal? first S) \"I\"))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbkfngpi9.rkt:20:4\n\
    actual:     #f\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbkfngpi9.rkt:21:4\nactual:     #f\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpbkfngpi9.rkt:22:4\nactual:     #f\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbkfngpi9.rkt:23:4\nactual:     #f\nexpected:   0\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbkfngpi9.rkt:24:4\n\
    actual:     #f\nexpected:   2\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbkfngpi9.rkt:25:4\nactual:     #f\n\
    expected:   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (chars-match?\
    \ #\\i S)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3_9c37d8.rkt:12:3: chars-match?: unbound identifier\n  in: chars-match?\n\
    \  location...:\n   /tmp/tmp3_9c37d8.rkt:12:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ; TODO:\
    \ write code here\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4awrrl_b.rkt:11:0: define: bad syntax (no expressions for procedure\
    \ body)\n  in: (define (is_bored S))\n  location...:\n   /tmp/tmp4awrrl_b.rkt:11:0\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:16:6:\
    \ try-next\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:165:4:\
    \ normalize-definition\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/kw.rkt:1117:2\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([borem-sentences\
    \ (split-sentences S\n                                        #(lambda (s) (string-match\
    \ #rx\"[\\.\\?!]\" s))\n                                        #(lambda (w s)\
    \ (string-match #rx\"I\" w)))])\n    (length borem-sentences)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjg0km0y4.rkt:13:67: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (boredom sentence)\n    (cond\n      [(equal? (substring sentence 0 3) \"I\"\
    ) 1]\n      [(equal? (substring sentence 0 3) \"the\") (+ 1 (boredom (substring\
    \ sentence 4 7)))]\n      [else 0]))\n  (boredom S))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw2f98hwc.rkt:26:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw2f98hwc.rkt:28:4\nactual:     0\n\
    expected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (length\
    \ (filter #(equal? (first %) \"I\") (explode S))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphmcvc2bo.rkt:12:43: explode: unbound identifier\n  in: explode\n\
    \  location...:\n   /tmp/tmphmcvc2bo.rkt:12:43\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (car\
    \ S)\n     (if (string-equal? \"I\" (car S)) \n         (+ 1 (is_bored (cdr S)))\
    \ 0))\n)\n</code>\nBe sure to try out your code before submitting it! I made a\
    \ couple of minor changes to it. You might want to think about how you would handle\
    \ a sentence with two boredoms!\nEDIT: Revised answer\n<code>\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmh8rrfm3.rkt:13:10: string-equal?: unbound identifier\n  in: string-equal?\n\
    \  location...:\n   /tmp/tmpmh8rrfm3.rkt:13:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((null? S) 0)\n    ((eq? (string-downcase (first S)) \"i\") 1)\n    (else\
    \ (+ 1 (is_bored (rest S))))))\n</code>\nNow that we've defined is_bored, let's\
    \ take a look at what we do with the boredom count.\n<code>\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdx8nly18.rkt:17:31: unquote: not in quasiquote\n  in: (unquote\
    \ let)\n  location...:\n   /tmp/tmpdx8nly18.rkt:17:31\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (string=?\
    \ S \"I.\")\n      (+ 1 (is_bored (substr S 2))))\n  (if (string=? S \".\") 0\n\
    \      (if (string=? S \"?\") 0\n          (if (string=? S \"!\") 0))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg7eer7km.rkt:12:2: if: missing an \"else\" expression\n  in: (if\
    \ (string=? S \"I.\") (+ 1 (is_bored (substr S 2))))\n  location...:\n   /tmp/tmpg7eer7km.rkt:12:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ (regexp-opt \"^[\\.?!]\") S\n    ((_ \".\")       0)\n    ((_ \"?\")       0)\n\
    \    ((_ \"!\")       0)\n    ((_ \"I.*\")     1)\n    ((_ \"I.*\")     1)\n \
    \   ((_ \"I love\") 1)\n    ((_ \"I love\")  1)\n    ((_ \"I.*love\") 2)\n   \
    \ ((_ \"I.*love\")  2)\n    ((_ \"I.*love. I.*love\")  2)\n    ((_ \"I.*love.\
    \ I.*love\")  2)\n    ((_ \"I.*love. I.*love. I.*love\")  3)\n    ((_ \"I.*love.\
    \ I.*love. I.*love. I.*love\")  3)\n    ((_ \"I.*love. I.*love. I.*love. I.*love.\
    \ I.*love\")  4)\n    ((_ \"I.*love. I.*love. I.*love. I.*love. I.*love. I.*love\"\
    )  4)\n    ((_ \"I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love\"\
    ) 4)\n    ((_ \"I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love.\
    \ I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love.\
    \ I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love.\
    \ I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love.\
    \ I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love. I.*love.\
    \ I.*love. I.*love. I.*lo\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq4s8ox4t.rkt:12:21: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ ((= (length S) 0) 0)\n        ((equal? (substring S 0 1) \"I\") 1)\n       \
    \ (else (+ 1 (is_bored (substring S 0 -1))))))\n</cell>\n<text>\nExercise\nUsing\
    \ the function is_bored you defined above, write a program that prints the number\
    \ of boredoms in a given string.\n\n\n</text>\n<cell>\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp88v5dr25.rkt:18:45: unquote: not in quasiquote\n  in: (unquote\
    \ write)\n  location...:\n   /tmp/tmp88v5dr25.rkt:18:45\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (helper L i L)\n    (cond\n      [(equal? i-1 0) (count (substring L 0 3) \"\
    boredom\")]\n      [else (helper L (+ i 1) (substring L i 3))]))\n  (helper (string\
    \ S) 0 \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu21fwm9_.rkt:12:22: define: duplicate argument identifier\n  at:\
    \ L\n  in: (define (helper L i L) (cond ((equal? i-1 0) (count (substring L 0\
    \ 3) \"boredom\")) (else (helper L (+ i 1) (substring L i 3)))))\n  location...:\n\
    \   /tmp/tmpu21fwm9_.rkt:12:22\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:45:33:\
    \ simple-proto\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:133:33:\
    \ general-proto\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:16:6:\
    \ try-next\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:165:4:\
    \ normalize-definition\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/kw.rkt:1117:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (re-match\
    \ (#rx (?:I .+)? \\.)\n             S\n             :start\n             (#rx\
    \ (?:I .+)? \\.)\n             :end\n             (#rx (?:I .+)? \\.))\n  0)\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0oskiapg.rkt:12:13: read-syntax: expected `\"` or `#` after `#rx`\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (local\
    \ ((define (count-bored sent)\n            (cond\n             ((or (string=?\
    \ (first sent) \"I\") (string=? (first sent) \"I.\")\n                  (string=?\
    \ (first sent) \"!\"))\n               (+ 1 (count-bored (rest sent))))\n    \
    \         (else 0)))\n          (define (cons-bored S)\n            (cond\n  \
    \           ((empty? S) 0)\n             ((string=? (first S) \"I\") (cons-bored\
    \ (rest S)))\n             (else (cons-bored (rest S))))\n          (define (rem-bored\
    \ S)\n            (cond\n             ((empty? S) '())\n             ((string=?\
    \ (first S) \"I\") (rem-bored (rest S)))\n             ((string=? (first S) \"\
    I.\")\n             (cons-bored (rest S)))\n             ((string=? (first S)\
    \ \"!\")\n             (cons-bored (rest S)))\n             (else (cons-bored\
    \ (rest S)))))\n          (define (cons-bored-sentences sent)\n            (cond\n\
    \             ((empty? sent) '())\n             ((string=? (first sent) \"I\"\
    ) (cons-bored-sentences (rest sent)))\n             (else (cons-bored-sentences\
    \ sent)\n                   (cons-bored (rest sent)))))\n          (define (rem-bored-sentences\
    \ sent)\n            (cond\n             ((empty? sent) '())\n             ((string=?\
    \ (first sent) \"I\") (rem-bored-sentences (rest sent)))\n             ((string=?\
    \ (first sent) \"I.\")\n             (cons-bored-sentences sent)\n           \
    \  ((string=? (first sent) \"!\")\n             (cons-bored-sentences sent)))\n\
    \             (else (cons-bored-sentences sent\n                             \
    \    (cons-bored (rest sent)))))))\n  (count-bored S))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph0z5pyaj.rkt:12:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 50\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (boredom x count)\n    (if (equal? (substring x 0 1) \"I\")\n        (add1 count)\n\
    \        count))\n  (let ((count 0))\n    (for-each (lambda (x) (boredom x count))\
    \ (split S \"\\.|?|!\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0hi2dqtl.rkt:17:54: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    ((regex \"^I\") 1)\n    ((regex \"^[\\.\\?!][\\.\\?!]\") 0)\n    ((regex\
    \ \".\") 0)\n    ((regex \"[\\.\\?!]\") 0)\n    ((regex \".?\") 0)\n    ((regex\
    \ \"[.\\?!]?\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex\
    \ \".!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \"[.\\?!]?\") 0)\n    ((regex\
    \ \".?\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \"\
    .!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \".!\"\
    ) 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \".!\") 0)\n\
    \    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \".!\") 0)\n  \
    \  ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \".!\") 0)\n    ((regex\
    \ \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \".!\") 0)\n    ((regex \"\
    .?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \".!\") 0)\n    ((regex \".?!\"\
    ) 0)\n    ((regex \".??\") 0)\n    ((regex \".!\") 0)\n    ((regex \".?!\") 0)\n\
    \    ((regex \".??\") 0)\n    ((regex \".!\") 0)\n    ((regex \".?!\") 0)\n  \
    \  ((regex \".??\") 0)\n    ((regex \".!\") 0)\n    ((regex \".?!\") 0)\n    ((regex\
    \ \".??\") 0)\n    ((regex \".!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \"\
    .??\") 0)\n    ((regex \".!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\"\
    ) 0)\n    ((regex \".!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n\
    \    ((regex \".!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n  \
    \  ((regex \".!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex\
    \ \".!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \"\
    .!\") 0)\n    ((regex \".?!\") 0)\n    ((regex \".??\") 0)\n    ((regex \".!\"\
    ) 0)\n    ((regex \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpee5wwoay.rkt:14:12: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(or (= (string-length S) 0) (string-match \"^I.*\" S)) 0]\n    [else (+\
    \ 1 (is_bored (string-replace \"[.,?!]\" \"\" (string-downcase S))))]))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx7e_reyx.rkt:13:34: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmpx7e_reyx.rkt:13:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(= (length S) 0) 0]\n        [(= \"I\" (car S)) 1])\n  )\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfpimxve.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfpimxve.rkt:22:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Is the sky blue?\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvfpimxve.rkt:23:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfpimxve.rkt:24:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfpimxve.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"I feel good today.\
    \ I will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfpimxve.rkt:26:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((i\
    \ 0))\n    (let loop ((S S))\n      (if (equal? S \"\") 0\n          (if (equal?\
    \ (char-type (car S)) #\\? #\\.)\n              (if (equal? (char-type (car (cdr\
    \ S)) #\\? #\\.) #\\! #\\?)\n                  (if (equal? (char-type (car (cdr\
    \ (cdr S)) #\\? #\\.)) #\\!)\n                      (loop (append (cons (car S)\
    \ '(i)) (cdr S)))\n                      (loop (append (cons S '(i)) (cdr S)))))))\n\
    \      (i))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp2p2biel.rkt:15:10: if: missing an \"else\" expression\n  in: (if\
    \ (equal? (char-type (car S)) #\\? #\\.) (if (equal? (char-type (car (cdr S))\
    \ #\\? #\\.) #\\! #\\?) (if (equal? (char-type (car (cdr (cdr S)) #\\? #\\.))\
    \ #\\!) (loop (append (cons (car S) (quote (i))) (cdr S))) (loop (append (cons\
    \ S (quote (i))) (cdr S))))))\n  location...:\n   /tmp/tmpp2p2biel.rkt:15:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    ['(. .) 0]\n    ['(. .? .!) 1]\n    ['(. .? .!) 2]\n    ['(. .? .!) 3]\n\
    \    ['(. .? .!) 4]\n    ['(. .? .!) 5]\n    ['(. .? .!) 6]\n    ['(. .? .!) 7]\n\
    \    ['(. .? .!) 8]\n    ['(. .? .!) 9]\n    ['(. .? .!) 10]\n    ['(. .? .!)\
    \ 11]\n    ['(. .? .!) 12]\n    ['(. .? .!) 13]\n    ['(. .? .!) 14]\n    ['(.\
    \ .? .!) 15]\n    ['(. .? .!) 16]\n    ['(. .? .!) 17]\n    ['(. .? .!) 18]\n\
    \    ['(. .? .!) 19]\n    ['(. .? .!) 20]\n    ['(. .? .!) 21]\n    ['(. .? .!)\
    \ 22]\n    ['(. .? .!) 23]\n    ['(. .? .!) 24]\n    ['(. .? .!) 25]\n    ['(.\
    \ .? .!) 26]\n    ['(. .? .!) 27]\n    ['(. .? .!) 28]\n    ['(. .? .!) 29]\n\
    \    ['(. .? .!) 30]\n    ['(. .? .!) 31]\n    ['(. .? .!) 32]\n    ['(. .? .!)\
    \ 33]\n    ['(. .? .!) 34]\n    ['(. .? .!) 35]\n    ['(. .? .!) 36]\n    ['(.\
    \ .? .!) 37]\n    ['(. .? .!) 38]\n    ['(. .? .!) 39]\n    ['(. .? .!) 40]\n\
    \    ['(. .? .!) 41]\n    ['(. .? .!) 42]\n    ['(. .? .!) 43]\n    ['(. .? .!)\
    \ 44]\n    ['(. .? .!) 45]\n    ['(. .? .!) 46]\n    ['(. .? \n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfk5x3zil.rkt:13:7: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(starts-with? S \"I\") 0]\n        [(starts-with? S \".\") 1]\n        [(starts-with?\
    \ S \"?\") 1]\n        [(starts-with? S \"!\") 1]\n        [else 0]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpommcthmy.rkt:12:10: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmpommcthmy.rkt:12:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) #f]\n        [(starts-with? (car S) \"I\") 1]\n        [else 0]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8yucgls1.rkt:13:10: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmp8yucgls1.rkt:13:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((equal? S \"I\") 1)\n    ((equal? (rest S) \".\") (+ 1 (is_bored (rest S))))\n\
    \    ((equal? (rest S) \"?\") (+ 1 (is_bored (rest S))))\n    ((equal? (rest S)\
    \ \"!\")\n     (+ 1 (is_bored (rest S))))\n    ((null? S) 0)\n    (else (is_bored\
    \ (rest S)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrm6v5od.rkt:26:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqrm6v5od.rkt:27:4\n\nrest: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrm6v5od.rkt:28:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqrm6v5od.rkt:29:4\n\nrest: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrm6v5od.rkt:30:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrm6v5od.rkt:31:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (loop s idx)\n    (cond ((eq? s (substring S idx idx '?)) (+ idx (loop (substring\
    \ S idx idx '.') idx))) ; dot or question mark\n          ((eq? s (substring S\
    \ idx idx '.')) ; dot or full stop\n           (loop (substring S idx idx '.')\
    \ idx)) ; start over with the next dot\n          ((eq? s '!') (loop (substring\
    \ S idx idx '.') idx)) ; full stop\n          (else (loop (substring S idx idx\
    \ '.') idx))) ; otherwise keep going\n  (loop 'I 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpngq6aai2.rkt:13:79: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (or\
    \ (char=? (car S) ?'(. ? !))\n          (char=? (car S) ?'.'))\n      (+ 1 (is_bored\
    \ (cdr S)))\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpycmlr6qp.rkt:12:29: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (empty?\
    \ S)\n      0\n      (if (equal? (car S) \"I\") 1)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_hj84kmt.rkt:14:6: if: missing an \"else\" expression\n  in: (if\
    \ (equal? (car S) \"I\") 1)\n  location...:\n   /tmp/tmp_hj84kmt.rkt:14:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (length\
    \ S) 1)\n  (char=? (car S) #\\?))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ymi9y5o.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ymi9y5o.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Is the sky blue?\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5ymi9y5o.rkt:22:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ymi9y5o.rkt:23:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ymi9y5o.rkt:24:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"I feel good today.\
    \ I will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ymi9y5o.rkt:25:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (equal?\
    \ (substring S 0 0) \"I\")\n      (+ 1 (is_bored (substring S 1)))\n      (is_bored\
    \ (substring S 0)))) ;;(is_bored (substring S 0))\n</code>\n<|/ a |>\n<| a |>\n\
    This is probably not what you're looking for, but I'm posting this anyway. As\
    \ your first function does something else, I have made it more general. \n<code>\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpalx1sf_9.rkt:18:41: for: bad syntax\n  in: for\n  location...:\n\
    \   /tmp/tmpalx1sf_9.rkt:18:41\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((count 0) (strings '()) (word '()))\n    (cond\n      [(empty? S) (if (null?\
    \ word) count 0)]\n      [(char=? (first S) '?') (incf count)]\n      [(char=?\
    \ (first S) '.') (incf count)]\n      [(char=? (first S) '!') (incf count)]\n\
    \      [(char=? (first S) 'I') (incf count)]\n      [else (incf count)]))\n  (loop\
    \ 0 '() S))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5gej7jx3.rkt:15:28: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ str (string-split S (string-char '.? '? '!)))\n  (cond\n    [(empty? str) 0]\n\
    \    [(equal? (first str) \"I\") 1]\n    [else (+ 1 (is_bored (rest str)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp71jn857k.rkt:12:31: string-char: unbound identifier\n  in: string-char\n\
    \  location...:\n   /tmp/tmp71jn857k.rkt:12:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) #t]\n        [(equal? (first S) \"I\") #t]\n        [(equal? (first\
    \ S) \"!\") #t]\n        [else (is_bored (substring (next S) 0 -1)) +1]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphha9i23n.rkt:15:36: next: unbound identifier\n  in: next\n  location...:\n\
    \   /tmp/tmphha9i23n.rkt:15:36\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (length\
    \ S) (+ 1 (count (lambda (x) (= x \"I\"))\n                         (split S \"\
    [.!?]\")))\n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsmxllqzf.rkt:13:26: split: unbound identifier\n  in: split\n  location...:\n\
    \   /tmp/tmpsmxllqzf.rkt:13:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (< (length\
    \ S)\n     (string-length (first S) 1 \".\" 1 \".\" 1 \".\")))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqc6amgm.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqc6amgm.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Is the sky blue?\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwqc6amgm.rkt:22:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqc6amgm.rkt:23:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqc6amgm.rkt:24:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"I feel good today.\
    \ I will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwqc6amgm.rkt:25:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (length\
    \ (filter (lambda (x) (equal? x (substring S 0 (string-length S) \"I\"))))\n \
    \         (filter (lambda (x) (equal? x (substring S 0 (string-length S) \"I\"\
    ))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptmmsdqex.rkt:20:4\n\
    \nfilter: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptmmsdqex.rkt:21:4\n\nfilter:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptmmsdqex.rkt:22:4\n\nfilter:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptmmsdqex.rkt:23:4\n\nfilter:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptmmsdqex.rkt:24:4\n\nfilter:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptmmsdqex.rkt:25:4\n\nfilter:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2\n  given: 1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count_bored?\
    \ S \"I\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyy_9_i49.rkt:12:3: count_bored?: unbound identifier\n  in: count_bored?\n\
    \  location...:\n   /tmp/tmpyy_9_i49.rkt:12:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((bored?\
    \ 0))\n    (if (null? S)\n        bored?\n        (if (string=? (first S) \"I\"\
    )\n            (set! bored? (add1 (equal (first S) 'I)))\n            (if (equal?\
    \ (first S) \".\")\n                (set! bored? (add1 (equal (first S) '.')))\n\
    \                (if (equal? (first S) '?')\n                    (set! bored?\
    \ (add1 (equal (first S) '!')))\n                    (if (equal? (first S) '!')\n\
    \                        (set! bored? (add1 (equal (first S) '?')))\n        \
    \                (is_bored (cons (first S) (cons (rest S) bored?)))\n        \
    \            )\n                )\n            )\n        )\n    )\n    bored?\n\
    \  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpogu932b8.rkt:18:53: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (string=?\
    \ S \"I.\")\n      (+ 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp1_qejn_.rkt:12:2: if: missing an \"else\" expression\n  in: (if\
    \ (string=? S \"I.\") (+ 1))\n  location...:\n   /tmp/tmpp1_qejn_.rkt:12:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (empty?\
    \ S)\n      0\n      (if (equal? (first S) 'I)\n          0\n          (+ 1 (is_bored\
    \ (rest S)))))) ; increment counter\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uxnbsxa.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6uxnbsxa.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uxnbsxa.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6uxnbsxa.rkt:26:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uxnbsxa.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uxnbsxa.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count_boredoms\
    \ S \"I\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_n1m07me.rkt:12:3: count_boredoms: unbound identifier\n  in: count_boredoms\n\
    \  location...:\n   /tmp/tmp_n1m07me.rkt:12:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    [(#t (. (begins-with? 'I . #t)) _)\n     (- 1)]\n    [(_) #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiog1z60d.rkt:13:10: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(starts-with? S  \"I\") (+ (length (split-after \".\" S)) (length (split-after\
    \ \"?\" S)) (length (split-after \"!\" S)))]\n        [else 0]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvqrl9nz9.rkt:12:10: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmpvqrl9nz9.rkt:12:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(equal? (char-after 'I S) \"I\")\n         (+ 1 (count-boredom S \".\"))]\n\
    \        [(equal? (char-after '? S) \"?\")\n         (+ 1 (count-boredom S \"\
    ?\"))]\n        [(equal? (char-after '! S) \"!\")\n         (+ 1 (count-boredom\
    \ S \"!\"))]\n        [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpah8tbv7v.rkt:12:18: char-after: unbound identifier\n  in: char-after\n\
    \  location...:\n   /tmp/tmpah8tbv7v.rkt:12:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([L\
    \ #[(sentence S) (token \"I\")]\n        count 0])\n    (cond\n      [(null? L)\
    \ count]\n      [(token? (first L)) (+ (count 1) (is_bored (rest L)))]\n     \
    \ [else (is_bored (rest L))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvx296dqr.rkt:17:35: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((null? S) 0)\n    ((starts-with S \"I\") 1)\n    (else\n     (+ (is_bored\
    \ (substring S 1 ))\n        (is_bored (substring S (+ 1 )))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5b0p2zen.rkt:14:6: starts-with: unbound identifier\n  in: starts-with\n\
    \  location...:\n   /tmp/tmp5b0p2zen.rkt:14:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((l\
    \ (string-length S))\n        (boredom 0))\n    (loop for i from 0 to (- l 1)\n\
    \          when (char=? (string->char c (+ i l)) ?. ?i)\n          do (incf boredom)\n\
    \          until (char=? S ?. ?i))\n    boredom))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4edcho6b.rkt:14:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmp4edcho6b.rkt:14:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) 0]\n        [(starts-with? S \"I\") 1]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp_sig814.rkt:13:10: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmpp_sig814.rkt:13:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([L\
    \ (string->list S)]\n        [start (first (take-while string=? (rest L))) \"\
    I\"]\n        [end (last (take-while string=? (rest L))) \".\"])\n    (cond\n\
    \      [(or (string=? start end) (string=? (first L) \"I\"))\n       (+ 1 (count\
    \ (rest (rest L))))]\n      [else 0])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf24k83dh.rkt:13:8: let: bad syntax (not an identifier and expression\
    \ for a binding)\n  at: (start (first (take-while string=? (rest L))) \"I\")\n\
    \  in: (let ((L (string->list S)) (start (first (take-while string=? (rest L)))\
    \ \"I\") (end (last (take-while string=? (rest L))) \".\")) (cond ((or (string=?\
    \ start end) (string=? (first L) \"I\")) (+ 1 (count (rest (rest L))))) (else\
    \ 0)))\n  location...:\n   /tmp/tmpf24k83dh.rkt:13:8\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:101:61:\
    \ loop\n   [repeats 1 more time]\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/qq-and-or.rkt:50:20:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (find S T)\n    (cond\n      [(string=? (first T) (first (first S)))\n     \
    \  (+ 1 (find (tail S) T))]\n      [(equal? (first T) '?)\n       (+ 1 (find (tail\
    \ S) (tail (first S))))]\n      [(equal? (first T) '!)\n       (+ 1 (find (tail\
    \ S) (tail (first S))))]\n      [else 0]))\n  (find S '(\"I\" \"!\" \"?\" \".\"\
    )))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4amndnkb.rkt:15:19: tail: unbound identifier\n  in: tail\n  location...:\n\
    \   /tmp/tmp4amndnkb.rkt:15:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    ((.? I)\n     (1+ (is-bored (substring S 0 (string-length S)))))\n  \
    \  ((.? .)\n     (if (string-starts-with (substring S 0) \"I\")\n         (1+\
    \ (is-bored (substring S 0 (string-length S)))))\n     (1+ (is-bored (substring\
    \ S 0 (string-length S)))))\n    ((.? .)\n     (if (string-starts-with (substring\
    \ S 0) \"!\")\n         (1+ (is-bored (substring S 0 (string-length S)))))\n \
    \    (1+ (is-bored (substring S 0 (string-length S)))))\n    ((.? .?)\n     (if\
    \ (string-starts-with (substring S 0) \"I\")\n         (1+ (is-bored (substring\
    \ S 0 (string-length S)))))\n     (1+ (is-bored (substring S 0 (string-length\
    \ S)))))\n    ((.? .?)\n     (if (string-starts-with (substring S 0) \"!\")\n\
    \         (1+ (is-bored (substring S 0 (string-length S)))))\n     (1+ (is-bored\
    \ (substring S 0 (string-length S)))))\n    ((.? .)\n     (if (string-starts-with\
    \ (substring S 0) \"!\")\n         (1+ (is-bored (substring S 0 (string-length\
    \ S)))))\n     (1+ (is-bored (substring S 0 (string-length S)))))\n    ((.? .)\n\
    \     (if (string-starts-with (substring S 0) \"?\")\n         (1+ (is-bored (substring\
    \ S 0 (string-length S)))))\n     (1+ (is-bored (substring S 0 (string-length\
    \ S)))))\n    ((.? .)\n     (if (string-starts-with (substring S 0) \".\")\n \
    \        (1+ (is-bored (substring S 0 (string-length S)))))\n     (1+ (is-bored\
    \ (substring S 0 (string-length S)))))\n    ((.? .)\n     (if (string-starts-with\
    \ (substring S 0) \"!\")\n         (1+ (is-bored (substring S 0 (string-length\
    \ S)))))\n     (1+ (is-bored (substring S 0 (string-length S)))))\n    ((.? .)\n\
    \     (if (string-starts-with (substring S 0) \"?\")\n         (1+ (is-bored (substring\
    \ S 0 (string-length S)))))\n     (1+ (is-bored (substring S 0 (string-length\
    \ S)))))\n    ((.? .)\n     (if (string-starts-with (substring S 0) \".\")\n \
    \        (1+ (is-bo\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeqizxchn.rkt:15:10: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (loop0 S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (car S) \"I\")\
    \ (+ 1 (loop0 (cdr S)))]\n      [else (loop0 (cdr S))]))\n  (loop0 S))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7hifyxcg.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7hifyxcg.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Is the sky blue?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7hifyxcg.rkt:26:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7hifyxcg.rkt:27:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7hifyxcg.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"I feel good today. I\
    \ will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7hifyxcg.rkt:29:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((boredoms\
    \ (count)))\n    (if (and (char=? (first S) 'I) (string-match \".*\\.|.*\\?|.*!\"\
    \ S))\n        (add1 boredoms)\n        boredoms)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1ibxr0vi.rkt:13:49: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (bored S)\n    (cond\n      [(equal? S \"I\") 0]\n      [(equal? S \".\") 0]\n\
    \      [(equal? S \"?\") 0]\n      [(equal? S \"!\") 0]\n      [(equal? (substring\
    \ S 0 1) \"I\") 1]\n      [else 0]))\n  (bored S))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzstya228.rkt:28:4\n\
    actual:     1\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzstya228.rkt:31:4\nactual:     1\n\
    expected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (str-indexof\
    \ \"I \" (str S)) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzpuycyp3.rkt:12:6: str-indexof: unbound identifier\n  in: str-indexof\n\
    \  location...:\n   /tmp/tmpzpuycyp3.rkt:12:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [else 0]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxv3x5_5w.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxv3x5_5w.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxv3x5_5w.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxv3x5_5w.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxv3x5_5w.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxv3x5_5w.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string=? (first S) \"I\") 1]\n        [else 0]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jjr_sxh.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_jjr_sxh.rkt:21:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jjr_sxh.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_jjr_sxh.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jjr_sxh.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jjr_sxh.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (helper S)\n    (cond\n      [(empty? S) 0]\n      [(equal? first (first S))\
    \ (+ 1 (helper (rest S)))]\n      [(equal? (first S) \".\") (+ 1 (helper (rest\
    \ S)))]\n      [(equal? (first S) \".?\") (+ 1 (helper (rest S)))]\n      [(equal?\
    \ (first S) \"!\") (+ 1 (helper (rest S)))]))\n  (helper S))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oy2haev.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7oy2haev.rkt:27:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oy2haev.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7oy2haev.rkt:29:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oy2haev.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oy2haev.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([L\
    \ (string->list S)])\n    (cond\n      [(or (null? L) (equal? L '())) 0]\n   \
    \   [(equal? (first L) 'I) (+ 1 (is_bored (rest L)))]\n      [else (is_bored (rest\
    \ L))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn344tec7.rkt:16:35: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\n\
    \    ((begin \"I\" . rest)\n     (begin \"!\" . rest)\n     (begin \".\" . rest))\n\
    \    (S #:count 1)\n    (else #:count 0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgzqgws98.rkt:13:5: begin: bad syntax\n  in: (begin \"I\" . rest)\n\
    \  location...:\n   /tmp/tmpgzqgws98.rkt:13:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((bored\
    \ (find (lambda(x) (=? (first x) 'I)) S)))\n    (cond\n      ((null? bored) 0)\n\
    \      (else (+ 1 (is_bored (rest bored)))))\n  )\n)\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptl4d8dya.rkt:12:16: find: unbound identifier\n  in: find\n  location...:\n\
    \   /tmp/tmptl4d8dya.rkt:12:16\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; split\
    \ the string by space\n  (define sentences (string->list S))\n  (define (count-bored\
    \ S k)\n    (cond\n      [(and (list? S) (null? S)) 0]\n      [(and (equal? S\
    \ (car S)) (string-match-p \"^I\" (cdr S))) k]\n      [(and (equal? S (car S))\
    \ (string-match-p \"^[.?!]\" (cdr S))) k (+ k (count-bored (cdr S) k))]))\n  (count-bored\
    \ sentences 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz5bzro7w.rkt:17:32: string-match-p: unbound identifier\n  in: string-match-p\n\
    \  location...:\n   /tmp/tmpz5bzro7w.rkt:17:32\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(null? S)                          (0)]\n    [(starts-with? S \"I\")   \
    \           (1)]\n    [(starts-with? S \"I.\")              (1)]\n    [(starts-with?\
    \ S \"I?\")              (1)]\n    [(starts-with? S \"I!\")              (1)]\n\
    \    [else                             (0)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4nuxtw1t.rkt:14:6: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmp4nuxtw1t.rkt:14:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-bored-words\
    \ (first S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnw28_17e.rkt:12:3: count-bored-words: unbound identifier\n  in:\
    \ count-bored-words\n  location...:\n   /tmp/tmpnw28_17e.rkt:12:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (count-boredom sentence)\n    (if (string-match \"^I\" sentence)\n        0\n\
    \        (+ 1 (count-boredom (string-tail sentence))))\n  (count-boredom S))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx_7y6vsf.rkt:11:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 18\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (letrec\n\
    \    ([bored (lambda (sentence . words)\n             (cond\n              [(or\
    \ (equal? (first words) 'I) (equal? (first words) 'my)) 0]\n              [(or\
    \ (equal? (first words) 'A) (equal? (first words) 'my)) 0]\n              [else\
    \ (+ 1 (bored (second sentence) (rest words)))]))]\n    [sentence (split S #\\\
    \".\\\")]\n    [words (split (first sentence) #\\\".\\\")]\n    )\n    (bored\
    \ sentence words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp59qwpz_x.rkt:18:15: split: unbound identifier\n  in: split\n  location...:\n\
    \   /tmp/tmp59qwpz_x.rkt:18:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((string-match \"^I\" S)\n     (string-match \"^I\" S))\n    ((string-match\
    \ \"^I\" S)\n     (string-match \"^I\" S))\n    ((string-match \"^I\" S)\n   \
    \  (string-match \"^I\" S))\n    (else\n     (string-match \"^I\" S))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptzqr_c93.rkt:13:6: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmptzqr_c93.rkt:13:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(starts-with? S \"I\") 1]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaze4h3zn.rkt:14:6: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmpaze4h3zn.rkt:14:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (empty?\
    \ S) #f\n      (if (equal? first \"I\" (first S)) #t #f)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd3d83mb.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpkd3d83mb.rkt:21:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd3d83mb.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpkd3d83mb.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd3d83mb.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd3d83mb.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (find S i L)\n    (cond\n      [(equal? S (car L)) i]\n      [else (find S (+\
    \ i 1) (cdr L))]))\n  (define (bored S)\n    (if (char? S)\n        (if (equal?\
    \ \"I\" (substring S 0 1))\n            (+ 1 (find S 0 S)))\n        (+ 1 (find\
    \ S 0 S))))\n  (bored S))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptqy7flcw.rkt:18:8: if: missing an \"else\" expression\n  in: (if\
    \ (equal? \"I\" (substring S 0 1)) (+ 1 (find S 0 S)))\n  location...:\n   /tmp/tmptqy7flcw.rkt:18:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (letrec\
    \ (\n          ([is-bored (lambda (S)\n                        (or (char-type\
    \ (car S)) #\\?\n                               (char-type (cadr S)) #\\.\n  \
    \                             (char-type (caddr S)) #\\!)\n                  \
    \       #f))])\n    (cond [(is-bored S)\n           0]\n          [else 1])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuf_f_dx3.rkt:17:28: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (=\
    \ (string-length S)\n         (string-length #\"i\"))\n      0\n      1))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5a4yycy.rkt:22:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: #\"i\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5a4yycy.rkt:23:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: #\"i\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5a4yycy.rkt:24:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: #\"i\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5a4yycy.rkt:25:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: #\"i\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5a4yycy.rkt:26:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: #\"i\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5a4yycy.rkt:27:4\n\
    \nstring-length: contract violation\n  expected: string?\n  given: #\"i\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n      ((\"\") 0)\n      ((#\\. #\\? #\\!) (if (equal? S \"I\") (+ 1 (is_bored\
    \ (rest S)))\n                         (is_bored (rest S)))))\n      ((#\\. #\\\
    ? #\\!) (is_bored (rest S)))\n      ((#\\. #\\? #\\!) (is_bored (rest S)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphvo9mqb2.rkt:17:42: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (helper S acc n)\n    (cond\n      [(empty? S) n]\n      [(equal? (first S)\
    \ 'I) (helper (rest S) acc (+ n 1))]\n      [(equal? (first S) '?) (nth (rest\
    \ S) n)]\n      [(equal? (first S) '!) (nth (rest S) n)]\n      [else (helper\
    \ (rest S) (+ acc (if (equal? (first S) 'I) 1 0)) n)]\n    )\n  )\n  (helper S\
    \ 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg51od70v.rkt:16:30: nth: unbound identifier\n  in: nth\n  location...:\n\
    \   /tmp/tmpg51od70v.rkt:16:30\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) #f]\n    [(equal? (first S) \"I\") #t]\n    [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnlcwiy9a.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnlcwiy9a.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnlcwiy9a.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnlcwiy9a.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnlcwiy9a.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnlcwiy9a.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (boredom-counter string)\n    (define (boredom-counter i string)\n      (cond\
    \ [(char=? string \"I\" i) 0]\n            [(char=? string \".\" i) 0]\n     \
    \       [(char=? string \"?\" i) 0]\n            [(char=? string \"!\" i) 0]\n\
    \            [else (+ boredom-counter (boredom-counter i (string-tail string))))]))\n\
    \  (boredom-counter '() S))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe7t2pklf.rkt:18:78: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(starts-with S \"I\") 0]\n        [(starts-with S \"I.\") 0]\n        [(starts-with\
    \ S \"I.!\") 0]\n        [(starts-with S \"I.?\") 0]\n        [(starts-with S\
    \ \"I!\") 0]\n        [(starts-with S \"I?\") 0]\n        [else 1]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptncko8mf.rkt:12:10: starts-with: unbound identifier\n  in: starts-with\n\
    \  location...:\n   /tmp/tmptncko8mf.rkt:12:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([lst\
    \ (split-string S \" \")])\n    (and (equal? (substring lst (first (rest lst))\
    \ 0) \"I\")\n         (>= (length lst) 2))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_zuri5ve.rkt:12:14: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmp_zuri5ve.rkt:12:14\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (< (length\
    \ S) 2)\n  (= (substring S 0 1) \"I\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmjlz3xo.rkt:20:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmjlz3xo.rkt:21:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Is the sky blue?\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvmjlz3xo.rkt:22:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmjlz3xo.rkt:23:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmjlz3xo.rkt:24:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"I feel good today.\
    \ I will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmjlz3xo.rkt:25:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((count 0) (sentence S))\n    (cond ((string=? (substring S 0 3)\n         \
    \            \"I\") (inc count))\n          ((string=? (substring S 0 7)\n   \
    \                  \"I\") (inc count))\n          ((string=? (substring S 0 9)\n\
    \                     \"I\") (inc count))\n          ((string=? (substring S 0\
    \ 11)\n                     \"I\") (inc count))\n          (else (inc count)))\n\
    \    (loop count sentence)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxn4_w61x.rkt:14:27: inc: unbound identifier\n  in: inc\n  location...:\n\
    \   /tmp/tmpxn4_w61x.rkt:14:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string=? (string=? \"I\" S) \"I\") 1]\n        [(string=? (string=? \"I\"\
    \ S) \"!\") 0]\n        [(string=? (string=? \"?\" S) \"?\") 0]\n        [(string=?\
    \ (string=? \"!\" S) \"!\") 0]\n        [else 0]))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptnp1tljb.rkt:22:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptnp1tljb.rkt:23:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptnp1tljb.rkt:24:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptnp1tljb.rkt:25:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptnp1tljb.rkt:26:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptnp1tljb.rkt:27:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(equal? (first S) \"I\") 0]\n    [else 1]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpthyvhugq.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpthyvhugq.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpthyvhugq.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpthyvhugq.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpthyvhugq.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpthyvhugq.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ ((S . bore))\n    ((bore . bored) 0)\n    ((bore . unbored) 1)\n    ((bore .\
    \ unbore) 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt7c0tug2.rkt:13:5: match: syntax error in pattern\n  in: (bore\
    \ . bored)\n  location...:\n   /tmp/tmpt7c0tug2.rkt:13:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (length\
    \ (filter (lambda (x) (equal? x \"I\")) S)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqbdkck_.rkt:19:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqbdkck_.rkt:20:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"Is the sky blue?\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplqbdkck_.rkt:21:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplqbdkck_.rkt:22:4\n\nfilter:\
    \ contract violation\n  expected: list?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplqbdkck_.rkt:23:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"I feel good today.\
    \ I will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplqbdkck_.rkt:24:4\n\nfilter:\
    \ contract violation\n  expected: list?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(equal? (first S) \"I\") 0]\n    [(equal? (first S) \"!\") 0]\n    [(equal?\
    \ (first S) \".\") 0]\n    [else 1]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0ymfze9.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpj0ymfze9.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0ymfze9.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpj0ymfze9.rkt:26:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0ymfze9.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0ymfze9.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([I\
    \ (substring (first S) 0 1)] ;; Get the first word of S\n\t   [rest (rest S)])\n\
    \    (cond\n      [(= I \"I\") (+ 1 (is_bored rest))]\n      [(not (member? I\
    \ [\".\" \"?\" \"!\"])) 0]\n      [else (is_bored rest)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9_dncx6u.rkt:16:13: member?: unbound identifier\n  in: member?\n\
    \  location...:\n   /tmp/tmp9_dncx6u.rkt:16:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((S S) (i 0))\n    (cond\n      ((equal? S \"\") i)\n      ((equal? (string-ref\
    \ S 0) \"I\") i)\n      ((equal? (string-ref S 0) \".\") (loop (substring S 1)\
    \ (+ i 1)))\n      ((equal? (string-ref S 0) \"?\") (loop (substring S 1) (+ i\
    \ 1)))\n      ((equal? (string-ref S 0) \"!\") (loop (substring S 1) (+ i 1)))\n\
    \      (else (loop (substring S 1) i))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbzqgnlve.rkt:19:40: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(equal? (string-match \"I (.*)\" S) 1) 1]\n        [(equal? (string-match \"\
    \\. (.*)\" S) 1) 1]\n        [(equal? (string-match \"! (.*)\" S) 1) 1]\n    \
    \    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkp232_vh.rkt:13:31: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((bored\
    \ 0))\n    (define (loop (S str)\n              (if (= (length S) 0)\n       \
    \           (cond ((string=? (substring S 0) str)\n                         (+\
    \ 1 (substring S 0 1)))\n                        (else (cond ((string=? (substring\
    \ S 1) str)\n                                  (loop (substring S 1 -1)\n    \
    \                                    (substring S 0 1)))\n                   \
    \               (else 0)))))\n    (loop (reverse S)\n          (cond ((string=?\
    \ (substring S 0) \"I\")\n                 (loop (substring S 1 -1)\n        \
    \                (substring S 0 1)))\n              (else 0)))\n    bored)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw4dq8pmx.rkt:11:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 28\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (bored-state str)\n    (cond ((eq? (first str) \"I\") 0)\n          ((eq? (first\
    \ str) \".\") 0)\n          ((eq? (first str) \".?\") 0)\n          ((eq? (first\
    \ str) \".!\") 0)\n          (else 0)))\n  (reduce bored-state (explode S) 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmi_534o3.rkt:18:3: reduce: unbound identifier\n  in: reduce\n \
    \ location...:\n   /tmp/tmpmi_534o3.rkt:18:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (length\
    \ (filter #(begins-with \"I\" . _) #(string->list S))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppf6t7002.rkt:12:36: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is-bored word)\n    (cond\n      [(empty? word) #t]\n      [(equal? (first\
    \ word) \"I\") #t]\n      [else (and (equal? (first word) \"I\")\n           \
    \    (equal? (rest word) \".\")\n               (equal? (rest word) \"?\")\n \
    \              (equal? (rest word) \"!\"))]))\n  (count\n   (for [word (split\
    \ S \".\")\n         if (is-bored word)]\n    word))\n)\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwh5zwjgl.rkt:21:9: for: bad sequence binding clause\n  at: word\n\
    \  in: (for (word (split S \".\") if (is-bored word)) word)\n  location...:\n\
    \   /tmp/tmpwh5zwjgl.rkt:21:9\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/for.rkt:1480:4:\
    \ try-next\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (helper S) (match S\n                             [(#regex #\"\\bI\\b\") 1]\n\
    \                             [(#regex #\"[.?!]\") 0]\n                      \
    \       [(#regex #\"\\b[Ii]\\b\") 0]\n                             [(#regex #\"\
    \\b[iI]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n\
    \                             [(#regex #\"\\b[!i]\\b\") 0]\n                 \
    \            [(#regex #\"\\b[!i]\\b\") 0]\n                             [(#regex\
    \ #\"\\b[i!]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\")\
    \ 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n            \
    \                 [(#regex #\"\\b[i!]\\b\") 0]\n                             [(#regex\
    \ #\"\\b[i!]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\")\
    \ 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n            \
    \                 [(#regex #\"\\b[i!]\\b\") 0]\n                             [(#regex\
    \ #\"\\b[i!]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\")\
    \ 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n            \
    \                 [(#regex #\"\\b[i!]\\b\") 0]\n                             [(#regex\
    \ #\"\\b[i!]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\")\
    \ 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n            \
    \                 [(#regex #\"\\b[i!]\\b\") 0]\n                             [(#regex\
    \ #\"\\b[i!]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\")\
    \ 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n            \
    \                 [(#regex #\"\\b[i!]\\b\") 0]\n                             [(#regex\
    \ #\"\\b[i!]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\")\
    \ 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n            \
    \                 [(#regex #\"\\b[i!]\\b\") 0]\n                             [(#regex\
    \ #\"\\b[i!]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\")\
    \ 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n            \
    \                 [(#regex #\"\\b[i!]\\b\") 0]\n                             [(#regex\
    \ #\"\\b[i!]\\b\") 0]\n                             [(#regex #\"\\b[i!]\\b\")\
    \ 0]\n                             [(#regex #\"\\b[i!]\\b\") 0]\n            \
    \                 [(#regex #\"\\b[i!]\\b\") 0]\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp01yvfvqe.rkt:13:31: read-syntax: bad syntax `#reg`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(equal? (first S) \"I\") 1]\n    [else 0]))\n</cell>\n<cell>\n# Exercise:\
    \ implement a predicate called \"is_bored_with\"\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjz1wd7av.rkt:17:0: read-syntax: bad syntax `# `\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let*\
    \ ((L (length S))\n         (S1 (substring S 0 L)))\n    (cond\n      [(eq? S1\
    \ \"I\") 0]\n      [else (+ 1 (is_bored S1))])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxgjdlca.rkt:23:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxgjdlca.rkt:24:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"Is the sky blue?\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsxgjdlca.rkt:25:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxgjdlca.rkt:26:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxgjdlca.rkt:27:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"I feel good today.\
    \ I will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxgjdlca.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (regexp-match #rx\"I\\w*\" x)))\n  S)\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpox7appnu.rkt:12:35: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([chars\
    \ (split S \"[.?!]\" 0)])\n    (and (= (first chars) \"I\")\n         (< 1 (length\
    \ chars)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzq4g0gkx.rkt:12:16: split: unbound identifier\n  in: split\n  location...:\n\
    \   /tmp/tmpzq4g0gkx.rkt:12:16\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"you\") 0)\n    ((string=? (substring (first S) \"I\") \"\
    I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\") 1)\n    ((string=?\
    \ (substring (first S) \"I\") \"You\") 0)\n    ((string=? (substring (first S)\
    \ \"I\") \"You\") 0)\n    ((string=? (substring (first S) \"I\") \"I\") 0)\n \
    \   ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\"\
    ) 0)\n    ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\"\
    ) 0)\n    ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\"\
    ) 0)\n    ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\"\
    ) 0)\n    ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\"\
    ) 0)\n    ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\"\
    ) 0)\n    ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\"\
    ) 0)\n    ((string=? (substring (first S) \"I\") \"I\") 0)\n    ((string=? (substring\
    \ (first S) \"I\") \"I\") 0)\n    ((string=? (substring (first S) \"I\") \"I\"\
    ) 0)\n    ((string=? (substring (first S) \"I\") \"I\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpshxfjfwp.rkt:55:60: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\n\
    \   (lambda (x)\n      (and (= (first x) \"I\")\n           (rest x)))\n   S))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl4m0633.rkt:23:4\n\
    \ncount: contract violation\n  expected: list?\n  given: \"Hello world\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpvl4m0633.rkt:13:3>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvl4m0633.rkt:24:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"Is the sky blue?\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpvl4m0633.rkt:13:3>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl4m0633.rkt:25:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"I love It !\"\n  argument\
    \ position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpvl4m0633.rkt:13:3>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvl4m0633.rkt:26:4\n\ncount: contract violation\n  expected:\
    \ list?\n  given: \"bIt\"\n  argument position: 2nd\n  other arguments...:\n \
    \  #<procedure:...tmp/tmpvl4m0633.rkt:13:3>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl4m0633.rkt:27:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"I feel good today. I will\
    \ be productive. will kill It\"\n  argument position: 2nd\n  other arguments...:\n\
    \   #<procedure:...tmp/tmpvl4m0633.rkt:13:3>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvl4m0633.rkt:28:4\n\ncount:\
    \ contract violation\n  expected: list?\n  given: \"You and I are going for a\
    \ walk\"\n  argument position: 2nd\n  other arguments...:\n   #<procedure:...tmp/tmpvl4m0633.rkt:13:3>\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(equal? S (substring S 0 2)) #t]\n    [(equal? S (substring S 0 5)) #f]\n\
    \    [else (is_bored (substring S 1 3))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp01hnqih4.rkt:22:4\n\
    actual:     #t\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp01hnqih4.rkt:23:4\nactual:     #t\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp01hnqih4.rkt:24:4\nactual:     #t\nexpected:\
    \   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp01hnqih4.rkt:25:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 5\n  valid range: [0, 3]\n  string: \"bIt\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp01hnqih4.rkt:26:4\n\
    actual:     #t\nexpected:   2\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp01hnqih4.rkt:27:4\nactual:     #t\n\
    expected:   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; Write\
    \ your code here\n  (check-expect (length S) (= 0 (count-words S)))\n  (check-expect\
    \ (count-words S) (= 1 (count-bored-sentence S)))\n  (check-expect (count-bored-sentence\
    \ S) (= 1 (count-bored-sentence S (substring S 0 1))))\n  (check-expect (count-bored-sentence\
    \ S (substring S 0 1)) 0))\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwh__kxuf.rkt:13:3: check-expect: unbound identifier\n  in: check-expect\n\
    \  location...:\n   /tmp/tmpwh__kxuf.rkt:13:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is-bored S i)\n    (cond [(null? S) 0]\n          [(eq? (substring S i i) 'I)\
    \ (+ 1 (is-bored (rest S) (i+1)))]\n          [else (is-bored (rest S) (i+1))]))\n\
    \  (is-bored S 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvc5dlxum.rkt:14:63: i+1: unbound identifier\n  in: i+1\n  location...:\n\
    \   /tmp/tmpvc5dlxum.rkt:14:63\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (w) (beginswith w \"I\"))\n          (explode S) 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp390kon_h.rkt:12:22: beginswith: unbound identifier\n  in: beginswith\n\
    \  location...:\n   /tmp/tmp390kon_h.rkt:12:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((index 0))\n    (cond ((null? S) index)\n          ((char=? (first S) \"I\"\
    ) (loop (add1 index)))\n          (else (loop (add1 index))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmglzs_bh.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmglzs_bh.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmglzs_bh.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmglzs_bh.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmglzs_bh.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmglzs_bh.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ ((null? S) 0)\n        ((char-lower? (car S)) (let ((bored 0))\n           \
    \                    (cond ((char-upper? (car S)) (set! bored 1))\n          \
    \                            ((char-lower? (car S)) (set! bored 0))\n        \
    \                              (else (set! bored (- bored 1)))))\n        (else\
    \ (+ (is_bored (cdr S)) 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_pvvgo5f.rkt:11:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (count\
    \ \"I\" S) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrxr30xj.rkt:19:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: \"I\"\n  argument\
    \ position: 1st\n  other arguments...:\n   \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrxr30xj.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: \"I\"\n  argument\
    \ position: 1st\n  other arguments...:\n   \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrxr30xj.rkt:21:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: \"I\"\n  argument\
    \ position: 1st\n  other arguments...:\n   \"I love It !\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrxr30xj.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: \"I\"\n  argument\
    \ position: 1st\n  other arguments...:\n   \"bIt\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyrxr30xj.rkt:23:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: \"I\"\n  argument position:\
    \ 1st\n  other arguments...:\n   \"I feel good today. I will be productive. will\
    \ kill It\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyrxr30xj.rkt:24:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: \"I\"\n  argument position: 1st\n  other arguments...:\n\
    \   \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (or (equal?\
    \ (first S) \"I\") (equal? (first S) \"!\") (equal? (first S) \".\") (equal? (first\
    \ S) \"?\") (equal? (first S) \"!\") (equal? (first S) \"?\")))\n)\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp78e3lx_x.rkt:13:0: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ ((empty? S) #f)\n        ((equal? (car S) \"I\") 1)\n        (else (+ 1 (is_bored\
    \ (cdr S)))))\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdm5sk_k.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdm5sk_k.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Is the sky blue?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzdm5sk_k.rkt:24:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdm5sk_k.rkt:25:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdm5sk_k.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"I feel good today. I\
    \ will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdm5sk_k.rkt:27:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([S\
    \ (string->list S)])\n    (cond\n      [(string=? (car S) \"I\") (+ 1 (string-count\
    \ \"I\" (string->list S)))]\n      [else 0])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2t5z4f_6.rkt:14:36: string-count: unbound identifier\n  in: string-count\n\
    \  location...:\n   /tmp/tmp2t5z4f_6.rkt:14:36\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; Return\
    \ a list containing the number of boredoms in each sentence\n  (define boredoms\
    \ '())\n  (define (count-boredoms sentence)\n    (if (string=? (substring sentence\
    \ 0 1) \"I\")\n        (+ 1 (count-boredoms (substring sentence 1 string=?)))\n\
    \      (+ 1 (count-boredoms))))\n\n  (count-boredoms S))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqpjde3eq.rkt:26:4\n\
    \ncount-boredoms: arity mismatch;\n the expected number of arguments does not\
    \ match the given number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqpjde3eq.rkt:27:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: #<procedure:string=?>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqpjde3eq.rkt:28:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: #<procedure:string=?>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqpjde3eq.rkt:29:4\n\
    \ncount-boredoms: arity mismatch;\n the expected number of arguments does not\
    \ match the given number\n  expected: 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqpjde3eq.rkt:30:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: #<procedure:string=?>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqpjde3eq.rkt:31:4\n\ncount-boredoms: arity mismatch;\n the\
    \ expected number of arguments does not match the given number\n  expected: 1\n\
    \  given: 0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string=? (car S) 'I)\n         (add1 in-bored)]\n        [(string=? (car S)\
    \ '!)\n         (add1 in-bored)]\n        [(string=? (car S) '.)\n         (add1\
    \ in-bored)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkllcq4at.rkt:16:28: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((boredom\
    \ 0) (s S))\n    (if (string-match \"^I\" s)\n        boredom\n        (begin\n\
    \          (if (string-match \"^[.!?]\" s)\n              (if (string-match \"\
    ^I\" s)\n                  (begin\n                    (if (string-match \"[.!?]\"\
    \ s)\n                        (begin\n                          (if (string-match\
    \ \"[.!?]\" s)\n                              (begin\n                       \
    \         (if (string-match \"[.!?]\" s)\n                                   \
    \ (begin\n                                      (if (string-match \"[.!?]\" s)\n\
    \                                          (begin\n                          \
    \                  (if (string-match \"[.!?]\" s)\n                          \
    \                      (begin\n                                              \
    \    (if (string-match \"[.!?]\" s)\n                                        \
    \              (begin (set! boredom (+ boredom 1))\n                         \
    \                             (begin (set! s (substring s (+ 3 (string-length\
    \ s)))))))\n                                                  (begin (set! s (substring\
    \ s (+ 1 (string-length s)))))))\n                                           \
    \   (begin (set! s (substring s (+ 2 (string-length s)))))))\n               \
    \                           (begin (set! s (substring s (+ 3 (string-length s)))))))\n\
    \                                      (begin (set! s (substring s (+ 4 (string-length\
    \ s)))))))\n                                (begin (set! s (substring s (+ 5 (string-length\
    \ s)))))))))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1nznpju9.rkt:36:95: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((null? S) 0)\n    ((equal? (substring (first S) \"I\") \"I\") 1)\n    ((equal?\
    \ (substring (first S) \"I\") \".\") (is_bored (substring (rest S) 0)))\n    ((equal?\
    \ (substring (first S) \"I\") \"?\") (is_bored (substring (rest S) 0)))\n    ((equal?\
    \ (substring (first S) \"I\") \"!\") (is_bored (substring (rest S) 0)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7bqe4ifn.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7bqe4ifn.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7bqe4ifn.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7bqe4ifn.rkt:27:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7bqe4ifn.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7bqe4ifn.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string=? S (substring \"I \" 0)) (length S)]\n        [else 0]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpib91m1v8.rkt:22:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpib91m1v8.rkt:24:4\nactual:     0\n\
    expected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x)\n           (and (starts-with? x \"I\")\n                (equal?\
    \ (rest x) \".\")\n                (equal? (rest x) \"?\")\n                (equal?\
    \ (rest x) \"!\")))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp56oe60dz.rkt:13:17: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmp56oe60dz.rkt:13:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    [(#\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1y3x337n.rkt:13:5: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 14\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; Write\
    \ your code below this line\n  (cond\n    [(or (char-equal? (first S) \"I\") (char-equal?\
    \ (first S) \"!\")) 0]\n    [(and (char-equal? (first S) \".\") (char-equal? (first\
    \ S) ?\"?)\n            (char-equal? (first S) \"!\")) 1]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5zyw7bvq.rkt:28:60: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string-starts-with \"I \" (first S)) 1]\n        [(string-ends-with \". ?!\"\
    \ (first S)) 0]\n        [T 0]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz8ep8cp_.rkt:12:10: string-starts-with: unbound identifier\n  in:\
    \ string-starts-with\n  location...:\n   /tmp/tmpz8ep8cp_.rkt:12:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; The\
    \ bored count is 0 if it does not start with \"I\", 1 if it starts with it.\n\
    \  (cond\n    ((empty? S) 0)\n    ((string-equal? (substring (first S) 0 1) \"\
    I\") 1)\n    (else (is_bored (rest S)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgzgprnfz.rkt:15:6: string-equal?: unbound identifier\n  in: string-equal?\n\
    \  location...:\n   /tmp/tmpgzgprnfz.rkt:15:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-bored\
    \ S))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa1_w5h9f.rkt:12:3: count-bored: unbound identifier\n  in: count-bored\n\
    \  location...:\n   /tmp/tmpa1_w5h9f.rkt:12:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((boredom-count\
    \ 0))\n    (loop for word <- S\n          while word\n          if (equal? (first\
    \ word) 'I)\n          collect (+ 1 (boredom-count))\n          else collect 0\n\
    \          finally (return boredom-count))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5_6urn5i.rkt:13:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmp5_6urn5i.rkt:13:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; Implement\
    \ your solution here!\n  (let ((bored-word \"I\"))\n    (cond\n      [(string-equal\
    \ S \".\") 0]\n      [(string-equal S \"?\") 0]\n      [(string-equal S \"!\"\
    ) 0]\n      [(string-equal (substring-before S \".\") bored-word) 1]\n      [else\
    \ 0])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwmx7aqy8.rkt:15:8: string-equal: unbound identifier\n  in: string-equal\n\
    \  location...:\n   /tmp/tmpwmx7aqy8.rkt:15:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) #f]\n        [(equal? (first S) \"I\") 1]\n        [else 0]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2u885il.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpe2u885il.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2u885il.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpe2u885il.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2u885il.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2u885il.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([chars\
    \ (char-list S)])\n    (cond\n      [(string=? chars \"I.\")\n       (length (filter\
    \ (lambda (c) (string=? c \".\")) chars))]\n      [(string=? chars \"?\")\n  \
    \     (length (filter (lambda (c) (string=? c \"!\")) chars))]\n      [(string=?\
    \ chars \"!\")\n       (length (filter (lambda (c) (string=? c \".\")) chars))]\n\
    \      [else 0])))\n</code>\nIn response to the comments, here is a solution that\
    \ uses mapcat:\n<code>\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpss9w4fm1.rkt:22:27: unquote: not in quasiquote\n  in: (unquote\
    \ here)\n  location...:\n   /tmp/tmpss9w4fm1.rkt:22:27\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((boredom-list\
    \ ()))\n    (loop\n       for str = (tokenize S)\n       for str = (tokenize str)\n\
    \       for str = (tokenize str)\n       if (eqv? str #\\.)\n       append boredom-list\n\
    \       else (if eqv? str #?)\n       append boredom-list\n       else (if eqv?\
    \ str #!)\n       append boredom-list)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjid55tzs.rkt:19:25: read-syntax: bad syntax `#?`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(and (empty? S) (string-match \"^I.\" S)) 0]\n        [(and (empty? S) (string-match\
    \ \"^!.\" S)) 0]\n        [else 1]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptgmoyebr.rkt:12:26: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmptgmoyebr.rkt:12:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (length\
    \ (substring-no-case#\n            (string->list S)\n            \"I\"))\n  )\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplz8gb7i0.rkt:12:11: substring-no-case#: unbound identifier\n  in:\
    \ substring-no-case#\n  location...:\n   /tmp/tmplz8gb7i0.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((bored\
    \ 0))\n    (cond\n      [(string-match \"^I\" S) (incf bored)]\n      [(string-match\
    \ \"[?.!]\" S) (incf bored)]\n      [else 0])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4lb5lklg.rkt:14:8: string-match: unbound identifier\n  in: string-match\n\
    \  location...:\n   /tmp/tmp4lb5lklg.rkt:14:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ (S \"I.*\" ?) (bored-count))\n  (match (S \"!.*\" ?) (bored-count))\n  (match\
    \ (S \".*\" ?) (bored-count))\n  (match (S \"?.*\" ?) (bored-count))\n  (match\
    \ (S \"!.*\" ?) (bored-count)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsav4h23j.rkt:12:21: match: expected at least one expression on\
    \ the right-hand side\n  in: ((bored-count))\n  location...:\n   /tmp/tmpsav4h23j.rkt:12:21\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((boredom\
    \ 0))\n    (loop :for c :in S\n          :collect (if (string=? (first c) \"I\"\
    ) (+ boredom 1))\n          :finally (return boredom))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb5lzj7_g.rkt:13:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmpb5lzj7_g.rkt:13:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ...)\n\
    </cell>\n<cell>\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuby291ga.rkt:15:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([pos-boredoms\
    \ (assoc #f 'I)]\n        [neg-boredoms (assoc #t 'I)])\n    (define (go S)\n\
    \      (cond [(not (empty? S)) (length (filter (lambda (x)\n                 \
    \                            (= (car x) ?I))\n                               \
    \                (rest S)))]\n            [(empty? S) 0]\n            [else (+\
    \ 1 (go (cdr S)))]))\n    (go S)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_hw4vtfu.rkt:16:56: ?I: unbound identifier\n  in: ?I\n  location...:\n\
    \   /tmp/tmp_hw4vtfu.rkt:16:56\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (or (=\
    \ (substring S 0 3) \"I\")\n      (and (substring S 0 2) \"!!\"))\n  )\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplpc6c30x.rkt:20:4\n\
    \n=: contract violation\n  expected: number?\n  given: \"Hel\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplpc6c30x.rkt:21:4\n\
    \n=: contract violation\n  expected: number?\n  given: \"Is \"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplpc6c30x.rkt:22:4\n\
    \n=: contract violation\n  expected: number?\n  given: \"I l\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplpc6c30x.rkt:23:4\n\
    \n=: contract violation\n  expected: number?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplpc6c30x.rkt:24:4\n\
    \n=: contract violation\n  expected: number?\n  given: \"I f\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplpc6c30x.rkt:25:4\n\
    \n=: contract violation\n  expected: number?\n  given: \"You\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    [(\"I\" .?? _)        0]\n    [(\"I\" .!? _)        1]\n    [(\"I\" .!?\
    \ _ \".\" _)    1]\n    [(_ \".\" .)          1]\n    [(_ \".\" _)          0]\n\
    \    [(_ \".\" .!? _)        1]\n    [(_ \".\" .!? _ \".\" _)    1]\n    [(_ \"\
    .\" _ \".\" _)      0]\n    [(_ \".\" .!? _ \".\" _)    1]\n    [(_ \".\" .!?\
    \ _ \".\" _ \".\" _)  0]\n    [(_ \".\" .!? _ \".\" _ \".\" _ \".\" _)    1]\n\
    \    [(_ \".\" _ \".\" _ \".\" _)    0]\n    [(_ \".\" .!? _ \".\" _ \".\" _ \"\
    .\" _)    1]\n    [(_ \".\" _ \".\" _ \".\" _ \".\" _)    0]\n    [(_ \".\" .!?\
    \ _ \".\" _ \".\" _ \".\" _ \".\" _)    1]\n    [(_ \".\" _ \".\" _ \".\" _ \"\
    .\" _)    0]\n    [(_ \".\" .!? _ \".\" _ \".\" _)    1]\n    [(_ \".\" _ \".\"\
    \ _)        0]\n    [(_ \".\" .!? _ \".\" _)    1]\n    [(_ \".\" .!? _ \".\"\
    \ _ \".\" _)    1]\n    [(_ \".\" _ \".\" _ \".\" _)    0]\n    [(_ \".\" .!?\
    \ _ \".\" _ \".\" _ \".\" _)    1]\n    [(_ \".\" _ \".\" _ \".\" _ \".\" _) \
    \   0]\n    [(_ \".\" .!? _ \".\" _ \".\" _)    1]\n    [(_ \".\" _ \".\" _) \
    \       0]\n    [(_ \".\" .!? _ \".\" _)    1]\n    [(_ \".\" .!? _ \".\" _ \"\
    .\" _)    1]\n    [(_ \".\" _ \".\" _ \".\" _)    \n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphqmcryt7.rkt:16:13: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (starts-with?\
    \ S \"I\")\n      (+ 1 (count_boredoms S))\n      0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg8rm_mjx.rkt:12:7: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmpg8rm_mjx.rkt:12:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((boredom\
    \ 0))\n    (loop\n       for c across S\n       when (char=? (c) ?. ?? ?!)\n \
    \      if (string=? (string=# \"I\" c) c)\n       then boredom\n       else (+\
    \ boredom 1)\n       finally (return boredom))))\n</cell>\n<cell>\n%%racket\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppfr_2yq5.rkt:13:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmppfr_2yq5.rkt:13:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (loop index bored bored-index)\n    (cond ((null? S)\n           (if (or (null?\
    \ bored) (null? bored-index))\n               (equal? 0 (length bored))\n    \
    \           (equal? (length bored) (length bored-index)))\n               (equal?\
    \ bored bored-index))\n          ((char=? (car S) (car (cdr bored)))\n       \
    \    (loop (+ 1 index)\n                   (append bored (cdr bored))\n      \
    \             (+ 1 index)))\n          ((char=? (car S) (car (cdr (cdr bored))))\
    \ ; Is 'S' a boredom sentence?\n           (loop (+ 1 index)\n               \
    \    (append bored\n                          (cdr (cdr bored)))\n           \
    \        (+ 1 index)))\n          (else (loop (+ 1 index)\n                  \
    \    bored\n                      bored-index)))))\n  (loop 0 '() 0))\n</code>\n\
    Note that loop is tail recursive, so it's easy to rewrite it to not use it, but\
    \ I find it cleaner this way.\nI suggest you take a look at Racket's string library;\
    \ it contains lots of useful string manipulation functions, e.g. string-length\
    \ and string-subset; for finding substrings in strings. If you decide to implement\
    \ your is_bored function, you can do it with one line:\n<code>\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpho1seuxu.rkt:30:16: read-syntax: unexpected `)`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ (regexp-matches S #\"\\A[I]+\\z\") 0\n        (#f (error \"Sentence does not\
    \ start with 'I'.\"))\n        (#t (+ 1 (is_bored (regexp-replace S #\"\\A\\..+?\\\
    ?\\z\" \"\"))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl436csun.rkt:12:27: read-syntax: unknown escape sequence `\\A`\
    \ in byte string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) (error \"empty string\")] \n    [(starts-with? (car S) 'I) (+\
    \ 1 (is_bored (cdr S)))]\n    [else 0]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps6hhks56.rkt:14:6: starts-with?: unbound identifier\n  in: starts-with?\n\
    \  location...:\n   /tmp/tmps6hhks56.rkt:14:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ ((equal? (car S) 'I) 0)\n        (else (+ 1 (is_bored (cdr S))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_9gp1kgz.rkt:20:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_9gp1kgz.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Is the sky blue?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_9gp1kgz.rkt:22:4\n\ncar: contract violation\n  expected:\
    \ pair?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_9gp1kgz.rkt:23:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_9gp1kgz.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"I feel good today. I\
    \ will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_9gp1kgz.rkt:25:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (count S k)\n    (cond\n      [(= S \"\") k]\n      [(equal? (substring S 0\
    \ 1) \"I\") (+ 1 (count (substring S 1) k))]))\n  (count S 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxk87xf4r.rkt:23:4\n\
    \n=: contract violation\n  expected: number?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxk87xf4r.rkt:24:4\n\
    \n=: contract violation\n  expected: number?\n  given: \"Is the sky blue?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxk87xf4r.rkt:25:4\n\n=: contract violation\n  expected: number?\n\
    \  given: \"I love It !\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpxk87xf4r.rkt:26:4\n\n=: contract\
    \ violation\n  expected: number?\n  given: \"bIt\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxk87xf4r.rkt:27:4\n\n=: contract\
    \ violation\n  expected: number?\n  given: \"I feel good today. I will be productive.\
    \ will kill It\"\n--------------------\n--------------------\nERROR\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxk87xf4r.rkt:28:4\n\n=: contract violation\n\
    \  expected: number?\n  given: \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  ;; split\
    \ the sentences by '.', '?' or '!'\n  (map (fn [w]\n         (string->list w))\n\
    \       (string->list S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphxarino8.rkt:13:8: fn: unbound identifier\n  in: fn\n  location...:\n\
    \   /tmp/tmphxarino8.rkt:13:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (bol (match\
    \ (find 'I S) ?. ?!. '.) 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphxxdcte7.rkt:12:34: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((S S) (count 0))\n    (cond ((empty? S) count)\n          ((starts-with S \"\
    I\")\n           (loop (cdr S) (+ count 1)))\n          (else\n           (loop\
    \ (cdr S) (+ count 0))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx63x7txh.rkt:14:12: starts-with: unbound identifier\n  in: starts-with\n\
    \  location...:\n   /tmp/tmpx63x7txh.rkt:14:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-bored?\
    \ S '(. ? !)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcok0nq0d.rkt:12:20: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(equal? (first (first S)) 'I) (+ 1 (is_bored (rest S)))]\n    [else 0]))\n\
    </code>\nNow, all you have to do is count all the boredoms in your list of sentences,\
    \ and print out the answer. Remember that you're not printing the boredoms in\
    \ order from lowest to highest. Instead, you'll have to maintain two variables\
    \ - one to keep track of the current number of boredoms seen, and one to keep\
    \ track of the number of sentences in your list. You can then just add (is_bored\
    \ (first s)) to your boredom count.\nEDIT: Here's a way to do this with the \"\
    functional\" programming style you're familiar with:\n<code>\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkg0zcx25.rkt:16:3: unquote: not in quasiquote\n  in: (unquote all)\n\
    \  location...:\n   /tmp/tmpkg0zcx25.rkt:16:3\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(= (string-length S) 0) 0]\n        [(string-equal? \"I\" (first S)) 1]\n \
    \       [(string-equal? \"bore\" (first S)) 1]\n        [else 0]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpteov_qis.rkt:13:10: string-equal?: unbound identifier\n  in: string-equal?\n\
    \  location...:\n   /tmp/tmpteov_qis.rkt:13:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((boreds 0))\n    (cond ((string=? \"I.\" S) boreds)\n          ((string=? \"\
    !.\" S) boreds)\n          ((string=? \"?.\" S) boreds)\n          (else (loop\
    \ (+ boreds (length (string-match \"I.*\" S)))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwwqqs900.rkt:11:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 18\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string-match-p #rx\"^I\" S) 0]\n        [else 1]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4r4ds06h.rkt:12:10: string-match-p: unbound identifier\n  in: string-match-p\n\
    \  location...:\n   /tmp/tmp4r4ds06h.rkt:12:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (first\
    \ S) \"I\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbimpkygu.rkt:19:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbimpkygu.rkt:20:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbimpkygu.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbimpkygu.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbimpkygu.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbimpkygu.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((i\
    \ 0) (j 0))\n    (cond\n      [(empty? S) #t]\n      [(char=? (first S) 'I) 1]\n\
    \      [(char=? (first S) '!) 1]\n      [(char=? (first S) '.') 1]\n      [(char=?\
    \ (first S) '?') 1]\n      [(char=? (first S) '!') 1]\n      [else 0]\n      (set!\
    \ i (+ i 1))\n      (set! j (+ j 1))\n      (cond [(or (char=? (first S) '!')\
    \ (char=? (first S) '?') (char=? (first S) '.')) (set! i (+ i 1))]\n         \
    \   [(char=? (first S) '.') (set! i (+ i 1))]\n            [(char=? (first S)\
    \ '?') (set! i (+ i 1))]\n            [(char=? (first S) '!') (set! i (+ i 1))]\n\
    \            [else (set! i (+ i 1))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbfsq2zdd.rkt:17:26: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ S\n    (((\"I\") . 0) ((\".\") . 0))\n    (((\"I\") . 1) ((\".\") . 1))\n  \
    \  (((\"I\") . 2) ((\".\") . 2))\n    (((\"I\") . 3) ((\".\") . 3))\n    (((\"\
    I\") . 4) ((\".\") . 4))\n    (((\"I\") . 5) ((\".\") . 5))\n    (((\"I\") . 6)\
    \ ((\".\") . 6))\n    (((\"I\") . 7) ((\".\") . 7))\n    (((\"I\") . 8) ((\".\"\
    ) . 8))\n    (((\"I\") . 9) ((\".\") . 9))\n    (((\"I\") . 10) ((\".\") . 10))\n\
    \    (((\"I\") . 11) ((\".\") . 11))\n    (((\"I\") . 12) (\"!\"))\n    (((\"\
    I\") . 13) (\"!\"))\n    (((\"I\") . 14) (\"!\"))\n    (((\"I\") . 15) (\"!\"\
    ))\n    (((\"I\") . 16) (\"!\"))\n    (((\"I\") . 17) (\"!\"))\n    (((\"I\")\
    \ . 18) (\"!\"))\n    (((\"I\") . 19) (\"!\"))\n    (((\"I\") . 20) (\"!\"))\n\
    \    (((\"I\") . 21) (\"!\"))\n    (((\"I\") . 22) (\"!\"))\n    (((\"I\") . 23)\
    \ (\"!\"))\n    (((\"I\") . 24) (\"!\"))\n    (((\"I\") . 25) (\"!\"))\n    (((\"\
    I\") . 26) (\"!\"))\n    (((\"I\") . 27) (\"!\"))\n    (((\"I\") . 28) (\"!\"\
    ))\n    (((\"I\") . 29) (\"!\"))\n    (((\"I\") . 30) (\"!\"))\n    (((\"I\")\
    \ . 31) (\"!\"))\n    (((\"I\") . 32) (\"!\"))\n    (((\"I\") . 33) (\"!\"))\n\
    \    (((\"I\") . 34) (\"!\"))\n    (((\"I\") . 35) (\"!\"))\n    (((\"I\") . 36)\
    \ (\"!\"))\n    (((\"I\") . 37) (\"!\"))\n    (((\"I\") . 38) (\"!\"))\n    (((\"\
    I\") . 39) (\"!\"))\n    (((\"I\") . 40) (\"!\"))\n    (((\"I\") . 41) (\"!\"\
    ))\n    (((\"I\") . 42) (\"!\"))\n    (((\"I\") . 43) (\"!\"))\n    (((\"I\")\
    \ . 44) (\"\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv5wio8ub.rkt:68:60: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((or (char-set S '?) (char-set S '.')) (= (length S) 5))\n    ((char= S \"\
    I\") (+ 1 (count-boredom S)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5ukyuwmq.rkt:13:38: read-syntax: illegal use of `.`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(= (first S) \"I\") (+ 1 (is_bored (rest S)))]\n   \
    \ [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld4k083o.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpld4k083o.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld4k083o.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpld4k083o.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld4k083o.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld4k083o.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (length\
    \ (string-match #rx\"^I\" S)) (length (string-match #rx\"\\.\\.?\" S))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpodd13j79.rkt:12:61: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ((S S)\n             (count 0))\n    (if (null? S)\n        count\n        (loop\
    \ (cdr (cdr S))\n              (+ 1 (if (string=? S \"I\") count 0))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek_hegvh.rkt:24:4\n\
    \ncdr: contract violation\n  expected: pair?\n  given: \"Hello world\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek_hegvh.rkt:25:4\n\
    \ncdr: contract violation\n  expected: pair?\n  given: \"Is the sky blue?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpek_hegvh.rkt:26:4\n\ncdr: contract violation\n  expected:\
    \ pair?\n  given: \"I love It !\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpek_hegvh.rkt:27:4\n\ncdr:\
    \ contract violation\n  expected: pair?\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek_hegvh.rkt:28:4\n\
    \ncdr: contract violation\n  expected: pair?\n  given: \"I feel good today. I\
    \ will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpek_hegvh.rkt:29:4\n\ncdr:\
    \ contract violation\n  expected: pair?\n  given: \"You and I are going for a\
    \ walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let*\
    \ ((sentences (tokenize-sentence S))\n         (bored-sentences (filter boredp\
    \ sentences))\n         (bored-counts (map (lambda (S) (count S \"I\"))\n    \
    \                          bored-sentences)))\n    (length (filter boredp sentences))\
    \ ; ignore the empty sentence at the start\n    (length bored-sentences) ; ignore\
    \ the empty sentences at the end\n    (length bored-counts)))\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThank you so much! I'm still learning recursion, and I\
    \ was wondering how you would go about creating functions that use recursion.\
    \ I've tried several different ways, but I keep getting stuck on how to use recursion.\n\
    <|/ c |>\n<| c |>\n: it's hard to know where to start when you're still trying\
    \ to learn recursion; I'd recommend first reading up on it. I'd also recommend\
    \ taking a look at [the Racket docs](https://docs.racket-lang.org/reference/recursion.html).\
    \ If you get stuck, I think it would be best to post a new question, and to try\
    \ and give an example of what you're trying to do. As is, it looks like you have\
    \ some good ideas of how to solve the problem (just not 100% sure about recursion!).\n\
    <|/ c |>\n<| a |>\n<code>\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsgii14sz.rkt:22:47: unquote: not in quasiquote\n  in: (unquote\
    \ and)\n  location...:\n   /tmp/tmpsgii14sz.rkt:22:47\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((count\
    \ 0)\n        (index 0))\n    (loop while (subseq S index) index\n      (if (and\
    \ (subseq S index) \"I\" subseq S index \".\" subseq S index \"!?\")\n       \
    \   (set! count (add1 count))\n        (set! index (add1 index))\n        )))\n\
    \  count)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6cgj6u4r.rkt:14:5: loop: unbound identifier\n  in: loop\n  location...:\n\
    \   /tmp/tmp6cgj6u4r.rkt:14:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (= (length\
    \ S)\n     (length (substring S 0 (string->length (first S)) #\\.)))\n  S)\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd3cukern.rkt:13:29: string->length: unbound identifier\n  in: string->length\n\
    \  location...:\n   /tmp/tmpd3cukern.rkt:13:29\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (count-bored S)\n    (let loop ((n 0)\n               (S S))\n      (cond ((=\
    \ n 0)\n             (string-match (string-ref S 0) \"^I\"))\n            (else\n\
    \             (string-append\n               (loop (+ n 1)\n                 \
    \    (string-rest (string-ref S 1)))\n               (if (string-match (string-ref\
    \ S 1) \".\") \".\")\n               (if (string-match (string-ref S 1) \"?\"\
    ) \"?\")\n               (if (string-match (string-ref S 1) \"!\") \"!\")))))\n\
    \    (count-bored S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6gnxhh4v.rkt:11:0: begin (possibly implicit): no expression after\
    \ a sequence of internal definitions\n  in: (begin (define (count-bored S) (let\
    \ loop ((n 0) (S S)) (cond ((= n 0) (string-match (string-ref S 0) \"^I\")) (else\
    \ (string-append (loop (+ n 1) (string-rest (string-ref S 1))) (if (string-match\
    \ (string-ref S 1) \".\") \".\") (if (string-match (string-ref S 1...\n  location...:\n\
    \   /tmp/tmp6gnxhh4v.rkt:11:0\n   /tmp/tmp6gnxhh4v.rkt:12:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (match\
    \ (regexp-match #rx (string \"^I.*[.!?]\"))\n    [(string '()) (match-str S 0)]\n\
    \    [else (match-str S 1)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcsiizii6.rkt:12:23: read-syntax: expected `\"` or `#` after `#rx`\n\
    \  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    ((string-match \"^I\" S) (+ 1 (length S)))\n    ((string-match \"\\.|?|!\"\
    \ S) 0)\n    (else (display \"Unrecognized sentence\"))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppojjm7m4.rkt:14:19: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (helper S index)\n    (if (equal? (substring S index 1) \"I\")\n        (if\
    \ (equal? (substring S index 2) \".\")\n            (if (equal? (substring S index\
    \ 3) \".\")\n                (if (equal? (substring S index 4) \".\")\n      \
    \              (if (equal? (substring S index 5) \".\")\n                    \
    \    (if (equal? (substring S index 6) \".\")\n                            (if\
    \ (equal? (substring S index 7) \".\")\n                                (if (equal?\
    \ (substring S index 8) \".\")\n                                    (if (equal?\
    \ (substring S index 9) \".\")\n                                        (if (equal?\
    \ (substring S index 10) \".\")\n                                            (if\
    \ (equal? (substring S index 11) \".\")\n                                    \
    \            (if (equal? (substring S index 12) \".\")\n                     \
    \                               (if (equal? (substring S index 13) \".\")\n  \
    \                                                      (if (equal? (substring\
    \ S index 14) \".\")\n                                                       \
    \     (if (equal? (substring S index 15) \".\")\n                            \
    \                                    (if (equal? (substring S index 16) \".\"\
    )\n                                                                    (if (equal?\
    \ (substring S index 17) \".\")\n                                            \
    \                            (if (equal? (substring S index 18) \".\")\n     \
    \                                                                       (if (equal?\
    \ (substring S index 19) \".\")\n                                            \
    \                                    (if (equal? (substring S index 20) \".\"\
    )\n                                                                          \
    \          (if (equal? (substring S index 21) \".\")\n                       \
    \                                                                 (if (equal?\
    \ (substring S index 22) \".\")\n                                            \
    \                                                (if (equal? (substring S index\
    \ 23) \".\")\n                                                               \
    \                                 (if (equal? (substring S index 24) \".\")\n\
    \                                                                            \
    \                        (if (equal? (substring S index 25) \".\")\n         \
    \                                                                            \
    \                   (if (equal? (substring S index 26) \".\")\n              \
    \                                                                            \
    \                  (if (equal? (substring S index 27) \".\")\n               \
    \                                                                            \
    \                     (if (equal? (substring S index 28) \".\")\n            \
    \                                                                            \
    \                            (if (equal? (substring S index 29) \".\")\n     \
    \                                                                            \
    \                                       (if (equal? (substring S index 30) \"\
    .\")\n                                                                       \
    \                                                     (if (equal? (substring S\
    \ index 31) \".\")\n                                                         \
    \                                                                       (if (equal?\
    \ (substring S index 32) \".\")\n                                            \
    \                                                                            \
    \            (if (equal? (substring S index 33) \".\")\n                     \
    \                                                                            \
    \                                       (if (equal? (substring S index 34) \"\
    .\")\n                                                                       \
    \                                                                     (if (equal?\
    \ (substring S index 35) \".\")\n                                            \
    \                                                                            \
    \                        (if (equal? (substring S index 36) \n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzmxq3teu.rkt:48:148: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (and (or\
    \ (null? S)\n           (char-equal #\\? (first S)))\n       (char-equal #\\.\
    \ (rest S))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7ix3bjkc.rkt:13:12: char-equal: unbound identifier\n  in: char-equal\n\
    \  location...:\n   /tmp/tmp7ix3bjkc.rkt:13:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(equal? (first S) 'I) (+ 1 (is_bored (rest S)))]\n    [else 0]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsv9m_pnq.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpsv9m_pnq.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsv9m_pnq.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpsv9m_pnq.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsv9m_pnq.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsv9m_pnq.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(equal? (first S) \"I\") 1])\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3v_of9qq.rkt:11:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 14\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
