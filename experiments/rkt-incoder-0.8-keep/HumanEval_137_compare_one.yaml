name: HumanEval_137_compare_one
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes integers, floats, or strings\
  \ representing\n;; real numbers, and returns the larger variable in its given variable\
  \ type.\n;; Return None if the values are equal.\n;; Note: If a real number is represented\
  \ as a string, the floating point might be . or ,\n;; compare_one(1, 2.5) \u279E\
  \ 2.5\n;; compare_one(1, \"2,3\") \u279E \"2,3\"\n;; compare_one(\"5,1\", \"6\"\
  ) \u279E \"6\"\n;; compare_one(\"1\", 1) \u279E None\n(define (compare_one a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare_one))\n\
  \    (check-equal? (candidate 1 2) 2)\n    (check-equal? (candidate 1 2.5) 2.5)\n\
  \    (check-equal? (candidate 2 3) 3)\n    (check-equal? (candidate 5 6) 6)\n  \
  \  (check-equal? (candidate 1 \"2,3\") \"2,3\")\n    (check-equal? (candidate \"\
  5,1\" \"6\") \"6\")\n    (check-equal? (candidate \"1\" \"2\") \"2\")\n    (check-equal?\
  \ (candidate \"1\" 1) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(string? a) (string? b) (string-ref a 1)\n     (string-ref\
    \ b 1)]\n    [(number? a) (number? b) (compare a b)\n     (if (= a b)\n      \
    \   a\n         (cond [(< a b) (cons \"\u2264\" a)\n                (> a b) (cons\
    \ \"\u2265\" a)\n                (= a b) (cons \"=\" a b)]\n               [else\
    \ (cons \"=\" a b)]))]\n    [else (cons \"<\" a)]))\n", "  (cond ((number? a)\
    \ (number? b))\n        ((real? a) (compare_real a b))\n        (else\n      \
    \   (string? (real-part a))\n         (string? (real-part b))\n         (compare_strings\
    \ a b))))\n", "  (if (< a b)\n      a\n      b))\n", "  (cond ((equal? a b) '())\n\
    \        ((number? a) (if (> a b) a b))\n        (else (string-join (map string->list\
    \ (map parse-integer a) (map parse-integer b)))))\n  )\n", "  (cond [(equal? a\
    \ b)\n         b]\n        [(string=? (string-ref a 0) (string-ref b 0))\n   \
    \      (string-ref b 0)]\n        [(number? (car a)) (number? (car a)) b]\n  \
    \      [(number? (car b)) (number? (car b)) a]\n        [else (compare-ones (cdr\
    \ a) (cdr b))]\n        ))\n", "  (cond\n    [(number? a) (number? b)\n     (if\
    \ (< a b) a b)]\n    [(number? b) (number? a)\n     (if (< b a) b a)]\n    [(integer?\
    \ a) (integer? b)\n     (if (< a b) a b)]\n    [(integer? b) (integer? a)\n  \
    \   (if (< b a) b a)]\n    [(string? (string-ref a '()) (string? b (string-ref\
    \ b '()))\n     (if (< (string-ref a '()) (string-ref b '())) (string-ref a '())\
    \ (string-ref b '()))]\n    [(or (string? a (string-ref a '())) (string? b (string-ref\
    \ b '())))\n     (if (< (string-ref a '()) (string-ref b '())) (or (string-ref\
    \ a '()) (string-ref b '())) (string-ref a '()) (string-ref b '()))]\n    [(or\
    \ (number? a) (number? b))\n     (if (< (number? a) (number? b))\n         (number-<\
    \ (number-of a) (number-of b))\n         (number-< (number-of b) (number-of a)))]\n\
    \    [else (error 'wrong-type)]))\n", "  (cond ((or (number? a) (number? b)) (number?\
    \ a b))\n        ((or (string? a) (string? b)) (string? a b))\n        ((or (real?\
    \ a) (real? b)) (real? a b))\n        (else (compare (first a) (first b)))))",
  "  (cond ((number? a) (number? b))\n        ((string? a) (string? b))\n        ((real?\
    \ a) (real? b))\n        ((real? a) (< (number->string a) (string->number b)))\n\
    \        ((real? b) (< (number->string b) (string->number a)))\n        (else\
    \ (> (real->string a) (real->string b)))))\n", "  (if (< (type a) 'number) (type\
    \ b)\n      (if (> (type b) 'number) (type a) None)))\n", "  (cond ((equal? a\
    \ b) (list a))\n        ((equal? (real? a) (real? b)) (real->string a))\n    \
    \    ((equal? (integer? a) (integer? b)) (integer->string a))\n        (else (string->list\
    \ (string-compare a b))))))\n", "  (cond\n    ((null? a) (null? b))\n    ((not\
    \ (number? a)) (string-equal a b))\n    ((not (number? b)) (string-equal b a))\n\
    \    ((number? a) (> (number->string a) (number->string b)))\n    ((number? b)\
    \ (< (number->string a) (number->string b))))))\n", "  (cond\n    ((number? a)\
    \ (number? b) a)\n    ((real? a) (number? (string-append \".\" (number->string\
    \ a) \",\" (number->string b))))\n    ((real? b) (number? (string-append \",\"\
    \ (number->string a) (number->string b))))\n    ((string? a) (number? (string-append\
    \ \",\" (number->string a) \".\" (number->string b))))\n    ((string? b) (number?\
    \ (string-append \".\" (number->string a) (number->string b))))\n    (else (cond\
    \ ((string=? a b) (number->string b))\n               ((number= a b) (number->string\
    \ b))\n               (else (number= a b)))))\n", "  (cond ((number? a) (number?\
    \ b))\n        ((number? a) b)\n        (else (number? b) a)))\n</code>\nI then\
    \ wrote a function that compares two lists based on their elements and returns\
    \ true if they're equal in each variable type and returns false if they're not.\
    \ Here it is:\n<code>", "  (cond\n    [(number? a) (number? b) (number? (- a b))]\n\
    \    [(string? a) (string? b) (string? (string-compare a b))]\n    [else (error\
    \ 'Number-compare-error \"Numbers cannot be compared.\")]))\n", "  (cond [(number?\
    \ a) (number? b) a]\n        [(real? a) (real? b) b]\n        [else (number? (string->number\
    \ a) (string->number b))]))\n", "  (cond\n    [(number? a) (number? b)\n     (if\
    \ (number? a)\n         (if (< (real-part a) (real-part b))\n             (number->string\n\
    \              (if (< real-part (real-part a)\n                        (real-part\
    \ b))\n                  (+ a (/ b 10))))\n             (number->string\n    \
    \          (if (> (real-part a)\n                      (real-part b))\n      \
    \            (+ b (/ a 10))))]\n    [(string? a) (string? b)\n     (if (string?\
    \ a) (if (< (length a) (length b)) (string->list a b) (eq? a b))\n         (if\
    \ (> (length a) (length b)) (list a b) (eq? a b)))]\n    [else (raise-type-error\
    \ 'compare-one 'number? a b)]))\n", "  (cond\n    [(equal? (number? a) (number?\
    \ b)) (number? b)]\n    [(equal? a b) 'nil]\n    [(string? a) (string? b) (string?\
    \ (number->string a) (number->string b))]\n    [else (if (> (length a) (length\
    \ b))\n              (substring a 0 (- (length a) (length b)))\n             \
    \ (substring b (- (length a) (length b))))]))\n", "  (cond\n    ((equal? a b)\
    \ a)\n    ((equal? a 1) b)\n    ((equal? (string-ref a 0) \".\") (string-ref b\
    \ 0))\n    ((equal? (string-ref a 0) \",\") (string-ref b 0))\n    ((equal? (number->string\
    \ a) (string->number (string->list b)))\n     (string->number (string->list b)))\n\
    \    ((equal? (string->number a) (number->string b))\n     (number->string b)\n\
    \     (number->string a)\n     (number->list b)\n     (number->list a)\n     (number->symbol\
    \ (number->list b))\n     (number->symbol (number->list a))))\n", "  (cond\n \
    \   [(number? a) (number? b) (> a b)]\n    [(string? a) (string? b) (string-compare\
    \ a b)]))\n", "  (if (< a b)\n      a\n      b\n  )\n)\n", "  (cond ((equal? a\
    \ b) 'equal)\n        ((equal? (number? a) (number? b)) (if (= (number-sign a)\
    \ (number-sign b)) a b))\n        ((equal? (string? a) (string? b)) (if (equal?\
    \ (string-ref a 0) (string-ref b 0)) a b))\n        (else (let ((a (number->real\
    \ a))\n                      (b (number->real b)))\n              (if (equal?\
    \ a b) (number->real 'equal)\n                  (number->real (if (> (number-sign\
    \ a) (number-sign b)) a b))))))) ; compare real numbers\n", "  (cond\n    [(number?\
    \ a) (number? b) b]\n    [(string? a) (string? b) a]\n    [else (> (number->string\
    \ a)\n           (number->string b))]))\n", "  (cond ((number? a) (if (< a b)\
    \ a b))\n        ((number? b) (if (< a b) b a))\n        (else (if (equal? a b)\
    \ a b))))\n", "  (cond ((= (type-of a) (type-of b))\n         (string-compare-symbols\
    \ a))\n        ((number? a) (number? b))\n        (else '(no comparison possible))))\n",
  "  (cond ((or (number? a) (number? b)) (if (equal? a b) a b))\n        ((string?\
    \ a) (if (equal? a b) a b))\n        (else\n         (cond ((number? a) (if (>\
    \ a b) a b))\n              ((number? b) (if (< a b) a b))\n              ((string?\
    \ a) (if (> a b) a b))\n              ((string? b) (if (< a b) a b))))))\n", " \
    \ (cond ((equal? a b)\n         nil)\n        ((equal? (real? a) (real? b))\n\
    \         (if (equal? (real? a) (equal? (real? b) '()))\n           (real? a)\n\
    \           (real? b))\n         (else\n           (real? (real-compare-one a\
    \ b))))\n        ((equal? (real? a) (equal? (real? b) '()))\n         (equal?\
    \ (real? a) (real? b))\n         (else\n           (real? (real-compare-one a\
    \ b))))\n        ((equal? (real? a) (real? b))\n         (equal? (real? a) (equal?\
    \ (real? b) '()))\n         (else\n           (real? (real-compare-one a b))))\n\
    \        ((equal? (real? a) (real? b))\n         (equal? (real? a) (equal? (real?\
    \ b) '()))\n         (else\n           (real? (real-compare-one a b))))\n    \
    \    ((equal? (real? a) (real? b))\n         (equal? (real? a) (equal? (real?\
    \ b) '()))\n         (else\n           (real? (real-compare-one a b))))\n    \
    \    (else\n         (real? (real-compare-one a b))))\n", "  (cond [(number? a)\n\
    \         (number? b)]\n        [(string? a)\n         (string? b)]\n        [(number?\
    \ (string->number a))\n         (number? (string->number b))]\n        [(string?\
    \ (string->number a))\n         (string? (string->number b))]\n        [else\n\
    \         (> a b)]))\n", "  (cond\n    ((integer? a) (integer? b))\n    ((float?\
    \ a) (float? b))\n    ((string? a) (string? b))\n    (else (compare_rational a\
    \ b))))\n", "  (cond ((and (integer? a) (integer? b)) (max (integer? a) (integer?\
    \ b)))\n        ((and (number? a) (number? b)) (max (number? a) (number? b)))\n\
    \        ((and (symbol? a) (symbol? b)) (max (symbol? a) (symbol? b)))\n     \
    \   ((and (vector? a) (vector? b)) (max (vector? a) (vector? b)))\n        (else\
    \ (max (list? a) (list? b))))) ;;#lang racket\n", "  (cond [(number? a) (number?\
    \ b) (number? (- a b))]\n        [(string? a) (string? b) (string? (string/split\
    \ a \",\") (string/split b \",\") (string-join (sort (map number? (string/split\
    \ a \",\"))) \",\")]]\n        [(integer? a) (integer? b) (integer? (- a b))]\n\
    \        [(float? a) (float? b) (float? (- a b))]\n        [(bool? a) (bool? b)\
    \ (bool? (< (first a) (first b))) (bool? (< (second a) (second b)))]\n       \
    \ [(boolean? a) (boolean? b) (boolean? (< (first a) (first b))) (boolean? (< (second\
    \ a) (second b)))]\n        [else (error \"Unknown type\")]))\n", "  (cond\n \
    \   ((symbol? a) (symbol? b))\n    ((real? a) (real? b))\n    ((number? a) (number?\
    \ b))\n    (else (if (string=? a b)\n              a\n              (if (string=?\
    \ b a)\n                  b\n                  '())))\n  )\n)\n", "  (cond\n \
    \   [(number? a) (number? b)]\n    [(string? a) (string? b)]\n    [else (> (string-ref\
    \ a 0) (string-ref b 0))]\n  ))\n", "  (cond ((and (number? a) (number? b)) (if\
    \ (> a b) a b))\n        ((and (number? a) (string? b)) (if (> a b) a b))\n  \
    \      ((and (number? b) (string? a)) (if (> a b) b a))\n        (else (if (equal?\
    \ a b) #t None))))\n", "  (cond ((and (number? a) (number? b)) (> a b))\n    \
    \    ((and (number? a) (symbol? b)) (< a b))\n        ((and (symbol? a) (symbol?\
    \ b)) (< (symbol-value a) (symbol-value b)))\n        ((and (symbol? a) (number?\
    \ b)) (< (symbol-value a) (symbol-value b)))\n        (else (error 'compare-one\
    \ \"Invalid types.\" a b))))\n", "  (cond [(and (number? a) (number? b)) (if (>\
    \ a b) a b)] [else\n                                             (if (string?\
    \ a) (cond [(string=? \". .\" b) b] [else (if (string? b) (cond [(string=? \"\
    . .\" a) a] [else (if (string=? \",\" a) (cond [(string=? \",\" b) b] [else (if\
    \ (string=? \"? ?\" a) (cond [(string=? \"? ?\" b) b] [else (if (string=? \"?\
    \ ?\" b) (cond [(string=? \"? ?\" a) a] [else (if (string=? \"? ?\" a) (cond [(string=?\
    \ \"? ?\" b) a] [else (if (string=? \"? ?\" b) (cond [(string=? \"? ?\" a) a]\
    \ [else (if (string=? \"? ?\" a) (cond [(string=? \"? ?\" b) a] [else (if (string=?\
    \ \"? ?\" b) (cond [(string=? \"? ?\" a) a] [else (if (string=? \"? ?\" b) (cond\
    \ [(string=? \"? ?\" a) a] [else (if (string=? \"? ?\" b) (cond [(string=? \"\
    ? ?\" a) a] [else (if (string=? \"? ?\" b) (cond [(string=? \"? ?\" a) a] [else\
    \ (if (string=? \"? ?\" b) (cond [(string=? \"? ?\" a) a] [else (if (string=?\
    \ \"? ?\" b) (cond [(string=? \"? ?\" a) a] [else (if (string=? \"? ?\" b) (cond\
    \ [(string=? \"? ?\" a) a] [else (if (string=? \"? ?\" b) (cond [(string=? \"\
    ? ?\" a) a] [else (if (string=? \"? ?\" b) (cond [(string=? \"? ?\" a) a] [else\
    \ (if (string=? \"? ?\" b) (cond [(string=? \"? ?\" a) a] [else (if (string=?\
    \ \"? ?\" b) (cond [(string=? \"? ?\" a) a] [else (if (string=? \"? ?\" b) (cond\
    \ [(string=? \"? ?\" a) a] [else (if (string=? \"? ?\" b) (cond [(string=? \"\
    ? ", "  (cond\n    ((and (integer? a) (integer? b)) (max (integer? a) (integer?\
    \ b)))\n    ((and (number? a) (number? b)) (max (number? a) (number? b)))\n  \
    \  ((string? a) (string-compare a (string->list b)))\n    ((string? b) (string-compare\
    \ b (string->list a)))\n    ((number? a) (number-compare a b))\n    ((number?\
    \ b) (number-compare b a))\n    (else (raise-type-error 'compare-one 'string a\
    \ b))))\n", "  (cond\n    ((number? a) (number? b))\n    ((string? a) (string?\
    \ b))\n    ((real? a) (real? b))\n    ((real? (make-real-number a b))\n     (let\
    \ ((a (real-part a))\n           (b (real-part b)))\n       (if (< a b)\n    \
    \      a\n          b))))))\n", "  (cond ((and (number? a) (number? b)) (if (>\
    \ a b) a b))\n        ((and (number? a) (string? b)) (string-append a b))\n  \
    \      ((and (string? a) (number? b)) (string-append a b))\n        ((and (string?\
    \ a) (string? b)) (string-append a b))\n        (else (cond ((< (string->number\
    \ a) (string->number b)) (string->number a))\n                    ((< (string->number\
    \ a) (number->string b)) (string->number a))\n                    ((< (string->number\
    \ a) (string->number b)) (string->number b))\n                    (else (cond\
    \ ((< (string->number a) (string->number b)) (string->number a))\n           \
    \                     ((< (number->string a) (string->number b)) (string->number\
    \ a))\n                                ((< (number->string a) (number->string\
    \ b)) (string->number b))\n                                (else (number->string\
    \ a))\n                                ))))))\n", "  (cond\n    [(and (number?\
    \ a) (number? b)) (max a b)]\n    [(number? a) (number? b) (number-< a b)]\n \
    \   [(symbol? a) (symbol? b) (symbol=< a b)]\n    [(string? a) (string? b) (symbol=<\
    \ a (string->symbol b))]\n    [(boolean? a) (boolean? b) (not (boolean-< a b))]\n\
    \    [(list? a) (list? b) (list>-< a b)]\n    [(pair? a) (pair? b) (not (pair=<\
    \ a b))]\n    [else (pair=< a b)]))\n", "  (cond ((or (string? a) (string? b))\n\
    \         (cond\n           ((string? (caar b))\n            (cond\n         \
    \    ((string? (caar a)) (string? a))\n             ((string? b)\n           \
    \    (cond\n                 ((string? (cadar a))\n                   (string-equal?\
    \ a (car b)))\n                 ((string? (cadar b))\n                   (string-equal?\
    \ b (cadar a)))\n                 ((string? a) (string? b) (string-equal? a b))\n\
    \                 ((string? b) (string? a) (string-equal? b a))\n            \
    \     (else (cond ((< (car a) (car b)) (string-equal? (car a) (car b))\n     \
    \                          (else (string-equal? (car b) (car a)))\n          \
    \                     (else (cond ((< (cadar a) (cadar b)) (string-equal? (cadar\
    \ a) (cadar b))\n                                               (else (string-equal?\
    \ (cadar b) (cadar a)))\n                                               (else\
    \ (cond ((< (car a) (cadar b)) (string-equal? (car a) (cadar b))\n           \
    \                                                        (else (string-equal?\
    \ (car b) (cadar a)))\n                                                      \
    \             (else (cond ((< (cadar a) (car b)) (string-equal? (cadar a) (car\
    \ b))\n                                                                      \
    \   (else (string-equal? (cadar b) (car a))))\n                              \
    \                                       (else (cond ((< (car a) (cadar b)) (string-equal?\
    \ (car a) (cadar b))\n                                                       \
    \                  (else (string-equal? (car b) (cadar a)))\n                \
    \                                                         (else (cond ((< (cadar\
    \ a) (car b)) (string-equal? (cadar a) (car b))\n                            \
    \                                                   (else (string-equal? (cadar\
    \ b) (car a))))\n                                                            \
    \                (else (cond ((< (car a) (cadar b)) (string-equal? (car a) (cadar\
    \ b))\n                                                                      \
    \             (else (string-equal? (car b) (cadar a)))\n                     \
    \                                                              (else (cond ((<\
    \ (cadar a) (car b)) (string-equal? (cadar a) (car b))\n                     \
    \                                                                      (else (string-equal?\
    \ (cadar b) (car a))))\n                                                     \
    \                                    (else (cond ((< (car a) (cadar b)) (string-equal?\
    \ (car a) ", "  (cond [(null? a) (null? b)\n         a]\n        [(and (number?\
    \ (car a)) (number? (car b)))\n         (if (> (car a) (car b))\n            \
    \ (compare_one (cdr a) (cdr b))\n             (compare_one (car a) (car b)))]\n\
    \        [(and (number? (car a)) (not (number? (car b))))\n         (if (< (car\
    \ a) (car b))\n             (compare_one (cdr a) (cdr b))\n             (compare_one\
    \ (car a) (car b)))]\n        [(and (number? (car a)) (not (number? (car b))))\n\
    \         (if (< (car a) (car b))\n             (compare_one (cdr a) (cdr b))\n\
    \             (compare_one (car a) (car b)))]\n        [else\n         (if (<\
    \ (car a) (car b))\n             (compare_one (cdr a) (cdr b))\n             (compare_one\
    \ (car a) (car b)))]))\n", "  (cond\n    [(= a b) b]\n    [(= (float a) (float\
    \ b)) (float b)]\n    [else (cond [(string? a) (string-ref a 1)] [else (integer\
    \ a)])]))\n", "  (cond [(equal? a b) None]\n        [(or (integer? a) (number?\
    \ a)) (number? b)]\n        [(or (float? a) (number? a)) (number? b)]\n      \
    \  [(string? a) (string? b)]))\n", "  (match a\n    ((list) (car a)) ((number))\
    \ (car b)\n    ((string) (string-compare (car a) (car b)))\n    (else (error \"\
    Not comparable in type\" a b))\n  )\n)\n", "  (cond ((and (number? a) (number?\
    \ b)) (if (> a b) a b))\n        ((and (number? a) (string? b)) (string->list\
    \ (string->real b) (string->real a))\n         (if (string=? a b)\n          \
    \   a\n             (if (string=? (string->list a \".\") (string->list b \".\"\
    )) \n               (string->list (string->real a \".\") (string->real b \".\"\
    ))\n               (string->list a \".\"))))\n        (else (if (string=? a b)\n\
    \                (string->list a \".\")\n                a)))\n  )\n", "  (cond\
    \ [(< a b) a]\n        [(> a b) b]\n        [else ]))\n", "  (cond\n    [(number?\
    \ a) (number? b) (number? (+ a b))]\n    [(string? a) (string? b) (string? (string->number\
    \ (string-append a \",\" b \",\" a \",\" b))))\n    [else (let ([compare (- (if\
    \ (string? a) (string->number a)\n                           (number->string a)\
    \ a)\n                           (if (string? b) (string->number b)\n        \
    \                       (number->string b) b))]\n              [smallest (if (<\
    \ compare compare) (number->string compare) None)])\n           (cond\n      \
    \       [(smallest? smallest) (number->string (+ compare a))\n               (smallest?\
    \ smallest) (number->string b)]\n             [else smallest])]]))\n", "  (cond\n\
    \    ((number? a) (number? b)) (if (a> b) (list a) (list b)) (if a= b) (list a)\
    \ None)\n    ((string? a) (string? b)) (if a> b) (list a) (list b) None)\n   \
    \ ((real? a) (real? b)) (if a> b) (list a) (list b) None)\n    (else (list a b)\
    \ None)))\n", "  (cond\n    [(number? a) (number? b) (if (> a b) a b)]\n    [(number?\
    \ a) None\n     (if (= (modulo a 1) 0) (if (> a b) a b) None)]\n    [(number?\
    \ b) None\n     (if (= (modulo b 1) 0) (if (> a b) a b) None)]\n    [(string?\
    \ a) None\n     (if (= (length a) (length b)) (if (> a b) a b) None)]\n    [(string?\
    \ b) None\n     (if (= (length b) (length a)) (if (> a b) a b) None)]\n    [else\
    \ (if (< a b) (compare a b) None)]\n  )\n)\n", "  (cond ((or (number? a) (number?\
    \ b)) (number? b))\n        ((number? a) (number? b))\n        ((string? a) (string?\
    \ b))\n        ((equal? a b) (number? b))\n        (else (and (number? a) (number?\
    \ b))\n               (number? (max (+ a b) 1.0)))\n  )\n)\n", "  (cond ((number?\
    \ a) a)\n        ((number? b) b)\n        (else (or (string= (number-str a) (number-str\
    \ b))\n                  (string= (number-str a) (number-str \".\"))))))\n", " \
    \ (cond ((or (= (length a) (length b)) (string? (length a)) (string? (length b)))\n\
    \         (let ((astr (string->list a)))\n           (let ((bstr (string->list\
    \ b)))\n             (if (null? astr) bstr\n                 (if (null? bstr)\
    \ astr\n                   (if (< (length astr) 0) bstr\n                    \
    \ (if (< (length bstr) 0) astr\n                         (list (append (astr bstr)\
    \ '()))))))))\n        (else (let ((astr (string->list a))\n                 \
    \     (bstr (string->list b)))\n              (if (= (length astr) (length bstr))\n\
    \                  (if (< (length astr) 0) bstr\n                     (if (< (length\
    \ bstr) 0) astr\n                         (list (append (astr bstr) '()))))\n\
    \                  (if (< (length astr) 0) astr\n                     (if (< (length\
    \ bstr) 0) bstr\n                         (list (append (astr bstr) '()))))))))\n",
  "  (cond [(number? a) (number? b) (cond [(< a b) a]\n                          \
    \                      [(> a b) b])]\n        [(symbol? a) (symbol? b) (cond [(>\
    \ a b) b]\n                                           [(< a b) a])]\n        [(string?\
    \ a) (symbol? b) (cond [(< a b) a]\n                                         \
    \  [(> a b) b])]\n        [else (cond [(> a b) b]\n                   [(< a b)\
    \ a])]))\n", "  (cond [(number? a) (number? b)\n         [(string? a) (string?\
    \ b) (string=? a (string b))\n         (string? b) (string? a) (string=? b (string\
    \ a))]\n         [(list? a) (list? b) (list? (compare_int a b))]\n         [else\n\
    \         (if (real? a) (real? b) (string=? (string a) (string b)) (string=? (string\
    \ b) (string a)))]))\n", "  (cond ((= (real? a) (real? b)) a)\n        (else (>\
    \ (real? a) (real? b)) b)\n        (else (< (real? a) (real? b)) a)\n        (else\
    \ (> (real? a) (real? b)))))\n", "  (cond ((or (number? a) (number? b)) (number?\
    \ b))\n        ((equal? (number-as-string a) (number-as-string b))\n         (number-as-string\
    \ b))\n        ((equal? (string->number a) (string->number b))\n         (string->number\
    \ b))\n        (else (equal? (string->number a) (string->number b))\n        \
    \       (string->number b))))\n", "  (cond\n    ((number? a) (number? b))\n  \
    \  ((string? a) (string? b) (equal? a b) (string-char-index a 0))\n    ((symbol?\
    \ a) (symbol? b) (equal? a b) (symbol-char-index a 0))\n    (else (equal? a b))))\n",
  "  (cond (number? a)\n         a\n         (number? b)\n         b\n         (string?\
    \ a)\n         (string? b)\n         (equal? a b)\n         (string=? a b) (if\
    \ (equal? a b) (symbol=? a b) (string=? a b) (symbol=? a b))\n         ((number=\
    \ a b) (number= a b))\n         ((number= a 1) (number= b 1))\n         ((string=?\
    \ a \",\" (string=? b \",\"))\n          (string=? a \".\" (string=? b \".\")))\n\
    \         ((string=? a \".\" (string=? b \",\"))\n          (string=? a \",\"\
    \ (string=? b \".\"))\n          (string=? a \",\" (string=? b \",\"))\n     \
    \     (string=? a \".\" (string=? b \",\"))\n          (string=? a \",\" (string=?\
    \ b \".\"))\n          (string=? a \",\" (string=? b \",\"))\n          (string=?\
    \ a \".\" (string=? b \",\"))\n          (string=? a \",\" (string=? b \".\"))\n\
    \          (string=? a \",\" (string=? b \",\"))\n          (string=? a \".\"\
    \ (string=? b \",\"))\n          (string=? a \",\" (string=? b \".\"))\n     \
    \     (string=? a \",\" (string=? b \",\"))\n          (string=? a \".\" (string=?\
    \ b \",\"))\n          (string=? a \",\" (string=? b \".\"))\n          (string=?\
    \ a \",\" (string=? b \",\"))\n          (string=? a \".\" (string=? b \",\"))\n\
    \          (string=? a \",\" (string=? b \".\"))\n          (string=? a \",\"\
    \ (string=? b \",\"))\n          (string=? a \".\" (string=? b \",\"))\n     \
    \     (string=? a \",\" (string=? b \".\"))\n          (string=? a \",\" (string=?\
    \ b \",\"))\n          (string=? a \".\" (string=? b \",\"))\n          (string=?\
    \ a \",\" (string=? b \".\"))\n          (string=? a \",\" (string=? b \",\"))\n\
    \          (string=? a \".\" (string=? b \",\"))\n          (string=? a \",\"\
    \ (string=? b \".\"))\n          (string=? a \",\" (string=? b \",\"))\n     \
    \     (string=? a \".\" (string", "  (cond\n    [(number? a) (number? b) (if (equal?\
    \ a b) a b)]\n    [(real? a) (real? b) (if (equal? a b) (- a) b)]\n    [(boolean?\
    \ a) (boolean? b) (if (equal? a b) a b)]\n    [(string? a) (string? b) (if (equal?\
    \ (string-compare a b) 0) a b)]\n    [else (error 'equal? \"Not comparable\")]))\n",
  "  (if (type? a number? string? real?)\n      (if (> a b)\n          (if (type?\
    \ b number?)\n              b\n              (if (type? b string?)\n         \
    \         (format \"~a,\" b)\n                  (format \"~a,,\" (float b)))\n\
    \              (if (type? b real?)\n                  (max a b)\n            \
    \      (max b a))))\n      (if (= a b)\n          a\n          (if (type? b number?)\n\
    \              b\n              (if (type? b string?)\n                  (format\
    \ \"~a,\" b)\n                  (format \"~a,,\" (float b)))\n              (if\
    \ (type? b real?)\n                  (max a b)\n                  (max b a))))))\n",
  "  (cond ((string=? a b)\n         a)\n        ((real=? a b)\n         a)\n    \
    \    ((real=? b 'nan)\n         'nan)\n        ((real=? b 'infinity)\n       \
    \  'inf)\n        ((real=? b '-infinity)\n         '-inf)\n        ((real=? b\
    \ 'nan)\n         'nan)\n        (else\n         (bigger-equal? a b))))\n", " \
    \ (cond [(number? a) (number? b) (= a b)]\n        [(symbol? a) (symbol? b) (=\
    \ (string-ref a 0) (string-ref b 0))]\n        [else (symbol? a) (symbol? b) (=\
    \ (string-ref a 0) (string-ref b 0))]))\n", "  (cond [(number? a) (number? b)\n\
    \         (number? a) (number? b)]\n        [(symbol? a) (symbol? b)\n       \
    \  (symbol? a) (symbol? b)]\n        [(string? a) (string? b)\n         (string?\
    \ a) (string? b)]\n        [(null? a) (null? b)\n         (null? a) (null? b)]\n\
    \        [else (max a b)]))\n", "  (cond [(integer? a) (integer? b)]\n       \
    \ [(equal? a b) None] [(number? a) (number? b)]\n        [(equal? a \"0\") (equal?\
    \ b \"0\")] [(equal? a \"-\") (equal? b \"-\")]\n        [(equal? a \"-\") (equal?\
    \ b \"-\")]\n        [(equal? a \"0\") (equal? b \"0\")]\n        [else (let ([s\
    \ (string->number (string-append \"-\" a \"+\" b)))]\n                 [(equal?\
    \ (real-part s)\n                         (real-part (expt s 2))\n           \
    \              b)]))]))\n", "  (cond [(and (number? a) (number? b)) (if (> a b)\
    \ a b)]\n        [(and (number? a) (string? b)) (if (< a b) a b)]\n        [(and\
    \ (number? b) (string? a)) (if (> a b) b a)]\n        [(and (number? a) (number?\
    \ b)) (if (> b a) a b)]\n        [(and (string? a) (number? b)) (if (< b a) b\
    \ a)]\n        [(and (string? a) (string? b)) (if (< a b) a b)]))\n", "  (cond\
    \ ((string? a) (string? b))\n        ((number? a) (number? b))\n        ((real?\
    \ a) (number? b))\n        ((real? b) (number? a))\n        (else (max (number->real\
    \ (car a)) (number->real (car b)))\n               (max (number->real (car b))\
    \ (number->real (car a)))))\n)\n", "  (cond\n    [(number? a) (number? b) (string-compare\
    \ (number->string a) (number->string b))]\n    [else\n     (if (string? a)\n \
    \      (string-compare (string->number a) (number->string b))\n       (string-compare\
    \ (number->string a) (number->string b))]\n  )\n)\n", "  (cond ((or (string? a)\
    \ (string? b)) (number? a b))\n        ((number? a b) a)\n        (else (number?\
    \ b))))\n", "  (cond ((or (string? a) (number? a)) (string? b))\n        ((or\
    \ (string? b) (number? b)) (string? a))\n        ((or (string? a) (number? b))\
    \ (string? b))\n        ((or (string? b) (number? a)) (string? a))\n        (else\n\
    \         (> (number->real a) (number->real b)))))\n", "  (cond [(< a b) (cons\
    \ a b)]\n        [(> a b) (cons b a)]\n        [else (cons a b)]))", "  (let ([a\
    \ (type-of a)\n        b (type-of b)])\n    (cond\n      [(equal? a b) #t]\n \
    \     [(and (integer? a) (integer? b)) (if (greater a b) a b)]\n      [(and (integer?\
    \ a) (not (integer? b)))\n       (if (equal? a b) a b)]\n      [(and (integer?\
    \ a) (not (integer? b)))\n       (if (equal? (string->list a) (string->list b))\
    \ a b)]\n      [(and (integer? a) (integer? b))\n       (if (equal? (string->list\
    \ a) (string->list b))\n           (compare_int a b)\n           (equal? (string->list\
    \ a) (string->list b)))]\n      [(and (integer? a) (not (integer? b)))\n     \
    \  (if (equal? (string->list a) (string->list b)) (compare_int a b)\n        \
    \   (equal? (string->list a) (string->list b)))]\n      [(and (integer? a) (not\
    \ (integer? b)))\n       (if (equal? (string->list a) (string->list b))\n    \
    \       (compare_int a b)\n           (equal? (string->list a) (string->list b)))]\n\
    \      [(and (not (integer? a)) (integer? b))\n       (if (equal? (string->list\
    \ a) (string->list b))\n           (compare_int a b)\n           (equal? (string->list\
    \ a) (string->list b)))]\n      [(and (not (integer? a)) (not (integer? b)))\n\
    \       (if (equal? (string->list a) (string->list b))\n           (compare_int\
    \ a b)\n           (equal? (string->list a) (string->list b)))]\n      [(and (not\
    \ (integer? a)) (not (integer? b)))\n       (if (equal? (string->list a) (string->list\
    \ b))\n           (compare_int a b)\n           (equal? (string->list a) (string->list\
    \ b)))]\n      [else\n       (if (equal? a b)\n           a\n           (if (equal?\
    \ a b)\n               a\n               (equal? (string->list a) (string->list\
    \ b))))]))\n", "  (cond [(number? a) (number? b) a]\n        [(number? b) (number?\
    \ a) b]\n        [(string? a) (string? b) (string-sort (number->string a) (string-sort\
    \ (number->string b)))]\n        [else (cond [(string? (number->string a)) (number->string\
    \ b)]\n                   [(string? (number->string b)) (number->string a)]\n\
    \                   [else (number->string a)]))))\n", "  (if (and (number? a)\
    \ (number? b))\n      (> (fst a) (fst b))\n      (if (string? a)\n          (string-equal\
    \ a b)\n          (equal? a b)))))\n", "  (cond [(number? a) a]\n        [(number?\
    \ b) b]\n        [(string? a) (parse a (number->string 10))]\n        [(string?\
    \ b) (parse b (number->string 10))]\n        [(equal? a b) None]))\n", "  (cond\
    \ [(number? a) (number? b) (string-compare-floats a)\n         (string-compare-floats\
    \ b) (number? (string-compare-ints a))\n         (number? (string-compare-ints\
    \ b)) (string-compare-strings a)\n         (string-compare-strings b) (number?\
    \ (string-compare-floats a))\n         (number? (string-compare-floats b)) (string-compare-ints\
    \ a)\n         (number? (string-compare-ints b))\n         :else\n         (number?\
    \ (string-compare-ints a b))]))\n", "  (cond [(= a b) a]\n        [(number? a)\
    \ (number? b)]\n        [(string? a) (string? b)]\n        [(number? (string-ref\
    \ a 0) (string-ref b 0))\n         (number? (string-ref b 0) (string-ref a 0))]\n\
    \        [(string? (string-ref a 0) (string-ref b 0))\n         (string? (string-ref\
    \ b 0) (string-ref a 0))]\n        [(number? (string-ref a 0) (string-ref b 0))\n\
    \         ((if (number? b)\n              (string-ref b 0)\n              (string-ref\
    \ a 0))\n          (if (string? a)\n              (string-ref a 0)\n         \
    \     (string-ref b 0)))]\n        [(string? (string-ref a 0) (string-ref b 0))\n\
    \         ((if (string? a)\n              (string-ref a 0)\n              (string-ref\
    \ b 0))\n          (if (number? a)\n              (string-ref a 0)\n         \
    \     (string-ref b 0)))]\n        [(boolean? a) (boolean? b)]\n        [(null?\
    \ a) (null? b)]\n        [else\n         (if (number? b)\n              (number?\
    \ a)\n              (string? a)\n              (string? b))]))\n", "  (if (equal?\
    \ a b)\n      a\n      (if (and (number? a) (number? b))\n          (number->string\
    \ max)\n          (if (or (number? a) (number? b))\n              (number->string\
    \ a)\n              (number->string b)\n              (number->string max))))))\n",
  "  (cond [(string? a) (string? b)\n         ]\n        [(number? a) (number? b)\n\
    \         ]\n        [(string=? a b) a\n         ]\n        [(number= a b) b\n\
    \         ]\n        [else (list< a b >)\n         ]))\n\n", "  (cond [(number?\
    \ a) (number? b) (equal? a b)]\n        [(number? a) (number? b) (> (number-float?\
    \ a) (number-float? b))]\n        [(string? a) (string? b) (> (string-length a)\
    \ (string-length b))]\n        [(string? a) (string? b) (equal? (string-ref a\
    \ 0)\n                                          (string-ref b 0))]\n        [(list?\
    \ a) (list? b) (< (length a) (length b))]\n        [(list? a) (list? b) (equal?\
    \ (first a) (first b))]\n        [else (> (number-float? a) (number-float? b))]))\n",
  "  (cond [(number? a) (number? b)\n         (string=? a b) (string=? b (string->number\
    \ a))\n         ((string->number? a) (string->number? b) (string=? a (string->number\
    \ b)))]\n        [(number? b) (number? a)\n         (string=? b (string->number\
    \ b)) (string=? a (string->number a))\n         ((string->number? b) (string->number?\
    \ a) (string=? (string->number a) (string->number b)))]\n        [(string? b)\
    \ (string? a)\n         (string=? a b) (string=? b (string->string a))\n     \
    \    ((string->string? a) (string->string? b) (string=? a (string->string b)))]\n\
    \        [(null? b) (null? a)\n         #t]\n        [else (if (> a b) (if (number?\
    \ a) (number->string a) (string->string b)) (if (number? b) (number->string b)\
    \ (string->string a)))]))\n", "  (cond [(string? a) (string? b) (string-compare\
    \ (string-trim a) (string-trim b) -1)]\n        [else (number? a) (number? b)\
    \ (number-compare (number-floor a) (number-floor b) -1)]\n  ))\n", "  (cond\n\
    \    [(number? a) (number? b)\n     (if (< a b) (number? b) (number? a))\n   \
    \  (number? a)]\n    [(string? a) (string? b)\n     (if (< a b) (string? b) (string?\
    \ a))\n     (string? a)]\n    [(bool? a) (bool? b)\n     (if (< a b) (bool? b)\
    \ (bool? a))\n     (bool? a)]\n    [else (error 'compare \"A variable of type\
    \ ~a cannot be compared with ~a\" a b)]\n    [(number? (number-or-string? a))\
    \ (number? (number-or-string? b))\n     (if (< a b) (number? (number-or-string?\
    \ b)) (number? (number-or-string? a)))\n     (number? (number-or-string? a)]]\n\
    \    [(string? (number-or-string? a)) (string? (number-or-string? b))\n     (if\
    \ (< a b) (string? (number-or-string? b)) (string? (number-or-string? a)))\n \
    \    (string? (number-or-string? a)]]\n    [(bool? (number-or-string? a)) (bool?\
    \ (number-or-string? b))\n     (if (< a b) (bool? (number-or-string? b)) (bool?\
    \ (number-or-string? a)))\n     (bool? (number-or-string? a)]]\n    [else (error\
    \ 'compare \"A variable of type ~a cannot be compared with ~a\" a b)]))\n", " \
    \ (cond [(> (number->real (car a)) (number->real (car b))) (list (car a) (number->real\
    \ (car b)))]\n        [(> (number->real (car b)) (number->real (car a))) (list\
    \ (number->real (car b)) (car a))]\n        [(= (number->real (car a)) (number->real\
    \ (car b))) None]\n        [(number->real (car a)) (number->real (car b))]\n \
    \       [else (cons (car a) (compare_one (cdr a) (cdr b)))]))\n", "  (cond ((number?\
    \ a) (number? b))\n        ((string? a) (string? b))\n        ((list? a) (list?\
    \ b))\n        ((pair? a) (pair? b))\n        (else (if (number? a)\n        \
    \            (if (< (real->double-float-precision a) (real->double-float-precision\
    \ b))\n                        (real->double-float-precision b)\n            \
    \          (real->double-float-precision a))\n                    (real->double-float-precision\
    \ b))))))\n", "  (cond ((or (typep a list) (typep b list))\n         (car a) (compare\
    \ a b))\n        (typep a number?)\n        (typep b number?)\n        (typep\
    \ a string?)\n        (typep b string?)\n        (string=? (string->number a)\
    \ (string->number b))\n        (number= a (number->string a))\n        (number=\
    \ b (number->string b)))\n     ;; None of the above cases were true\n     ;; The\
    \ numbers are equal\n     ;; It's an integer, so compare them as such\n     (else\
    \ (if (integer? a)\n               (if (= (floor (car a)) (floor (car b)))\n \
    \                  (car a)\n                   (car b)))\n          (if (integer?\
    \ b)\n               (if (= (floor (car a)) (floor (car b)))\n               \
    \    (car b)\n                   (car a))\n               #f))))\n", "  (cond\
    \ ((= (type a) (type b)) (if (= a b) (type a) '?))\n        ((string? a) (if (string?\
    \ b) (string a (compare (float a) (float b))) '?))\n        ((real? a) (if (real?\
    \ b) (real (compare_one a b)) '?))\n        ((integer? a) (if (integer? b) (integer\
    \ (compare_one a b)) '?)))\n", "  (cond\n    [(number? a) (number? b) (cond [(>\
    \ a b) b (< a b) a]]) \n    [(string? a) (string? b) (cond [(< (string-ref a 0)\
    \ \",\")\n                                     (> (string-ref a 0) \".\")\n  \
    \                                   (= (string-ref a 0) \".\")\n             \
    \                        (< (string-ref b 0) \",\")\n                        \
    \             (> (string-ref b 0) \".\")\n                                   \
    \  (= (string-ref b 0) \".\")\n                                     (< (string-ref\
    \ (string a) 1) \",\"\n                                     (> (string-ref (string\
    \ a) 1) \".\")\n                                     (= (string-ref (string a)\
    \ 1) \".\")\n                                     (< (string-ref (string b) 1)\
    \ \",\"\n                                     (> (string-ref (string b) 1) \"\
    .\")\n                                     (= (string-ref (string b) 1) \".\"\
    )\n                                     (< (string-ref (string a) 1) \",\"\n \
    \                                    (> (string-ref (string a) 1) \".\")\n   \
    \                                  (= (string-ref (string a) 1) \".\")\n     \
    \                                (< (string-ref (string b) 1) \",\"\n        \
    \                             (> (string-ref (string b) 1) \".\")\n          \
    \                           (= (string-ref (string b) 1) \".\")\n            \
    \                         (< (string-ref (string a) 2) \",\"\n               \
    \                      (> (string-ref (string a) 2) \".\")\n                 \
    \                    (= (string-ref (string a) 2) \".\")\n                   \
    \                  (< (string-ref (string b) 2) \",\"\n                      \
    \               (> (string-ref (string b) 2) \".\")\n                        \
    \             (= (string-ref (string b) 2) \".\")\n                          \
    \           (< (string-ref (string a) 3) \",\"\n                             \
    \        (> (string-ref (string a) 3) \".\")\n                               \
    \      (= (string-ref (string a) 3) \".\")\n                                 \
    \    (< (string-ref (string b) 3) \",\"\n                                    \
    \ (> (string-ref (string b) 3) \".\")\n                                     (=\
    \ (string-ref (string b) 3) \".\")]) \n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ]\n\
    \                                    )\n                                    ",
  "  (cond [(or (number? a) (number? b)) (number? a)\n         (or (string? a) (string?\
    \ b)) (string? a)\n         (or (real? a) (real? b)) (real? a)]\n        [(equal?\
    \ a b) a]\n        [(string? a) (cond [(or (char? a) (string=? \",\" a)) \",\"\
    ]\n                         [(or (char? a) (string=? \".\" a)) \".\"]\n      \
    \                   [(or (char? a) (string=? \".\" a)) \".\"]\n              \
    \           [(or (char? a) (string=? \",\" a)) \",\"]\n                      \
    \   [(or (char? a) (string=? \".\" a)) \".\"]\n                         [(or (char?\
    \ a) (string=? \",\" a)) \",\"]\n                         [(or (char? a) (string=?\
    \ \",\" a)) \",\"]\n                         [(or (char? a) (string=? \",\" a))\
    \ \",\"]\n                         [(or (char? a) (string=? \",\" a)) \",\"]\n\
    \                         [(or (char? a) (string=? \",\" a)) \",\"]\n        \
    \                 [(or (char? a) (string=? \",\" a)) \",\"]\n                \
    \         [(or (char? a) (string=? \",\" a)) \",\"]\n                        \
    \ [(or (char? a) (string=? \",\" a)) \",\"]\n                         [(or (char?\
    \ a) (string=? \",\" a)) \",\"]\n                         [(or (char? a) (string=?\
    \ \",\" a)) \",\"]\n                         [(or (char? a) (string=? \",\" a))\
    \ \",\"]\n                         [(or (char? a) (string=? \",\" a)) \",\"]\n\
    \                         [(or (char? a) (string=? \",\" a)) \",\"]\n        \
    \                 [(or (char? a) (string=? \",\" a)) \",\"]\n                \
    \         [(or (char? a) (string=? \",\" a)) \",\"]\n                        \
    \ [(or (char? a) (string=? \",\" a)) \",\"]\n                         [(or (char?\
    \ a) (string=? \",\" a)) \",\"]\n                         [(or (char? a) (string=?\
    \ \",\" a)) \",\"]\n                         [(or (char? a) (string=? \",\" a))\
    \ \",\"]\n                         [(or (char? a) (string=? \",\" a)) \",\"]\n\
    \                         [(or (char? a) (string=? \",\" a)) \",\"]\n        \
    \                 [(or (char? a", "  (cond [(equal? a b) '()]\n        [(number?\
    \ a) (list (number? b) (number->string a))\n                          (number?\
    \ b) (list (number? a) (number->string b))]\n        [(string? a) (list (string?\
    \ b) a)\n                          (string? b) (b a)]\n        [else (if (string=?\
    \ a b) (list (string-compare a b) (string-compare b a)) (list (string-compare\
    \ a b) b))]))\n", "  (cond (number? a) (number? b) (number? b)\n        (string?\
    \ a) (string? b) (string? b)\n        (boolean? a) (boolean? b) (boolean? b)\n\
    \        (char? a) (char? b) (char? b)\n        (tinyint? a) (tinyint? b) (tinyint?\
    \ b)\n        (float? a) (float? b) (if (< (float->int a) (float->int b)) \n \
    \                                (char->string (float->int a))\n             \
    \                    (char->string (float->int b))))\n        \n        (string?\
    \ a) (number? b) (if (< (string->number a) (number->float b)) \n             \
    \                    (string->number a)\n                                 (number->float\
    \ b))))\n    ", '  (if (number? a) (> (make-a-variable b) a) None))', "  (cond\
    \ (number? a) (number? b) (> (number-compare a b) 0))\n  (cond (string? a) (string?\
    \ b) (> string-compare-cases a b) (string-compare-cases a b) #f)\n  (else (number?\
    \ a) (number? b) (> (number-compare a b) 0))))\n", "  (cond ((equal? (typeof!\
    \ a 'string) 'string) (equal? (string->number (a)) (string->number (b))))\n  \
    \      (else (if (equal? (typeof! a 'integer) 'integer) (> (number->int a) (number->int\
    \ b)) (> (number->float a) (number->float b)) (> (string->list a) (string->list\
    \ b))))))\n", "  (cond\n    ((equal? a b) '())\n    ((equal? (real->float a) (real->float\
    \ b)) a)\n    ((equal? (real->string a) (real->string b)) a)\n    (else b)))\n",
  "  (cond ((equal? a b) #t)\n        ((number? a) (number? b))\n        ((string?\
    \ a) (string? b))\n        (else (make-string (< a b) \"\"))))\n", "  (cond ((equal?\
    \ a b) '())\n        (else (cons (type-of a) (cons a b)))\n  )\n)\n", "  (cond\
    \ ((typep a 'string) (compare a b '>))\n        ((typep b 'string) (compare a\
    \ b '<))\n        ((typep a 'number) (> a b)))\n        ((typep b 'number) (<\
    \ a b)))\n        ((typep (first a) (first b)) (compare (first a) (first b) '<))\n\
    \        ((typep (first b) (first a)) (compare (first a) (first b) '>))))\n",
  "  (cond [(number? a) (number? b) a]\n        [(number? b) (number? a) b]\n    \
    \    [(string? a) (string? b) a]\n        [(string? b) (string? a) b]\n      \
    \  [(equal? (float a) (float b)) (float a)\n         (equal? (float b) (float\
    \ a)) b]))\n", "  (cond ((number? a) (number? b) b)\n        ((string? a) (string?\
    \ b) (string-compare a b))\n        ((symbol? a) (symbol? b) (compare-one (symbol->number\
    \ a) (symbol->number b)))\n        ((real? a) (real? b) (compare-one (number->real\
    \ (symbol->number a)) (number->real (symbol->number b))))\n        (else (if (equal?\
    \ a b) a b))))\n</cell>\n<text>\nExercise: How would you write compare_two and\
    \ compare_two_numbers?\n\n\n</text>\n<cell>", "  (cond [(number? a) (number? b)\
    \ (if (equal? a b) None (number? (>? a b)))]\n        [(string? a) (string? b)\
    \ (if (equal? a b) None (string? (>? a b)))]\n        [(null? a) (null? b) (if\
    \ (equal? a b) None (null? (>? a b)))]\n        [else (compare_two (first a) (first\
    \ b) (second a) (second b))))))\n", "  (cond (;; Floats are greater than integers\n\
    \         (< (real-part a) (real-part b))\n         (< (real-part b) (real-part\
    \ a))\n         (= (real-part a) (real-part b)))\n         (;; Strings are greater\
    \ than numbers and numbers\n         (< (string->number a) (string->number b))\n\
    \         (< (string->number b) (string->number a))\n         (= (string->number\
    \ a) (string->number b))))\n  ;; If they're equal, return None\n  ;; Note: Strings\
    \ are compared lexicographically, so \"2\" < \"10\"\n  (= a b))\n", "  (cond\n\
    \    [(number? a) (number? b) (number? a)]\n    [(number? a) (number? b) (number?\
    \ b)]\n    [(number? b) (number? a) (number? a)]\n    [else (< (number->string\
    \ a) (number->string b))]\n  ))\n", "  (cond\n    [(equal? a b) a]\n    [(equal?\
    \ (real-part a) (real-part b)) (real-part a)]\n    [else (compare-one (real-part\
    \ a) (real-part b))]))\n", "  (if (and (number? a) (number? b))\n      (if (<\
    \ (float a) (float b))\n          (float b)\n          (float a))\n      (a-b)))\n",
  "  (cond [(equal? (type a) (type b)) (exact->inexact a)]\n        [(number? (same->inexact\
    \ a b)) (exact->inexact a)]\n        [(string? (same->inexact (parse-integer a)\
    \ (parse-integer b)))\n         (parse-integer a)]\n        [else (compare-one\
    \ b (sub1 a))]\n  )\n)\n", "  (cond [(number? a) (number? b)\n         (string?\
    \ (car a)) (string? (car b))\n         (> (real-part a) (real-part b))\n     \
    \    (> (imag-part a) (imag-part b))]\n        [(symbol? a) (symbol? b)\n    \
    \     (string? (car (symbol->string a)))\n         (string? (car (symbol->string\
    \ b)))\n         (> (symbol->string a) (symbol->string b))\n         (> (real-part\
    \ (symbol->string a))\n               (real-part (symbol->string b)))\n      \
    \   (> (imag-part (symbol->string a))\n               (imag-part (symbol->string\
    \ b)))]))", "  (cond ((number? a) (number? b))\n        ((string? a) (string?\
    \ b) (equal? a b))\n        ((real? a) (real? b) (equal? a b)))\n  ; Return None\n\
    \  ; Note: If a real number is represented as a string, the floating point might\
    \ be . or ,\n  (cond ((number? a) (number? b))\n        ((string? a) (string?\
    \ b) (equal? a b))\n        ((real? a) (real? b) (equal? a b)))\n  ; Return None\n\
    \  ; Note: If a real number is represented as a string, the floating point might\
    \ be . or ,\n  (cond ((number? a) (number? b))\n        ((string? a) (string?\
    \ b) (equal? a b))\n        ((real? a) (real? b) (equal? a b)))\n  ; Return None\n\
    \  (cond ((number? a) (number? b))\n        ((string? a) (string? b) (equal? a\
    \ b))\n        ((real? a) (real? b) (equal? a b)))\n  ; Return None\n  (cond ((number?\
    \ a) (number? b))\n        ((string? a) (string? b) (equal? a b))\n        ((real?\
    \ a) (real? b) (equal? a b)))\n  ; Return None\n  (cond ((number? a) (number?\
    \ b))\n        ((string? a) (string? b) (equal? a b))\n        ((real? a) (real?\
    \ b) (equal? a b)))\n  ; Return None\n  (cond ((number? a) (number? b))\n    \
    \    ((string? a) (string? b) (equal? a b))\n        ((real? a) (real? b) (equal?\
    \ a b)))\n  ; Return None\n  (cond ((number? a) (number? b))\n        ((string?\
    \ a) (string? b) (equal? a b))\n        ((real? a) (real? b) (equal? a b)))\n\
    \  ; Return None\n  (cond ((number? a) (number? b))\n        ((string? a) (string?\
    \ b) (equal? a b))\n        ((real? a) (real? b) (equal? a b)))\n  ; Return None\n\
    \  (cond ((number? a) (number? b))\n        ((string? a) (string? b) (equal? a\
    \ b))\n        ((real? a) (real? b", "  (cond [(number? a) (number? b) a]\n  \
    \      [(string? a) (string? b) a]\n        [(equal? a b) (number? a) b]))\n",
  "  (cond [(number? a) (number? b)\n         (number? (string->number a))\n     \
    \    (number? (string->number b)) (number? a) None\n         :else (float? a)\
    \ (float? b) (float? (string->number a)) (float? (string->number b)) (number?\
    \ a)\n          :else (string? a) (string? b) (string? (string->number a)) (string?\
    \ (string->number b)) (number? a)\n         ]))\n", "  (cond\n    [(number? a)\
    \ b]\n    [(string? a) (if (string=? \"1,\" a) (string=? \"2,\" a) (string=? \"\
    ,\" a) a)]\n    [else (if (number= a b) (cond [(< a b) b] [else a])]\n  ))\n",
  "  (if (equal? (type-of a) (type-of b))\n      (if (> (type-of a) (string-type b))\n\
    \          (string-ref (string-ref a 1)) (type-of a))\n      None))", "  (cond\
    \ ((string? a) (string= a b))\n        (else (number? a) (number= a b))))\n",
  "  (cond\n    [(equal? a b)\n     (if (equal? (char-code a) (char-code b))\n   \
    \      b\n         (if (equal? (string-ref a (- 4)) (string-ref b (- 4)))\n  \
    \           (string-ref b (- 4))\n             (string-ref a 4))\n       (string-ref\
    \ b (- 4)))]\n    [(string? a) (if (equal? (string-ref a 2) (string-ref b 2))\n\
    \                    (if (equal? (string-ref a 3) (string-ref b 3))\n        \
    \                (if (equal? (string-ref a 4) (string-ref b 4))\n            \
    \                (if (equal? (string-ref a 5) (string-ref b 5))\n            \
    \                    (if (equal? (string-ref a 6) (string-ref b 6))\n        \
    \                            (if (equal? (string-ref a 7) (string-ref b 7))\n\
    \                                        (if (equal? (string-ref a 8) (string-ref\
    \ b 8))\n                                            (if (equal? (string-ref a\
    \ 9) (string-ref b 9))\n                                                (if (equal?\
    \ (string-ref a 10) (string-ref b 10))\n                                     \
    \               (if (equal? (string-ref a 11) (string-ref b 11))\n           \
    \                                             (if (equal? (string-ref a 12) (string-ref\
    \ b 12))\n                                                            (if (equal?\
    \ (string-ref a 13) (string-ref b 13))\n                                     \
    \                           (if (equal? (string-ref a 14) (string-ref b 14))\n\
    \                                                                    (if (equal?\
    \ (string-ref a 15) (string-ref b 15))\n                                     \
    \                                   (if (equal? (string-ref a 16) (string-ref\
    \ b 16))\n                                                                   \
    \         (if (equal? (string-ref a 17) (string-ref b 17))\n                 \
    \                                                               (if (equal? (string-ref\
    \ a 18) (string-ref b 18))\n                                                 \
    \                                   (if (equal? (string-ref a 19) (string-ref\
    \ b 19))\n                                                                   \
    \                     (if (equal? (string-ref a 20) (string-ref b 20))\n     \
    \                                                                            \
    \           (if (equal? (string-ref a 21) (string-ref b 21))\n               \
    \                                                                            \
    \     (if (equal? (string-ref a 22) (string-ref b 22))\n                     \
    \                                                                            \
    \   (if (equal? (string-ref a 23) (string-ref b 23))\n                       \
    \                                                                            \
    \     (if (equal? (string-ref a 24) (string-ref b 24))\n                     \
    \                                                                            \
    \           (if (equal? (string-ref a 25) (string-ref b 25))\n               \
    \                                                                            \
    \                     (if (equal? (string-ref a 26) (string-ref b 26))\n     \
    \                                                                            \
    \                                   (if (equal? (string-ref a 27) (string-ref\
    \ b 27))\n                                                                   \
    \                                                     (if (equal? (string-ref\
    \ a 28) (string-ref b 28))\n                                                 \
    \                                                                           (if\
    \ (equal? (string-ref ", "  (cond ((or (not (number? a)) (not (number? b))) (equal?\
    \ a b)) (number? (big-compare-one a b)))\n        (else (string? a) (string? b)\
    \ (equal? (number->string a) (number->string b))))\n", "  (cond\n    ((equal?\
    \ a b)\n     '#f)\n    ((equal? (real->float a) (real->float b))\n     '#t)\n\
    \    ((equal? (string->list a) (string->list b))\n     '#f)\n    ((equal? (real->string\
    \ a) (real->string b))\n     '#f)\n    ((equal? (string->number a) (number->string\
    \ b))\n     '#f)\n    ((equal? (number->string a) (number->string b))\n     '#t)\n\
    \    ((equal? (number->string a) (number->list b))\n     '#t)\n    ((equal? (string->number\
    \ a) (number->string b))\n     '#t)\n    ((equal? (number->list a) (number->string\
    \ b))\n     '#t)\n    ((equal? (number->list a) (number->list b))\n     '#f)\n\
    \    ((equal? (number->string a) (number->list b))\n     '#f)\n    ((equal? (number->list\
    \ a) (number->string b))\n     '#f)\n    ((equal? (real->list a) (real->list b))\n\
    \     '#t)\n    ((equal? (real->list a) (real->string b))\n     '#t)\n    ((equal?\
    \ (real->list a) (number->list b))\n     '#t)\n    ((equal? (number->list a) (number->list\
    \ b))\n     '#t)\n    ((equal? (string->number a) (number->string b))\n     '#f)\n\
    \    ((equal? (string->number a) (number->list b))\n     '#t)\n    ((equal? (string->number\
    \ a) (number->string b))\n     '#t)\n    ((equal? (number->string a) (number->string\
    \ b))\n     '#t)\n    ((equal? (number->string a) (number->list b))\n     '#t)\n\
    \    ((equal? (number->list a) (number->string b))\n     '#t)\n    ((equal? (number->list\
    \ a) (number->list b))\n     '#f)\n    ((equal? (real->number a) (real->number\
    \ b))\n     '#t)\n    ((equal? (real->number a) (real->string b))\n     '#f)\n\
    \    ((equal? (real->number a) (number->number b))\n     '#t)\n    ((equal? (real->number\
    \ a) (number->string b))\n     '#t)\n    ((equal? (real->number a) (number->list\
    \ b))\n     '#t)\n    ((equal? (real->number a) (number->string b))\n     '#t)\n\
    \    ((equal? (real->number a) (number->list b))\n     '#f)\n", "  (cond\n   \
    \ [(string? (string-ref a 0))\n     (if (string? (string-ref b 0))\n         (string-ref\
    \ b 0)\n         (string-ref a 0))]\n    [(number? a)\n     (if (number? b)\n\
    \         (if (>= a b)\n             a\n             b)\n         (number->string\
    \ a))\n     (number->string b)]\n    [(number? b) b]\n    [(number? a) a]\n  \
    \  [(number->string a) a]\n    [(string->number a) a]\n    [(number->string b)\
    \ b]\n    [(string->number b) b]\n    [else (if (= a b) (number->string a) (number->string\
    \ b))]))\n", "  (cond\n    [(number? a) (number? b) (if equal? (car a) (car b)\
    \ None)]\n    [(number? b) (number? a) (if equal? (car b) (car a) None)]\n   \
    \ [else (if equal? (car a) (car b) None)]))\n", "  (cond\n    [(typep a number)\
    \ (compare a b)]\n    [(typep a string) (compare a (string-append \",\" (string->number\
    \ b)))]\n    [else (cond [(number? a) (number? b) (number? b)] [(string? a) (string?\
    \ b) (string? b)]\n          [(symbol? a) (symbol? b) (symbol? b)]\n         \
    \ [else (error \"Cannot compare a variable with other type than number\")])]))\n",
  "  (if (number? a)\n      (if (number? b)\n          (if (equal? a b)\n        \
    \      (number->string\n                  (max (realpart a)\n                \
    \      (realpart b)))\n              (number->string\n                  (max (realpart\
    \ b)\n                      (realpart a)))\n              (if (equal? (car a)\
    \ (car b))\n                  (number->string\n                      (max (realpart\
    \ a)\n                          (realpart b))\n                  (number->string\n\
    \                      (max (realpart b)\n                          (realpart\
    \ a)))\n                  (number->string\n                      (max (realpart\
    \ (+ (car a)\n                                        (car b))\n             \
    \             (realpart (+ (car b)\n                                        (car\
    \ a))))\n                          (realpart (+ (car a)\n                    \
    \                    (car b))))))\n          (number->string\n              (max\
    \ (realpart b)\n                  (realpart a)))\n      (if (equal? (car a) (car\
    \ b))\n          (number->string\n              (max (realpart a)\n          \
    \        (realpart b)))\n      (number->string\n          (max (realpart b)\n\
    \              (realpart a))))\n  (if (equal? a b)\n      (number->string\n  \
    \        (max (realpart a)\n              (realpart b)))\n      (number->string\n\
    \          (max (realpart b)\n              (realpart a))))", "  (cond (list?\
    \ (car a)) (car a)\n        ((number? a) (number? b))\n        ((string? a) (string?\
    \ b))\n        (else (= a b))))\n", "  (if (or (string? a) (string? b))\n    \
    \  (if (string? a)\n          (string-ref a (string-length a) 1)\n          (string-ref\
    \ b (string-length b) 1))\n      (if (real? a) (< (real-part a) (real-part b))\
    \ (> (real-part a) (real-part b))))\n  a)\n</code>\n<|/ a tags=racket,scheme |>\n\
    <| c |>\nAs a side note, I believe that the racket/scheme language is a bit odd\
    \ when it comes to `if` statements. For example, the `if` statement in Scheme\
    \ is designed to take three arguments: a condition, an action to take if the condition\
    \ was true, and an action to take if the condition was false. You can see this\
    \ in action by reading the documentation on `cond` here: http://docs.racket-lang.org/reference/conditionals.html.\n\
    <|/ c |>\n<| c |>\nYou are correct. Racket has some quirks like the way that `if`\
    \ clauses are treated differently depending on whether they're expressions or\
    \ terms.\n<|/ c |>\n<| c |>\nThanks for the answer. I really appreciate it, since\
    \ I'm new to the language, I will have to try and understand it fully.\n<|/ c\
    \ |>\n<| c |>\nIt's a great answer, thank you. One thing I'd like to add is that\
    \ in Racket, `if` is not a statement, but an expression (a statement is a special\
    \ form that only makes sense in some contexts, like the body of a `let` form).\
    \ `if` expressions make use of pattern matching. In many cases, you can simply\
    \ use pattern matching, instead of having to write a `cond` expression, just as\
    \ in Scheme or Common Lisp.\n<|/ c |>\n<| a tags=racket,scheme |>\n<code>", " \
    \ (cond ((and (number? a) (number? b)) (if (> a b) a b))\n        ((and (number?\
    \ a) (string? b)) (if (string-compare (string->number a) (string->number b)) a\
    \ b))\n        ((and (string? a) (number? b)) (if (string-compare (string->number\
    \ a) (string->number b)) b a))\n        ((and (string? a) (string? b)) (if (string-compare\
    \ (string->number a) (string->number b)) (string->number b) (string->number a)))\n\
    \        ((and (symbol? a) (symbol? b)) (if (equal? a b) a b))\n        ((and\
    \ (pair? a) (pair? b)) (if (equal? (car a) (car b)) (car b) (car a)))\n      \
    \  ((and (pair? a) (null? b)) (if (equal? (car a) b) (car a) b)))\n        ((and\
    \ (vector? a) (vector? b)) (if (equal? (vector->list a) (vector->list b)) (vector->list\
    \ b) (vector->list a)))\n        ((and (vector? a) (null? b)) (if (equal? (vector->list\
    \ a) b) (vector->list a) b)))\n        ((and (list? a) (list? b)) (if (equal?\
    \ (car a) (car b)) (car b) (car a)))\n        ((and (list? a) (null? b)) (if (equal?\
    \ (car a) b) (car a) b)))\n        (else (if (equal? a b) (if (> a b) a b) b))))\n",
  "  (cond\n    ((number? a) (number? b))\n    ((string? a) (string? b))\n    ((real?\
    \ a) (real? b))\n    ((boolean? a) (boolean? b))\n    (else (number? (real-as-string\
    \ a) (real-as-string b))))\n)\n", "  (cond ((number? a) (number? b))\n       \
    \ ((real? a) (real? b))\n        (else (string=? a b))))\n", "  (cond\n    [(number?\
    \ a) (number? b) (number? (> a b))]\n    [(symbol? a) (symbol? b) (symbol? (>\
    \ a b))]\n    [(string? a) (string? b) (string? (> a b))]\n    [else (number?\
    \ (> a b))]\n  )\n)\n", "  (cond ((equal? a b) (cons \"equal\" '()))\n       \
    \ ((equal? (car a) (float b)) (cons (float b) (cons (car a) '()))\n        ((equal?\
    \ (car a) (string b)) (cons (string b) (cons (car a) '()))\n        ((equal? (car\
    \ a) (list b)) (cons (list b) (cons (car a) '()))\n        ((equal? (car a) (boolean\
    \ b)) (cons (boolean b) (cons (car a) '()))\n        ((equal? (car a) (symbol?\
    \ b)) (cons (symbol? b) (cons (car a) '()))\n        ((equal? (car a) (real b))\
    \ (cons (real b) (cons (car a) '()))\n        ((equal? (car a) (integer b)) (cons\
    \ (integer b) (cons (car a) '()))\n        ((equal? (car a) (char b)) (cons (char\
    \ b) (cons (car a) '()))\n        ((equal? (car a) (string '())) (cons (string\
    \ '()) (cons (car a) '()))\n        (else (cons (car a) (cons (car b) (cons (compare_one\
    \ (cdr a) (cdr b)) '())))))\n", "  (cond ((string=? a b)\n         (string->number\
    \ (string-chars-trimmed (string=? a b) \",\")))\n        ((string=? a \"1\")\n\
    \         (number->string x))\n        (else\n         (number->string x))))\n",
  "  (cond\n    [(number? a) (number? b)\n     (if (< a b) a b)]\n    [(string? a)\
    \ (string? b)\n     (if (< a b) (parse-float a) (parse-float b))]\n    [(number?\
    \ (double-float a)) (number? (double-float b))\n     (if (< a b) (double-float\
    \ a) (double-float b))]\n    [else (error) (error 'compare-one-error \"cannot\
    \ compare values of types: (~a ~a) and (~a ~a)\" (typeof! a) (typeof! b))]))\n",
  "  (cond\n    ((number? a) (number? b))\n    ((string? a) (string? b))\n    (t (>\
    \ (real-part a) (real-part b))))))\n", "  (cond\n    [(and (number? a) (number?\
    \ b)) (if (> a b) a b)]\n    [else (if (string? a) (if (string= a \".\") \".\"\
    \ a) a)]\n    [else (if (string? b) (if (string= b \".\") \".\" b) b)]\n    [else\
    \ (if (string? a) (if (string= a \",\") \",\" a) a)]\n    [else (if (string? b)\
    \ (if (string= b \",\") \",\" b) b)]))\n", "  (cond\n    ((null? a) b)\n    ((null?\
    \ b) a)\n    (else (if (real? a) (real-compare-one a b) (string-compare-one a\
    \ b)))))\n", "  (cond\n    [(number? a) (number? b) (number? (max-one a b))]\n\
    \    [(boolean? a) (boolean? b) (boolean? (max-one a b))]\n    [(string? a) (string?\
    \ b) (string? (max-one a b))]\n    [else (other? a b)]))\n", "  (cond [(number?\
    \ a) a]\n        [(string? a) (if (string=? \",\" (car a)) \"-\" \".\")\n    \
    \                   (if (string=? \".\" (car a)) \",\" \"-\")\n              \
    \         (number-as-string a)]\n        [else (if (number? a) (number-as-string\
    \ a) a)]))\n", "  (cond\n    [(and (number? a) (number? b)) (cond [(> a b) b]\n\
    \                                        [(< a b) a]\n                       \
    \                 [else nil])]\n    [(and (number? a) (string? b)) (cond [(< (length\
    \ a) length (string-length b))\n                                             (string-append\
    \ (string-ref a 0)\n                                                  (string-ref\
    \ b 0))]\n                                         [(> (length a) length (string-length\
    \ b))\n                                             (string-append (string-ref\
    \ a 0)\n                                                  (string-ref b (- (length\
    \ a) length)))]\n                                         [else nil])]\n    [(and\
    \ (string? a) (number? b)) (cond [(> (string-length a) length (number? b))\n \
    \                                            (string-append (string-ref a 0)\n\
    \                                                  (number->string b))]\n    \
    \                                     [(< (string-length a) length (number? b))\n\
    \                                             (string-append (string-ref a 0)\n\
    \                                                  (number->string (- b (length\
    \ a))))]\n                                         [else nil])]\n    [else (cond\
    \ [(number? a) (number? b)] [(string? a) (string? b)]\n              [else nil])]))\n",
  "  (cond\n    [(= a b) 0]\n    [(and (number? a)\n          (number? b))\n     (if\
    \ (< (string-to-number a)\n            (string-to-number b))\n         (if (<\
    \ (string-to-number a)\n              (string-to-number b))\n           (string-to-number\
    \ a)\n           (string-to-number b)))]\n    [else (string a)]))\n", "  (cond\n\
    \    [(number? a) (number? b)]\n    [(number? (char->integer a))\n     (number?\
    \ (char->integer b))]\n    [(char? (char->integer a))\n     (char? (char->integer\
    \ b))]\n    [else (if (equal? a b) (list a b) 'None)]))\n", "  (cond [(number?\
    \ a) (number? b) a]\n        [(number? b) (number? a) b]\n        [(number? a)\
    \ (list? b) (car b)]\n        [(list? a) (list? b) (car a)]\n        [(list? b)\
    \ (list? a) (car b)]\n        [(equal? a b) None]\n        [else (error? (number?\
    \ (number->string a)) (number? (number->string b)))]))\n", "  (cond [(< (string->float\
    \ a) (string->float b)) (string->float b)]\n        [(string->int a) (string->int\
    \ b)]\n        [else (string->string b)]))\n", "  (cond ((string? a) (cond (>\
    \ (length (string->list a)) (length (string->list b))) (string->list b))\n   \
    \          (< (length (string->list a)) (length (string->list b))) (cons (string->list\
    \ b) (string->list a))\n             (= (length (string->list a)) (length (string->list\
    \ b))) (string->list a))\n        ((real? a) (cond ((= a b) b)\n             \
    \          ((< a b) (cons a b))\n                       (> a b) (cons a b))\n\
    \        (else (cons b a))))\n", "  (cond\n    [(number? a) (number? b)\n    \
    \ (if (equal? a b)\n         a\n         (if (< (float-value a) (float-value b))\n\
    \             a\n             b))]\n    [(string? a) (string? b)\n     (if (equal?\
    \ a b)\n         (string-ref a 0)\n         (if (< (string-length a) (string-length\
    \ b))\n             (string-ref a 0)\n             (string-ref b 0)))]\n    [(list?\
    \ a) (list? b)\n     (if (equal? a b)\n         (compare_lists a b)\n        \
    \ (if (< (length a) (length b))\n             (compare_lists a b)\n          \
    \   (if (< (car a) (car b))\n                 (compare_lists a b)\n          \
    \       (if (< (car a) (car (cdr a)))\n                     (compare_lists a b)\n\
    \                     (compare_lists (cdr a) (cdr b))))))]))\n", "  (cond ((equal?\
    \ a b) a)\n        (else (if (number? a) (number? b) (string? a) (string? b) 0))))\n",
  "  (cond [(equal? a b)  a]\n        [(number? a) (number? b)]\n        [(equal?\
    \ (char-type a) (char-type b)) (make-number a b)]\n        [else (error \"Cannot\
    \ compare type ~a to ~a\"\n                     (char-type a) (char-type b))]))\n",
  "  (cond [(< a b) b]\n        [(> a b) a]\n        [(< (string->number a) (string->number\
    \ b)) (string->number b)]\n        [else (if (string->number a)\n            \
    \      (string->number (string->number a))\n                  (string->number\
    \ a)))]))\n", "  (cond\n    [(number? a) (if (equal? a b) a b)]\n    [(symbol?\
    \ a) (if (equal? a (symbol->string b)) a (symbol->string b))]\n    [(string? a)\
    \ (if (equal? a (string->symbol (string->list b)))\n                        a\
    \ (string->symbol (string->list b))])))\n", "  (cond (number? a)\n        (number?\
    \ b)\n        (equal? a b)\n        (else 'not-equal)\n        ) )\n", "  (cond\
    \ ((number? a) (number? b) a)\n        ((string? a) (string? b) (string-compare\
    \ a b))\n        ((real? a) (number? b) b)\n        ((real? b) (number? a) a)\n\
    \        ((real? a) (real? b) (abs (a-b)))\n        (else (compare-one a b))))\n",
  "  (cond\n    [(number? a) (number? b)\n     (max (number? a) (number? b))\n   \
    \  ((number? a) (number? b))\n     (> (number? a) (number? b))\n     (< (number?\
    \ a) (number? b))]\n    [(pair? a) (pair? b)\n     (compare_two (car (pair? a))\
    \ (car (pair? b)))\n     ((pair? a) (pair? b))\n     ((pair? a) (bigger? (cadr\
    \ (pair? a)) (cadr (pair? b))))\n     ((pair? b) (bigger? (car (pair? a)) (car\
    \ (pair? b))))]\n    [(vector? a) (vector? b)\n     (compare_three (vector-ref\
    \ a 0) (vector-ref b 0))\n     ((vector? a) (vector? b))\n     ((vector? a) (vector?\
    \ b)) (> (vector-length a) (vector-length b))]\n    [(string? a) (string? b)\n\
    \     (compare_three (string-ref a 0) (string-ref b 0))\n     ((string? a) (string?\
    \ b))\n     ((string? a) (string? b))\n     ((string-ref a 0) (string-ref b 0))]\n\
    \    [else (lambda () None)]))\n", "  (cond\n    [(or (symbol? a) (symbol? b))\
    \ (return None)]\n    [(symbol? a) (symbol? b) (return a)]\n    [(number? a) (number?\
    \ b) (return (if (< a b) a b))]\n    [(number? a) (string? b) (return (if (< a\
    \ (parse-integer b)) a b))]\n    [(boolean? a) (boolean? b) (return (if (< a b)\
    \ a b))]\n    [(string? a) (string? b) (return (if (< a (compare-one b a)) a b))]\n\
    \    [else (return (compare-one a b)]))\n  ", "  (if (= a b)\n      a\n      (if\
    \ (number? a)\n          (number? b)\n          (if (string? a)\n            \
    \  (if (string=? b a)\n                  a\n                  (if (string=? \"\
    1.0\" a)\n                      (if (string=? \"1.0\" b)\n                   \
    \       a\n                          (if (string=? \"1,0\" a)\n              \
    \                (if (string=? \"1,0\" b)\n                                  a\n\
    \                                  (if (string=? \"1.0\" a)\n                \
    \                      (if (string=? \"1.0\" b)\n                            \
    \              a\n                                          (if (string=? \"1.1\"\
    \ a)\n                                              (if (string=? \"1.1\" b)\n\
    \                                                  (if (string=? \"1.11\" a)\n\
    \                                                      (if (string=? \"1.11\"\
    \ b)\n                                                          a\n          \
    \                                                b))\n                       \
    \                           b))))))))\n              (if (string=? \"1.0\" a)\n\
    \                  (if (string=? \"1.0\" b)\n                      a\n       \
    \               (if (string=? \"1,0\" a)\n                          (if (string=?\
    \ \"1,0\" b)\n                              a\n                              (if\
    \ (string=? \"1.0\" a)\n                                  (if (string=? \"1.0\"\
    \ b)\n                                      a\n                              \
    \        (if (string=? \"1.1\" a)\n                                          (if\
    \ (string=? \"1.1\" b)\n                                              a\n    \
    \                                          (if (string=? \"1.11\" a)\n       \
    \                                           (if (string=? \"1.11\" b)\n      \
    \                                                a\n                         \
    \                             (if (string=? \"1.11\" b)\n                    \
    \                                      a\n                                   \
    \                       b)))))))))))))))))))\n", "  (if (or (number? a) (number?\
    \ b))\n      (max? a b)\n      (number? a) (number? b) (symbol? a) (symbol? b)\
    \ (equal? a b)))\n", "  (cond\n    ((string? a) (< (string-ref a 0) (string-ref\
    \ b 0)))\n    ((string? b) (< (string-ref a 0) (string-ref b 0)))\n    ((number?\
    \ a) (< (real-part a) (real-part b)))\n    ((number? b) (< (real-part a) (real-part\
    \ b)))\n    (else (eq? a b))))\n", "  (cond [(= a b) '()]\n        [(number? a)\
    \ (number? b) (number? (compare a b))] \n        [(boolean? a) (boolean? b) (boolean?\
    \ (compare a b))] \n        [(vector? a) (vector? b) (vector? (compare a b))]\
    \ \n        [(string? a) (string? b) (string? (compare a b))]))\n", "  (cond ((or\
    \ (number? a) (number? b) (symbol? a) (symbol? b)) (number? b))\n        ((string?\
    \ a) (string-ref a 1))\n        ((symbol? a) (symbol-ref a 1))\n        ((number?\
    \ a) (number-compare a b))\n        ((list? a) (list-ref a 0))\n        (else\
    \ (compare a b))))\n", "  (cond\n    ((equal? a b) (quote ()))\n    ((real? a)\
    \ (real-bigger? a b))\n    (else (let ([res (real-compare-one a b)])\n       \
    \        (if (< res 0.0)\n                   (list res)\n                   (list\
    \ (real-bigger? a b)))))))\n", "  (cond [(number? a) (number? b) b]\n        [(boolean?\
    \ a) (boolean? b) b]\n        [(string? a) (string? b) a]\n        [(vector? a)\
    \ (vector? b) a]\n        [(symbol? a) (symbol? b) a]\n        [(pair? a) (pair?\
    \ b) a]\n        [(null? a) (null? b) b]\n        [(< a b) (< b a) b]\n      \
    \  [(> a b) (> b a) a]\n        [else (if (string=? \"-inf\" \"inf\" a b)\n  \
    \                (if (string=? \"-inf\" \"inf\" b a)\n                      (<\
    \ a b)\n                      (> a b)\n                      )\n             \
    \     (if (string=? \".\" \"-\" a b)\n                      (if (string=? \".\"\
    \ \"-\" b a)\n                          (< a b)\n                          (>\
    \ a b)\n                          )\n                  (< a b)\n             \
    \     (> a b)\n                  )\n               )\n         ]\n        )\n\
    \        )\n", "  (cond\n    ((or (and (number? a) (number? b))\n           (string?\
    \ a) (string? b))\n     a)\n    ((number? a) (number? b))\n    ((string? a) (string?\
    \ b))\n    ((real? a) (not (real? b)))\n    ((real? b) (not (real? a)))\n    ;;\
    \ If they are both complex numbers, return whichever one is larger\n    ((complex?\
    \ a) (complex? b))\n    ;; If they are both real numbers, return whichever one\
    \ is larger\n    ((real? a) (real? b))\n    (t ())))\n", "  (cond [(and (number?\
    \ a) (number? b)) (if (> a b) a b)]\n        [(and (number? a) (string? b)) (if\
    \ (> a b) a b)]\n        [(and (number? b) (string? a)) (if (> a b) a b)]\n  \
    \      [(and (string? a) (number? b)) (if (> a b) a b)]\n        [(and (string?\
    \ a) (string? b)) (if (> a b) a b)]))\n", "  (cond (string? a) (string-compare\
    \ a b) (string? b) (string-compare b a)\n        (number? a) (number-compare a\
    \ b)\n        (equal? a b) 'equal\n        (else (error \"Unknown comparison type:\
    \ ~a\" a))))\n", "  (cond ((number? a) (number? b))\n        ((string? a) (string?\
    \ b))\n        ((real? a) (real? b))\n        ((> (real? a) (real? b))\n     \
    \    (if (string? a)\n             (string->list a)\n             (list->string\
    \ (string->list b))))\n        ((= (real? a) (real? b))\n         a)\n       \
    \ ((> (real? a) (complex? b))\n         (if (string? a)\n             (string->list\
    \ a)\n             (list->string (string->list b))))\n        ((= (real? a) (complex?\
    \ b))\n         b)\n        (else\n         null)))\n", "  (if (and (number? a)\
    \ (number? b))\n      (if (< (real->float a) (real->float b))\n          b\n \
    \         a)\n      a))\n", "  (cond ((number? a) (number? b))\n        ((number?\
    \ b) (a))\n        (else '(compare)))\n  (cond\n    ((string=? a b) (string=?\
    \ a (string-reverse b)))\n    (else '(compare)))\n  (cond\n    ((equal? a b) (number?\
    \ b))\n    (else '(compare)))\n  (cond\n    ((equal? a (b int)) a)\n    (else\
    \ '(compare)))\n  (cond\n    ((equal? (b int) a) b)\n    (else '(compare)))\n\
    \  (cond\n    ((equal? (b float) a) b)\n    (else '(compare)))\n  (cond\n    ((equal?\
    \ (b string) a) b)\n    (else '(compare)))\n  (cond\n    ((equal? (b other) a)\
    \ b)\n    (else '(compare)))\n  '(compare))\n", "  (cond\n    [(equal? a b)\n\
    \     (error 'equal?)\n    ]\n    [(string? (append a \",\"))\n     (append (append\
    \ a \",\")\n            (number->string a)\n            (number->string b))\n\
    \    ]\n    [(float? (append a \".\"))\n     (append (append a \".\")\n      \
    \      (number->string a))\n     (append (number->string b)\n            (number->string\
    \ a))\n    ]\n    [(number? (append a \",\"))\n     (append (number->string a)\n\
    \            (number->string b))\n    ]\n    [else\n     (append (number->string\
    \ a)\n            (number->string b))\n    ]\n  ))\n", "  (cond\n    [(number?\
    \ a) (number? b) (> (number-float a) (number-float b))]\n    [(string? a) (string?\
    \ b) (> (string-ref a 0) (string-ref b 0))]\n    [else (> (make-unbox a #f) (make-unbox\
    \ b #f))]\n  ))\n", "  (cond\n    [(and (number? a) (number? b))\n     (cond\n\
    \       [(< a b)\n        (string->number (string->list a))\n        ]\n     \
    \  [(> a b)\n        (string->number (string->list b))\n        ]\n       [(<\
    \ a \"1,0\")\n        (string->number (string->list a))\n        ]\n       [(>\
    \ a \"1,0\")\n        (string->number (string->list b))\n        ]\n       [else\n\
    \        (string->number (string->list a))\n        ]\n       ])\n    [(and (number?\
    \ b) (number? a))\n     (cond\n       [(< a b)\n        (string->number (string->list\
    \ b))\n        ]\n       [(> a b)\n        (string->number (string->list a))\n\
    \        ]\n       [(< a \"1,0\")\n        (string->number (string->list a))\n\
    \        ]\n       [(> a \"1,0\")\n        (string->number (string->list b))\n\
    \        ]\n       [else\n        (string->number (string->list b))\n        ]\n\
    \       ])\n    [(and (number? a) (not (number? b)))\n     (string->number (string->list\
    \ a))\n     ]\n    [(and (number? b) (not (number? a)))\n     (string->number\
    \ (string->list b))\n     ]\n    [(and (string? a) (number? b))\n     (string->list\
    \ (string->list a))\n     ]\n    [(and (string? b) (number? a))\n     (string->list\
    \ (string->list b))\n     ]\n    [(and (string? a) (not (number? b)))\n     (string->list\
    \ (string->list a))\n     ]\n    [(and (string? b) (not (number? a)))\n     (string->list\
    \ (string->list b))\n     ]\n    [(or (not (string? a)) (not (string? b)))\n \
    \    None\n     ]\n    [else\n     None\n     ]\n    ))\n", "  (cond\n    [(number?\
    \ a) (number? b) (if (< a b) a b)]\n    [(string? (number->string a)) (string?\
    \ (number->string b)) (if (< a b) a b)]\n    [(string? a) (string? b) (if (< a\
    \ b) a b)]\n    [(equal? a b) (if (number? a) a b)]\n    [else (number->string\
    \ a)]))\n", "  (cond\n    ((null? a) b)\n    ((null? b) a)\n    ((< a b) a)\n\
    \    ((< b a) b)\n    (else (compare a b))))\n", "  (cond ((eq? a b) a)\n    \
    \    (else (if (number? a) (float b) (compare a b))))\n  )\n", "  (cond\n    ((=\
    \ (type-of a) (type-of b)) b)\n    ((and (= type-of a) (= type-of b) (= (type-of\
    \ a) 'string)) (string-compare a b))\n    ((= (type-of a) 'real) (abs (- (cast\
    \ a real) (b real))))\n    ((= (type-of a) 'integer) (if (< (cast a integer) (b\
    \ integer)) b (a integer)))\n    ((= (type-of a) 'float) (if (< (cast a float)\
    \ (b float)) b (a float)))\n    (else (error \"Type Mismatch\" a b))\n  )\n)\n",
  "  (cond ((number? a) (number? b)) (equal? a b))\n        ((string? a) (string?\
    \ b) (equal? (string-ref a 0) (string-ref b 0))\n         (equal? (string-ref\
    \ a 0) (string-ref b 0))\n         (equal? (string-ref a 0) (string-ref b 0))\n\
    \         (equal? a b)\n         (else (equal? a b))))\n", "  (cond [(number?\
    \ a) (number? b) (if (> a b) (list b) (list a))] \n        [(string? a) (string?\
    \ b) (string-compare (string->list (string->list a)) (string->list (string->list\
    \ b)))]\n        [(list? a) (list? b) (if (> 0 (compare-one (car a) (car b)))\n\
    \                              (cons (car a) (compare-one (cdr a) (cdr b)))\n\
    \                              (if (> 0 (compare-one (car b) (car a)))\n     \
    \                             (cons (car b) (compare-one (cdr b) (cdr a)))\n \
    \                                 (if (> 0 (compare-one (cdr b) (cdr a)))\n  \
    \                                    (cons (cdr b) (compare-one (cdr b) (cdr a)))\n\
    \                                      (if (> 0 (compare-one (cdr a) (cdr b)))\n\
    \                                          (cons (cdr a) (compare-one (cdr a)\
    \ (cdr b)))\n                                          (if (> 0 (compare-one (cdr\
    \ b) (cdr a)))\n                                              (cons (cdr b) (compare-one\
    \ (cdr b) (cdr a))))\n                                      (if (> 0 (compare-one\
    \ (cdr a) (cdr b)))\n                                          (cons (cdr a) (compare-one\
    \ (cdr a) (cdr b)))\n                                          (if (> 0 (compare-one\
    \ (cdr b) (cdr a)))\n                                              (cons (cdr\
    \ b) (compare-one (cdr b) (cdr a))))))]))\n", "  (cond ((equal? a b) #t)\n   \
    \     (#t (equal? (string->number (car a)) (string->number (car b)))))\n)\n",
  "  (cond [(equal? a b) b]\n        [(number? a) (number? b)\n         (if (and (string?\
    \ a)\n                  (string? b))\n             (string-compare (string-append\
    \ \"~a\" \",\" a) (string-append \"~a\" \",\" b))\n             (string-compare\
    \ (string-append \"~a\" \".\" a) (string-append \"~a\" \".\" b)))]\n        [else\
    \ (cond (and (number? a)\n                         (number? b))\n            \
    \      [(< (number-digit-value a) (number-digit-value b))\n                  \
    \ (< (number-digit-value b) (number-digit-value a))]\n                  [else\
    \ a])))\n", "  (cond\n    [(number? a) (number? b) a]\n    [(string? a) (string?\
    \ b) a]\n    [(number? b) (number? a) b]\n    [(number? (string->number a)) (string->number\
    \ b) (a)]\n    [(number? (string->number b)) (string->number a) (b)]\n    [(string?\
    \ (string->number a)) (string->number b) (b)]\n    [(string? (string->number b))\
    \ (string->number a) (a)]\n    [else (error \"Only numbers, strings, and null\
    \ are allowed\")]))\n", "  (cond\n    ((number? a) (number? b) (if (= a b) a b))\n\
    \    ((string? a) (string? b) (string-append (if (= (string-ref a 0) (string-ref\
    \ b 0)) \".\" (if (string=? (string-ref a 0) (string-ref b 0)) \",\" (string-to-number\
    \ a) \",\" (string-to-number b))))\n    ((real? a) (real? b) (if (= a b) a b))\n\
    \    ((real? a) (real? b) (string-to-number (string-append (if (= (real-part a)\
    \ (real-part b)) (number-to-string (+ (real-part a) (real-part b))) \",\" (number-to-string\
    \ a) \",\" (number-to-string b))))\n    (else (number-to-string a) (number-to-string\
    \ b))))\n", "  (cond\n    [(equal? (a . 0) (a . 0)) a]\n    [(equal? (a . 0) (a\
    \ . 0)) b]\n    [(equal? (a . 0) (a . 1)) b]\n    [(equal? (a . 0) (a . 10)) a]\n\
    \    [(equal? (a . 1) (a . 0)) a]\n    [(equal? (a . 1) (a . 1)) b]\n    [(equal?\
    \ (a . 1) (a . 10)) b]\n    [(equal? (a . 10) (a . 0)) b]\n    [(equal? (a . 10)\
    \ (a . 1)) a]\n    [(equal? (a . 10) (a . 10)) a]\n    [else (format #t \"~S is\
    \ not a real number.\" (symbol->string a))]))\n", "  (cond [(type? a number?)\
    \ b]\n        [(type? a string?)\n         (string->double\n          (check-type\
    \ b number?\n             (error \"Second argument is not a number\"))\n     \
    \     (check-type a string?)\n          (if (equal? (string-ref a 0) \".\")\n\
    \              (error \"First argument is not a real number\"))\n          (string->double\
    \ a b (string-ref b)))]\n        [(type? b number?) a]\n        [(type? b string?)\
    \ (string->double a (string-ref b) b)]\n        [else (error \"Cannot compare\
    \ types: ~a, ~a\" a b)]))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nI wouldn't\
    \ call that a comparison function.  This is more like a 'max function' or a 'min'\
    \ function.  It compares two elements and returns the bigger of the two.\n<|/\
    \ c |>\n<| c |>\nHow is this any different?  It behaves like a comparison function.\
    \  If the two values it takes both are the same type, then it just returns the\
    \ second value.  If one is a number, and the other is not, then it converts the\
    \ number to double and returns that value.  If the second is a number, and the\
    \ first is not then it converts the other value to double and returns the bigger\
    \ of the two.\n<|/ c |>\n<| c |>\nIt's a little different if you don't consider\
    \ `(-)` to behave like a min/max function.  `(-)` can accept two positive numbers\
    \ and it returns the larger of them.  How does this behave?\n<|/ c |>\n<| c |>\n\
    Ah ha!  I see what you mean.  I guess I assumed there was an implicit conversion\
    \ to integer in that case.  Thank you for the clarification.\n<|/ c |>\n<| c |>\n\
    It doesn't work.  (-) returns '-' for all positive numbers.  (-) returns the smallest\
    \ negative number.  (-) returns the largest negative number.  (-) returns '-'\
    \ for all negative numbers.  (-) returns the smallest positive number.  (-) returns\
    \ the largest positive number.  (-) returns the smallest (positive) negative number.\
    \  (-) returns the largest (positive) negative number.  (-) returns the smallest\
    \ (positive) positive number.  (-) returns the largest (positive) positive number.\
    \  (-) returns the smallest (negative) negative number.  (-) returns the largest\
    \ (negative) negative number.\n<|/ c |>\n<| a dscore=3 |>\nHere's another way:\n\
    <code>", "  (cond\n    ((number? a) (number? b)) (if (= a b) a b))\n    ((string?\
    \ a) (string? b)) (string-compare (string->number a) (string->number b)))\n  \
    \  ((real? a) (or (real? b) (string-compare (string->number a) b)))\n    (else\
    \ (error \"Incompatible types in compare function: \" a \" vs. \" b))))\n", " \
    \ (cond [(string? a) (string? b)]\n        [(number? a) (number? b)]\n       \
    \ [else (if (number? a)\n                 (if (number? b)\n                  \
    \   (> a b)\n                     (< a b)))]))\n", "  (cond [(number? a) (number?\
    \ b) a]\n        [(number? a) (number? b) b]\n        [(string? a) (string? b)\
    \ (string-compare a b)]\n        [else (compare a b)]))\n", "  (cond ((string?\
    \ a) (equal? a b))\n        ((string? b) (equal? b a))\n        (else (< (second\
    \ a) (rest b)))))\n", "  (cond ((equal? a b) #t)\n        ((equal? (string->number\
    \ a) (string->number b)) (string->number b) (string->number a))\n        ((equal?\
    \ (string->number a) 1) (string->number a) (string->number b))\n        ((equal?\
    \ (string->number a) (string->number b)) (string->number b)\n         (string->number\
    \ a)))\n)\n", "  (if (eq? a b)\n      a\n      (if (number? a)\n          (if\
    \ (number? b)\n              (if (float? a)\n                  (if (float? b)\n\
    \                      (if (number? (realpart a))\n                          a\n\
    \                          (string-append \"~,\" (realpart b))\n             \
    \             (string-append \"~,\" (realpart b))\n                          (realpart\
    \ b))\n                  (string-append \"~,\" (number->string a))\n         \
    \         (string-append \"~,\" (number->string b))\n                  (number->string\
    \ b))\n            (if (float? a)\n                (if (float? b)\n          \
    \          (if (number? (realpart a))\n                        a\n           \
    \             (string-append \"~,\" (realpart b))\n                        (string-append\
    \ \"~,\" (realpart b))\n                        (realpart b))\n              \
    \  (if (number? b)\n                    (string-append \"~,\" (number->string\
    \ a))\n                    (string-append \"~,\" (number->string b))\n       \
    \             (number->string b))\n            else\n                (if (string?\
    \ a)\n                    (string-append \"~,\" (number->string a))\n        \
    \            (string-append \"~,\" (number->string b))\n                    (number->string\
    \ b)))\n          (if (string? a)\n              (string-append \"~,\" (number->string\
    \ a))\n              (string-append \"~,\" (number->string b))\n             \
    \ (number->string b))))))\n", "  (cond ((string? a) (string-compare a b))\n  \
    \      ((number? a) (number-compare a b))\n        (else (if (equal a b) (list*\
    \ a b) (list* b a)))))\n", "  (cond\n    [(number? a) (number? b)\n     (> (number-of\
    \ a) (number-of b))\n     (> (number-of a) (number-of b))\n     (< (number-of\
    \ a) (number-of b))\n     (< (number-of a) (number-of b))]\n    [(number? (string->number\
    \ a))\n     (number? (string->number b))\n     (> (string->number (string->list\
    \ a))\n        (string->number (string->list b)))\n     (< (string->number (string->list\
    \ a))\n        (string->number (string->list b)))\n     (< (string->number (string->list\
    \ a))\n        (string->number (string->list b))\n       (string->number (string->list\
    \ a))\n       (string->number (string->list b)))]\n    [(string? a) (string? b)]\n\
    \    [else (cond [(= a b)] [(= (number->string a) b)] [(= (number->string b) a)])]))\n",
  "  (cond [(number? a) b]\n        [(number? b) a]\n        [(symbol? a) (symbol?\
    \ b) (string=? (symbol->string a) (symbol->string b))]\n        [(symbol? b) (symbol?\
    \ a) (string=? (symbol->string b) (symbol->string a))]\n        [(number? a) (number?\
    \ b) (string=? (number->string a) (number->string b))]\n        [else (number?\
    \ a) (string=? (number->string a) b)]\n        ))\n", "  (cond ((string? a) (string-compare\
    \ (string->number a) (string->number b)))\n        ((string? b) (string-compare\
    \ (string->number b) (string->number a)))\n        ((number? a) (number-compare\
    \ (number->real a) (number->real b)))\n        ((number? b) (number-compare (number->real\
    \ b) (number->real a)))\n        (else (cond ((number? a) (number-compare (number->complex\
    \ a) (number->complex b)))\n                   ((number? b) (number-compare (number->complex\
    \ b) (number->complex a)))))))\n</code>\n<|/ a |>\n<| a |>\nAs far as I know,\
    \ there is no built in way to do this in Racket. So if you want to write your\
    \ own comparator, you could do something like this:\n<code>", "  (cond ((null?\
    \ a) b)\n        (number? a) (if (> a b) b a)\n        (string? a) (if (> (string->number\
    \ a) (string->number b)) (string->number a) (string->number b))))\n", "  (if (eqv?\
    \ a b)\n      a\n      (if (number? a)\n          (if (number? b)\n          \
    \    a\n              (string-compare (string->number a) (string->number b)))\n\
    \          (if (number? b)\n              b\n              (string-compare a b))))))\n",
  "  (match a\n    [(integer i) i]\n    [(number i) i]\n    [else (match b\n     \
    \    [(integer i) i]\n         [(number i) i]\n         [else (> (car a) (car\
    \ b))\n              (if (< (car a) (car b)) b a)]\n         [_ _]))]))\n", " \
    \ (cond\n    ((= (compare a b) 0)\n     (cond\n       ((number? a) (number? b))\n\
    \       ((string? a) (string? b))\n       ((symbol? a) (symbol? b))\n       (else\
    \ (error \"Unsupported variable type\")))))\n  (cond\n    ((number? a) (number?\
    \ b))\n    ((symbol? a) (symbol? b))\n    ((string? a) (string? b))\n    (else\
    \ (error \"Unsupported variable type\"))))\n", "  (cond\n    [(or (number? a)\
    \ (number? b)) (number? a)]\n    [else (or (number? a) (number? b))]))\n", " \
    \ (cond\n    ((number? a) (if (= a b) a b))\n    ((number? b) (if (= a b) b a))\n\
    \    ((string? a) (if (= (string-ref a 0) ',') (if (string= (string-ref a 0) b)\
    \ (string-append \",\" b) b)))\n    (else (if (= a b) a b))))\n", "  (cond\n \
    \   [(integer? a) (< a b)]\n    [(integer? b) (< b a)]\n    [(eq? a (string->symbol\
    \ (string->string b)))\n     (string->symbol (string->string a))\n     ((string->float\
    \ a) (< (string->float a) (string->float b)))\n     ((string->float b) (< (string->float\
    \ b) (string->float a)))]\n    [else (> (string->float a) (string->float b))]))\n",
  "  (let ([s (string? b)]) (if (or (string? a) (string? b))\n                   \
    \      (if (string? a) (str (compare a b))\n                             (if (string?\
    \ b) (str (compare a b))\n                                 (str (< (compare a\
    \ b) (compare b a)))))\n                         #:else\n                    \
    \     (string? (compare (coerce a string) (b string))))))\n", "  (cond [(number?\
    \ a) (number? b) (number? (- a b))]\n        [(string? a) (string? b) (string?\
    \ (string< (string->float a) (string->float b)))]\n        [else (boolean? a)\
    \ (boolean? b)]))\n", "  (cond\n    [(equal? (real? a) (real? b)) (if (< (real-part\
    \ a) (real-part b)) (real-part a) (real-part b))]\n    [(equal? (real? a) (number?\
    \ b)) (if (< (real-part a) (real-part b)) (real-part a) (real-part b))]\n    [(equal?\
    \ (string? a) (string? b)) (if (< (compare_strings a b) (real? b)) (real-part\
    \ a) (real-part b))]\n    [(equal? (list? a) (list? b)) (if (< (list->real a)\
    \ (list->real b)) (list->real a) (list->real b))]\n    [else (if (< (compare_strings\
    \ a b) (real? b)) (real-part a) (real-part b)])\n  ))\n", "  (cond ((= a b) a)\n\
    \        (else (compare_one b (round a))))\n)\n", "  (cond ((or (= a b) (number?\
    \ a) (number? b))\n         (number? (max (coerce a number) (b number)))) ; prefer\
    \ numbers for obvious reasons\n        ((string? a) (string? (max a b)))\n   \
    \     ((string? b) (string? (max a b)))\n        ((symbol? a) (symbol? (max a\
    \ b)))\n        (else (cond ((> a b) (cons a b))\n                  ((< a b) (cons\
    \ b a))\n                  (else (cons a b))))))\n", "  (if (and (number? a) (number?\
    \ b))\n      (if (> a b) a b)\n      None))", "  (cond\n    [(or (number? a) (number?\
    \ b))\n     (cond [(< a b) (cons b (compare_one a (bcdr a)))]\n           [(<\
    \ b (caddr b)) (cons b (compare_one (bcdr b) a))]]\n    [(or (string? a) (string?\
    \ b))\n     (if (string? a) (cons (aref a 2) (compare_one (aref a 1) (bcdr a)))\n\
    \       (cons b (compare_one (bcdr b) a))]]\n    [(number? (cadr a))\n     (cons\
    \ a (compare_one (caddr a) b))]\n    [(number? (caddr a))\n     (cons a (compare_one\
    \ a (caddr b)))]\n    [(number? (cdr a))\n     (cons a (compare_one a (cdr b)))]\n\
    \    [(number? (caddr b)) (cons a (compare_one a (bcdr a)))]\n    [(number? (cdr\
    \ b)) (cons a (compare_one a (bcdr b)))]\n    [(number? (caddr a)) (cons a (compare_one\
    \ (bcdr a) b))]\n    [(number? (cdr a)) (cons a (compare_one (bcdr b) a))]\n \
    \   [else (cons b a)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
