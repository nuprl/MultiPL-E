name: HumanEval_92_any_int
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns true\
  \ if one of the numbers is equal to the sum of the other two, and all numbers are\
  \ integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5, 2,\
  \ 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
  \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate any_int))\n\
  \    (check-equal? (candidate 2 3 1) #t)\n    (check-equal? (candidate 2.5 2 3)\
  \ #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal? (candidate\
  \ 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal? (candidate\
  \ 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
  \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
  \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
completions: ["  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (and (number?\
    \ x) (number? y) (number? z))\n       (= (+ x y z) (+ (number? x) (number? y)\
    \ (number? z))))) ;; #lang racket\n", "  (cond ((= x y) z) #t\n        (else #f)))\n",
  '  (equal? (+ x y z) (+ (* x x) (* y y) (* z z))))', "  (and (integer? x)\n    \
    \   (integer? y)\n       (integer? z)\n       (= x y)\n       (= x z)\n      \
    \ (= y z)))\n", "  (cond ((number? x) (number? y) (number? z) (and (number? x)\
    \ (number? y) (number? z)))\n        ((= x y) x y)\n        ((= x z) x z)\n  \
    \      ((= y z) y z)\n        (else #f)))\n", "  (or (= x y)\n      (= x z)\n\
    \      (= y z)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n \
    \     (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n  \
    \    (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n   \
    \   (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n    \
    \  (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n     \
    \ (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (=\
    \ z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y\
    \ 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n\
    \      (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n \
    \     (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n  \
    \    (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n   \
    \   (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n    \
    \  (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n     \
    \ (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n      (=\
    \ y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x\
    \ 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n\
    \      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n \
    \     (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n      (= x 0)\n  \
    \    (= y 0)\n      (= z 0)\n      (= x 0)\n      (= y 0)\n      (= z 0)\n   \
    \   (= x 0)\n      (= y 0)\n      (= z 0)\n      (", "  (cond\n    [(< x y) true]\n\
    \    [(< y z) true]\n    [(< z x) true]\n    [else false]))\n", "  (cond\n   \
    \ ((zero? x) false)\n    ((= x y) true)\n    ((= x z) true)\n    ((= y z) true)\n\
    \    (else false)))\n", "  (and (integer? (add1 x)) (integer? (add1 y)) (integer?\
    \ (add1 z))))\n", "  (and (number? x)\n       (number? y)\n       (number? z)\n\
    \       (= (+ x y z) (x+y+z))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (cond\n    ((= x y) true)\n    ((= x z) true)\n    ((= y z) true)\n\
    \    ((= x z) false)\n    (else false)\n    ))\n", "  (or (and (integer? x) (integer?\
    \ y) (integer? z)) ; Must be at least 3 ints\n      (and (integer? x) (integer?\
    \ y) (not (integer? z)))) ; Must be at least 2 ints\n  (< (+ x y z) (+ x y z)))\n",
  "  (or (= x y) (= x z) (= y z)))\n", "  (and (integer? x)\n       (integer? y)\n\
    \       (integer? z)\n       (equal? x (+ x y z))\n       (equal? y (+ x y z))\n\
    \       (equal? z (+ x y z))\n       (= x (+ x y z))\n       (= y (+ x y z))\n\
    \       (= z (+ x y z))))\n", "  (if (or (number? x) (number? y) (number? z))\n\
    \      true\n      (and (number? x) (number? y) (number? z)) (= (+ (* x y) (*\
    \ y z)) (+ (* x z) (* y z)))))\n", "  (or (= x y) (= x z) (= y z)))\n", "  (cond\n\
    \    [(< x y) (< z z)]\n    [(< y z) (< x x)]\n    [else (< x z) (< y y)]\n  \
    \  [else (< z y) (< x x)]\n    [else (< y x) (< z z)]\n    [else false]))\n",
  "  (and (integer? x) (integer? y) (integer? z) (= (+ x y z) (* (+ x y) (+ x z) (+\
    \ y z))))))\n", "  (and (integer? x) (integer? y) (integer? z) \n       (= (+\
    \ x y z) (* (+ x y) (+ x z) (+ y z)))\n       (= x y) \n       (= x z) \n    \
    \   (= y z)))\n", "  (cond\n    [(< x y) true]\n    [(and (< y z) (< z 0)) true]\n\
    \    [else false]))\n", "  (cond\n    [(equal? x y) (equal? y z) (equal? x z)]\n\
    \    [else\n     (equal? (modulo x y) 0)\n     (equal? (modulo y z) 0)\n     (equal?\
    \ (modulo x z) 0)])))\n", "  (= (+ x y z) (+ x y z)))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z) (= (+ x y z) sum (- x y z))))\n", "  (= x (+ y z)))\n",
  "  (or (= x y) (= x z) (= y z)))\n", "  (and (number? x) (number? y) (number? z)))\n",
  "  (cond\n    [(or (= x y) (= x z)) True]\n    [(or (= x z) (= y z)) True]\n   \
    \ [else False]))\n", "  (or (= x y) (= x z) (= y z) (= x y) (= z y) (= x z) (=\
    \ z x) (= y z) (= z y)))\n", "  (and (integer? x) \n       (integer? y) \n   \
    \    (integer? z)))\n", "  (if (equal? x (+ y z))\n      #t\n      #f))\n", " \
    \ (cond\n    ((= (+ x y z) 0) #t)\n    ((= x y)              #f)\n    ((= x z)\
    \              #f)\n    ((= y z)              #f)\n    (#t                  #f)\n\
    \  )\n)\n", "  (= (rem x y) (rem z y)))\n", "  (or (= x y) (= x z) (= y z)))\n",
  "  (and (integer? x) (integer? y) (integer? z) (= (+ x y z) (* (+ x y) z))))\n",
  "  (cond\n    ((or (not (number? x))\n         (not (number? y))\n         (not\
    \ (number? z))\n         (= x y) (= y z))\n     (equal? x z))\n    ((or (not (number?\
    \ x))\n         (not (number? y))\n         (not (number? z))\n         (= x y)\
    \ (= y z) (= x z))\n     (equal? x z))\n    (else false)))\n", "  (= (+ x y z)\
    \ x))\n", "  (= (+ x y z) x))\n", "  (and (= (+ x y z) 0) (= (modulo x y) 0) (=\
    \ (modulo y z) 0) (= (modulo z x) 0)))\n", "  (and (integer? (+ x y)) (integer?\
    \ (+ x z)) (integer? (+ y z))))\n", "  (cond\n    ((= x 0) (and (= y 0) (= z 0)))\n\
    \    ((= x y) true)\n    ((= x z) true)\n    (else false)))\n", "  (and (integer?\
    \ x) \n       (integer? y) \n       (integer? z)))\n", "  (if (or (= x y) (= x\
    \ z) (= y z))\n      true\n      false))", "  (and (= (+ x y z) 0)\n       (=\
    \ (modulo x 10) (modulo y 10) (modulo z 10))))\n", "  (and (= (+ x y z) 7)\n \
    \      (= (+ x y z) (+ (* x 3) (* y 2) (* z 3)))))\n", "  (and (integer? x)\n\
    \       (integer? y)\n       (integer? z)))\n", "  (cond\n    [(or (= x 0) (=\
    \ y 0) (= z 0)) #f]\n    [(or (= x 0) (= y 0) (= z 0)) (= (+ x y z) #f)]\n   \
    \ [else #t]))\n", "  (and (number? x) (number? y) (number? z))\n  (and (and (number?\
    \ x) (not (integer? (expt x y)))) (and (number? y) (not (integer? (expt y z))))\n\
    \  (and (and (number? y) (not (integer? (expt x z)))) (and (number? z) (not (integer?\
    \ (expt z y))))\n  (let ((result (+ (expt x y) expt y z)))\n    (and (expt x z)\
    \ result (expt y z) result)))\n", "  (cond\n    [(zero? x y) (= x z)]\n    [(zero?\
    \ y z) (= y x)]\n    [else (= (+ x y) z)]\n   ))\n", "  (<= x y z)\n  (and (=\
    \ (+ x y z) x)\n       (= (+ x y z) y)\n       (= (+ x y z) z)))\n", "  (cond\n\
    \    [(= x y) (= z x)]\n    [(= x z) (= z y)]\n    [else false]))\n", '  (equal?
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z)
    (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z) (+ x y z', "  (and (= x y)\n\
    \       (= y z)\n       (= (+ x y z) 0)))\n", "  (cond (<???> false)\n       \
    \ (else true)))\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThis doesn't seem\
    \ like a very complicated solution:\n<code>", "  (cond ((null? x) (null? y) (null?\
    \ z)) (\n    (and (number? (car x))\n         (number? (car y))\n         (number?\
    \ (car z))) (= (+ (car x) (car y) (car z)) (+ (car x) (car y) (car z)))))\n  \
    \  (else #f)))\n", '  (= (+ (* x 2) (* y 3)) (+ x y z)))', "  (cond ((or (< x\
    \ y) z) (not (= x y z)))\n        ((or (< y z) x) (not (= y z x)))\n        ((or\
    \ (< z x) y) (not (= z x y)))\n        (else #t)))\n", "  (or (= (+ (* x y) (*\
    \ (- x z) (* (- y z) (* (- x y) (- y x)))))\n      (= (+ (* x y) (* (- x z) (*\
    \ (- y z) (* (- x y) (- y x)))))))\n", "  (cond ((< (car x) (+ y z)) #f)\n   \
    \     ((> (car x) (+ y z)) #t)\n        (else (any_int x (+ y z) (+ z (car x)))))\n\
    \  )\n", "  (cond\n    [(< x y) false]\n    [(< y z) false]\n    [(< z x) false]\n\
    \    [(= x y) true]\n    [(= y z) true]\n    [(= z x) true]\n    [else false]))\n",
  "  (cond\n    [(= x y) true ]\n    [(= y z) true ]\n    [(= z x) true ]\n    [else\
    \ false]))\n", "  (cond\n    [(> (+ x y z) 0) false]\n    [(and (integer? (car\
    \ x)) (integer? (car y)) (integer? (car z))) (equal? x y)]\n    [else (equal?\
    \ x y) (equal? x z) (equal? y z) (equal? x z)]))\n", "  (cond\n    ((> x y) false)\n\
    \    ((= x y) z)\n    ((= x z) true)\n    (else false)))\n", "  (and (integer?\
    \ x)\n       (integer? y)\n       (integer? z)\n       (= (+ x y z) 6)))\n", " \
    \ (and (and (integer? (add x y)) (integer? (add x z)) (integer? (add y z)))\n\
    \       (equal? (add x y) z) \n       (equal? (add x z) y) \n       (equal? (add\
    \ y z) x)))\n", "  (cond ((= (+ x y z) (* (+ x y) (* (+ x z) (* (+ y z) 3))))\
    \ true)\n        ((= (+ x y z) (* (+ x y) (* (+ x z) (* (- y z) 3)))) false)\n\
    \        (else (any_int x y z))))\n", "  (and (number? x) (number? y) (number?\
    \ z) (= (+ x y z) sum)))\n", "  (or (= x y) \n      (= x z)\n      (= y z)\n \
    \     (= (+ x y) z)))\n", "  (equal? (+ x y) z))\n", "  (cond ((= x 0) (= y 0)\
    \ (= z 0))\n        ((= x y) (= z 0))\n        ((= x z) (= y 0))\n        ((=\
    \ y z) (= x 0))\n        ((= x 0) (= y z) (= z 0))\n        ((= y 0) (= x z) (=\
    \ z 0))\n        ((= z 0) (= x 0) (= y 0))\n        ((= z 0) (= y 0) (= x 0))\n\
    \        (else\n         (= (+ (* x x) (* y y) (* z z)) (+ (* x y) (* y z) (*\
    \ z x)))))\n", "  (or (= x y) \n      (and (= x z) (= y z)) \n      (and (= x\
    \ z) (= y z) (= z 0))))\n", "  (or (= x y) (= x z) (= y z)))\n", "  (or (= x y)\
    \ (= x z) (= y z)))\n", "  (<= (+ x y z) (+ (* x x) (* y y) (* z z))))\n", " \
    \ (or (= x y) (= y z) (= x z)))\n", "  (and (integer? (+ x y z))\n       (integer?\
    \ (+ x y z))\n       (integer? (+ x y z))))\n", "  (and (= x y)\n       (= x z)\n\
    \       (= y z)))", "  (equal? (+ x y z) (+ x y z)))\n", "  (equal? (+ x y z)\
    \ (* (+ x y z) (+ x y z)))\n  (integer? (+ x y z)))\n", "  (or (= x y) \n    \
    \  (and (= y z) \n           (integer? x))\n      (and (= z x) \n           (integer?\
    \ y))))\n", '  (< (+ x y z) (+ (* x 2) (* y 2) (* z 2))))', "  (= (+ x y z) z))\n",
  "  (< (+ x y z) 36))\n", "  (= (+ x y z) x))\n", "  (cond\n    [(= x y) true]\n\
    \    [(= x z) true]\n    [(= y z) true]\n    [else false]))\n", "  (and (= (+\
    \ x y z) z)\n       (= (modulo x 10) 0)\n       (= (modulo y 10) 0)\n       (=\
    \ (modulo z 10) 0)))\n", "  (or (= x y) (= x z) (= y z)))\n", "  (or (= x y) \n\
    \      (and (= x z) (= y z)))\n  )\n", "  (or (= x y) (= x z) (= y z)))\n", " \
    \ (or (= x y)\n      (= y z)\n      (= x z)))\n", "  (= (+ x y z) (+ x y z)))\n",
  "  (and (integer? x)\n       (integer? y)\n       (integer? z)\n       (= (+ x y\
    \ z) sum)))\n", '  (= (+ (* x x) (* y y) (* z z)) (+ (* x y) (* y z) (* z x))))',
  "  (or (= x y)\n      (= y z)\n      (= x z)))\n", "  (and (number? x) (number?\
    \ y) (number? z)\n       (= (+ x y z) sum-of-other-two-numbers-and-numbers-are-integers)))\n",
  "  (and (< x y) ; must be less than the bigger\n       (< y z) ; must be less than\
    \ the bigger\n       (< z x)))\n", "  (cond\n    [(= x y) #t]\n    [(= x z) #t]\n\
    \    [(= y z) #t]\n    [(= x y) (= y z) #t]\n    [(= x z) (= y z) #t]\n    [else\
    \ #f]))\n", "  (or (= x y)\n      (= x z)\n      (= y z)))\n", "  (and (= (+ x\
    \ y z) x)\n       (= (+ x y z) y)\n       (= (+ x y z) z)))\n", "  (cond\n   \
    \ [(or (= x 0) (= y 0) (= z 0)) (= x y z)]\n    [(= x y) (= x z)]\n    [(= x z)\
    \ (= y z)]\n    [else false]))\n", "  (cond\n    [(> x y) True]\n    [(> y z)\
    \ True]\n    [(> z x) True]\n    [else False]))\n", "  (and (integer? (+ x y z))\n\
    \       (== x (+ y z 1))\n       (== y (+ z x 1))\n       (== z (+ x y 1))))\n",
  "  (= (+ x y z) (- (* x y) z)))\n", "  (or (= x y) (= x z) (= y z)))\n", "  (or\
    \ (= (+ x y z) (* (+ x y) (* (+ x z) (* (+ y z) (* (+ x y) (+ x z) (+ y z)))))\n\
    \      (= (+ x y z) (* (+ x y) (* (+ y z) (+ (+ x y) (* (+ x z) (+ x y) (+ y z)))))\n\
    \      (= (+ x y z) (* (+ x y) (* (+ y z) (+ (+ (+ x y) (* (+ x z) (+ x y) (+\
    \ y z))) (* (+ x z) (+ x y) (+ y z))))))\n  ", "  (and (integer? x) (integer?\
    \ y) (integer? z) (= (+ x y z) (+ x y z))))\n", "  (if (or (= x 0) (= y 0) (=\
    \ z 0))\n      false\n      (= (+ x y z) 9)))\n", "  (cond\n    [(= x 0) true]\n\
    \    [(= y 0) true]\n    [(= z 0) true]\n    [else (equal? (+ x y z) ((+ (* x\
    \ x) (* y y) (* z z))))]))\n", "  (let ((add (+ x y z)))\n    (and (integer? x)\
    \ (integer? y) (integer? z))\n    (or (eq? x add) (eq? y add) (eq? z add))\n \
    \ )\n)\n</cell>\n<cell>\n#lang racket", "  (and (integer? x)\n       (integer?\
    \ y)\n       (integer? z)\n       (= (+ x y z) \n          (+ x y z (+ x y z)))))\
    \ \n", "  (or (= x y) \n      (and (= x z) (= y z))\n      (and (integer? x) (integer?\
    \ y) (integer? z))))\n", "  (let ([sum (+ x y z)]\n        [int-x (int)x]\n  \
    \      [int-y (int)y]\n        [int-z (int)z])\n    (and (>= sum (+ (* int-x int-y)\
    \ (* int-y int-z))\n             (* int-x int-y))\n         (= int-x int-y int-z))))\n",
  "  (if (or (= x 0) (= y 0) (= z 0))\n      false\n      (= (+ x y z) 9)))\n", " \
    \ (and (integer? x) (integer? y) (integer? z)\n       (= (+ x y z) (* (+ x y)\
    \ (+ x z))\n          (+ (* x y) (* y z)))\n       (not (= x y z))))\n</code>\n\
    This works because Racket has an easy way to sum together different types in that\
    \ they automatically sum them together.\nTo use it:\n<code>\n#lang racket\n",
  "  (cond ((= x y) z) #t\n        (else #f)))\n", "  (cond [(= x y) (= y z) (= z\
    \ 0)]\n        [else false]))\n", "  (and (number? x)\n       (number? y)\n  \
    \     (number? z)))\n", '  (and (integer? (add1 x)) (integer? (add1 y)) (integer?
    (add1 z))))', "  (if (and (integer? x) (integer? y) (integer? z) (+ x y z equal?\
    \ 0))\n      (equal? x y z) \n      false))\n", "  (cond [(= x y) (= x z) (= x\
    \ y) ]\n        [(= x z) (= x y) ]\n        [(= y z) (= x y) ]\n        [else\
    \ false]))\n", "  (cond [(= x y)\n         (and (= y z)\n               (= x z))\n\
    \         ]\n        [(< x y)\n         (or (= x y)\n             (= y z)\n  \
    \           (= x z)))\n         ]\n        [else\n         #f]))\n", "  (or (and\
    \ (number? x) (number? y) (number? z)) (not (equal? x y)) (not (equal? y z))))\n",
  "  (and (= (+ x y) z) (= (and (integer? (+ x y)) (integer? (+ y z))) (+ x y))))\n",
  "  (and (integer? x)\n       (integer? y)\n       (integer? z)\n       (< (+ x y\
    \ z) 0)))\n", "  (if (and (= (+ x y z) 0)\n           (and (integer? (car x))\n\
    \                (integer? (car y))\n                (integer? (car z))\n    \
    \            (= (+ (car x) (car y) (car z)) 0))\n           #t\n           #f))\n",
  "  (and (integer? x)\n       (integer? y)\n       (integer? z)\n       (= x y)\n\
    \       (= x z)\n       (= y z)))\n", "  (cond\n    [(< x y) false]\n    [(< y\
    \ z) false]\n    [(< z x) false]\n    [else (= x y z)]\n  )\n)\n", "  (cond\n\
    \    ((= (+ x y) z) (= x y) (= x z))\n    ((= (+ x y) z) (= x z) (= y z))\n  \
    \  (else false)\n  )\n)\n", "  (or (= x y) (= x z) (= y z)))\n", "  (cond\n  \
    \  [(and (integer? x) (integer? y) (integer? z)) (= (+ x y z) 3)]\n    [else (=\
    \ x y) (= x z) (= y z)]\n  )\n)\n", "  (and (integer? x)\n       (integer? y)\n\
    \       (integer? z)))\n", "  (and (= x (+ y z)) (= y x) (= z x)))\n", "  (and\
    \ (integer? x) \n       (integer? y)\n       (integer? z)\n       (= (+ x y z)\
    \ \n          (+ x (+ y z) \n               (+ x (+ y z) \n                  \
    \  (+ x (+ y z) \n                        (+ x (+ y z) 0))))))\n", "  (and (integer?\
    \ (+ x y)) (integer? (+ y z))))\n", "  (or (= (+ x y z) (+ x y z))\n      (and\
    \ (integer? x) (integer? y) (integer? z) (= (+ (* x x) (* y y) (* z z)) 0))))\n",
  "  (cond\n    [(= x y) True]\n    [(= x z) True]\n    [(= y z) True]\n    [(= x\
    \ 0) False]\n    [(= y 0) False]\n    [(= z 0) False]\n    [else False]))\n",
  "  (and (integer? x) (integer? y) \n       (= x y) (= x z) (= y z) (= (+ x y) z)))\n",
  "  (if (or (= x 0) (= y 0) (= z 0))\n      '#t\n      (if (= (+ x y z) 0)\n    \
    \      '#t\n          (if (not (integer? (+ x y z)))\n              '#f\n    \
    \          (or (= x y) \n                   (= y z) \n                   (= z\
    \ (+ x y)))))\n  )\n)\n", "  (and (integer? x)\n       (integer? y)\n       (integer?\
    \ z)\n       (= (+ x y z) sum)))\n", "  (or (= x y) \n      (= y z)\n      (=\
    \ x z)))\n", "  (and (integer? x)\n       (integer? y)\n       (integer? z)\n\
    \       (= (+ x y z) sum-of-other-two)))\n", "  (or (= (+ x y z) (+ (cast x) (cast\
    \ y) (cast z)))\n      (or (= (+ x y z) (+ (cast x) (cast y) (- cast z)))\n  \
    \        (or (= (- x y z) (+ (cast x) (- cast y) (cast z)))\n              (or\
    \ (= (- x y z) (+ (cast x) (- cast y) (- cast z)))\n                  (or (= (-\
    \ x y z) (+ (cast x) (- cast y) (- cast z))\n                       (= (+ x y\
    \ z) (+ (cast x) (+ cast y) (+ cast z))))))))\n", "  (and (number? x) (number?\
    \ y) (number? z) (= (+ (* x y) z) 0)))\n", "  (cond\n    ((= x y) true)\n    ((=\
    \ x z) true)\n    ((= y z) true)\n    (else false)))\n", "  (or (= (+ x y z) 0)\n\
    \      (= (+ x z y) 0)\n      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n      (=\
    \ (+ x z y) 0)\n      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z\
    \ y) 0)\n      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n\
    \      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n      (=\
    \ (+ y z x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n      (= (+ y z\
    \ x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n      (= (+ y z x) 0)\n\
    \      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n      (= (+ y z x) 0)\n      (=\
    \ (+ x y z) 0)\n      (= (+ x z y) 0)\n      (= (+ y z x) 0)\n      (= (+ x y\
    \ z) 0)\n      (= (+ x z y) 0)\n      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n\
    \      (= (+ x z y) 0)\n      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n      (=\
    \ (+ x z y) 0)\n      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z\
    \ y) 0)\n      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n\
    \      (= (+ y z x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n      (=\
    \ (+ y z x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n      (= (+ y z\
    \ x) 0)\n      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n      (= (+ y z x) 0)\n\
    \      (= (+ x y z) 0)\n      (= (+ x z y) 0)\n      (= (+ y z x) 0)\n      (=\
    \ (+ x y z", "  (cond\n    [(= x y) true]\n    [(= y z) true]\n    [else false]))\n",
  "  (let ((sum (+ x y z)))\n    (cond ((= (mod sum 2) 0) true)\n          ((= (mod\
    \ sum 1) 0) false)\n          (else false))))\n", "  (cond [(= (+ x y z) 0) false]\n\
    \        [else true]))\n", "  (or (= x y) (= x z) (= y z)))\n", "  (cond\n   \
    \ [(zero? x) (or (zero? y) (zero? z))]\n    [(zero? y) (or (zero? z) (zero? x))]\n\
    \    [(zero? z) (or (zero? x) (zero? y))]\n    [else (and (integer? x) \n    \
    \          (integer? y) \n              (integer? z))]))\n", "  (or (= x y) \n\
    \      (= x z) \n      (= y z)))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z) (equal? (+ x y z) (+ (* x x) (* y y) (* z z)))))\n", "  (if (or (= x 0) (=\
    \ y 0) (= z 0))\n      (and (integer? x) (integer? y) (integer? z))\n      (or\
    \ (and (= x 0) (= y 0) (= z 0))\n          (and (not (integer? x)) (not (integer?\
    \ y)) (not (integer? z)))\n          (and (integer? x) (integer? y) (integer?\
    \ z)))))\n", "  (or (= (+ (* x x) (y) (* y y) (* z z)) 0)\n      (and (not (=\
    \ x y)) (not (= y z)))\n      (and (not (= x z)) (not (= z y)))))\n", "  (cond\n\
    \    ((equal? x y) (equal? y z))\n    ((equal? x z) (equal? z y))\n    ((equal?\
    \ y z) (equal? z x))\n    ((integer? x) (integer? y) (integer? z) (equal? x y))\n\
    \    (else #f)))\n", "  (cond\n    [(= x y) true]\n    [(= y z) true]\n    [(=\
    \ x z) true]\n    [else false]))\n", "  (= (+ (* x y) z) 0))\n", "  (and (= x\
    \ y) (= y z) (= x z)))\n", "  (and (= x y) (= x z)))\n", "  (and (integer? (add1\
    \ x)) (integer? (add1 y)) (integer? (add1 z))))\n)\n", "  (or (= (+ x y z) (x+y+z))\
    \ (= (+ x y z) (x+y+z)) (= (+ x y z) (x+y+z))))\n", "  (and (= x y) (= y z) (=\
    \ z x)))\n", "  (cond\n    [(or (= x y) z) (= x z)]\n    [else false]))\n", " \
    \ (and (integer? (+ x y)) (integer? (+ x z)) (integer? (+ y z))))\n", "  (and\
    \ (integer? (+ x y z))\n       (= (+ x y z) (+ x y y z))))\n", "  (cond\n    [(<\
    \ x y) true]\n    [(< y z) true]\n    [else false]))\n", "  (cond\n    [(<= x\
    \ y z) true]\n    [(and (integer? (car x)) (integer? (car y))) (or (= x (+ y z))\
    \ (= y (+ z x))) (= z (+ x y))\n      (= x (+ y z)) (= y (+ z x)) (= z (+ x y))]\n\
    \    [else false]))\n", "  (or (= x y)\n      (= x z)\n      (= y z)))\n", " \
    \ (cond ((= (+ x y z) (+ x y z))\n         (= (mod x y) (mod z y))\n         (=\
    \ (mod x z) (mod y z)))\n        (else false)))\n", "  (= (+ x y z) (+ (* x x)\
    \ (* y y) (* z z))))\n", "  (cond\n    ((= x y) z)\n    ((= x z) z)\n    ((= y\
    \ z) z)\n    (else false)))\n#lang racket\n", "  (< (+ (* x x) (* y y) (* z z))\
    \ (* (+ x y) (+ x z) (+ y z))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z) (equal? x (+ y z))))\n", "  (and (integer? x)\n       (integer? y)\n    \
    \   (integer? z)\n       (= (+ x y z) sum)))\n", "  (if (= x y)\n      (if (=\
    \ x z)\n          #t\n          #f)\n      #f))\n", "  (cond\n    ((= x y) (=\
    \ x z))\n    ((= x z) (= y z))\n    (else false)))\n", "  (and (= x y) (= y z)\
    \ (= z (+ x y))))\n", "  (cond\n    [(or (integer? x) (integer? y) (integer? z))\
    \ false]\n    [else (and (equal? x y) (equal? y z) (equal? x z))]))\n", "  (cond\n\
    \    [(= x y) true]\n    [(= x z) true]\n    [(= y z) true]\n    [else false]))\n",
  "  (cond\n    [(= x y) true (and (= y z) true)]\n    [else false]))\n", "  (cond\n\
    \    [(or (= x y) z)#t #f]\n    [else #f]\n    [else #t]))\n", "  (and (= (+ x\
    \ y z) (* (+ x y) (* (+ x z) (+ y z)))) \n       (and (integer? x) (integer? y)\
    \ (integer? z))))\n", "  (and (integer? x) \n       (integer? y) \n       (integer?\
    \ z) \n       (= (+ x y z) sum)))\n", "  (and (integer? (+ x y z)) (= (+ x y z)\
    \ 0)))\n", "  (and (integer? x) (integer? y) (integer? z))\n  ;; Write your solution\
    \ here\n  (= (+ (* x y) (* (+ x z) (+ y z))) (+ (* x z) (* y z))))\n", "  (cond\
    \ ((and (integer? x) (integer? y) (integer? z)) (equal? (+ x y z) (+ (integer?\
    \ x) (integer? y) (integer? z)))) #t\n        (else #f)))\n", "  (< (+ (* x y)\
    \ (* y z)) (* x z)))\n", "  (and (= x y)\n       (= x z)\n       (= y z)))\n",
  "  (or (= x y) (= x z) (= y z)))\n", "  (= (+ (* x x) (* y y) (* z z)) (+ (* x y)\
    \ (* y z) (* z x))))\n", "  (cond ((= x y) true)\n        ((= x z) true)\n   \
    \     ((= y z) true)\n        ((= x z) false)\n        (else false)))\n", "  (cond\n\
    \    [(= x 0) (= y 0)(= z 0)]\n    [(= x y) (= z 0)]\n    [(= x z) (= y 0)]\n\
    \    [else (and (= x y) (= y z) (= z 0))]\n  )\n)\n", "  (or (= x y) \n      (=\
    \ x z)\n      (= y z)))\n", "  (or (= x y) (= x z) (= y z)))\n", "  (or (= x y)\
    \ (= x z) (= y z)))\n", "  (and (= x y) (= y z) (= x z)))\n", "  (or (= x y) \n\
    \      (= x z) \n      (= y z)))\n", "  (and (< x z) (< y z) (= (+ x y) z)))\n",
  "  (cond ((= x 0) (= y 0) (= z 0))\n        ((= x y) (= z 0))\n        ((= y z)\
    \ (= x 0))\n        ((= x y) \n         (= x z) \n         (= y z)))\n       \
    \ ((= y z) \n         (= x 0) \n         (= y z) \n         (= x z))\n       \
    \ (else (= x y) (= x z) (= y z))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
