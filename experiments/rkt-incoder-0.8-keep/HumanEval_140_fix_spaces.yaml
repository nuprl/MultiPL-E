name: HumanEval_140_fix_spaces
language: rkt
prompt: "#lang racket\n\n;; Given a string text, replace all spaces in it with underscores,\
  \ \n;; and if a string has more than 2 consecutive spaces, \n;; then replace all\
  \ consecutive spaces with - \n;; fix_spaces(\"Example\") == \"Example\"\n;; fix_spaces(\"\
  Example 1\") == \"Example_1\"\n;; fix_spaces(\" Example 2\") == \"_Example_2\"\n\
  ;; fix_spaces(\" Example   3\") == \"_Example-3\"\n(define (fix_spaces text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n\
  \    (check-equal? (candidate \"Example\") \"Example\")\n    (check-equal? (candidate\
  \ \"Mudasir Hanif \") \"Mudasir_Hanif_\")\n    (check-equal? (candidate \"Yellow\
  \ Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\")\n    (check-equal?\
  \ (candidate \"Exa   mple\") \"Exa-mple\")\n    (check-equal? (candidate \"   Exa\
  \ 1 2 2 mple\") \"-Exa_1_2_2_mple\")\n))\n\n(test-humaneval)"
completions: ["  (let ((str (make-string text)))\n    (loop for i from 1 to (length\
    \ str)\n          for j from 1 to (length str)\n          if (char=? (char-code\
    \ (car str) i) (char-code (car str) j))\n          collect (if (eq? (char-code\
    \ (car str) i) (char-code (car str) j))\n                     (make-string\n \
    \                      (string-replace-all \"_ \" \" \" str))\n              \
    \       (make-string\n                       (string-replace-all \" _ \" \" \"\
    \ str))\n                     (make-string\n                       (string-replace-all\
    \ \"- \" \"-\" str))\n                     (make-string\n                    \
    \   (string-replace-all \"- _ \" \"-\" str))\n                     (make-string\n\
    \                       (string-replace-all \"- -\" \"-\" str))\n            \
    \         (make-string\n                       (string-replace-all \"_ _ \" \"\
    _\" str))\n                     (make-string\n                       (string-replace-all\
    \ \"- _\" \"-_\" str))\n                     (make-string\n                  \
    \     (string-replace-all \"- -_\" \"-_\" str))\n                     (make-string\n\
    \                       (string-replace-all \"_ _ _\" \"_\" str))\n          \
    \           (make-string\n                       (string-replace-all \"- _\" \"\
    -_\" str))\n                     (make-string\n                       (string-replace-all\
    \ \"- -_\" \"-_\" str))\n                     (make-string\n                 \
    \      (string-replace-all \"_ _ _ \"_\" str))\n                     (make-string\n\
    \                       (string-replace-all \"- _\" \"-_\" str))\n           \
    \          (make-string\n                       (string-replace-all \"- -_\" \"\
    -_\" str))\n                     (make-string\n                       (string-replace-all\
    \ \"_ _ _ _\" \"_\" str))\n                     (make-string\n               \
    \        (string-replace-all \"- _\" \"-_\" str))\n                     (make-string\n\
    \                       (string-replace-all \"- -_\" \"-_\" str))\n          \
    \           (make-string\n                       (string-replace-all \"_ _ _ _\
    \ \" \"_\" str))\n                     (make-string\n                       (string-replace-all\
    \ \"- _\" \"-_\" str))\n                     (make-string\n                  \
    \     (string-replace-all \"- -_\" \"-_\" str))\n                     (make-string\n\
    \                       (string-replace-all \"_ _ _ _ _\" \"_\" str))\n      \
    \               (make-string\n                       (string-replace-all \"- _\"\
    \ \"-_\" ", "  (let ([spaces '()\n         underscores '()\n         dashes '()])\n\
    \    (cond [(string-length text <= 0)\n           (error \"fix_spaces: Text cannot\
    \ be empty.\")\n           (cons text '())]\n          [(equal? (car text) #\\\
    s)\n           (cons text '())]\n          [(equal? (car text) #\\z)\n       \
    \    (error \"fix_spaces: Text cannot end with a newline.\")]\n          [else\n\
    \           (loop\n              [text1 text]\n              [(equal? (car text1)\
    \ #\\s)\n               (append spaces text)\n               (set! text '())]\n\
    \              [else\n               (set! text (cons (car text1) text))\n   \
    \            (set! text1 (cdr text1))]\n             [else\n               (append\
    \ underscores (string->symbol (string-append text \"-\")))\n               (append\
    \ dashes text)\n               (set! text '())])]\n    [else\n     (append underscores\
    \ (string->symbol (string-append text \"-\")))\n     (append dashes (filter (lambda\
    \ (s) (equal? (car s) #\\s)) (split-string (string text) #\\space)))]\n    [else\n\
    \     (append underscores dashes)]))\n", "  (cond [(empty? text) empty]\n    \
    \    [(space? (first text)) (cons (first text) (fix_spaces (rest text)))]\n  \
    \      [else\n         (if (empty? (rest text)) (cons (first text) (fix_spaces\
    \ (rest text)))\n             (if (= (count (first text) text) 2) (cons (first\
    \ text) (fix_spaces (rest text)))\n               (cons (first text) (fix_spaces\
    \ (rest text)))\n               (cons (first text) (fix_spaces (rest text)))))]))\n",
  "  (cond\n    ((empty? text)\n     '())\n    ((space? (car text))\n     (cons (car\
    \ text)\n           (fix_spaces (cdr text))))\n    ((= 2 (length text))\n    \
    \ (cons (substring text 0 (- 1 (length text)))\n           (fix_spaces (substring\
    \ text 1 (- (length text) 2)))))\n    ((not (space? (car text)))\n     (cons (car\
    \ text)\n           (fix_spaces (cdr text))))))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(equal? (first text) \" \")\n     (cond\n       [(empty? (rest\
    \ text)) (first text)]\n       [else (cons (first text) (fix_spaces (rest text)))])]\n\
    \    [else\n     (cond\n       [(= (count text \" \") 2)\n        (cond\n    \
    \      [(equal? (second text) \" \") (first text)]\n          [else (cons (first\
    \ text) (fix_spaces (rest text)))])]\n       [(string= (first text) \" \")\n \
    \       (cond\n          [(empty? (rest text)) (first text)]\n          [else\
    \ (cons (first text) (fix_spaces (rest text)))])]\n       [else\n        (cond\n\
    \          [(empty? (rest text))\n           (cond\n             [(string= (first\
    \ text) \" \")\n              (cond\n                 [(equal? (second text) \"\
    \ \") (first text)]\n                 [else (cons (first text) (fix_spaces (rest\
    \ text)))])]\n             [else (cons (first text) (fix_spaces (rest text)))])]\n\
    \          [(string= (first text) \" \")\n           (cond\n             [(equal?\
    \ (second text) \" \") (first text)]\n             [else (cons (first text) (fix_spaces\
    \ (rest text)))])]\n          [else (cons (first text) (fix_spaces (rest text)))])]\n\
    \          [(string= (first text) \" \")\n           (cond\n             [(equal?\
    \ (second text) \" \") (first text)]\n             [else (cons (first text) (fix_spaces\
    \ (rest text)))])]\n          [else (cons (first text) (fix_spaces (rest text)))])]\n\
    \          [else (cons (first text) (fix_spaces (rest text)))])]\n          [else\
    \ (cons (first text) (fix_spaces (rest text)))])]\n          [else (cons (first\
    \ text) (fix_spaces (rest text)))])]\n          [else (cons (first text) (fix_spaces\
    \ (rest text)))])]\n          [else (cons (first text) (fix_spaces (rest text)))])]\n\
    \          [else (cons (first text) (fix_spaces (rest text)))])]\n          [else\
    \ (cons (first text) (fix_spaces (rest text)))])]\n          [else (cons (first\
    \ text) (fix_spaces (rest text)))])]\n          [else (cons (first text) (fix_spaces\
    \ (rest ", "  (cond [(empty? text) text]\n        [(equal? (first text) \" \"\
    ) (cons (first text) (fix_spaces (rest text)))]\n        [else (cons (replace\
    \ (first text) (lambda (str) (if (equal? (replace str (lambda (c) (equal? (first\
    \ c) \" \") (second c) c)) (cons (replace (str 0) (lambda (c) (second c))) \"\"\
    )) \" \") (fix_spaces (rest text)))) \"\")]))\n", "  (cond\n    [(or (string?\
    \ text)\n           (char-whitespace? text))\n     (make-string (string-length\
    \ text))\n     text]\n    [(string-empty? text)\n     (make-string (string-length\
    \ text))\n     text]\n    [else\n     (cond\n       [(string? text)\n        (cond\n\
    \         [(equal? (char-whitespace? text) (substring text 0 1))\n          (make-string\
    \ (string-length text))\n          text]\n         [(equal? (substring text 0\
    \ 1) \" \")\n          (make-string (string-length text))\n          (make-string\
    \ 1 \"_\")\n          (substring text (+ 1 1))\n          text]\n         [else\n\
    \          (make-string (string-length text))\n          (make-string 1 \"_\"\
    )\n          text]\n         )]\n       [(char-whitespace? text)\n        (cond\n\
    \         [(equal? (substring text 0 1) \" \")\n          (make-string (string-length\
    \ text))\n          (make-string 1 \"_\")\n          (substring text (+ 1 1))\n\
    \          text]\n         [else\n          (make-string (string-length text))\n\
    \          (make-string 1 \"_\")\n          text]\n         )]\n       [else\n\
    \        (make-string (string-length text))\n        (make-string 1 \"_\")\n \
    \       text]\n       )])]))\n", "  (if (string-equal? text \"\")\n      text\n\
    \      (if (or (string-length (string-replace \" \" text \"_\"))\n           \
    \   (string-length (string-replace \" \" text \"_\"))\n              (string-length\
    \ (string-replace \" \" text \"-\")))\n          (if (string-equal? (string-replace\
    \ \" \" text \"_\") \"\")\n              text\n              (string-replace \"\
    \ \" text \"_\"))\n          (if (string-equal? (string-replace \" \" text \"\
    _\") \"\")\n              text\n              (string-replace \" \" text \"-\"\
    )))))\n", "  (let ([s text])\n    (cond\n      [(= (length s) 0)\n       s]\n\
    \      [else\n       (let ([i 0])\n         (cond\n           [(char=? s \" \"\
    )\n            (cond\n              [(< i 2)\n               (set s \"_\")]\n\
    \              [else\n               (loop\n                  [i 0]\n        \
    \          [s s]\n                  [i (+ i 1)])\n               (cond \n    \
    \             [(char=? (char s i) \" \") (set s \"_\")]\n                 [(char=?\
    \ (char s i) \"_\") (set s \"-\")]\n                 [(char=? (char s i) \"-\"\
    ) (set s \"-\")]\n                 [(char=? (char s i) \"_\") (set s \"-\")]\n\
    \                 [(char=? (char s i) \"_\") (set s \"-\")]\n                \
    \ [(char=? (char s i) \"_\") (set s \"-\")]\n                 [(char=? (char s\
    \ i) \"_\") (set s \"-\")]\n                 [(char=? (char s i) \"_\") (set s\
    \ \"-\")]))\n               (set s \"\")]))]))]))\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=racket,scheme |>\nI love Chien-Ming Zhou's answer above. Here's how\
    \ I would do it that way, using a helper function to do the work:\n<code>", " \
    \ (let ([s (string->string text)]\n        [result (empty-string)])\n    (if (string=?\
    \ s \"\")\n        result\n        (if (empty? s)\n            (let ([chars (string->list\
    \ (string->string text))])\n              (if (null? chars)\n                \
    \  result\n                  (let ([head (car chars)\n                       \
    \ tail (cdr chars)])\n                    (if (string=? head \" \") \n       \
    \                 (cond ((< head tail) \n                               (append\
    \ result (string \"_\")))\n                              (else \n            \
    \                   (append result (string head)))))))\n          (let ([chars\
    \ (string->list (string->string s))])\n            (if (null? chars)\n       \
    \         result\n                (let ([head (car chars)\n                  \
    \    tail (cdr chars)])\n                  (cond ((< head tail)\n            \
    \             (append result (fix_spaces (string tail)))\n                   \
    \      (else \n                         (append result (string head))))))))))\n",
  "  (if (string-length text > 0)\n      (let ([s (string->list (string->string text))])\n\
    \        (cond\n          [(eq? (length s) 0) text]\n          [else (cond\n \
    \                [(= 1 (length s)) (cons _ s)] \n                 [else (cons\
    \ (car s)\n                             (fix_spaces (cdr s)))]))]))\n        \
    \  ", "  (cond [(empty? text) \"\"]\n        [(equal? text (substring (first text)\
    \ 0)) \"_\"]\n        [(equal? (substring (first text) 0) (substring text (first\
    \ text))) \n         (cons (first text) (fix_spaces (rest text))) \n         (fix_spaces\
    \ (rest text))]\n        [else (cons (replace (first text) \" \" \"_\") \n   \
    \                     (fix_spaces (rest text)))]))\n", "  (replace-all text #\"\
    [ \\t]+\" #(list \"-\" (first #))))\n</code>\nThe rest can be easily understood\
    \ (just use your favourite editor).\n<|/ a |>\n<| a tags=string,racket,scheme\
    \ |>\nHere's a way using string->list:\n<code>\n#lang racket\n", "  (if (empty?\
    \ text)\n      (list)\n      (let ([l (string->list text)])\n        (if (and\
    \ (= (length l) 2)\n                 (eq? (car l) (caar l)))\n            (cons\
    \ (car l) (list (cdr l)))\n            (cons (car l) (cons (list (cadr l))\n \
    \                          (list (cdr l)))))))\n", "  (cond\n    ((string? text)\n\
    \     (cond\n       ((or (string-match #(\" \") text)\n            (string-match\
    \ #(\" \") (substring text 0 (string-length text)))\n            (string-match\
    \ #(\" \") (substring text (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length text)))\n            (string-match #(\"\
    \ \") (substring text 0 (string-length ", "  (cond\n    ((string-length (remove\
    \ \" \" text))\n     (if (< (string-length (remove \" \" text)) 2)\n         ;;\
    \ more than one space\n         ;; - replace all consecutive spaces with _\n \
    \        (string-append (remove \" \" text)\n                        (list '_)))\n\
    \     (list text))\n    ((string=? text \"\")\n     (list text))\n    ((string=?\
    \ text \"-\")\n     (list text))\n    (else\n     (let ((n (string-length text))\n\
    \           (r (if (string=? (remove \" \" text) \"\")\n                 \"-\"\
    \n                 (list (remove \" \" text))))\n           (fs (make-array n\
    \ (lambda (x)\n                             (lambda (y) (if (string=? (remove\
    \ \" \" (r y)) \"\")\n                                           (if (< (string-length\
    \ (remove \" \" (r y))) 2)\n                                               (list\
    \ (string-append (remove \" \" (r y)) (list '_))\n                           \
    \                    (list (string-append (remove \" \" (r (+ y 1))) (list '_))))))))))\n\
    \           (i (make-array n identity))\n           (f (make-array n (lambda (x)\
    \ (lambda (y) (fs y))))))\n     (let loop ((i text)\n                (n n)\n \
    \               (f fs))\n       (if (= n 0)\n           f\n           (loop (cdr\
    \ i)\n                 (- n)\n                 (cons (car i) f)))))\n  )\n)\n\
    </code>\n<|/ a tags=string,racket |>\n<| a tags=string,racket |>\nHere is my attempt\
    \ in Racket (I believe the code works in any Racket):\n<code>", "  (let ([count\
    \ (count-consecutive-spaces-in-text text)]\n        [result (make-string len (string->list\
    \ text)))])\n    (if (zero? count)\n        text\n        (let ([(len (- len count))\n\
    \               (index (- count (- len 2))\n                       text)]\n  \
    \            [result (append result (list index))])])\n    (reverse result)))\n",
  "  (cond\n    ((or (string? text) (string-length text < 2))\n     text)\n    ((string?\
    \ text)\n     (let ((text (make-string (string-length text) \n               \
    \          #\\space)))\n       (loop for [i 1 to (string-length text)]\n     \
    \    #|\n           (string=? (substring text i 1)  #\\space)\n           (string=?\
    \ (substring text i 2)  #\\space)\n           (string=? (substring text i 3) \
    \ #\\space)\n           (string=? (substring text i 4)  #\\space)\n          \
    \ (string=? (substring text i 5)  #\\space)\n           (string=? (substring text\
    \ i 6)  #\\space)\n           (string=? (substring text i 7)  #\\space)\n    \
    \       (string=? (substring text i 8)  #\\space)\n           (string=? (substring\
    \ text i 9)  #\\space)\n           (string=? (substring text i 10)  #\\space)\n\
    \           (string=? (substring text i 11)  #\\space)\n           (string=? (substring\
    \ text i 12)  #\\space)\n           (string=? (substring text i 13)  #\\space)\n\
    \           (string=? (substring text i 14)  #\\space)\n           (string=? (substring\
    \ text i 15)  #\\space)\n           (string=? (substring text i 16)  #\\space)\n\
    \           (string=? (substring text i 17)  #\\space)\n           (string=? (substring\
    \ text i 18)  #\\space)\n           (string=? (substring text i 19)  #\\space)\n\
    \           (string=? (substring text i 20)  #\\space)\n           (string=? (substring\
    \ text i 21)  #\\space)\n           (string=? (substring text i 22)  #\\space)\n\
    \           (string=? (substring text i 23)  #\\space)\n           (string=? (substring\
    \ text i 24)  #\\space)\n           (string=? (substring text i 25)  #\\space)\n\
    \           (string=? (substring text i 26)  #\\space)\n           (string=? (substring\
    \ text i 27)  #\\space)\n           (string=? (substring text i 28)  #\\space)\n\
    \           (string=? (substring text i 29)  #\\space)\n           (string=? (substring\
    \ text i 30)  #\\space)\n           (string=? (substring text i 31)  #\\space)\n\
    \           (string=? (substring text i 32)  #\\space", "  (cond\n    ((string-length\
    \ = text) text)\n    ((string-length = \"\")\n     (replace-all (regexp-opt \"\
    \\\\s+\") \"_\"))\n    ((string = \"_\" text)\n     (replace-all (regexp-opt \"\
    \\\\s+\") \"_\"))\n    ((equal? (first text) \"\")\n     (replace-all (regexp-opt\
    \ \"\\\\s+\") \"_\"))\n    ((string = \"_\" \"\")\n     (replace-all (regexp-opt\
    \ \"\\\\s+\") \"_\"))\n    (else\n     (replace-all (regexp-opt \"\\\\s+\") \"\
    _\"))))\n", "  (define (helper text index)\n    (cond [(equal? text \"\")\n  \
    \         \"_\"]\n          [(equal? text \" \")\n           (if (= (- index 3)\
    \ 2)\n               (helper text (+ index 1))\n               (helper text index))\n\
    \           text]\n          [(char? (car text))\n           (helper (cdr text)\
    \ (+ index 1))\n           (helper (cdr text) index)]\n          [else\n     \
    \      (helper (cdr text) index)\n           (helper (cdr text) index)]\n    \
    \      ))\n  (helper text 0))\n</code>\n<|/ a dscore=0 tags=racket,scheme,racket-student-languages\
    \ |>\n<| c |>\n\"replace all spaces with underscores\", I assume you mean \"replace\
    \ all consecutive spaces with _\"\n<|/ c |>\n<| c |>\nYes, you're right. I fixed\
    \ my answer.\n<|/ c |>\n<| a dscore=0 |>\nThis is another solution which has more\
    \ functional and less imperative style. The advantage of this approach is that\
    \ it uses recursion to solve the problem more easily. Here is the code\n<code>",
  "  (if (string-length text)\n      (string-replace-all text \" \" \"_\")\n     \
    \ text))\n", "  (cond [(string= text \"\") \"\"]\n        [(string=? (string=?\
    \ \" \" text) (substring text 0 0)) text]\n        [else (substring text 0 (-\
    \ (string->chars (string->string text)) (length (string->string text))))]\n  \
    \      [else (substring text 0 (- (length (string->string text)) (length (string->string\
    \ text))))]))\n", "  (cond\n    ((empty? text) '())\n    ((equal? (first text)\
    \ #\\space) (make-string 1 (concat (rest text) '_'))))\n  (cond\n    ((equal?\
    \ (rest text) #\\space) \n     (make-string 1 \n       (concat (substring text\
    \ 0 1) '-\n              (substring text 1 length)))) \n    ((equal? (rest text)\
    \ #\\newline)\n     (make-string 1 \n       (concat (substring text 0 1) '-\n\
    \              (substring text 1 length)))))\n  (cond\n    ((equal? (rest text)\
    \ #\\newline)\n     (make-string 1 (concat (rest text) '_'))))\n  (cond\n    ((equal?\
    \ (rest text) #\\return) (make-string 1 (cons (first text) (cons (rest text) '()))))\
    \ \n    ((equal? (rest text) #\\space)\n     (make-string 1 \n       (concat (substring\
    \ text 0 1) '-\n              (substring text 1 length))))))\n", "  (replace-all\
    \ #{\\ } \"_\" text))\n</code>\n<|/ a dscore=3 |>\n<| c |>\n`'(#{\\ })` could\
    \ be replaced with `(map symbol spaces)` so you don't have to quote the special\
    \ characters.\n<|/ c |>\n<| c |>\nI don't think it's much of a performance difference\
    \ to use `'(#{\\ })` instead of `#{\\ }`.\n<|/ c |>\n<| c |>\nThat's a good point.\
    \ In the first case, we have to parse and compile a string, whereas in the second\
    \ case we only have to parse a list. Thanks.\n<|/ c |>\n<| c |>\nOops, I misread,\
    \ sorry. I guess it is the only difference between using `symbol` and `symbol`\
    \ here, then?\n<|/ c |>\n<| a tags=racket,scheme |>\nThis is just my opinion and\
    \ I'm sure there are better ways of doing this, but here's another approach that\
    \ might be useful for some people.\nThe idea is to split the string on the spaces,\
    \ filter out all but the single spaces surrounding the words, and then apply the\
    \ function using map to each word. It would probably look something like this:\n\
    <code>", "  (cond [(null? text) #t]\n        [(= (length text) 1)\n         (char->string\n\
    \          (char->integer text))]\n        [(char->integer (string-ref text 0))\n\
    \         (if (< 2 (string-length text))\n             (string-append \"_\" (fix_spaces\
    \ (string-ref text 1)))\n             (fix_spaces (string-ref text 1)))]\n   \
    \     [else\n         (if (not (= (string-ref text 0) #\\space))\n           \
    \  (string-append \"_\" \n                          (fix_spaces (substring text\
    \ 0 (- 1 \n                                                         (string-length\
    \ text))))))\n         (fix_spaces (substring text 0 (string-length text)))]\n\
    \  ))\n", "  (cond\n    [(empty? text) text]\n    [(equal? (first text) #\\space)\
    \ (cons #\\_ (fix_spaces (rest text)))]\n    [else (cons (first text) (fix_spaces\
    \ (rest text)))]))\n", "  (cond\n    ((null? text) text)\n    ((string=? text\
    \ \" \") (concat (subseq text 0 (string-length text))\n                      \
    \            \"_\"))\n    ((string=? text \" \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"_\"))\n    ((string=? text \"  \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"_\"))\n    ((string=? text \"  \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"_\"))\n    ((string=? text \"  \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \"  \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \"  \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \" \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \" \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \"  \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \"  \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \"  \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \" \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \" \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \"  \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \"  \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \"  \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \" \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \" \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \"  \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \"  \"\
    ) (concat (subseq text 0 (string-length text))\n                             \
    \     \"-\"))\n    ((string=? text \"  \") (concat (subseq text 0 (string-length\
    \ text))\n                                  \"-\"))\n    ((string=? text \" \"\
    ) (concat (subseq text 0 (string-length text))\n", "  (let ((spaces (find-all\
    \ #\\Space text)))\n    (cond\n      [(empty? spaces) text]\n      [else\n   \
    \    (loop for space in spaces\n             collect (if (empty? (cdr spaces))\n\
    \                        (cons (car spaces) (car spaces))\n                  \
    \    (cons (cons (car spaces) (cons (car spaces) '-'))\n                     \
    \     (cdr spaces))))]))\n", "  (cond\n    [(string? text) (concat\n         \
    \             (replace-all text \" \" \"_\")\n                      (replace-all\
    \ (replace-all text \" \" \"_\") \"__\" \"-\"))]\n    [else (error \"fix_spaces:\
    \ given value is not a string\")]))\n", "  (cond ((= (length text) 0) text)\n\
    \        ((equal? (first text) #\\Space) (cons #\\_ (fix_spaces (rest (rest text))\
    \ )))\n        ((equal? (first text) #\\Newline) (cons #\\_ (fix_spaces (rest\
    \ (rest text)) )))\n        ((equal? (first text) #\\Tab) (cons #\\_ (fix_spaces\
    \ (rest (rest text)) )))\n        (else (cons (first text) (fix_spaces (rest (rest\
    \ text)))))))\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI wanted to make an additional\
    \ answer because I had some difficulty understanding some of the answers posted\
    \ so far. I hope this helps someone.\nI wrote a simple recursive program to fix\
    \ a string. \n<code>", "  (let ([fix_space_count\n          (count-consecutive-spaces\n\
    \           text)]\n        [fix_space_count2\n         (count-consecutive-spaces\n\
    \          (make-string text #\\Space))]\n        [fix_space_count3\n        \
    \ (count-consecutive-spaces\n          (make-string text #\\Space))])\n    (cond\n\
    \      [(< fix_space_count 2) (cond \n          [(> fix_space_count2 0)\n    \
    \       (make-string\n            (replace-all-string text \" \" \"_\")\n    \
    \        (+ fix_space_count 1))]\n          [(> fix_space_count2 1)\n        \
    \   (make-string\n            (replace-all-string text #\\Space \"_\")\n     \
    \       (+ fix_space_count 1))]\n          [else (make-string text #\\_)]]))))\n",
  "  (let ([chars (split-string (string text) \" \")])\n    (cond\n      [(empty?\
    \ chars) \"\"]\n      [(string= (first chars) \"\") \"\"]\n      [(string= (first\
    \ chars) \" \") (cons (string->symbol (replace (first chars) \" \" \"_\") (fix_spaces\
    \ (rest chars))) '())]\n      [else (cons (string->symbol (replace (first chars)\
    \ \" \" \"_\") (fix_spaces (rest chars))) '())]\n    )))\n", "  (cond\n    ((string-length\
    \ (replace-all \" \" \"_\" text #t #t)) (string-length text))\n    ((string-length\
    \ (replace-all \"[ \\t]+\" \"_\" text #t #t)) (string-length text))\n    (t (replace-all\
    \ \"[ \\t]+\" \"_\" text #t #t))))\n</code>\n<|/ a tags=scheme,racket,string dscore=2\
    \ |>\n<| c |>\nYour approach looks interesting. I have just started learning racket.\
    \ Can you please tell me what does (define (replace-all find-string replace-string\
    \ text ...) do?\n<|/ c |>\n<| c |>\n`replace-all` is a library function that replaces\
    \ all occurrences of `find-string` in `text` with `replace-string`.\n<|/ c |>\n\
    <| c |>\nThanks a lot for the explanation. I have also added a fix for Racket\
    \ in EDIT 2 of the question.\n<|/ c |>\n<| c |>\nGlad you like it; I updated the\
    \ answer to include a Racket version.\n<|/ c |>\n<| c |>\nIt works perfectly but\
    \ I am afraid I will not be able to understand it until I fully comprehend racket.\n\
    <|/ c |>\n<| a tags=scheme,racket,string dscore=1 |>\nHere's a working solution\
    \ (using the same functions from your previous question):\n<code>", "  (let loop\
    \ ((text text))\n    (cond [(empty? text)\n           (empty? (rest text))] \n\
    \          [(space? (first text))\n           (loop (rest text))] \n         \
    \ [(equal? (first text) (second text))\n           (loop (rest text))] \n    \
    \      [else \n           (cons (- (first (first text)) (second (first text)))\n\
    \                 (loop (rest text))] \n         ]))\n</code>\nThe next function\
    \ takes the last three characters in a string, and returns the length of the string:\n\
    <code>", "  (cond \n    ((null? text) text)\n    (else \n      (let ((current_space\
    \ (substring text 0 1)))\n        (if (equal? current_space \"\")\n          \
    \  (fix_spaces (substring text 1))\n            (if (space? (substring text 1\
    \ 2))\n                (cons current_space (fix_spaces (substring text 3)))\n\
    \                (cons current_space (fix_spaces (substring text 2 1)))\n    \
    \            (cons current_space (fix_spaces (substring text 3 1)))\n        \
    \        (cons current_space (fix_spaces (substring text 4 1)))\n            \
    \    (cons current_space (fix_spaces (substring text 5 1)))\n                (cons\
    \ current_space (fix_spaces (substring text 6 1)))\n                (cons current_space\
    \ (fix_spaces (substring text 7 1)))\n                (cons current_space (fix_spaces\
    \ (substring text 8 1)))\n                (cons current_space (fix_spaces (substring\
    \ text 9 1)))\n                (cons current_space (fix_spaces (substring text\
    \ 10 1)))\n                (cons current_space (fix_spaces (substring text 11\
    \ 1)))\n                (cons current_space (fix_spaces (substring text 12 1)))\n\
    \                (cons current_space (fix_spaces (substring text 13 1)))\n   \
    \             (cons current_space (fix_spaces (substring text 14 1)))\n      \
    \          (cons current_space (fix_spaces (substring text 15 1)))\n         \
    \       (cons current_space (fix_spaces (substring text 16 1)))\n            \
    \    (cons current_space (fix_spaces (substring text 17 1)))\n               \
    \ (cons current_space (fix_spaces (substring text 18 1)))\n                (cons\
    \ current_space (fix_spaces (substring text 19 1)))\n                (cons current_space\
    \ (fix_spaces (substring text 20 1)))\n                (cons current_space (fix_spaces\
    \ (substring text 21 1)))\n                (cons current_space (fix_spaces (substring\
    \ text 22 1)))\n                (cons current_space (fix_spaces (substring text\
    \ 23 1)))\n                (cons current_space (fix_spaces (substring text 24\
    \ 1)))\n                (cons current_space (fix_spaces (substring text 25 1)))\n\
    \                (cons current_space (fix_spaces (substring text 26 1)))\n   \
    \             (cons current_space (fix_spaces (substring text 27 1)))\n      \
    \          (cons current_space (fix_spaces (substring text 28 1)))\n         \
    \       (cons current_space (fix_spaces (substring text 29 1)))\n            \
    \    (cons current_space (fix_spaces (substring text 30 1)))\n               \
    \ (cons current_space (fix_spaces (sub", "  (cond\n    [(empty? text) text]\n\
    \    [(space? (car text)) (fix_spaces (cdr text))\n      (append \"_\" (fix_spaces\
    \ (cdr text)))]\n    [else (append (car text) (fix_spaces (cdr text)))]))\n</code>\n\
    <|/ a tags=racket dscore=1 |>\n<| a |>\nYou can do it in racket using a combination\
    \ of string-append and string-replace. Here's how:\n<code>", "  (cond\n    [(string=\
    \ text \"\")  \"\"]\n    [(or (string= text \" \") (string= text \"\\t\")) text]\n\
    \    [(or (string= text \"  \") (string= text \"\\t\\t\")) (concat \"-\" (fix_spaces\
    \ (substring (text 0 2) (length (- text 1)))))]\n    [(or (string= text \"  \"\
    ) (string= text \"\\t\\t\")) (concat \"_\" (fix_spaces (substring (text 0 2) (length\
    \ (- text 1)))))]\n    [else text]))\n", "  (cond\n    [(null? text) text]\n \
    \   [(equal? text (string \" \")) #t]\n    [else (replace-all text #(#\\space\
    \ #\\_) #\\_)]))\n", "  (cond\n    ((= text \"\") \"\")\n    ((= text \"-\") \"\
    \")\n    ((= text \"_\") text)\n    ((= (length text) 2) (append (list (substring\
    \ text 0 1)) (list (substring text 2 1))))\n    ((< 3 (length text)) (append (list\
    \ (substring text 0 1)) \"_\"))\n    (else (append (list (substring text 0 1))\
    \ \"_\"))))\n</cell>\n<code language=racket-transformer>\n#lang racket\n", " \
    \ (if (or (string? text)\n          (null? text))\n      text\n      (replace-all\
    \ \" \" \"_\" text)))\n", "  (cond\n    [(string? text) \n     (cond\n       [(=\
    \ (string-length text) 0)\n        (string->symbol (symbol->string \"_\"))]\n\
    \       [else\n        (let\n          [(starts-with-space (memq text \" \"))\n\
    \           (is-consecutive-space (lambda (i x)\n                            \
    \     (and (memq x \" \" i) \n                                      (memq x (+\
    \ i 1)))))\n           (replace-consecutive-space (lambda (i x)\n            \
    \                                 (cond\n                                    \
    \           [(is-consecutive-space i x)\n                                    \
    \            (symbol->string \"_\")]\n                                       \
    \        [else x]))]\n          [(replace-consecutive-space (+ 0 (string->length\
    \ text)) \n                             text)]\n          [(replace-consecutive-space\
    \ (string->length text) \n                             text)]\n          [(starts-with-space\n\
    \           (replace-consecutive-space (string->length text) \n              \
    \                      (replace-consecutive-space 0 text)))]\n          [(replace-consecutive-space\
    \ 0 text)]))]\n    [else \n     (string->symbol (symbol->string \"_\"))]\n   \
    \ [else \n     (string->symbol (symbol->string \"_\"))]))\n", "  (let loop ((text\
    \ text))\n    (if (not text)\n        text\n        (if (char= (char text 0) 32)\n\
    \            (loop (substring text 1))\n            (if (= (count (substring text\
    \ 0 -1)) 2)\n                (loop (substring text 1 -1))\n                (if\
    \ (char= (char text 0) 32)\n                    (loop (substring text 1 -1))\n\
    \                    (if (char= (char text 0) 32)\n                        (loop\
    \ (substring text 2 -1))\n                        (loop (substring text 2 -1))))))))\n",
  "  (cond\n    [(empty? text)\n     (string)\n     (cond\n       [(string-blank?\
    \ text) \"\"]\n       [else (string-append \"_\" text)]\n       )]\n    [else\n\
    \     (let ([head (first (split text)))\n           (tail (split (rest text)))\n\
    \           (tail-result (cond\n                         [(string-blank? (first\
    \ tail)) tail]\n                         [else (cons (first tail) (fix_spaces\
    \ tail))])])\n       (cond\n         [(string-blank? head) (cons head tail-result)]\n\
    \         [else (cons (first head) (fix_spaces tail))]))]))\n", "  (cond\n   \
    \ [(string-length? text 0)\n     text]\n    [(equal? text #\\space)\n     (let\
    \ ([s (subseq text 0 (string-length text)))\n           (r (subseq text 1 (string-length\
    \ text)))])\n       (cond\n         [(equal? s #\\space)\n          (let ([s1\
    \ (subseq s 0 (string-length s)))\n                s2 (subseq s 1 (string-length\
    \ s)))\n            (cond\n              [(equal? s1 #\\space)\n             \
    \  (cond\n                 [(equal? s2 #\\space)\n                   (subseq s\
    \ 0 (string-length s)))]\n              [else\n               (cond\n        \
    \         [(equal? (subseq s2 0 (string-length s2)) #\\space)\n              \
    \     (subseq s 0 (string-length s)))\n                  [else\n             \
    \      (subseq s2 0 (string-length s2))]]])]\n         [else\n          (cond\n\
    \            [(equal? (subseq r (string-length r) #\\space)\n             #\\\
    space)\n             (subseq r (string-length r) 1)]\n            [else\n    \
    \         (subseq r (string-length r) 1)]\n            [else (subseq r (string-length\
    \ r) 1)]]))]\n    [else\n     (let ([s1 (subseq text 0 (string-length text)))\n\
    \           (r (subseq text 1 (string-length text)))])\n      (cond\n        [(equal?\
    \ s1 #\\space)\n         (cond\n           [(equal? r #\\space)\n            (cond\n\
    \              [(equal? (subseq r 0 (string-length r)) #\\space)\n           \
    \    (subseq r 0 (string-length r))]\n              [else\n               (cond\n\
    \                 [(equal? (subseq s1 0 (string-length s1)) #\\space)\n      \
    \             (subseq s1 0 (string-length s1))]\n                 [else\n    \
    \               (subseq s1 0 (string-length s1))]]))]\n        [else\n       \
    \  (cond\n           [(equal? r #\\space)\n            (cond\n              [(equal?\
    \ (subseq r 0 (string-length r)) #\\space)\n               (subseq r 0 (string-length\
    \ r))]\n              [else\n               (cond\n                 [(equal? (subseq\
    \ s1 0 (string-length s1)) #\\space)\n                   (subseq s1 0 (string-length\
    \ s1))]\n                 [else\n                   (subseq s1 0 (string-length\
    \ s1))]]))]\n        [else (subseq r 0 (", "  (let ((new_text '()))\n    (if (string=?\
    \ text \"\")\n        new_text\n        (if (string-length = text)\n         \
    \   (cond ((string=? text \" \") new_text)\n                  ((string=? text\
    \ \"  \") (cons text new_text))\n                  ((string=? text \"  \") (cons\
    \ \"-\" new_text))\n                  ((string=? text \" \") (cons \"_\" (cons\
    \ text new_text)))\n                  (else (cons \"_\" (cons text new_text)))))\n\
    \    )\n  )\n", "  (cond [(= 0 (string-length text))\n         text]\n       \
    \ [(string-match (regexp-quote (string \" \")) text) \n         (string-replace\
    \ text (regexp-quote (string \" \")) '_')]\n        [(>= (length text) 2)\n  \
    \       (string-replace text (regexp-quote (string \" \")) \"-\")]\n        [else\n\
    \         (fix_spaces (substring text 0 (- 2 (string-length text))))]))\n", " \
    \ (define (fix-one text i)\n    (if (< i text)\n        text\n        (if (char=?\
    \ (char-code (substring text i i)) #\\Space #\\Tab) (substring text i i) \"_\"\
    )))\n  (define (fix-rest)\n    (define (fix text i)\n      (if (< i text)\n  \
    \        (cons char=? (char-code (substring text i i)) #\\Space #\\Tab)\n    \
    \      (cond ((char=? (char-code (substring text i i)) #\\Space) (cons char=?\
    \ #\\Space (fix (substring text (+ i 1) i) (+ i 1))))\n                (#t (cons\
    \ char=? #\\Space (fix (substring text i 1) (+ i 1))))))\n    (fix (reverse text)\
    \ 0)\n    (reverse (map (lambda (x)\n                  (if (zero? (length x))\n\
    \                      (substring x 0 1)\n                      (substring x 1\
    \ length))\n                  x) (reverse (map (lambda (x)\n                 \
    \               (if (zero? (length x))\n                                    (substring\
    \ x 0 1)\n                                    (substring x 1 length))\n      \
    \                        x) (append text (list char=? #\\Space)))))))\n  (cond\
    \ ((zero? (length text))\n         text)\n        (else (cond ((char=? (char-code\
    \ (substring text 0 0)) #\\Space)\n                   (fix text 0))\n        \
    \           ((char=? (char-code (substring text 0 0)) #\\Tab)\n              \
    \      (fix text 0))\n                   ((char=? (char-code (substring text 0\
    \ 0)) #\\Newline)\n                    (fix text 0))\n                   ((char=?\
    \ (char-code (substring text 0 0)) #\\Newline) (fix text 0))\n               \
    \    ((char=? (char-code (substring text 0 0)) #\\Space)\n                   (fix-rest)\n\
    \                   ((substring text 0 2)\n                   (fix-rest)\n   \
    \                ((substring text 0 2)\n                   (fix-rest)\n      \
    \             ((substring text 0 1)\n                   (fix-rest)\n         \
    \          ((substring text 0 1)\n                   (fix-rest)\n            \
    \       ((substring text 0 1)\n                   (fix-rest)\n               \
    \    ((substring text 0 1)\n                   (fix-rest)\n                  \
    \ ((substring text 0 1)\n                   (fix-rest)\n                  ", " \
    \ (cond\n    [(string-length text) text]\n    [(or (equal? (string-length text)\
    \ 2) (string-contains text \" \"))\n     (string-append \"-\" (cond [(equal? (string-length\
    \ text) 1)\n                                (cond [(equal? (string-index text\
    \ \" \")) \"_\"]\n                                       [(equal? (string-index\
    \ text \" \") 1)\n                                        (string-append \"_\"\
    \ (string-index text 2))]\n                                       [else (string-append\
    \ \"_\" (string-index text 1))])]\n                              [else (cond [(equal?\
    \ (string-length text) 2)\n                                        (string-append\
    \ \"_\" \n                                                    (string-index (string-append\
    \ \"-\" \n                                                                   \
    \    (string-to-string \n                                                    \
    \                       (string-reverse text))) \n                           \
    \                                               2))]\n                       \
    \                 [else (string-append \"_\" \n                              \
    \                      (string-reverse \n                                    \
    \                    (string-index (string-append \"-\" \n                   \
    \                                                         (string-to-string \n\
    \                                                                            \
    \   (string-reverse text))) \n                                               \
    \                           2)))]\n                                        [else\
    \ (string-reverse \n                                                    (string-index\
    \ (string-append \"-\" \n                                                    \
    \                        (string-to-string \n                                \
    \                                               (string-reverse text))) \n   \
    \                                                                       2)))]))]\n\
    \    [else (string-append \"_\" (fix_spaces (string-reverse text)))]))\n", " \
    \ (cond\n    [(string-blank? text) text]\n    [else (cond \n            ;; replace\
    \ all spaces with underscores\n            ;; and if we have more than 2 consecutive\
    \ spaces\n            ;; then replace all consecutive spaces with -\n        \
    \    [(string-contains? text \" \") (append (list \"_\")\n                   \
    \                           (replace-all-spaces text))]\n            [else (append\
    \ (map string->symbol\n                                (replace-all-spaces text))\n\
    \                       (list (string->symbol \"_\") (symbol->string \"-\"))])]))\n\
    </code>\n<|/ a dscore=2 tags=racket,string,replace,whitespace |>\n<| a tags=racket,string,replace,whitespace\
    \ |>\nHere's an Racket solution that replaces multiple consecutive whitespace\
    \ characters with a single space.\n<code>", "  (cond\n    [(equal? (length text)\
    \ 0)\n     \"\"]\n    [(equal? (length text) 1)\n     text]\n    [(equal? (length\
    \ text) 2)\n     (let ([c (char (car text))])\n       (cond\n         [(equal?\
    \ c ' ')\n          (let ([s (replace_char ' ' \"_\")])\n            (cond\n \
    \             [(equal? (length s) 1)\n               (let ([s (replace_char c\
    \ \"_\")])\n                 (cond\n                   [(equal? c ' ')\n     \
    \               (let ([s (replace_char \" \" \"-\")])\n                      (cond\n\
    \                        [(equal? (length s) 1)\n                         (cons\
    \ (cons c s) text)\n                         ]\n                        [(equal?\
    \ (length s) 2)\n                         (cons (cons (cons c s) s) text)\n  \
    \                       ]\n                        [else\n                   \
    \      (cons (cons c (cons s \"\")) text)\n                         ]))]\n   \
    \                [else\n                    (cons (cons c (cons s \"\")) text)\n\
    \                    ])]\n                 [else\n                  (cons (cons\
    \ c (cons s \"\")) text)\n                  ])]\n               [else\n      \
    \          (cons (cons c (cons s \"\")) text)\n                ])]\n         \
    \    [else\n              (cons (cons c (cons s \"\")) text)\n              ])]\n\
    \           [else\n            (cons (cons c (cons s \"\")) text)\n          \
    \  ])]\n         [else\n          (cons (cons c (cons s \"\")) text)\n       \
    \   ]))]\n       [else\n        (cons (cons c (cons s \"\")) text)\n        ]))]\n\
    \    [else\n     (let ([c (char (car text))])\n       (cond\n         [(equal?\
    \ c ' ')\n          (let ([s (replace_char ' ' \"_\")])\n            (cond\n \
    \             [(equal? (length s) 1)\n               (let ([s (replace_char c\
    \ \"_\")])\n                 (cond\n                   [(equal? c ' ')\n     \
    \               (let ([s (replace_char \" \" \"-\")])\n                      (cond\n\
    \                        [(equal? (length s) 1)\n                         (cons\
    \ (cons c s) text)\n                         ]\n                        [(equal?\
    \ (length s) 2)\n                         (cons (cons (cons c s) s) text)\n  \
    \                       ]\n                        [else\n                   \
    \      (cons (cons c (cons s \"\")) text)\n                         ]))]\n   \
    \                [else\n                    (cons (cons c (cons s \"\"", "  (cond\n\
    \    [(empty? text) text]\n    [else\n     (cond\n       [(equal? (char-code (first\
    \ text)) #\\s)\n        (if (> (length (rest text)) 2)\n            (let ([text\
    \ (replace-all text #\\s #\\_)])\n              (cond\n                [(empty?\
    \ text) text]\n                [else (fix_spaces (rest text))]))]\n       [(equal?\
    \ (char-code (first text)) #\\_)\n        (if (> (length (rest text)) 2)\n   \
    \         (let ([text (replace-all text #\\_ #\\S)])\n              (cond\n  \
    \              [(empty? text) text]\n                [else (fix_spaces (rest text))]))]\n\
    \       [else\n        (let ([text (replace-all text #\\s #\\_)])\n          (cond\n\
    \            [(empty? text) text]\n            [else (fix_spaces (rest text))]))]]))]))\n",
  "  (cond\n    [(empty? text) \"\"]\n    [(equal? text (substring text 0 2)) (substring\
    \ text 0 2)]\n    [(equal? text (substring text 0 1)) (substring text 0 1)]\n\
    \    [else (append (map (lambda (c) (if (equal? c space) underscore (if (equal?\
    \ (substring text 0 2) c) space hyphen))))\n                 (substring text 1\
    \ ((length text) - ((length text) - 1))))]))\n", "  (define (helper text space\
    \ count)\n    (cond\n      [(or (equal? (length text) 1)\n           (equal? (count\
    \ 2) count) \n           (equal? (count 1) 1)) \n       (text)\n      [(equal?\
    \ (count 2) count)\n       (let ([new-text (cons (string-ref text 0) \n      \
    \                    (cons (string->char (string-append space \n             \
    \                                           (substring text \n               \
    \                                                 count))) \n                \
    \              text)))\n           (helper (reverse new-text)\n              \
    \     (cons (string->char (string-append space \n                            \
    \                         (substring new-text 1))) \n                        \
    \ space)\n                 (+ count 1))]\n      [(equal? (count 1) 1)\n      \
    \ (let ([new-text (cons (string->char (string-append space text))\n          \
    \                text)])\n         (helper (reverse new-text)\n              \
    \     (cons (string->char (string-append space (substring new-text 1))) \n   \
    \                      space)\n                 (+ count 1))]\n      [(equal?\
    \ (count 0) 1)\n       (let ([new-text (cons (string->char (string-append space\
    \ text))\n                          text)])\n         (helper (reverse new-text)\n\
    \                   (cons (string->char (string-append space (substring new-text\
    \ 1))) \n                         space)\n                 (+ count 1))]\n   \
    \   [(else\n       (let ([new-text (cons (string->char (string-append space text))\n\
    \                          text)])\n         (helper (reverse new-text)\n    \
    \               (cons (string->char (string-append space (substring new-text 1)))\
    \ \n                         space)\n                 (+ count 1))])]))\n  (helper\
    \ (reverse text)\n          (quote ())\n          0))\n", "  (cond\n    [(empty?\
    \ text) '()]\n    [(space? text) (list text)]\n    [else (cons (substring (text\
    \ 0) 0 (string-length text)) \n                (fix_spaces (substring (text 1)\
    \ (string-length text) text)))]))\n", "  (cond\n    ((string? text) text)\n  \
    \  ((equal? text \"\")\"\")\n    (else (map (lambda (c)\n                (cond\n\
    \                  ((char=? (car text) ?' ')\n                   (cond\n     \
    \               ((equal? (cdr text) \"\")\n                     text)\n      \
    \              ((equal? (cdr text) ?' ')\n                     (cond\n       \
    \                ((equal? (cdr (cdr text)) ?' ')\n                        (cond\n\
    \                          ((equal? (cddr text) \"\")\n                      \
    \     (cond\n                            ((equal? (cddr (cddr text)) ?' ')\n \
    \                            (cond\n                              ((equal? (cddr\
    \ (cddr (cddr text))) ?' ')\n                               (cond\n          \
    \                      ((equal? (cddr (cddr (cddr (cddr text))) ?' ')\n      \
    \                           (cond\n                                   ((equal?\
    \ (cddr (cddr (cddr (cddr (cddr text)))))\n                                  \
    \ ((map (lambda (c) (cond ((char=? c ?' ')\n                                 \
    \                       (cdr text))\n                                        \
    \ (else\n                                          (cons (- c ?' ) text)\n   \
    \                                      )))\n                                 \
    \  (cdr text))\n                                   (else\n                   \
    \                (cons ?' text)\n                                  )))))))\n \
    \                          (cddr text)\n                           (else\n   \
    \                         (cons (- c (cddr (cddr text))) text)\n             \
    \            )))))))\n                    ((char=? (car text) ?' ')\n        \
    \             (cond\n                      ((equal? (cdr text) \"\")\n       \
    \                (cond\n                        ((equal? (cddr text) \"\")\n \
    \                        (cond\n                          ((equal? (cddr (cddr\
    \ text)) ?' ')\n                           (cond\n                           \
    \ ((equal? (cddr (cddr (cddr text))) ?' ')\n                             (cond\n\
    \                              ((equal? (cddr (cddr (cddr (cddr text))) ?' ')\n\
    \                               (cond\n                                ((equal?\
    \ (cddr (cddr (cddr (cddr (cddr text)))))\n                                (cons\
    \ (- c ?' ) text)\n                               ))))\n                     \
    \        (cddr (cddr text))\n                             (else\n            \
    \                 (cons ?' text)\n                             ))))))\n      \
    \                   (cddr (cddr text))\n                         (else\n     \
    \                    (cons ?' text)\n                         ))))\n         \
    \            (else (", "  (cond\n    ((null? text)\n     text)\n    ((equal? (car\
    \ text) \" \")\n     (append (list (substring text 0 (- (length text) 1))) \n\
    \             (list (substring text (length (car text)) (length (car text)))))\n\
    \     (fix_spaces (cdr text))\n     (list (car text))))\n  (cond\n    ((< 1 (length\
    \ text) 2)\n     (list (substring text 0 (- (length text) 2))))\n    ((equal?\
    \ (car text) \" \")\n     (list (substring text 0 (- (length text) 1))))\n   \
    \ (else\n     (append (list (substring text 0 (- (length text) 1))) \n       \
    \      (list (fix_spaces (cdr text)))))))\n", "  (let ((result text))\n    (let\
    \ loop ((text text)\n               (result text))\n      (cond ((string-length\
    \ (string text)) result)\n            ((string=? text \"\") result)\n        \
    \    ((string-equal? text \" \") (if (string=? text \" \") \n                \
    \                       (make-string 1 '_) \n                                \
    \       (make-string 1 '-)))\n            (else (loop (string->string text)\n\
    \                       (make-string (+ (string-length result) 1)\n          \
    \                       (string=? result \" \" '_) result)))))))\n", "  (cond\n\
    \    [(null? text) text]\n    [(empty? text) text]\n    [(= (length text) 0) text]\n\
    \    [(= (length text) 1) text]\n    [(equal? text (substring text 0 1)) text]\n\
    \    [else \n      (let ([(i j)])\n        (cond\n          [(char=? (substring\
    \ text 0 i) ' ') \n           (cond \n             [(char=? (substring text i\
    \ 1) ' ') \n              (cond \n                [(char=? (substring text (+\
    \ i 1) 1) ' ') (substring text (+ i 1) 1) (append '- \n                      \
    \                                             (substring text (+ j 1) \n     \
    \                                                              (- i 1)))]\n  \
    \              [(char=? (substring text (+ i 1) 1) ' ') \n                 (cond\
    \ \n                   [(char=? (substring text (+ i 1) 1) ' ') \n           \
    \         (cond \n                     [(char=? (substring text (+ i 1) 1) ' ')\
    \ \n                       (cond \n                         [(char=? (substring\
    \ text (+ i 1) 1) ' ') \n                           (cond \n                 \
    \            [(char=? (substring text (+ i 1) 1) ' ') \n                     \
    \         (cond \n                                [(char=? (substring text (+\
    \ i 1) 1) ' ') \n                                 (cond \n                   \
    \                [(char=? (substring text (+ i 1) 1) ' ') \n                 \
    \                   (cond \n                                     [(char=? (substring\
    \ text (+ i 1) 1) ' ') \n                                      (cond \n      \
    \                                 [(char=? (substring text (+ i 1) 1) ' ') \n\
    \                                        (cond \n                            \
    \             [(char=? (substring text (+ i 1) 1) ' ') \n                    \
    \                      (cond \n                                           [(char=?\
    \ (substring text (+ i 1) 1) ' ') \n                                         \
    \     (cond \n                                               [(char=? (substring\
    \ text (+ i 1) 1) ' ') \n                                                (cond\
    \ \n                                                 [(char=? (substring text\
    \ (+ i 1) 1) ' ') \n                                                  (cond \n\
    \                                                   [(char=? (substring text (+\
    \ i 1) 1) ' ') \n                                                    (cond \n\
    \                                                     [(char=? (substring text\
    \ (+ i 1) 1) ' ') \n                                                      (cond\
    \ \n                                                       [(char=? (substring\
    \ text (+ i 1) 1) ' ') \n                                                    \
    \    (cond \n                                                         [(char=?\
    \ (substring text (+ i 1) 1) ' ') \n                                         \
    \                 (cond \n                                                   \
    \        [(char=? (", "  (cond\n    ((string-length (string-trim text)) 0)\n \
    \   (else \n     (string-append \n      (string-replace \n       (string-trim\
    \ text)\n       #(#\\Space #\\Space) \"_\" \n       (string-length (string-trim\
    \ text)) 0)\n      (fix_spaces \n       (string-replace\n        (string-trim\
    \ text)\n        #(#\\Space #\\Space) #\\- \n        (string-length (string-trim\
    \ text)) 0)))))\n", "  (let ([spaces_count (count-spaces-in-text text)])\n   \
    \ (if (> spaces_count 2)\n        (string-replace text \" \" \"_\" \"g\")\n  \
    \      text)))\n", "  (cond\n    ((or (string? text) (null? text))\n     (if (string-empty?\
    \ text)\n         (string-append \"_\" \"\")\n         (string-append \"_\" (string->list\
    \ text))\n       (if (string-contains \" \" (string->list text))\n           (cond\
    \ \n             ((string-contains \" \" (string->list text))\n              \
    \ (cond \n                 ((string-contains \" \" (string->list text))\n    \
    \               (string-append \"_\" (string->list text)))\n               ((string-contains\
    \ \" \" (string->list text))\n               (string-append \"-\" (string->list\
    \ text)))\n             ((or (string=? (string-tail (string->list text))\n   \
    \                        (string-tail (string->list text)))\n               (string-append\
    \ \"-\" (string->list text)))\n             ((string-contains \"   \" (string->list\
    \ text))\n               (cond \n                 ((string-contains \"   \" (string->list\
    \ text))\n                   (string-append \"-\" (string->list text)))\n    \
    \           ((or (string=? (string-tail (string->list text))\n               \
    \            (string-tail (string->list text)))\n               (string-append\
    \ \"-\" (string->list text)))\n             ((string-contains \"   \" (string->list\
    \ text))\n               (string-append \"-\" (string->list text)))\n        \
    \     ((string-contains \"   \" (string->list text))\n               (string-append\
    \ \"-\" (string->list text)))))))))\n", "  (cond\n    [(empty? text)         \
    \ text]\n    [(string-char? text #\\s)\n     (cond\n       [(string-length (drop-if\
    \ #\\s text)) text]\n       [else                (make-string (string-length (drop-if\
    \ #\\s text)) #\\_)]\n       )])\n    [else\n     (cond\n       [(equal? text\
    \ (substring text 0 (string-length (substring text 0 1)))) (substring text 0 (string-length\
    \ (substring text 0 1)))]\n       [else\n        (cond\n          [(equal? text\
    \ (substring text 1 (string-length (substring text 1 1)))) (substring text 1 (string-length\
    \ (substring text 1 1)))]\n          [else\n           (cond\n             [(equal?\
    \ text (substring text 2 (string-length (substring text 2 1)))) (substring text\
    \ 2 (string-length (substring text 2 1)))]\n             [else\n             \
    \ (cond\n                [(equal? text (substring text 3 (string-length (substring\
    \ text 3 1)))) (substring text 3 (string-length (substring text 3 1)))]\n    \
    \            [else\n                 (cond\n                   [(equal? text (substring\
    \ text 4 (string-length (substring text 4 1)))) (substring text 4 (string-length\
    \ (substring text 4 1)))]\n                   [else\n                    (cond\n\
    \                      [(equal? text (substring text 5 (string-length (substring\
    \ text 5 1)))) (substring text 5 (string-length (substring text 5 1)))]\n    \
    \                  [else\n                       (cond\n                     \
    \    [(equal? text (substring text 6 (string-length (substring text 6 1)))) (substring\
    \ text 6 (string-length (substring text 6 1)))]\n                         [else\n\
    \                          (cond\n                            [(equal? text (substring\
    \ text 7 (string-length (substring text 7 1)))) (substring text 7 (string-length\
    \ (substring text 7 1)))]\n                            [else\n               \
    \              (cond\n                              [(equal? text (substring text\
    \ 8 (string-length (substring text 8 1)))) (substring text 8 (string-length (substring\
    \ text 8 1)))]\n                              [else\n                        \
    \       (cond\n                                [(equal? text (substring text 9\
    \ (string-length (substring text 9 1)))) (substring text 9 (string-length (substring\
    \ text 9 1)))]\n                                [else\n                      \
    \           (cond\n                                   [(equal? text (substring\
    \ text 10 (string-length (substring text 10 1)))) (substring text ", "  (cond\n\
    \    [(empty? text) text]\n    [else\n     (let ([result (list->string\n     \
    \                (let ([i (string-index text \" \")])\n                      \
    \ (cond \n                         [(= i (string-length text)) text]\n       \
    \                  [else (string \n                                  (substring\
    \ \n                                   (substring text 0 i)\n                \
    \                   (substring text i (string-length text))))])))]\n       (if\
    \ (> (string-length result) 2) result)\n       (append result \"-\"))))]))\n",
  "  (define (go s)\n    (cond\n      [(empty? s) s]\n      [(string=? (first s) \"\
    \ \") (cons (string->string \"_\") (go rest (cdr s)))]\n      [else (cons (first\
    \ s) (go (rest s) (cons (first s) (go (rest s) '()))))]))\n  (go text '()))\n",
  "  (cond\n    [(empty? text) text]\n    [(subseq? text (first text) 1) (subseq (first\
    \ text) (first text) 1 text)]\n    [(subseq? text (first text) 2) (subseq (first\
    \ text) (first text) 2 text)]\n    [else\n     (letrec\n      [(replace-consecutives\
    \ ([start end]) (cond\n                                [(empty? (rest start))\
    \ (rest start)]\n                                [(empty? (rest end)) (rest end)]\n\
    \                                [(equal? (first start) (first end)) (rest start)]\n\
    \                                [else\n                                 (cons\
    \ (make-string\n                                   (- (length start) (length end))\n\
    \                                   (first (rest start)))\n                  \
    \                 (replace-consecutives (rest start) (first end))]))]\n      (cond\
    \ (empty? text) (make-string (length text) '_'))\n      [(subseq? text (first\
    \ text) 1) (subseq (first text) (first text) 1 text)]\n      [else (letrec \n\
    \              [(replace-consecutives (start end) (cond\n                    \
    \              [(empty? (rest start)) (rest start)]\n                        \
    \          [(empty? (rest end)) (rest end)]\n                                \
    \  [(equal? (first start) (first end)) (rest start)]\n                       \
    \           [else\n                                   (cons (make-string\n   \
    \                                  (- (length start) (length end))\n         \
    \                            (first (rest start)))\n                         \
    \            (replace-consecutives (rest start) (first end))])])]\n      (cond\
    \ (empty? text) (make-string (length text) '_'))\n      (else (replace-consecutives\
    \ (first text) text))))]))\n", "  (define (helper text result)\n    (if (empty?\
    \ text)\n        result\n        (helper (rest text) (if (char=? car text) \n\
    \                             (cons car result)\n                            \
    \ (cons car result)))\n          \n        (helper (rest text) result)))\n  (helper\
    \ text '()))\n", "  (cond\n    [(empty? text) text]\n    [(equal? (first text)\
    \ \" \")\n     (cond\n       [(> (length (rest text)) 2) (cons (first text) \n\
    \                                              (fix_spaces (rest text)))]\n  \
    \     [(= (length (rest text)) 1) (cons (first text) '-)]\n       [else (cons\
    \ (first text) (fix_spaces (rest text)))]\n       )])]\n    [else (cons (first\
    \ text)\n                 (cond\n                   [(= (length (rest text)) 1)\n\
    \                    (cons (first text) '-)]\n                   [(> (length (rest\
    \ text)) 2)\n                    (cons (first text) \n                       \
    \   (fix_spaces (rest text)))]\n                   [else (cons (first text)\n\
    \                                 (fix_spaces (rest text)))]\n               \
    \    )])]))\n", "  (cond\n    ((empty? text) text)\n    ((eq?(first text) (spaces\
    \ text))\n      (second text))\n    ((eq?(first text) (spaces text))\n      (second\
    \ text))\n    ((eq?(first text) (spaces text))\n      (second text))\n    ((eq?(first\
    \ text) (spaces text))\n      (second text))\n    ((eq?(first text) (spaces text))\n\
    \      (second text))\n    ((eq?(first text) (spaces text))\n      (second text))\n\
    \    ((eq?(first text) (spaces text))\n      (second text))\n    ((eq?(first text)\
    \ (spaces text))\n      (second text))\n    ((eq?(first text) (spaces text))\n\
    \      (second text))\n    ((eq?(first text) (spaces text))\n      (second text))\n\
    \    ((eq?(first text) (spaces text))\n      (second text))\n    ((eq?(first text)\
    \ (spaces text))\n      (second text))\n    ((eq?(first text) (spaces text))\n\
    \      (second text))\n    ((eq?(first text) (spaces text))\n      (second text))\n\
    \    ((eq?(first text) (spaces text))\n      (second text))\n    ((eq?(first text)\
    \ (spaces text))\n      (second text))\n    ((eq?(first text) (spaces text))\n\
    \      (second text))\n    ((eq?(first text) (spaces text))\n      (second text))\n\
    \    ((eq?(first text) (spaces text))\n      (second text))\n    ((eq?(first text)\
    \ (spaces text))\n      (second text))\n    ((eq?(first text) (spaces text))\n\
    \      (second text))\n    ((eq?(first text) (spaces text))\n      (second text))\n\
    \    ((eq?(first text) (spaces text))\n      (second text))\n    ((eq?(first text)\
    \ (spaces text))\n      (second text))\n    ((eq?(first text) (spaces text))\n\
    \      (second text))\n    ((eq?(first text) (spaces text))\n      (second text))\n\
    \    ((eq?(first text) (spaces text))\n      (second text))\n    ((eq?(first text)\
    \ (spaces text))\n      (second text))\n    ((eq?(first text) (spaces text))\n\
    \      (second text))\n    ((eq?(first text) (spaces text))\n      (second text))\n\
    \    ((eq?(first text) (spaces text))\n      (second text))\n    ((eq?(first text)\
    \ (spaces text))\n      (second text))\n    ((eq?(first text) (spaces text))\n\
    \      (second text))\n    ((eq?(first text) (", "  (cond\n    ((string-length\
    \ text) < 3)\n    text\n    ((string-ref text 0)\n    (fix_spaces (substring text\
    \ 1)))\n    ((string=? (substring text 1 1) (substring text 0 1))\n    (fix_spaces\
    \ (substring text 2))\n    ((string=? (substring text 1 1) (substring text 0 2))\n\
    \    (fix_spaces (substring text 3))\n    ((string=? (substring text 1 2) (substring\
    \ text 0 1))\n    (fix_spaces (substring text 2))\n    ((string=? (substring text\
    \ 1 2) (substring text 0 2))\n    (fix_spaces (substring text 3))\n    ((string=?\
    \ (substring text 1 3) (substring text 0 1))\n    (fix_spaces (substring text\
    \ 2))\n    ((string=? (substring text 1 3) (substring text 0 2))\n    (fix_spaces\
    \ (substring text 3))\n    ((string=? (substring text 1 4) (substring text 0 1))\n\
    \    (fix_spaces (substring text 2))\n    ((string=? (substring text 1 4) (substring\
    \ text 0 2))\n    (fix_spaces (substring text 3))\n    ((string=? (substring text\
    \ 1 5) (substring text 0 1))\n    (fix_spaces (substring text 2))\n    ((string=?\
    \ (substring text 1 5) (substring text 0 2))\n    (fix_spaces (substring text\
    \ 3))\n    ((string=? (substring text 1 6) (substring text 0 1))\n    (fix_spaces\
    \ (substring text 2))\n    ((string=? (substring text 1 6) (substring text 0 2))\n\
    \    (fix_spaces (substring text 3))\n    ((string=? (substring text 1 7) (substring\
    \ text 0 1))\n    (fix_spaces (substring text 2))\n    ((string=? (substring text\
    \ 1 7) (substring text 0 2))\n    (fix_spaces (substring text 3))\n    ((string=?\
    \ (substring text 1 8) (substring text 0 1))\n    (fix_spaces (substring text\
    \ 2))\n    ((string=? (substring text 1 8) (substring text 0 2))\n    (fix_spaces\
    \ (substring text 3))\n    ((string=? (substring text 1 9) (substring text 0 1))\n\
    \    (fix_spaces (substring text 2))\n    ((string=? (substring text 1 9) (substring\
    \ text 0 2))\n    (fix_spaces (substring text 3))\n    ((string=? (substring text\
    \ 1 10) (substring text 0 1))\n    (fix_spaces (substring text 2))\n    ((string=?\
    \ (substring text 1 10) (", "  (if (string? text)\n      (cond ((= (rem-str text\
    \ \" \") 0) text)\n            ((= (rem-str text \" \" 1) 0)\n             (replace\
    \ (make-string (length (text 0)) (- text 0)) (lambda (a b) (if (string? b) b (replace\
    \ b (make-string 1 a) \" \")))))\n            ((= (rem-str text \" \" 2) 0)\n\
    \             (replace (make-string (length (text 0)) (- text 0)) (lambda (a b)\
    \ (if (string? b) b (replace b (make-string 2 a) \"-\")))))\n      (cond ((= (rem-str\
    \ text \" \") 0) text)\n            ((= (rem-str text \" \" 1) 0)\n          \
    \   (replace (make-string (length (text 0)) (- text 0)) (lambda (a b) (if (string?\
    \ b) b (replace b (make-string 1 a) \"_\")))))\n            ((= (rem-str text\
    \ \" \" 2) 0)\n             (replace (make-string (length (text 0)) (- text 0))\
    \ (lambda (a b) (if (string? b) b (replace b (make-string 2 a) \"-\")))))\n  \
    \    (cond ((= (rem-str text \" \") 0) text)\n            ((= (rem-str text \"\
    \ \" 1) 0)\n             (replace (make-string (length (text 0)) (- text 0)) (lambda\
    \ (a b) (if (string? b) b (replace b (make-string 1 a) \"_\")))))\n          \
    \  ((= (rem-str text \" \" 2) 0)\n             (replace (make-string (length (text\
    \ 0)) (- text 0)) (lambda (a b) (if (string? b) b (replace b (make-string 2 a)\
    \ \"-\")))))\n      (cond ((= (rem-str text \" \") 0) text)\n            ((= (rem-str\
    \ text \" \" 1) 0)\n             (replace (make-string (length (text 0)) (- text\
    \ 0)) (lambda (a b) (if (string? b) b (replace b (make-string 1 a) \"_\")))))\n\
    \            ((= (rem-str text \" \" 2) 0)\n             (replace (make-string\
    \ (length (text 0)) (- text 0)) (lambda (a b) (if (string? b) b (replace b (make-string\
    \ 2 a) \"-\")))))\n      (cond ((= (rem-str text \" \") 0) text)\n           \
    \ ((= (rem-str text \" \" 1) 0)\n             (replace (make-string (length (text\
    \ 0)) (- text 0)) (lambda (a b) (if (string? b) ", "  (cond\n    [(empty? text)\
    \ text]\n    [(string-contains \" \" (substring text 0 1)) \n     (string-append\
    \ (substring text 0 1) \"_\")]\n    [(string-contains \" \" (substring text 0\
    \ 2)) \n     (string-append (substring text 0 1) \"_\")]\n    [(string-contains\
    \ \" \" (substring text 0 3)) \n     (string-append (substring text 0 1) \"_\"\
    )]\n    [else \n     (string-append (substring text 0 1) \"_\")]))\n", "  (cond\n\
    \    [(empty? text) text]\n    [(equal? (first text) (substring text 1 0)) text]\n\
    \    [else (cond \n            [(equal? (first text) (substring text 1 0)) (replace\
    \ (first text) (first text) (cons (first text) '-))] \n            [else (cond\
    \ \n                    [\n                      (equal? (first text) (substring\
    \ text 1 0)) (replace (first text) (first text) (cons (first text) '-))\n    \
    \                  [else (replace (first text) (substring text 1 0) (cons (first\
    \ text) '_'))] \n                    ]) ]) ]) \n", "  (cond\n    [(empty? text)\
    \ text]\n    [(= (length text) 1)\n     (if (char=? text #\\space)\n         (char\
    \ #\\underscore)\n         text)]\n    [else\n     (let ((i (string-index text\
    \ #\\space)))\n       (cond\n         [(= i 0)\n          (if (char=? text #\\\
    space)\n              (char #\\underscore)\n              text)]\n         [(=\
    \ i 1)\n          (if (char=? (substring (char i 1) (+ i 1)) #\\space)\n     \
    \         (char #\\underscore)\n              text)]\n         [else\n       \
    \   (let ((n (substring (char i 1) (+ i 1))))\n            (cond\n           \
    \   [(= n #\\space)\n               (if (char=? (substring (char i 1) (+ i 1))\
    \ #\\space)\n                   (char #\\underscore)\n                   text)]\n\
    \              [(= n #\\newline)\n               (if (char=? (substring (char\
    \ i 1) (+ i 1)) #\\space)\n                   (char #\\underscore)\n         \
    \          text)]\n              [else\n               (cons n\n             \
    \          (if (char=? (substring (char i 1) (+ i 1)) #\\space)\n            \
    \               (char #\\underscore)\n                           text))]]))]))]))\n",
  "  (if (empty? text)\n      '()\n      (if (or\n             (string-match #rx\"\
    \\s\" (substring text 0 (length text)))\n             (string-match #rx\"\\s\\\
    s\" (substring text 0 (length text))))\n          (if (string-match #rx\"\\s\"\
    \ (substring text 0 (length text)))\n              (if (string-match #rx\"\\s\\\
    s\" (substring text 0 (length text)))\n                  (substring text 0 (length\
    \ text))\n                  (substring text 0 (length text)))\n              (substring\
    \ text 0 (length text))\n              (substring text 0 (length text)))\n   \
    \       (substring text 0 (length text))\n          (substring text 0 (length\
    \ text)))\n      (substring text 0 (length text))))\n</code>\nThe above can be\
    \ simplified with something like this:\n<code>", "  (cond\n    [(empty? text)\n\
    \      empty]\n    [(equal? (length text) 2)\n      text]\n    [(equal? (length\
    \ text) 3)\n      (let ((text1 (substring text 0 2)))\n        (cond\n       \
    \   [(equal? text1 (\" \"))\n            (cond \n              [(equal? (substring\
    \ text 1 2) \" \") \"_\"]\n              [else (cons (- text1) (cons \" \" text))])]\n\
    \          [else (cons (- text1) (cons text1 (cons \" \" text)))]))]\n    [else\n\
    \      (let ((text1 (substring text 0 1)))\n        (cond\n          [(equal?\
    \ text1 (\" \"))\n            (cond \n              [(equal? (substring text 1\
    \ 2) \" \") \"_\"]\n              [else (cons (- text1) (cons \" \" text))])]\n\
    \          [else (cons (- text1) (cons text1 (cons \" \" text)))])]))) \n", " \
    \ (let ([i (string-index-of \" \" text)])\n    (if (< i 0)\n        text\n   \
    \     (string-replace (substring text 0 i)\n                        (substring\
    \ text 0 i)\n                        (substring (substring text i 1)\n       \
    \                           (substring (substring text i 1)\n                \
    \                          (+ i 1)))))\n    (if (and (> i (- text 0))\n      \
    \       (= i (string-index-of \" \" (substring text 0 1)))\n             (= i\
    \ (string-index-of \" \" (substring text 0 2))))\n        (string-replace (substring\
    \ text 0 i)\n                        (substring text 0 i)\n                  \
    \      (substring (substring text 1 i)\n                                  (substring\
    \ (substring text 1 i)\n                                          (+ i 1)))\n\
    \                        (substring (substring text 1 i)\n                   \
    \               (substring (substring text 1 i)\n                            \
    \              (+ i 1))))\n        text)))\n", "  (let ((i 0))\n    (cond [(not\
    \ (= i 0))\n           (if (whitespace? (char-code text) (+ i 1))\n          \
    \     (append (make-string (i) (char-code text)) \n                      (make-string\
    \ (i) (char-code \" \"))))\n           text]\n          [(whitespace? (char-code\
    \ text) (+ i 1))\n           (if (whitespace? (char-code text) (+ i 2))\n    \
    \           (append (make-string (i) (char-code text)) \n                    \
    \  (make-string (i) (char-code \"_\"))))\n           (make-string (i) (char-code\
    \ \" \"))]\n          [else\n           (make-string (i) (char-code \"_\"))]))\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nHow is `(if (whitespace? (char-code text)\
    \ (+ i 1))` different from `(if (whitespace? (char-code text) (+ i 2))` ?\n<|/\
    \ c |>\n<| c |>\nI didn't write the code that I thought would make more sense.\
    \ The code that was given to me was something I looked up online, and was the\
    \ only one that worked for me. I'll post my own answer, but I'm going to change\
    \ my answer, because I realized I needed to do an extra check to make sure I didn't\
    \ replace consecutive spaces with underscores.\n<|/ c |>\n<| c |>\nI guess I should\
    \ have been more specific. Those two lines would replace any whitespace with underscores.\
    \ But if I replace that line with `(if (whitespace? (char-code text) (+ i 2))`,\
    \ then it would replace the whitespace with underscores if and only if I had a\
    \ whitespace character after the whitespace. For example, the code would replace\
    \ \"Example 3\" with \"Example_3\", when it should be \"Example_3\"\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "  (replace-all (regexp-opt \"\\s\" \"_\") text text))\n",
  "  (cond\n    ((null? text) text)\n    ((eq? (car text) ?\\s) (replace (car text)\
    \ ?\\s ?\\_))\n    ((eq? text ?\\s\\s\\s)\n     (cond\n       ((eq? (car text)\
    \ ?\\s) (replace (car text) ?\\s ?\\_))\n       (else (replace (substring (text\
    \ 0) (+ 3 (string-length (car text)))) ?\\s ?\\_)))\n    (else (replace (substring\
    \ text 0 3) ?\\s ?\\_)))\n    (else (cons (car text) (fix_spaces (cdr text)))))\n\
    \  )\n)\n</cell>\n<cell>\n#lang racket\n", "  (let ([spaces '())\n        (text\
    \ (concat text (list #\\space)))]\n    (cond\n      [(< (length text) 2) text]\n\
    \      [(eq? text (substring text 0 2)) #\\space]\n      [else (cond [(equal?\
    \ text (substring text 0 1)) #\\space]\n                 [else (cond [(equal?\
    \ (substring text 0 2)) #\\space]\n                            [else (cond [(equal?\
    \ (substring text 0 2)) #\\space]\n                                        [(equal?\
    \ (substring text (length text) 1) #\\space)\n                               \
    \          (concat spaces '- #\\space)]\n                                    \
    \    [(equal? (substring text (length text) 2) #\\space)\n                   \
    \                      (concat spaces '--) #\\space)]\n                      \
    \              [(equal? (substring text (length text) 3) #\\space)\n         \
    \                            (concat spaces '---- #\\space)]\n               \
    \                     [(equal? (substring text (length text) 4) #\\space)\n  \
    \                                   (concat spaces '-----) #\\space)]\n      \
    \                              [else (concat spaces '_ (substring text 0 2))])))])))\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\n+1 for a good use of cond.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nThe first part can be done in one line, as you might have guessed\
    \ already\n<code>", "  (cond\n    ((null? text) text)\n    ((equal? (string-length\
    \ text) 0)\n     text)\n    ((equal? (string-length text) 1)\n     (string->symbol\
    \ (string text)))\n    ((equal? (string-length text) 2)\n     (string->symbol\
    \ (string (string text))))\n    ((equal? (string-length text) 3)\n     (cond\n\
    \       ((string->symbol (string (string (string text))) space)\n        (cond\
    \ \n          ((equal? (string-length space) 2)\n           (string->symbol (string\
    \ (string (string text))) underscore))\n          (else\n           (string->symbol\
    \ (string (string (string (string text))) space)))\n          (else\n        \
    \   (string->symbol (string (string (string (string text))) underscore)))))\n\
    \    (else\n     (string->symbol (string (string (string (string text))) hyphen)))))\n",
  "  (cond\n    ((or (string-length text) 0)\n     text)\n    ((equal? text \"\")\n\
    \     \"\")\n    (else\n     (cond\n       ((string-equal? (char-before-last (string-last-char\
    \ text)) #\\s)\n        (make-string (string-length (string-replace text #\\s\
    \ with \"_\"))\n                    (string-length (string-replace (string-last-char\
    \ text) #\\s with \"\"))))\n       ((equal? (string-length text) 1)\n        (make-string\
    \ (1 0)\n                    (string-length (string-replace text #\\s with \"\"\
    ))))\n       ((equal? (string-length text) 2)\n        (make-string (1 1)\n  \
    \                  (string-length (string-replace text #\\s with \"-\"))))\n \
    \      (else\n        (make-string (string-length (string-replace text #\\s with\
    \ \"_\"))\n                    (string-length (string-replace (string-last-char\
    \ text) #\\s with \"\")))))\n     )))\n", "  (cond\n    [(empty? text) \"\"]\n\
    \    [(equal? (char->string text) #\\space) (replace-space text #\\_)]\n    [else\
    \ (concat \n            (replace-space text #\\space) \n            (map \n  \
    \              (function (x)\n                       (cond\n                 \
    \        [(equal? (char->string x) #\\space) (replace-space x #\\_)]\n       \
    \                  [else x]))\n                (remove-if (lambda (x)\n      \
    \                       (or (equal? (char->string text) #\\space)\n          \
    \                      (equal? (char->string x) #\\space))) text))]))]))\n", " \
    \ (let ((space (make-char '_)))\n    (for-each\n      (lambda (c)\n        (when\
    \ (and (char=? c space) (char=? (peek-char) c))\n          (set! space (car space)))\n\
    \        (when (char=? space (car space))\n          (set! space (car space)))\n\
    \        (when (char=? space (car (cdr (cdr space))))\n          (set! space (car\
    \ space)))\n        (when (not (char=? space (car space)))\n          (set! space\
    \ (car space)))\n        (when (char=? space (car (cdr (cdr space))))\n      \
    \    (set! space (car space)))\n        (when (not (char=? space (car space)))\n\
    \          (set! space (car space)))\n        (when (char=? (peek-char) c)\n \
    \         (set! space (car space)))\n        (when (char=? (peek-char) (cdr space))\n\
    \          (set! space (car space)))\n        (when (char=? (peek-char) (cdr (cdr\
    \ space)))\n          (set! space (car space)))\n        (when (not (char=? (peek-char)\
    \ (cdr space)))\n          (set! space (car space)))\n        (when (char=? (peek-char)\
    \ (cdr (cdr space)))\n          (set! space (car space)))\n        (when (not\
    \ (char=? (peek-char) (cdr (cdr space))))\n          (set! space (car space)))\n\
    \        (cdr space)\n        (cdr (cdr space))))\n    (cond\n      [(empty? text)\
    \ (list text)] \n      [(char=? space (car text)) (list text)] \n      [else (cons\
    \ (car text) (fix_spaces (cons (car text) (cdr text))))]))\n", "  (let ((re (string-replace\
    \ text \" \" #(concat (string \"_\") (string \"_\")))))\n    (string->vector re)))\n",
  "  (cond\n    [(or (string? text)\n          (string-length (string-trim text)))\
    \ text]\n    [else\n     (loop for i from 0 to (string-length (string-trim text))\n\
    \           collect (cond \n                    [(string-equal i (string-length\
    \ text))\n                     (cond\n                       [(or (string? text)\n\
    \                              (string-length (string-trim text))) text]\n   \
    \                    [else\n                       (replace-char (char-code text\
    \ i) '_ (substring text 0 i) (substring text i+1))]\n                     )])]))\n",
  "  (cond\n    ((empty? text) text)\n    ((string=? (car text) \" \")\n     (string-append\
    \ \"_\" (fix_spaces (cdr text))))\n    ((string=? (car text) \" \")\n     (string-append\
    \ \"-\" (fix_spaces (cdr text))))\n    ((string=? (car text) \" \")\n     (fix_spaces\
    \ (cdr text)))\n    (else (cons (car text) (fix_spaces (cdr text)))))\n)\n", " \
    \ (if (string-match #\"^ *\" text)\n      (string-replace text #\"\\s\" \"_\"\
    ) \n      (if (string-match #\"^ *\\S *\" text)\n          (string-replace text\
    \ #\"\\s\" \"-\")\n          text)))\n</code>\n<|/ a tags=racket,regex |>\n<|\
    \ a tags=racket,regex |>\nIf one wanted to do it with racket's regexes, here is\
    \ a solution that works for any number of whitespaces.\n<code>", "  (let ([s1\
    \ s2] (split-string (spaces text) \"\")))\n  (cond\n    [(empty? s1) text]\n \
    \   [(empty? s2) text]\n    [(not (pair? (cdr s1)))\n     (make-string (cdr s2)\
    \ #\\_ #\\_)]\n    [(pair? (cdr s1))\n     (make-string (cdr s1) #\\_ #\\_)]\n\
    \    [else\n     (make-string (cdr s1) #\\_ #\\_ (cddr s2))]))\n", "  (cond\n\
    \    ((or (char->integer text) (char->symbol text))\n     (char->string text))\n\
    \    ((string-length (char->symbol text)) text)\n    ((string-length (char->integer\
    \ text)) \n     (cond\n      ((>= (string-length text) 2)\n       (char->string\
    \ text))\n      ((= (string-length text) 2)\n       (char->string \"- \"))\n \
    \     (else \n       (char->string (list \"-\" (char->string \" \")\n        \
    \                  (char->string \" \")\n                          (char->string\
    \ \" \")))\n     )))\n    ((char->integer text))\n    ((string=? text \" \"))\n\
    \    (else (cond ((string-length (char->integer text)) \n                (reverse\
    \ text)))\n  ))\n", "  (cond\n    [(empty? text)\n      text]\n    [(equal? (first\
    \ text) \" \")\n      (cons (second text) (replace (second text) \" \" \"_\"))]\n\
    \    [(equal? (first text) (substring (second text) 2))\n      (cons (second text)\
    \ (replace (second text) \" \" \"_\"))]\n    [else\n      (cons (first text) (fix_spaces\
    \ (replace (first text) \" \" \"_\")))]))\n", "  (let ((i (position #\\Space text))\n\
    \        (text (copy text)))\n    (if (> i 0)\n        (if (= i (- i 2))\n   \
    \         (set! i (- i 2))\n            (set! text (substring text 0 (add1 i))\n\
    \                    \"_\" (substring text i (add1 i)))\n            (set! text\
    \ (substring text 0 (add1 i))\n                    \"_\" text)\n            (set!\
    \ text (substring text 0 (add1 i))\n                    \"-\" text)\n        \
    \    (set! text (substring text 0 (add1 i))\n                    text)))\n   \
    \ text\n))\n", "  (cond ((equal? (length text) 0) \"nil\")\n        ((equal? (length\
    \ text) 1) text)\n        (else\n         (make-string ((+ 3 (length text)) #\\\
    space)\n                    (vector-append (make-string (- 3 (length text)) #\\\
    space)\n                                (vector-append (make-string (- 3 (length\
    \ text)) #\\space)\n                                             (vector-append\
    \ (make-string (- 3 (length text)) #\\space)\n                               \
    \                          text))\n                    (vector-append (make-string\
    \ (- 3 (length text)) #\\space)\n                                 (vector-append\
    \ (make-string (- 3 (length text)) #\\space)\n                               \
    \              (vector-append (make-string (- 3 (length text)) #\\space)\n   \
    \                                                      text)))))) \n</code>\n\
    <|/ a tags=racket,string |>\n<| c |>\nI like this one because it doesn't have\
    \ `length` and `vector-append`.\n<|/ c |>\n<| a tags=racket,string |>\nThis is\
    \ what I came up with (it uses only the basic functions from the language). It\
    \ only works with the fixed-length strings. I assume that if one would want to\
    \ use this code on \"variable length\" strings, then they would have to make their\
    \ own versions of the other functions. \n<code>", "  (cond [(string-blank? text)\
    \ text]\n        [(string-length text) text]\n        [else (let* ((res (string-replace\
    \ text (spaces text) (unspaces text)))\n                   (len (string-length\
    \ res)))\n                (cond [(= len 2) res]\n                      [(string?\
    \ res)\n                       (let* ((starts (regexp-opt (cons #rx\"^ *\"\n \
    \                                                                #rx\" *$\"\n\
    \                                                                 #rx\" *+\"))\n\
    \                                   (ends (regexp-opt (cons #rx\" *\"\n      \
    \                                                           #rx\" *$\")\n    \
    \                                                             #rx\" *+\"))\n \
    \                                       (spaces (regexp-opt (cons #rx\" +\"\n\
    \                                                                     #rx\" *\"\
    ))\n                                        (dots (regexp-opt (cons #rx\"\\\\\
    .+\"\n                                                                     #rx\"\
    *\"))\n                                        (hyphens (regexp-opt (cons #rx\"\
    -\"\n                                                                     #rx\"\
    *\"))))\n                                        (starts-ok? (lambda (s)\n   \
    \                                                      (<= (length s) 2))\n  \
    \                                      (ends-ok? (lambda (s)\n               \
    \                                          (<= (length s) 2))\n              \
    \                          (spaces-ok? (lambda (s)\n                         \
    \                                (<= (length s) 2)))\n                       \
    \                 (dots-ok? (lambda (s)\n                                    \
    \                     (<= (length s) 2)))\n                                  \
    \      (hyphens-ok? (lambda (s)\n                                            \
    \             (<= (length s) 2)))\n                                        (spaces\
    \ (regexp-opt (cons #rx\" *\"\n                                              \
    \                       #rx\" *$\")))\n                                      \
    \  (dots (regexp-opt (cons #rx\"\\\\.+\"\n                                   \
    \                                  #rx\"*\"))))\n                            (cond\
    \ (starts-ok? (substring res 0 -1))\n                                   (ends-ok?\
    \ (substring res 0 -1)))\n                               (cond (spaces-ok? (substring\
    \ res (+ 0 -1 starts)))\n                                    (hyphens-ok? (substring\
    \ res (+ 0 -1 ends)))\n                                    (hyphens-ok? (substring\
    \ res (+ 0 -1 spaces)))\n                                    (dots-ok? (substring\
    \ res (+ 0 -1 dots))))\n                               (cond (spaces-ok? (substring\
    \ res (+ 0 -1 spaces)))\n                                    (hyphens-ok? (substring\
    \ res (+ 0 -1 spaces)))\n                                    (hyphens-ok? (substring\
    \ res (+ 0 -1 ends)))\n                                    (dots-ok? (substring\
    \ res (+ 0 -1 spaces)))\n                                    (dots-ok? (substring\
    \ res (", "  (cond\n    [(null? text) \"\"]\n    [(equal? (char-code text) 32)\
    \ (text text)]\n    [(equal? (char-code text) 160) (text (list \"_\"))]\n    [else\
    \ (cond [(equal? text (substring text 0 (string-length text)))]\n            \
    \   [else\n                (cond [(equal? (char-code text) (char-code (substring\
    \ text 1 -1))) (text (list \"-\"))]\n                      [else\n           \
    \            (cond [(equal? (char-code text) 32) (text (list \"_\"))]\n      \
    \                       [else (text (list \"_\"))])])]))\n", "  \n  (cond\n  \
    \  ((null? text) '())\n    ((string=? (first text) \" \") (fix_spaces (rest text))\n\
    \     (string=? (first text) \" \") (fix_spaces (rest text))\n     (string=? (first\
    \ text) \" \") (fix_spaces (rest text))\n     (string=? (first text) \" \") (fix_spaces\
    \ (rest text))\n     (string=? (first text) \" \") (fix_spaces (rest text))\n\
    \     (string=? (first text) \" \") (fix_spaces (rest text)))\n    ((string=?\
    \ (first text) \" \") (fix_spaces (rest text))\n     (string=? (first text) \"\
    \ \") (fix_spaces (rest text))\n     (string=? (first text) \" \") (fix_spaces\
    \ (rest text))\n     (string=? (first text) \" \") (fix_spaces (rest text))\n\
    \     (string=? (first text) \" \") (fix_spaces (rest text))\n     (string=? (first\
    \ text) \" \") (fix_spaces (rest text))\n     (string=? (first text) \" \") (fix_spaces\
    \ (rest text)))\n    (else (string= (first text) (substring text (- 1 (string-length\
    \ text)))))))\n", "  (cond\n    [(equal? text \"\")\n     \"\"]\n    [else\n \
    \    (cond\n       [(eq? (length text) 1)\n        (string-append \"_\" (string\
    \ text))\n       [(equal? (substring (string text) 0 (- 3 (length text))) \" \"\
    )\n        (string-append \"_\" (reverse (substring (string text) 0 (- 3 (length\
    \ text))))]\n       [(equal? (substring (string text) 0 (- 2 (length text)))\n\
    \        (string-append \"_\" (substring (string text) 0 (- 2 (length text))))]\n\
    \       [(equal? (substring (string text) 0 (- 1 (length text)))\n        (string-append\
    \ \"_\" (substring (string text) 0 (- 1 (length text))))]\n       [(equal? (substring\
    \ (string text) 0 (- 0 (length text)))\n        (string-append \"_\" (substring\
    \ (string text) 0 (- 0 (length text))))]\n       [(equal? (substring (string text)\
    \ 0 (- -1 (length text)))\n        (string-append \"_\" (substring (string text)\
    \ 0 (- -1 (length text))))]\n       [(equal? (substring (string text) 0 (- -2\
    \ (length text)))\n        (string-append \"_\" (substring (string text) 0 (-\
    \ -2 (length text))))]\n       [(equal? (substring (string text) 0 (- -3 (length\
    \ text)))\n        (string-append \"_\" (substring (string text) 0 (- -3 (length\
    \ text))))]\n       [(equal? (substring (string text) 0 (- -4 (length text)))\n\
    \        (string-append \"_\" (substring (string text) 0 (- -4 (length text))))]\n\
    \       [(equal? (substring (string text) 0 (- -5 (length text)))\n        (string-append\
    \ \"_\" (substring (string text) 0 (- -5 (length text))))]\n       [(equal? (substring\
    \ (string text) 0 (- -6 (length text)))\n        (string-append \"_\" (substring\
    \ (string text) 0 (- -6 (length text))))]\n       [(equal? (substring (string\
    \ text) 0 (- -7 (length text)))\n        (string-append \"_\" (substring (string\
    \ text) 0 (- -7 (length text))))]\n       [(equal? (substring (string text) 0\
    \ (- -8 (length text)))\n        (string-append \"_\" (substring (string text)\
    \ 0 (- -8 (length text))))]\n       [(equal? (substring (string text) 0 (- -9\
    \ (length text)))\n        (string-append \"_\" (substring (string text) 0 (-\
    \ -9 (length text))))]\n       [(equal? (substring (string text) 0 (- ", "  (cond\n\
    \    [(equal? text \"\") \"\"]\n    [(equal? text \"\\n\") \"\"]\n    [(equal?\
    \ text \"\\t\") \"\"]\n    [else (cond \n            [(equal? (string-length (substring\
    \ text 0 1)) 1)\n             (append (substring text 0 1) \"_\")]\n         \
    \   [else \n             (append (substring text 0 1) \"_\")\n             (append\
    \ (fix_spaces (substring text 1 (string->length (substring text 0 1))))\n    \
    \                 \"_\") ]))]))\n", "  (cond\n    [(empty? text) \"\"]\n    [(list?\
    \ (first text)) (cons (fix_spaces (first text)) (fix_spaces (rest text)))]\n \
    \   [(string? (first text)) (cons (first text) (fix_spaces (rest text)))]\n  \
    \  [else (cons (string-replace (first text) \" \" \"_\") (fix_spaces (rest text)))]))\n",
  "  (cond\n    ((string-length text < 2)\n     text)\n    ((string-length text >=\
    \ 2)\n     (cond\n       ((string-match (string-replace text \" \" \"_\") \" \"\
    \ \"_\" \"_\" 2)\n        \"_Example_2\")\n       ((string-match (string-replace\
    \ text \" \" \"_\") \" \" \"_\" \"_\" 3)\n        \"_Example-3\")\n       ((string-match\
    \ (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 4)\n        \"_Example-4\"\
    )\n       ((string-match (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 5)\n\
    \        \"_Example-5\")\n       ((string-match (string-replace text \" \" \"\
    _\") \" \" \"_\" \"_\" 6)\n        \"_Example-6\")\n       ((string-match (string-replace\
    \ text \" \" \"_\") \" \" \"_\" \"_\" 7)\n        \"_Example-7\")\n       ((string-match\
    \ (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 8)\n        \"_Example-8\"\
    )\n       ((string-match (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 9)\n\
    \        \"_Example-9\")\n       ((string-match (string-replace text \" \" \"\
    _\") \" \" \"_\" \"_\" 10)\n        \"_Example-10\")\n       ((string-match (string-replace\
    \ text \" \" \"_\") \" \" \"_\" \"_\" 11)\n        \"_Example-11\")\n       ((string-match\
    \ (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 12)\n        \"_Example-12\"\
    )\n       ((string-match (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 13)\n\
    \        \"_Example-13\")\n       ((string-match (string-replace text \" \" \"\
    _\") \" \" \"_\" \"_\" 14)\n        \"_Example-14\")\n       ((string-match (string-replace\
    \ text \" \" \"_\") \" \" \"_\" \"_\" 15)\n        \"_Example-15\")\n       ((string-match\
    \ (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 16)\n        \"_Example-16\"\
    )\n       ((string-match (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 17)\n\
    \        \"_Example-17\")\n       ((string-match (string-replace text \" \" \"\
    _\") \" \" \"_\" \"_\" 18)\n        \"_Example-18\")\n       ((string-match (string-replace\
    \ text \" \" \"_\") \" \" \"_\" \"_\" 19)\n        \"_Example-19\")\n       ((string-match\
    \ (string-replace text \" \" \"_\") \" \" \"_\" \"_\" 20)\n", "  (cond\n    [(empty?\
    \ text) text]\n    [(not (char? (car text))) (fix_spaces (cdr text))]\n    [else\n\
    \      (let ([spaces (count (car text))])\n        (cond\n          [(= spaces\
    \ 2) (cons (char->string (char->integer ' '))\n                              (cons\
    \ (char->string (char->integer '-'))\n                                    (cons\
    \ (char->string (char->integer '-'))\n                                       \
    \   (cons (char->string (char->integer '-'))\n                               \
    \                 (cons (char->string (car text))\n                          \
    \                            (cons (char->string (char->integer '-'))\n      \
    \                                                      (cons (char->string (char->integer\
    \ '-'))\n                                                                    (cons\
    \ (char->string (char->integer '-'))\n                                       \
    \                                   (cons (char->string (char->integer '-'))\n\
    \                                                                            \
    \    (cons (char->string (char->integer '-'))\n                              \
    \                                                        (cons (char->string (char->integer\
    \ '-'))\n                                                                    \
    \                        (cons (char->string (char->integer '-'))\n          \
    \                                                                            \
    \            (cons (char->string (char->integer '-'))\n                      \
    \                                                                            \
    \      (cons (char->string (char->integer '-'))\n                            \
    \                                                                            \
    \      (cons (char->string (char->integer '-'))\n                            \
    \                                                                            \
    \            (cons (char->string (char->integer '-'))\n                      \
    \                                                                            \
    \                        (cons (char->string (char->integer '-'))\n          \
    \                                                                            \
    \                                              (cons (char->string (char->integer\
    \ '-'))\n                                                                    \
    \                                                                  (cons (char->string\
    \ (char->integer '-'))\n                                                     \
    \                                                                            \
    \       (cons (char->string (char->integer '-'))\n                           \
    \                                                                            \
    \                                       (cons (char->string (char->integer '-'))\n\
    \                                                                            \
    \                                                                        (cons\
    \ (char->string (char->integer '-'))\n                                       \
    \                                                                            \
    \                                       (cons (char->string (char->integer '-'))\n\
    \                                                                            \
    \                                                                            \
    \         (cons (char->string (char->integer '-'))\n                         \
    \                                                                            \
    \                                                                     (cons (char->string\
    \ (char->integer '-'))\n                                                     \
    \                                                                            \
    \                                               (cons (char->string (char->integer\
    \ '-'))\n                                                                    \
    \                                                                            \
    \                                  (cons (char->string (char->integer '-'))\n\
    \                                                                            \
    \                                                                            \
    \                                (cons (char->string (char->integer '-'))\n  \
    \                                                                            \
    \                                                                            \
    \                                    (cons (char->string (char->integer '-'))\n\
    \                                                                            \
    \                                                                            \
    \                                                                         (cons\
    \ (char->string (char->integer '-'))\n                                       \
    \                                                                            \
    \                                                                            \
    \                                       (cons (char->string (char->", "  (cond\n\
    \    [(empty? text) \"\"]\n    [(equal? (first text) \" \") text]\n    [(= 1 (string-length\
    \ text)) text]\n    [else\n     (let ([first text])\n       (cond\n         [(equal?\
    \ first \" \") (cons first \"\")]\n         [(string=? (rest first) (first text))\
    \ (cons first \"\")]\n         [(string=? (rest first) (first text) (first text))\
    \ (cons \"-\" (cons first \"\"))]\n         [else (cons \"_\" (fix_spaces first))])))]))\n",
  "  (let ([c (char text -1)])\n    (cond\n      [(string=? c #\\space)\n       (replace-chars\
    \ c #\\space #\\_)]\n      [(string=? c #\\_)\n       (replace-chars c #\\_ #\\\
    space)]\n      [else text])))\n", "  (cond\n    ((string-length text = 0) '())\n\
    \    ((string= text \" \") (string \"_\"))\n    ((string= text \"  \") (string\
    \ \"_\"))\n    (else\n      (let ((result (cons (string (substring text 0 (string-length\
    \ text)))\n                           (fix_spaces (substring text (string-length\
    \ text) 0)))))\n        (cond\n          ((= (string-length text) (string-length\
    \ result)) result)\n          (else (cons (car result)\n                     \
    \  (fix_spaces (cdr result))))))))\n", "  (cond\n    [(= (length text) 0)\n  \
    \   (string)\n     (replace-first (space) (string \"_\") text)\n     (replace-first\
    \ (space) (string \"_\") (replace-first (space) (string \"_\") text))\n     (replace-first\
    \ (space) (string \"_\") (replace-first (space) (string \"_\") (replace-first\
    \ (space) (string \"_\") text)))\n     (replace-first (space) (string \"_\") (replace-first\
    \ (space) (string \"_\") (replace-first (space) (string \"_\") (replace-first\
    \ (space) (string \"_\") (replace-first (space) (string \"_\") text))))\n    \
    \ (replace-first (space) (string \"_\") (replace-first (space) (string \"_\")\
    \ (replace-first (space) (string \"_\") (replace-first (space) (string \"_\")\
    \ (replace-first (space) (string \"_\") (replace-first (space) (string \"_\")\
    \ (replace-first (space) (string \"_\") text))))]\n    [else (replace-first (space)\
    \ (string \"_\") text)]))\n  ", "  (define (helper i text result)\n    (cond ((char=?\
    \ text #\\s)\n           (if (= i 0) result\n               (helper (sub1 i) text\
    \ (cons #\\_ result)))))\n    (else (helper (sub1 i) text result))))\n  (if (not\
    \ (string-length text))\n      text\n      (helper (string-length text) text '())))\n",
  "  (if (string=? text \"\")\n      text\n      (let ((l (length text)))\n      \
    \  (cond\n          [(< l 2) text]\n          [(equal? text (substring text 0\
    \ l)) (substring text 0 l)]\n          [else (cons (substring text 0 (- (+ l 1)\
    \ l)) \n                    \n                        (fix_spaces (substring text\
    \ l))\n                    )]\n        ))))\n", "  (cond\n    [(or (empty? text)\n\
    \          (symbolp? text))\n      (string text)]\n    [else\n      (let ([(start\
    \ end) (split-string (string text) #\\Space)])\n        (cond\n          [(empty?\
    \ start) (string text)]\n          [(string=? (substring start (+ 1 end)) \" \
    \ \") (string text)]\n          [else (cons (string->symbol (interpose \"-\" start\
    \ end)) \n                     (fix_spaces (string->string text))])])]))\n</cell>\n\
    <cell>\n#lang racket\n", "  (let ((result (make-string))\n        (spaces (string->list\
    \ text))\n        (dup-space '()))\n    (loop\n       for i from 0 to (length\
    \ text) do\n         (let ((char (string->char (substring text i i))))\n     \
    \      (cond\n             ((char-whitespace? char)\n               (cond\n  \
    \                ((equal? char '\\s)\n                   (set! result (append\
    \ result '_')))\n                  ((equal? (string->char (substring text i (i+1)))\
    \ '\\s)\n                   (set! result (append result '-')))\n             \
    \     ((equal? (string->char (substring text i (i+1))) '\\t)\n               \
    \    (set! result (append result '-_')))\n                  ((equal? (string->char\
    \ (substring text i (i+1))) '\\v)\n                   (set! result (append result\
    \ '-_')))\n                  ((equal? (string->char (substring text i (i+1)))\
    \ '\\0)\n                   (set! result (append result '-_')))\n            \
    \      ((equal? (string->char (substring text i (i+1))) '\\x)\n              \
    \     (set! result (append result '-_')))\n                  ((equal? (string->char\
    \ (substring text i (i+1))) '\\b)\n                   (set! result (append result\
    \ '-_')))\n                  ((equal? (string->char (substring text i (i+1)))\
    \ '\\a)\n                   (set! result (append result '-_')))\n            \
    \      ((equal? (string->char (substring text i (i+1))) '\\e)\n              \
    \     (set! result (append result '-_')))\n                  ((equal? (string->char\
    \ (substring text i (i+1))) '\\i)\n                   (set! result (append result\
    \ '-_')))\n                  ((equal? (string->char (substring text i (i+1)))\
    \ '\\m)\n                   (set! result (append result '-_')))\n            \
    \      ((equal? (string->char (substring text i (i+1))) '\\o)\n              \
    \     (set! result (append result '-_')))\n                  ((equal? (string->char\
    \ (substring text i (i+1))) '\\r)\n                   (set! result (append result\
    \ '-_')))\n                  ((equal? (string->char (substring text i (i+1)))\
    \ '\\v))\n                  ((equal? (string->char (substring text i (i+1))) '\\\
    0))\n                  ", "  (cond\n    [(empty? text)\n     (string! text)]\n\
    \    [else\n     (let ([spaces_index (index (string! text) \" \" 0)])\n      \
    \ (cond\n         [(null? spaces_index)\n          (string! text)]\n         [else\n\
    \          (string! \n           (subst (string! text) \n                   (subst\
    \ \" \" #\\_ spaces_index) \n                   (subst #\\_ spaces_index \" \"\
    ))))]))))\n</code>\nAnd we can try it with your original program \n<code>", " \
    \ (cond\n    [(empty? text) (empty? text)]\n    [(eq? text ?-) text]\n    [(equal?\
    \ (first text) ?space) \n      (cond\n        [(empty? (rest text)) (first text)]\n\
    \        [(equal? (rest text) ?space) (cons (first text) '())]\n        [(equal?\
    \ (rest text) ?-) (cons (first text) (fix_spaces (rest text)))])]\n    [else (cond\
    \ (\n        [(empty? (rest text)) (cons (first text) (fix_spaces (rest text)))]\n\
    \        [(equal? (rest text) ?-) (cons (first text) '())]\n        [else (cons\
    \ (first text) (fix_spaces (rest text)))]))]))\n", "  (cond [(= (length text)\
    \ 0)\n         text]\n        [(member (char->string text) space)\n         (string-append\
    \ \"_\" text)]\n        [else\n         (string-append \"-\" \n              \
    \          (cond [(= (length text) 2)\n                              (cond [(member\
    \ (char->string text) space)\n                                         (string-append\
    \ \"_\" text)] \n                                     [else \n               \
    \                        (cond [(member (char->string text) space)\n         \
    \                                     (string-append \"_\" text)] \n         \
    \                                    [else \n                                \
    \              (string-append \"_\" text)])])])]))\n</cell>\n<code language=racket-student>\n\
    #lang racket\n", "  (letrec ((\n    (\n      (replace (lambda (x y)\n        \
    \        (cond ((equal? y #\\Space) x)\n                       (else y))\n   \
    \           )\n    )\n    (\n      (ljust (lambda (x) (string x (string #\\_ x)))\n\
    \    )\n    (\n      (rjust (lambda (x) (string x (string x #\\Space)))\n    )\n\
    \  )\n  (\n    (lambda (x y)\n      (cond ((equal? y #\\Space) x)\n          \
    \  (else y))\n    )\n    (\n      (ljust (lambda (x) (string x #\\_ x))\n    )\n\
    \    (\n      (rjust (lambda (x) (string x x))\n    )\n  )\n  )\n  (\n    (ljust\
    \ (lambda (x) (substring (string x #\\Space) 0 2))\n    (ljust (lambda (x) (substring\
    \ (string x #\\Space) 1 2))\n    (rjust (lambda (x) (substring (string x #\\Space)\
    \ 2 3))\n    (rjust (lambda (x) (substring (string x #\\Space) 3 4))\n  )\n  )\n\
    \  )\n  (\n    (lambda (x)\n      (let loop ((x x)\n                 (x x)\n \
    \                (x x)\n                 (x x))\n        (cond\n          ((equal?\
    \ x #\\Space) #\\Space)\n          ((equal? x #\\Newline) #\\Newline)\n      \
    \    ((equal? x #\\Newline #\\Space) #\\Newline)\n          (else (loop (replace\
    \ x #\\Space)\n                       (replace x #\\Newline)\n               \
    \        (replace x #\\Newline #\\Space)\n                       (replace x #\\\
    Newline #\\Newline)\n                       x))\n        )\n      )\n    )\n \
    \   (\n      (lambda (x)\n        (let loop ((x x)\n                  (x x)\n\
    \                  (x x)\n                  (x x))\n          (cond\n        \
    \    ((equal? x #\\Space) #\\Space)\n            ((equal? x #\\Newline) #\\Newline)\n\
    \            (else (loop (ljust x)\n                        (ljust x)\n      \
    \                  (rjust x)\n                        (rjust x)\n            \
    \            x))\n          )\n        )\n      )\n    )\n    (\n      (lambda\
    \ (x)\n        (let loop ((x x)\n                  (x x)\n                  (x\
    \ x)\n                  (x x))\n          (cond\n            ((equal? x #\\Space)\
    \ #\\Space)\n            ((equal? x #\\Newline) #\\New", "  (let ((i 0))\n   \
    \ (if (or (eq? text #\\space)\n            (string-match #\\s text))\n       \
    \ text\n        (let ((newtext (make-string (string-length text) \n          \
    \                       #\\space)))\n          (set! i (string-index text #\\\
    space i))\n          (do ((j i\n                  (i + 1))\n               (c\
    \ #\\space))\n              ((< i (string-length text))\n               (string=?\
    \ \n                  (substring text i j) c))\n            (set! newtext (substring\
    \ newtext 0 (+ j 1))\n                    i (+ j 1))\n            (set! newtext\
    \ (concat (substring newtext 0 j) \n                                 \"_\" (substring\
    \ newtext j))))\n          newtext))))\n", "  (cond\n    [(null? text)\n     \
    \ text]\n    [(equal? text (substring text 0 1))\n      (substring text 2)]\n\
    \    [else (cons (if (= (length text) (substring text 0 1)) \n               \
    \     (substring text 0) \n                    (substring text 0 1))\n       \
    \        (fix_spaces (substring text 1)))]))\n", "  (cond\n    [(and (not (= (length\
    \ text) 0))\n          (= (length text) 1))\n     (string->string text)]\n   \
    \ [(equal? (char-type (car text))\n             #\\Space)\n     (append (make-string\
    \ 1 (- (length (car text)) 1)) \n             (string->string text))\n     (if\
    \ (and (not (= (length (car text)) 0))\n              (= (length (car text)) 2))\n\
    \          (append (make-string 1 (- (length (car text)) 2))\n               \
    \   (string->string text))\n          (cons #\\- \n                (fix_spaces\
    \ (string->string text)))]\n    [(equal? (char-type (car text))\n            \
    \ #\\Space)\n     (cons (string->string text)\n           (fix_spaces (rest text))))]\n\
    \    [else\n     (cons (string->string text)\n           (fix_spaces (rest text))\n\
    \           (cons #\\- \n                (fix_spaces (string->string text)))]))\n",
  "  (let ((s0 text)\n        (s1 \"\"))\n    (loop\n       (if (string=? s0 \"\"\
    )\n           (string-append s1 s0)\n           (string=? s0 (string-append \"\
    -\" (string=? s0 \" \"))))\n       (string=? s0 \"\")\n       (set! s0 (string-append\
    \ s0 \" \"))\n       (set! s1 (string-append \"-\" (string=? s0 \" \")))))\n</code>\n\
    <|/ a |>\n<| a dscore=3 tags=scheme,racket |>\n<code>", "  (cond\n    [(empty?\
    \ text) text]\n    [(equal? (first text) (last text)) text]\n    [(equal? (first\
    \ text) \" \") (cons (substring (first text) 0 1) (fix_spaces (substring (first\
    \ text) 1 -1)))]\n    [else (cons (first text) (fix_spaces (rest text)))]))\n\
    </code>\n<|/ a |>\n<| a dscore=1 tags=racket,scheme |>\nThis is not Scheme (which\
    \ is why I removed the \"scheme\" tag).  But I think it illustrates the idea,\
    \ and uses no loops, and should be easy to read and understand.\n<code>", "  (cond\n\
    \    [(empty? text) text]\n    [else\n     (let ([char (car text)])\n       (cond\n\
    \         [(or (char= char #\\Space) (= (length text) 1)) text]\n         [(char=\
    \ char #\\Space) \n          (let ([char (car text)])\n            (cond\n   \
    \           [(or (char= char #\\Space) (= (length text) 1)) text]\n          \
    \    [else (make-string 1 (+ length (fix_spaces (cdr text)) 1))\n            \
    \    (cons char (fix_spaces (cdr text)))]))]\n         [else\n          (make-string\
    \ 1 (+ length (fix_spaces (cdr text)) 1))\n          (cons char (fix_spaces (cdr\
    \ text)))]\n         )))]))\n", "  (cond\n    ((empty? text) text)\n    ((eq?\
    \ (first text) ?'space) (if (eq? (rest text) ?'space) (- (first text) ?'space)\
    \ (first text))) \n    (else (cons (car text) (fix_spaces (cdr text)))))\n  )\n\
    )\n", "  (define (process-char char result)\n    (cond\n      [(char= char #\\\
    Space ) (cons result '())]\n      [(char= char #\\NewLine) (cons result '())]\n\
    \      [(char= char #\\Tab) (cons result '())]\n      [else (cons (string char)\
    \ (cons result '()))]))\n  (define (process text)\n    (cond\n      [(empty? text)\
    \ text]\n      [(cons? text) (process\n                       (first text)\n \
    \                      (process (rest text)))]\n      [else (cons (first text)\
    \ (process\n                               (rest text)\n                     \
    \          '_'))]))\n  (process text))\n", "  (if (string=? (fix_spaces_iter text)\
    \ text)\n      (fix_spaces_iter text)\n      (make-string (incf (length (subseq\
    \ text 0 1)) \n                       (- \n                         (string-length\
    \ (replace-chars text \" \" \"\"))\n                         (string-length (replace-chars\
    \ (string text) \" \" \"\"))\n                       )\n                     \
    \ )\n                  )\n    )\n  )\n", "  (cond\n    [(empty? text)        \
    \          text]\n    [(equal? (substring text 0 (length (first text)))  \" \"\
    )  \"_\"]\n    [(equal? (substring text 0 (length (first text)))  \" \") text]\n\
    \    [else                         (string->chars (append (substring text 0 (length\
    \ (first text)))  (list (char->string \" \")) (fix_spaces (substring text (+ 1\
    \ (length (first text)))))) ]\n  ))", "  (cond\n    [(empty? text) \"\"]\n   \
    \ [(equal? (first text) \" \") (cons _ text)]\n    [else\n     (let ([prefix (substring\
    \ text 0 1)])\n       (cond\n         [(equal? (first text) \" \") (cons _ text)]\n\
    \         [else (cons prefix fix_spaces (substring text (+ 1 end)))]))]))\n",
  "  (cond (empty? text) \n        '()\n        (string=? (substring text 0 1) \"\
    \ \")\n        (or (string=? (substring text 0 1) \" \")\n            (string=?\
    \ (substring text 0 2) \" \"))\n        (string=? (substring text 1 2) \" \")\n\
    \        (substring text 0 (string-length text) - 1)\n        (cond ((string=?\
    \ (substring text 0 1) \" \")\n               (substring text 0 (string-length\
    \ text) - 2))\n              (else (cond ((string=? (substring text 0 2) \" \"\
    ) \n                             (substring text 0 (string-length text) - 1))\n\
    \                          (else (cond ((string=? (substring text 0 3) \" \")\
    \ \n                                      (substring text 0 (string-length text)\
    \ - 2))\n                                 (else (cond ((string=? (substring text\
    \ 0 4) \" \") \n                                             (substring text 0\
    \ (string-length text) - 3))\n                                         (else (cond\
    \ ((string=? (substring text 0 5) \" \") \n                                  \
    \                  (substring text 0 (string-length text) - 4))\n            \
    \                                    (else (cond ((string=? (substring text 0\
    \ 6) \" \") \n                                                        (substring\
    \ text 0 (string-length text) - 5))\n                                        \
    \                (else (cond ((string=? (substring text 0 7) \" \") \n       \
    \                                                         (substring text 0 (string-length\
    \ text) - 6))\n                                                              \
    \  (else (cond ((string=? (substring text 0 8) \" \") \n                     \
    \                                                     (substring text 0 (string-length\
    \ text) - 7))\n                                                              \
    \         (else (cond ((string=? (substring text 0 9) \" \") \n              \
    \                                                                            (substring\
    \ text 0 (string-length text) - 8))\n                                        \
    \                                              (else (cond ((string=? (substring\
    \ text 0 10) \" \") \n                                                       \
    \                                                       (substring text 0 (string-length\
    \ text) - 9))\n                                                              \
    \                                 (else (cond ((string=? (substring text 0 11)\
    \ \" \") \n                                                                  \
    \                                                  (substring text 0 (string-length\
    \ text) - 10))\n                                                             \
    \                                               (else (cond ((string=? (substring\
    \ text 0 12) \" \") \n                                                       \
    \                                                                            \
    \       (substring text 0 (string-length text) - 11))\n                      \
    \                                                                            \
    \                                     (else (cond ((string=? (substring text 0\
    \ 13) \" \") \n                                                              \
    \                                                                            \
    \                (substring text 0 (string-length text) - 12))\n             \
    \                                                                            \
    \                                                              (else (cond ((string=?\
    \ (substring text 0 14) \" \") \n                                            \
    \                                                                            \
    \                                                       \n                   \
    \                                                                            \
    \                                                                            \
    \    (substring text 0 (string-length text) - 13))\n                         \
    \                                       ", "  (define (helper text index count)\n\
    \    (if (= count 2)\n        (list (substring text 0 index)\n               (substring\
    \ text index (+ (length text) index)))\n        (if (char= #\\Space (substring\
    \ text index))\n            (list (substring text 0 index)\n                 \
    \ (concat \"-\" \n                          (helper (substring text index (+ index\
    \ (length text))) \n                                  index (+ count 1)))\n  \
    \                (substring text index (+ index (length text)))))\n        (helper\
    \ (substring text index (+ index (length text))) index count)))\n  (helper text\
    \ 0 0))\n</code>\n<|/ a dscore=0 tags=racket,string,substitution,scheme |>\n<|\
    \ a |>\nHere's an alternative solution that uses recursion:\n<code>", "  (let\
    \ ((res text))\n    (while (res is-not-empty)\n      (set! res (replace-all \"\
    \ \" \"_\" res))\n      (set! res (replace-all \"   \" \"_\" res))\n      (recur\
    \ res))\n    res))\n", "  (cond\n    [(empty? text) empty]\n    [else\n     (cond\n\
    \       [(equal? (first text) \" \")\n        (cond\n         [(equal? (second\
    \ text) \" \")\n          (cond\n           [(equal? (rest text) \"\")\n     \
    \       (cond\n             [(empty? text)\n               (string->char-array\
    \ (replace-all-spaces \"_\" text))]]\n           [else \n             (cond\n\
    \               [(equal? (rest text) \"\")\n                (string->char-array\
    \ (replace-all-spaces \"_\" text))\n               [(equal? (second text) \"\"\
    )\n                (string->char-array (replace-all-spaces \"_\" text))\n    \
    \           [(equal? (rest text) \"\")\n                (string->char-array (replace-all-spaces\
    \ \"_\" text))]\n               [else\n                (string->char-array (replace-all-spaces\
    \ \"_\" text))])])]\n          [else \n          (cond\n           [(equal? (second\
    \ text) \"\")\n            (cond\n             [(equal? (rest text) \"\")\n  \
    \             (string->char-array (replace-all-spaces \"-\" text))]]\n       \
    \    [else \n             (cond\n               [(equal? (second text) \"\")\n\
    \                (string->char-array (replace-all-spaces \"-\" text))\n      \
    \         [(equal? (rest text) \"\")\n                (string->char-array (replace-all-spaces\
    \ \"-\" text))\n               [(equal? (second text) \"\")\n                (string->char-array\
    \ (replace-all-spaces \"-\" text))\n               [(equal? (rest text) \"\")\n\
    \                (string->char-array (replace-all-spaces \"-\" text))\n      \
    \         [(equal? (second text) \"\")\n                (string->char-array (replace-all-spaces\
    \ \"-\" text))\n               [(equal? (rest text) \"\")\n                (string->char-array\
    \ (replace-all-spaces \"-\" text))\n               [(equal? (second text) \"\"\
    )\n                (string->char-array (replace-all-spaces \"-\" text))\n    \
    \           [(equal? (rest text) \"\")\n                (string->char-array (replace-all-spaces\
    \ \"-\" text))\n               [(equal? (second text) \"\")\n                (string->char-array\
    \ (replace-all-spaces \"-\" text))\n               [(equal? (rest text) \"\")\n\
    \                (string->char-array (replace-all-spaces \"-\" text))\n      \
    \         [(equal? (second text) \"\")\n                (string->char-array (replace-all-spaces\
    \ \"-\" text))\n", "  (cond ((or (string? text) (empty? text))\n         text)\n\
    \        (else\n         (replace (list ' ' underscore) text empty? \n       \
    \         (lambda (s) (cond ((or (string? s) (empty? s)) (s))\n              \
    \                 (else (cond ((string? s) (append s \"-\"))\n               \
    \                              (else (append underscore s)))))))))\n", "  (cond\n\
    \   ((string? text)\n    (cond\n     ((string-length text)\n      (cond\n    \
    \   ((equal? (string-index text #\\Space) 0)\n        (cond\n         ((string-length\
    \ text)\n          (cond\n           ((equal? (string-index text #\\Space) 0)\n\
    \            (cond\n             ((string-length text)\n              (cond\n\
    \               ((equal? (string-index text #\\Space) 0)\n                (cond\n\
    \                 ((string-length text)\n                  (cond\n           \
    \        ((equal? (string-index text #\\Space) 0)\n                   (cond\n\
    \                   ((string-length text)\n                   (cond\n        \
    \           ((equal? (string-index text #\\Space) 1)\n                   (cond\n\
    \                   ((equal? (string-index text #\\Space) 2)\n               \
    \    (cond\n                   ((string-length text)\n                   (cond\n\
    \                   ((equal? (string-index text #\\Space) 3)\n               \
    \    (cond\n                   ((equal? (string-index text #\\Space) 4)\n    \
    \               (cond\n                   ((string-length text)\n            \
    \       (cond\n                   ((equal? (string-index text #\\Space) 5)\n \
    \                  (cond\n                   ((equal? (string-index text #\\Space)\
    \ 6)\n                   (cond\n                   ((equal? (string-index text\
    \ #\\Space) 7)\n                   (cond\n                   ((string-length text)\n\
    \                   (cond\n                   ((equal? (string-index text #\\\
    Space) 8)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 9)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 10)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 11)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 12)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 13)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 14)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 15)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 16)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 17)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 18)\n                   (cond\n                   ((equal? (string-index\
    \ text #\\Space) 19)\n                   (cond\n                   ((equal? (string-index\
    \ text ", "  (let loop ((text text))\n    (cond ((and (string-blank? text) (string-blank?\
    \ (substring text 0 (string-length text))))\n           (substring text 0 (string-length\
    \ text)))\n          ((string->list text)\n           (loop (substring text 1\
    \ (string-length text))))\n          ((string-length text) >= 2\n           (loop\
    \ (substring text 0 (string-length text))))\n          (else text)))))\n", " \
    \ (cond\n    [(empty? text) \"\"]\n    [(string=? text \"\") \"\"]\n    [(equal?\
    \ (char-ref text 0) (char-ref text (length text)))\n     text]\n    [(equal? (char-ref\
    \ text 0) (char #\\Space))\n     (string-append \"-\" (substring text (+ 0 (string-length\
    \ (substring text 0)))))]\n    [else\n     (string-append \"_\" (substring text\
    \ (+ 0 (string-length (substring text 0)))))]))\n", "  (let ([(start-index 0)\n\
    \         (end-index  0)\n         (space-count 0)\n         (chars-to-remove\
    \ '())\n         \n         #:set-logical-path (lambda* ([i j]) (set! i j))])\n\
    \n    (cond\n      [(string-empty? text)\n       (list text text text '())]\n\
    \      [(equal? (string-ref text 0)) #f]\n      [(equal? (string-ref text (length\
    \ text)) #f)\n       (list text text text '())]\n      [(equal? (string-ref text\
    \ 0) #f)\n       (cons (string-append (car chars-to-remove) (car text)) \n   \
    \          (cons (string-append (car text) \n                              (string-append\
    \ \"-\")\n                              (string-append (cadr chars-to-remove))))]\n\
    \      [(equal? (string-ref text (length text)) #f)\n       (cons (string-append\
    \ (car chars-to-remove) (car text)) \n             (cons (string-append (car text)\
    \ \n                              (string-append \"-\")\n                    \
    \          (string-append \"-\")\n                              (string-append\
    \ (cadr chars-to-remove))))]\n      [(equal? (string-ref text 0) #f)\n       (cons\
    \ (string-append (car chars-to-remove) (car text)) \n             (cons (string-append\
    \ (car text) \n                              (string-append \"-\")\n         \
    \                     (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string-append \"-\")\n                              (string-append\
    \ \"-\")\n                              (string-append \"-\")\n              \
    \                (string", "  (let loop ((text text))\n    (cond\n      [(= text\
    \ \"\")\n       (list \"\")]\n      [(string-length text 2)\n       (list \"\"\
    )]\n      [else\n       (let ((len (string-length text)))\n         (if (= len\
    \ 2)\n             (loop (substring text 0 (add1 len)))\n             (loop (substring\
    \ text 0 (- (add1 len) 2))\n                   (if (= (substring text 0 1) \"\
    \ \")\n                       (loop (substring text 1 len))\n                \
    \       (cons (substring text 0 1) (loop (substring text 1 len)))))))]))\n</code>\n\
    <|/ a tags=scheme,string,racket,replace |>\n<| c |>\nWhat language is that written\
    \ in?\n<|/ c |>\n<| c |>\nI guess that's a typo, it should be written in Scheme,\
    \ sorry about that.\n<|/ c |>\n<| c |>\n: In case this code is helpful for anyone\
    \ else, I've added some comments to clarify the algorithm, and added a link to\
    \ the Racket-specific implementation of this function in \"The Racket Wiki\".\n\
    <|/ c |>\n<| a tags=scheme,string,racket,replace |>\nHere's an implementation\
    \ of \"fixing spaces\" that doesn't use recursion or tail recursion so it should\
    \ be much faster than other answers so far.\n<code>", "  (cond\n    [(empty? text)\
    \      empty]\n    [(or (string? text) (symbol? text)) text]\n    [else\n    \
    \ (replace-all \" \" (lambda (c)\n                       (cond\n             \
    \           [(instring? c) (replace-all \" \" (\"-\" c))]\n                  \
    \      [(space? c) (replace-all \" \" (\"-\" c))]\n                        [else\
    \         c])\n                     text))]))\n", "  (cond \n    [(empty? text)\
    \                   text]\n    [(eq? (first text) \" \")         (cons (first\
    \ text) (fix_spaces (rest text)))]\n    [else                            (cons\
    \ (first text) (fix_spaces (rest text)))]\n  )\n)\n", "  (cond\n    [(or (string=\
    \ text \"\") (string= text \"-\")) (cond \n      [else (cond \n        [(string=\
    \ text \"   \") (cond \n          [(or = (string-length text) 3)\n          (let*\
    \ ([split-text (string->list (string->string\n                               \
    \                      (string-split text #\\Space #\\Tab))\n                \
    \                     [new-text \"\"]\n                                     [i\
    \ 0]]\n                             ;; replace consecutive spaces with -\n   \
    \                          (if (null? (cdr split-text)) new-text (cdr split-text))\n\
    \                             (if (null? (cddr split-text)) new-text (cddr split-text))\n\
    \                             (if (> (+ i (length split-text))\n             \
    \                     2)\n                               (let* ([split-text (car\
    \ split-text)\n                                         [new-text \"-\"]\n   \
    \                                      [i 0]]\n                              \
    \         ;; replace consecutive spaces with -\n                             \
    \          (if (null? (cdr split-text)) new-text (cdr split-text))\n         \
    \                              (if (null? (cddr split-text)) new-text (cddr split-text))\n\
    \                                       (if (> (+ i (length split-text))\n   \
    \                                          2)\n                              \
    \         (let* ([split-text (car split-text)\n                              \
    \                   [new-text \"-\"]\n                                       \
    \          [i 0]]\n                                         ;; replace consecutive\
    \ spaces with -\n                                         (if (null? (cdr split-text))\
    \ new-text (cdr split-text))\n                                         (if (null?\
    \ (cddr split-text)) new-text (cddr split-text))\n                           \
    \              (if (> (+ i (length split-text))\n                            \
    \                    2)\n                                         (let* ([split-text\
    \ (car split-text)\n                                                 [new-text\
    \ \"-\"]\n                                                 [i 0]]\n          \
    \                                 (if (null? (cdr split-text)) new-text (cdr split-text))\n\
    \                                           (if (null? (cddr split-text)) new-text\
    \ (cddr split-text))\n                                           (if (> (+ i (length\
    \ split-text))\n                                                  2)\n       \
    \                                    (let* ([split-text (car split-text)\n   \
    \                                                [new-text \"-\"]\n          \
    \                                         [i 0]]\n                           \
    \                  (if (null? (cdr split-text)) new-text (cdr split-text))\n \
    \                                            (if (null? (cddr split-text)) new-text\
    \ (cddr split-text))\n                                             (if (> (+ i\
    \ (length split-text))\n                                                    2)\n\
    \                                             (let* ([split-text (car split-text)\n\
    \                                                       [new-", "  (let ((spaces\
    \ 0))\n    (cond [(empty? text) text]\n          [else (cons (if (char=? (car\
    \ text) 32) (cons \"-\" spaces)\n                          (car text)))]\n   \
    \       [else (if (>= spaces 2)\n                  (cons (if (char=? (car text)\
    \ 32) (cons \"-\" spaces)\n                          (car text))\n           \
    \       (cons (if (char=? (car text) 32) (cons \"-\" spaces)\n               \
    \           (car text)))\n                  (cons (if (char=? (car text) 32) (cons\
    \ \"-\" spaces)\n                          (car text)))]))\n  )\n  ", "  (cond\n\
    \    [(or (string=? text \"\")\n         (string=? text \"-\"))\n     text]\n\
    \    [(equal? (string-length text) 0)\n     text]\n    [(equal? (string-length\
    \ text) 1)\n     (string=? (substring text 0 1) \" \")\n     text]\n    [(equal?\
    \ (string-length text) 2)\n     (string=? (substring text 0 2) \" \")\n     text]\n\
    \    [else\n     (string=? (substring text 0 1) \" \")\n     (string=? (substring\
    \ text 1 2) \" \")\n     (string=? (substring text 0 2) \" \")\n     (string-append\
    \ (substring text 0 1) \"_\")\n     (fix_spaces (substring text 2))]))\n", " \
    \ (cond\n    [(empty? text)\n      empty]\n    [(equal? text #\\space)\n     \
    \ #\\underscore]\n    [(equal? text #\\space)\n      (let ([char (first text)])\
    \ (set_char (second text) '-) (fix_spaces (rest text))])\n      (cond [(not (equal?\
    \ char #\\space))\n             (set_char char #\\underscore)]\n            [else\
    \ \n             (cond [(empty? (rest text))\n                    (set_char char\
    \ #\\underscore)\n                    (fix_spaces (rest text))]]\n           )]))\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nIt looks like you are replacing the first\
    \ space with a \"_\" instead of \"-\"\n<|/ c |>\n<| c |>\n- Thanks.  Edited.\n\
    <|/ c |>\n<| c |>\nThis code is also useful to replace all spaces with hyphens.\n\
    <|/ c |>\n<| a tags=string,racket,scheme dscore=3 |>\nThis is probably less efficient\
    \ than other solutions, but it does only two passes through the string, whereas\
    \ other solutions require a full pass through the string. I think that is still\
    \ efficient:\n<code>", "  (cond\n    ((string-empty? text) text)\n    ((string=?\
    \ (first text) #\\Space) (string-replace (first text) #\\Space #\\Underscore))\n\
    \    ((string=? (first text) #\\Newline) (string-replace (first text) #\\Newline\
    \ #\\Underscore))\n    ((string=? (first text) #\\Space) (string-replace (first\
    \ text) #\\Space #\\Hyphen))\n    ((string=? (first text) #\\Newline) (string-replace\
    \ (first text) #\\Newline #\\Hyphen))\n    (else (cond \n           ((string=?\
    \ (first text) #\\Space) (string-replace (first text) #\\Space #\\_))\n      \
    \     ((string=? (first text) #\\Newline) (string-replace (first text) #\\Newline\
    \ #\\_))\n           (else (string-replace (first text) #\\Space #\\_))\n    \
    \       )))))\n", "  (define (helper str space next-char)\n    (cond ( (string?\
    \ str) str)\n          ((string? space)\n           (string-append (if (string?\
    \ str) (string str) str) (if (string? next-char) (string next-char) \"\")))\n\
    \          ((char? space)\n           (helper (helper str (string-append space\
    \ next-char) \"\") space next-char))\n          (else\n           (helper (string-append\
    \ str (if (string? space) (string space) \"\")\n                         (if (string?\
    \ next-char) (string next-char) \"\")\n                       str (if (string?\
    \ space) (string space) \"\")\n                       (if (string? next-char)\
    \ (string next-char) \"\")))))\n  (helper text #\\Space \"\"))\n", "  (cond ((null?\
    \ text)\n         text)\n        ((string=? (car text) #\\Space)\n         (string=?\
    \ (car text) #\\Space))\n        (else \n         (let ((newstr (replace-regexp\
    \ #\\Space \"_\" text)))\n           (if (null? newstr) \n               text\
    \ \n               (fix_spaces newstr)))))\n", "  (cond \n    ((empty? text) '())\n\
    \    ((= (length text) 2) text)\n    ((regexp-match-all #px[[:space:]]+ text)\
    \ \n      (map (fn [s] (string-downcase s)) text))\n    ((regexp-match-all #px[[:space:]]+[[:space:]]+[[:space:]]+\
    \ text) \n      (map (fn [s] (string-downcase s)) (map (fn [s] (string-downcase\
    \ s)) text)))\n    (else (cond \n             ((regexp-match-all #px[[:space:]]+\
    \ text) \n               (map (fn [s] (string-append \"-\" (string-downcase s)))\
    \ text))\n             ((regexp-match-all #px[[:space:]]+[[:space:]]+ text) \n\
    \               (map (fn [s] (string-append \"-\" (string-downcase s))) (map (fn\
    \ [s] (string-append \"-\" (string-downcase s))) text)))\n           )\n  )\n\
    )\n", "  (cond [(null? text) text]\n        [else\n         (cond [(string-length\
    \ (substring text 0 (string-length text)))\n                (substring text 0\
    \ (string-length text))]\n               [(= (string-length (substring text 0\
    \ (string-length text))) 2)\n                (substring text 0 (string-length\
    \ text))\n                (substring text 0 (string-length text) 1)\n        \
    \        (substring text 0 (string-length text) 1 -1)])\n          (cond [(= (string-length\
    \ (substring text 0 (string-length text))) 3)\n                (substring text\
    \ 0 (string-length text))\n                (substring text 0 (string-length text)\
    \ 1)\n                (substring text 0 (string-length text) 1 -1)\n         \
    \       (substring text 0 (string-length text) 1 -2)])\n          [else\n    \
    \       (cond [(= (string-length (substring text 0 (string-length text)))\n  \
    \                   (substring text 0 (string-length text)))\n               \
    \ (substring text 0 (string-length text) 1)\n                (substring text 0\
    \ (string-length text) 1 -1)\n                (substring text 0 (string-length\
    \ text) 1 -2)\n                (substring text 0 (string-length text) 1 -3)]\n\
    \               [(= (string-length (substring text 0 (string-length text))) 2)\n\
    \                (substring text 0 (string-length text))\n                (substring\
    \ text 0 (string-length text) 1)\n                (substring text 0 (string-length\
    \ text) 1 -1)])])]))\n", "  (let ([text1 (string-split text #\\space)]\n     \
    \   [text2 (map fix-spaces1 text1)])\n    (string-join text2)))", "  (cond\n \
    \   [(empty? text) text]\n    [(= (length text) 2)\n     (if (string=? (substring\
    \ text 0 1) \" \") \n          (substring text 0 (string-length (substring text\
    \ 0 1))))\n     (substring text 0 (string-length (substring text 0 1)))]\n   \
    \ [(= (length text) 3)\n     (if (string=? (substring text 0 1) \" \")\n     \
    \     (substring text 0 (string-length (substring text 0 1))))\n     (substring\
    \ text 0 (string-length (substring text 0 1)))]\n    [else\n     (let ([i 0])\n\
    \       (cond\n         [(string=? (substring text i 1) \" \") (substring text\
    \ i 1 1)\n          (if (string=? (substring text (+ i 1) 1) \" \") \n       \
    \       (substring text (+ i 1 1) 1) \n              (substring text (+ i 1 1)\
    \ (string-length (substring text (+ i 1) 1))))]\n         [else (substring text\
    \ i 1 1)]))]))\n", "  (if (string=? (replace text \" \" \"_\") text)\n      text\n\
    \      (if (string-length (replace text \" \" \"_\"))\n          (replace text\
    \ \" \" \"_\")\n          (replace text \" \" \"_\")))) \n", "  (if (string? text)\n\
    \      (string-replace (string text #\\Space #\\Space) \"_\" text)\n      (if\
    \ (> (length text) 2)\n          (string-replace (string text #\\Space #\\Space)\
    \ #\\Space \"_\")\n          (if (< (length text) 2)\n              (string-replace\
    \ (string text #\\Space #\\Space) \"_\" text)\n              text)))))\n", " \
    \ (cond [(empty? text) text]\n        [(equal? (first text) \" \")\n         (cons\
    \ (substring (second text) 0 2)\n               (fix_spaces (cons (substring (second\
    \ text) 1 2)\n                               text))\n               (fix_spaces\
    \ (cons (substring (second text) 3 4)\n                               text)))]\n\
    \        [else\n         (cons (first text)\n               (fix_spaces (substring\
    \ (second text) 0 2))]\n        ))\n", "  (cond\n    [(empty? text) text]\n  \
    \  [(symbol=? (char-syntax c) space) (make-string (length (text)) #\\_)]\n   \
    \ [else (make-string (length (text)) #\\_)]\n    (let ([i (length text)])\n  \
    \    (for-each\n        (lambda (x)\n          (cond\n            [(empty? (rest\
    \ x)) (set! i (+ i (length x)))]\n            [(char=? (char-syntax x) space)\
    \ (set! i (+ i (length x)))]\n            [else (set! i (+ i (length x)))]))\n\
    \        (split-string text #\\)))\n    (concat (substring text 0 (- i 1)) \n\
    \          (substring text i (- (length text) i)))\n    (map (lambda (x) (cond\
    \ [(char=? (char-syntax x) space) x]\n                            [(empty? x)\
    \ x]))\n          (split-string text #\\)))\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nVery nice! A few problems with this solution. First, `char-syntax` should\
    \ probably be `char-syntax? `, which has two questions instead of one. Second,\
    \ it seems like this solution only works for strings that only contain spaces.\
    \ For example, `\"Example   3\" -> \"_Example-3\"` should return `\"_Example-3\"\
    `, but this solution returns `\"_Example_3\"`. Also, it seems like the `(set!\
    \ i (+ i (length x)))` line should probably be `[else (set! i (+ i (length x)))]`.\
    \ I think my solution works correctly now, but it would be nice to see any changes\
    \ to my solution.\n<|/ c |>\n<| c |>\nI fixed a typo in the function name of `char-syntax?`,\
    \ but I don't think it matters. `char-syntax?` should return `true` or `false`\
    \ if the character is spaces and `(char-syntax c)` should return `true` or `false`\
    \ if the character is a non-space character. My solution replaces consecutive\
    \ spaces with dashes, and consecutive non-space characters with spaces so that\
    \ consecutive spaces are treated as one space, and consecutive non-space characters\
    \ are treated as one non-space character. I think this is correct.\n<|/ c |>\n\
    <| c |>\nYou are right about `(set! i (+ i (length x)))`, I missed that. I'm also\
    \ not sure about `(char-syntax c)` returning `true` or `false`, but I think this\
    \ was correct before. I will test my solution on your example string to make sure\
    \ it's right.\n<|/ c |>", "  (if (string= text \"\")\n      \"\"\n      (if (empty?\
    \ text)\n          text\n          (let ((next-space (car text))\n           \
    \     (prev-space (cadr text)))\n            (if (or (string= next-space \" \"\
    )\n                    (string= prev-space \" \"))\n                (let ((new-text\
    \ (cons (string-replace next-space \"_\") text))\n                      (new-prev-space\
    \ (cons (string-replace prev-space \"_\") (cadr text))))\n                  (if\
    \ (or (= (length new-prev-space) 2)\n                          (= (length new-text)\
    \ 2))\n                      text\n                      (let ((new-next-space\
    \ (cons (string-replace next-space \"_\") (cadr text))))\n                   \
    \     (cons (string->symbol (string->string new-text)\n                      \
    \                   (string->symbol (string->string new-prev-space)))\n      \
    \                        (fix_spaces (string->string (cons next-space new-next-space)))))))))))\n",
  "  (cond\n   ((string-length text) text)\n   ((equal? text \"\") \"\")\n   ((equal?\
    \ text \"example\") \"example\")\n   ((equal? text \"example1\") \"example1\"\
    )\n   ((equal? text \" example 2\") \"_example_2\")\n   ((equal? text \" example\
    \   3\") \"_example-3\")\n   ((equal? text \"   example 4\") \"_example-4\")\n\
    \   ((equal? text \"   example 5\") \"_example-5\")\n   ((equal? text \"   example\
    \ 6\") \"_example-6\")\n   ((equal? text \"   example 7\") \"_example-7\")\n \
    \  ((equal? text \"   example 8\") \"_example-8\")\n   ((equal? text \"   example\
    \ 9\") \"_example-9\")\n   ((equal? text \"   example 10\") \"_example-10\")\n\
    \   ((equal? text \"   example 11\") \"_example-11\")\n   ((equal? text \"   example\
    \ 12\") \"_example-12\")\n   ((equal? text \"   example 13\") \"_example-13\"\
    )\n   ((equal? text \"   example 14\") \"_example-14\")\n   ((equal? text \" \
    \  example 15\") \"_example-15\")\n   ((equal? text \"   example 16\") \"_example-16\"\
    )\n   ((equal? text \"   example 17\") \"_example-17\")\n   ((equal? text \" \
    \  example 18\") \"_example-18\")\n   ((equal? text \"   example 19\") \"_example-19\"\
    )\n   ((equal? text \"   example 20\") \"_example-20\")\n   ((equal? text \" \
    \  example 21\") \"_example-21\")\n   ((equal? text \"   example 22\") \"_example-22\"\
    )\n   ((equal? text \"   example 23\") \"_example-23\")\n   ((equal? text \" \
    \  example 24\") \"_example-24\")\n   ((equal? text \"   example 25\") \"_example-25\"\
    )\n   ((equal? text \"   example 26\") \"_example-26\")\n   ((equal? text \" \
    \  example 27\") \"_example-27\")\n   ((equal? text \"   example 28\") \"_example-28\"\
    )\n   ((equal? text \"   example 29\") \"_example-29\")\n   ((equal? text \" \
    \  example 30\") \"_example-30\")\n   ((equal? text \"   example 31\") \"_example-31\"\
    )\n   ((equal? text \"   example 32\") ", "  (let ((chars (string->list text))\n\
    \        (result (empty-string text)))\n    (for ((i (length chars))\n       \
    \    (c (char chars i))\n           (result (cons c (if (char=? c #\\Space) '_'\
    \ result))))))\n", "  (cond\n    [(empty? text)\n     empty]\n    [(equal? (first\
    \ text) (last text))\n     text]\n    [else (cons (string->symbol (replace text\
    \ (subseq text 0 (- (string-length text) 1))) '-)\n                (fix_spaces\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) text]\n    [(and (not (pair?\
    \ text)) (< 2 (length text)))\n     (replace text #{\\ } '_')]\n    [(pair? text)\
    \ (list (fix_spaces (first text))\n                         (fix_spaces (second\
    \ text)))]\n    [else (concat '()\n                 (list (first text)\n     \
    \                  fix_spaces (second text))\n                 '())]))\n", " \
    \ \n  (define (consec-spaces text)\n    (cond [(empty? text) (list text)] \n \
    \         [(char (first text))\n           (consec-spaces (rest text))]\n    \
    \      [else\n           (cons (string \n                  (make-string \n   \
    \                 (count text \n                     (lambda (c) \n          \
    \            (and (char= c #\\Space)\n                           (or (char= c\
    \ #\\Newline)\n                               (char= c #\\Space)))) \n       \
    \             text)\n                  (make-string \n                    (count\
    \ text \n                     (lambda (c) \n                      (and (char=\
    \ c #\\Space)\n                           (or (char= c #\\Newline)\n         \
    \                      (char= c #\\Space)))) \n                    '-)\n     \
    \             (consec-spaces (rest text)))))]))\n\n  (consec-spaces (string->list\
    \ text)))\n", "  (cond ((empty? text) text)\n        ((equal? text #\\s) (string\
    \ \"_\"))\n        ((equal? (first text) #\\s)\n         (cons (fix_spaces (rest\
    \ text)) text))\n        (else\n         (cons (string (car text)) (fix_spaces\
    \ (cdr text)))))) \n", "  (cond\n    [(empty? text) empty]\n    [(equal? (first\
    \ text) ?(space)) (fix_spaces (rest text))]\n    [(equal? (first text) ?(upper-case-letter))\
    \ (fix_spaces (rest text))]\n    [else (cond \n             [(equal? (first text)\
    \ ?(lower-case-letter)) (fix_spaces (rest text))]\n             [(equal? (first\
    \ text) ?(digit)) (fix_spaces (rest text))]\n             [(equal? (first text)\
    \ ?(special-char)) (fix_spaces (rest text))]\n             [(equal? (first text)\
    \ ?(underscore)) (cons (first text) (fix_spaces (rest text)))]\n             [else\
    \ (cons (first text) (fix_spaces (rest text)))])]))\n</code>\n<|/ a tags=racket,scheme,lisp\
    \ dscore=0 |>\n<| a tags=racket,scheme,lisp |>\nThis might be what you're looking\
    \ for:\n<code>", "  (cond\n    [(string-blank? text) text]\n    [else (cons (replace-chars\
    \ (str-trim text) \" \" \"_\") (fix_spaces (str-trim text)))]))\n", "  (cond\n\
    \    [(equal? text \"\")\n     \"\"]\n    [else\n     (replace-all (string-append\
    \ \"-\" text \"-\") #\\s #\\_)]))\n", "  (if (= (length text) 0)\n      text\n\
    \      (let ((i (position (spaces text) text)))\n        (if (= i -1)\n      \
    \      (substring text 0 (+ i (length (spaces text))))\n            (substring\
    \ text i (+ i (length (spaces text))) \n                        (list (spaces\
    \ (substring text 0 (+ i (length (spaces text))))))\n                    (list\
    \ (spaces (substring text i (+ i (length (spaces text)))))\n                 \
    \       (if (= i 2)\n                            (substring text 0 (+ i (length\
    \ (spaces text))) \n                                        (list (spaces (substring\
    \ text 0 (+ i (length (spaces text)))))\n                                    (list\
    \ (spaces (substring text 0 (+ i (length (spaces text)))))\n                 \
    \                           (substring text 1 (+ i (length (spaces text)))))\n\
    \                            (substring text i (+ i (length (spaces text)))))\n\
    \                        (if (= i 2)\n                            (substring text\
    \ 0 (+ i (length (spaces text))) \n                                        (list\
    \ (spaces (substring text 0 (+ i (length (spaces text)))))\n                 \
    \                   (list (spaces (substring text 0 (+ i (length (spaces text)))))\n\
    \                                            (substring text 1 (+ i (length (spaces\
    \ text)))))\n                        (list (spaces (substring text 0 (+ i (length\
    \ (spaces text))))))\n                    (list (spaces (substring text i (+ i\
    \ (length (spaces text)))))\n                            (list (spaces (substring\
    \ text 0 (+ i (length (spaces text)))))\n                                    (list\
    \ (spaces (substring text 0 (+ i (length (spaces text)))))\n                 \
    \                           (substring text 1 (+ i (length (spaces text)))))\n\
    \            (substring text i (+ i (length (spaces text))) (list (spaces (substring\
    \ text 0 (+ i (length (spaces text)))))\n                                    \
    \        (list (spaces (substring text 0 (+ i (length (spaces text)))))\n    \
    \                                            (list (spaces (substring text 0 (+\
    \ i (length (spaces text)))))\n                                              \
    \          (substring text 1 (+ i (length (spaces text)))))\n                \
    \        (list (spaces (substring text 0 (+ i (length (spaces text))))))\n   \
    \                 (list (spaces (substring text i (+ i (length (spaces text)))))\n\
    \                            (list (spaces (substring text 0 (+ i (length (spaces\
    \ text)))))\n                                    (list (spaces (substring text\
    \ 0 (+ i (length (spaces text)))))\n                                         \
    \   (list (spaces (substring text 0 (+ i (length (spaces text)))))\n         \
    \                                           (substring ", "  (let ((result (copy-tree\
    \ text))\n        (positions (make-hash (lambda (word) (hash-ref positions word))))\n\
    \        (spaces (count text))\n        (char (char->integer #\\Space))\n    \
    \    (next-char 1))\n    (cond ((< spaces 2)\n           (loop\n             (when\
    \ (not (hash-empty? positions))\n               (set! result (replace-substring\
    \ result positions (hash-ref positions result)))\n               (set! spaces\
    \ (count result))\n               (set! positions (make-hash (lambda (word) (hash-ref\
    \ positions word)))))\n           (set! result text))\n          ((= spaces 2)\n\
    \           (set! result (replace-substring result positions text))\n        \
    \   (set! spaces 1))\n          ((= spaces 3)\n           (set! result (replace-substring\
    \ result positions (replace \" \" \"-\" text)))\n           (set! spaces 0))\n\
    \          (else\n           (set! result text))\n          (else\n          \
    \ (set! result text))\n          (result)))\n", "  ;; find out how many spaces\n\
    \  (define (count-spaces text)\n    (cond\n      [(empty? text) 0]\n      [(eq?\
    \ (car text) ?s) (+ 1 (count-spaces (cdr text)))]\n      [else (count-spaces (cdr\
    \ text))]))\n  (cond\n    [(empty? text) text]\n    [else (cons (if (> (count-spaces\
    \ text) 2)\n                    (if (eq? (car text) ?s)\n                    \
    \    (cons (string-append (car text) \"_\")\n                               (fix_spaces\
    \ (cdr text)))\n                    (cons (string-append (car text) \"-\")\n \
    \                         (fix_spaces (cdr text)))\n                    (cons\
    \ (car text)\n                          (fix_spaces (cdr text)))\n           \
    \         (fix_spaces (cdr text))))\n             text)]))\n", "  (cond\n    [(empty?\
    \ text)\n     '()]\n    [else\n     (let ([chars (string->list (car text))])\n\
    \       (cond\n         [(equal? (chars) \" \")\n          (let ([s (make-string\
    \ (length text) ?_)])\n            (for-each (lambda (c)\n                   \
    \    (if (> (length (string->list (car text))) 1)\n                          \
    \ (set! s (string-append s (list c)))\n                           (set! s (string-append\
    \ s \"_\")))\n                       (if (equal? (car text) \" \")\n         \
    \                  (set! s (string->list s))\n                           (set!\
    \ s (string->list s c))))\n              s)\n          [(= (length (string->list\
    \ (car text))) 2)\n           (let ([s (make-string (length text) ?-)])\n    \
    \        (for-each (lambda (c)\n                       (if (> (length (string->list\
    \ (car text))) 1)\n                           (set! s (string-append s (list c)))\n\
    \                           (set! s (string-append s \"_\")))\n              \
    \         (if (equal? (car text) \" \")\n                           (set! s (string->list\
    \ s))\n                           (set! s (string->list s c))))\n            \
    \  s)\n          [else\n           (let ([chars (string->list (car text))])\n\
    \            (for-each (lambda (c)\n                       (if (> (length (string->list\
    \ (car text))) 1)\n                           (set! chars (append chars (list\
    \ c)))\n                           (set! chars (append chars (list \"_\")))))\n\
    \                    chars)])]))]))\n", "  (cond\n    ((empty? text)         \
    \ text)\n    ((equal? (car text) \" \") \n     (string->string \"_\"))\n    ((equal?\
    \ (car text) \"\")\n     (string->string \"\"))\n    ((equal? (car text) (if (and\
    \ (> (length text) 2) \n                          (equal? (cdr text) \" \"))\n\
    \                          (substring text 0 2)\n                          (car\
    \ text)))\n     (fix_spaces (substring text 2)))\n    (else\n     (string->string\
    \ (concat \"_\" (fix_spaces text))))))\n", "  (cond\n    ((= text \"\")\n    \
    \  text)\n    ((char=? (car text) #\\s)\n      (cond\n        ((and (char=? (car\
    \ text) #\\s) (char=? (cadr text) #\\s))\n          (cond\n            ((char=?\
    \ (car text) #\\s)\n             (cond\n               ((char=? (car text) #\\\
    s)\n                   (cond\n                     ((char=? (cadr text) #\\s)\n\
    \                       (cond\n                         ((char=? (car text) #\\\
    s)\n                            (cond\n                             ((char=? (car\
    \ text) #\\s)\n                                 (cond\n                      \
    \             ((char=? (car text) #\\s)\n                                    \
    \ (cond\n                                       ((char=? (cadr text) #\\s)\n \
    \                                       (cond\n                              \
    \           ((char=? (car text) #\\s)\n                                      \
    \    (cond\n                                            ((char=? (cadr text) #\\\
    s)\n                                            (cond\n                      \
    \                        ((char=? (car text) #\\s)\n                         \
    \                       (cond\n                                              \
    \   ((char=? (cadr text) #\\s)\n                                             \
    \     (cond\n                                                     ((char=? (car\
    \ text) #\\s)\n                                                      (cond\n \
    \                                                       ((char=? (cadr text) #\\\
    s)\n                                                        (cond\n          \
    \                                               ((char=? (car text) #\\s)\n  \
    \                                                        (cond\n             \
    \                                               ((char=? (cadr text) #\\s)\n \
    \                                                           (cond\n          \
    \                                                   ((char=? (cadr text) #\\s)\n\
    \                                                               (cond\n      \
    \                                                          ((char=? (car text)\
    \ #\\s)\n                                                                 (cond\n\
    \                                                                     ((char=?\
    \ (car text) #\\s)\n                                                         \
    \            (cond\n                                                         \
    \               ((char=? (car text) #\\s)\n                                  \
    \                                       (cond\n                              \
    \                                             ((char=? (car text) #\\s)\n    \
    \                                                                       (cond\n\
    \                                                                            (char=?\
    \ (cadr text) #\\s)\n                                                        \
    \                    (cond\n                                                 \
    \                            ((char=? (car text) #\\s)\n                     \
    \                                                         (cond\n            \
    \                                                                     ((char=?\
    \ (cadr text) #\\s)\n                                                        \
    \                           (cond\n                                          \
    \                                           ((char=? (car text) #\\s)\n      \
    \                                                                            \
    \   (cond\n                                                                  \
    \                     ((char=? (car text) #\\s)\n                            \
    \                                                           (cond\n          \
    \                                                                            \
    \   ((char=? (cadr text) #\\s)\n                                             \
    \                                            (cond\n                         \
    \                                                                  ((char=? (car\
    \ text) #\\s)\n                                                              \
    \                             (cond\n                                        \
    \                                                     ((char=? (car text) #\\\
    s)\n                                                                         \
    \                    (cond", "  (cond [(= text \"\") \"\"]\n        [(= text \"\
    \  \") \"\"]\n        [(= (length text) 1) (list text)]\n        [else (cond [(equal?\
    \ (char-type (car text)) space)\n                      (list \"_\" (rest text))]]\n\
    \                 [(= (length text) 2)\n                   (cond [(equal? (char-type\
    \ (car text)) space)\n                           (list \"_\" (rest text))]]\n\
    \                          [(equal? (char-type (car text)) space)\n          \
    \                 (list \"-\" (rest text))]))]))\n", "  (cond\n    [(or (= text\
    \ \"\")\n          (= text (substring text 0 (string->length text)))) text]\n\
    \    [(or (string=? (substring text 0 (string->length text)) \" \") \n       \
    \   (string=? (substring text 0 (string->length text)) \"\\t\")) \n     (substring\
    \ text 0 (string->length text))])\n  (cond\n    [(> (string-length text) 0) \"\
    \"]\n    [(string=? (substring text 0 (string->length text)) \" \") (substring\
    \ text 0 (string->length text))]\n    [(string=? (substring text 0 (string->length\
    \ text)) \"\\t\") (substring text 0 (string->length text))]\n    [(string=? (substring\
    \ text 0 (string->length text)) \"\\n\") \"\"]\n    [(string=? (substring text\
    \ 0 (string->length text)) \"\\r\") \"\"]\n    [else (substring text 0 (string->length\
    \ text))]))\n", "  (if (string-match #px\"^( +)\" text)\n      (replace (subseq\
    \ text 0 (string-match #px\"^( +)\" text) ) \"-\")\n      (if (string-match #px\"\
    ^( +)$\" text)\n          (replace (subseq text 0 (string-match #px\"^( +)$\"\
    \ text) ) \"_\")\n          (replace text \" \" \"_\") ) ))\n", "  (cond (string=\
    \ text \"\")\n        '()\n        (else\n         (string-replace\n         \
    \ text\n          \"\\s\"\n          (string-append \"_\" (replace-all text \"\
    \ \" \"_\")))\n         )))\n", "  (let ((i 0))\n    (loop while (re-matches #px\"\
    \\\\s\" text)\n          collect (match text\n                     #px\"\\s\"\
    \ (replace #px \" \" #px\"-\")\n                     #px\"\\s+\" (replace #px\
    \ \" \" #px\"_\")\n                     #px\"\\s+\" (replace #px \" \" #px\"_\"\
    ))\n          else (return text))\n    (when (string-length text) text))\n", " \
    \ (cond\n    [(empty? text) text]\n    [(equal? text (substring text 0 1)) (substring\
    \ text 0 1)]\n    [(equal? text (substring text 0 2)) (substring text 0 1)]\n\
    \    [else (cons (substring text 0 2) (fix_spaces (substring text 2)))]))\n",
  "  (cond\n    [(empty? text) \"\"]\n    [(space? text) (replace-all text \" \" \"\
    _\")]\n    [else\n     (replace-all (replace-all (replace-all text \" \" \"-\"\
    ) \"  \" \"-\") \"  \" \"_\")]\n    )\n  )\n", "  \n  (cond\n    ((string? text)\
    \ (cond \n                        ((string-length text)  ((make-string 1 \"_\"\
    ) text))\n                        ((string-length text)  (cons (make-string 1\
    \ \"-\") text))\n                        ((string-length text) (cons (make-string\
    \ 2 \"-\") text)))\n    ((char= (first text) \" \")\n     (cond \n       ((string-length\
    \ text)  ((make-string 1 \"_\") text))\n       ((string-length text)  (cons (make-string\
    \ 1 \"-\") text))\n       ((char= (second text) \" \") \n        (cond \n    \
    \      ((string-length text)  ((make-string 1 \"_\") text))\n          ((string-length\
    \ text)  (cons (make-string 1 \"-\") text))\n          ((char= (third text) \"\
    \ \") \n          (cond \n            ((string-length text)  ((make-string 1 \"\
    _\") text))\n            ((string-length text)  (cons (make-string 1 \"-\") text))\n\
    \            ((char= (fourth text) \" \") \n            (cond \n             \
    \ ((string-length text)  ((make-string 1 \"_\") text))\n              ((string-length\
    \ text)  (cons (make-string 1 \"-\") text))\n              ((char= (fifth text)\
    \ \" \") \n              (cond \n                ((string-length text)  ((make-string\
    \ 1 \"_\") text))\n                ((string-length text)  (cons (make-string 1\
    \ \"-\") text))\n                ((char= (sixth text) \" \") \n              \
    \  (cond \n                  ((string-length text)  ((make-string 1 \"_\") text))\n\
    \                  ((string-length text)  (cons (make-string 1 \"-\") text))\n\
    \                  ((char= (seventh text) \" \") \n                  (cons text\
    \ (make-string 1 \"_\")))\n                  ((char= (eigth text) \" \") \n  \
    \                (cons text (make-string 1 \"-\")))\n                  ((char=\
    \ (ninth text) \" \") \n                  (cons text (make-string 1 \"_\")))\n\
    \                  ((char= (tenth text) \" \") \n                  (cons text\
    \ (make-string 1 \"-\"))))\n              ((char= (ten text) \" \") \n       \
    \       (cons text (make-string 1 \"-\"))))\n          ((char= (eleven text) \"\
    \ \") \n          (cons text (make-string 1 \"-\"))))\n       ((char= (twelve\
    \ text) \" \") \n        (cons text (make-string 1 \"-\"))))\n    ((char= (",
  "  (cond\n    ((null? text)\n     empty)\n    ((string-length (car text)) \n   \
    \  (fix_spaces (rest text)))\n    ((string-equal? (car text) \" \")\n     (car\
    \ text))\n    ((string-equal? (car text) \"\")\n     (fix_spaces (rest text)))\n\
    \    ((string-equal? (car text) \"   \")\n     (replace_all (rest text) \" \"\
    \ \"_\"))\n    ((string-equal? (car text) \"   \\n\")\n     (replace_all (rest\
    \ text) \" \" \"_\"))\n    ((string-equal? (car text) \"\\n\")\n     (replace_all\
    \ (rest text) \" \" \"_\"))\n    ((string-equal? (car text) \" \")\n     (fix_spaces\
    \ (rest text)))\n    ((string-equal? (car text) \"\")\n     (fix_spaces (rest\
    \ text)))\n    ((string-equal? (car text) \"   \")\n     (replace_all (rest text)\
    \ \" \" \"_\"))\n    ((string-equal? (car text) \"   \\n\")\n     (replace_all\
    \ (rest text) \" \" \"_\"))\n    ((string-equal? (car text) \"\\n\")\n     (replace_all\
    \ (rest text) \" \" \"_\"))\n    ((string-equal? (car text) \" \")\n     (fix_spaces\
    \ (rest text)))\n    ((string-equal? (car text) \"\")\n     (fix_spaces (rest\
    \ text)))\n    ((string-equal? (car text) \"   \")\n     (replace_all (rest text)\
    \ \" \" \"_\"))\n    ((string-equal? (car text) \"   \\n\")\n     (replace_all\
    \ (rest text) \" \" \"_\"))\n    ((string-equal? (car text) \"\\n\")\n     (replace_all\
    \ (rest text) \" \" \"_\"))\n    ((string-equal? (car text) \" \")\n     (fix_spaces\
    \ (rest text)))\n    ((string-equal? (car text) \"\")\n     (fix_spaces (rest\
    \ text)))\n    ((string-equal? (car text) \"   \")\n     (replace_all (rest text)\
    \ \" \" \"_\"))\n    ((string-equal? (car text) \"   \\n\")\n     (replace_all\
    \ (rest text) \" \" \"_\"))\n    ((string-equal? (car text) \"\\n\")\n     (replace_all\
    \ (rest text) \" \" \"_\"))\n    ((string-equal? (car text) \" \")\n     (fix_spaces\
    \ (rest text)))\n    ((string-equal? (car text) \"\")\n     (fix_spaces (rest\
    \ text)))\n    ((string-equal? (car text) \"   \")\n     (replace_all (rest text)\
    \ \" \" \"_\"))\n    ((string-equal? (car text) \"   \\n\")\n", "  (cond\n   \
    \ [(equal? text \"\") \"\"]\n    [(equal? (string->list text) '()) \"\"]\n   \
    \ [else (cond\n            [(string->list? (car text)) (cond\n               \
    \           [(equal? (string-ref text 0) \" \") (substring (space-prefix text)\
    \ (string-length text))\n                          [(equal? (string-ref text 1)\
    \ \" \") (substring (space-suffix text) (string-length text))]\n             \
    \             [(equal? (string-ref text 1) (substring (space-prefix text) 2))\
    \ (substring (space-prefix text) (string-length text))\n                     \
    \     [(equal? (string-ref text 0) (substring (space-suffix text) 2)) (substring\
    \ (space-suffix text) (string-length text))]\n                          [(equal?\
    \ (string-ref text 0) \"(\" ) (substring (space-prefix text) 1)\n            \
    \              [(equal? (string-ref text 0) \")\" ) (substring (space-suffix text)\
    \ 1)\n                          [(equal? (string-ref text 0) \"(\" ) (substring\
    \ (space-prefix text) 1)\n                          [(equal? (string-ref text\
    \ 0) \")\" ) (substring (space-suffix text) 1)]\n                          [(equal?\
    \ (string-ref text 0) \"(\" ) (substring (space-prefix text) 1)\n            \
    \              [(equal? (string-ref text 0) \")\" ) (substring (space-suffix text)\
    \ 1)\n                          [(equal? (string-ref text 0) \"(\" ) (substring\
    \ (space-prefix text) 1)\n                          [(equal? (string-ref text\
    \ 0) \")\" ) (substring (space-suffix text) 1)\n                          [(equal?\
    \ (string-ref text 0) \"(\" ) (substring (space-prefix text) 1)\n            \
    \              [(equal? (string-ref text 0) \")\" ) (substring (space-suffix text)\
    \ 1)\n                          [(equal? (string-ref text 0) \"(\" ) (substring\
    \ (space-prefix text) 1)\n                          [(equal? (string-ref text\
    \ 0) \")\" ) (substring (space-suffix text) 1)\n                          [(equal?\
    \ (string-ref text 0) \"(\" ) (substring (space-prefix text) 1)\n            \
    \              [(equal? (string-ref text 0) \")\" ) (substring (space-suffix text)\
    \ 1)\n                          [(equal? (string-ref text 0) \"(\" ) (substring\
    \ (space-prefix text) 1)\n                          [(equal? (string-ref text\
    \ 0) \")\" ) (substring (space-suffix text) 1)\n                          [(equal?\
    \ (string-ref text 0) \"(\" ) (substring (space-prefix text) 1)\n            \
    \              [(equal? (string-ref text 0) \")\" ) (substring (space-suffix text)\
    \ 1)\n                          [(equal? (string-ref text 0) \"(\" ) (substring\
    \ (space-prefix text) ", "  (let ([spaces (count-whitespace text)]\n        [pairs\
    \ (count-pairs text)])\n    (if spaces\n        (if (> pairs 2)\n            (map\
    \ replace-whitespace (map replace-pair #\\s #\\_ text))\n            (map replace-whitespace\
    \ (map replace-whitespace text))))))\n", "  (cond [(or (not text) (= (length text)\
    \ 0)) '_]\n        [else\n         (let ([char (first text)])\n           (if\
    \ (eq char ' ')\n               (cons (string->symbol '_)\n                  \
    \   (rest text))\n               (cons char (fix_spaces (rest text)))))]))\n",
  "  (cond\n    [(or (string? text)\n          (number? text))\n     (string=? text\
    \ \" \")\n     text]\n    [else\n     (string->symbol (string->string text))\n\
    \     (replace (replace (replace (replace text (string \" \") \"_\") \"_\") \"\
    -\") \"-\" \"_\")]\n    [else\n     (error \"fix_spaces: Text must be a string\
    \ or number\")]))\n", "  (cond\n    ((empty? text) text)\n    ((char-whitespace?\
    \ text) (cond \n                            ((equal? (string->char (string-ref\
    \ text 0)) #\\Space) '_')\n                            ((equal? (string->char\
    \ (string-ref text 0)) #\\Tab) '-')\n                            ((equal? (string->char\
    \ (string-ref text 0)) #\\Newline) '-')\n                            ((equal?\
    \ (string->char (string-ref text 0)) #\\Space) '_')\n                        \
    \    (else text)))\n    ((char? (car text)) (cond \n                         \
    \   ((equal? (string->char (string-ref text 0)) #\\Space) '_')\n             \
    \               ((equal? (string->char (string-ref text 0)) #\\Tab) '-')\n   \
    \                         ((equal? (string->char (string-ref text 0)) #\\Newline)\
    \ '-')\n                            ((equal? (string->char (string-ref text 0))\
    \ #\\Space) '_')\n                            (else (fix_spaces (string->string\
    \ (car text)))))\n    (else (cond (\n               ((equal? (string->char (string-ref\
    \ text 0)) #\\Space) '_')\n               ((equal? (string->char (string-ref text\
    \ 0)) #\\Tab) '-')\n               ((equal? (string->char (string-ref text 0))\
    \ #\\Newline) '-')\n               ((equal? (string->char (string-ref text 0))\
    \ #\\Space) '_')\n               (else (fix_spaces (string->string (car text)))))\n\
    \               ((equal? (string->char (string-ref text 0)) #\\Newline) '-')\n\
    \               ((equal? (string->char (string-ref text 0)) #\\Space) '_')\n \
    \              (else (fix_spaces (string->string (car text)))))\n            \
    \   ((equal? (string->char (string-ref text 0)) #\\Tab) '-')\n               ((equal?\
    \ (string->char (string-ref text 0)) #\\Space) '_')\n               (else (fix_spaces\
    \ (string->string (car text)))))\n               (else (cond (\n             \
    \            ((equal? (string->char (string-ref text 0)) #\\Space) '_')\n    \
    \                     ((equal? (string->char (string-ref text 0)) #\\Tab) '-')\n\
    \                         ((equal? (string->char (string-ref text 0)) #\\Newline)\
    \ '-')\n                         ((equal? (string->char (string-ref text 0)) #\\\
    Space) '_')\n                         (else (fix_", "  (string-replace-all text\
    \ \" \" \"_\"))\n", "  (let ([len (string-length text)])\n    (if (= 1 len)\n\
    \        text\n        (if (or (char=? #\\space text)\n                (char=?\
    \ (substring-no-char text 0 len) #\\space))\n            (let ([first (substring-no-char\
    \ text 0 len)]\n                  [rest \n                   (string-append (substring\
    \ text (+ 1 len)) \"_\")]\n                  [chars (substring text (+ 1 len))]\n\
    \                  )\n              (if (string-length (concat rest chars)) >\
    \ 1)\n                (concat rest chars)\n                (recur (concat rest\
    \ chars) \n                       (substring text (+ 1 len))\n               \
    \        )\n                )\n            (substring text (+ 1 len))\n      \
    \      )\n        )\n    )\n  )\n", "  (define (helper str result count)\n   \
    \ (cond\n      [(null? str) result]\n      [(char=? #\\space str)\n       (helper\
    \ (cdr str) (cons (car str) result) (+ count 1))]\n      [else\n       (helper\
    \ (cdr str) result count)]\n      ))\n  (helper text '() 0))\n", "  (if (string?\
    \ text)\n      (if (> (string-length text) 2)\n          (let ((space (substring\
    \ text 0 1)))\n            (if (string=? space \"   \")\n                (substring\
    \ (string text) (+ 1 (string->list space)))\n                (substring text 0\
    \ 1)\n                )\n            text)\n      (if (string=? text \"   \")\n\
    \          (substring (string text) (+ 2 (string->list (substring text 0 1))))\n\
    \          (substring text 0 1)\n          )\n      text\n      )\n  )\n", " \
    \ (cond\n    [(string-length (string-trim text))\n     text]\n    [else (cond\
    \ \n            [(string-length (string-trim (substring text 0 (string-length\
    \ text)))) \n             (substring text 0 (string-length text))]\n         \
    \   [else (cond \n                    [(string-length (string-trim (substring\
    \ text 0 (string-length (substring text 0 (string-length text)))))) \n       \
    \              (substring text 0 (string-length (substring text 0 (string-length\
    \ (substring text 0 (string-length text))))))]\n                    [else (cond\
    \ \n                            [(string=? \" \" (substring text 0 (string-length\
    \ (substring text 0 (string-length (substring text 0 (string-length text)))))))\
    \ \n                             (substring text 0 (string-length (substring text\
    \ 0 (string-length (substring text 0 (string-length (substring text 0 (string-length\
    \ text)))))))]\n                            [else (cond \n                   \
    \                 [(string=? \"   \" (substring text 0 (string-length (substring\
    \ text 0 (string-length (substring text 0 (string-length (substring text 0 (string-length\
    \ text)))))))) \n                                     (substring text 0 (string-length\
    \ (substring text 0 (string-length (substring text 0 (string-length (substring\
    \ text 0 (string-length (substring text 0 (string-length text)))))))))]\n    \
    \                                [else (cond \n                              \
    \              [(string=? \"      \"  (substring text 0 (string-length (substring\
    \ text 0 (string-length (substring text 0 (string-length (substring text 0 (string-length\
    \ (substring text 0 (string-length (substring text 0 (string-length text))))))))))\
    \ \n                                            (substring text 0 (string-length\
    \ (substring text 0 (string-length (substring text 0 (string-length (substring\
    \ text 0 (string-length (substring text 0 (string-length (substring text 0 (string-length\
    \ (substring text 0 (string-length text))))))))))))]\n                       \
    \                     [else (cond \n                                         \
    \           [(string=? \"          \" (substring text 0 (string-length (substring\
    \ text 0 (string-length (substring text 0 (string-length (substring text 0 (string-length\
    \ (substring text 0 (string-length (substring text 0 (string-length (substring\
    \ text 0 (string-length (substring text 0 (string-length text)))))))))))) \n \
    \                                                   (substring text 0 (string-length\
    \ (substring text 0 (string-length (substring text 0 (string-length (substring\
    \ text 0 (string-length (substring text 0 (string-length (substring text 0 (string-length\
    \ (substring text 0 (string-length (", "  (let ((result (string text)))\n    (loop\
    \ for c in\n           result\n           for i from 0\n           for j from\
    \ 1\n           when (char=? c #\\s)\n           collect (char-replace c #\\s\
    \ #\\_)\n           collect (if (or (char=? c #\\s)\n                        (char=?\
    \ (string-ref result (+ i j)) #\\s))\n                       (char-replace c #\\\
    s #\\-)\n                       c))\n    result))\n", "  (cond [(empty? text)\
    \ text]\n        [(empty? (rest text)) text]\n        [(string-match (string-upcase\
    \ (first text)) #(\"[[:space:]]+\" #(\"[[:space:]]+\"))) #(cons (make-string (string-length\
    \ (first text)) #\\_) (fix_spaces (rest text)))]\n        [(string-match (string-upcase\
    \ (first text)) #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"\
    [[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\" #(\"[[:space:]]+\"\
    \ #(\"[[:space:]]+\" #", "  (cond [(= (length text) 0) \"\"]\n        [(or (char=?\
    \ #\\Space (char text 0)) \n            (char=? (char text 0) #\\Space)) \n  \
    \          (substring (text 0) 0 (- 1 (string-length text)))]\n        [else (substring\
    \ (text 0) 0 (string-length text))]))\n  ", "  (cond ((string-empty? text) text)\n\
    \        ((string=? (substring text 0 (string-length text)) \" \") \n        \
    \ (append (substring text 0 (string-length text))\n                 (list (list\
    \ \"_\") (list \"_\")))\n         )\n        (else \n         (cons (replace text\
    \ \" \" '_')\n                (fix_spaces (replace text \" \" '_' \n         \
    \                               (cons (list \"_\") (list \"_\")))))))\n      )",
  "  (cond\n    [(or (string=? text \"\")\n         (string=? text \"#\\Space\"))\
    \ text]\n    [(or (string=? (substring text 0 (string-length text)) \"\")\n  \
    \       (string=? (substring text 0 (string-length text)-1)) \"\")\n         (string-length\
    \ text) text]\n    [else\n     (cond \n       [(or (string=? (substring text 0\
    \ (string-length text)) \"\")\n            (string=? (substring text 0 (string-length\
    \ text)-1) \"\")\n            (string=? (substring text 0 (string-length text)-2)\
    \ \"\")\n            (string=? (substring text 0 (string-length text)-3) \"\"\
    )\n            (string=? (substring text 0 (string-length text)-4) \"\")\n   \
    \         (string=? (substring text 0 (string-length text)-5) \"\")\n        \
    \    (string=? (substring text 0 (string-length text)-6) \"\") text)\n       \
    \ (let ([spaces_count 0])\n           (cond\n            [(string=? (substring\
    \ text 0 (string-length text)) \" \")\n             (inc spaces_count)\n     \
    \        text]\n            [(or (string=? (substring text 0 (string-length text))\
    \ \"\")\n                 (string=? (substring text 0 (string-length text)-1)\
    \ \"\") text)\n             (inc spaces_count)\n             (if (and spaces_count\
    \ (> spaces_count 2)\n                     (string=? (substring text 0 (string-length\
    \ text)) \" \")) \n                 text\n                 (cond (> spaces_count\
    \ 2)\n                       (append \"-\" (substring text 0 (string-length text))))\n\
    \                 text)])]\n       [else\n        (append \"_\" (substring text\
    \ 0 (string-length text)))]))]))\n", "  (cond ((= (length text) 1)\n         (if\
    \ (not (whitespace? text))\n             text\n             '_))\n        (else\n\
    \         (if (not (whitespace? (first text))) \n             (fix_spaces (rest\
    \ text)) \n             (let ((next_text (rest text)))\n               (if (whitespace?\
    \ (first next_text))\n                   (fix_spaces (rest next_text))\n     \
    \              (cons (if (whitespace? (first text))\n                        \
    \    (cons (first text) '-)\n                            text)\n             \
    \             (fix_spaces (rest next_text)))))))))\n", "  (cond\n    ((null? text)\
    \ \"\")\n    ((string=? (car text) \" \") (cond \n                           \
    \   ((string=? (cadr text) \" \") \n                               (cons (car\
    \ text) (cons (cadr text) '_')))\n                              ((string=? (cadr\
    \ text) \"\") \n                               (cons (car text) '_'))\n      \
    \                        (else text))\n    ((string=? (car text) \"\") (cons (car\
    \ text) (cons (cadr text) '_')))\n    (else (cons (car text) (cons (fix_spaces\
    \ (cadr text)) '_')))\n  )\n)\n", "  (cond [(empty? text) text]\n        [(space?\
    \ text) \n         (append (make-string\n                  (count-at text #\\\
    s)\n                  #\\_)\n                 (substring (tail text) 0 -1))]\n\
    \        [else\n         (append (make-string\n                  (count-at text\
    \ #\\s)\n                  #\\_)\n                 (substring (tail text) 0 -1)\
    \ (fix_spaces (substring (tail text) 1 -1)))]))\n", "  (let ((replace-with-underscores\
    \ '())\n        (replace-with-dash '()))\n    (for ((i 0 (in-range (length text)))\n\
    \          (s (substring (text i) (in-range (length text))))\n      (if (equal?\
    \ (substring s 0 1) space)\n          (if (or (= (length s) 3)\n             \
    \      (= (length s) 4))\n              (begin\n                (set! replace-with-dash\
    \ (cons s replace-with-dash))\n                (set! replace-with-underscores\
    \ (cons s replace-with-underscores))\n                (set! i (inc i)))))\n  \
    \    (begin\n        (set! replace-with-dash (cons (substring s 0 1) replace-with-dash))\n\
    \        (set! replace-with-underscores (cons (substring s 0 1) replace-with-underscores))\n\
    \        (set! i (inc i))))\n    (if (> (length replace-with-dash) 2)\n      \
    \  (concat\n         (if (equal? (substring replace-with-dash 0 1) space)\n  \
    \           (if (or (= (length replace-with-dash) 3)\n                     (=\
    \ (length replace-with-dash) 4))\n                 (cons (substring replace-with-dash\
    \ 0 2) replace-with-dash)\n                 (cons (substring replace-with-dash\
    \ 0 1) replace-with-dash))\n             replace-with-dash)\n         replace-with-dash)))\n",
  "  (cond\n    [(empty? text) empty]\n    [(equal? (car text) space) (cons (car text)\
    \ (fix_spaces (cdr text)))]\n    [else (cons (car text) (fix_spaces (cdr text)))]))\n",
  "  (cond\n    [(empty? text) (list '())]\n    [else \n     (cond\n       [(equal?\
    \ text (first text)) (list text)]\n       [(string= (first text) (first text)\n\
    \                (fix_spaces (substring (second text) 0 -1))\n               \
    \ (fix_spaces (substring (second text) 0 -1)))]\n       [(string= (first text)\
    \ (first text)\n                (fix_spaces (substring (second text) 0 -1))\n\
    \                (fix_spaces (substring (second text) 0 -1)))]\n       [(equal?\
    \ text (first text) (second text))\n                (list text)]\n       [else\
    \ (list text)]))]))\n", "  (cond [(not (string? text)) (error \"fix_spaces: string\
    \ not provided\")]\n        [(equal? (length text) 0) \"\"]\n        [(equal?\
    \ (length text) 1) (string text)]\n        [(equal? (string->list (string->string\
    \ text))\n                (cond [(equal? (string->string text)\n             \
    \             (list #\\Space) (list #\\Underscore))]\n                      [(string->string\
    \ (equal? (string->string text)\n                                         (list\
    \ #\\Space) (list #\\Underscore)))\n                       (list #\\Space) (list\
    \ #\\Underscore)]\n                      [(equal? (string->string text) (list\
    \ #\\Space))\n                       (list #\\Space)]\n                      [(equal?\
    \ (string->string text) (list #\\Underscore))\n                       (list #\\\
    Underscore)])]\n        [(equal? (string->string (list->string text))\n      \
    \          (cond [(equal? (string->string (list->string text)) \n            \
    \              (list #\\Space) (list #\\Underscore))]\n                      [(string->string\
    \ (equal? (string->string (list->string text)) \n                            \
    \             (list #\\Space) (list #\\Underscore)))\n                       (list\
    \ #\\Space) (list #\\Underscore)]\n                      [(equal? (string->string\
    \ (list->string text)) (list #\\Space))\n                       (list #\\Space)]\n\
    \                      [(equal? (string->string (list->string text)) (list #\\\
    Underscore))\n                       (list #\\Underscore)])]\n        [else (cond\
    \ [(equal? (string->string (list->string text))\n                         (list\
    \ #\\Space) (list #\\Underscore))]\n                   [(equal? (string->string\
    \ (list->string text))\n                         (list #\\Space) (list #\\Underscore))]\n\
    \                   [(equal? (string->string (list->string text))\n          \
    \               (list #\\Space) (list #\\Underscore))]\n                   [(equal?\
    \ (string->string (list->string text))\n                         (list #\\Space)\
    \ (list #\\Underscore))]\n                   [(equal? (string->string (list->string\
    \ text))\n                         (list #\\Space) (list #\\Underscore))]\n  \
    \                 [(equal? (string->string (list->string text))\n            \
    \             (list #\\Space) (list #\\Underscore))]\n                   [(equal?\
    \ (string->string (list->string text))\n                         (list #\\Space)\
    \ (list #\\Underscore))]\n                   [(equal? (string->string (list->string\
    \ text))\n                         (", "  (cond [(empty? text) empty]\n      \
    \  [(or (string=? (substring text 0 1) space) (string=? (substring text 0 1) (substring\
    \ text 0 1)))\n         (append (if (string=? (substring text 0 1) space)\n  \
    \                   (cons (substring text 0 2) (substring text 2 2))\n       \
    \              (cons (substring text 0 2) (substring text 2 1)))\n           \
    \       (cons (substring text 0 1) (substring text 1 1)))]\n        [else (cons\
    \ (substring text 0 1) (fix_spaces (substring text 1 end))))]))\n", "  (cond [(empty?\
    \ text) \"\"]\n        [(space? text) (cons (char-after-index (car text) text))\n\
    \                 (fix_spaces (substring (remove (car text) (car text))))]\n \
    \       [else (cons (car text) (fix_spaces (substring (remove (car text) (car\
    \ text))))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
