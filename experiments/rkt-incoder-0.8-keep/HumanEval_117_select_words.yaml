name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  ;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n;; select_words(\"\
  Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"simple\
  \ white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"]\n\
  ;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) (list '())]\n    [(not (> (length s) n)) (list\
    \ '())]\n    [else (cons (substring s 0 ((length s) - (length s) (- n 1))) (select_words\
    \ (substring s ((length s) (- n 1)) n)))]))\n", "  (cond\n    [(empty? s)\n  \
    \   #|]\n    [(= 0 n)\n     (cons (first s)\n           (select_words (rest s)\n\
    \                         (sub1 n)))]\n    [else\n     (cons (first s)\n     \
    \      (select_words (rest s)\n                         (sub1 n))\n          \
    \ (select_words (rest (rest s)\n                          (sub1 n))))]))\n", " \
    \ (if (empty? s)\n      '()\n      (cons (car s) (select_words (cdr s) n))))\n",
  "  (cond\n    ((empty? s) '())\n    ((= n 0) '())\n    ((<= n 1) '())\n    (else\
    \ (cons (substring (first s) 0 (- (string-length s) (number->natural (string-length\
    \ s))) (substring (first s) (number->natural (string-length s))))\n          \
    \     (select_words (substring (first s) (+ 2 (string-length s)) (- n))))))\n",
  "  (cond [(empty? s) '()]\n        [(= 0 (string-length s))\n         (cons (car\
    \ s) (select_words (cdr s) n))]\n        [else\n         (append (select_words\
    \ (substring s 0 n) (- n 1))\n                   (list (substring s (string-length\
    \ s) 1))\n                   (select_words (substring s n (- n 1))\n         \
    \                       n))]))\n", "  (cond\n    [(empty? s) (list)]\n    [else\
    \ (list* (car (split-string (remove-all #\\space (substring s 0 (string-length\
    \ s))))) \n                (select_words (substring (remove-all #\\space s) (n\
    \ (car s)))))]))\n", "  (cond\n    [(empty? s) '()]\n    [(equal? (length s) n)\
    \ '()]\n    [(equal? (length s) 0) '()]\n    [else\n     (append (select_words\
    \ (substring s 0 1) n) (select_words (substring s 1 n) (- n 1))))]))\n", "  (cond\
    \ ((empty? s) '())\n        (else (append (if (or (char=? (first s) ' ') (char=?\
    \ (first s) 'h'))\n                           (cons (first s) (select_words (rest\
    \ s) n))\n                           (select_words (rest s) n))))))\n", "  (cond\
    \ ((empty? s) (list))\n        ((eq? n 0)\n         (empty? (first s)))\n    \
    \    (else\n         (cons (first s)\n               (select_words (rest s) (sub1\
    \ n))))))\n", "  (if (null? s)\n      (list)\n      (append (list-contains-n-consonants\
    \ s (- n 1))\n               (select_words (rest s) n))\n      )\n  )\n", "  (cond\n\
    \    [(empty? s) (list)]\n    [else (cons (substring (string s) 0 n) (select_words\
    \ (substring (string s) (+ 0 (+ n (length (string s)))))))]))\n", "  (if (empty?\
    \ s)\n      ()\n      (cond\n        ((equal? n (length s))\n         (cons (car\
    \ s) (select_words (cdr s) n)))\n        ((equal? n (length s) (words (car s)))\
    \ (cons (car s)\n                                                   (select_words\
    \ (cdr s) n)))\n        (else (select_words (cdr s) n))))))\n", "  (cond [(empty?\
    \ s) empty]\n        [else\n         (cons (car s)\n              (select_words\
    \ (cdr s)\n                           (sub1 n)))]))", "  (cond\n    [(empty? s)\
    \ (list)]\n    [(= 1 (length s))\n     (list)]\n    [(= 0 (length s))\n     (list)]\n\
    \    [else\n     (let ([letter (first s)])\n       (cond\n         [(= n 1)\n\
    \          (cons letter select_words (rest s))]\n         [(= 0 (sub1 (length\
    \ s))) empty]\n         [else (cons (sub1 letter) (select_words (rest s) (sub1\
    \ (length s))))])))]))\n", "  (cond\n    [(empty? s) '()]\n    [(= 0 (length (string-split-safe\
    \ s (reverse (filter (lambda (x) (char-type x))) n)))) '()]\n    [else (cons (filter\
    \ (lambda (x) (char-type x)) s) (select_words (filter (lambda (x) (not (char-type\
    \ x)) s) n))]))) \n", "  (cond\n    [(empty? s) '()]\n    [(= n 0)\n     (if (empty?\
    \ (first s))\n         ''\n         (cons (first s) (select_words (rest s) n)))]\n\
    \    [else\n     (cons (first s)\n            (cons (select_words (rest s) (sub1\
    \ n))\n                   (select_words (rest s) n)))]))\n", "  (cond\n    [(empty?\
    \ s) (list '())]\n    [(eq? (length s) 1) (list (list '()))]\n    [(empty? (rest\
    \ s)) (list '())]\n    [(empty? (rest s)) (list '())]\n    [(and (char=? (first\
    \ s) 'a) (char=? (first s) 'z'))\n        (list (list (first s) (first s))\n \
    \              (select_words (rest s) n))]\n    [(and (char=? (first s) 'a) (char=?\
    \ (first s) 'z'))\n        (list (list (first s) (first s))\n               (select_words\
    \ (rest s) n))]\n    [(and (char=? (first s) 'a) (char=? (first s) 'z'))\n   \
    \     (list (list (first s) (first s))\n               (select_words (rest s)\
    \ n))]\n    [(and (char=? (first s) 'a) (char=? (first s) 'z'))\n        (list\
    \ (list (first s) (first s))\n               (select_words (rest s) n))]\n   \
    \ [else (list (cons (first s)\n                   (select_words (rest s) n))])))\
    \ ;;(list (cons (first s) (select_words (rest s) n))))\n", "  (cond\n    ((empty?\
    \ s) (list))\n    ((eq? n 0) (list s))\n    ((equal? (count (first-char s)) n)\
    \ (list s))\n    (else (filter (lambda(x) (equal? (count (first-char x)) n)) (split_string\
    \ (text s) #\\Space #\\Letter)))))\n", "  (cond\n    [(empty? s) '()]\n    [(=\
    \ n 0)\n     (cons (first s) (select_words (rest s) 1))]\n    [(empty? (rest s))\
    \ '()]\n    [else\n     (cons (first s)\n           (select_words (rest s) (sub1\
    \ n)))]))\n", "  (cond\n    [(or (empty? s)) (list)]\n    [(= 0 (length s)) '()]\n\
    \    [else (cons (list-ref (filter (lambda (x) (contains-exact-n n x)) (subseq\
    \ s 0 (length s))) '())\n               (select_words (subseq s 0 (length s))\
    \ n))]\n  )\n)\n", "  (define (helper s n word)\n    (cond\n      [(or (empty?\
    \ s) (equal? word word)) word]\n      [(equal? (char s 0) (char s n)) (helper\
    \ s (- n 1) word)]\n      [else (helper (string (cdr s) \" \") n (cons word \"\
    \"))]))\n  (helper s n \"\"))\n</code>\n<|/ a dscore=0 tags=racket,scheme,list,string\
    \ |>\n<| a |>\n<code>", "   ;; TODO: use an accumulator to build up the result\n\
    )\n", "  (cond\n    [(equal? s \"\") empty]\n    [(zero? (string-length s)) empty]\n\
    \    [(equal? n 0) empty]\n    [else (append (substring s 0 (string-length s)\
    \ (* n -1))\n                    (select_words (substring s (+ 0 (* n (string-length\
    \ s))) (n))\n                              (n-1))]))) ; #lang racket\n", "  (cond\n\
    \    [(empty? s)\n     '()]\n    [(= n 0)\n     '()]\n    [else\n     (cons (first\
    \ s)\n           (select_words (rest s) (sub1 n)))]))\n", "  (cond\n    [(empty?\
    \ s) (list)] \n    [(= 0 (length s)) (list)] \n    [(= 0 (modulo n (length s))\
    \ (count_consonants (first s)) ) (cons (first s) (select_words (rest s) n))]\n\
    \    [else (cons (first s) (select_words (rest s) n))]))\n", "  (cond [(empty?\
    \ s) '()]\n        [(= (length s) 0) '()]\n        [(= n 0) '()]\n        [(even?\
    \ n) '(select_words (rest s) (sub1 n))]\n        [else (cons (first s)\n     \
    \               (select_words (rest s)\n                                 (sub1\
    \ (quotient n 2)))])))\n", "  (cond \n    ((empty? s) (list)  \n    ((eq? (count\
    \ s) n) \n        (cons s (list)))\n    (else\n        (cons (car s)(select_words\
    \ (cdr s) n)))\n   )\n )\n)\n", "  (cond\n    ((empty? s) '())\n    ((= (length\
    \ s) n) (list s))\n    ((char? (car s)) (if (char-digit? (car s))\n          \
    \              (list s)\n                        (cons (car s)\n             \
    \                 (select_words (cdr s)\n                                    \
    \      (sub1 (+ n 1))))))))\n", "  (cond\n    [(empty? s)\n     (empty-list)\n\
    \     (append (list->string (take n (string->list s))) empty-list)] \n    [(empty?\
    \ (rest s))\n     (empty-list)\n     (append (list->string (take n (string->list\
    \ s))) empty-list)] \n    [(equal? (string->list (take n (string->list s))) (list->string\
    \ (take n (string->list (rest s)))))\n     (append (list->string (take n (string->list\
    \ (take n (string->list (rest s))))))\n             (select_words ((string->list\
    \ (rest s)) n) n)] \n    [(equal? (string->list (take n (string->list s))) (list->string\
    \ (take n (string->list (rest s)))))\n     (append (list->string (take n (string->list\
    \ (take n (string->list (rest s))))))\n             (select_words (rest s) n)]\
    \ \n    [else\n     (append (list->string (take n (string->list s))) empty-list)]))\n",
  "  (cond\n    [(empty? s) '()]\n    [(= 0 (length s)) '()]\n    [(zero? (count-consonants\
    \ s))\n      (cons (first s)\n            (select_words (rest s) n))]\n    [else\
    \ (cons (first s)\n                 (select_words (rest s) n))]\n  ))", "  (cond\n\
    \    [(empty? s) '()]\n    [(not (= (length (first s)) n)) '()]\n    [(list? (first\
    \ s)) (list (select_words (first s) n) (select_words (rest s) n))]))\n", "  (cond\n\
    \    [(empty? s) '()]\n    [(= n (length s)) '()]\n    [else (cons (first s)\n\
    \                (select_words (rest s) (sub1 n)))]))\n", "  (cond\n    [(empty?\
    \ s) '()]\n    [(equal? (count-consonants s) n) '()]\n    [else (cons (car s)\n\
    \                 (select_words (cdr s) n))]\n    )\n  )\n", "  (cond (empty?\
    \ s) '()\n        (= n 0) '()\n        (equal? (char-lower-case (car s)) char-lower-case)\n\
    \        (equal? (char-upper-case (car s)) char-upper-case)\n        (equal? (char-title\
    \ (car s)) char-title)\n        (equal? (char-upper-case (rightmost-consonant\
    \ (car s))) char-upper-case)\n        (equal? (char-lower-case (rightmost-consonant\
    \ (car s))) char-lower-case)\n        (equal? (char-upper-case (rightmost-consonant\
    \ (rightmost-consonant (car s))))\n                char-upper-case)\n        (equal?\
    \ (char-lower-case (rightmost-consonant (rightmost-consonant (rightmost-consonant\
    \ (car s))))\n                char-lower-case)\n        (select_words (rest s)\
    \ (- n 1))\n        (select_words (rest s) n))\n    )\n", "  (if (empty? s) (list)\
    \ \n    (let ((head (first s)) (tail (rest s))) \n      (if (equal? n 0) (cons\
    \ head (select_words (rest tail) n))\n        (cons (cons head (select_words (first\
    \ tail) (sub1 n)))\n               (select_words (rest tail) n)))))) \n", "  (cond\
    \ [(empty? s)\n         (list)\n         ]\n        [(= (length s) 0)\n      \
    \   empty\n         ]\n        [(or (char=? (first s) (first '(a b c d e f g h\
    \ i j k l m n o p q r s t u v w x y z))\n                  (char=? (first s) (first\
    \ '(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z)))\n           (char=?\
    \ (first s) (first '(0 1 2 3 4 5 6 7 8 9))))\n         (cons (first s) (select_words\
    \ (rest s) n))\n         ]\n        [(eqv? (char=? (first s) (first '(a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z))\n                   (first '(A\
    \ B C D E F G H I J K L M N O P Q R S T U V W X Y Z)))\n         (cons (first\
    \ s) (select_words (rest s) n))\n         ]\n        [else\n         (cons (first\
    \ s) (select_words (rest s) n))\n         ]\n        ))\n", "  (cond\n    [(empty?\
    \ s) (list)] \n    [(equal? (length s) 0) (list)] \n    [(equal? (length s) n)\
    \ (list s)]\n    [else (append (select_words (rest s) n) (list (first s))])))\
    \ \n", "  (if (empty? s)\n      '()\n      (cons (substring-before (first s) \"\
    \ \") (select_words (rest s) n))\n  )\n)\n", "  (define (loop s n acc)\n    (cond\n\
    \      [(empty? s) (cons acc '())]\n      [(empty? n) (cons acc '())]\n      [else\
    \ (if (char=? (first s) (first n)) \n                  (loop (rest s) (sub1 n)\
    \ \n                        (cons (first s) acc))\n                  (loop (rest\
    \ s) (sub1 n) acc))]\n    )\n  )\n  (loop s n '())\n)\n", "  (cond\n    [(empty?\
    \ s) (list '())]\n    [(not (empty? s)) (cons (first s)\n                    \
    \    (select_words (rest s) n))]\n    [(= n 0) (list (first s))]\n    [else (cons\
    \ (first s)\n               (select_words (rest s) (- n 1)))]))\n", "  (cond [(string=?\
    \ s \"\") \"\"]\n        [(= n 0)\n         \"\"]\n        [(string=? (string-ref\
    \ s \"#\\Space\") \"\") (select-words (string-remove s \"#\\Space\") 1)]\n   \
    \     [(string=? (string-ref s \"#\\Newline\") \"\") (select-words (string-remove\
    \ s \"#\\Newline\") 1)]\n        [(string=? (string-ref s \"#\\Tab\") \"\") (select-words\
    \ (string-remove s \"#\\Tab\") 1)]\n        [(string=? (string-ref s \"#\\EOL\"\
    ) \"\") (select-words (string-remove s \"#\\EOL\") 1)]\n        [(string=? (string-ref\
    \ s \"#\\Tab\") \"\")\n         (let ([result (select-words (string-remove s \"\
    #\\Tab\") 1)])\n           (cons (concat result) (select-words (string-remove\
    \ s \"#\\Tab\") (sub1 n))))]\n        [(string=? (string-ref s \"#\\Newline\"\
    ) \"\")\n         (let ([result (select-words (string-remove s \"#\\Newline\"\
    ) 1)])\n           (cons (concat result) (select-words (string-remove s \"#\\\
    Newline\") (sub1 n))))]\n        [(string=? (string-ref s \"#\\Space\") \"\")\n\
    \         (let ([result (select-words (string-remove s \"#\\Space\") 1)])\n  \
    \         (cons (concat result) (select-words (string-remove s \"#\\Space\") (sub1\
    \ n))))]\n        [(or (= (string-length s) 0) (string=? (string-ref s \"#\\Space\"\
    ) \"\"))\n         (select-words (string-remove s \"#\\Space\") n)]\n        [(string=?\
    \ (string-ref s \"#\\Space\") \"\")\n         (select-words (string-remove s \"\
    #\\Space\") (sub1 n))])\n)\n", "  (cond\n    [(empty? s) '()]\n    [(= n 1) (cons\
    \ (first s) (select_words (rest s) 1))]\n    [(= (length s) n) (cons (first s)\
    \ (select_words (rest s) 1))]\n    [else (cons (first s)\n                (select_words\
    \ (rest s) (sub1 (length s)))\n                (select_words (rest s) (sub1 (length\
    \ s))))]))\n", "  (if (eq? n 0)\n      '()\n      (if (eq? s \"\")\n         \
    \ '()\n          (cons (substring s 0 n) (select_words (substring s n) (n-1))))))\n",
  "  (cond\n    [(empty? s) '()]\n    [(= 0 (length s)) (list s)]\n    [else\n   \
    \  (cond\n       [(equal? (length s) n) (list s)]\n       [(equal? (length s)\
    \ (- n (length s))) (list s)]\n       [else\n        (map (lambda (x)\n      \
    \    (if (char=? x 'a | char=? x 'o | char=? x 'e)\n            x)\n         \
    \ (if (char=? x 'u | char=? x 'l | char=? x 'l)\n            x)\n          (if\
    \ (char=? x 's | char=? x 'd | char=? x 'd)\n            x)\n          (if (char=?\
    \ x 'i | char=? x 'n | char=? x 'n)\n            x)\n          (if (char=? x 'r\
    \ | char=? x 'c | char=? x 'c)\n            x)\n          (if (char=? x ' ' |\
    \ char=? x '\\t)\n            x)\n          (if (char=? x '\\n)\n            x)\n\
    \          (if (char=? x '\\t)\n            x)\n          (if (char=? x '\\r)\n\
    \            x)\n          (if (char=? x '\\v)\n            x)\n          (if\
    \ (char=? x '\\f)\n            x)\n          (if (char=? x '\\n)\n           \
    \ x)\n          (if (char=? x '\\v)\n            x)\n          (if (char=? x '\\\
    f)\n            x)\n          (if (char=? x '\\n')\n            x)\n         \
    \ (if (char=? x '\\v)\n            x)\n          (if (char=? x '\\f)\n       \
    \     x)\n          (if (char=? x '\\a)\n            x)\n          (if (char=?\
    \ x '\\e)\n            x)\n          (if (char=? x '\\o)\n            x)\n   \
    \       (if (char=? x '\\u)\n            x)\n          (if (char=? x '\\l)\n \
    \           x)\n          (if (char=? x '\\e)\n            x)\n          (if (char=?\
    \ x '\\n)\n            x)\n          (if (char=? x '\\o)\n            x)\n   \
    \       (if (char=? x '\\u)\n            x)\n          (if (char=? x '\\l)\n \
    \           x)\n          ", "  (cond \n    [(empty? s)\n     empty]\n    [(equal?\
    \ n 0)\n     (cons s (empty s))]\n    [else\n     (cons (first (split-string (string\
    \ (substring s 0 (length s) n)) #\\consonant)) \n           (select_words (rest\
    \ (split-string (string (substring s 0 (length s) n)) #\\consonant)) n))]\n  )\n\
    )\n", "  (cond\n    [(empty? s) (empty-words)]\n    [(equal? n (length (car s)))\
    \ (cons (car s) (empty-words))]\n    [else (cons (car s) (select_words (cdr s)\
    \ n))]\n  )\n)", "  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [(= (length\
    \ s) 0) '()]\n    [(= n 1)\n     (cons (first s)\n           (select_words (rest\
    \ s) (sub1 n)))]\n    [else\n     (cons (first s)\n           (select_words (rest\
    \ s) (sub1 n)))]))\n", "  (cond\n    [(empty? s) empty]\n    [(empty? (rest s))\
    \ empty]\n    [(equal? (count (first s) \"a\" \"e\" \"i\" \"o\" \"u\")) \n   \
    \  (cons (first s) (select_words (rest s) n))]\n    [(equal? (count (first s)\
    \ \"a\" \"e\" \"i\" \"o\" \"u\")) \n     (cons (first s) (select_words (rest s)\
    \ n))]\n    [else (cons (first s) (select_words (rest s) n))]))\n</code>\n<|/\
    \ q |>\n<| c |>\nThis question appears to be off-topic because it is about an\
    \ assignment given to you by your instructor.\n<|/ c |>\n<| c |>\nThis question\
    \ is not about an assignment or assignment-related question, but rather about\
    \ a general programming question with a specific purpose that could be answered\
    \ without asking your instructor to do it for you. This may be useful to future\
    \ readers.\n<|/ c |>\n<| c |>\nI edited the question to make it a bit more clear.\
    \ Thank you.\n<|/ c |>\n<| c |>\nPlease read [Under what circumstances may I add\
    \ \u201Curgent\u201D or other similar phrases to my question, in order to obtain\
    \ faster answers?](//meta.stackoverflow.com/q/326569) - the summary is that this\
    \ is not an ideal way to address volunteers, and is probably counterproductive\
    \ to obtaining answers. Please refrain from adding this to your questions.\n<|/\
    \ c |>\n<| a dscore=2 |>\nThe solution presented in the question is unnecessarily\
    \ complex. It can be written in a single loop without repetition and without any\
    \ extra variables:\n<code>", "  (cond\n    [(empty? s) '()]\n    [(equal? (count_consonants\
    \ s) n) (string->list s)]\n    [else (cons (string->list s)\n                (select_words\
    \ (rest s) n))]\n  )\n)\n", "  (cond\n    [(empty? s) '()]\n    [(not (eq? (caar\
    \ s) '#\\s)) '()]\n    [(empty? (cdr s)) (map (lambda (s) (list s)) (cdr s))]\n\
    \    [else (map (lambda (s) (cons (substring s 0 n) s)) \n             (select_words\
    \ (cdr s) n))]))\n", "  (cond [(= n 0) (list \"\")]\n        [(= n 1)\n      \
    \   (cons (substring (string s) 0 (string-length s) (set! s (substring (string\
    \ s) 0 (string-length s) n))\n                   nil) nil)\n         s]\n    \
    \    [else\n         (cons (substring (string s) 0 (string-length s) (set! s (substring\
    \ (string s) 0 (string-length s) n))\n                                 (select_words\
    \ (substring (string s) 1 (string-length s) n) (n-1))\n                   nil)\
    \ nil)\n         (select_words (substring (string s) 1 (string-length s) n) (n-1))]))\n",
  "  (cond\n    [(empty? s) '()]\n    [(equal? (string-length s) 0) '()]\n    [(=\
    \ (count (car (partition n s #:when (string=? (car (car s)) #\\Space)))) n) (cons\
    \ (car (car s)) (select_words (cdr s) n))])\n    [else (cons (car (car s)) (select_words\
    \ (cdr s) n))]))\n", "  (cond\n    [(or (empty? s) (null n)) '()]\n    [(= (length\
    \ s) 0) '()]\n    [(= (length s) 1) '(first s)]\n    [(= (length s) (- n 1)) (cons\
    \ (first s) (select_words (rest s) n))]))\n", "  (cond\n    [(empty? s) (list\
    \ '())]\n    [(= (length s) n) (list s)]))\n", "  (if (or (empty? s) (empty? (subseq\
    \ s 0 (- (length s) n))))\n      \n      []\n      (cons (subseq s 0 (- (length\
    \ s) n)) (select_words (subseq s n (+ (length s) n)) n))))\n", "  (cond\n    [(empty?\
    \ s) (list)]\n    [(equal? (count s) n) empty]\n    [else (cons (car s) (select_words\
    \ (cdr s) n))]\n  )\n)\n", "  (cond\n    [(empty? s) (list empty)]\n    [(zero?\
    \ n) (list empty)]\n    [else (cons (cdr s)\n                (cons (car s)\n \
    \                      (select_words (rest s) (sub1 n)))\n                (select_words\
    \ (cdr s) (sub1 n)))]))\n", "  (if (empty? s) '()\n      (cons (car (split-at\
    \ (length s) (cons (count-vowels s) n)))\n            (select_words (cdr s) n))))\n",
  "  (if (empty? s)\n      ()\n      (cons (first s)\n            (select_words (rest\
    \ s) n))))\n#lang racket\n", "   ;; Return the first string that contains the\
    \ most words.\n   ;; Return empty if there are no such strings.\n   (cond\n  \
    \   ((equal? n 0) (cond\n                        ( (equal? s \"\") \"\")\n   \
    \                     ((equal? s \" \") \"\")\n                        (else (error\
    \ \"Select words with 0 or fewer letters.\"))))\n     ((equal? s \"\") (cond\n\
    \                      ((equal? n 0) \"\")\n                      ((equal? n 1)\
    \ (first words-containing-at-most-n-consonants))\n                      (else\
    \ (error \"Select words with 0 or fewer letters.\"))))\n     (else (cond\n   \
    \            ((equal? s \" \") \"\")\n               ((equal? s \"\") (cond\n\
    \                              ((equal? n 0) \"\")\n                         \
    \     ((equal? n 1) (first words-containing-at-most-n-consonants))\n         \
    \                     (else (error \"Select words with 0 or fewer letters.\")))))\n\
    \     )\n   )\n)\n", "  (let loop ((s s)\n             (acc '()))\n    (cond ((null?\
    \ s) '())\n          ((equal? (length (string->list s)) n)\n           (cond ((equal?\
    \ (length (string->list s)) 1)\n                   (reverse acc))\n          \
    \         (else (cons (car s) acc))))\n          (else (cons (car s) \n      \
    \               (loop (cdr s) \n                          (cons (car s) acc)))))\n\
    \  (loop '() '())))\n", "  (cond ((null? s) (list))\n        ((= n 0) (list s))\n\
    \        (else (append (select_words (rest s) (sub1 n)) \n                   \
    \   (cons (first s) (select_words (rest s) (sub1 n)))))\n        ))\n", "  (cond\n\
    \    [(empty? s) (list)] \n    [(zero? n) (list s)]\n    [(and (> n 0) (even?\
    \ (length s))) (cons (substring s 0 n) (select_words (substring s (+ n 1) (- n\
    \ 1)))]\n    [else (select_words (substring s (+ n 1) (length s)) n)]))\n", " \
    \ (cond [(empty? s) '()]\n        [(equal? (char-alphabet (first s)) n) (cons\
    \ (first s) (select_words (rest s) n))]\n        [else (cons (first s) (select_words\
    \ (rest s) n))]\n        )\n  )\n)\n", "  (cond\n    [(empty? s) (list)]\n   \
    \ [(= 0 (length s)) (empty-set)]\n    [(= n 0) (empty-set)]\n    [else (let ([p\
    \ (first (partition-by (lambda (x) (= (string-length s) (string-length x))) s))])\n\
    \        (cons (substring p 0 n) (select_words (substring p n) (- n 1)))]))\n\
    \  )\n)\n", "  (cond\n    ((empty? s) '())\n    ((= n (length (first s))) (cons\
    \ (first s) (select_words (rest s) n)))\n    (else (select_words (rest s) n))))\n",
  "  (cond [(empty? s) (list)]\n        [(= 0 (length (filter symbol? (string->list\
    \ s))) ) empty]\n        [(= n 0) empty]\n        [else (cons (first s) (select_words\
    \ (rest s) (sub1 n)))]))\n", "  (cond\n    [(empty? s) (list)]\n    [(= (length\
    \ s) n) (list s)]\n    [else (list) (cons (first s)(select_words (rest s) n))]\n\
    \  ))", "  (define (helper s i n result)\n    (cond\n      [(string=? (substring\
    \ s i i) \" \") (helper (substring s i (+ i n)) i (+ i n) result)]\n      [(equal?\
    \ s \"\") (list)]))\n  (helper s 0 (length s) '()))\n", "  (if (empty? s)\n  \
    \    empty\n      (let ((counts (make-hash))\n            (ss (make-string (nth\
    \ (length s) n))))\n        (map \n         (lambda (word)\n           (if (not\
    \ (contains? counts word))\n               (append (ss (string->list (string->string\
    \ word))))\n               (add1 (get-count counts word))\n             (get-count\
    \ counts word))\n         (map string->string (all-substrs-in-string s))\n   \
    \      ss)))))\n", "  (if (empty? s)\n      '()\n      (cons (first s) \n    \
    \        (select_words (rest s) n)\n            (select_words (rest s) n))))\n",
  "  (cond (empty? s) empty\n        (string=? s \"\") empty\n        (= n 0) (list\
    \ s)\n        (string=? (first s) \"a\") (cons (first s) (select_words (rest s)\
    \ (sub1 n)))\n        (string=? (first s) \"e\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"i\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"o\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"u\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"y\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"l\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"s\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"t\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"d\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"h\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"w\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"f\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"v\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"y\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"p\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"n\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"b\") (cons (first s) (select_words\
    \ (rest s) (sub1 n)))\n        (string=? (first s) \"r\") (cons (first s) (select_words\
    \ (rest s) (", "  (cond\n    [(empty? s) (list)]\n    [(= (remainder (car s) n)\
    \ 0) \n     (if (empty? (cdr s)) '() (cons (car s) (select_words (cdr s) n)))]\n\
    \    [else (cons (car s) (select_words (cdr s) n))]\n  ))\n</code>\n<|/ a |>\n\
    <| c |>\nYou don't need `cdd` to get the remaining string in Common Lisp.\n<|/\
    \ c |>\n<| a |>\n<code>", "  (cond ((empty? s) '())\n        ((char=? (first s)\
    \ 'a) (select_words (rest s) n (cons s (first s)))\n        ((char=? (first s)\
    \ 'e) (select_words (rest s) n (cons s (first s)))\n        ((char=? (first s)\
    \ 'i) (select_words (rest s) n (cons s (first s)))\n        ((char=? (first s)\
    \ 'o) (select_words (rest s) n (cons s (first s)))\n        ((char=? (first s)\
    \ 'u) (select_words (rest s) n (cons s (first s)))\n        (else (cons s (select_words\
    \ (rest s) n))))))\n", "  (cond\n    [(empty? s) (list)]\n    [else (cond\n  \
    \          [(= (length s) n) (list)]\n            [(= (length s) 0) (list empty)]\n\
    \            [else (append (first (filter (lambda (x) (memq x \"aeiouAEIOU\"))\
    \ s))\n                       (select_words (substring s (+ 1 n)) n))))]))\n",
  "  (if (empty? s)\n      '()\n      (cons (first s)\n            (select_words (rest\
    \ s) (- n 1)))))\n", "  (cond [(empty? s) empty]\n        [(or (empty? (rest s))\
    \ (= (length (rest s)) n)) (list s)]\n        [else (cons (first (rest (rest s))\
    \ (cons (first s) (select_words (rest s) n)))\n                    (select_words\
    \ (rest s) n))]))\n", "  (define (cons_list s k)\n    (cond\n      [(empty? s)\
    \ (list '() k)] \n      [(eqv? (car s) '(#\\a)(empty? s)) (cons_list (cdr s) (k\
    \ + 1))]\n      [(eqv? (car s) #\\s)(cons_list (cdr s) k)]\n      [(< (length\
    \ s) n) (cons_list (cdr s) k)]\n      [else (cons_list (cdr s) (+ k (length (string-without-whitespaces\
    \ s))))]\n    ))\n  (cons_list s '()))\n", "  (cond\n    [(empty? s)(empty)]\n\
    \    [(= n 1)(cons s (empty))]\n    [else\n     (if (> n (length s))(select_words\
    \ (rest s) n)(cons (first s) (select_words (rest s) n)))]))\n", "  ;; (define\
    \ (select_words s n)\n  (cond\n    [(empty? s) '()]\n    [(= n (length (rest s)))\
    \ (rest s)] \n    [else (cons (car s) (select_words (cdr s) n))]))) ;; (select_words\
    \ \"Uncle sam\" 3)\n", "  (let loop ((s s)\n             (result '()))\n    (if\
    \ (empty? s)\n        result\n        (loop (rest s) (cons (first s)\n       \
    \                    (loop (rest s)\n                                 (cons (first\
    \ s) result)))))))\n", "  (cond\n    [(empty? s)\n     empty]\n    [(= n 0)\n\
    \     empty]\n    [(= (count s) n)\n     (list s)]\n    [else\n     (filter (lambda\
    \ (x)\n              (cond (empty? x)\n                     empty\n          \
    \           ((= (remainder x n) 0)\n                       (cons x (select_words\
    \ (rest x) n)))\n                     (else\n                       (select_words\
    \ (rest x) n))))\n            s))]))\n", "  (cond\n    [(empty? s) (list)] \n\
    \    [(= 0 (remainder (count s) n)) (list)]\n    [(= n (remainder (count s) n))\
    \ (cons (substring s 0 n) (select_words (substring s n (length s))))]))\n", " \
    \ (cond \n    [(empty? s) (list)] \n    [(= (length s) n) (list)] \n    [else\
    \ (cons (caar s)\n              (select_words (cdr (drop-last (filter \n     \
    \                                        #(lambda (x) (char=? x \"A\" \"B\" \"\
    C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"\
    P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" \"a\" \"b\" \"\
    c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"\
    p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\") \n          \
    \                                 (reverse s))) n)]))])\n", "  (cond\n    [(empty?\
    \ s) (list '())]\n    [(equal? (string-length s) 0)\n     (list '())]\n    [(equal?\
    \ (string-length s) n) (list s)]\n    [else (loop for i from 0 to (length (string-ref\
    \ s 0))\n           for j = (string-length s) downto 0\n           for k = i to\
    \ j\n           when (equal? (char (string-ref s k)) '(#\\Space))\n          \
    \ collect (substring (string s i j) (+ i j))]))) \n", "  (cond\n    ((null? s)\
    \ '())\n    ((equal? n (length s))\n     (append (map string->list s)\n      \
    \       (map (lambda(x) (if (string=? x \"a\")\n                             \
    \  \"aeiouAEIOU\"\n                               \"aeiouAEIOU\"))\n         \
    \         (filter (lambda (x) (equal? (length (string->list x)) n)) (map string->list\
    \ s))))\n    (else\n     (append (map string->list s)\n             (map (lambda(x)\
    \ (if (string=? x \"a\")\n                               \"aeiouAEIOU\"\n    \
    \                           \"aeiouAEIOU\"))\n                  (filter (lambda\
    \ (x) (equal? (length (string->list x)) n)) (map string->list s))))\n  )\n)\n\n\
    #lang racket\n", "  (cond\n    [(empty? s) (list)] \n    [(equal? (count s) n)\
    \ (cons s (list))]\n    [else (cons s (list (select_words (rest-string s) n)))]))\n",
  "  ...)\n</cell>\n<text>\nProblem 2\nNow suppose that you have a list of words and\
    \ a number n, and you want to find the words that occur at least n times in the\
    \ list. For example, if you have a list l and want to find all the words that\
    \ occur at least 4 times, you can do the following:\n", "  (cond \n    [(empty?\
    \ s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0) '()]\n    [else (append (substring\
    \ s (- (length s) n)) (select_words (substring s n) (sub (length s) (- n 1))))]))\n",
  "  (define (helper s n lst)\n    (if (<= n 0)\n      lst\n      (helper (substring\
    \ s 0 n) (substring s n n) (cons (substring s 0 n) lst))))\n  (helper s n '()))",
  "  (cond\n    [(equal? n 0) (list)] \n    [else (cons (substring (string s) 0 (-\
    \ n 1))\n               (select_words (substring (string s) 1 n))]))) \n", " \
    \ (cond\n    [(empty? s)\n     empty]\n    [(equal? n 1)\n     (cons (car s) empty)]\n\
    \    [(equal? n 2)\n     (cons (car s) (select_words (cdr s) 1))]\n    [else\n\
    \     (cons (car s)\n           (select_words (cdr s)\n                      \
    \   (- n (length (car s))))]))) ;; #lang racket\n</cell>\n<text>\nExercise 6:\
    \ Consider the list of words returned by your select_words procedure in the previous\
    \ exercise. Write a function named select_words such that when you supply a non-empty\
    \ list of words and a non-negative number n you get a list containing all the\
    \ words from the list that are exactly n characters long.\n\n\n</text>\n<cell>",
  "  (cond\n    [(null? s) (empty-words-list)] \n    [(string=? s (substring s 0 n))\
    \ (cons s (select_words (substring s n) n))]\n    [else (cons (substring s 0 (-\
    \ (length (string->list s) n)))\n                (select_words (substring s n)\
    \ n))]))\n", "  (cond\n    [(empty? s) (list)] \n    [(equal? n (length s))\n\
    \     (cond\n       [(equal? n (length s)) (list s)]\n       [(equal? n 0)\n \
    \       (cond\n          [(equal? (first s) (first s)) \n           (cond\n  \
    \           [(equal? (rest s) (rest s)) \n               (cond\n             \
    \    [(equal? (first s) (first s)) \n                   (cond\n              \
    \       [(equal? (rest s) (rest s)) (list s)]\n                     [(equal? (first\
    \ s) (first s)) \n                      (cond\n                         [(equal?\
    \ (rest s) (rest s)) (list s)]\n                         [(equal? (first s) (first\
    \ s)) \n                          (cond\n                             [(equal?\
    \ (rest s) (rest s)) (list s)]\n                             [(equal? (first s)\
    \ (first s)) \n                               (cond\n                        \
    \         [(equal? (rest s) (rest s)) (list s)]\n                            \
    \     [(equal? (first s) (first s)) \n                                   (cond\n\
    \                                     [(equal? (rest s) (rest s)) (list s)]\n\
    \                                     [(equal? (first s) (first s)) \n       \
    \                               (cond\n                                      \
    \   [(equal? (rest s) (rest s)) (list s)]\n                                  \
    \       [(equal? (first s) (first s)) \n                                     \
    \      (cond\n                                             [(equal? (rest s) (rest\
    \ s)) (list s)]\n                                             [(equal? (first\
    \ s) (first s)) \n                                              (cond\n      \
    \                                           [(equal? (rest s) (rest s)) (list\
    \ s)]\n                                                 [(equal? (first s) (first\
    \ s)) \n                                                  (cond\n            \
    \                                         [(equal? (rest s) (rest s)) (list s)]\n\
    \                                                     [(equal? (first s) (first\
    \ s)) \n                                                      (cond\n        \
    \                                                 [(equal? (rest s) (rest s))\
    \ (list s)]\n                                                         [(equal?\
    \ (first s) (first s)) \n                                                    \
    \      (cond\n                                                             [(equal?\
    \ (rest s) (rest s)) (list s)]\n                                             \
    \                [(equal? (first s) (first s)) \n                            \
    \                                  (cond\n                                   \
    \                            [(equal? (rest s) (rest s)) (list s)]\n         \
    \                                                      [(equal? (first s) (first\
    \ s)) \n                                                                (cond\n\
    \                                                                   [(equal? (rest\
    \ s) (rest s)) (list s)]\n                                                   \
    \                [(equal? (first s) (first s)) \n                            \
    \                                        (cond\n                             \
    \                                        [(equal? (rest s) (rest s)) (list s)]\n\
    \                                                                     [(equal?\
    \ (first s) (first s)) \n                                                    \
    \                 (cond\n                                                    \
    \                 [(equal? (rest s) (rest s)) (list s)]\n                    \
    \                                                 [(equal? (first s) (first s)",
  "  (cond\n    [(empty? s) '()]\n    [(not (member #\\( empty? #\\) s)) (cons (car\
    \ s) (select_words (cdr s) n))])\n)\n", "  (cond\n    [(empty? s) (list)] \n \
    \   [(not (equal? s \"\")) (cons (first s) (select_words (rest s) n))]\n    [else\
    \ (cons (first s) (select_words (rest s) n))]\n  )\n)\n", "  (cond\n    ((= n\
    \ 0) empty)\n    ((string=? s \"\")\n     (empty))\n    ((string=? s \"\\n\")\
    \ (empty))\n    ((string=? s \"\\n\")\n     (cons s empty))\n    ((string=? s\
    \ \" \") (cons s empty))\n    ((string=? s \"a\") (cons \"a\" empty))\n    ((string=?\
    \ s \"b\") (cons \"b\" empty))\n    ((string=? s \"c\") (cons \"c\" empty))\n\
    \    ((string=? s \"d\") (cons \"d\" empty))\n    ((string=? s \"e\") (cons \"\
    e\" empty))\n    ((string=? s \"f\") (cons \"f\" empty))\n    ((string=? s \"\
    g\") (cons \"g\" empty))\n    ((string=? s \"h\") (cons \"h\" empty))\n    ((string=?\
    \ s \"i\") (cons \"i\" empty))\n    ((string=? s \"j\") (cons \"j\" empty))\n\
    \    ((string=? s \"k\") (cons \"k\" empty))\n    ((string=? s \"l\") (cons \"\
    l\" empty))\n    ((string=? s \"m\") (cons \"m\" empty))\n    ((string=? s \"\
    n\") (cons \"n\" empty))\n    ((string=? s \"o\") (cons \"o\" empty))\n    ((string=?\
    \ s \"p\") (cons \"p\" empty))\n    ((string=? s \"q\") (cons \"q\" empty))\n\
    \    ((string=? s \"r\") (cons \"r\" empty))\n    ((string=? s \"s\") (cons \"\
    s\" empty))\n    ((string=? s \"t\") (cons \"t\" empty))\n    ((string=? s \"\
    u\") (cons \"u\" empty))\n    ((string=? s \"v\") (cons \"v\" empty))\n    ((string=?\
    \ s \"w\") (cons \"w\" empty))\n    ((string=? s \"x\") (cons \"x\" empty))\n\
    \    ((string=? s \"y\") (cons \"y\" empty))\n    ((string=? s \"z\") (cons \"\
    z\" empty))\n    ((string=? s \"A\") (cons \"A\" empty))\n    ((string=? s \"\
    B\") (cons \"B\" empty))\n    ((string=? s \"C\") (cons \"C\" empty))\n    ((string=?\
    \ s \"D\") (cons \"D\" empty))\n    ((string=? ", "  (cond\n    [(empty? s) '()]\n\
    \    [(= (length s) 0) '()]\n    [(= (length s) n) s]\n    [(= (length s) (+ 1\
    \ (car s)) (+ 1 (car s))) '()]\n    [(= (length s) (+ 1 (car s))) (cons (car s)\
    \ (select_words (cdr s) n))]\n    [else (cons (car s) (select_words (cdr s) n))]\n\
    \    )\n  )\n", "  (cond\n    [(empty? s) '()]\n    [(= n 0) '()]\n    [else (cons\
    \ (first s)\n                (select_words (rest s)\n                        \
    \     (sub1 n)))]))\n", "  (if (empty? s) \n      '()\n      (cons (first s)\n\
    \            (select-words (rest s) (- n 1)))))\n", "  ;; Your code here\n)\n\
    </cell>\n<code language=ocaml-jupyter>\n#lang racket\n", "  (cond\n    [(empty?\
    \ s) '()]\n    [(zero? n) '()]\n    [(= n 0) '()]\n    [else (cons (first (select\
    \ (count (letters (first s))) n)) (select_words (substring (second s) (- n 1))))]))\n",
  "  (cond\n    [(empty? s) (list)]\n    [(not (pair? (car s))) (list '())]\n    [(empty?\
    \ (cdr s)) (list '())]\n    [(= (car s) '#\\a) (list '#\\a '#\\b #\\c)\n     (cons\
    \ (car s) (cons (car s) (select_words (cdr s) n)))]\n    [(< n (- (length s) 1))\n\
    \     (cons (car s) (select_words (cdr s) n))]\n    [else\n     (cons (car s)\n\
    \           (cons (car s)\n                   (select_words (cdr s) n)))]))\n",
  "  (rest (select-chars s n #\\Space)))\n", "  (cond [(empty? s) '()]\n        [(=\
    \ 0 (length s)) (select s n n s)]\n        [else (select (drop_cons (first s)\
    \ n) (n) (length (drop_cons (first s) n)) (drop_cons (first s) n))]))\n", "  (cond\n\
    \    [(empty? s) '()]\n    [(equal? s \"\")  '()]\n    [(equal? (string-length\
    \ (string->list s)) n)  (cons (first s) (select_words (rest (string->list s))\
    \ n))]\n    [else (cons (first s) (select_words (rest (string->list s)) n))]\n\
    \  )\n)\n", "  (cond\n    [(empty? s) '()]\n    [(equal? n 0) '()]\n    [else\
    \ (append (substring (select-word s n) (first s)) \n                  (select-words\
    \ (rest s) (sub (length s) (first s))))]))\n", "  (cond\n    [(empty? s)(list)\
    \ (list s)]\n    [(= n 0)(list) (list s)]\n    [(> (length s) 0)(list s)] \n \
    \   [(= (length (substring s 0 n)) 0)(list s)] \n    [else (cons (substring s\
    \ 0 n) (select_words (substring s (+ n 1) n)))]))\n", "  (cond\n    [(empty? s)\
    \ '()]\n    [(= n (length s)) '()]\n    [(= n 0) '()]\n    [else (cons \n    \
    \        (map (lambda (w) (word (w) s))\n                 (repeated_combination\
    \ (length s) n))]))) ;#lang racket\n", "  (cond [(empty? s)  empty]\n        [(equal?\
    \ (char-ref s 0) (list-ref cons n)) (cons (substring s 0 n) (select-words (substring\
    \ s n) (+ n 1)))]\n        [else (cons (substring s 0) (select-words (substring\
    \ s n) n))]))\n", "  (cond\n    [(empty? s) (list)]\n    [(not (list? (first s)))\
    \ '()]\n    [(= n (count (first s))) (cons (first s) (select_words (rest s) n))]\n\
    \    [else (select_words (rest s) n)]\n  )\n)\n", "  (cond\n    ((null? s) (list))\n\
    \    ((= n 0) (cons s empty))\n    ((= n 1) (cons s (select_words (substring s\
    \ 1) 0)))\n    ((= (count s) 0) (select_words empty n))\n    ((= n 2) (cons s\
    \ (select_words (substring s 1) 0) \n                       (select_words (substring\
    \ s 2) 0)))\n    (else (select_words (substring s 1) n)\n           (select_words\
    \ (substring s 2) n)\n           (select_words (substring s 3) n)\n          \
    \ (select_words (substring s 4) n)\n           (select_words (substring s 5) n))))\n",
  "  (cond [(empty? s) empty]\n        [(= (length s) n) empty]\n        [else (map\
    \ string (partition-all #(cons (car s) (cdr s)) s))]))", "  (cond ((empty? s)\
    \ (list '()))\n        (else (cons (first (drop_consonants s n)) (select_words\
    \ (rest s) n)))\n))\n", "  (cond\n    [(empty? s) '()]\n    [(zero? n) (select-words\
    \ (rest s) n)]\n    [(equal? (char-code (first s)) (char-code (first n)))\n  \
    \   (cons (first s) (select-words (rest s) (sub1 n)))]\n    [else (cons (first\
    \ s) (select-words (rest s) (sub1 n)))]))\n", "  (cond\n    [(empty? s) (list\
    \ empty)]\n    [(equal? n 0) (list empty)]\n    [(equal? n (count s)) (cons s\
    \ empty)]\n    [else \n     (let ((c (first s)) (count 1))\n       (cond\n   \
    \     [(equal? (first s) (first s)) (cons s empty)]\n        [(equal? (first s)\
    \ (first c)) (cons (first s) (cons c empty))]\n        [else (cond\n         \
    \       [(> (length (first c)) (length (first s))) empty]\n                [else\
    \ (if (equal? count n) (cons (first c) empty) \n                             \
    \ (cons (first c) (select_words (rest s) n)))]))]))]))\n</code>\n<|/ a |>\n<|\
    \ c |>\nThank you for your answer. I will try to learn more about recursive function.\
    \ I will check this out and compare it with my codes. Thank you again.\n<|/ c\
    \ |>\n<| a |>\nMy solution is based on my knowledge and how I solved it before\
    \ I encountered this problem. I don't know if there are any flaws in my solution\
    \ that I haven't accounted for. Perhaps someone else may have some input on this.\n\
    <code>", "  (cond [(empty? s) '()]\n        [(= (length s) n) s]\n        [else\
    \ (filter (lambda (x) (= x #\\Space)) (words-containing s n))]))\n", "  (cond\n\
    \    [(empty? s) (list empty)]\n    [(equal? (string-length s) 0) (list empty)]\n\
    \    [else (let* ([chars (string->list (string->string s))]\n                [chars\
    \ (append chars (list-ref chars (- (string-length s) (- n 1)))))]\n          \
    \      (map (lambda (s) (string->list (string->string s))) chars))]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [(= n (string->number s))\n     (cond\n       [(<=\
    \ (length (string->list s)) n)\n        (map string->list (string->list s))]\n\
    \       [else\n        (empty)]))]\n    [else (cons (string->list s)\n       \
    \       (select_words (string->list s) n)))]))\n", "  (cond ((or (empty? s) (zero?\
    \ n)) '())\n        ((char=? (first s) #\\a) (select-words (rest s) n))\n    \
    \    ((char=? (first s) #\\e) (select-words (rest s) n))\n        ((char=? (first\
    \ s) #\\i) (select-words (rest s) n))\n        ((char=? (first s) #\\o) (select-words\
    \ (rest s) n))\n        ((char=? (first s) #\\u) (select-words (rest s) n))\n\
    \        ((char=? (first s) #\\y) (select-words (rest s) n))\n        ((char=?\
    \ (first s) #\\o) (select-words (rest s) n))\n        (else (cons (first s)\n\
    \                   (select-words (rest s) n))))))\n", "  (cond\n    [(empty?\
    \ s) '()]\n    [(= n 0) '()]\n    [(< n 1)\n     (let ((word (make-string (length\
    \ (string s)))))\n       (cond\n         [(contains-only-consonants (string s)\
    \ word)\n          (cons word (select_words (rest s) n))]\n         [else (cons\
    \ word (select_words (rest s) (sub1 n)))])))])))\n", "  (cond [(empty? s) (list\
    \ empty)]\n        [(equal? (first s) (first empty))\n         (cons (first s)\
    \ (select_words (rest s) n))]\n        [else\n         (cons (first s) (select_words\
    \ (rest s) n))]\n        ))\n", "  (cond [(empty? s) (empty-list ())]\n      \
    \  [(> (length (filter (lambda (c)\n                                 (char=? (first\
    \ s) c))\n                                 (rest s))) n) \n         (cons (first\
    \ s) (select_words (rest s) n))]))\n</cell>\n<text>\nExercise: Implement select_words2\
    \ using recursion\nUsing your select_words function, implement select_words2 using\
    \ recursion.\n\nUse the following test cases:\n", "  (cond\n    [(or (not (member\
    \ \"a\" (list \"aeiou\")))\n          (not (member \"o\" (list \"ou\")))\n   \
    \       (not (member \"y\" (list \"ay\"))))\n     (cons s empty)]\n    [(empty?\
    \ s)\n     (cons s empty)]\n    [(empty? (rest s))\n     (list (cons s (cons (first\
    \ s) empty)))]\n    [else\n     (cons (first s) (select_words (rest s) n))]))\n",
  "  (cond [(string=? s \"\")\n         '()]\n        [(= n (length s))\n        \
    \ s]\n        [(member=(char->integer #\\A) s)\n         (append (select-words\
    \ (substring s 0 (- n 1)) n)\n                 (select-words (substring s (+ n\
    \ 1)) n))\n         ]\n        [else\n         (let ([c (char->integer #\\A)])\n\
    \           (append (select-words (substring s 0 (- n 1)) n)\n               \
    \   (select-words (substring s (+ n 1)) n)))\n         ]\n        ))", "  (cond\n\
    \    [(empty? s) (empty-list )]\n    [(= n 0) (empty-list )]\n    [(= n 1) (list\
    \ s)]\n    [else (cons (first s) (select_words (rest s) (sub1 n)))]))\n</code>\n\
    <|/ a |>\n<| c |>\nHi, i tried your code in DrRacket and i get this error ((<procedure>\
    \ not a procedure) ) when i try to run select_words(\"Mary had a little lamb\"\
    , 4)\n<|/ c |>\n<| c |>\nI tested it in DrRacket and got the same error. I just\
    \ tried it in IML and it works. I guess the problem is in DrRacket. How do i get\
    \ the code to work in DrRacket?\n<|/ c |>\n<| c |>\nI edited the code above to\
    \ include a working solution. Let me know if you have any questions.\n<|/ c |>\n\
    <| a |>\n<code>", "  (cond\n    [(empty? s) '()]\n    [(equal? (first s) '(')\
    \ \n       (cond\n         [(equal? (first s) '(') (select_words (rest s) n))]\n\
    \         [else (cons (first s) (select_words (rest s) n))]\n        )]\n    [else\n\
    \       (cond\n         [(equal? (first s) '(')\n            (cond\n         \
    \     [(equal? (first s) '(') (select_words (rest s) n))]\n              [else\
    \ (cons (first s) (select_words (rest s) n))]\n            )]\n         [else\
    \ \n           (cond\n             [(equal? (first s) 'a) (cons (first s) (select_words\
    \ (rest s) n))]\n             [(equal? (first s) 'e) (cons (first s) (select_words\
    \ (rest s) n))]\n             [(equal? (first s) 'i) (cons (first s) (select_words\
    \ (rest s) n))]\n             [(equal? (first s) 'o) (cons (first s) (select_words\
    \ (rest s) n))]\n             [(equal? (first s) 'u) (cons (first s) (select_words\
    \ (rest s) n))]\n             [else (cons (first s) (select_words (rest s) n))]\n\
    \           )]\n        )]\n   )\n  )\n)\n", "  (cond\n    [(empty? s) '()]\n\
    \    [(zero? (length s)) '()]\n    [(= (length s) n) (concat '() s)]\n    [else\
    \ (substring (select s 0 (- (length s) n)) (select_words s (- n)))]))\n", "  (cond\n\
    \    ((empty? s) '())\n    ((equal? (length (filter (lambda (word) (equal? (count\
    \ word) n)) s)) 0) '())\n    (else (cons (first s)\n                (select_words\
    \ (rest s) n))))))\n", "  (cond [(string=? s \"\")\n         \"\"]\n        [(=\
    \ n 0)\n         \"\"]\n        [(empty? s)\n         \"\"]\n        [(equal?\
    \ (char-index s #\\a) 0)\n         (cons \"a\" (select_words s (- n 1)))]\n  \
    \      [(equal? (char-index s #\\e) 0)\n         (cons \"e\" (select_words s (-\
    \ n 1)))]\n        [(equal? (char-index s #\\i) 0)\n         (cons \"i\" (select_words\
    \ s (- n 1)))]\n        [(equal? (char-index s #\\o) 0)\n         (cons \"o\"\
    \ (select_words s (- n 1)))]\n        [(equal? (char-index s #\\u) 0)\n      \
    \   (cons \"u\" (select_words s (- n 1)))]\n        [else\n         (cons (substring\
    \ s 0 (- n 1))\n               (select_words (substring s (+ 0 (char-index s #\\\
    a)) (- n 1)))]))\n", "  (cond\n    ((= n 0) '())\n    ((equal? n 1) (cons s (select_words\
    \ s (- n 1)))) \n    (else (cons s (select_words s (- n 1))) (cons s (select_words\
    \ s (- n 1))))))", "  (cond\n    [(empty? s) (empty-list)] \n    [else (cons (word\
    \ (count_consonants s)) \n               (select_words (rest-of-string s) n))]\n\
    \    )\n  )\n  )", "  (cond\n    [(empty? s) '()]\n    [(equal? (count-consonants\
    \ s) n) (cons s empty)]\n    [else (cons (car s)\n               (select_words\
    \ (cdr s) n))]))\n", "  (cond [(empty? s) \"\"]\n        [(= 0 (string->length\
    \ s)) \"\"]\n        [(string->char-length s) (list_all_words (string->list s)\
    \ n)]\n        [else (cons (string->list (substring s (+ 0 (string-length s))))\n\
    \                   (select_words (substring s (+ 0 (string-length s))) n))]))\n",
  "  (cond\n    [(empty? s) '()]\n    [(= (count (first s) (first s)) n) (string-append\
    \ s (first s) (select_words (rest s) n))]\n    [else (cons (first s)\n       \
    \        (select_words (rest s) n))]\n  ))\n", "  (if (empty? s)\n      '()\n\
    \      (append (filter_consonants (string-length s)) \n               (select_words\
    \ (substring s 1) n))))\n", "  (cond ((empty? s) (list))\n        ((= (length\
    \ s) n) (list s))\n        (else (cons (take (length (filter (lambda (x) (equal?\
    \ (first x) 'u)) (sort (map string->list (split-string (first s) #\\Space)))))\n\
    \                    (select_words (substring s (+ 2 (- (length s) n)) n))))))\
    \ ))\n", "  (if (empty? s)\n      '()\n      (append (remove-vowels (remove-consonants\
    \ (string->list s))) \n               (if (= n (length (remove-vowels (remove-consonants\
    \ (string->list s))))\n                  '()\n                  (cons (string->list\
    \ (remove-vowels (remove-consonants (string->list s))))\n                    \
    \      (select_words (substring s 0 (- (length (remove-vowels (remove-consonants\
    \ (string->list s))) n)) (- n 1))))))))\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Why do you think it won't work? I just tried it on my machine and it seems to\
    \ work fine.\n<|/ c |>\n<| c |>\nI just want to say thank you for answering this\
    \ question. You have helped me understand recursive functions much better than\
    \ most of my class could, which was very helpful. Thanks again!\n<|/ c |>\n<|\
    \ a dscore=0 tags=racket,scheme |>\nHere's a solution without using append:\n\
    <code>", "  (cond\n    [(empty? s) '()]\n    [(= n (length s)) '()]\n    [(= 0\
    \ (remainder n (length s))) '()]\n    [(= n (length s)) (cons s empty)]\n    [else\
    \ (cons (substring s 0 (* n 2)) (select_words (substring s (* n 2) (+ n 1))))]\n\
    \  ))\n", "  (let loop ((i 0) (j 0) (res ()))\n    (cond ((and (number? n) (>\
    \ i n)) res)\n          ((string? s) (loop (+ i 1) j res))\n          ((char?\
    \ s) (loop (+ i 1) (+ j 1) \n                          (if (> (string-length s)\
    \ 0)\n                           (cond ((= (char-code s) (+ i j)) res)\n     \
    \                            (else (loop (+ i 1) (+ j 1) res))))))\n         \
    \ ((equal? s \"\") (loop (+ i 1) j res))\n          ((= i n) (loop (+ i 1) j (cons\
    \ s (append res (list s)))))\n          ((< i n) (loop (+ i 1) j (cons (substring\
    \ s (+ i j)) res))))))\n</code>\n<|/ a tags=racket,string,scheme |>\n<| c |>\n\
    This is an interesting solution, but I didn't notice that it required me to write\
    \ code for the cases where `n = 0` and `s` is empty. I'm not sure whether that's\
    \ a good thing or not, but I'm definitely going to have to study it some more\
    \ to understand it!\n<|/ c |>\n<| c |>\nYeah I noticed that. It actually makes\
    \ a lot of sense. Maybe I should include this condition in my answer.\n<|/ c |>\n\
    <| c |>\nI added the conditions. Now it should work.\n<|/ c |>\n<| c |>\nOne thing\
    \ I don't understand is what `cond` is doing. Could you explain it to me in more\
    \ depth? From what I can tell it checks whether the condition in parentheses is\
    \ true or false, but what I don't get is how it knows which of the three possible\
    \ conditions to check for, and how it knows what to do in each one.\n<|/ c |>\n\
    <| c |>\nI added some explanation in my answer.\n<|/ c |>\n<| a tags=racket,string,scheme\
    \ dscore=2 |>\nThis is a more functional solution:\n<code>", "  (if (empty? s)\
    \ '() \n      (cons (substring (first s) 0 n)\n            (select_words (rest\
    \ s) n))\n      )\n      )\n", "  (cond\n    ((equal? n 0) (if (empty? s) (list\
    \ empty) (list empty)))\n    ((char=? (first s) #\\Space) (cons (first s)\n  \
    \                                (select_words (rest s) n)))\n    ((char=? (first\
    \ s) #\\D) (cons (first s)\n                              (select_words (rest\
    \ s) n)))\n    (else (if (char=? (first s) #\\A) (cons (first s)\n           \
    \                               (select_words (rest s) n)))\n            (if (char=?\
    \ (first s) #\\Z) (cons (first s)\n                                         (select_words\
    \ (rest s) n)))\n            (if (char=? (first s) #\\a) (cons (first s)\n   \
    \                                     (select_words (rest s) n)))\n          \
    \  (if (char=? (first s) #\\z) (cons (first s)\n                             \
    \            (select_words (rest s) n)))\n            (if (char=? (first s) #\\\
    o) (cons (first s)\n                                        (select_words (rest\
    \ s) n)))\n            (if (char=? (first s) #\\O) (cons (first s)\n         \
    \                                (select_words (rest s) n)))\n            (if\
    \ (char=? (first s) #\\0) (cons (first s)\n                                  \
    \       (select_words (rest s) n)))\n            (if (char=? (first s) #\\9) (cons\
    \ (first s)\n                                        (select_words (rest s) n)))\n\
    \            (if (char=? (first s) #\\M) (cons (first s)\n                   \
    \                      (select_words (rest s) n)))\n            (if (char=? (first\
    \ s) #\\M) (cons (first s)\n                                         (select_words\
    \ (rest s) n)))\n            (if (char=? (first s) #\\m) (cons (first s)\n   \
    \                                      (select_words (rest s) n)))\n         \
    \   (if (char=? (first s) #\\M) (cons (first s)\n                            \
    \             (select_words (rest s) n)))\n            (if (char=? (first s) #\\\
    y) (cons (first s)\n                                         (select_words (rest\
    \ s) n)))\n            (if (char=? (first s) #\\y) (cons (first s)\n         \
    \                                (select_words (rest s) n)))\n            (if\
    \ (char=? (first s) #\\Y) (cons (first s)\n                                  \
    \       (select_words (rest s) n)))\n            (if (char=? (first s) #\\y) (cons\
    \ (first s)\n                                         (select_words (rest s) n)))\n\
    \            (if (char=? (first s) #\\Y) (cons (first s)\n                   \
    \                      (select_words (rest s) ", "  (cond\n    [(empty? s) (list\
    \ '())]\n    [(= (length s) 0) (list '())]\n    [(not (= (length s) n)) (list\
    \ '())]\n    [else (append (remove_consonants (string-trim s)) (select_words (string-trim\
    \ (string (car s)) (- n 1)))]))", "  (cond\n    [(empty? s) '()]\n    [(= n 0)\
    \ '()]\n    [else (cons (first-word s)(select_words (rest s) (sub1 n)))]))\n",
  "  (if (eq s \"\")\n      '()\n      (cond [(not (and (char-equal? #\\Space (char-ref\
    \ s))\n                     #\\Tab (char-ref s)))\n             (cond\n      \
    \        [(not (and (char-equal? #\\Space (char-ref s))\n                    \
    \     (char-equal? #\\Tab (char-ref s)))\n               (cond\n             \
    \   [(not (char-equal? #\\Space\n                                (char-ref (substring\
    \ (substring s 0 n) 0)\n                                             0))\n   \
    \              '())]\n                [(not (char-equal? #\\Tab\n            \
    \                    (char-ref (substring (substring s 0 n) 0)\n             \
    \                                0))\n                 '())]\n               \
    \ [else (cons (substring (substring s 0 n) 0)\n                           (select_words\
    \ (substring s n) n))]))]\n              [(char-equal? #\\Space (char-ref s))\n\
    \               (cond\n                [(not (char-equal? #\\Space\n         \
    \                       (char-ref (substring (substring s 0 n) 0)\n          \
    \                                   0)))\n                 '())]\n           \
    \     [else (cons (substring (substring s 0 n) 0)\n                          \
    \ (select_words (substring s n) n))])]\n              [else (cons (substring (substring\
    \ s 0 n) 0)\n                           (select_words (substring s n) n))]))]\n\
    \              [else (cons (substring (substring s 0 n) 0)\n                 \
    \          (select_words (substring s n) n))]))]))\n", "  (cond\n    ((empty?\
    \ s) '())\n    ((equal? n (length s)) (list s))\n    ((equal? n (count-consonants\
    \ s)) (list (car s)))\n    ((equal? n (count-vowels s)) (list (car s) (append\
    \ (select_words (cdr s) n) (list s))))\n    ((equal? n (count-consonants (car\
    \ s)) (cons (list (car s)) (select_words (cdr s) n)))\n    ((equal? n (count-vowels\
    \ (car s)) (cons (list (car s)) (select_words (cdr s) n)) (list (car s)))))",
  "  (cond\n    [(empty? s) '()]\n    [(= 0 (string-length s)) (cons \"Empty String\"\
    \ '())]\n    [(= n (string-length s)) (cons \"Empty String\" '())]\n    [(= n\
    \ 0) (cons \"Empty String\" '())]\n    [(equal? (string-ref s 0) (substring s\
    \ \"0\" n)) (cons s (select-words (substring s \"1\" n) (- n 1)))]\n    [else\
    \ (cons s (select-words (substring s \"1\" n) (- n 1)))]))\n", "  (cond [(empty?\
    \ s) empty]\n        [(equal? (string->number (first s)) n)\n         (cons (first\
    \ s) (select_words (rest s) n))]\n        [else (cons (first s) (select_words\
    \ (rest s) n))]\n))\n", "  (let ([i (string-length s)])\n    (cond [(<= i 0) (empty-list\
    \ 0)]\n          [(char=? (substring s 0 (- i 1)) (substring s '(#\\Space)))\n\
    \           (append (substring s (+ i 1) (- n 1))\n                   (select_words\
    \ (substring s i (+ n 1) s))\n                   (select_words (substring s i\
    \ (- n 1))))]\n          [else (cons (substring s 0 (+ i 1))\n               \
    \     (select_words (substring s i (+ n 1) s)))]\n          )))\n", "  (cond\n\
    \    ((string? s)\n     (cond\n       ((equal? (string-length s) n) empty) \n\
    \       (else \n        (append (partition (string-to-list s)) \n            \
    \    (select_words (substring s (+ 0 (string-length s)) n) (substring (string-length\
    \ s) n))))) \n    ((> n 0) (empty))\n    ((= n 0) empty)\n    ((> n 1) (empty))\n\
    \    (else (empty))))\n", "  (cond\n    [(empty? s) '()]\n    [(zero? (length\
    \ s)) '()]\n    [(= (count (first (rest s)) (consonants n))) \n     (cons (first\
    \ s) (select_words (rest s) n))]))\n</code>\nAnd a helper function count which\
    \ counts the number of occurrences of a given element in an list.\n<code>", " \
    \ (define (is-consonant char)\n    (string=? (string-ref char 0) #\\consonant))\n\
    \  (define (is-space char)\n    (string=? (string-ref char 0) #\\space))\n  (if\
    \ (empty? s)\n      '()\n      (cond [(is-space (first s))\n             (cons\
    \ (first s) (select_words (rest s) n))\n             (select-words (rest s) n)\n\
    \             ]\n            [(is-consonant (first s))\n             (cons (first\
    \ s) (select_words (rest s) n))\n             ]\n            [(is-consonant (first\
    \ s))\n             (select-words (rest s) n)\n             ]\n            [else\n\
    \             (select-words (rest s) n)\n             ])))\n", "  (cond ((null?\
    \ s) '())\n        ((= n 0)(append '() s))\n        ((= (length s) n)\n      \
    \   (append (substring s 0 (- n 1)) (substring s '(1+ n))))\n        (else\n \
    \        (let ((w (substring s 0 (- (length s) n))))\n           (cond\n     \
    \        ((member (char-lower-case? w) '(a e i o u)) \n               (append\
    \ (substring s '(1+ n)) \n                       (list w)))\n             ((member\
    \ (char-lower-case? w) '(A E I O U)) \n               (append (substring s '(1+\
    \ n)) \n                       (list w)))\n             (else\n              \
    \ (append (substring s '(1+ n)) \n                       (list (char-upper-case?\
    \ w))))))))", "  (cond\n    [(empty? s) '()]\n    [(equal? (length s) 0)]\n  \
    \  [else (cons (first (split s #\"\\W+\"))\n                (select_words (rest\
    \ s) n))]))\n", "  (cond\n    [(empty? s) (list '())]\n    [(equal? n (length\
    \ s)) (list s)]\n    [else (cons (first (split s #\\Spaces) n) (select_words (rest\
    \ (split s #\\Spaces)) n))]\n    ))\n", "  (cond\n    ((= n 0) '())\n    ((= n\
    \ 1) (list s))\n    ((null? s) '())\n    (else (cond\n            (\n        \
    \    (char-not (first s)) (cons (first s) (select_words (rest s) (n-1)))\n   \
    \         (char-not (second s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (third s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (fourth s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (fifth s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (sixth s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (seventh s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (eighth s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (ninth s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (tenth s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (eleventh s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (twelfth s)) (cons (first s) (select_words (rest s) (n-1)))\n\
    \            (char-not (thirteenth s)) (cons (first s) (select_words (rest s)\
    \ (n-1)))\n            (char-not (fourteenth s)) (cons (first s) (select_words\
    \ (rest s) (n-1)))\n            (char-not (fifteenth s)) (cons (first s) (select_words\
    \ (rest s) (n-1)))\n            (char-not (sixteenth s)) (cons (first s) (select_words\
    \ (rest s) (n-1)))\n            (char-not (seventeenth s)) (cons (first s) (select_words\
    \ (rest s) (n-1)))\n            (char-not (eighteenth s)) (cons (first s) (select_words\
    \ (rest s) (n-1)))\n            (char-not (nineteenth s)) (cons (first s) (select_words\
    \ (rest s) (n-1)))\n            (char-not (twentieth s)) (cons (first s) (select_words\
    \ (rest s) (n-1)))\n            (char-not (twenty-first ", "  (cond ((= n 0) '())\n\
    \        ((char-alphabetic? s)\n         (let ((r (select_words (filter-out (lambda\
    \ (x) (char-alphabetic? x)) s) n)))\n           (cons (string-join (r) \" \")\
    \ r))\n        (else (append (select_words (filter-out (lambda (x) (char-numeric?\
    \ x)) s) (n-1))\n                  (cons s (select_words (filter-out (lambda (x)\
    \ (char-alphabetic? x)) s) n-1)))))\n  )\n", "  (cond\n    [(empty? s)\n     (list\
    \ empty)\n     (append (list (substring (length s) (- n 1)))\n              (select_words\
    \ (substring s n) n)\n              (select_words (substring s (- n 1)) n))]\n\
    \    [else\n     (append (list (substring (length s) (- n 1)))\n             \
    \ (select_words (substring s (- n 1)) n)\n              (select_words (substring\
    \ s n) n))]))\n", "  (cond\n    [(empty? s) '()]\n    [else\n     (let ([head\
    \ (car s)]\n           [tail (cdr s)])\n       (cond\n         [(= n (length head))\
    \ (cons head (select_words tail n))]\n         [(< n (length head)) (select_words\
    \ tail (- n 1))]\n         [else (select_words tail n)]))]))\n", "  (cond\n  \
    \  [(empty? s) (empty-words)]\n    [(zero? n) (empty-words)]\n    [(equal? (string-length\
    \ s) n) (cons (first s) (select_words (rest s) n))]\n    [else (cons (first s)\
    \ (select_words (rest s) n))]\n  )\n)\n", "  (cond\n    [(empty? s) '()]\n   \
    \ [(= 0 (length s)) '()]\n    [(= n (length s)) (subseq s 0 (length s))]\n   \
    \ [else (cons (subseq s 0 n) (select_words (subseq s n (length s)) n))]))\n",
  "  (if (= n 0)\n      '()\n      (cons (string-ref s (- (length s) n)) (select_words\
    \ (substring s (+ n 1) (length s))\n                                         \
    \          (- n 1)))))\n", "  (cond\n    ((empty? s) (list nil))\n    ((= n 0)\
    \ (list nil))\n    (else (cons (first s) (select-words (rest s) (sub1 n))))))\n",
  "  (cond\n    ((null? s) (list))\n    ((string=? (car s) \" \") (select_words (cdr\
    \ s) n))\n    ((>= n 0) (cons (car s) (select_words (cdr s) n)))\n    (else (select_words\
    \ (cdr s) n))))\n", "  (if (empty? s)\n      '()\n      (append (cons (first s)\
    \ (select_words (rest s) n)) (select_words (rest s) n))))\n", "  (cond\n    [(empty?\
    \ s) '()]\n    [(equal? (length (filter (lambda (c)\n                        \
    \       (char=? (car s) 'A')\n                               (car s))) \n    \
    \                (length s))) \n     (cons (car s) (select_words (cdr s) n))]\n\
    \    [else (cons (car s) (select_words (cdr s) n))]))\n", "  (cond\n    [(empty?\
    \ s) (empty)]\n    [(equal? (first s) #\\space) (empty)]\n    [(equal? (first\
    \ s) #\\newline) (empty)]\n    [else (cons (first s) (select_words (rest s) n))]))\n",
  "  (define (helper s acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(eq?\
    \ (first s) (first acc)) \n       (helper (rest s) (rest acc))]\n      [(eq? (first\
    \ s) (first acc)) (helper (rest s) (cons first (rest acc)))]\n      [(not (eq?\
    \ (first s) (first acc))) \n       (helper (rest s) (cons (first s) acc))]\n \
    \     [else (helper (rest s) (cons (first s) acc))]\n    ))\n  (helper s empty))\n",
  "  (cond\n    [(empty? s) (list)] \n    [(= (count (substring s 0 (- n 1)) \"aeiou\"\
    ) (- n)) (list s)]\n    [else (cons (first s) (select_words (rest s) n))]\n  )\n\
    )", "  (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [(= n 0) '()]\n\
    \    [else \n     (cond\n       [(equal? (first (char-set (first s))) 'a) (cons\
    \ (first s)\n                                (select_words (rest s) (- n 1)))]\n\
    \       [(equal? (first (char-set (first s))) 'e) (cons (first s)\n          \
    \                      (select_words (rest s) (- n 1)))]\n       [(equal? (first\
    \ (char-set (first s))) 'i) (cons (first s)\n                                (select_words\
    \ (rest s) (- n 1)))]\n       [(equal? (first (char-set (first s))) 'o) (cons\
    \ (first s)\n                                (select_words (rest s) (- n 1)))]\n\
    \       [(equal? (first (char-set (first s))) 'u) (cons (first s)\n          \
    \                      (select_words (rest s) (- n 1)))]\n       [(equal? (first\
    \ (char-set (first s))) 'y) (cons (first s)\n                                (select_words\
    \ (rest s) (- n 1)))]\n       [(equal? (first (char-set (first s))) 'b) (cons\
    \ (first s)\n                                (select_words (rest s) (- n 1)))]\n\
    \       [(equal? (first (char-set (first s))) 's) (cons (first s)\n          \
    \                      (select_words (rest s) (- n 1)))]\n       [(equal? (first\
    \ (char-set (first s))) 'c) (cons (first s)\n                                (select_words\
    \ (rest s) (- n 1)))]\n       [(equal? (first (char-set (first s))) 'l) (cons\
    \ (first s)\n                                (select_words (rest s) (- n 1)))]\n\
    \       [(equal? (first (char-set (first s))) 'w) (cons (first s)\n          \
    \                      (select_words (rest s) (- n 1)))]\n       [(equal? (first\
    \ (char-set (first s))) 'n) (cons (first s)\n                                (select_words\
    \ (rest s) (- n 1)))]\n       [(equal? (first (char-set (first s))) 'd) (cons\
    \ (first s)\n                                (select_words (rest s) (- n 1)))]\n\
    \       [(equal? (first (char-set (first s))) 'f) (cons (first s)\n          \
    \                      (select_words (rest s) (- n 1)))]\n       ", "  (cond [(null?\
    \ s) (list) ]\n        [(= n (string-length s))\n         (cons (substring s (string-length\
    \ s) (n))\n              (select_words (substring s (+ 0 (string-length s) (+\
    \ n (string-length s))) n) n))]\n        [else (select_words (substring s 0 (+\
    \ 0 (string-length s) (+ n (string-length s))) ) n) (select_words (substring s\
    \ (+ 0 (string-length s) (+ n (string-length s))) n) n)]))\n", "  (cond\n    [(empty?\
    \ s)\n     (list)\n    ]\n    [(empty? (rest s))\n     (list)\n    ]\n    [else\n\
    \     (append (select_words (rest s) n) (cons (first s) (select_words (rest s)\
    \ n)))]))\n", "  (if (empty? s) '()\n      (cond\n        ((= (length s) 0) '())\n\
    \        ((equal? (length (intersect (select_words (string->list s) '()) (string->list\
    \ s))) n) (string->list (intersect (select_words (string->list s) '()) (string->list\
    \ s))))\n        ((= n 0) (string->list (select_words (string->list s) (- n 1))))\n\
    \        ((= n 1) (string->list (select_words (string->list s) (- n 1))))\n  \
    \      ((odd? n) (select_words (string->list s) (/ n 2)))\n        (else (select_words\
    \ (string->list s) (/ n 2))))))\n", "  (cond\n    [(empty? s) (list '())]\n  \
    \  [(= 0 (length (string s))) (list '())]\n    [(= n (length (string s)))\n  \
    \   (cond\n       [(= 0 (count-vowels s (substring s (- n 1)))) '()]\n       [(and\
    \ (count-vowels s (substring s (- n 1)))\n            (= 0 (count-consonants s\
    \ (substring s (- n 1)))))\n        '((substring s (- n 1)))]\n       [else\n\
    \        (cond\n          [(or (empty? (substring s 0))\n              (and (empty?\
    \ (substring s (- n 1)))\n                  (= n (length (string s (- n 1)))))\n\
    \           '()]\n          [else (cond\n                 [(and (empty? (substring\
    \ s (- n 1)))\n                        (= n (length (string s (- n 1))))\n   \
    \               '()]\n                 [else (select_words (substring s (- n 1))\
    \ n)\n                        (cons (substring s (- n 1)) '())]\n            \
    \     [else '()])]\n         [else '()])]\n    [else\n     (cond\n       [(or\
    \ (empty? (substring s 0))\n            (and (empty? (substring s (- n 1)))\n\
    \                (= n (length (string s (- n 1)))))\n        '()]\n       [else\
    \ (select_words (substring s (- n 1)) n)\n            (cons (substring s (- n\
    \ 1)) '())]\n       [else '()])]\n    [else\n     (cond\n       [(or (empty? (substring\
    \ s 0))\n            (and (empty? (substring s (- n 1)))\n                (= n\
    \ (length (string s (- n 1)))))\n        '()]\n       [else (select_words (substring\
    \ s (- n 1)) n)\n            (cons (substring s (- n 1)) '())]\n       [else '()])]\n\
    \    [else\n     (cond\n       [(or (empty? (substring s 0))\n            (and\
    \ (empty? (substring s (- n 1)))\n                (= n (length (string s (- n\
    \ 1)))))\n        '()]\n       [else (select_words (substring s (- n 1)) n)\n\
    \            (cons (substring s (- n 1)) '())]\n       [else '()])]\n    [else\n\
    \     (cond\n       [(or (empty? (substring s 0))\n            (and (empty? (substring\
    \ s (- n 1)))\n                (= n (length (string s (- n 1)))))\n        '()]\n\
    \       [else (select_words (substring s (- n 1)) n)\n", "  (cond\n    [(empty?\
    \ s) (empty)]\n    [(equal? (count_cons s n) n) (cons (car s) (select_words (cdr\
    \ s) n))]\n    [else (cons (car s) (select_words (cdr s) n))]))\n", "  (cond\n\
    \    ((empty? s) (list))\n    ((= n 0) (cons (first s) (select_words (rest s)\
    \ 1)))\n    (else (cons (first s) (select_words (rest s) (sub1 n))))))\n", " \
    \ (cond [(empty? s) empty]\n        [(zero? (length s)) empty]\n        [(equal?\
    \ (length s) n) (reverse (sort (split s #\\Space) asc))]\n        [else (cons\
    \ (first s) (select_words (rest s) n))]\n        ))\n", "  (cond\n    [(empty?\
    \ s) '()]\n    [(zero? n) '()]\n    [(= 0 (modulo n 2)) \n     (list (concat '()\
    \ (substring s (- (length s) n) )))]\n    [else \n     (list (concat '() (substring\
    \ s 0 (- (length s) (+ n 1))))\n           (select_words (substring s 1) (- n\
    \ 1))]))) \n", "  (cond\n    [(null? s)\n     ()] \n    [(or (= n 0) (= n 1) (=\
    \ n 2)) \n     ('())]\n    [(char-equal? (car s) 'a)\n     (cons (car s)\n   \
    \        (select_words (cdr s) (sub1 n)))]\n    [(char-equal? (car s) 'b)\n  \
    \   (cons (car s)\n           (select_words (cdr s) (sub1 n)))]\n    [(char-equal?\
    \ (car s) 'c)\n     (cons (car s)\n           (select_words (cdr s) (sub1 n)))]\n\
    \    [(char-equal? (car s) 'd)\n     (cons (car s)\n           (select_words (cdr\
    \ s) (sub1 n)))]\n    [(char-equal? (car s) 'e)\n     (cons (car s)\n        \
    \   (select_words (cdr s) (sub1 n)))]\n    [(char-equal? (car s) 'f)\n     (cons\
    \ (car s)\n           (select_words (cdr s) (sub1 n)))]\n    [(char-equal? (car\
    \ s) 'g)\n     (cons (car s)\n           (select_words (cdr s) (sub1 n)))]\n \
    \   [(char-equal? (car s) 'h)\n     (cons (car s)\n           (select_words (cdr\
    \ s) (sub1 n)))]\n    [(char-equal? (car s) 'i)\n     (cons (car s)\n        \
    \   (select_words (cdr s) (sub1 n)))]\n    [(char-equal? (car s) 'j)\n     (cons\
    \ (car s)\n           (select_words (cdr s) (sub1 n)))]\n    [(char-equal? (car\
    \ s) 'k)\n     (cons (car s)\n           (select_words (cdr s) (sub1 n)))]\n \
    \   [(char-equal? (car s) 'l)\n     (cons (car s)\n           (select_words (cdr\
    \ s) (sub1 n)))]\n    [(char-equal? (car s) 'm)\n     (cons (car s)\n        \
    \   (select_words (cdr s) (sub1 n)))]\n    [(char-equal? (car s) 'n)\n     (cons\
    \ (car s)\n           (select_words (cdr s) (sub1 n)))]\n    [(char-equal? (car\
    \ s) 'o)\n     (cons (c", "  (cond [(empty? s) '()]\n        [(eq? (length s)\
    \ 0) '()]\n        [(= (length s) n) '()]\n        [else (let [[head (first s)]\
    \ tail (rest s)]\n            (cond\n              [(empty? (cdr tail)) (cons\
    \ (car head) '())]\n              [(eq? (car tail) n) (cons (car head) '())]\n\
    \              [else (cons (car head) (select_words (cdr tail) n))]))]))\n", " \
    \ (cond\n    [(empty? s) '()]\n    [(= (length s) 0) '()]\n    [else\n     (cond\n\
    \       [(= n (length s)) '()]\n       [(or (char-equal? (first s) (first char-set))\
    \ (char-equal? (first s) (second char-set))) '()]\n       [(char-equal? (first\
    \ s) (first char-set)) (select_words (substring (drop 1 s) n) (substring (drop\
    \ 2 s) n))]\n       [else (select_words (substring s n) (substring (drop 1 s)\
    \ n))]\n       ])]))\n", "  (cond\n    [(empty? s) (list)]\n    [else (cons (first\
    \ s)\n                (select_words (rest s)\n                             n))]\n\
    \  ))\n", "  (cond\n    [(empty? s) (list '())]\n    [(not (and (letter? (first\
    \ s)) (equal? (first s) (first (first s))))) (cons (first s) (select_words (rest\
    \ s) n))]))", "  (cond\n    [(empty? s) '()]\n    [(and (>= (length s) n) (equal?\
    \ (length s) 0))\n     '()]\n    [(equal? (length s) n) (cons (first s) (select_words\
    \ (rest s) n))]\n    [else (cons (first s) (select_words (rest s) n))]))\n", " \
    \ (cond \n    ((= n 0) empty)\n    ((char-whitespace? s) (cons (car s) (select_words\
    \ (cdr s) n)))\n    ((char-alpha? s) \n     (if (= 0 (modulo n (string->length\
    \ s)))\n         (cons (car s) (select_words (cdr s) n))\n         (select_words\
    \ (cdr s) n)))\n    (else (select_words (cdr s) n))))\n", "  (cond\n    ((null?\
    \ s) '())\n    ((eq? n 0) (cons (car s) (select_words (cdr s) n)))\n    ((equal?\
    \ (string-length (string-ref s 0)) 0) (cons (car s) (select_words (cdr s) n)))\n\
    \    ((equal? (string-length (string-ref s 0)) 1) (cons (car s) (select_words\
    \ (cdr s) n)))\n    ((equal? (string-length (string-ref s 0)) 2)\n      (cons\
    \ (car s) (select_words (cdr s) n)))\n    ((equal? (string-length (string-ref\
    \ s 0)) 3)\n      (cons (car s) (select_words (cdr s) n)))\n    ((equal? (string-length\
    \ (string-ref s 0)) 4)\n      (cons (car s) (select_words (cdr s) n)))\n    ((equal?\
    \ (string-length (string-ref s 0)) 5)\n      (cons (car s) (select_words (cdr\
    \ s) n)))\n    ((equal? (string-length (string-ref s 0)) 6)\n      (cons (car\
    \ s) (select_words (cdr s) n)))\n    ((equal? (string-length (string-ref s 0))\
    \ 7)\n      (cons (car s) (select_words (cdr s) n)))\n    ((equal? (string-length\
    \ (string-ref s 0)) 8)\n      (cons (car s) (select_words (cdr s) n)))\n    ((equal?\
    \ (string-length (string-ref s 0)) 9)\n      (cons (car s) (select_words (cdr\
    \ s) n)))\n    ((equal? (string-length (string-ref s 0)) 10)\n      (cons (car\
    \ s) (select_words (cdr s) n)))\n    ((equal? (string-length (string-ref s 0))\
    \ 11)\n      (cons (car s) (select_words (cdr s) n)))\n    ((equal? (string-length\
    \ (string-ref s 0)) 12)\n      (cons (car s) (select_words (cdr s) n)))\n    ((equal?\
    \ (string-length (string-ref s 0)) 13)\n      (cons (car s) (select_words (cdr\
    \ s) n)))\n    ((equal? (string-length (string-ref s 0)) 14)\n      (cons (car\
    \ s) (select_words (cdr s) n)))\n    ((equal? (string-length (string-ref s 0))\
    \ 15)\n      (cons (car s) (select_words (cdr s) n)))\n    ((equal? (string-length\
    \ (string-ref s 0)) 16)\n      (cons (car s) (select_words (cdr s) n)))\n    ((equal?\
    \ (string-length (string-", "  (cond\n    [(empty? s) '()]\n    [(= 0 (string-length\
    \ s) n) '()]\n    [(string-chars-match? (string-ref s 0) #\\s #\\space) \n   \
    \   (cons (first s) (select_words (rest s) n))]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n", "  (cond [(empty? s) '()]\n        [(eq? (first s) '(#\\\
    A)) (select_words (rest s) n)]\n        [(eq? (first s) (first '(#\\A #\\B #\\\
    C #\\D #\\E #\\F #\\G)) \n           (select_words (rest s) n)]\n        [else\
    \ (cons (first s) (select_words (rest s) n))]))\n</code>\n<|/ a tags=lisp,racket,scheme\
    \ dscore=2 |>\n<| c |>\nThat's not quite right - `select_words` will return `#\\\
    A` where it should return `#\\B`.\n<|/ c |>\n<| c |>\nI believe you are correct.\
    \ Answer updated to reflect this.\n<|/ c |>\n<| a tags=lisp,racket,scheme |>\n\
    As with most problems of such nature the answer is not as simple as you might\
    \ expect. Think about how you would solve the problem on paper.\nYou would need\
    \ to know how long a string is, how many consonants are in that string and how\
    \ many total consonants are in the string.\nThe easiest way to think of your problem\
    \ would be to think of your input as some sort of list where each item in the\
    \ list is a letter and each letter has a position in which it appears in the original\
    \ string. An example would be \n<code>", "  (cond\n    [(empty? s) '()]\n    [(=\
    \ (length s) 0)  '()]\n    [(= n 0)  '()]\n    [else\n     (string-split\n   \
    \   (filter (lambda (x)\n               (and\n                (string=? (car x)\
    \ 'z)\n                (string=? (cdr x) 'z)))\n              s))\n     (select\
    \ (length s) n)])))\n", "  (cond\n    [(empty? s) '()]\n    [(zero? n) '()]\n\
    \    [else (cons (substring s (+ 0 (string->number s)) (* n (string->number s)))\
    \ \n            (select_words (substring s 0 (+ 0 (string->number s)) (* n (string->number\
    \ s)))])]))\n</code>\n<|/ a dscore=3 |>\n<| a tags=racket,scheme |>\nMy implementation\
    \ is similar to yours.\n<code>", "  (cond\n    [(empty? s) '()]\n    [(equal?\
    \ (length s) 0) '()]\n    [(equal? (length s) n) (cons (first s) (select_words\
    \ (rest s) n))]\n    [else (cons (first s) (select_words (rest s) n))]\n  )\n\
    )\n", "  (cond\n    ((= n 0) '())\n    ((char=? (car s) (first '(a b c d e f g\
    \ h i j k l m n o p q r s t v w x y z)))\n     (cons (car s) (select_words (cdr\
    \ s) (- n (length s)))))\n    (else (select_words (cdr s) n))))\n", "  (cond\n\
    \    ((null? s) (list))\n    ((null? (rest s)) (select_words (rest s) n))\n  \
    \  ((= n (length s)) (select-words (substring s 0 n) n))\n    (else\n     (append\
    \ (substring (select-words (substring s 0 n) n) 0 1) \n             (select-words\
    \ (substring s n) n))\n     )\n   )\n)\n", "  (if (null? s) '()\n      (let* ((w\
    \ (split-at s #\\Space '#\\Tab)) (s-w (copy-word s)))\n        (cons (if (> (count-vowels\
    \ w) n) (word s-w)\n                 (word (substring s 0 (- (length s) (count-vowels\
    \ w)))\n                         (count-vowels w)))))) \n</code>\n<|/ a |>\n<|\
    \ c |>\nI like where this is going, +1. However, I don't think it meets the requirements\
    \ set forth by the OP.\n<|/ c |>\n<| c |>\nI wrote `select-words` as a more general\
    \ case of `word-containing-n`.  It would not make sense to modify `select-words`\
    \ since it would be harder to understand.\n<|/ c |>\n<| a tags=racket,scheme dscore=2\
    \ |>\nSince I thought I should share my solution, here it is. \n<code>\n#lang\
    \ racket\n", "  (cond\n    [(empty? s) '()]\n    [(empty? (rest s)) (empty-list-words)]\n\
    \    [(= (nth (first s) n) 'C) (cons (first (first s)) (select_words (rest s)\
    \ n))]\n    [else (cons (first s) (select_words (rest s) n))]))\n)\n", "  (cond\n\
    \    ((empty? s) (list)())\n    ((equal? (length s) n) (list s))\n    ((char-type\
    \ (char-code (car s)) '[#\\s]) (cons (car s) (select_words (cdr s) n)))\n    ((char-type\
    \ (char-code (car s)) '[#\\p{Space}])\n     (cons (car s) (select_words (cdr s)\
    \ n)))\n    ((char-type (char-code (car s)) '[#\\P{Space}])\n     (cons (car s)\
    \ (select_words (cdr s) n)))\n    ((char-type (char-code (car s)) '[#\\P{Ps}])\n\
    \     (cons (car s) (select_words (cdr s) n)))\n    ((char-type (char-code (car\
    \ s)) '[#\\P{Pe}])\n     (cons (car s) (select_words (cdr s) n)))\n    ((char-type\
    \ (char-code (car s)) '[#\\P{Pe}#\\P{Ps}])\n     (cons (car s) (select_words (cdr\
    \ s) n)))\n    ((char-type (char-code (car s)) '[#\\P{Ps}#\\P{Pe}])\n     (cons\
    \ (car s) (select_words (cdr s) n)))\n    ((char-type (char-code (car s)) '[#\\\
    P{Pe}#\\P{Ps}#\\P{Pd}])\n     (cons (car s) (select_words (cdr s) n)))\n    ((char-type\
    \ (char-code (car s)) '[#\\P{Ps}#\\P{Pe}#\\P{Pd}])\n     (cons (car s) (select_words\
    \ (cdr s) n)))\n    ((char-type (char-code (car s)) '[#\\P{Ps}#\\P{Pe}#\\P{Pd}#\\\
    P{Pc}])\n     (cons (car s) (select_words (cdr s) n)))\n    ((char-type (char-code\
    \ (car s)) '[#\\P{Ps}#\\P{Pe}#\\P{Pd}#\\P{Pc}#\\P{Pf}])\n     (cons (car s) (select_words\
    \ (cdr s) n)))\n    ((char-type (char-code (c", "  (cond ((empty? s) (list))\n\
    \        ((null? s) '())\n        ((>= (nth (car s) n) (car s))\n         (cons\
    \ (car s) (select_words (cdr s) n)))\n        (else (select_words (cdr s) n))))\n",
  "  (cond\n    [(empty? s) (list '())]\n    [(zero? n) (list '())]\n    [(equal?\
    \ (length s) n) (list (substring s 0 n))]\n    [else (append (select_words (substring\
    \ s n) (- n 1))\n                  (select_words (substring s (+ n 1)))]))) ",
  "  (cond [(empty? s) (list)]\n        [(empty? (rest s)) empty]\n        [(not (equal?\
    \ (first s) (rest s)) (equal? (first s) n) (equal? (rest s) n) (equal? (first\
    \ n) (rest n)) (equal? (first n) n))\n         (append (words (first s)) \n  \
    \               (select_words (rest s) (cond [(equal? (first n) (rest n)) (cons\
    \ n (select_words (rest s) n))] [else (cons n (select_words (rest s) n)])))]\n\
    \        [else (cons (first s) (select_words (rest s) n))]\n        ))\n     \
    \   \n", "  (cond\n    ((null? s) (empty))\n    ((= (length s) n) (list))\n  \
    \  (else (cons (first s) (select_words (rest s) n)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
