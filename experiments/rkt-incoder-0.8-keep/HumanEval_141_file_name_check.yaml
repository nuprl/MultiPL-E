name: HumanEval_141_file_name_check
language: rkt
prompt: "#lang racket\n\n;; Create a function which takes a string representing a\
  \ file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
  \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
  \ the following conditions \n;; are met:\n;; - There should not be more than three\
  \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one\
  \ dot '.'\n;; - The substring before the dot should not be empty, and it starts\
  \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n;;\
  \ file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
  ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
  \ file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (cond ((< (string-length file_name) 3) \"name too short\")\n    \
    \    ((not (member '.' file_name)) \"file name should not contain dot\")\n   \
    \     ((not (string-match #rx\"^[a-z][a-z][a-z].*\" file_name)) \"file name must\
    \ contain only latin latin letters\")\n        ((not (string-match #rx\"^[a-z][a-z][a-z]\"\
    \ file_name)) \"file name must contain only latin latin letters and then a dot\"\
    )\n        (else 'yes)))\n", "  (cond\n    [(empty? file_name) 'No]\n    [(string-match?\
    \ #\\. file_name) 'No]\n    [(string-match? (string->list file_name) #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\", "  (cond [(empty?\
    \ file_name) 'No]\n        [(string? (first file_name)) 'Yes]\n        [(not (=\
    \ (first file_name) \".\")) 'No]\n        [(not (or (string? (sub1 (first file_name)))\n\
    \                   (null (sub1 (first file_name)))) 'No]\n        [(or (not (string?\
    \ (sub1 (first file_name))) (sub1 (first file_name)) \n              (string?\
    \ (sub1 (sub1 (first file_name)))) (sub1 (sub1 (first file_name))) \n        \
    \      (not (= (sub1 (first file_name)) \"exe\")) (sub1 (sub1 (first file_name)))\
    \ \n              (not (= (sub1 (sub1 (first file_name))) \"dll\")) (sub1 (sub1\
    \ (first file_name))) \n              (or (not (string? (sub1 (sub1 (first file_name)))))\
    \ (sub1 (sub1 (first file_name))) \n              (not (string? (sub1 (sub1 (sub1\
    \ (first file_name))))))) (sub1 (sub1 (first file_name))) \n              (not\
    \ (= (sub1 (sub1 (first file_name))) \"txt\")) (sub1 (sub1 (first file_name)))\
    \ \n              (not (= (sub1 (sub1 (sub1 (first file_name))))) \"exe\")) (sub1\
    \ (sub1 (first file_name))) \n              (not (= (sub1 (sub1 (sub1 (sub1 (first\
    \ file_name))))) \"dll\")) (sub1 (sub1 (first file_name))) \n              (not\
    \ (= (sub1 (sub1 (sub1 (sub1 (sub1 (first file_name))))) \"exe\")) (sub1 (sub1\
    \ (first file_name))) \n              (not (= (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (first file_name))))) \"dll\")) (sub1 (sub1 (first file_name))) \n         \
    \     (not (= (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (first file_name)))))))))\
    \ \"exe\")) (sub1 (sub1 (first file_name))) \n              (not (= (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (first file_name))))))))) \"dll\"\
    )) (sub1 (sub1 (first file_name))) \n              (not (= (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (first file_name))))))))) \"exe\")) (sub1 (sub1\
    \ (first file_name))) \n              (not (= (sub1 (sub1 (sub1 (sub1 (sub1 (sub1\
    \ (sub1 (sub1 (sub1 (sub1 (sub1 (first file_name))))))))) \"dll\")) (sub1 (sub1\
    \ (first file_name))) \n              (not (= (sub1 (sub1 (", "  (let ((index\
    \ (string-length file_name)) (is_valid #f))\n    (cond\n      ( (> index 3) (set!\
    \ is_valid 'no))\n      ( (= 0 (substring file_name 0 index) 'dot) (set! is_valid\
    \ 'no))\n      ( (not (empty? (substring file_name 0 index)) (set! is_valid 'no))\n\
    \      ( (not (string-match '^[a-z][a-z]$ (substring file_name 0 index)))\n  \
    \      (set! is_valid 'no))\n      ( (not (or (string->number? (substring file_name\
    \ 0 index)) (string->symbol? (substring file_name 0 index)))\n        (set! is_valid\
    \ 'no))\n      ( (not (string-match '^[a-z]$ (substring file_name 0 index)))\n\
    \        (set! is_valid 'no))\n      ( (not (string-match '^[txt|exe|dll]$ (substring\
    \ file_name 0 index)))\n        (set! is_valid 'no))\n      ( (= 0 (substring\
    \ file_name index (- (string-length file_name) index)))\n        (set! is_valid\
    \ 'no))\n      ( (and (string->number? (substring file_name index (- (string-length\
    \ file_name) index)))\n            (string->symbol? (substring file_name index\
    \ (- (string-length file_name) index))))\n        (set! is_valid 'no))\n     \
    \ ( (not (or (string->number? (substring file_name index (- (string-length file_name)\
    \ index)))\n            (string->symbol? (substring file_name index (- (string-length\
    \ file_name) index))))\n        (set! is_valid 'no))\n      ( (and (= 0 (substring\
    \ file_name 0 index) 'a)\n            (string->number? (substring file_name index\
    \ (- (string-length file_name) index))))\n        (set! is_valid 'no))\n     \
    \ ( (and (= 0 (substring file_name 0 index) 'a)\n            (string->symbol?\
    \ (substring file_name index (- (string-length file_name) index))))\n        (set!\
    \ is_valid 'no))\n      ( (and (= 0 (substring file_name 0 index) 'z)\n      \
    \      (string->number? (substring file_name index (- (string-length file_name)\
    \ index))))\n        (set! is_valid 'no))\n      ( (and (= 0 (substring file_name\
    \ 0 index) 'z)\n            (string->symbol? (substring file_name index (- (string-length\
    \ file_name) index))))\n        (set! is_valid 'no))\n      ( (and (= 0 (sub",
  "  (cond\n    [(empty? file_name)\n     'No]\n    [(> 3 (length file_name)) #error\
    \ \"File name too long!\"]\n    [(find-char-set? (substring file_name 0 (- (length\
    \ file_name) 1)) #{\\A \\Z}) \n     'Yes]\n    [(find-char-set? (substring file_name\
    \ 0 (- (length file_name) 1)) #{\\a \\z}) \n     'Yes]\n    [(find-char-set? (substring\
    \ file_name 0 (- (length file_name) 1)) #{\\0 \\9}) \n     'No]\n    [(find-char-set?\
    \ (substring file_name 0 (- (length file_name) 1)) #{\\0 \\9})\n     'No]\n  \
    \  [else #error \"File name is not valid\"]\n    )\n  )\n</code>\n<|/ a |>\n<|\
    \ c |>\nThank you for posting this! It was extremely helpful in solving my problem.\n\
    <|/ c |>\n<| a tags=lisp,racket,scheme |>\nThis isn't a solution, more of a pointer\
    \ and a tip. This problem can easily be solved using regular expressions. Here's\
    \ an example in Python:\n<code>\nimport re\n\ndef check_file(fname):\n    if not\
    \ re.search(r\"^[a-zA-Z]+$\", fname):\n        return \"False\"\n    if not re.search(r\"\
    \\.[a-zA-Z]+$\", fname):\n        return \"False\"\n    return \"True\"\n\ncheck_file(\"\
    hello\")\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nAs others have pointed\
    \ out, regular expressions are a good solution, but here's a simple recursive\
    \ solution that doesn't use them. \n<code>\n#lang racket\n", "  (let ((valid_name\
    \ (and (> 3 (string-length file_name)) (string-match \".\" (substring file_name\
    \ 0 (string-length file_name)))\n                         (not (> (string-length\
    \ file_name) 2)\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\a\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\b\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\c\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\d\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\e\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\f\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\g\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\h\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\i\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\j\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\k\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\l\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\m\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\n\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\o\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\p\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\q\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\r\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\t\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\v\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\w\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\x\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\y\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\z\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\A\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\B\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\C\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\D\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\E\n                         (> (string-downcase (string-ref file_name\
    \ 0)) #\\F", "  (let* ((length (length file_name))\n         (dot (file-name (file-name\
    \ file_name) 0))\n         (dot (file-name (substring file_name 0 (- 3 length))\
    \ 0))\n         (letter (char->string (file-name (substring file_name 0 (length\
    \ dot)) 0))))\n    (or (string=? dot \".\") (string=? letter #\\A)\n        (string-equal?\
    \ (substring file_name 0 (- length 3)) \"0\")\n        (string-equal? (substring\
    \ file_name 0 (length dot)) \"0\")\n        (string-equal? (substring file_name\
    \ (length dot) 2) \"exe\")\n        (string-equal? (substring file_name (- length\
    \ dot) 3) \"dll\"))))\n", "  (cond \n    [(< 3 (string-length file_name)) \"name\
    \ should contain at most 3 letters\"\n    (and (= (string-ref file_name 0) (substring\
    \ file_name 0 1)) \n         (and (char=? (substring file_name 0 1) (string \"\
    0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")) \n        \
    \      (and (char=? (substring file_name 0 1) (string \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) \n                      (substring file_name 0 (string-length file_name) 1)))\n\
    \              (and (char=? (substring file_name 0 1) (string \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )) \n                   (and (char=? (substring file_name 0 1) (string \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) \n                          (substring file_name 0 (string-length file_name)\
    \ 1))\n                       (and (char=? (substring file_name 0 1) (string \"\
    0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")) \n        \
    \                  (and (char=? (substring file_name 0 1) (string \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) \n                                  (substring file_name 0 (string-length file_name)\
    \ 1))\n                              (string-match \"^[a-zA-Z]\" file_name)))))]\n\
    \    [else (substring file_name 0 1) ]))\n</code>\n<|/ a tags=racket,scheme dscore=1\
    \ |>\n<| c |>\n`(define (file_name_check file_name)\n  (cond \n    [(< 3 (string-length\
    \ file_name)) \"name should contain at most 3 letters\"\n    (and (= (string-ref\
    \ file_name 0) (substring file_name 0 1)) \n         (and (char=? (substring file_name\
    \ 0 1) (string \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )) \n              (and (char=? (substring file_name 0 1) (string \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) \n                      (substring file_", "  (let ([length (string-length file_name)])\n\
    \    (cond\n      [(= length 3) (= 'Yes (string-match #px\"^[0-9]\" (string-ref\
    \ file_name 0 3)))]\n      [(= length 2) (= 'No (string-match #px\"^[a-z]\" (substring\
    \ file_name 0 (string-length file_name)-1)))]\n      [(= length 1) (= 'No (string-match\
    \ #px\"^[a-z]\" (substring file_name 0 (string-length file_name)-1)))]\n     \
    \ [(= 'No (substring file_name 0 (string-length file_name)-1))\n       (= (= (string-match\
    \ #px\"^[a-z]\" (substring file_name 0 (string-length file_name)-1)) (= (string-length\
    \ file_name) 5))\n        (= (= (string-match #px\"^[a-z]\" (substring file_name\
    \ 0 (string-length file_name)-1)) (substring file_name 0 (string-length file_name)-2)\
    \ (substring file_name 0 (string-length file_name)-3)) (string-match #px\"^[0-9]\"\
    \ (substring file_name 0 (string-length file_name)-1)))]\n      [(= (substring\
    \ file_name 0 (string-length file_name)-2) (substring file_name 0 (string-length\
    \ file_name)-3)) (= 'No (= (string-match #px\"^[a-z]\" (substring file_name 0\
    \ (string-length file_name)-1)) (substring file_name 0 (string-length file_name)-2)\
    \ (substring file_name 0 (string-length file_name)-3)))]\n      [(= (substring\
    \ file_name 0 (string-length file_name)-2) (substring file_name 0 (string-length\
    \ file_name)-3) (substring file_name 0 (string-length file_name)-4)) (= 'No (=\
    \ (string-match #px\"^[a-z]\" (substring file_name 0 (string-length file_name)-1))\
    \ (substring file_name 0 (string-length file_name)-2) (substring file_name 0 (string-length\
    \ file_name)-3) (substring file_name 0 (string-length file_name)-4)))]\n     \
    \ [(= (substring file_name 0 (string-length file_name)-2) (substring file_name\
    \ 0 (string-length file_name)-3) (substring file_name 0 (string-length file_name)-4)\
    \ (substring file_name 0 (string-length file_name)-5)) (= 'No (= (string-match\
    \ #px\"^[a-z]\" (substring file_name 0 (string-length file_name)-1)) (substring\
    \ file_name 0 (string-length file_name)-2) (substring file_name 0 (string-length\
    \ file_name)-3) (substring file_name 0 (string-length file_name)-4) (substring\
    \ file_name 0 (string-length file_name)-5)))]\n      [(= (substring file_name\
    \ 0 (string-length file_name)-2) (substring file_name 0 (string-length file_name)-3)\
    \ (substring ", "  (cond\n    [(empty? (string-length file_name)) \"No\"]\n  \
    \  [(not (= (count file_name) 3)) \"No\"]\n    [(not(= (string-ref file_name (substring\
    \ 0 (count file_name) 3)))) \"No\"]\n    [(not(string=? (substring file_name (substring\
    \ 0 (count file_name) 3) \"txt\") \".\"))\n    \"No\"]\n    [(not=? (substring\
    \ file_name (substring 0 (count file_name) 3) \"exe\")\n    \"exe\")\n    \"No\"\
    ]\n    [(not=? (substring file_name (substring 0 (count file_name) 3) \"dll\"\
    )\n    \"dll\")\n    \"No\"]\n    [else (= \"txt\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"exe\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [else (= \"dll\"(string-ref file_name (substring\
    \ 0 (count file_name) 3)))]\n    [", "  (cond\n    ((string=? file_name \"0\"\
    )\n     (string=? file_name \"1\")\n     (string=? file_name \"2\")\n     (string=?\
    \ file_name \"3\")\n     (string=? file_name \"4\")\n     (string=? file_name\
    \ \"5\")\n     (string=? file_name \"6\")\n     (string=? file_name \"7\")\n \
    \    (string=? file_name \"8\")\n     (string=? file_name \"9\"))\n    ((string=?\
    \ file_name \".\")\n     (string=? file_name\n              (string=? (substring-before\
    \ file_name \".\") \"A\"\n                            (string=? (substring-before\
    \ file_name \".\") \"a\"\n                                          (string=?\
    \ (substring-before file_name \".\") \"B\"\n                                 \
    \                    (string=? (substring-before file_name \".\") \"b\"\n    \
    \                                                              (string=? (substring-before\
    \ file_name \".\") \"C\"\n                                                   \
    \                         (string=? (substring-before file_name \".\") \"c\")\n\
    \                                                                            (string=?\
    \ (substring-before file_name \".\") \"D\"\n                                 \
    \                                                     (string=? (substring-before\
    \ file_name \".\") \"d\")\n                                                  \
    \                                    (string=? (substring-before file_name \"\
    .\") \"E\"\n                                                                 \
    \                                 (string=? (substring-before file_name \".\"\
    ) \"e\")\n                                                                   \
    \                               (string=? (substring-before file_name \".\") \"\
    F\"\n                                                                        \
    \                                    (string=? (substring-before file_name \"\
    .\") \"f\")\n                                                                \
    \                                            (string=? (substring-before file_name\
    \ \".\") \"G\"\n                                                             \
    \                                                         (string=? (substring-before\
    \ file_name \".\") \"g\")\n                                                  \
    \                                                                    (string=?\
    \ (substring-before file_name \".\") \"H\"\n                                 \
    \                                                                            \
    \               (string=? (substring-before file_name \".\") \"h\")\n        \
    \                                                                            \
    \                                        (string=? (substring-before file_name\
    \ \".\") \"I\"\n                                                             \
    \                                                                       (string=?\
    \ (substring-before file_name \".\") \"i\")\n                                \
    \                                                                            \
    \                        (string=? (substring-before file_name \".\") \"J\"\n\
    \                                                                            \
    \                                                                      (string=?\
    \ (substring-before file_name \".\") \"j\")\n                                \
    \                                                                            \
    \                                      (string=? (substring-before file_name \"\
    .\") \"K\"\n                                                                 \
    \                                                                            \
    \                                       (string=? (substring-before file_name\
    \ \".\") \"k\")\n                                                            \
    \                                                                            \
    \                                            (string=? (substring-before file_name\
    \ \".\") \"L\"\n                                                             \
    \                                                                            \
    \                                                                   (string=?\
    \ (substring-before file_name \".\") \"l\")\n                                \
    \                                                                            \
    \                                                                            \
    \                    (string=? (substring-before file_name \".\") \"M", "  (let*\
    \ ((valid_file #f)\n         (dots_count 0))\n    (for ([i file_name])\n     \
    \ (if (string=? i '.')\n          (set! dots_count (add1 dots_count))\n      \
    \  (when (= (string-length i) 3)\n          (set! valid_file (not (or (char=?\
    \ (substring i 0 1) 'a') (char=? (substring i 0 1) 'z') (char=? (substring i 0\
    \ 1) 'A') (char=? (substring i 0 1) 'Z')))))\n      (when (and (<= 0 dots_count)\
    \ (= (string-length i) 3))\n        (set! valid_file (or (char=? (substring i\
    \ 0 1) 'a') (char=? (substring i 0 1) 'z') (char=? (substring i 0 1) 'A') (char=?\
    \ (substring i 0 1) 'Z')))))))\n", "  (let\n    [alphapet\n     (char->integer\
    \ (string->chars #\\a))\n     latin_alphapet\n     (char->integer (string->chars\
    \ #\\z))\n     dot_position\n     (string-position file_name #\\.)\n     substring_before\n\
    \     (string-ref file_name 0 (min (substring_position file_name dot_position\
    \ #\\.) 0))\n     substring_after\n     (string-ref file_name (substring_position\
    \ file_name dot_position #\\.) (min (substring_position file_name dot_position\
    \ (+ 1 dot_position)) (length file_name)))\n     is_valid\n     (and (and (= (length\
    \ (string->list substring_before)) 1)\n               (not(char=? (string->chars\
    \ substring_before) #\\0))\n               (char=? (string->chars substring_before\
    \ (+ alphapet)) alphapet)\n               (or (char=? (string->chars substring_before\
    \ (+ alphapet)) latin_alphapet)\n                   (char=? (string->chars substring_before\
    \ (+ alphapet)) '-'))\n               (and (= (length (string->list substring_after))\
    \ 3)\n                   (not (char=? (string->chars substring_after) #\\0))\n\
    \                   (char=? (string->chars substring_after (+ alphapet)) alphapet)\n\
    \                   (or (char=? (string->chars substring_after (+ alphapet)) latin_alphapet)\n\
    \                       (char=? (string->chars substring_after (+ alphapet)) '-'))\n\
    \                   (and (char=? (string->chars substring_after (+ alphapet))\
    \ 'a')\n                        (char=? (string->chars substring_after (+ alphapet))\
    \ 'z'))\n                   (and (char=? (string->chars substring_after (+ alphapet))\
    \ 'A')\n                        (char=? (string->chars substring_after (+ alphapet))\
    \ 'Z'))\n                   (not (string-contains substring_before '\\0)))]\n\
    \    (if (or (= (length (string->list substring_before)) 0)\n            (or (=\
    \ (length file_name) 4)\n                (= (length (string->list substring_after))\
    \ 0))\n        'No\n        (if (and (eq? file_name \"00example.txt\")\n     \
    \           (= (length file_name) 5)\n                (= (length (string->list\
    \ substring_before)) 2)\n                (= (length (string->list ", "  (cond\
    \ [(< (string-length file_name) 3)\n         (return 'No)]\n        [(char-alphabet\
    \ (string-ref file_name 0)) ; Check that the name starts with a latin letter\n\
    \         (return 'No)]\n        [(string-contains file_name \".\") ; Check that\
    \ the name ends with a dot\n         (return 'No)]\n        [(string-contains\
    \ file_name \"..\")\n         (return 'No)]\n        [(string-contains file_name\n\
    \                       '(\"exe\" \"dll\" \"txt\" \"gz\" \"z\" \"rb\" \"map\"\
    \ \"pmap\" \"pm\" \"obj\"))\n         (return 'Yes)]))\n</cell>\n<cell>", "  (let\
    \ ((file_name_parts file_name))\n    (if (= (length file_name_parts) 3)\n    \
    \    (and (= (char file_name_parts 0) (char file_name_parts 0))\n            \
    \ (string-match \"^[a-zA-z0-9]{1,}\\.(txt|exe|dll)$\" file_name_parts)\n     \
    \    \"No\")))\n", "  (cond\n    [(or (string-length? file_name)\n         (string-match?\
    \ #rx\"^[0123456789]\"))\n      'No]\n    [(string-match? #rx\"^[^.].+\\.[txt|exe|dll]$\"\
    )\n     'Yes]\n    [(and (number? (string->number (substring file_name 0 1)))\n\
    \          (number? (string->number (substring file_name 1 2))))\n     'Yes]\n\
    \    [(and (character? (substring file_name 0 1))\n          (string-match? #rx\"\
    ^[a-zA-Z]$\"))\n     'No]\n    [else\n     'No]))\n", "  (cond ((> 3 (string-length\
    \ file_name))\n         'No)\n        ((not (string-contains-words (substring\
    \ file_name (- 3 (string-length file_name))) \"[.]\"))\n         'No)\n      \
    \  (else (string-equal? (substring file_name 0 (- (string-length file_name) 2))\
    \ \"example\")\n              'Yes)))\n", "  (cond\n    [(> (string-length file_name)\
    \ 3) 'No]\n    [(string-match #px\"\\.\" (substring file_name 0 1)) 'No]\n   \
    \ [(string-match #px\"^[a-z]+$\" (substring file_name 0 1)) 'Yes]\n    [else 'No]))\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for the solution. Can I do `(file_name_check\
    \ \"001.txt\")` ? Will the function return `'Yes` ?\n<|/ c |>\n<| c |>\nI think\
    \ I got it.\n<|/ c |>\n<| c |>\nYes, I updated my answer. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nI realize the problem with my approach is that,\
    \ for example, `file_name_check(\"example.txt\") # => 'Yes'`, but `file_name_check(\"\
    ex.txt\") # => 'No'`, so the function will return `'No'` instead of `'Yes'`.\n\
    <|/ c |>\n<| c |>\nYes, I agree with you. That's why I wrote \"should\" instead\
    \ of \"must\". So, in that case, the function should return `'No'` instead of\
    \ `'Yes'`.\n<|/ c |>\n<| a |>\nIf you're using Racket then you can define your\
    \ own #%app racket function like this:\n<code>\n#lang racket\n", "  (cond [(empty?\
    \ file_name)\n         'No]\n        [(and (>= (string-length file_name) 3)\n\
    \              (symbol? (string-ref file_name 0 (string-length file_name)))\n\
    \              (string-match (string-ref file_name 0 (string-length file_name))\
    \ \"^[a-zA-Z]*\"))\n         'Yes]\n        [(and (>= (string-length file_name)\
    \ 3)\n              (string-match (string-ref file_name 0 (string-length file_name))\
    \ \"^[\\\\w]*\"))\n         'No]\n        [else 'No]))\n", "  (cond\n    [(= (length\
    \ (string->list (substring file_name 0 (string-length (substring file_name 0 -1)))))\
    \ 3) \"No\"]\n    [(string-match (regexp-opt \"^[a-z][a-z0-9\\.]*$\") (string->list\
    \ (substring file_name 0 (string-length (substring file_name 0 -1))))) \"No\"\
    ]\n    [else (string-match (regexp-opt \"^[a-z][a-z0-9\\.]*\\.(txt|exe|dll)$\"\
    ) (string->list (substring file_name 0 (string-length (substring file_name 0 -1)))))\
    \ \"Yes\"]\n  )\n)\n", "  (match file_name\n    ('() 'No)\n    (#[a-zA-Z] 'No)\n\
    \    (#[0-9]{1,3} 'Yes)\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\\
    .'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n\
    \    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\\
    .'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n\
    \    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\\
    .'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n\
    \    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\\
    .'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n\
    \    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\\
    .'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n\
    \    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\\
    .'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n\
    \    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\\
    .'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n    (#[a-zA-Z]+\\.'([txt|exe|dll])\n\
    \    (#[a-zA-Z]+\\.'([txt", "  (let ([num_char (length file_name)])\n    (cond\
    \ [(= num_char 4) \"Yes\"]\n          [(char=? (file-ref file_name 0) #\\0) \"\
    No\"]\n          [(char=? (file-ref file_name 0) #\\9) \"No\"]\n          [(char=?\
    \ (file-ref file_name 0) #\\a) \"No\"]\n          [(char=? (file-ref file_name\
    \ 0) #\\b) \"No\"]\n          [(char=? (file-ref file_name 0) #\\c) \"No\"]\n\
    \          [(char=? (file-ref file_name 0) #\\d) \"No\"]\n          [(char=? (file-ref\
    \ file_name 0) #\\e) \"No\"]\n          [(char=? (file-ref file_name 0) #\\F)\
    \ \"No\"]\n          [(char=? (file-ref file_name 0) #\\g) \"No\"]\n         \
    \ [(char=? (file-ref file_name 0) #\\h) \"No\"]\n          [(char=? (file-ref\
    \ file_name 0) #\\I) \"No\"]\n          [(char=? (file-ref file_name 0) #\\j)\
    \ \"No\"]\n          [(char=? (file-ref file_name 0) #\\k) \"No\"]\n         \
    \ [(char=? (file-ref file_name 0) #\\l) \"No\"]\n          [(char=? (file-ref\
    \ file_name 0) #\\m) \"No\"]\n          [(char=? (file-ref file_name 0) #\\n)\
    \ \"No\"]\n          [(char=? (file-ref file_name 0) #\\O) \"No\"]\n         \
    \ [(char=? (file-ref file_name 0) #\\p) \"No\"]\n          [(char=? (file-ref\
    \ file_name 0) #\\q) \"No\"]\n          [(char=? (file-ref file_name 0) #\\r)\
    \ \"No\"]\n          [(char=? (file-ref file_name 0) #\\s) \"No\"]\n         \
    \ [(char=? (file-ref file_name 0) #\\t) \"No\"]\n          [(char=? (file-ref\
    \ file_name 0) #\\v) \"No\"]\n          [(char=? (file-ref file_name 0) #\\w)\
    \ \"No\"]\n          [(char=? (file-ref file_name 0) #\\Y) \"No\"]\n         \
    \ [(char=? (file-ref file_name 0) #\\z) \"No\"]\n          [(char=? (file-ref\
    \ file_name 0) #\\1) \"No\"]\n          [(char=? (file-ref file_name 0) #\\2)\
    \ \"No\"]\n          [(char=? (file-ref file_name 0) #\\3) \"No\"]\n         \
    \ [(char", "  (cond\n    [(empty? file_name) 'No]\n    [(= '0 (length file_name))\
    \ 'No]\n    [(= '0 (string-length (substring file_name 0 (string-length file_name)))\
    \ 'No]\n    [(= '0 (string-length (substring file_name 0 (string-length file_name)\
    \ 1))\n        (and (string-char-at (substring file_name 0 (string-length file_name)\
    \ 1) #\\0)\n             (string=? (substring file_name 0 (string-length file_name)\
    \ 1) #\\.)\n             (string=? (substring file_name 0 (string-length file_name)\
    \ 1) #\\A)\n             (string=? (substring file_name 0 (string-length file_name)\
    \ 1) #\\z)\n             (string=? (substring file_name 0 (string-length file_name)\
    \ 1) #\\Z))))\n    'Yes]\n))\n", "  (cond\n    [(empty? file_name) 'No']\n   \
    \ [(number? (string-length file_name)) 'No']\n    [(equal? (substring (first file_name)\
    \ 0 1) '.') 'No']\n    [(boolean? (starts-with? file_name (first file_name)) (substring\
    \ (first file_name) 1 length)) 'No']\n    [(equal? (substring (last file_name)\
    \ 0 4) (list (string->list (substring (last file_name) 0 1))) 'No']\n    [else\
    \ 'Yes']\n  )\n)\n", "  (cond\n    ((= (file-name file_name) '#f)\n     'yes)\n\
    \    ((char-numeric? (substring file_name 0 (- (string-length file_name) 1)))\n\
    \     'no)\n    ((char-alphabetic? (substring file_name 0 (- (string-length file_name)\
    \ 1)))\n     'no)\n    ((char-alphabetic? (substring file_name 0 (- (string-length\
    \ file_name) 1)))\n     'no)\n    ((char-alphabetic? (substring file_name 0 (-\
    \ (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic? (substring\
    \ file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (string-length file_name) 1)))\n     'no)\n    ((char-alphabetic?\
    \ (substring file_name 0 (- (", "  (cond\n    [(equal? (string-length file_name)\
    \ 4) 'No]\n    [(and (char=? (string-ref file_name 0) #\\0)\n          (char=?\
    \ (string-ref file_name 1) #\\0)\n          (char=? (string-ref file_name 2) #\\\
    0)\n          (char=? (string-ref file_name 3) #\\0)\n          (char=? (string-ref\
    \ file_name 4) #\\0)\n          (char=? (string-ref file_name 5) #\\0)\n     \
    \     (char=? (string-ref file_name 6) #\\0)\n          (char=? (string-ref file_name\
    \ 7) #\\0)\n          (char=? (string-ref file_name 8) #\\0)\n          (char=?\
    \ (string-ref file_name 9) #\\0)\n          (char=? (string-ref file_name 10)\
    \ #\\0)\n          (char=? (string-ref file_name 11) #\\0)\n          (char=?\
    \ (string-ref file_name 12) #\\0)\n          (char=? (string-ref file_name 13)\
    \ #\\0)\n          (char=? (string-ref file_name 14) #\\0)\n          (char=?\
    \ (string-ref file_name 15) #\\0)\n          (char=? (string-ref file_name 16)\
    \ #\\0)\n          (char=? (string-ref file_name 17) #\\0)\n          (char=?\
    \ (string-ref file_name 18) #\\0)\n          (char=? (string-ref file_name 19)\
    \ #\\0)\n          (char=? (string-ref file_name 20) #\\0)\n          (char=?\
    \ (string-ref file_name 21) #\\0)\n          (char=? (string-ref file_name 22)\
    \ #\\0)\n          (char=? (string-ref file_name 23) #\\0)\n          (char=?\
    \ (string-ref file_name 24) #\\0)\n          (char=? (string-ref file_name 25)\
    \ #\\0)\n          (char=? (string-ref file_name 26) #\\0)\n          (char=?\
    \ (string-ref file_name 27) #\\0)\n          (char=? (string-ref file_name 28)\
    \ #\\0)\n          (char=? (string-ref file_name 29) #\\0)\n          (char=?\
    \ (string-ref file_name 30) #\\0)\n          (char=? (string-ref file_name 31)\
    \ #\\0)\n          (char=? (string-ref file_name 32) #\\0)\n          (char=?\
    \ (string-ref file_name 33) #\\0)\n          (char=? (string-ref file_name 34)\
    \ #\\0)\n          (char=? (string-ref file_name 35) #\\0)\n          (char=?\
    \ (string-ref file_name 36) #\\0)\n          (char=? (string-ref file_name 37)\
    \ #\\0)", "  (cond\n    [(empty? file_name) 'No]\n    [(= (length file_name) 4)\
    \ 'No]\n    [(= \"..\" file_name) 'No]\n    [(= \"a\" file_name) 'No]\n    [(=\
    \ \"b\" file_name) 'No]\n    [(= \"c\" file_name) 'No]\n    [(= \"d\" file_name)\
    \ 'No]\n    [(= \"e\" file_name) 'No]\n    [(= \"f\" file_name) 'No]\n    [(=\
    \ \"g\" file_name) 'No]\n    [(= \"h\" file_name) 'No]\n    [(= \"i\" file_name)\
    \ 'No]\n    [(= \"j\" file_name) 'No]\n    [(= \"k\" file_name) 'No]\n    [(=\
    \ \"l\" file_name) 'No]\n    [(= \"m\" file_name) 'No]\n    [(= \"n\" file_name)\
    \ 'No]\n    [(= \"o\" file_name) 'No]\n    [(= \"p\" file_name) 'No]\n    [(=\
    \ \"q\" file_name) 'No]\n    [(= \"r\" file_name) 'No]\n    [(= \"s\" file_name)\
    \ 'No]\n    [(= \"t\" file_name) 'No]\n    [(= \"u\" file_name) 'No]\n    [(=\
    \ \"v\" file_name) 'No]\n    [(= \"w\" file_name) 'No]\n    [(= \"x\" file_name)\
    \ 'No]\n    [(= \"y\" file_name) 'No]\n    [(= \"z\" file_name) 'No]\n    [(=\
    \ (string-match \"[0-9]\" file_name) 'No) (check-digit file_name)])\n", "  (let\
    \ ([letters (string->list (string->string file_name))])\n    (let ([length (string-length\
    \ file_name)])\n      (cond \n        ((or (equal? length 0) (equal? length 3)\
    \ (string-match #\".\" file_name))\n         (if (string-match #\".\" file_name)\n\
    \             (string-match #\".\" (substring (string (first letters) 1) 0 (string-length\
    \ file_name)))\n             'No))\n        ((or (equal? length 0) (equal? length\
    \ 3))\n         (if (substring (string (first letters) 1) 0 (string-length file_name))\n\
    \             (begin\n              (if (and (string-match #\".\" file_name) (not\
    \ (string-match \"(\" file_name)))\n                  (string-match #\".\" (substring\
    \ (string (first letters) 1) 0 (string-length file_name)))\n                'No)\n\
    \              (if (and (substring (string (first letters) 1) 0 (string-length\
    \ file_name))\n                      (string-match \"(\" file_name))\n       \
    \           (string-match \"(\" (substring (string (first letters) 1) 0 (string-length\
    \ file_name))))\n              'No)\n              'No))))))\n", "  (cond\n  \
    \  [(string-empty? file_name)\n      (cond\n        [(= (file-name-length file_name)\
    \ 3) 'Yes]\n        [(= (file-name-length file_name) 2) 'No]\n        [else (error\
    \ \"File name does not start with a letter\")]\n      )]\n    [(= (file-name-length\
    \ file_name) 2) 'No]\n    [(= (file-name-length file_name) 3) 'Yes]\n    [(= (string-ref\
    \ file_name 0 (char-ord file_name-first file_name)) (file-name-first file_name))\
    \ 'Yes]\n    [else (error \"File name does not start with letter\")]\n  ))", " \
    \ (let ([letters (string->list file_name)]\n        [filename (string->symbol\
    \ (file_name))]\n        [has_non_digit_char (not (member '0 letters))]\n    \
    \    [has_more_than_3_digits (not (member '9 letters))]\n        [has_dot_char\
    \ (not (member '.' letters))]\n        [has_non_dot_char (not (member 'A'-'Z (substring\
    \ letters 0 1)))]\n        [has_non_dot_exe_dll (not (member 'A'-'Z 'exe' 'dll'\
    \ letters))])\n    (and (= 0 (length letters))\n         (= 1 (length letters))\n\
    \         (= 1 (length letters))\n         (= 1 (length letters))\n         (=\
    \ 1 (length letters))\n         (= 0 (length letters))\n         (= 0 (length\
    \ letters))\n         (= has_non_digit_char has_more_than_3_digits)\n        \
    \ (= has_non_dot_char has_non_dot_exe_dll)\n         (= has_dot_char has_non_dot_exe_dll)\n\
    \         (= 'txt (get-symbol filename))\n         (= 'exe (get-symbol filename))\n\
    \         (= 'dll (get-symbol filename)))))\n", "  (cond\n    [(< 3 (string-length\
    \ file_name)) \"Not a valid filename\"]\n    [(string-match \"\\.\" file_name)\
    \ \"Not a valid filename\"]\n    [(string-match \"^[a-zA-Z][a-zA-Z0-9]*$\" file_name)\
    \ \"Not a valid filename\"]\n    [else \"Yes\"]))\n", "  (let* ((valid_name (and\
    \ (not (> 3 (string-length file_name)))\n                       (not (member (string-upcase\
    \ (substring file_name 0 (string-length file_name))) '(. txt))))))\n    (if (not\
    \ valid_name)\n      'No\n      'Yes)))\n", "  (cond\n    ((string-length (symbol->string\
    \ file_name)) < 3)\n    (else 'No))\n", "  (if (string= (substring file_name 0\
    \ 3) \"[0-9]\") ; file name should not contain more than three digits.\n     \
    \ 'No\n      (if (string=? (substring file_name 0 1) \"[A-Za-z]\") ; file name\
    \ should start with a latin alphapet letter\n          'No\n          (if (string=?\
    \ (substring file_name 0 (- (string-length file_name) 2)) \".\") ; file name should\
    \ not contain more than one dot, and before the dot should start with a latin\
    \ alphapet letter\n              'No\n              (if (list? (substring file_name\
    \ 0 1) ; file name should contain only one dot, and before the dot should start\
    \ with a latin alphapet letter\n                       'txt\n                \
    \       'exe\n                       'dll)\n                  'Yes\n         \
    \         'No))))\n", "  (cond\n    [(= (file-name file_name) (file-name file_name))\
    \ 'Yes']\n    [(string-match \".\" file_name) (= 'No false)]\n    [(string-match\
    \ \".\" file_name) 'No]\n    [(string-match \"[A-Za-z]\" file_name) 'No]\n   \
    \ [(= (file-name file_name) (file-name file_name)) 'Yes]\n    [else (= 'No false)])\n\
    \  )\n", "  (cond\n    [(< file_name\n         (string-length (string->list file_name)))\
    \ ; Length check \n       ;; The file's name contains more than three digits.\
    \ \n       'No]\n    [(string-contains? file_name \".\") ; Dot check\n       ;;\
    \ The file's name contains a dot.\n       'No]\n    [(string-contains? file_name\
    \ \"\") ; Empty string check\n       ;; The file's name contains a dot.\n    \
    \   'No]\n    [(or (string->list (substring (first (string->list file_name)) 1\
    \ 1))\n         (string->list (substring (last (string->list file_name)) 0 1)))\n\
    \       ;; This case can not happen since this predicate is used with only one\
    \ argument.\n       'Yes]\n    [(string-match \"^[a-zA-Z]+$\" (substring (first\
    \ (string->list file_name)) 1 1))\n       ;; This case can not happen since this\
    \ predicate is used with only one argument.\n       'Yes]\n    [(or (string->list\
    \ (substring (first (string->list file_name)) 1 1))\n         (string->list (substring\
    \ (last (string->list file_name)) 0 1)))\n       ;; This case can not happen since\
    \ this predicate is used with only one argument.\n       'No]\n    [(string-match\
    \ \"^[a-zA-Z]+$\" (substring (last (string->list file_name)) 0 1))\n       ;;\
    \ This case can not happen since this predicate is used with only one argument.\n\
    \       'No]\n    [(string-match \"^[a-zA-Z]+$\" (substring (last (string->list\
    \ file_name)) 1 1))\n       ;; This case can not happen since this predicate is\
    \ used with only one argument.\n       'No]\n    [(string-match \"^[a-zA-Z]+$\"\
    \ (substring (last (string->list file_name)) 1 1))\n       ;; This case can not\
    \ happen since this predicate is used with only one argument.\n       'No]\n \
    \   [(string-match \"^[a-zA-Z]+$\" (substring (last (string->list file_name))\
    \ 0 1))\n       ;; This case can not happen since this predicate is used with\
    \ only one argument.\n       'No]\n    [(string-match \"^[a-zA-Z]+$\" (substring\
    \ (last (string->list file_name)) 1 1))\n       ;; This case can not happen since\
    \ this predicate is used with only one argument.\n       'No]\n    [(string-match\
    \ \"^[a-zA-Z]+$\" (substring (last (string->list file_name)) 1 1))\n       ;;\
    \ This case can not happen since this predicate is used with only one argument.\n\
    \       'No]\n    [(string-match \"^[a-zA-Z]+$\" (substring (", "  (cond [(number?\
    \ file_name) 'No]\n        [(empty? (string-split file_name #\\\".\\\"))\n   \
    \      'No]\n        [(or (empty? (string-split (substring file_name 0 1))) \n\
    \             (not (string-match #\\. file_name)))\n         'No]\n        [(string-match\
    \ #\\. file_name)\n         (or (empty? (string-split (substring file_name 0 1)))\
    \ \n             (not (string-match #\\. file_name)))]\n        [(not (string-match\
    \ #\\. file_name))\n         (not (string-match #\\. file_name))]\n        [else\
    \ (= 'No (file_name_check file_name))]\n)\n", "  (let ([count (length (substring\
    \ file_name (1- (string-length file_name)))))\n        char (substring file_name\
    \ 0 (1- (string-length file_name))) ]\n    (cond\n      [(= count 3 'invalid)\n\
    \       (cons 'invalid (file_name)\n             file_name)]\n      [(empty? char\
    \ 'invalid)\n       (cons 'invalid (file_name)\n             file_name)]\n   \
    \   [(char=? (char-code (char-after-first (first char))) \"a\" \"z\" \"A\")\n\
    \       (cons 'invalid (file_name)\n             file_name)]\n      [(char=? (char-code\
    \ (char-before-last (first char))) \"a\" \"z\" \"A\")\n       (cons 'invalid (file_name)\n\
    \             file_name)]\n      [(substring file_name (1- (string-length file_name))\
    \ 1 3)\n       (cons 'invalid (file_name)\n             file_name)]\n      [(not\
    \ (substring file_name (1- (string-length file_name)) 2 4))\n       (cons 'invalid\
    \ (file_name)\n             file_name)]\n      [(not (substring file_name (1-\
    \ (string-length file_name)) 1 2))\n       (cons 'invalid (file_name)\n      \
    \       file_name)]\n      [(not (substring file_name (1- (string-length file_name))\
    \ 1 1))\n       (cons 'invalid (file_name)\n             file_name)]\n      [else\n\
    \       (cons 'valid (file_name)\n             file_name)])))\n", "  (= (substring\
    \ (substring file_name 0 3) 0 3)\n     (string-length file_name))\n  (= (substring\
    \ (substring file_name 0 3) 0 1)\n     (string-length file_name))\n  (= (substring\
    \ (substring file_name 0 3) 1)\n     (char=? (substring file_name 0 1) #\\a)\n\
    \    (char=? (substring file_name 0 1) #\\z)\n    (char=? (substring file_name\
    \ 0 1) #\\A)\n    (char=? (substring file_name 0 1) #\\z)\n    (char=? (substring\
    \ file_name 0 1) #\\0)\n    (char=? (substring file_name 0 1) #\\9)\n    (char=?\
    \ (substring file_name 0 1) #\\0))\n  (= (substring (substring file_name 0 3)\
    \ 2)\n     (string=? '.'))\n  (= (substring (substring file_name 0 3) 3 4)\n \
    \    (string=? 'txt'))\n  (= (substring (substring file_name 0 3) 4 5)\n     (string=?\
    \ 'exe'))\n  (= (substring (substring file_name 0 3) 4 5)\n     (string=? 'dll'))\n\
    \  (= (substring (substring file_name 0 3) 0)\n     'Yes\n    'No\n    (file_name_check\
    \ file_name)))\n", "  (cond\n    [(= (count file_name) 1) (equal? (first file_name)\
    \ (first '.'))\n                                      (equal? (first file_name)\
    \ (string-before-last (first file_name) '.'))\n                              \
    \        (string-before-last (first file_name) '.')\n                        \
    \              (string-after-first (first file_name) '.')]\n    [(= (count file_name)\
    \ 2) (equal? (first file_name) (first '.'))\n                                \
    \      (equal? (first file_name) (string-before-last (first file_name) '.'))\n\
    \                                      (string-before-last (first file_name) '.')\n\
    \                                      (string-after-last (first file_name) '.')]\n\
    \    [(= (count file_name) 3) (equal? (first file_name) (first '.'))\n       \
    \                               (equal? (first file_name) (string-before-last\
    \ (first file_name) '.'))\n                                      (string-before-last\
    \ (first file_name) '.')\n                                      (string-after-last\
    \ (first file_name) '.')\n                                      (equal? (string-after-last\
    \ (first file_name) '.') 'exe')\n                                      (equal?\
    \ (string-after-last (first file_name) '.') 'dll')\n                         \
    \             (equal? (string-after-last (first file_name) '.') 'txt')]\n    [else\
    \ (equal? (first file_name) '-) (equal? (first file_name) '#)]\n  ))\n", "  (let\
    \ ((valid_name (check-valid-name (file_name))) (dotted-name (check-dotted-name\
    \ (file_name)))\n        (extension (check-extension (file_name))))\n    (if valid_name\n\
    \        'Yes\n        (if (not dotted-name)\n            'No\n            (if\
    \ (not extension)\n                'No\n                'Yes))))\n", "  (match\
    \ file_name\n  ((#regex \"^[0-9]{3}\\.\") #t)\n  ((#regex \"^[a-z][a-z0-9]*\\\
    .\") #t)\n  ((#regex \"^[a-z][a-z0-9]*\\.txt\")) #t)\n  ((#regex \"^[a-z][a-z0-9]*\\\
    .exe\")) #t)\n  ((#regex \"^[a-z][a-z0-9]*\\.dll\")) #t)\n  (#t #f)))\n", "  (cond\n\
    \    ((string= file_name\n      \"example.txt\") (return \"Yes\"))\n    ((string=\
    \ file_name\n      \"1example.dll\") (return \"No\"))\n    ((string= file_name\n\
    \      \"example\") (return \"Yes\"))\n    ((string= file_name\n      \"1example\"\
    ) (return \"No\"))\n    ((string= file_name\n      \"example.txt.exe\") (return\
    \ \"Yes\"))\n    ((string= file_name\n      \"1example.dll.exe\") (return \"No\"\
    ))\n    ((string= file_name\n      \"example.txt.exe.dll\") (return \"Yes\"))\n\
    \    ((string= file_name\n      \"1example.dll.exe.dll\") (return \"No\"))\n \
    \   ((string= file_name\n      \"example.txt.exe1\") (return \"No\"))\n    ((string=\
    \ file_name\n      \"1example.dll1\") (return \"No\"))\n    ((string= file_name\n\
    \      \"example.txt.exe1.dll1\") (return \"No\"))\n    ((string= file_name\n\
    \      \"example.txt.exe1.dll2\") (return \"No\"))\n    ((string= file_name\n\
    \      \"example.txt.exe1.dll2.dll3\") (return \"No\"))\n    ((string= file_name\n\
    \      \"example.txt.exe1.dll2.dll3.dll4\") (return \"No\"))\n    ((string= file_name\n\
    \      \"example.txt.exe1.dll2.dll3.dll4.dll5\") (return \"No\"))\n    ((string=\
    \ file_name\n      \"example.txt.exe1.dll2.dll3.dll4.dll5.dll6\") (return \"No\"\
    ))\n    ((string= file_name\n      \"example.txt.exe1.dll2.dll3.dll4.dll5.dll6.dll7\"\
    ) (return \"No\"))\n    ((string= file_name\n      \"example.txt.exe1.dll2.dll3.dll4.dll5.dll6.dll7.dll8\"\
    ) (return \"No\"))\n    ((string= file_name\n      \"example.txt.exe1.dll2.dll3.dll4.dll5.dll6.dll7.dll8.dll9\"\
    ) (return \"No\"))\n    ((string= file_name\n      \"example.txt.exe1.dll2.dll3.dll4.dll5.dll6.dll7.dll8.dll9.dll10\"\
    ) (return \"No\"))\n    ((string= file_name\n      \"example.txt.exe1.dll2.dll3.dll4.dll5.dll6.dll7.dll8.dll9.dll10.dll11\"\
    ) (return \"No\"))\n    ((string= file_name\n      \"example.txt.exe1.dll2.dll3.dll4.dll5.dll6.dll7.dll8.dll9.dll10.dll11.dll12\"\
    ) ", "  (let ([len (string-length file_name)]\n        [count 0]\n        [dot\
    \ (substring file_name 0 (string-length file_name)-2)]\n        [extension (substring\
    \ file_name (+ 0 (string-length file_name) 2))])\n    (if (= count 3)\n      \
    \  (or (= 0 (string-length dot))\n            (= (string-ref file_name 0) (string-ref\
    \ file_name 1))\n            (= (string-ref extension \"A\") (string-ref extension\
    \ \"B\"))\n            (= (string-ref extension \"a\") (string-ref extension \"\
    b\"))\n            (= (string-ref extension \"0\") (string-ref extension \"1\"\
    ))\n            (= (string-ref extension \"9\") (string-ref extension \"A\"))\n\
    \            (= (string-ref extension \"9\") (string-ref extension \"a\"))\n \
    \           (= (string-ref extension \"9\") (string-ref extension \"0\"))\n  \
    \          (= (string-ref extension \"9\") (string-ref extension \"9\"))\n   \
    \         (= (string-ref extension \"9\") (string-ref extension \"9\"))\n    \
    \        (= (string-ref extension \"9\") (string-ref extension \"9\"))\n     \
    \       (= (string-ref extension \"9\") (string-ref extension \"9\"))\n      \
    \      (= (string-ref extension \"9\") (string-ref extension \"9\"))\n       \
    \     (= (string-ref extension \"9\") (string-ref extension \"9\"))\n        \
    \    (= (string-ref extension \"9\") (string-ref extension \"9\"))\n         \
    \   (= (string-ref extension \"9\") (string-ref extension \"9\"))\n          \
    \  (= (string-ref extension \"9\") (string-ref extension \"9\"))\n           \
    \ (= (string-ref extension \"9\") (string-ref extension \"9\"))\n            (=\
    \ (string-ref extension \"9\") (string-ref extension \"9\"))\n            (= (string-ref\
    \ extension \"9\") (string-ref extension \"9\"))\n            (= (string-ref extension\
    \ \"9\") (string-ref extension \"9\"))\n            (= (string-ref extension \"\
    9\") (string-ref extension \"9\"))\n            (= (string-ref extension \"9\"\
    ) (string-ref extension \"9\"))\n            (= (string-ref extension \"9\") (string-ref\
    \ extension \"9\"))\n            (= (string-ref extension \"9\") (string-ref extension\
    \ \"9\"))\n            (= (string-ref extension \"9\") (string-ref extension \"\
    9\"))\n            (= (string-ref extension \"9\") (string-ref extension \"9\"\
    ))\n            (= (string-ref extension \"9\") (string-ref extension", "  (and\
    \ (not (<= (string-length file_name) 3))\n       (not (= (string-ref file_name\
    \ 0 1) #\\0)\n             (string-ref file_name 0 1) #\\a)\n       (not (= (string-ref\
    \ file_name 0 2) #\\.)\n             (string-ref file_name 0 2) #\\z)\n      \
    \ (not (string-contains-only (list #\\. (list #\\T #\\E) (string file_name)))\n\
    \             (string-substring file_name 0 (string.length file_name)))))", " \
    \ (or (string? file_name)\n      (and (not (<= (file-length file_name) 3))\n \
    \          (not (substring file_name 0 (string->list file_name)) \"..\")\n   \
    \        ((and (string? file_name) (char->integer? (string-ref file_name 0)) (file-extension-check\
    \ file_name)) (string->list file_name))\n           (string-contains \"txt\" file_name)\n\
    \           (string-contains \"exe\" file_name)\n           (string-contains \"\
    dll\" file_name))))\n", "  (match file_name\n    ([(< (string-length file_name)\
    \ 3) 'No]\n     (error 'invalid-file-name (file_name))\n    )\n    ([(> (string-length\
    \ file_name) 3) 'No]\n     (error 'invalid-file-name (file_name))\n    )\n   \
    \ ([(< (string-car file_name) 'A) 'No]\n     (error 'invalid-file-name (file_name))\n\
    \    )\n    ([(> (string-car file_name) 'Z) 'No]\n     (error 'invalid-file-name\
    \ (file_name))\n    )\n    ([(< (string-car file_name) 'a) 'No]\n     (error 'invalid-file-name\
    \ (file_name))\n    )\n    ([(> (string-car file_name) 'z) 'No]\n     (error 'invalid-file-name\
    \ (file_name))\n    )\n    ([(string-equal file_name \".\") 'No]\n     (error\
    \ 'invalid-file-name (file_name))\n    )\n    ([(string-contains file_name \"\
    .\") 'No]\n     (error 'invalid-file-name (file_name))\n    )\n    ([(string-contains\
    \ file_name \"..\") 'No]\n     (error 'invalid-file-name (file_name))\n    )\n\
    \    ([(string-contains file_name \"...\") 'No]\n     (error 'invalid-file-name\
    \ (file_name))\n    )\n    ([(or (string-car file_name) (string-cat file_name\
    \ \".txt\") (string-cat file_name \".exe\")\n          (string-cat file_name \"\
    .dll\"))\n      'Yes]\n     (error 'invalid-file-name (file_name))\n    )\n  \
    \  ([(< (string-car file_name) 'A) 'No]\n     (error 'invalid-file-name (file_name))\n\
    \    )\n    ([(> (string-car file_name) 'Z) 'No]\n     (error 'invalid-file-name\
    \ (file_name))\n    )\n    ([(< (string-car file_name) 'a) 'No]\n     (error 'invalid-file-name\
    \ (file_name))\n    )\n    ([(> (string-car file_name) 'z) 'No]\n     (error 'invalid-file-name\
    \ (file_name))\n    )\n    ([(string-equal file_name \".\") 'No]\n     (error\
    \ 'invalid-file-name (file_name))\n    )\n    ([(string-contains file_name \"\
    .\") 'No]\n     (error 'invalid-file-name (file_name))\n    )\n    ([(string-contains\
    \ file_name \"..\") 'No]\n     (error 'invalid-file-name (file_name))\n    )\n\
    \    ([(string-", "  (if (string? (file_name))\n      (let ((check (string-match\
    \ #rx#[\"^[0-9]{3}\\.\"] file_name))\n            (check2 (string-match #rx#[\"\
    ^[A-Za-z]{1}\\.\"] file_name)))\n        (if (string? check)\n            (if\
    \ (and (= (string-length file_name) 3)\n                     (string-match (substring\
    \ file_name 0 (- (string-length file_name) 3)) #rx#[\"^[a-z]{1}\"] ))\n      \
    \          (if (or (string? check2)\n                        (string? check))\n\
    \                    'Yes\n                    'No))\n            (if (string?\
    \ check2)\n                (if (and (= (string-length file_name) 3)\n        \
    \                (string-match (substring file_name 0 (- (string-length file_name)\
    \ 3)) #rx#[\"^[a-z]{1}\"] ))\n                    'Yes\n                    'No))\n\
    \            'No))\n      'No))\n      ", "  (let* ((file_name_chars (string->list\
    \ file_name))\n         (file_name_length (length file_name_chars))\n        \
    \ (file_name_first_char (car file_name_chars))\n         (file_name_second_char\
    \ (cdr file_name_chars))\n         (file_name_char (string->symbol (symbol->string\
    \ (symbol->list file_name))))\n         (file_name_ok? t)\n         (file_name_valid?\
    \ t)\n         (file_name_valid_2? t)\n         (file_name_valid_3? t))\n    (cond\
    \ ((= file_name_length 1) (set! file_name_ok? t) (set! file_name_valid? t) file_name)\n\
    \          ((and (number? (first file_name_chars)) (number? (rest file_name_chars)))\
    \ (set! file_name_ok? t) (set! file_name_valid? t) file_name)\n          ((and\
    \ (symbol=? file_name_first_char #\\a) (symbol=? file_name_second_char #\\a) (symbol=?\
    \ file_name_char #\\a) (symbol=? file_name_char #\\z) (symbol=? file_name_char\
    \ #\\A) (symbol=? file_name_char #\\Z) (symbol=? file_name_char #\\0) (symbol=?\
    \ file_name_char #\\9) (symbol=? file_name_char #\\8) (symbol=? file_name_char\
    \ #\\7) (symbol=? file_name_char #\\6) (symbol=? file_name_char #\\5) (symbol=?\
    \ file_name_char #\\4) (symbol=? file_name_char #\\3) (symbol=? file_name_char\
    \ #\\2) (symbol=? file_name_char #\\1) (symbol=? file_name_char #\\6)) (set! file_name_ok?\
    \ t) (set! file_name_valid? t) file_name)\n          ((and (symbol=? file_name_first_char\
    \ #\\A) (symbol=? file_name_second_char #\\A) (symbol=? file_name_char #\\A) (symbol=?\
    \ file_name_char #\\z) (symbol=? file_name_char #\\A) (symbol=? file_name_char\
    \ #\\Z) (symbol=? file_name_char #\\0) (symbol=? file_name_char #\\9) (symbol=?\
    \ file_name_char #\\8) (symbol=? file_name_char #\\7) (symbol=? file_name_char\
    \ #\\6) (symbol=? file_name_char #\\5) (symbol=? file_name_char #\\4) (symbol=?\
    \ file_name_char #\\3) (symbol=? file_name_char #\\2) (symbol=? ", "  (let((filename\
    \ file_name))\n    (cond\n      [(string-match \"^[0-9][0-9][0-9]$\"\n       \
    \              filename) 'yes]\n      [(string-match \"^[a-z][a-zA-Z].*\"\n  \
    \                   filename) 'yes]\n      [(string-match \"^[a-z][a-zA-Z].*\"\
    \n                     filename) 'no]\n      [(string-match \"^[a-z][a-zA-Z].*\"\
    \n                     filename) 'no]\n      [(string-match \"^[a-z][a-zA-Z].*\"\
    \n                     filename) 'no]\n      [(string-match \"^[a-z][a-zA-Z].*\"\
    \n                     filename) 'no]\n      [(string-match \"^[a-z][a-zA-Z].*\"\
    \n                     filename) 'no]\n      [else 'no]\n    )\n  )\n)", "  (let\
    \ ((invalid_chars '(\n     '(\n     '(\n     )\n     '\"\n     '$\n     '#'\n\
    \     '-\n     '_\n     '.\n     '/\n     '\\\\\n     '\\'\n     '('\n     ')\n\
    \     '[\n     ']\n     ','\n     ''\n     ';'\n     '<'\n     '>'\n     '''\n\
    \     ')\n     '['\n     ']'\n     '{'\n     '}'\n     '~'\n     '|'\n     ';'\n\
    \     '='\n     '#'\n     '$'\n     '@'\n     '~'\n     '&'\n     ' '\n     '*\n\
    \     '+'\n     '?'\n     '#'\n     '$'))\n    (let loop ((index 0))\n      (cond\n\
    \        ((= (length file_name) index) 'Yes)\n        ((and (char=? (substring\
    \ file_name index) (car invalid_chars)) \n               (> (length file_name)\
    \ index (+ index (length invalid_chars))))\n         'No)\n        (else\n   \
    \      (loop (+ index 1))))))))\n", "  (cond\n    [(string-length file_name-wrong-length)\
    \ #f]\n    [(= (string-length file_name-empty) 0)  #f]\n    [(string-match (string->symbol\
    \ (string->string file_name-empty)) '\\\\./)  #f]\n    [(string-match (string->symbol\
    \ (string->string file_name-notvalid-name))\n                  '[a-ZA-Z0-9]{3}')\
    \  #f]\n    [(= (string-match (string->symbol (string->string file_name-notvalid-name))\n\
    \                  '[a-ZA-Z0-9].')  #f]\n    [(string-match (string->symbol (string->string\
    \ file_name-notvalid-name))\n                  '[a-z].')  #f]\n    [(string-match\
    \ (string->symbol (string->string file_name-notvalid-name))\n                \
    \  '[0-9].')  #f]\n    [else #t]))\n    ", "  (cond\n    [(> (string-length file_name)\
    \ 3) 'No]\n    [(string=? (substring file_name 0 1) \"a\") 'No]\n    [(string=?\
    \ (substring file_name 0 1) \"A\") 'No]\n    [(string=? (substring file_name 0\
    \ 1) \"0\") 'No]\n    [(string=? (substring file_name 0 1) \"9\") 'Yes]\n    [(string-char-equal\
    \ ('.' (substring file_name 0 (string-length file_name-1))) 'Yes]\n    [(string-char-equal\
    \ ('.' (substring file_name 0 (string-length file_name-1))) (substring file_name\
    \ 1 2)) 'Yes]\n    [(or (string=? (substring file_name 0 1) (substring file_name\
    \ 0 1) 'No)\n        (string=? (substring file_name 0 1) (substring file_name\
    \ 0 1) 'Yes)) 'Yes]\n    [else 'No]))\n", "  (let ((index (string-indexof file_name\
    \ \"\\.\")))\n    (if (> index 0)\n        (let ((first_char (substring file_name\
    \ 0 index)))\n          (and (not (string=? first_char '()) (string=? first_char\
    \ #\\a) (string=? first_char #\\b) (string=? first_char #\\c) (string=? first_char\
    \ #\\d) (string=? first_char #\\e) (string=? first_char #\\f) (string=? first_char\
    \ #\\n) (string=? first_char #\\z) (string=? first_char #\\A) (string=? first_char\
    \ #\\B) (string=? first_char #\\C) (string=? first_char #\\D) (string=? first_char\
    \ #\\E) (string=? first_char #\\F) (string=? first_char #\\n) (string=? first_char\
    \ #\\Z) (string=? first_char #\\a) (string=? first_char #\\b) (string=? first_char\
    \ #\\c) (string=? first_char #\\d) (string=? first_char #\\e) (string=? first_char\
    \ #\\f) (string=? first_char #\\n) (string=? first_char #\\z) (string=? first_char\
    \ #\\A) (string=? first_char #\\B) (string=? first_char #\\C) (string=? first_char\
    \ #\\D) (string=? first_char #\\E) (string=? first_char #\\F) (string=? first_char\
    \ #\\n) (string=? first_char #\\Z))\n            (file-valid? file_name))\n  \
    \      'No'))\n    )\n", "  (cond\n    [(empty? file_name) 'No]\n    [(<= (count\
    \ file_name) 3) 'Yes]\n    [(eq? (char-before-dot file_name) 'No) (cond\n    \
    \                                           [(eq? (char-after-dot file_name) 'exe)\
    \ 'Yes]\n                                               [else 'No]))]\n    [(eq?\
    \ (char-after-dot file_name) 'txt) 'Yes]\n    [(eq? (char-after-dot file_name)\
    \ 'exe) 'Yes]\n    [(eq? (char-after-dot file_name) 'dll) 'Yes]\n    [else (cond\n\
    \             [(char-before-dot file_name) (cond\n                           \
    \                   [(char-after-dot file_name) 'Yes]\n                      \
    \                        [else (cond\n                                       \
    \               [(eq? (char-after-dot file_name) 'txt) 'Yes]\n               \
    \                                       [else (cond\n                        \
    \                                    [(eq? (char-after-dot file_name) 'exe) 'Yes]\n\
    \                                                            [else (cond\n   \
    \                                                                [(eq? (char-after-dot\
    \ file_name) 'dll) 'Yes]\n                                                   \
    \                [else 'No))])])])]))]))\n", "  (cond\n    [(> (string-length\
    \ file_name) 3) \"too long\" 'No]\n    [(equal? (string->list file_name)\n   \
    \         ['()\n             [()\n              [()\n               [() \"too\
    \ short\" 'No]\n               [()\n                '()\n                '('\n\
    \                '['\n                '{\n                '('\n              \
    \  'example])\n                '('\n                '['\n                '{'\n\
    \                '['\n                '['\n                '['\n             \
    \   '['\n                'example])\n                '('\n                '['\n\
    \                '{\n                '('\n                '[\n               \
    \ '['\n                '['\n                '['\n                'example])\n\
    \                '('\n                '['\n                '{\n              \
    \  '('\n                '[\n                '['\n                '['\n       \
    \         '['\n                'example])\n                '('\n             \
    \   '['\n                '{\n                '('\n                '[\n       \
    \         '['\n                '['\n                '['\n                'example])\n\
    \                '('\n                '['\n                '{\n              \
    \  '('\n                '[\n                '['\n                '['\n       \
    \         '['\n                'example])\n                '('\n             \
    \   '['\n                '{\n                '('\n                '[\n       \
    \         '['\n                '['\n                '['\n                'example])\n\
    \                '('\n                '['\n                '{\n              \
    \  '('\n                '[\n                '['\n                '['\n       \
    \         '['\n                'example])\n                '('\n             \
    \   '['\n                '{\n                '('\n                '[\n       \
    \         '['\n                '['\n                '['\n                'example])\n\
    \                '('\n                '['\n                '{\n              \
    \  '('\n                '[\n                '['\n                '['\n       \
    \         '['\n                'example])\n                '('\n             \
    \   '['\n                '{\n                '('\n                '[\n       \
    \         '['\n                '['\n                '['\n                'example])\n\
    \                '('\n                '['\n                '{\n              \
    \  '('\n                '[\n                '['\n                '['\n       \
    \         '['\n                'example])\n                '('\n             \
    \   '['\n                '{\n                '('\n                '[\n       \
    \         '['\n                '['\n                '['\n                'example])\n\
    \                '('\n                '['\n                '{\n              \
    \  '('\n                '[\n                '['\n                '['\n       \
    \         '['\n                'example])\n                '('\n             \
    \   '['\n                '{\n                '('\n                '[\n       \
    \         '['\n                '['\n                '['\n                'example])\n\
    \                '('\n                '['\n                '{\n              \
    \  '('\n                '[\n                '['\n                '['\n       \
    \         '['\n                'example])\n                '('\n             \
    \   '['\n                '{\n                '('\n                '[\n       \
    \         '['\n                '['\n                '", "  (cond [(empty? file_name)\
    \                                                #t]\n        [(digit? (first\
    \ file_name))                                            #t]\n        [(not (equal?\
    \ (first file_name) '.'))                                #f]\n        [(let ([dot\
    \    (first (rest file_name))])\n           (and (char-set? '[A-Z] dot)))    \
    \                            #t]\n        [(or (not (empty? (rest file_name)))\n\
    \             (char-set? '[A-Z] dot))                                        #f]\n\
    \        [(let ([chars (subseq (rest file_name) 0 1))])\n           (and (char-set?\
    \ '[A-Z] chars)))                                 #t]\n        [(let ([chars (subseq\
    \ (rest file_name) 0 2))])\n           (and (char-set? '[A-Z] chars))        \
    \                         #f]\n        [(let ([chars (subseq (rest file_name)\
    \ 0 3))])\n           (and (char-set? '[A-Z] chars))                         \
    \        #f]\n        [(or (not (subseq (rest file_name) 0 1))\n             (not\
    \ (char-set? '[A-Z] 'a)))                                 #f]\n        [(or (not\
    \ (subseq (rest file_name) 0 2))\n             (not (char-set? '[A-Z] 'A)))  \
    \                               #f]\n        [(or (not (subseq (rest file_name)\
    \ 0 3))\n             (not (char-set? '[A-Z] 'z')))                          \
    \       #f]\n        [(or (not (subseq (rest file_name) 0 3))\n             (not\
    \ (char-set? '[A-Z] 'Z')))                                 #f]\n        [(or (not\
    \ (subseq (rest file_name) 0 4))\n             (not (char-set? '[A-Z] '0'))) \
    \                                #f]\n        [(or (not (subseq (rest file_name)\
    \ 0 4))\n             (not (char-set? '[A-Z] '1')))                          \
    \       #f]\n        [(or (not (subseq (rest file_name) 0 4))\n             (not\
    \ (char-set? '[A-Z] '2')))                                 #f]\n        [(or (not\
    \ (subseq (rest file_name) 0 4))\n             (not (char-set? '[A-Z] '3'))) \
    \                                #f]\n        [(or (not (subseq (rest file_name)\
    \ 0 4))\n             (not (char-set? '[A-Z] '4')))                          \
    \       #f]\n        [(or (not (subseq (rest file_name) 0 4))\n             (not\
    \ (char-set? '[A-Z] '5')))                                 #f]\n        [(or (not\
    \ (subseq (rest file_name) 0 4))\n             (not (char-set? '[A-Z] '6'))) \
    \                                #f]\n        [(or (not (subseq (rest file_name)\
    \ 0 ", "  (and (<= 3 (string-length file_name))\n       (not (string-contains\
    \ \".\" file_name))\n       (not (string-contains \"..\" file_name))\n       (not\
    \ (string-contains \"\\\\\" file_name)))\n)\n", "  (let ((valid_chars '(a-z A-Z\
    \ 0-9 . _)))\n    (define (helper (char chars)\n              (cond\n        \
    \        [(string=? (first chars) char) #t]\n                [else (helper (rest\
    \ chars) chars)]\n              )))\n    (cond\n      [(< (string-length file_name)\
    \ 3) #f]\n      [(< (string->length file_name) 3) #f]\n      [(< (string-length\
    \ file_name) 2) #f]\n      [(not (helper (first file_name) (append valid_chars\
    \ (rest file_name)))) #f]\n      [else #t])))\n", "  (or (string=? (substring\
    \ file_name 0 3) \"000\")\n      (and (string=? (substring file_name 0 1) \"a\"\
    )\n           (string=? (substring file_name 0 2) \"z\")\n           (string=?\
    \ (substring file_name 0 1) \"A\")\n           (string=? (substring file_name\
    \ 0 3) \"AZ\")\n           (string=? (substring file_name 0 2) \"z\")\n      \
    \     (string=? (substring file_name 0 3) \"0\")\n           (string=? (substring\
    \ file_name 0 2) \"0\")\n           (string=? (substring file_name 0 2) \"0\"\
    )\n           (string=? (substring file_name 0 1) \"a\")\n           (string=?\
    \ (substring file_name 0 2) \"z\")\n           (string=? (substring file_name\
    \ 0 3) \"AZ\")\n           (string=? (substring file_name 0 2) \"z\")\n      \
    \     (string=? (substring file_name 0 3) \"0\")\n           (string=? (substring\
    \ file_name 0 2) \"0\")\n           (string=? (substring file_name 0 2) \"0\"\
    )\n           (string=? (substring file_name 0 1) \"a\")\n           (string=?\
    \ (substring file_name 0 2) \"z\")\n           (string=? (substring file_name\
    \ 0 3) \"AZ\")\n           (string=? (substring file_name 0 2) \"z\")\n      \
    \     (string=? (substring file_name 0 3) \"0\")\n           (string=? (substring\
    \ file_name 0 2) \"0\")\n           (string=? (substring file_name 0 2) \"0\"\
    )\n           (string=? (substring file_name 0 1) \"a\")\n           (string=?\
    \ (substring file_name 0 2) \"z\")\n           (string=? (substring file_name\
    \ 0 3) \"AZ\")\n           (string=? (substring file_name 0 2) \"z\")\n      \
    \     (string=? (substring file_name 0 3) \"0\")\n           (string=? (substring\
    \ file_name 0 2) \"0\")\n           (string=? (substring file_name 0 2) \"0\"\
    )\n           (string=? (substring file_name 0 1) \"a\"))\n      (and (string=?\
    \ (substring file_name 0 1) \"a\")\n           (string=? (substring file_name\
    \ 0 2) \"z\")\n           (string=? (substring file_name 0 1) \"A\")\n       \
    \    (string=? (substring file_name 0 3) \"AZ\")\n           (string=? (substring\
    \ file_name 0 2) \"z\")\n           (string=? (substring file_name 0 3) \"0\"\
    )\n           (string=? (substring file_name 0 ", "  (let ([valid_name true])\n\
    \    (if (not (string-empty? file_name))\n        (begin \n          (set! valid_name\n\
    \            (string-match \n              '(#[(0-9)][.]) #(if (or (>= (length\
    \ file_name) 3) (< 3 (length file_name)))\n                          'No\n   \
    \                       'Yes\n                          'Invalid)\n          \
    \    file_name)\n          valid_name)\n      valid_name))\n", "  (cond\n    [(<=\
    \ (length (string->list file_name)) 3)\n     (and (= \"0\" (string-ref (sub1 (string->list\
    \ file_name) 0) 0))\n          (= \"9\" (string-ref (sub1 (string->list file_name)\
    \ 0) 0)))\n     (and (= \".\" (string->list file_name))\n          (= \"0\" (string-ref\
    \ (sub1 (string->list file_name) 0) 0))\n          (= \"9\" (sub1 (string->list\
    \ file_name) 0)))\n     (and (and (= \"a\" (sub1 (string->list file_name) 0))\n\
    \              (= \"z\" (sub1 (string->list file_name) 0)))\n          (and (=\
    \ \"A\" (sub1 (string->list file_name) 0))\n              (= \"Z\" (sub1 (string->list\
    \ file_name) 0)))\n     (and (not (string-equal (sub1 (string->list file_name)\
    \ 0) \"\"))\n          (not (string-equal (sub1 (string->list file_name) 0) \"\
    .\")))\n     (and (not (string-equal (sub1 (string->list file_name) 0) \"a\"))\n\
    \          (not (string-equal (sub1 (string->list file_name) 0) \"z\")))\n   \
    \  (and (not (string-equal (sub1 (string->list file_name) 0) \"A\"))\n       \
    \   (not (string-equal (sub1 (string->list file_name) 0) \"Z\")))\n     (and (=\
    \ (string-length (sub1 (string->list file_name) 0)) 1)\n          (string-equal\
    \ (sub1 (string->list file_name) 0) \".\"))]\n    [else (return 'No)]))\n", " \
    \ (cond\n    ((string-empty? file_name)  'No)\n    ((string=? \"..\"         \
    \     file_name)  'No)\n    ((string=? \"0\"-\"9\"           file_name)  'No)\n\
    \    ((string=? \".\"              file_name)  'No)\n    ((string=? #\\a     \
    \         file_name)  'No)\n    ((string=? #\\A              file_name)  'No)\n\
    \    ((string=? #\\b              file_name)  'No)\n    ((string=? #\\B      \
    \        file_name)  'No)\n    ((string=? #\\c              file_name)  'No)\n\
    \    ((string=? #\\C              file_name)  'No)\n    ((string=? #\\d      \
    \        file_name)  'No)\n    ((string=? #\\D              file_name)  'No)\n\
    \    ((string=? #\\e              file_name)  'No)\n    ((string=? #\\E      \
    \        file_name)  'No)\n    ((string=? #\\F              file_name)  'No)\n\
    \    ((string=? #\\g              file_name)  'No)\n    ((string=? #\\G      \
    \        file_name)  'No)\n    ((string=? #\\h              file_name)  'No)\n\
    \    ((string=? #\\H              file_name)  'No)\n    ((string=? #\\I      \
    \        file_name)  'No)\n    ((string=? #\\i              file_name)  'No)\n\
    \    ((string=? #\\I              file_name)  'No)\n    ((string=? #\\j      \
    \        file_name)  'No)\n    ((string=? #\\J              file_name)  'No)\n\
    \    ((string=? #\\k              file_name)  'No)\n    ((string=? #\\K      \
    \        file_name)  'No)\n    ((string=? #\\l              file_name)  'No)\n\
    \    ((string=? #\\L              file_name)  'No)\n    ((string=? #\\m      \
    \        file_name)  'No)\n    ((string=? #\\M              file_name)  'No)\n\
    \    ((string=? #\\n              file_name)  'No)\n    ((string=? #\\N      \
    \        file_name)  'No)\n    ((string=? #\\o              file_name)  'No)\n\
    \    ((string=? #\\O              file_name)  'No)\n    ((string=? #\\p      \
    \        file_name)  'No)\n    ((string=? #\\P              file_name)  'No)\n\
    \    ((string=? #\\q              file_name)  'No)\n    ((string=? #\\Q      \
    \        file_name)  'No)\n    ((string=? #\\r              file_name)  'No)\n\
    \    ((string=? #\\R              file_name)  'No", "  (cond\n    [(or (string=?\
    \ file_name \"\") (string=? file_name \"#\")) (error 'invalid-file-name)]\n  \
    \  [(or (string=? (string-ref file_name 0 (string-length file_name)-4) \".\")\
    \ (string=? (string-ref file_name 0 (string-length file_name)-1) \"\\\\\") (string=?\
    \ (string-ref file_name 0 (string-length file_name)-2) \".\") (string=? (string-ref\
    \ file_name 0 (string-length file_name)-1) \"\\\\\") (string=? (string-ref file_name\
    \ 0 (string-length file_name)-1) \".\") (string=? (string-ref file_name 0 (string-length\
    \ file_name)-1) \".\") (string=? (string-ref file_name 0 (string-length file_name)-2)\
    \ \".\") (string=? (string-ref file_name 0 (string-length file_name)-1) \".\"\
    ) (string=? (string-ref file_name 0 (string-length file_name)-2) \".\")) (error\
    \ 'invalid-file-name)]\n    [else (cond\n          [(not (string=? (string-ref\
    \ file_name 0 (string-length file_name) 1) \".\")) (error 'invalid-file-name)]\n\
    \          [else (cond\n                [(not (string=? (string-ref file_name\
    \ 0 (string-length file_name) 2) \".\")) (error 'invalid-file-name)]\n       \
    \         [else (cond\n                      [(not (string=? (string-ref file_name\
    \ 0 (string-length file_name) 3) \".\")) (error 'invalid-file-name)]\n       \
    \               [else (cond\n                             [(not (string=? (string-ref\
    \ file_name 0 (string-length file_name) 4) \".\")) (error 'invalid-file-name)]\n\
    \                             [else (cond\n                                  \
    \   [(not (string=? (string-ref file_name 0 (string-length file_name) 5) \".\"\
    )) (error 'invalid-file-name)]\n                                     [else (cond\n\
    \                                               [(not (string=? (string-ref file_name\
    \ 0 (string-length file_name) 6) \".\")) (error 'invalid-file-name)]\n       \
    \                                        [else (cond\n                       \
    \                                [(not (string=? (string-ref file_name 0 (string-length\
    \ file_name) 7) \".\")) (error 'invalid-file-name)]\n                        \
    \                               [else (cond\n                                \
    \                                [(not (string=? (string-ref file_name 0 (string-length\
    \ file_name) 8) \".\")) (error 'invalid-file-name)]\n                        \
    \                                        [else (cond\n                       \
    \                                                  [(not (string=? (string-ref\
    \ file_name 0 (string-length file_name) 9) \".\")) (error 'invalid-file-name)]\n\
    \                                                                         [else\
    \ (error 'valid-file-name)])])])])])])])])])])])])])\n</code>\n<|/ a tags=racket,scheme\
    \ dscore=2 |>\n<|", "  (let ([file_sans_extension (replace-if (lambda (x) (in-string\
    \ x \".exe\") (empty? x)) file_name \"\")]\n        [file_sans_extension_no_dots\
    \ (replace-if (lambda (x) (not (empty? x)) file_name \"\")]\n        [file_name_starts_with_latin_alpha\
    \ (file->string (file->bytes-to-string file_name)) (make-string (length file_name)\
    \ #\\0)]\n        [file_name_does_not_contain_dot (file->string (file->bytes-to-string\
    \ file_name))\n         (append (substring file_sans_extension 0 (- (length file_sans_extension)\
    \ 1))\n                 (substring file_sans_extension_no_dots 0 (- (length file_sans_extension_no_dots)\
    \ 1))\n                 (substring file_name_starts_with_latin_alpha 0 (- (length\
    \ file_name_starts_with_latin_alpha) 1))\n                 (substring file_name_does_not_contain_dot\
    \ 0 (- (length file_name_does_not_contain_dot) 1)))\n         \n         [file_name_contains_multiple_dots\
    \ (replace-if (lambda (x) (contains-duplicates? x '.')) file_name \"\")]\n   \
    \      [file_name_before_dot_contains_non_latin_letter (replace-if (lambda (x)\
    \ (not (empty? x)) file_name \"\")]\n         [file_name_after_dot_contains_valid_extension\
    \ (replace-if (lambda (x) (contains-one? x '(\"txt\" \"exe\" \"dll\")) file_name\
    \ \"\")]\n         [file_name_after_dot_contains_valid_extension_no_dots (replace-if\
    \ (lambda (x) (not (empty? x)) file_name \"\")]\n         [file_name_after_dot_does_not_contain_valid_extension\
    \ (replace-if (lambda (x) (contains-one? x '(\"txt\" \"exe\" \"dll\")) file_name\
    \ \"\")]\n         [file_name_after_dot_does_not_contain_valid_extension_no_dots\
    \ (replace-if (lambda (x) (not (empty? x)) file_name \"\")]\n         \n     \
    \    [file_name_is_valid (or (empty? file_sans_extension) (empty? file_sans_extension_no_dots)\
    \ (empty? file_name_starts_with_latin_alpha) (empty? file_name_does_not_contain_dot)\
    \ (empty? file_name_contains_multiple_dots) (empty? file_name_before_dot_contains_non_latin_letter)\
    \ (empty? file_name_after_dot_contains_valid_extension) (empty? file_name_after_dot_contains_valid_extension_no_dots)\
    \ (empty? file_name_after_dot_does_not_contain_valid_extension) (empty? file_name_after_dot_does_not_contain_valid_extension_no_dots))]])\n\
    \    (if (file-", "  (let ((count 0))\n    (cond\n      [(string-empty? file_name)\n\
    \        'Yes]\n\n      [(string=? file_name \".\")\n        'Yes]\n\n      [(string=?\
    \ (substring file_name 0 (string-length file_name)) \".\")\n        'No]\n\n \
    \     [(string=? (substring file_name 0 (string-length file_name)) \".\")\n  \
    \      'No]\n\n      [(char=? (string-ref file_name (substring file_name 0 (string-length\
    \ file_name))) '0')\n        'No]\n\n      [(char=? (string-ref file_name (substring\
    \ file_name 0 (string-length file_name))) '1')\n        'No]\n\n      [(char=?\
    \ (string-ref file_name (substring file_name 0 (string-length file_name))) '2')\n\
    \        'No]\n\n      [(char=? (string-ref file_name (substring file_name 0 (string-length\
    \ file_name))) '3')\n        'No]\n\n      [(char=? (string-ref file_name (substring\
    \ file_name 0 (string-length file_name))) '4')\n        'No]\n\n      [(char=?\
    \ (string-ref file_name (substring file_name 0 (string-length file_name))) '5')\n\
    \        'No]\n\n      [(char=? (string-ref file_name (substring file_name 0 (string-length\
    \ file_name))) '6')\n        'No]\n\n      [(char=? (string-ref file_name (substring\
    \ file_name 0 (string-length file_name))) '7')\n        'No]\n\n      [(char=?\
    \ (string-ref file_name (substring file_name 0 (string-length file_name))) '8')\n\
    \        'No]\n\n      [(char=? (string-ref file_name (substring file_name 0 (string-length\
    \ file_name))) '9')\n        'Yes]\n\n      [(char=? (string-ref file_name (substring\
    \ file_name 0 (string-length file_name))) 'a')\n        'Yes]\n\n      [(char=?\
    \ (string-ref file_name (substring file_name 0 (string-length file_name))) 'b')\n\
    \        'Yes]\n\n      [(char=? (string-ref file_name (substring file_name 0\
    \ (string-length file_name))) 'c')\n        'Yes]\n\n      [(char=? (string-ref\
    \ file_name (substring file_name 0 (string-length file_name))) 'd')\n        'Yes]\n\
    \n      [(char=? (string-ref file_name (substring file_name 0 (string-length file_name)))\
    \ 'e')\n        'Yes]\n\n      [(char=? (string-ref file_name (substring file_name\
    \ 0 (string-length file_name))) 'f')\n        'Yes]\n\n      [(char=? (string-ref\
    \ file_name (substring file_name 0 (", "  (cond\n    ((< 0 (string-length file_name))\n\
    \     (print \"The file's name should be less than or equal to three characters\
    \ long\"))\n    ((string-match-all \"\\\\.\" file_name)\n     (print \"The file's\
    \ name should not contain any dot\"))\n    ((string-match-all #\"^[a-zA-Z]\" file_name)\n\
    \     (print \"The file's name should not start with a latin alphapet letter\"\
    ))\n    ((string-match-all #\"^[^\\.].+\" file_name)\n     (print \"The file's\
    \ name should not contain any dot and should start with letter\"))\n    (else\n\
    \     (print \"The file's name is valid\"))))\n", "  (let ((valid-chars '(#\\\
    0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9\n                      #\\A #\\\
    B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\L #\\\
    M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T \n                      #\\U #\\V #\\W #\\\
    X #\\Y #\\Z\n                      #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\\
    i #\\j \n                      #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t \n                      #\\u #\\v #\\w #\\x #\\y #\\z\n                    \
    \  #\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9\n                      #\\\
    A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J \n                      #\\K #\\\
    L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T \n                      #\\U #\\V #\\\
    W #\\X #\\Y #\\Z\n                      #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\\
    h #\\i #\\j \n                      #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\\
    s #\\t \n                      #\\u #\\v #\\w #\\x #\\y #\\z)))\n    (let ((length\
    \ (length file_name))\n          (index (- length 3))\n          (valid-char (caar\
    \ valid-chars))\n          (extension (cadar valid-chars)))\n      (or (or (null?\
    \ file_name) \n             (= 0 (string-length file_name)))\n          (= 0 index)\n\
    \          (string=? (substring file_name (- index)) extension)))))\n", "  (cond\n\
    \    [(empty? file_name) #t]\n    [(= (length file_name) 1) #t]\n    [(member\
    \ (substring file_name 0 1) #\\1) #t]\n    [(member (substring file_name 0 1)\
    \ #\\2) #t]\n    [(member (substring file_name 0 1) #\\3) #t]\n    [else     \
    \         (= (length (substring file_name 0 1)) 1) #t]\n    [else            \
    \  (= (substring file_name 0 1) #\\a) #t]\n    [else              (= (substring\
    \ file_name 0 1) #\\b) #t]\n    [else              (= (substring file_name 0 1)\
    \ #\\c) #t]\n    [else              (= (substring file_name 0 1) #\\d) #t]\n \
    \   [else              (= (substring file_name 0 1) #\\e) #t]\n    [else     \
    \         (= (substring file_name 0 1) #\\f) #t]\n    [else              (= (substring\
    \ file_name 0 1) #\\g) #t]\n    [else              (= (substring file_name 0 1)\
    \ #\\h) #t]\n    [else              (= (substring file_name 0 1) #\\i) #t]\n \
    \   [else              (= (substring file_name 0 1) #\\j) #t]\n    [else     \
    \         (= (substring file_name 0 1) #\\k) #t]\n    [else              (= (substring\
    \ file_name 0 1) #\\l) #t]\n    [else              (= (substring file_name 0 1)\
    \ #\\m) #t]\n    [else              (= (substring file_name 0 1) #\\n) #t]\n \
    \   [else              (= (substring file_name 0 1) #\\o) #t]\n    [else     \
    \         (= (substring file_name 0 1) #\\p) #t]\n    [else              (= (substring\
    \ file_name 0 1) #\\q) #t]\n    [else              (= (substring file_name 0 1)\
    \ #\\r) #t]\n    [else              (= (substring file_name 0 1) #\\s) #t]\n \
    \   [else              (= (substring file_name 0 1) #\\t) #t]\n    [else     \
    \         (= (substring file_name 0 1) #\\v) #t]\n    [else              (= (substring\
    \ file_name 0 1) #\\w) #t]\n    [else              (= (substring ", "  (cond\n\
    \    [(and (= (file-length file_name)\n            (string-length file_name))\n\
    \          (string-no-blanks? file_name)\n          (string-no-dots? file_name)\n\
    \          (and (>= (substring file_name 0 (string-length file_name))\n      \
    \          (string 'a' (string-length file_name)))\n              (string-match?\
    \ #regex \"^[a-z][a-z][0-9]*$\")\n              (string-match? #regex \"^[^.]+[.]txt$\"\
    )\n              (string-match? #regex \"^[^.]+[.]exe$\")\n              (string-match?\
    \ #regex \"^[^.]+[.]dll$\"))\n      'Yes]\n    [else 'No]))\n", "  (let ((valid_name\
    \ (= (string-length (substring-before file_name \".\"))\n                    \
    \    3)\n        valid_extension (= (string-length (substring-after file_name\
    \ \".\"))\n                          (+ 1 (string-length (substring (substring\
    \ file_name 0 3) \"aA\")))\n                          (+ 1 (string-length (substring\
    \ (substring file_name 0 3) \"aA\"))))\n        valid_dot_name (= (string-length\
    \ (substring file_name 0 1))\n                         (+ 1 (string-length (substring\
    \ (substring file_name 0 3) \"aA\")))\n        valid_dot_extension (= (string-length\
    \ (substring file_name 0 2))\n                          (+ 1 (string-length (substring\
    \ (substring file_name 0 3) \"aA\")))\n                          (+ 1 (string-length\
    \ (substring (substring file_name 0 3) \"aA\")))))\n    (and (= valid_name true)\n\
    \         (= valid_extension true)\n         (= valid_dot_name true)\n       \
    \  (= valid_dot_extension true))\n    (string=? \"yes\" file_name)))\n", "  (or\
    \ (string-valid? (substring file_name 0 3)) \n      (equal? (substring file_name\
    \ 0 3) \"..\") \n      (and (string= (substring file_name 0 1) \"a\") (string=\
    \ (substring file_name 0 1) \"b\") (string= (substring file_name 0 1) \"c\") (string=\
    \ (substring file_name 0 1) \"d\") (string= (substring file_name 0 1) \"e\") (string=\
    \ (substring file_name 0 1) \"f\") (string= (substring file_name 0 1) \"g\") (string=\
    \ (substring file_name 0 1) \"h\") (string= (substring file_name 0 1) \"i\") (string=\
    \ (substring file_name 0 1) \"j\") (string= (substring file_name 0 1) \"k\") (string=\
    \ (substring file_name 0 1) \"l\") (string= (substring file_name 0 1) \"m\") (string=\
    \ (substring file_name 0 1) \"n\") (string= (substring file_name 0 1) \"o\") (string=\
    \ (substring file_name 0 1) \"p\") (string= (substring file_name 0 1) \"q\") (string=\
    \ (substring file_name 0 1) \"r\") (string= (substring file_name 0 1) \"s\") (string=\
    \ (substring file_name 0 1) \"t\") (string= (substring file_name 0 1) \"u\") (string=\
    \ (substring file_name 0 1) \"v\") (string= (substring file_name 0 1) \"w\") (string=\
    \ (substring file_name 0 1) \"x\") (string= (substring file_name 0 1) \"y\") (string=\
    \ (substring file_name 0 1) \"z\") \n      (and (equal? (string-ref (file->string->list\
    \ (string->file file_name)) 0) \".\") (string= (file->string->list (string->file\
    \ file_name) 1) \"txt\") (string= (file->string->list (string->file file_name)\
    \ 1) \"exe\") (string= (file->string->list (string->file file_name) 1) \"dll\"\
    ))))\n", "  (cond\n    [(< 3 (string-length file_name)) 'No]\n    [(string-match\
    \ \"[.][0-9]*$\" (substring file_name 0 (string- (string-length file_name) 1))\
    \ 'g) 'No]\n    [else (let ([(valid-file-name ?valid-file-name) (valid-file-ext\
    \ ?valid-file-ext) (valid-file-ext ?valid-file-ext)])\n            (set! valid-file-name\
    \ (substring file_name 0 (string- (string-length file_name) 1)))\n           \
    \ (set! valid-file-ext (substring file_name (string- (string-length file_name)\
    \ 1) (string- (string-length file_name) 2)))\n            (cond\n            \
    \  [(empty? valid-file-name) 'No]\n              [(string=? valid-file-name \"\
    txt\") 'Yes]\n              [(string=? valid-file-name \"exe\") 'Yes]\n      \
    \        [(string=? valid-file-name \"dll\") 'Yes]\n              [(string=? valid-file-name\
    \ \"bin\") 'Yes]\n              [(string=? valid-file-name \"obj\") 'Yes]\n  \
    \            [else 'No]\n            )\n         ]\n  )\n)\n", "  (cond ((string-length\
    \ (string->list file_name)) (= 3 (string-length file_name))) \n        ((string=?\
    \ (substring file_name 0 (string-length (string->list file_name)) #\\0) #\\0)\n\
    \         (string=? (substring file_name (+ 1 (string-length (string->list file_name)))\
    \ #\\0) #\\0)\n         ((string=? (substring file_name (+ 1 (string-length (string->list\
    \ file_name)) #\\0) #\\0) #\\0) (string=? (substring file_name (+ 2 (string-length\
    \ (string->list file_name))) #\\0) #\\0))\n        (else 'No))) \n", "  (and (not\
    \ (file-name file_name))\n       (not (= (file-name file_name) \"\")))\n  (not\
    \ (= (string-length file_name) 3))\n  (not (string-equal? (substring file_name\
    \ 0 (string-length file_name)) \".\"))\n  (member (substring file_name 0 (string-length\
    \ file_name)) '(\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"\
    k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"\
    x\" \"y\" \"z\")))\n", "  (cond\n    [(empty? file_name) 'No]\n    [(>= (length\
    \ (substring-before file_name '.')) 3) 'No]\n    [(not (starts-with? (substring-before\
    \ file_name '.') (first latin_alphabet))) 'No]\n    [(and (equal? (substring-after\
    \ file_name '.') 'txt) (equal? (substring-after file_name '.') 'exe) (equal? (substring-after\
    \ file_name '.') 'dll)) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(file-length\
    \ file_name) <= 10]\n    [(string-char? file_name (code-char 97 97 97)) \n   \
    \  (cond\n       [(file? (file-name file_name)) 'Yes]\n       [else 'No]\n   \
    \    )]\n    [(string-char? file_name (code-char 65 91)) \n     (cond\n      \
    \ [(file? (file-name file_name)) 'Yes]\n       [else 'No]\n       )]\n    [(string-char?\
    \ file_name (code-char 97 91)) \n     (cond\n       [(file? (file-name file_name))\
    \ 'Yes]\n       [else 'No]\n       )]\n    [(file-char? (file-name file_name)\
    \ (file-extension file_name))\n     (cond\n       [(file? (file-name file_name))\
    \ 'Yes]\n       [else 'No]\n       )]\n    [else (error \"Invalid file name: %s\"\
    \ file_name)]))\n", "  (cond\n    [(empty? file_name) \"Please provide file name.\"\
    ]\n    [(= (string-length file_name) 3) \"File name should be 3-character long.\"\
    ]\n    [(= (string-index (string-ref file_name 0 1) \"0123456789\") 0)\n    \"\
    File name should not have more than three digits in its name.\"]\n    [(equal?\
    \ (string-ref file_name 0 1) \".\")\n    \"File name should not contain a dot.\"\
    ]\n    [(and (equal? (string-ref file_name 0 1) (string-ref \"a\" 0 1))\n    \
    \    (not (equal? (string-ref file_name 0 1) (string-ref \"A\" 0 1))))\n    \"\
    File name should start with a latin alphapet letter in capital letter.\"]\n  \
    \  [(equal? (string-ref file_name 0 1) (string-ref \"txt\" 0 3)) \"File name should\
    \ contain 'txt' in the name.\"]\n    [(equal? (string-ref file_name 0 1) (string-ref\
    \ \"exe\" 0 3)) \"File name should contain 'exe' in the name.\"]\n    [(equal?\
    \ (string-ref file_name 0 1) (string-ref \"dll\" 0 3)) \"File name should contain\
    \ 'dll' in the name.\"]\n    [(equal? (string-ref file_name 0 1) (string-ref \"\
    txt\" 0 4)) \"File name should not contain 'exe' in the name.\"]\n    [(equal?\
    \ (string-ref file_name 0 1) (string-ref \"exe\" 0 4)) \"File name should not\
    \ contain 'dll' in the name.\"]\n    [(equal? (string-ref file_name 0 1) (string-ref\
    \ \"dll\" 0 4)) \"File name should not contain 'exe' in the name.\"]\n    [(equal?\
    \ (string-ref file_name 0 1) (string-ref \"dll\" 0 4)) \"File name should not\
    \ contain 'exe' in the name.\"]\n    [(equal? (string-ref file_name 0 1) (string-ref\
    \ \"txt\" 0 5)) \"File name should not contain 'exe' in the name.\"]\n    [(equal?\
    \ (string-ref file_name 0 1) (string-ref \"exe\" 0 5)) \"File name should not\
    \ contain 'dll' in the name.\"]\n    [(equal? (string-ref file_name 0 1) (string-ref\
    \ \"dll\" 0 5)) \"File name should not contain 'dll' in the name.\"]\n    [(equal?\
    \ (string-ref file_name 0 1) (string-ref \"exe\" 0 5)) \"File name should not\
    \ contain 'dll' in the name.\"]\n    [(equal? (string-ref file_name 0 1) (string-ref\
    \ \"dll\" 0 5)) \"File name should not contain ", "  (cond\n    [(string-empty?\
    \ file_name) 'No]\n    [(string? (string-ref file_name 0)) 'No]\n    [(or (string?\
    \ (string-ref file_name 0)) (string-ref file_name 0)) (file-valid-name)] \n  \
    \  [else (file-name-not-valid)]))\n", "  (let* ((len (string-length file_name))\n\
    \         (nums (string-match (string-append \"^[0-9]\" \"[0-9]*$\")\n       \
    \                         file_name))\n         (dots (string-match (string->string\
    \ \".\")\n                                file_name))\n         (first_char (string->string\
    \ (string-ref file_name 0 (string-length file_name)-1)))\n         (check (= 3\
    \ (length nums)))\n         (valid? (= 2 (length dots)))\n         (first_char?(member\
    \ (char->string first_char) '(#\\A #\\z #\\A #\\z)))\n         (check?(= (+ 0\
    \ (string-length first_char)) (length first_char)))\n         (check (= 0 (string-length\
    \ file_name) 3))\n         (valid (= (not first_char?) (file-exists-p (string->string\
    \ file_name))))\n         (check (= (not valid) (file-exists-p (string->string\
    \ file_name)))))\n    (if (or (and (= check? check) \n                (= valid\
    \ check)) \n      'Yes \n      'No)))", "  (match file_name\n    ['#:empty? #true]\
    \ \n    ['#:alpha #false]\n    ['#:digit #false]\n    [(substring file_name 0\
    \ (string-length file_name)) #:contains #false]\n    [(substring file_name 0 (string-length\
    \ file_name)) #:starts-with (string->list (char->string #\\a))]\n    [(substring\
    \ file_name 0 (string-length file_name)) #:starts-with (string->list (char->string\
    \ #\\b))]\n    [(substring file_name 0 (string-length file_name)) #:starts-with\
    \ (string->list (char->string #\\c))]\n    [(substring file_name 0 (string-length\
    \ file_name)) #:starts-with (string->list (char->string #\\d))]\n    [(substring\
    \ file_name 0 (string-length file_name)) #:starts-with (string->list (char->string\
    \ #\\e))]\n    [(substring file_name 0 (string-length file_name)) #:starts-with\
    \ (string->list (char->string #\\f))]\n    [(substring file_name 0 (string-length\
    \ file_name)) #:starts-with (string->list (char->string #\\g))]\n    [(substring\
    \ file_name 0 (string-length file_name)) #:starts-with (string->list (char->string\
    \ #\\h))]\n    [(substring file_name 0 (string-length file_name)) #:starts-with\
    \ (string->list (char->string #\\i))]\n    [(substring file_name 0 (string-length\
    \ file_name)) #:starts-with (string->list (char->string #\\j))]\n    [(substring\
    \ file_name 0 (string-length file_name)) #:starts-with (string->list (char->string\
    \ #\\l))]\n    [(substring file_name 0 (string-length file_name)) #:starts-with\
    \ (string->list (char->string #\\m))]\n    [(substring file_name 0 (string-length\
    \ file_name)) #:starts-with (string->list (char->string #\\n))]\n    [(substring\
    \ file_name 0 (string-length file_name)) #:starts-with (string->list (char->string\
    \ #\\o))]\n    [(substring file_name 0 (string-length file_name)) #:starts-with\
    \ (string->list (char->string #\\p))]\n    [(substring file_name 0 (string-length\
    \ file_name)) #:starts-with (string->list (char->string #\\q))]\n    [(substring\
    \ file_name 0 (string-length file_name)) #:starts-with (string->list (char", " \
    \ (let ([is_file_valid (= (length file_name) 5)\n         is_dot_at_start (= (file-name\
    \ (file-name file_name)) \"\")\n         is_dot_after_word (= (substring (file-name\
    \ (file-name file_name)) 0 (string-length (file-name file_name))) \"\")])\n  \
    \  (if (and (is_file_valid is_dot_at_start is_dot_after_word)\n             (not\
    \ (empty? (string-append (file-name (file-name file_name)))))\n           'Yes\n\
    \           'No)))\n", "  (if (and (< 3 (string-length file_name))\n         \
    \ (string-match (regexp-quote \"^[1-9][0-9]+\") file_name)\n          (string-match\
    \ (regexp-quote \".\") file_name)\n          (string-match (regexp-quote \"^[a-zA-Z][a-zA-Z0-9]*\"\
    ) file_name)\n          (string-match (regexp-quote \".txt|.exe|.dll\") file_name))\n\
    \      'Yes\n      'No))\n", "  (let ([len (string-length file_name)]) ; get the\
    \ length of file_name\n    (cond\n      [(= 3 (string-length file_name)) 'Yes']\
    \ \n      [(string=? (substring file_name 0 (- (+ len 3) file_name))\n       \
    \          [\".txt\" \".exe\" \".dll\"])\n      'Yes']\n      [(string=? (substring\
    \ file_name 0 (- (+ len 3) file_name))\n                 \"1\")\n      'No']\n\
    \      [(string=? (substring file_name 0 (- (+ len 3) file_name))\n          \
    \       \"a\") \n      'No']\n      [(string=? (substring file_name 0 (- (+ len\
    \ 3) file_name))\n                 \"A\")\n      'No']\n      [(string=? (substring\
    \ file_name 0 (- (+ len 3) file_name))\n                 \"!\")\n      'No']\n\
    \      [(string=? (substring file_name 0 (- (+ len 3) file_name))\n          \
    \       \".\")\n      'No']\n      [(string=? (substring file_name 0 (- (+ len\
    \ 3) file_name))\n                 \"..\")\n      'No']\n      [(string=? (substring\
    \ file_name 0 (- (+ len 3) file_name))\n                 \"*\")\n      'No']\n\
    \      [(string=? (substring file_name 0 (- (+ len 3) file_name))\n          \
    \       \"?\") \n      'No']\n      [(string=? (substring file_name 0 (- (+ len\
    \ 3) file_name))\n                 \"$\")\n      'No']\n      [(string=? (substring\
    \ file_name 0 (- (+ len 3) file_name))\n                 \"$#\")\n      'No']\n\
    \      [(string=? (substring file_name 0 (- (+ len 3) file_name))\n          \
    \       \"`\")\n      'No']\n      [(string=? (substring file_name 0 (- (+ len\
    \ 3) file_name))\n                 \"~\")\n      'No']\n      [(string=? (substring\
    \ file_name 0 (- (+ len 3) file_name))\n                 \")\")\n      'No']\n\
    \      [(string=? (substring file_name 0 (- (+ len 3) file_name))\n          \
    \       \",\") \n      'No']\n      [(string=? (substring file_name 0 (- (+ len\
    \ 3) file_name))\n                 \".\") \n      'No']\n      [(string=? (substring\
    \ file_name 0 (- (+ len 3) file_name))\n                 \";\")\n      'No']\n\
    \      [(string=? (substring file_name 0 (- (+ len 3) file_name))\n          \
    \       \"\\\"\")\n      'No']\n      [(string=? (substring file_name 0 (- (+\
    \ len 3) file_name))\n                 \"[\")\n      'No']\n      [(string=? (substring ",
  "  (let ([valid_chars \n          #\"^[0-9][0-9][0-9].\"\n          #\"^[a-zA-Z][a-zA-Z].*\"\
    ]\n        [non_alpha_chars \"!@#$%^&*(),;:?`~`]\"])\n    (if (string-match-p\
    \ valid_chars file_name)\n        'Yes\n        (if (string-match-p non_alpha_chars\
    \ file_name)\n            'No\n            (begin\n              (display (file-name\
    \ file_name))\n              (display \"Invalid file's name: \")\n           \
    \   (display file_name)\n              (display \"\\n\")\n              (newline))\n\
    \            (file_name_check file_name)))))\n", "  (cond \n    ((string-empty?\
    \ file_name) #f)\n    ((string-match (regexp-quote \".\") file_name) #f)\n   \
    \ ((string= (substring (substring file_name 0 1) 0)\n                '(#\\a #\\\
    b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\v #\\x #\\y #\\z))\n    (else (cond (\n           ((string= (substring\
    \ (substring file_name 0 1) 1) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I\
    \ #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\\
    Z)) \n           ((integer? (substring (substring file_name 0 1) 2)) #f)\n   \
    \        (else #f)\n      )))\n  ))\n", "  (cond\n    [(< 3 (string-length file_name))\n\
    \     (string-match \"^[0-9][a-z][a-zA-Z]\" file_name)\n     (string-match \"\\\
    \\.[a-z]{3,4}$\" file_name)\n     (string-match \"^[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \ file_name)]\n    [else\n     (string-match \"^[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]$\"\
    \ file_name)]\n   ))\n", "  (cond\n    [(empty? file_name) 'No]\n    [(number?\
    \ (substring file_name 0 3)) 'No]\n    [(= (string-index (char->list (string->char\
    \ file_name)) #\\. 0) 0) 'No]\n    [(string-index (char->list (string->char file_name))\
    \ #\\. 1) (symbol=? (substring file_name 0 1)\n                              \
    \  #\\a #\\z)])))\n", "  (cond ((empty? file_name) \"The file name should not\
    \ be empty\")\n        ((string=? (substring file_name 0 (string-length file_name))\
    \ \"[0-9]\") \"The file name should not contain only digits\")\n        ((string=?\
    \ (substring file_name 0 (string-length file_name)) \".\") \"The file name should\
    \ not contain a dot\")\n        ((string=? (substring file_name 0 (string-length\
    \ file_name)) (substring '[' 'a' 'z' 'A' 'Z'])) \"The file name should not contain\
    \ illegal characters\")\n        ((string=? (substring file_name 0 (string-length\
    \ file_name)) '[' 'a' 'z' 'A' 'Z' ']') \"The file name should not contain illegal\
    \ characters\")\n        (else 'No')))\n", "  (cond\n    [(empty? file_name) \"\
    Can't be a zero-length string\"]\n    [(equal? (string->number file_name) 0) \"\
    Can't be a number with zero in the name\"]\n    [(equal? (string->number file_name)\
    \ 9)\n     (if (< file_name\n           (string->number \"00000000\")\n      \
    \     (string->number \"00000000\"))\n        \"Can't be a number with 9 in the\
    \ name\"\n        \"Not the name of a valid file\")\n    [(string->char (substring\
    \ file_name 0 3)) \n     (if (equal? (string-match \"[^0-9]\" (substring file_name\
    \ 0 3)) #f)\n        \"Can't be a non-digit in the name\"\n        \"Not the name\
    \ of a valid file\")\n    [(string-match \".\" file_name) \n     (if (equal? (substring\
    \ file_name 0 (string-length file_name)) #f)\n        \"Can't be a dot in the\
    \ name\"\n        \"Not the name of a valid file\")\n    [(string->number (substring\
    \ file_name 0 (string-length file_name))) \n     (if (< file_name\n          \
    \ (string->number \"00000000\")\n           (string->number \"00000000\"))\n \
    \       \"Can't be a number with zero in the name\"\n        \"Not the name of\
    \ a valid file\")\n    [(string-match \"^([A-Za-z]([A-Za-z]+)?)\" file_name) \n\
    \     (if (equal? (string-match (substring file_name 0 1) \"^[a-zA-Z]\") #f)\n\
    \        \"Can't start with a letter from the latin alphabet\"\n        \"Not\
    \ the name of a valid file\")\n    [(string-match \"([A-Za-z]+)\" file_name) \n\
    \     (if (equal? (string-match (substring file_name 0 1) \"[A-Za-z]+\") #f)\n\
    \        \"Can't end with a letter from the latin alphabet\"\n        \"Not the\
    \ name of a valid file\")\n    [(string-match \"([A-Za-z]+\\\\.)\" file_name)\
    \ \n     (if (equal? (string-match (substring file_name 0 1) \"[A-Za-z]+\") #f)\n\
    \        \"Can't end with a letter from the latin alphabet\"\n        \"Not the\
    \ name of a valid file\")\n    [(string-match \"^[A-Za-z]+\" file_name) \n   \
    \  (if (equal? (string-match (substring file_name 0 1) \"^[A-Za-z]\") #f)\n  \
    \      \"Can't start with a letter from the latin alphabet\"\n        \"Not the\
    \ name of a valid file\")\n    [(string-match \"^([A-Za-z]+$)\" file_name) \n\
    \     (if (equal? (string-match (substring file_name 0 1) \"^[A-Za-z]+$\") #f)\n\
    \        \"Can't end with a letter from the latin alphabet\"\n        \"Not the\
    \ name of a valid file\")", "  (cond\n    [(= (length file_name) 3)\n     (= (file-name\
    \ file_name) (file-name file_name))]\n    [else\n     (cond\n       [(= (file-name\
    \ file_name) (substring file_name 0 3))\n        (cond\n          [(= (substring\
    \ file_name 0 1) 'a)\n           (= (substring file_name 0 2) 'b)\n          \
    \ (= (substring file_name 0 3) 'c)\n           (= (substring file_name 0 4) 'd)\n\
    \           (= (substring file_name 0 5) 'e)\n           (= (substring file_name\
    \ 0 6) 'f)\n           (= (substring file_name 0 7) 'g)\n           (= (substring\
    \ file_name 0 8) 'h)\n           (= (substring file_name 0 9) 'i)\n          \
    \ (= (substring file_name 0 10) 'j)\n           (= (substring file_name 0 11)\
    \ 'k)\n           (= (substring file_name 0 12) 'l)\n           (= (substring\
    \ file_name 0 13) 'm)\n           (= (substring file_name 0 14) 'n)\n        \
    \   (= (substring file_name 0 15) 'o)\n           (= (substring file_name 0 16)\
    \ 'p)\n           (= (substring file_name 0 17) 'q)\n           (= (substring\
    \ file_name 0 18) 'r)\n           (= (substring file_name 0 19) 's)\n        \
    \   (= (substring file_name 0 20) 't)]\n          [else\n           (file-name\
    \ file_name)]\n         [else\n          (file-name file_name)]\n         [else\n\
    \          (file-name file_name)]\n         [else\n          (file-name file_name)]\n\
    \         [else\n          (file-name file_name)]\n         [else\n          (file-name\
    \ file_name)]\n         [else\n          (file-name file_name)]\n         [else\n\
    \          (file-name file_name)]\n         [else\n          (file-name file_name)]\n\
    \         [else\n          (file-name file_name)]\n         [else\n          (file-name\
    \ file_name)]\n         [else\n          (file-name file_name)]\n         [else\n\
    \          (file-name file_name)]\n         [else\n          (file-name file_name)]\n\
    \         [else\n          (file-name file_name)]\n         [else\n          (file-name\
    \ file_name)]\n         [else\n          (file-name file_name)]\n         [else\n\
    \          (file-name file_name)]\n         [else\n          (file-name file_name)]\n\
    \         [else", "  (cond\n    [(= (length (string->list file_name)) 3)\n   \
    \  (equal? (string->char (sub1 file_name)) #\\0)]\n    [(= (string-ref file_name\
    \ 0) #\\0)\n     (equal? (string->char (sub1 file_name)) #\\0)]\n    [else\n \
    \    (let ([num_chars (string->number (sub1 file_name))])\n       (cond\n    \
    \     [(< num_chars 9)\n          (equal? (string->char (sub1 file_name)) #\\\
    0)]\n         [(= num_chars 1)\n          (equal? (string->char (sub1 file_name))\
    \ #\\0)]\n         [(> num_chars 1)\n          (equal? (string->char (sub1 file_name))\
    \ #\\0)]\n         [(char->string (char->integer (char->digit file_name))\n  \
    \                 [#\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\
    \ \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\"])\n          (equal? (string->char (sub1 file_name)) #\\0)]\n\
    \         [else\n          (equal? (string->char (sub1 file_name)) #\\0)]\n  \
    \       [else\n          (equal? (string->char (sub1 file_name)) #\\0)]\n    \
    \     [else\n          (equal? (string->char (sub1 file_name)) #\\0)]\n      \
    \   [else\n          (equal? (string->char (sub1 file_name)) #\\0)]\n        \
    \ [else\n          (equal? (string->char (sub1 file_name)) #\\0)]\n         [else\n\
    \          (equal? (string->char (sub1 file_name)) #\\0)]\n         [else\n  \
    \        (equal? (string->char (sub1 file_name)) #\\0)]\n         [else\n    \
    \      (equal? (string->char (sub1 file_name)) #\\0)]\n         [else\n      \
    \    (equal? (string->char (sub1 file_name)) #\\0)]\n         [else\n        \
    \  (equal? (string->char (sub1 file_name)) #\\0)]\n         [else\n          (equal?\
    \ (string->char (sub1 file_name)) #\\0)]\n         [else\n          (equal? (string->char\
    \ (sub1 file_name)) #\\0)]\n         [else\n          (equal? (string->char (sub1\
    \ file_name", "  (let ((valid_file (file_name_checker file_name)))\n    (cond\n\
    \      [(valid_file 'yes) 'yes]\n      [(valid_file 'no) 'no]\n      [(valid_file\
    \ 'wrong) 'wrong]\n      [else (file_name_check file_name)])))\n", "  (cond [(<=\
    \ (file-name file_name) 99)\n         (string-match \"^\\\\d.*\" file_name) \n\
    \         (string-match \"^[^.]*\\\\.[^.]*\" file_name)\n         (string-match\
    \ \"^[^.]*\\\\.[^.]*\\\\.[^.]*\" file_name)]\n        [else\n         (string-match\
    \ \"^[a-z][a-z]\\\\.\" file_name)]\n      )\n)\n", "  (cond\n    [(string-empty?\
    \ file_name) \"The file name should not be empty\"]\n    [(equal? (string-ref\
    \ file_name 0) \".\") \"The file's name should not start with a dot\"]\n    [(string-length\
    \ (string-ref file_name 0) > 3) \"There should not be more than three digits (0~9)\
    \ in the file's name\"]\n    [(equal? (string-ref (substring (substring file_name\
    \ 0 1) 0 1) \"a\") #\"a\") \"The substring before the dot should start with a\
    \ letter (a or A)\"]\n    [(equal? (substring (substring file_name 0 1) 0 (string-length\
    \ (substring file_name 0 1)) \"exe\") #\"exe\") \"The substring after the dot\
    \ should be one of these: ['txt', 'exe', 'dll']\"]\n    [else \"Yes\"]\n    ))\n",
  "  (let ([file_ref (file->string file_name)]\n        [dot (file-ref (substring\
    \ file_name 0 (string-length file_name)))]\n        [file_name (file-ref (substring\
    \ file_name 1 (string-length file_name)))])\n    (if (= 0 (string-length file_name))\n\
    \        'No\n        (cond\n          [(= 0 (string-length file_name)) 'Yes]\n\
    \          [else (cond\n                  [(symbol=? (string-ref file_name 0)\
    \ '.') 'Yes]\n                  [else (cond\n                          [(string=?\
    \ (substring file_name 0 1) 'A') 'Yes]\n                          [else (cond\n\
    \                                  [(string=? (substring file_name 0 1) 'a') 'Yes]\n\
    \                                  [else (cond\n                             \
    \             [(string=? (substring file_name 0 1) 'Z') 'Yes]\n              \
    \                            [else (cond\n                                   \
    \               [(string=? (substring file_name 0 1) 'z') 'Yes]\n            \
    \                                      [else (cond\n                         \
    \                                 [(symbol=? (substring file_name 0 1) 'A') 'Yes]\n\
    \                                                          [else (cond\n     \
    \                                                           [(symbol=? (substring\
    \ file_name 0 1) 'a') 'Yes]\n                                                \
    \                [else (cond\n                                               \
    \                         [(symbol=? (substring file_name 0 1) 'Z') 'Yes]\n  \
    \                                                                      [else (cond\n\
    \                                                                            \
    \    [(string=? (substring file_name 0 1) '0') 'Yes]\n                       \
    \                                                         [else (cond\n      \
    \                                                                            \
    \      [(string=? (substring file_name 0 1) '9') 'Yes]\n                     \
    \                                                                   ['No])])])])])])])])]\n\
    \          )]))))", "  (cond\n    [(< (string-length file_name) 3)\n     (string-equal\
    \ \".\" file_name)\n     (string-not (string-empty\n                    (substring\
    \ file_name 0 (string-length (substring file_name 0 (string-length file_name))))\
    \ \n                    (or (char= (substring file_name 0 (string-length (substring\
    \ file_name 0 (string-length file_name)))) #\\0)\n                        (or\
    \ (char= (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name)))) #\\a)\n                            (char= (substring file_name\
    \ 0 (string-length (substring file_name 0 (string-length file_name)))) #\\z)\n\
    \                            (char= (substring file_name 0 (string-length (substring\
    \ file_name 0 (string-length file_name)))) #\\A)\n                           \
    \ (char= (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name)))) #\\Z))))]\n    [(or (char= (substring file_name 0 (string-length\
    \ (substring file_name 0 (string-length file_name)))) #\\0)\n        (or (char=\
    \ (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name)))) #\\a)\n            (or (char= (substring file_name 0 (string-length\
    \ (substring file_name 0 (string-length file_name)))) #\\z)\n                (char=\
    \ (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name)))) #\\A)\n                (char= (substring file_name 0 (string-length\
    \ (substring file_name 0 (string-length file_name)))) #\\Z))))\n     (string-equal\
    \ (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name))))\n     (string-equal (substring file_name 0 (string-length (substring\
    \ file_name 0 (string-length file_name))))\n     (string-equal (substring file_name\
    \ 0 (string-length (substring file_name 0 (string-length file_name)))) \n    \
    \ (or (char= (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name)))) #\\0)\n         (or (char= (substring file_name 0 (string-length\
    \ (substring file_name 0 (string-length file_name)))) #\\a)\n             (or\
    \ (char= (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name)))) #\\z)\n                 (char= (substring file_name 0 (string-length\
    \ (substring file_name 0 (string-length file_name)))) #\\A)\n                \
    \ (char= (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name)))) #\\Z))))\n     (string-equal (substring file_name 0 (string-length",
  "  (cond\n    [(string-empty? file_name) \"No\"]\n    [(string-match (string-downcase\
    \ file_name) \".*\") \"No\"]\n    [(string-match (string-downcase file_name) \"\
    ^[a-zA-Z]+\") \"No\"]\n    [(string-match (string-downcase file_name) \"^[0-9].*\"\
    ) \"No\"]\n    [(string-match (string-downcase file_name) \"^[0-9][0-9].*\") \"\
    No\"]\n    [(string-match (string-downcase file_name) \"^[0-9][0-9][0-9].*\")\
    \ \"Yes\"]\n    [else (if (string-match (string-downcase file_name) \"^.*\\.\"\
    ) \"Yes\" \"No\")]))\n", "  (cond\n    ((<= (length file_name) 3)\n      (and\
    \ (integer? (substring file_name 0 (- 3 file_name)))\n           (char? (substring\
    \ file_name 0 1)))\n           (not (empty? (substring file_name 0 (length file_name)\
    \ - 1))))\n    ((<= (length file_name) 4)\n       (and (integer? (substring file_name\
    \ 0 (- 3 file_name)))\n            (char? (substring file_name 0 1)))\n      \
    \     (not (empty? (substring file_name 0 (length file_name) - 1))))\n    ((<=\
    \ (length file_name) 4)\n       (and (integer? (substring file_name 0 (- 3 file_name)))\n\
    \            (char? (substring file_name 0 1)))\n           (char? (substring\
    \ file_name 1 (length file_name) - 1)))\n            (cond (\n              (char?\
    \ 'a') #t\n              (char? 'b') #t\n              (char? 'c') #t\n      \
    \        (char? 'd') #t\n              (char? 'e') #t\n              (char? 'f')\
    \ #t\n              (char? 'g') #t\n              (char? 'h') #t\n           \
    \   (char? 'i') #t\n              (char? 'j') #t\n              (char? 'k') #t\n\
    \              (char? 'l') #t\n              (char? 'm') #t\n              (char?\
    \ 'n') #t\n              (char? 'o') #t\n              (char? 'p') #t\n      \
    \        (char? 'q') #t\n              (char? 'r') #t\n              (char? 's')\
    \ #t\n              (char? 't') #t\n              (char? 'u') #t\n           \
    \   (char? 'v') #t\n              (char? 'w') #t\n              (char? 'x') #t\n\
    \              (char? 'y') #t\n              (char? 'z') #t\n              (char?\
    \ 'A') #t\n              (char? 'B') #t\n              (char? 'C') #t\n      \
    \        (char? 'D') #t\n              (char? 'E') #t\n              (char? 'F')\
    \ #t\n              (char? 'G') #t\n              (char? 'H') #t\n           \
    \   (char? 'I') #t\n              (char? 'J') #t\n              (char? 'K') #t\n\
    \              (char? 'L') #t\n              (char? 'M') #t\n              (char?\
    \ 'N') #t\n              (char? 'O') #t\n              (char? 'P') #t\n      \
    \        (char? 'Q') #t\n              (char? 'R') #t\n              (char? 'S')\
    \ #t\n              (char? 'T') ", "  (cond\n    [(file-name-is-valid file_name)\
    \  'Yes']\n    [else                       'No']))\n", "  (and (not (= (length\
    \ (string-split file_name #\\.)) 3))\n       (not (string-match (substring file_name\
    \ 0 (string-length (file-name file_name))) '(\"aAbB\" \"bB\" \"C\" \"dD\" \"eE\"\
    \ \"fF\" \"gG\" \"hH\" \"iI\" \"jJ\" \"kK\" \"lL\" \"mM\" \"nN\" \"oO\" \"pP\"\
    \ \"qQ\" \"rR\" \"sS\" \"tT\" \"uU\" \"vV\" \"wW\" \"xX\" \"yY\" \"zZ\"))))\n",
  "  (cond\n    [(> (string-length file_name) 3) 'No]\n    [(string-index (substring\
    \ file_name 0 1) \"a\" #\\a) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"A\" #\\A) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"b\" #\\b) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"B\" #\\B) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"c\" #\\c) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"C\" #\\C) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"d\" #\\d) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"D\" #\\D) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"e\" #\\e) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"E\" #\\E) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"f\" #\\f) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"F\" #\\F) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"g\" #\\g) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"G\" #\\G) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"h\" #\\h) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"H\" #\\H) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"i\" #\\i) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"I\" #\\I) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"j\" #\\j) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"J\" #\\J) (string->symbol file_name)]\n    [(string-index (substring\
    \ file_name 0 1) \"k\" #\\k) (string->", "  (cond\n    [(empty? file_name) \"\
    Please provide a name of a file\"]\n    [(or (string? file_name) (number? file_name)\
    \ (char? file_name))\n      \"Please provide a name of a file consisting of letters\
    \ only.\"]\n    [(string-match? \".\" file_name) \n      \"Please provide a name\
    \ of a file consisting of letters only.\"]\n    [(string-match? (string->list\
    \ (substring file_name 0 (string-length file_name))) \n                   (string->list\
    \ \"abc\") \"No more than three digits\")]\n    [(string-match? (substring file_name\
    \ 0 (string-length file_name)) \n                  (string->list \"abc\") \"No\
    \ dot '.'\") \n      \"Please provide a name of a file consisting of letters only.\"\
    ]\n    [(string-match? (substring file_name 0 (string-length file_name)) \n  \
    \                (string->list \"a..z\") \"Substring before dot should be letter\"\
    ) \n      \"Please provide a name of a file consisting of letters only.\"]\n \
    \   [(string-match? (substring file_name 0 (string-length file_name)) \n     \
    \             (string->list \"A..Z\") \"Substring after dot should be letter\"\
    ) \n      \"Please provide a name of a file consisting of letters only.\"]\n \
    \   [else \"Invalid file name\"]))\n", "  (cond ((or (string? file_name) (number?\
    \ file_name))\n         'No)\n        ((string-match \"^[0-9][0-9]?\\.[a-z][a-z][a-z]$\"\
    \ file_name)\n         (string-match \"^[a-z][a-z][a-z]$\" (string-ref file_name\
    \ 0 (string-length file_name)))\n         (string-match \"^[a-z][a-z]$\" (substring\
    \ file_name 0 (string-length file_name)))\n         'No)\n        (else 'Yes)))\n",
  "  (cond\n    [(= 0 (string-length file_name))\n     (print \"File name should not\
    \ be empty\")\n     (return 'No)]\n    [(string-match \"^[^.]*([a-zA-Z][a-zA-Z0-9]*)\"\
    \ file_name)\n     (print \"File name should contain only one dot\")\n     (return\
    \ 'No)]\n    [(string-match \"^[^.]*([a-zA-Z][a-zA-Z0-9]*)\\.([exe|dll|txt])\"\
    \ file_name)\n     (print \"File name should start with a latin alphapet letter\"\
    )\n     (return 'No)]\n    [else (print \"File name is valid\")]\n  )\n)\n", " \
    \ (cond\n    [(string-equal? (file-name file_name) \".\") 'No]\n    [(string-char-lower?\
    \ (file-name file_name) ) 'No]\n    [(or (string->list file_name)\n         (string-starts-with?\
    \ (file-name file_name) \".\"))\n      'No]\n    [(substring (substring file_name\
    \ 0 1) 0 (string->list (file-name file_name)) )\n      (cond [\n            (string->list\
    \ (file-name file_name)) \n            'Yes]\n            [(or (string->list (file-name\
    \ file_name))\n                (string-char-lower? (file-name file_name)) )\n\
    \            'No]\n            [(or (string->list (file-name file_name))\n   \
    \             (string-char-upper? (file-name file_name)) )\n            'No]\n\
    \            [else 'No)\n        ]\n    ]\n    [else 'No)\n  ))\n", "  (let ([file_name\
    \ file_name])\n    (string->number (string-match #rx\"^[0-9]{1,3}$\" file_name))\n\
    \    (string->boolean (string-match #rx\"^[^\\.].*\\.[^\\.]$\" file_name))\n \
    \   (string->boolean (string-match #rx\"^[a-z]{2,}$\" (regexp-match #rx\"^[a-z]+\"\
    \ file_name)))\n    (string->boolean (string-match #rx\"^([a-z])(\\.*|$)\" (regexp-match\
    \ #rx\"^[a-z]+(\\.*|$)\" file_name)))))\n</code>\nThe string match function can\
    \ be found in this answer: https://stackoverflow.com/a/13762919/3627387\nThe second\
    \ string match function checks if the input string has exactly one dot, and if\
    \ it does not, it returns true. The third string match function checks if the\
    \ input string does not start with a latin character or any latin character followed\
    \ by any digits, and if it does not, it returns true. The fourth string match\
    \ function checks if the input string does not end with a latin character or any\
    \ latin character followed by any digits, and if it does not, it returns true.\
    \ Otherwise, it returns false.\nThe string match function can be found in this\
    \ answer: https://stackoverflow.com/a/13762919/3627387\nThe fourth string match\
    \ function can be found in this answer: https://stackoverflow.com/a/13762919/3627387\n\
    The third string match function can be found in this answer: https://stackoverflow.com/a/13762919/3627387\n\
    The second string match function can be found in this answer: https://stackoverflow.com/a/13762919/3627387\n\
    The first string match function can be found in this answer: https://stackoverflow.com/a/13762919/3627387\n\
    The first string match function can be found in this answer: https://stackoverflow.com/a/13762919/3627387\n\
    <|/ a dscore=0 |>\n<| c |>\nI cannot use your solution because it is an exercise,\
    \ and i cannot use racket in such exercises. I must use only the basic racket.\n\
    <|/ c |>\n<| c |>\nYour solution is based on racket, but you do not want to use\
    \ racket in the exercise, right? I added some more information about string matching\
    \ functions that can be used in other languages that racket supports.\n<|/ c |>\n\
    <| c |>\nOh yes, sorry.\n<|/ c |>\n<| c |>\nThank you so much for your answers.\
    \ Unfortunately my teacher doesn't allow me to use racket for these exercises.\
    \ He only allows us to use the basic racket language. :(\n<|/ c |>\n<| c |>\nO",
  "  (cond\n    [(empty? file_name) \"NO\"]\n    [(string-empty? file_name) \"NO\"\
    ]\n    [(string-match \"^[0-9]*$\" file_name) \"NO\"]\n    [(string-match \"\\\
    \\.\" file_name) \"NO\"]\n    [(string-match \"^[a-z][a-z0-9]*\" file_name) \"\
    YES\"]))\n", "  (let\n    ([file_regexp #\".+\\.([a-zA-Z]|[1-9][0-9])+\\.(txt|exe|dll)$\"\
    ]\n     (regexp-opt file_name file_regexp)))\n    (or (string=? file_name \"example.txt\"\
    )\n        (string=? file_name \"1example.dll\")\n        (string=? file_name\
    \ \"example.exe\")\n        (string=? file_name \"example.dll\"))))\n", "  (let\
    \ ((letters '(#\\a '#\\b #\\c #\\d #\\e #\\f #\\g))\n        (digits-only '(#\\\
    0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\a))\n        (dot-position '(#\\\
    . #\\. #\\. #\\. #\\. #\\.)))\n    (and (not (string-empty? file_name))\n    \
    \     (string-match-p digits file_name)\n         (string-match-p letters file_name)\n\
    \         (string-match-p dot-position file_name))))\n", "  (cond [(string=? file_name\
    \ \"\")\n         \"Error: empty filename\"]\n        [(or (string=? file_name\n\
    \                      \"..\")\n            (string=? file_name\n            \
    \          \"..\\\\\")\n            (string=? file_name\n                    \
    \  \".\")\n            (string=? (string-match \"^[a-zA-Z][a-zA-Z0-9\\.]*$\" file_name)\n\
    \                      file_name)\n            (string-match \"^[a-zA-Z][a-zA-Z0-9\\\
    .]*$\"\n                          file_name)\n            (string-match \"^[a-zA-Z]\"\
    \ file_name)\n            (string-match \"^[0-9]\" file_name)\n            (string-match\
    \ \"^\\.$\" file_name)\n            (string-match \"^\\.\\.$\" file_name)\n  \
    \          (string=? file_name\n                      \"exe\")\n            (string=?\
    \ file_name\n                      \"dll\")\n            (string=? file_name\n\
    \                      \"txt\")]\n        [(= \"123\" file_name)\n         \"\
    Error: files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"000\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"00\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"0\"))\n         \"Error: files\
    \ with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"001\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"010\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"011\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"012\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"013\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"014\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"015\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"016\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"017\"))\n         \"Error:\
    \ files with only three digits should be called\"]\n        [(string=? (string-length\
    \ file_name)\n                     (string-length \"018\"))\n", "  (cond\n   \
    \ [(string? file_name) (cond\n                             [or (string->number\
    \ (substring file_name 0 3))\n                               (empty? (substring\
    \ file_name 0 1))]\n                             [else (string->symbol (substring\
    \ file_name 0 1))])]\n    [else (error)]))\n", "  (cond\n    [(empty? file_name)\
    \ #f]\n    [(< 3 (length (string-match-all \".\" file_name)) #t]\n    [(and (character?\
    \ (string-ref file_name (- 3 (length (string-match-all \".\" file_name)))) #f)\n\
    \          (string-match-all \"[A-Za-z]\" (string-ref file_name (- 3 (length (string-match-all\
    \ \".\" file_name))))) #t]\n    [else #f]))\n</code>\n<|/ a |>\n<| c |>\nThank\
    \ you! I just realized that my code has a bug.. I've just updated it now. I want\
    \ to write more compact code but my question was that how can I check if a file\
    \ name contains only letters or numbers and I don't want to use regex expression\
    \ (because I didn't learn it yet and I can't use it in my program). My code does\
    \ not work that way :(\n<|/ c |>\n<| c |>\n, since you've asked the same question\
    \ multiple times already, I won't repeat the work of those other answers, please\
    \ don't add more information by editing your original question if you don't understand\
    \ why they don't help, or what your new code should do.\n<|/ c |>\n<| c |>\n,\
    \ just to be clear, by \"contain only letters\" do you mean that only file names\
    \ should contain letters (not numbers, punctuation, etc.), or do you mean that\
    \ only file names that contain letters should be allowed? For instance, does `1example.txt`\
    \ count as a valid file name?\n<|/ c |>\n<| c |>\n, thank you for your comment,\
    \ I've just edited my post. I'm sorry but I don't understand why your answer doesn't\
    \ help me. Anyway, my code now works fine but I need to write more compact code.\n\
    <|/ c |>\n<| c |>\n, could you please post the code as it is now (the one that\
    \ isn't working as you expect)? I'll help you understand how to fix it.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nYour regex doesn't work because you check for one or the\
    \ other with OR instead of AND.\n<code>", "  (cond\n    [(empty? file_name) \"\
    No\"]\n    [(string? (substring-before file_name \".\")) (string-match \"^[^\\\
    .].*\" file_name)\n      (string-match \".(txt|exe|dll)$\" file_name)]\n    [else\
    \ (string-match \".[a-z].*\" file_name)]\n   )\n  )\n", "  (match file_name\n\
    \      [(empty? file_name) 'No]\n      [(string=? \"..\" file_name) 'No]\n   \
    \   [(string=? \"1\" file_name) 'No]\n      [(string=? file_name-char (string->list\
    \ (substring file_name 0 (length (substring file_name 0 1))))) 'Yes]\n      [(string=?\
    \ file-extension (substring file_name 0 (string-length file_name)))] \n      [(string=?\
    \ file_name (file-path-join file-path file_name)) 'Yes]\n      [(string=? file-extension\
    \ (file-path-join file-path file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"1\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"2\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"3\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"4\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"5\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"6\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"7\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"8\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"9\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"10\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"11\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"12\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"13\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"14\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"15\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"16\" file_name)) 'Yes]\n      [(string=? file_name (file-path-join\
    \ file-path \"17\" ", "  (cond\n    [(number? (string-length file_name)) 'No]\n\
    \    [(string-match \".\" file_name) 'No]\n    [(string-match (string->substring\
    \ file_name 0 2) (string->substring \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) 0) 'No]\n    [else 'Yes]))\n", "  (cond\n    [(string-length (string-sub file_name\
    \ 0 2)) (string-length file_name)]\n    [(string-length (string-sub file_name\
    \ 0 3)) (string-length file_name)\n     (string-char (substring file_name 0 1))\n\
    \     ((substring file_name 0 1) >= 'a' ? (substring file_name 0 1) <= 'z' ? 'Yes'\
    \ : 'No')\n     ((substring file_name 0 1) >= 'A' ? (substring file_name 0 1)\
    \ <= 'Z' ? 'Yes' : 'No')]\n    [else (error 'file_name \"invalid file name\")]))\n",
  "  (cond ((> 3 (string-length file_name))\n         'No)\n        ((eq? (substring\
    \ (substring file_name 0 3) 0) #\\0)\n         'No)\n        ((eq? (substring\
    \ (substring file_name 0 3) 0) #\\a)\n         'No)\n        ((eq? (substring\
    \ (substring file_name 0 3) 0) #\\z)\n         'No)\n        ((eq? (substring\
    \ (substring file_name 0 3) 0) #\\A)\n         'No)\n        (else 'Yes)))\n",
  "  (let ((letters '(#\\a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q #r #s #t\
    \ #u #v #w #x #y #z)))\n    (cond\n      [(empty? file_name) #f]\n      [(char=?\
    \ (first file_name) letters) #t]\n      [(char=? (first file_name) #.) #f]\n \
    \     [(char=? (first (subseq file_name 0 2)) letters) #t]\n      [(char=? (first\
    \ (subseq file_name 0 2)) #.) #f]\n      [(char=? (first (subseq file_name 0 4))\
    \ letters) #t]\n      [(char=? (first (subseq file_name 0 4)) #.) #f]\n      [(char=?\
    \ (first (subseq file_name 0 6)) letters) #t]\n      [(char=? (first (subseq file_name\
    \ 0 6)) #.) #f]\n      [else #f])))\n", "  (if (empty? (substring file_name 0\
    \ 3))\n      'No\n      (if (= (substring file_name 0 1)\n              (substring\
    \ #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list 'a #(list\
    \ 'a #(list ", "  (let ([file_name file_name])\n    (string-match \"^[0-999]{3}\\\
    .\" file_name\n                 #:allow-others #t\n                 #:return #f\n\
    \                 #:start 0\n                 #:end 3)\n    (string-match \"^[a-zA-Z].+\"\
    \ file_name\n                 #:allow-others #t\n                 #:return #f\n\
    \                 #:start 0\n                 #:end 1))\n              ", "  (cond\n\
    \    [(string-empty? file_name) 'No']\n    [(= (length (string-ref file_name 0))\
    \ 3)\n     (cond\n       [(char=? (string-ref file_name 0) (char #\\0))\n    \
    \    'No']\n       [(char=? (string-ref file_name 0) (char #\\9)) 'No']\n    \
    \   [(char=? (string-ref file_name 0) (char #\\A)) 'No']\n       [(char=? (string-ref\
    \ file_name 0) (char #\\Z)) 'No']\n       [(char=? (string-ref file_name 0) (char\
    \ #\\a)) 'No']\n       [(char=? (string-ref file_name 0) (char #\\z)) 'No']\n\
    \       [(char=? (string-ref file_name 0) (char #\\A)) 'No']\n       [(char=?\
    \ (string-ref file_name 0) (char #\\Z)) 'No']\n       [(char=? (string-ref file_name\
    \ 0) (char #\\a)) 'No']\n       [(char=? (string-ref file_name 0) (char #\\z))\
    \ 'No']\n       [(char=? (string-ref file_name 0) (char #\\0)) 'No']\n       [(char=?\
    \ (string-ref file_name 0) (char #\\9)) 'No']\n       [(char=? (string-ref file_name\
    \ 0) (char #\\A)) 'No']\n       [(char=? (string-ref file_name 0) (char #\\Z))\
    \ 'No']\n       [(char=? (string-ref file_name 0) (char #\\a)) 'No']\n       [(char=?\
    \ (string-ref file_name 0) (char #\\z)) 'No']\n       [(char=? (string-ref file_name\
    \ 0) (char #\\0)) 'No']\n       [(char=? (string-ref file_name 0) (char #\\9))\
    \ 'No']\n       [(char=? (string-ref file_name 0) (char #\\A)) 'No']\n       [(char=?\
    \ (string-ref file_name 0) (char #\\Z)) 'No']\n       [(char=? (string-ref file_name\
    \ 0) (char #\\a)) 'No']\n       [(char=? (string-ref file_name 0) (char #\\z))\
    \ 'No']\n       [(char=? (string-ref file_name 0) (char #\\0)) 'No']\n       [(char=?\
    \ (string-ref file_name 0) (char #\\9)) 'No']\n       [(char=? (", "  (cond\n\
    \    [(<= (file-length file_name) 3) 'Yes']\n    [(equal? (substring (substring\
    \ file_name 0 1) 0 1) '-) 'No']\n    [(equal? (substring (substring file_name\
    \ 0 1) 0 1) 'a') 'No']\n    [(equal? (substring (substring file_name 0 1) 0 1)\
    \ 'z') 'No']\n    [(equal? (substring (substring file_name 0 1) 0 1) 'A') 'No']\n\
    \    [(equal? (substring (substring file_name 0 1) 0 1) 'Z') 'No']\n    [else\
    \ (equal? (substring file_name 0 3) '000') (equal? (substring file_name 1 4) '.')\
    \ (equal? (substring file_name 2 4) 'txt') (equal? (substring file_name 3 4) '.')\
    \ (equal? (substring file_name 4 4) 'exe') (equal? (substring file_name 5 4) '.')\
    \ (equal? (substring file_name 6 4) 'dll')]\n  ))\n", "  (cond ((string-length\
    \ (file-name file_name)) > 4)\n        ((string-equal (file-name file_name) \"\
    .\"))\n        ((not (string-null? (substring (string file_name) 0 (string-length\
    \ (string file_name)))))\n         (not (equal? (string (substring (string file_name)\
    \ 0 1)) 'a'))\n         (not (equal? (string (substring (string file_name) 0 1))\
    \ 'z'))\n         (not (equal? (string (substring (string file_name) 0 1)) 'A'))\n\
    \         (not (equal? (string (substring (string file_name) 0 1)) 'Z'))\n   \
    \      ((substring (string file_name) 0 (string-length (string file_name))) \n\
    \          (string-equal? \n           ((substring-before \n            (string\
    \ file_name) \n            (substring (string file_name) 0 (string-length (string\
    \ file_name))) \n            ) \n            \"txt\")\n          (string-equal?\
    \ \n           ((substring-before \n            (string file_name) \n        \
    \    (substring (string file_name) 0 (string-length (string file_name))) \n  \
    \          ) \n            \"exe\")\n          (string-equal? \n           ((substring-before\
    \ \n            (string file_name) \n            (substring (string file_name)\
    \ 0 (string-length (string file_name))) \n            ) \n            \"dll\"\
    )\n          )\n        )\n        (else 'No')\n  )\n)\n", "  (cond\n    ((< 0\
    \ (string-length file_name) 3)\n     (error \"Invalid file name: too few characters\"\
    )) \n    ((= (string-length file_name) 4)\n     (error \"Invalid file name: too\
    \ many characters\")) \n    ((string-match-p #\\. file_name)\n     (error \"Invalid\
    \ file name: cannot contain a dot\")) \n    ((string-match-p #(#\\A #\\z #\\A\
    \ #\\z)(string-substring file_name (- 3 (string-length file_name)))\n     (error\
    \ \"Invalid file name: the first substring should start with a latin alphabet\"\
    ))\n    ((not (string-match-p #(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\\
    j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)\
    \ #\\space)\n     (error \"Invalid file name: cannot contain spaces\"))))\n",
  "  (let ((char (char->integer file_name)))\n    (if (and (< 3 char) (char=? (char-code\
    \ char) 48) (char=? (char-code char) 57))\n        'Yes\n        'No))))\n", " \
    \ (let* ((file-name (file->string file_name))\n         (string-length string-length))\n\
    \    (string-length string->list (substring file-name 0 string-length))\n    (substring\
    \ file-name (string-length string->list (substring file-name 0 string-length))\
    \ string-length)\n    (string->list (substring file-name (string-length string->list\
    \ (substring file-name 0 string-length)) string-length))\n    (string-length string->list\
    \ (substring file-name (string-length string->list (substring file-name 0 string-length))\
    \ string-length))\n    (substring file-name (string-length string->list (substring\
    \ file-name (string-length string->list (substring file-name 0 string-length))\
    \ string-length))\n    (string->list (substring file-name (string-length string->list\
    \ (substring file-name (string-length string->list (substring file-name 0 string-length))\
    \ string-length))))\n  (= (string-length string->list (substring file-name 0 string-length))\
    \ 3)\n  (not (string-equal? (substring file-name (string-length string->list (substring\
    \ file-name 0 string-length)) string-length) \".\"))\n  (not (string-equal? (substring\
    \ file-name (string-length string->list (substring file-name (string-length string->list\
    \ (substring file-name 0 string-length)) string-length)) string-length) (string->list\
    \ (substring file-name (string-length string->list (substring file-name (string-length\
    \ string->list (substring file-name 0 string-length)) string-length)) string-length)))\n\
    \  (not (string-equal? (substring file-name (string-length string->list (substring\
    \ file-name (string-length string->list (substring file-name (string-length string->list\
    \ (substring file-name 0 string-length)) string-length)) string-length)) string-length)\
    \ (string->list (substring file-name (string-length string->list (substring file-name\
    \ (string-length string->list (substring file-name (string-length string->list\
    \ (substring file-name 0 string-length)) string-length)) string-length)) string-length))))\n\
    \  (string->list (substring file-name (string-length string->list (substring file-name\
    \ (string-length string->list (substring file-name (string-length string->list\
    \ (substring file-name 0 string-length)) string-length)) string-length)) string-length)))\n\
    \  (= (string-length string->list (substring file-name (string-length string->list\
    \ (substring file-name (string-length string->list (substring file-name (string-length\
    \ string->list (substring file-name 0 string-length)) string-length)) string-length",
  "  (let ((check (string->list (file-name-string file_name)))\n        (dot (substring\
    \ (first check) 0 (string-length check) 1)))\n    (and (= 3 (length (substring\
    \ first dot)))\n         (= (char-alphabetic (first dot))\n            (char-alphabetic\
    \ (second dot))))\n    (and (not (empty? dot))\n         (not (string->list (substring\
    \ first dot 1)))\n         (and (string-equal? (substring second dot \"txt\")\
    \ \"exe\")\n              (string-equal? (substring second dot \"exe\") \"dll\"\
    )))))\n", "  (cond\n    [(empty? file_name) 'No']\n    [(string-no-more-than-3\
    \ file_name) 'No']\n    [(string-contains-one-dot file_name) 'No']\n    [(substring\
    \ (substring-before-dot file_name) 0 1) (string-valid-file-name (substring (substring-after-dot\
    \ file_name) 1 4))]\n    [else 'Yes']))", "  (cond [(number? (string-length file_name))\
    \ (error \"File name should be exactly three digits ('0'-'9')\")]\n        [(string-contains\
    \ \".\" (substring file_name 0 4)) (error \"File name should contain exactly one\
    \ dot '.'\")]\n        [(substring file_name 0 1) (string-match #rx[a-z] \"a\"\
    \ file_name) (error \"File name should start with a latin alphapet letter\")]\n\
    \        [(substring file_name 0 (string-length file_name-1)) #rx(\\.|txt|exe|dll)\
    \ (error \"File name should end with one of these extensions: ['txt', 'exe', 'dll']\"\
    )]\n        [else true]))\n", "  (let* ((file_name_part (substring file_name 0\
    \ (string-length file_name)))\n         (dot (file-name (file-name file_name)))\n\
    \         (dots (number->string (file-name (file-name file_name))))\n        \
    \ (dot (file-name (substring dot 0 (string-length dot))))\n         (dot (file-name\
    \ (substring dot 1 (string-length dot))))\n         (dot (file-name (substring\
    \ dot 2 (string-length dot))))\n         (dots (number->string (substring dot\
    \ 0 (string-length dot))))\n         (dots (number->string (substring dot 1 (string-length\
    \ dot))))\n         (dots (number->string (substring dot 2 (string-length dot))))\n\
    \         (letters (string->list \"abcdefghijklmnopqrstuvwxyz\"))\n         (characters\
    \ (string->list \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM\"))\n \
    \        (all_valid (and (= (string-length file_name) 3) (= (string-length dot)\
    \ 1) (= (string-length dot) 3) (= (string-length dot) 4) \n                  \
    \    (= (string-length dot) 5) (= (string-length dot) 6) (= (string-length dot)\
    \ 7) (= (string-length dot) 8) \n                      (= (string-length dot)\
    \ 9) (= (string-length dot) 10) (= (string-length dot) 11) (= (string-length dot)\
    \ 12) \n                      (= (string-length dot) 13) (= (string-length dot)\
    \ 14) (= (string-length dot) 15) (= (string-length dot) 16) \n               \
    \       (= (string-length dot) 17) (= (string-length dot) 18) (= (string-length\
    \ dot) 19) (= (string-length dot) 20) \n                      (= (string-length\
    \ dot) 21) (= (string-length dot) 22) (= (string-length dot) 23) (= (string-length\
    \ dot) 24) \n                      (= (string-length dot) 25) (= (string-length\
    \ dot) 26) (= (string-length dot) 27) (= (string-length dot) 28) \n          \
    \            (= (string-length dot) 29) (= (string-length dot) 30) (= (string-length\
    \ dot) 31) (= (string-length dot) 32) \n                      (= (string-length\
    \ dot) 33) (= (string-length dot) 34) (= (string-length dot) 35) (= (string-length\
    \ dot) 36) \n                      (= (string-length dot", "  (cond\n    [(string-length\
    \ file_name < 5) 'No]\n    [(and (string->char (substring file_name 0 2)) (string->char\
    \ (substring file_name 0 2)) (string->char (substring file_name 0 1)) (string->char\
    \ (substring file_name 0 4))) (= 'yes)]\n    [(= 'yes) (= 'No)]))\n", "  (let\n\
    \      ([file-name file_name]\n        [dot (file-name (file-name file_name) 2)])\n\
    \    (cond\n      [(null? dot) 'No']\n      [(string? (substring (substring file-name\
    \ 0 (string-length file-name) 2) dot))\n       (cond\n         [(string=? (substring\
    \ (substring file-name 0 (string-length file-name) 2) dot) \"exe\")\n        \
    \  'Yes']\n         [(string=? (substring (substring file-name 0 (string-length\
    \ file-name) 2) dot) \"dll\")\n          'Yes']\n         [else 'No'])]\n    \
    \  [else 'No'])))\n", "  (let* ((count (length (string->list file_name)))\n  \
    \       (check (string-match (string-append \".\" file_name) '((\"txt\" . \"txt\"\
    ) \n                                        (\"exe\" . \"exe\") \n           \
    \                             (\"dll\" . \"dll\"))))\n         (valid (or (= (modulo\
    \ count 3) 1)\n                    (= (string-length file_name) 3)\n         \
    \           (or (string=? (string->list (substring file_name 0 2))\n         \
    \                        '((\"a\" . \"z\") \n                                \
    \   (\"A\" . \"Z\"))\n                        (string=? (substring file_name 0\
    \ 1) '((\"a\" . \"z\") \n                                                    \
    \ (\"A\" . \"Z\")))))))\n    (cond\n      ((and check valid) #t)\n      (else\
    \ 'No))))\n", "  (cond\n    [(string-chars-length file_name) > 3 \"Error: Too\
    \ long file name\"]\n    [(equal? (substring file_name 0 2) \".\") \"Error: No\
    \ dot\"]\n    [(not= (substring file_name 0 1) \"a\" \"Z\" \"a\" \"Z\") \"Error:\
    \ File name should start with a latin alphapet letter\"]\n    [(equal? (substring\
    \ file_name 1 3) \"exe\" \"dll\" \"exe\" \"dll\" \"txt\" \"exe\" \"dll\") \"Error:\
    \ File name should contain exactly one dot 'dot'\"]\n    [else (symbol->string?\
    \ (substring file_name 3 file_name)) \"Error: File name should end with latin\
    \ alphapet letter, dot or text\"]\n  )\n)\n", "  (cond\n    [(equal? file_name\
    \ '')\n     'No']\n    [(number? (string->number file_name))\n     'No']\n   \
    \ [(string->char (string->number file_name) ?x ?y)\n     (and (= (string->substring\
    \ file_name (- 3 0) ?x) ?a)\n          (= (string->substring file_name (- 3 0)\
    \ ?y) ?z)\n          (= (string->substring file_name (- 2 0) ?x) ?a)\n       \
    \   (= (string->substring file_name (- 2 0) ?y) ?z)\n          (= (string->substring\
    \ file_name (- 1 0) ?x) ?a)\n          (= (string->substring file_name (- 1 0)\
    \ ?y) ?z)\n          (= (string->substring file_name (- 0 0) ?x) ?a)\n       \
    \   (= (string->substring file_name (- 0 0) ?y) ?z)))]\n    [else\n     'Yes']))\n",
  "  (cond\n    [(empty? file_name) 'No]\n    [(equal? (string-length file_name) 3)\
    \ 'No]\n    [(equal? (substring file_name 0 (string-length file_name-2 file_name))\
    \ '..)\n     'No]\n    [(equal? (substring file_name 0 (string-length file_name-2\
    \ file_name)) '..)\n     'No]\n    [(let* ((letter (string->char (substring file_name\
    \ 0 (string-length file_name-2 file_name))))\n           (latin_alphabet (list\
    \ 'a b 'c d 'e f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p\n                             \
    \      'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n      (equal? (char->integer (char-code\
    \ letter)) \n              (max (map (lambda (letter) (char->integer (char-code\
    \ letter))) latin_alphabet))\n     'No]\n    [(equal? (substring file_name 0 (string-length\
    \ file_name-2 file_name)) '..)\n     'No]\n    [(let* ((letter (string->char (substring\
    \ file_name 0 (string-length file_name-2 file_name))))\n           (latin_alphabet\
    \ (list 'a b 'c d 'e f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p\n                       \
    \            'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n      (equal? (char->integer (char-code\
    \ letter)) \n              (max (map (lambda (letter) (char->integer (char-code\
    \ letter))) latin_alphabet))\n     'No]\n    [(equal? (substring file_name 0 (string-length\
    \ file_name-2 file_name)) '..)\n     'No]\n    [(let* ((letter (string->char (substring\
    \ file_name 0 (string-length file_name-2 file_name))))\n           (latin_alphabet\
    \ (list 'a b 'c d 'e f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p\n                       \
    \            'q 'r 's 't 'u 'v 'w 'x 'y 'z)))\n      (equal? (char->integer (char-code\
    \ letter)) \n              (max (map (lambda (letter) (char->integer (char-code\
    \ letter))) latin_alphabet))\n     'No]\n    [(equal? (substring file_name 0 (string-length\
    \ file_name-2 file_name)) '..", "  (let ([num_digits (string-length (substring\
    \ file_name 0 (string-length file_name)))])\n    (if (= num_digits 3)\n      \
    \  (if (not (string-equal? (substring file_name 0 3) \"\"))\n            (if (not\
    \ (string-equal? (substring file_name 0 3) \"..\"))\n                (if (and\
    \ (char? (substring file_name 0 (string-length file_name)))\n                \
    \        (string-equal? (substring file_name 0 1) #\\a)\n                    \
    \    (= (substring file_name 0 1) #\\a))\n                    (if (not (string-equal?\
    \ (substring file_name 0 (string-length file_name)) \"txt\"))\n              \
    \          (if (not (string-equal? (substring file_name 0 (string-length file_name))\
    \ \"exe\"))\n                            (if (not (string-equal? (substring file_name\
    \ 0 (string-length file_name)) \"dll\"))\n                                (if\
    \ (not (string-equal? (substring file_name 0 3) \"exe\"))\n                  \
    \                  (if (not (string-equal? (substring file_name 0 3) \"dll\"))\n\
    \                                        (if (not (string-equal? (substring file_name\
    \ 0 2) \"exe\"))\n                                            (if (not (string-equal?\
    \ (substring file_name 0 2) \"dll\"))\n                                      \
    \          (if (not (string-equal? (substring file_name 0 3) \"exe\"))\n     \
    \                                               (if (not (string-equal? (substring\
    \ file_name 0 3) \"dll\"))\n                                                 \
    \       (if (not (string-equal? (substring file_name 0 1) \"exe\"))\n        \
    \                                                    (if (not (string-equal? (substring\
    \ file_name 0 1) \"dll\"))\n                                                 \
    \               (if (not (string-equal? (substring file_name 0 (string-length\
    \ file_name)) \"exe\"))\n                                                    \
    \                (if (not (string-equal? (substring file_name 0 (string-length\
    \ file_name)) \"dll\"))\n                                                    \
    \                    (if (not (string-equal? (substring file_name 0 (string-length\
    \ file_name)) \"exe\"))\n                                                    \
    \                        (if (not (string-equal? (substring file_name 0 (string-length\
    \ file_name)) \"dll\"))\n                                                    \
    \                            (if (not (string-equal? (substring file_name 0 (string-length\
    \ file_name)) \"exe\"))\n                                                    \
    \                                (if (not (string-equal? (substring file_name\
    \ 0 (string-length file_name)) \"dll\"))\n                                   \
    \                                                     (if (not (string-equal?\
    \ (substring file_name 0 (string-length file_name)) \"exe\"))\n              \
    \                                                                            \
    \  (if (not (string-equal? (substring file_name 0 (string-length file_name)) \"\
    dll\"))\n                                                                    \
    \                            (if (not (string-equal? (substring file_name 0 (string-length\
    \ file_name)) \"exe\"))\n                                                    \
    \                                                (if (not (string-equal? (substring\
    \ file_", "  (cond\n    [(empty? file_name) 'No']\n    [(>= (length file_name)\
    \ 3) 'No']\n    [(string? (substring file_name 0 (char-code (first file_name))))\n\
    \     (and (substring file_name 0 (char-code (first file_name))) (. (substring\
    \ file_name 1 (char-code (first file_name)))) (string? (substring file_name 2\
    \ (char-code (first file_name))))\n       'No']\n    [(or (char? (substring file_name\
    \ 0 (char-code (first file_name))))\n        (or (char? (substring file_name 1\
    \ (char-code (first file_name))))\n            (or (char? (substring file_name\
    \ 2 (char-code (first file_name))))\n                (and (substring file_name\
    \ 0 (char-code (first file_name))) (. (substring file_name 1 (char-code (first\
    \ file_name)))) (string? (substring file_name 2 (char-code (first file_name))))\n\
    \                    'Yes'))]\n    [else (file_name_check (substring file_name\
    \ 0 (char-code (first file_name))))])))\n", "  (let\n    ((valid_name 'No)\n \
    \    (digits (regex-match-all #\"\\d\" file_name))\n     (file_name_without_dots\
    \ (substring-before file_name \".\"))\n     (file_name_without_dots_letters (characters-before\
    \ (string->list file_name_without_dots)))\n     (is_valid_name_condition\n   \
    \   (and \n        (not (= (length file_name) 9))\n        (string=? (substring\
    \ file_name 0 1) \"..\")\n        (not (null? digits))\n        (not (null? file_name_without_dots))\n\
    \        (string=? (substring file_name_without_dots 0 1) (substring file_name_without_dots_letters\
    \ 0 1))\n        (string=? (substring file_name_without_dots 0 1) \".\"))))\n\
    \    (if (not is_valid_name_condition)\n      valid_name\n      (set! valid_name\
    \ (equal? 'Yes is_valid_name_condition))))\n", "  (and (string-empty? file_name)\n\
    \       (string-match? #regex \".[a-Z][a-Z]\" file_name)\n       (string-match?\
    \ #regex \"^[^\\.]\" file_name)\n       (string-match? #regex \"[a-Z][^\\.]\"\
    \ file_name)\n       (string-match? #regex \"[^\\.]\\.[a-Z]\" file_name)\n   \
    \    (string-match? #regex \"[^\\.]\\.[a-Z][a-Z]\" file_name)\n       (string-match?\
    \ #regex \"[a-Z][^\\.]\\.[a-Z]\" file_name)\n       (string-match? #regex \"[^\\\
    .]\\.[^\\.]\\.[a-Z]\" file_name)\n       (string-match? #regex \"[^\\.]\\.[^\\\
    .]\\.[a-Z][a-Z]\" file_name)\n       (string-match? #regex \"[a-Z][^\\.]\\.[^\\\
    .]\\.[a-Z]\" file_name)\n       (string-match? #regex \"[^\\.]\\.[^\\.]\\.[^\\\
    .]\\.[a-Z][a-Z]\" file_name)\n       (string-match? #regex \"[^\\.]\\.[^\\.]\\\
    .[^\\.]\\.[^\\.]\\.[a-Z][a-Z]\" file_name)\n       (string-match? #regex \"[a-Z][^\\\
    .]\\.[^\\.]\\.[^\\.]\\.[^\\.]\\.[a-Z][a-Z]\" file_name)\n       (string-match?\
    \ #regex \"[^\\.]\\.[^\\.]\\.[^\\.]\\.[^\\.]\\.[^\\.]\\.[^\\.]\\.[a-Z][a-Z]\"\
    \ file_name)\n       (string-match? #regex \"[^\\.]\\.[^\\.]\\.[^\\.]\\.[^\\.]\\\
    .[^\\.]\\.[^\\.]\\.[^\\.]\\.[^\\.]\\.[a-Z][a-Z]\" file_name)))", "  (let ([file_name-length\
    \ string-length (substring file_name 0 2)])\n    (if (= file_name-length 3)\n\
    \        (string-equal? (substring file_name 0 1) '0')\n        (string-equal?\
    \ (substring file_name 0 1) '9')\n        (string-equal? (substring file_name\
    \ 0 1) 'a')\n        (string-equal? (substring file_name 0 1) 'z')\n        (string-equal?\
    \ (substring file_name 0 1) 'A')\n        (string-equal? (substring file_name\
    \ 0 1) 'Z')\n        (string-equal? (substring file_name 0 1) '.')\n        (if\
    \ (equal? (substring file_name 0 1) '-') (file_name_check (substring file_name\
    \ 0 2))\n            (if (or (string? (substring file_name 0 2)) (equal? (substring\
    \ file_name 0 2) \".\"))\n                (if (or (string? (substring file_name\
    \ 0 1)) (equal? (substring file_name 0 1) \".\"))\n                    (if (or\
    \ (string? (substring file_name 0 0)) (string? (substring file_name 0 1))\n  \
    \                        (string? (substring file_name 0 1)) (string? (substring\
    \ file_name 0 2)))\n                        (if (or (string? (substring file_name\
    \ 0 0)) (string? (substring file_name 0 1))\n                              (string?\
    \ (substring file_name 0 1)) (string? (substring file_name 0 2)))\n          \
    \                  (if (or (string? (substring file_name 0 0)) (string? (substring\
    \ file_name 0 1))\n                                  (string? (substring file_name\
    \ 0 1)) (string? (substring file_name 0 2)))\n                               \
    \ (if (or (string? (substring file_name 0 0)) (string? (substring file_name 0\
    \ 1))\n                                      (string? (substring file_name 0 1))\
    \ (string? (substring file_name 0 2)))\n                                  (if\
    \ (or (string? (substring file_name 0 0)) (string? (substring file_name 0 1))\n\
    \                                          (string? (substring file_name 0 1))\
    \ (string? (substring file_name 0 2)))\n                                    (if\
    \ (or (string? (substring file_name 0 0)) (string? (substring file_name 0 1))\n\
    \                                          (string? (substring file_name 0 1))\
    \ (string? (substring file_name 0 2)))\n                                    (if\
    \ (or (string? (substring file_name 0 0)) (string? (substring file_name 0 1))\n\
    \                                          (string? (substring file_name 0 1))\
    \ (string? (substring file_name 0 2)))\n                                    (if\
    \ (or (string? (substring file_name 0 0)) (string? (substring file_name 0 1))\n\
    \                                          (string? (substring file_name 0 1))\
    \ (string? (substring file_name 0 2)))\n                                    (if\
    \ (or (string? (substring file_name 0 ", "  (cond\n    [(empty? file_name) 'No]\n\
    \    [(equal? (string-ref file_name 0) #\\0) 'No]\n    [(string-contains? file_name\
    \ #\\.) 'No]\n    [(string-ref-index? (substring (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) 0 \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) 0) 'No]\n    [(and (substring (substring file_name 0 (string-length (string-ref\
    \ file_name 0))) 0 (string->list \".\"))\n          (string->list \"exe\") (string->list\
    \ \"dll\"))\n    'Yes]\n    [else (error \"Invalid file's name\")]\n    )\n  )\n",
  "  (cond\n    [(< (string-length file_name) 3) 'No]\n    [(equal? (substring file_name\
    \ 0 1) '-) 'No]\n    [(equal? (substring file_name 0 1) 'a) (equal? (substring\
    \ file_name 1 2) 'z) (equal? (substring file_name 1 2) 'A) 'No]\n    [(equal?\
    \ (substring file_name 0 1) 'a) (equal? (substring file_name 1 2) 'z) (equal?\
    \ (substring file_name 1 2) 'A) (equal? (substring file_name 1 3) 'm) (equal?\
    \ (substring file_name 1 3) 'n) (equal? (substring file_name 1 3) 'T) 'No]\n \
    \   [else (equal? (substring file_name 0 1) 'a) (equal? (substring file_name 1\
    \ 2) 'z) (equal? (substring file_name 1 2) 'A) (equal? (substring file_name 1\
    \ 3) 'm) (equal? (substring file_name 1 3) 'n) (equal? (substring file_name 1\
    \ 3) 'T) (equal? (substring file_name 1 4) 'y) (equal? (substring file_name 1\
    \ 4) 'e) (equal? (substring file_name 1 4) 'l) (equal? (substring file_name 1\
    \ 4) 't) 'Yes]\n  ))\n", "  (cond ((number? file_name)\n         'No)\n      \
    \  ((string-length file_name) <=3) \n        ((string-equal file_name \".\")\n\
    \         'No)\n        ((string-equal (substring file_name 0 (string-length file_name-2))\
    \ 'txt')\n         'No)\n        ((string-equal (substring file_name 0 (string-length\
    \ file_name-2)) 'exe')\n         'No)\n        ((string-equal (substring file_name\
    \ 0 (string-length file_name-2)) 'dll')\n         'No)\n        ((and\n      \
    \     (and\n            (not (string-empty? file_name))\n            (not (string-equal?\
    \ file_name \".\"))\n            (and (not (string-equal? (substring file_name\
    \ 0 (string-length file_name-2)) 'a'))\n                 (not (string-equal? (substring\
    \ file_name 0 (string-length file_name-2)) 'b'))\n                 (not (string-equal?\
    \ (substring file_name 0 (string-length file_name-2)) 'c'))\n                \
    \ (not (string-equal? (substring file_name 0 (string-length file_name-2)) 'd'))\n\
    \                 (not (string-equal? (substring file_name 0 (string-length file_name-2))\
    \ 'e'))\n                 (not (string-equal? (substring file_name 0 (string-length\
    \ file_name-2)) 'f'))\n                 (not (string-equal? (substring file_name\
    \ 0 (string-length file_name-2)) 'g'))\n                 (not (string-equal? (substring\
    \ file_name 0 (string-length file_name-2)) 'h'))\n                 (not (string-equal?\
    \ (substring file_name 0 (string-length file_name-2)) 'i'))\n                \
    \ (not (string-equal? (substring file_name 0 (string-length file_name-2)) 'j'))\n\
    \                 (not (string-equal? (substring file_name 0 (string-length file_name-2))\
    \ 'k'))\n                 (not (string-equal? (substring file_name 0 (string-length\
    \ file_name-2)) 'l'))\n                 (not (string-equal? (substring file_name\
    \ 0 (string-length file_name-2)) 'm'))\n                 (not (string-equal? (substring\
    \ file_name 0 (string-length file_name-2)) 'n'))\n                 (not (string-equal?\
    \ (substring file_name 0 (string-length file_name-2)) 'o'))\n                \
    \ (not (string-equal? (substring file_name 0 (string-length file_name-2)) 'p'))\n\
    \                 (not (string-equal? (substring file_name 0 (string-length file_name-2))\
    \ 'q'))\n                 (not (string-equal? (substring file_name 0 (string-length\
    \ file_name-2)) 'r'))\n                 (", "  (cond ((empty? file_name) #t)\n\
    \        ((or (char-digit? file_name) (char-alphabetic? file_name))\n        \
    \ (if (or (char-digit? file_name) (char-alphabetic? file_name))\n           (begin\
    \ (display \"Invalid file name: ~S\" file_name) (newline) (display \"Valid file\
    \ names must contain only latin alphabetic or digits ('0'-'9')\") (newline) (newline)\
    \ (newline))\n           (begin (display \"Invalid file name: ~S\" file_name)\
    \ (newline) (display \"Valid file names must contain only latin alphabetic or\
    \ digits ('0'-'9') and end with txt or exe or dll\") (newline) (newline) (newline)))))\n\
    \        ((equal? (string-ref file_name 0) \".\") #t)\n        ((equal? (string-ref\
    \ file_name 0) \"..\")\n         (if (or (char-alphabetic? (string-ref file_name\
    \ 0)) (file_name-before-dot file_name))\n           (begin (display \"Invalid\
    \ file name: ~S\" file_name) (newline) (display \"The file name must not contain\
    \ two dots\") (newline) (newline) (newline))\n           (begin (display \"Invalid\
    \ file name: ~S\" file_name) (newline) (display \"The file must start with a latin\
    \ alphabetic letter\") (newline) (newline) (newline)))))\n        ((equal? (string-ref\
    \ file_name 0) \".txt\") #t)\n        ((equal? (string-ref file_name 0) \".exe\"\
    ) #t)\n        ((equal? (string-ref file_name 0) \".dll\") #t)\n        (#t (begin\n\
    \               (display \"Invalid file name: ~S\" file_name)\n              \
    \ (newline) (display \"The file must end with txt or exe or dll\") (newline) (newline)\
    \ (newline))))))\n", "  (cond\n    [(= (length file_name) 3)\n     (cond\n   \
    \    [(not (= (substring file_name 0 (char-index file_name #\\0)) #\\0) \n   \
    \       (substring file_name 0 (char-index file_name #\\0) \"a latin letter\"\
    ))]\n       [else 'No'])]\n    [(= (substring file_name 0 (char-index file_name\
    \ #\\0)) #\\0)\n     (cond\n       [(not (= (substring file_name 0 (char-index\
    \ file_name #\\0)) #\\0) \n          (substring file_name 0 (char-index file_name\
    \ #\\0) \"a latin letter\"))]\n       [else 'No'])]\n    [(= (substring file_name\
    \ 0 (char-index file_name #\\0)) #\\0)\n     (cond\n       [(not (= (substring\
    \ file_name 0 (char-index file_name #\\0)) #\\0) \n          (substring file_name\
    \ 0 (char-index file_name #\\0) \"a latin letter\"))]\n       [else 'No'])]\n\
    \    [(= (substring file_name 0 (char-index file_name #\\0)) #\\0)\n     (cond\n\
    \       [(not (= (substring file_name 0 (char-index file_name #\\0)) #\\0) \n\
    \          (substring file_name 0 (char-index file_name #\\0) \"a latin letter\"\
    ))]\n       [else 'No'])]\n    [(= (substring file_name 0 (char-index file_name\
    \ #\\0)) #\\0)\n     (cond\n       [(not (= (substring file_name 0 (char-index\
    \ file_name #\\0)) #\\0) \n          (substring file_name 0 (char-index file_name\
    \ #\\0) \"a latin letter\"))]\n       [else 'No'])]\n    [(= (substring file_name\
    \ 0 (char-index file_name #\\0)) #\\0)\n     (cond\n       [(not (= (substring\
    \ file_name 0 (char-index file_name #\\0)) #\\0) \n          (substring file_name\
    \ 0 (char-index file_name #\\0) \"a latin letter\"))]\n       [else 'No'])]\n\
    \    [(= (substring file_name 0 (char-index file_name #\\0)) #\\0)\n     (cond\n\
    \       [(not (= (substring file_name 0 (char-index file_name #\\0)) #\\0) \n\
    \          (substring file_name 0 (char-index file_name ", "  (let ((length (string-length\
    \ file_name)))\n    (cond \n      ((equal? length 3) 'Yes)\n      ((not (equal?\
    \ length 3) (= (mod length 3) 0)) 'No)\n      ((not (string-char-match (substring\
    \ file_name 0 2) '[a-zA-Z]))\n       'No)\n      ((string=? (substring file_name\
    \ 0 2) (substring \"exe\" \"dll\"))\n       'Yes)\n      ((string=? (substring\
    \ file_name 0 2) (substring \"txt\" \"exe\" \"dll\"))\n       'No)\n      (else\
    \ 'No))\n  ) \n  )\n", "  (let ([file_regexp\n         (string->regexp #rx\"^(0|[1-9][0-9]*)\\\
    .((?!txt|exe|dll)\\w+)$\")]\n        [file_regexp_status\n         (regexp-match\
    \ file_regexp file_name)])\n    (if (or (not (file_regexp_status))\n         \
    \   (<= (file-size file_name) 0))\n        'No\n        'Yes)))\n", "  (cond\n\
    \    [(empty? file_name)\n     'No']\n    [(number? (string-ref file_name 0))\n\
    \     'No']\n    [(string-length (substring (substring file_name 0 2) 0 1) (substring\
    \ file_name 0 1) 0 1) (substring file_name 0 1) 'No']\n    [(equal? (substring\
    \ file_name 0 1) '-') \n     (file_name_check (substring file_name 1 string_length\
    \ (substring file_name 0 1) 0 1))]\n    [else\n     (equal? (substring file_name\
    \ 0 1) '.')\n     (file_name_check (substring file_name 1 string_length (substring\
    \ file_name 0 1) 0 1))]))\n", "  (let* ((file_name (substring file_name 0 -1))\n\
    \         (dot_position (string-length file_name))\n         (dot_count (length\
    \ file_name))\n         (dot_char (char-code (substring file_name dot_position\
    \ -1)))\n         (dot_is_valid (or (= dot_char #\\.)\n                      \
    \    (= dot_count 1)\n                          (= (string-length file_name) 2)))\n\
    \         (dots_are_valid (and (= dot_count 2)\n                             \
    \  (not (equal? dot_char #\\.)))\n         (is_valid (not dot_is_valid))\n   \
    \      (is_valid (or (= dot_is_valid #t) dot_is_valid #f)\n                  \
    \  (is_valid dots_are_valid)))\n    (values (string=? file_name \"\\\\\\\\.\\\\\
    \"!)\n            (is_valid #t)))\n", "  (cond\n    [(= (length file_name) 5)\n\
    \     (if (< (string-length file_name) 3) \n         'No\n         (begin (display\
    \ \"Invalid file name\" file_name)\n               #f))\n     (begin (display\
    \ \"Invalid file name\" file_name)\n             #f)]\n    [(= (string-length\
    \ file_name) 3)\n     (begin (display \"Invalid file name\" file_name)\n     \
    \        #f)]\n    [(= (string-ref file_name 0) #\\a)\n     (begin (display \"\
    Invalid file name\" file_name)\n             #f)]\n    [(= (string-ref file_name\
    \ 0) #\\z)\n     (begin (display \"Invalid file name\" file_name)\n          \
    \   #f)]\n    [(= (string-ref file_name 0) #\\A)\n     (begin (display \"Invalid\
    \ file name\" file_name)\n             #f)]\n    [(= (string-ref file_name 0)\
    \ #\\Z)\n     (begin (display \"Invalid file name\" file_name)\n             #f)]\n\
    \    [else\n     (begin (display \"Invalid file name\" file_name)\n          \
    \   #f)]))\n", "  (cond\n    [(< 3 (string-length file_name)) 'No]\n    [(string-contains\
    \ '. (substring file_name 0 (string- (- (string-length file_name) 3) 0))) 'No]\n\
    \    [(< 2 (string-length (substring file_name 0 (string-length (substring file_name\
    \ 0 (string-length file_name) 1))))) 'No]\n    [(> (string- (substring file_name\
    \ 0 (string-length (substring file_name 0 (string-length file_name) 1)))) 'A'-'Z')\
    \ 'No]\n    [(< (string- (substring file_name 0 (string-length (substring file_name\
    \ 0 (string-length file_name) 1)))) 'a') 'No]\n    [else (else 'Yes))))\n", " \
    \ (cond\n    [(empty? file_name) 'No']\n    [(length? (string-length file_name))\
    \ 'No']\n    [(= 3 (length (string-length file_name))) 'No']\n    [(string-ref\n\
    \     (substring file_name 0 2)\n     '[a b c]) 'No']\n    [(substring file_name\
    \ 0 1) 'No']\n    [(string-ref\n     (substring file_name 0 (- (string-length\
    \ file_name) 1))\n     '[A B C]) 'No']\n    [(equal? (substring file_name 0 1)\n\
    \             'a') 'No']\n    [(equal? (substring file_name 0 1)\n           \
    \  'b') 'No']\n    [(equal? (substring file_name 0 1)\n             'c') 'No']\n\
    \    [(equal? (substring file_name 0 (- (string-length file_name) 1))\n      \
    \       'A') 'No']\n    [(equal? (substring file_name 0 (- (string-length file_name)\
    \ 1))\n             'B') 'No']\n    [(equal? (substring file_name 0 (- (string-length\
    \ file_name) 1))\n             'C') 'No']\n    [(equal? (string-ref file_name\
    \ (length (string-length file_name) - 1) '[!-~])\n             '.') 'No']\n  \
    \  [(equal? (substring file_name 0 (- (string-length file_name) 2)) 'txt') 'No']\n\
    \    [(equal? (substring file_name 0 (- (string-length file_name) 2)) 'exe') 'No']\n\
    \    [(equal? (substring file_name 0 (- (string-length file_name) 2)) 'dll') 'No']\n\
    \    [else 'Yes'])\n)\n</code>\n<|/ q tags=racket,scheme dscore=3 |>\n<| c |>\n\
    You might want to read this: http://stackoverflow.com/questions/3299395/how-do-you-check-if-a-string-is-a-valid-filename-in-racket\n\
    <|/ c |>\n<| a dscore=2 |>\nYour problem is in this part:\n<code>\n[else (file_name_check\
    \ file_name)])\n</code>\nThis creates a list of the function file_name_check,\
    \ and calls it with an argument.  If you just want to evaluate the function, you\
    \ need a dot:\n<code>\n[else (file_name_check file_name)])\n</code>\n<|/ a tags=racket,scheme\
    \ |>\n<| c |>\nAhhh...  Thank you!  That makes a lot of sense and now my code\
    \ works!  Thanks again!\n<|/ c |>\n<| a |>\nThis code can help you. I will try ",
  "  (cond\n    ((= (file-char-length (string-ref file_name 0 0)) 3) \"No\") \n  \
    \  ((= (file-char-length (string-ref file_name 0 1)) 1) \"No\") \n    ((not (file-char-at\
    \ (file-name file_name) 0 (file-char-length (string-ref file_name 0 0))))\n  \
    \   (= \"No\") \n    ((not (and (char= (file-char-at (file-name file_name) 0 (file-char-length\
    \ (string-ref file_name 0 0))) 'a'))\n       (= (file-char-at (file-name file_name)\
    \ 0 (file-char-length (string-ref file_name 0 0))) 'A'))\n     (= \"No\")\n  \
    \  ((string-length (file-name file_name)) (= (file-char-length (string-ref file_name\
    \ 0 0)) 3))\n    ((string-index file_name \".\") (= (file-char-length (string-ref\
    \ file_name 0 0)) 1))\n    ((or (string-ref file_name 0 (file-char-length (string-ref\
    \ file_name 0 0))) \"\") \n       ((= (file-char-at (file-name file_name) 0 (file-char-length\
    \ (string-ref file_name 0 0))) 'a') \n       ((= (file-char-at (file-name file_name)\
    \ 0 (file-char-length (string-ref file_name 0 0))) 'A'))\n       (= \"No\")\n\
    \     (= \"No\")))\n    ", "  (cond\n    [(< (string-length file_name) 3)\n  \
    \   false]\n    [(string=? (substring file_name 0 1) \"0\")\n     (cond\n    \
    \   [(string=? (substring file_name 0 2) \"00\")\n        (cond\n         [(string=?\
    \ (substring file_name 0 3) \"000\")\n          (cond\n            [(string=?\
    \ (substring file_name 0 4) \"0000\")\n             (cond\n               [(string=?\
    \ (substring file_name 0 5) \"00000\")\n                (cond\n              \
    \    [(string=? (substring file_name 0 6) \"000000\")\n                   (cond\n\
    \                    [(string=? (substring file_name 0 7) \"0000000\")\n     \
    \                (cond\n                       [(string=? (substring file_name\
    \ 0 8) \"00000000\")\n                        (cond\n                        \
    \ [(string=? (substring file_name 0 9) \"000000000\")\n                      \
    \     (cond\n                            [(string=? (substring file_name 0 10)\
    \ \"0000000000\")\n                             (cond\n                      \
    \        [(string=? (substring file_name 0 11) \"00000000000\")\n            \
    \                   (cond\n                                [(string=? (substring\
    \ file_name 0 12) \"000000000000\")\n                                 (cond\n\
    \                                  [(string=? (substring file_name 0 13) \"0000000000000\"\
    )\n                                   (cond\n                                \
    \    [(string=? (substring file_name 0 14) \"00000000000000\")\n             \
    \                        (cond\n                                       [(string=?\
    \ (substring file_name 0 15) \"000000000000000\")\n                          \
    \              (cond\n                                          [(string=? (substring\
    \ file_name 0 16) \"0000000000000000\")\n                                    \
    \       (cond\n                                             [(string=? (substring\
    \ file_name 0 17) \"00000000000000000\")\n                                   \
    \            (cond\n                                                [(string=?\
    \ (substring file_name 0 18) \"000000000000000000\")\n                       \
    \                          (cond\n                                           \
    \       [(string=? (substring file_name 0 19) \"0000000000000000000\")\n     \
    \                                              (cond\n                       \
    \                              [(string=? (substring file_name 0 20) \"00000000000000000000\"\
    )\n                                                       (cond\n            \
    \                                           [(string=? (substring file_name 0\
    \ 21) \"000000000000000000000\")\n                                           \
    \            (cond\n                                                       [(string=?\
    \ (substring file_name 0 22) \"0000000000000000000000\")\n                   \
    \                                    \"Yes\"]\n                              \
    \                         [\"No\" \"File's name should only have up to 7 digits\"\
    ]\n                                                       (file_name_check file_name)))])])])])])])])])])\n\
    \          [else \"No\"] (file_name_check file_name))\n        [else \"No\"] (file_name_check\
    \ file_name))\n      [(string=? (substring file_name 0 2) \"", "  (cond\n    [(<\
    \ (string-length file_name) 3) 'No]\n    [(< (string-length file_name) 6) 'No]\n\
    \    [(string-char-at (string-ref file_name 0) #\\[0-9]) (if (< (string-length\
    \ file_name) 3)\n                                               'Yes\n       \
    \                                        'No)]\n    [(string-char-at (string-ref\
    \ file_name 0) #\\[a-z]) (if (< (string-length file_name) 3)\n               \
    \                                'Yes\n                                      \
    \         'No)]\n    [(string-char-at (string-ref file_name 0) #\\[A-Z]) (if (<\
    \ (string-length file_name) 3)\n                                             \
    \  'Yes\n                                               'No)]\n    [(string-char-at\
    \ (string-ref file_name 0) #\\[A-Za-z]) (if (< (string-length file_name) 3)\n\
    \                                               'Yes\n                       \
    \                        'No)]\n    [(string-char-at (string-ref file_name 0)\
    \ #\\.) (if (< (string-length file_name) 3)\n                                \
    \               'Yes\n                                               'No)]\n \
    \   [(symbol=? (string-ref file_name 0) \".\") 'No]\n    [(string-char-at (string-ref\
    \ file_name 0) #\\.) (symbol=? (string-ref file_name 0) \".\")]\n    [else (symbol=?\
    \ (string-ref file_name 0) \".\")]\n  )\n)\n", "  (cond\n    [(empty? file_name)\
    \ #t]\n    [(< (string-length (substring file_name 0 (string-length file_name))))\
    \ #t]\n    [(equal? (substring file_name 0 (string-length file_name)) \".\") #t]\n\
    \    [(and (char->integer (substring file_name 0 (string-length file_name))) (string-contains-one-of\
    \ 'a' (substring file_name 0 (string-length file_name)))) (cond \n      [(string=?\
    \ (substring file_name 0 (string-length file_name)) \"exe\") #t]\n      [(string=?\
    \ (substring file_name 0 (string-length file_name)) \"dll\") #t]\n      [(string=?\
    \ (substring file_name 0 (string-length file_name)) \"txt\") #t]\n      [else\
    \ (cond \n        [(string=? (substring file_name 0 (string-length file_name))\
    \ \"exe\") (string-contains-one-of 'a' (substring file_name 0 (string-length file_name)))]\n\
    \        [(string=? (substring file_name 0 (string-length file_name)) \"dll\"\
    ) (string-contains-one-of 'a' (substring file_name 0 (string-length file_name)))]\n\
    \        [(string=? (substring file_name 0 (string-length file_name)) \"txt\"\
    ) (string-contains-one-of 'a' (substring file_name 0 (string-length file_name)))]\n\
    \        [else (cond \n          [(string=? (substring file_name 0 (string-length\
    \ file_name)) \"exe\") (string-contains-one-of 'A' (substring file_name 0 (string-length\
    \ file_name)))]\n          [(string=? (substring file_name 0 (string-length file_name))\
    \ \"dll\") (string-contains-one-of 'A' (substring file_name 0 (string-length file_name)))]\n\
    \          [(string=? (substring file_name 0 (string-length file_name)) \"txt\"\
    ) (string-contains-one-of 'A' (substring file_name 0 (string-length file_name)))]\n\
    \          [else (cond \n            [(string=? (substring file_name 0 (string-length\
    \ file_name)) \"exe\") (string-contains-one-of '0' (substring file_name 0 (string-length\
    \ file_name)))]\n            [(string=? (substring file_name 0 (string-length\
    \ file_name)) \"dll\") (string-contains-one-of '0' (substring file_name 0 (string-length\
    \ file_name)))]\n            [(string=? (substring file_name 0 (string-length\
    \ file_name)) \"txt\") (string-contains-one-of '0' (substring file_name 0 (string-length\
    \ file_name)))]\n            [else #f)])])]))", "  (cond\n    [(>= (file-length\
    \ file_name) 3) 'No]\n    [(substring? (file-name 0 0) #\\. #f) 'No]\n    [(substring?\
    \ (file-name 0 1) #\\a) #f \n     (cond\n\t[(substring? (file-name 0 2) #\\0 #f)\
    \ 'No]\n\t[(substring? (file-name 0 2) #\\1 #f) 'No]\n\t[(substring? (file-name\
    \ 0 2) #\\2 #f) 'No]\n\t[(substring? (file-name 0 2) #\\3 #f) 'No]\n\t[(substring?\
    \ (file-name 0 2) #\\4 #f) 'No]\n\t[(substring? (file-name 0 2) #\\5 #f) 'No]\n\
    \t[(substring? (file-name 0 2) #\\6 #f) 'No]\n\t[(substring? (file-name 0 2) #\\\
    7 #f) 'No]\n\t[(substring? (file-name 0 2) #\\8 #f) 'No]\n\t[(substring? (file-name\
    \ 0 2) #\\9 #f) 'No]\n\t[(substring? (file-name 0 2) #\\A #f) 'No]\n\t[(substring?\
    \ (file-name 0 2) #\\B #f) 'No]\n\t[(substring? (file-name 0 2) #\\C #f) 'No]\n\
    \t[(substring? (file-name 0 2) #\\D #f) 'No]\n\t[(substring? (file-name 0 2) #\\\
    E #f) 'No]\n\t[(substring? (file-name 0 2) #\\F #f) 'No]\n\t[(substring? (file-name\
    \ 0 2) #\\0 #f) 'No]\n\t[(substring? (file-name 0 2) #\\1 #f) 'No]\n\t[(substring?\
    \ (file-name 0 2) #\\2 #f) 'No]\n\t[(substring? (file-name 0 2) #\\3 #f) 'No]\n\
    \t[(substring? (file-name 0 2) #\\4 #f) 'No]\n\t[(substring? (file-name 0 2) #\\\
    5 #f) 'No]\n\t[(substring? (file-name 0 2) #\\6 #f) 'No]\n\t[(substring? (file-name\
    \ 0 2) #\\7 #f) 'No]\n\t[(substring? (file-name 0 2) #\\8 #f) 'No]\n\t[(substring?\
    \ (file-name 0 2) #\\9 #f) 'No]\n\t[(substring? (file-name 0 2) #\\A #f) 'No]\n\
    \t[(substring", "  (cond\n    [(< 3 (string-length file_name)) (string-append\
    \ \"No - too many digits in the file name\")\n                               \
    \             (string-append \"No . in the file name\")\n                    \
    \                        (string->char-before-last\n                         \
    \                     (substring file_name\n                                 \
    \                         0 3)))\n     (string->char-before-last\n      (substring\
    \ file_name 0 3))\n     ((string-equal? file_name\n                    \".\")\n\
    \     (string->char-before-last\n      (substring file_name 1 1)))\n     ((string->char-before-last\n\
    \      (substring file_name 1 1))\n     (string->char-before-last\n      (substring\
    \ file_name 2 1))\n     ((string-equal? file_name\n                    \"txt\"\
    )\n     (string->char-before-last\n      (substring file_name 3 1)))\n     ((string-equal?\
    \ file_name\n                    \"exe\")\n     (string->char-before-last\n  \
    \    (substring file_name 3 1)))\n     ((string-equal? file_name\n           \
    \         \"dll\")\n     (string->char-before-last\n      (substring file_name\
    \ 3 1)))\n     ((or (equal? file_name\n                (substring file_name 0\
    \ 1))\n        (equal? file_name\n                (substring file_name 1 1)))\n\
    \     (string->char-before-last\n      (substring file_name 0 1))\n     (string->char-before-last\n\
    \      (substring file_name 1 1))\n     ((string-equal? file_name\n          \
    \          (substring file_name 1 1)))\n     ((string-equal? file_name\n     \
    \               (substring file_name 2 1)))\n     ((string-equal? file_name\n\
    \                    (substring file_name 3 1)))\n     ((equal? file_name\n  \
    \            (substring file_name 0 2))\n     (string->char-before-last\n    \
    \  (substring file_name 0 2)))\n     ((string-equal? file_name\n             \
    \       (substring file_name 0 2))\n     (string->char-before-last\n      (substring\
    \ file_name 1 2)))\n     ((string-equal? file_name\n                    (substring\
    \ file_name 1 2))\n     (string->char-before-last\n      (substring file_name\
    \ 2 2))\n     ((string-equal? file_name\n                    (substring file_name\
    \ 2 2)))\n     ((string-equal? file_name\n                    (substring file_name\
    \ 3 2)))\n     ((equal? file_name\n              (substring file_name 0 3))\n\
    \     (string->char-before-last\n      (substring file_name 0 3)))\n     ((string-equal?\
    \ file_name\n                    (substring file_name 0 3))\n     (string->char-before-last\n\
    \      (substring file_name 1 ", "  (let ([number-length (string-length (substring\
    \ file_name 0 (string-length (file-name file_name)))) ])\n    (and (= 3 number-length)\n\
    \         (= 1 (string-length (substring file_name 0 (string-length (file-name\
    \ file_name)))) ))\n    (let ([file-types (substring file_name 0 (string-length\
    \ (file-name file_name)))\n          [dot (substring file_name 1 (string-length\
    \ (file-name file_name)))]\n          [file-type (substring file-types (substring\
    \ file-types (string-length (file-name file_name)) 1))])\n      (and (= (file-type\
    \ 'exe) (file-type 'dll) (file-type 'txt) (file-type 'zip))\n           (string-length\
    \ (substring file-type 0 (string-length (file-type file-type)))) \n          \
    \ (= 1 dot) (= (file-type 'exe) (substring file-types (substring file-types (string-length\
    \ (file-name file_name)) 1)) )))))\n", "  (cond\n    [(and (<= (length file_name)\
    \ 3)\n          (and (char= (first file_name) '#\\0)\n               (not (char=\
    \ (first file_name) '#\\9))\n               (char= (first file_name) '#\\0))\n\
    \          (eqv? (substring (second file_name) 0 2) \".\"))\n     (return 'Yes)\n\
    \     (return 'No)\n     ])\n  )\n", "  (cond\n    [(empty? file_name)\n     \
    \ (write \"The file's name should not be empty\")\n      'No]\n    [(> (string-length\
    \ (substring file_name (position (first file_name) (file-length file_name)) 1))\
    \ 3)\n      (write \"The file's name should contain exactly three digits\")\n\
    \      'No]\n    [(or (string=? (substring file_name 0 (position (first file_name)\
    \ (file-length file_name))) (substring file_name (position (first file_name) (file-length\
    \ file_name))) (substring file_name (position (first file_name) (file-length file_name)))\
    \ (string=? (substring file_name 0 (string-length (substring file_name (position\
    \ (first file_name) (file-length file_name)) 2)) (substring file_name (position\
    \ (first file_name) (file-length file_name))) (substring file_name (position (first\
    \ file_name) (file-length file_name))))\n      (write \"The file's name should\
    \ contain one dot '.' and it should start with a latin alphapet letter\")\n  \
    \    'No]\n    [(string=? (substring file_name (position (first file_name) (file-length\
    \ file_name)) 1) '.')\n      (write \"The file's name should not end with a dot\"\
    )\n      'No]\n    [(or (string=? (substring file_name (position (first file_name)\
    \ (file-length file_name)) 1) (substring file_name (position (first file_name)\
    \ (file-length file_name))) (string=? (substring file_name (position (first file_name)\
    \ (file-length file_name)) 1) (substring file_name (position (first file_name)\
    \ (file-length file_name))) (string=? (substring file_name (position (first file_name)\
    \ (file-length file_name)) 1) (substring file_name (position (first file_name)\
    \ (file-length file_name))))\n      (write \"The file's name should not end with\
    \ two dots '.'\")\n      'No]\n    [(string=? (substring file_name (position (first\
    \ file_name) (file-length file_name)) 1) (substring file_name (position (first\
    \ file_name) (file-length file_name))) (substring file_name (position (first file_name)\
    \ (file-length file_name)))\n      (write \"The file's name should end with one\
    \ dot '.'\")\n      'Yes]))\n", "  (cond\n    [(string-length (string-ref file_name\
    \ 0 #\\.)) ; The file's name contains more than one dot.\n     (cond\n       [\n\
    \        (string=? (string-ref file_name 0 (string->list #\\.)) 'exe) ; A file's\
    \ name starts with 'exe'\n        'Yes\n       ]\n       [\n        (string=?\
    \ (string-ref file_name 0 (string->list #\\.)) 'dll)\n        'Yes\n       ]\n\
    \       [\n        (string=? (string-ref file_name 0 (string->list #\\.)) 'txt)\n\
    \        'Yes\n       ]\n       [else\n        'No\n       ])]\n    [else\n  \
    \   'No\n    ])\n  )\n", "  (let ((name_size (file-length file_name)))\n    (if\
    \ (= 3 name_size)\n        (char=? (first file_name)\n                  (first\
    \ '(0 1 2 3 4 5 6 7 8 9)))\n        (char=? (first file_name)\n              \
    \    (first '(a b c d e f g h i j k l m n o p q r s t u v w x y z)))\n       \
    \ (char=? (first file_name)\n                  (first '(a b c d e f g h i j k\
    \ l m n o p q r s t u v w x y z)))))\n", "  (cond\n    [(empty? file_name) 'No]\n\
    \    [(length (string->list file_name)) (+ 1 (file_name_check file_name))\n  \
    \   (if (>= (string-index file_name 0 (string->list (string-tail file_name)))\
    \ 0)\n         (if (char= (string-ref file_name 0 (string->list (string-tail file_name)))\
    \ '?)\n             (file_name_check file_name))))\n     (if (char= (string-ref\
    \ file_name 0 (string->list (string-tail file_name))) '?)\n         (file_name_check\
    \ file_name))]))\n", "  (cond ((empty? file_name) #f)\n        ((string-char-category?\
    \ file_name)\n         (cond ((not (string=? file_name \"txt\")) #f)\n       \
    \       ((not (string=? file_name \"exe\")) #f)\n              ((not (string=?\
    \ file_name \"dll\")) #f)\n              ((not (digit? file_name)) #f)\n     \
    \         ((not (string=? (substring file_name 0 (string-length file_name)) \"\
    .\")) #f)\n              ((not (string=? (substring file_name (+ 2 - (string-length\
    \ file_name)) (file-length-check file_name)) \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )) #f)\n              ((not (string=? (substring file_name (+ 2 - (string-length\
    \ file_name)) (file-length-check file_name)) \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\"\
    )) #f)\n              ((not (string=? (substring file_name (+ 2 - (string-length\
    \ file_name)) (file-length-check file_name)) \"1234567890.\")) #f)\n         \
    \     ((not (string=? (substring file_name (+ 2 - (string-length file_name)) (file-length-check\
    \ file_name)) \"1234567890.-\")) #f)\n              ((not (string=? (substring\
    \ file_name (+ 2 - (string-length file_name)) (file-length-check file_name)) \"\
    1234567890.-\")) #f)\n              ((not (string=? (substring file_name (+ 2\
    \ - (string-length file_name)) (file-length-check file_name)) \".-\")) #f)\n \
    \             ((not (string=? (substring file_name (+ 2 - (string-length file_name))\
    \ (file-length-check file_name)) \"-.\") #f)\n              ((not (string=? (substring\
    \ file_name (+ 2 - (string-length file_name)) (file-length-check file_name)) \"\
    -.\")) #f)\n              ((not (string=? (substring file_name (+ 2 - (string-length\
    \ file_name)) (file-length-check file_name)) \".-\")) #f)\n              ((not\
    \ (string=? (substring file_name (+ 2 - (string-length file_name)) (file-length-check\
    \ file_name)) \"-.\")) #f)\n              ((not (string=? (substring file_name\
    \ (+ 2 - (string-length file_name)) (file-length-check file_name)) \".-\")) #f)\n\
    \              ((not (string=? (substring file_name (+ 2 - (string-length file_name))\
    \ (file-length-check file_name)) \"-.\")) #f)\n              ((not (string=? (substring\
    \ file_name (+ 2 - (string-length file_name)) (file-length-check file_name)) \"\
    .-\")) #f)\n              ((not (string=? (substring file_", "  (let ((valid_name\
    \ (boolean-map file_name)))\n    (cond\n      [(empty? file_name)\n       (string->list\
    \ file_name)\n       'Yes\n       (string->list (substring file_name 0 (string-length\
    \ file_name) '()) (append '() string->list file_name))]\n      [(not (hash-has-key\
    \ valid_name (substring file_name 0 (string-length file_name) '())))\n       'No\n\
    \       (string->list (substring file_name 0 (string-length file_name) '()) (append\
    \ '() string->list file_name))]\n      [else\n       'No\n       'Yes\n      \
    \ (let ((name_part (substring file_name 0 (string-length file_name) '())))\n \
    \        (if (string->boolean (substring name_part 0 (string-length name_part)\
    \ '()))\n           (string->list (substring name_part 0 (string-length name_part)\
    \ '()) (append '() string->list name_part))\n           (cons name_part (file_name_check\
    \ (substring file_name 1 (string-length file_name) '())))]))])))\n", "  (cond\n\
    \    [(< (length file_name) 3)\n     (file_name-valid \"The file's name should\
    \ be 3 characters long.\")]\n    [(>= (length file_name) 3)\n     (file_name-valid\
    \ \"The file's name should be 3 characters long.\")]\n    [(= (file-char-type\
    \ file_name) 'alpha) (file_name-valid \"The file's name should start with a latin\
    \ alphapet.\")]\n    [(= (file-char-type file_name) 'alnum) (file_name-valid \"\
    The file's name should start with a latin alphapet.\")]\n    [(= (file-char-type\
    \ file_name) 'digit) (file_name-valid \"The file's name should not contain more\
    \ than 3 digits.\")]\n    [(= (file-char-type file_name) 'punc) (file_name-valid\
    \ \"The file's name should not contain more than one dot.\")]\n    [(string-equal\
    \ (substring-before file_name \".\") \"\")\n     (file_name-valid \"The file's\
    \ name should contain a dot.\")]\n    [(string-equal (substring-before file_name\
    \ \".\") \"..\")\n     (file_name-valid \"The file's name should not contain a\
    \ dot.\")]\n    [(string-equal (substring-before file_name \".\") \"..\") (file_name-valid\
    \ \"The file's name should contain the substring before a dot.\")]\n    [(equal?\
    \ (string-match \"^[a-zA-Z]+$\" (substring-before file_name \".\")) (true)\n \
    \    (file_name-valid \"The file's name should start with a latin alphapet.\"\
    )]\n    [(equal? (string-match \"^[a-zA-Z]+$\" (substring-before file_name \"\
    .\")) (true)\n     (file_name-valid \"The file's name should start with a latin\
    \ alphapet.\")]\n    [(= (string-length file_name) (file-length (file-name file_name)))\n\
    \     (file_name-valid \"The file's name should be no longer than the file's length.\"\
    )]\n    [(equal? (string-match \"^[a-zA-Z]\" file_name) (true)\n     (file_name-valid\
    \ \"The file's name should start with a latin alphapet.\")]\n    [(equal? (string-match\
    \ \"^[a-zA-Z]\" file_name) (true)\n     (file_name-valid \"The file's name should\
    \ start with a latin alphapet.\")]\n    [(= (string-length file_name) (file-length\
    \ (file-name file_name)))\n     (file_name-valid \"The file's name should be no\
    \ longer than the file's length.\")]\n    [(string-match (regexp \"\\.(txt|exe|dll)$\"\
    ) file_name)\n     (file_name", "  (cond\n    [(empty? file_name) 'No]\n    [(equal?\
    \ (string-length file_name) 3) 'No]\n    [(equal? (string-ref file_name 0 1) (char\
    \ 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 1) (char 97 101))\
    \ 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0)) (char\
    \ 97 101)) 'No]\n    [(equal? (string-ref file_name 0 1) (char 97 101)) 'No]\n\
    \    [(equal? (string-ref file_name 0 (string-length file_name-0)) (char 97 101))\
    \ 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0)) (char\
    \ 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 101)) 'No]\n    [(equal? (string-ref file_name 0 (string-length file_name-0))\
    \ (char 97 ", "  (let ([num (string-match \"^[1-9][0-9]*$\" (string->symbol file_name))])\n\
    \    (if (= num 0)\n        'No\n        (symbol->string file_name))))\n", " \
    \ (cond\n    [(<= 3 (string-length file_name)) (display \"Yes (file's name should\
    \ not contain more than three digits)\")\n    (string=? (substring (substring\
    \ file_name 0 2) \"\\\\.\") \".\") (display \"No (the file's name should not contain\
    \ one dot '.')\")\n    ((not (string=? (substring (substring file_name 0 1) \"\
    \\\\.\") \".\"))\n    (string=? (substring (substring file_name 0 1) \"-\") \"\
    a\")\n    (string=? (substring (substring file_name 0 1) \"-\") \"z\")\n    (string=?\
    \ (substring (substring file_name 0 1) \"-\") \"A\")\n    (string=? (substring\
    \ (substring file_name 0 1) \"-\") \"Z\")\n    (string=? (substring (substring\
    \ file_name 0 1) \"-\")\n              \"0\"\n              \"9\"))(display \"\
    No (the file's name should start with a latin alphapet letter)\")]\n    [else\
    \ (display \"No (the file's name contains more than one dot '.')\")]))\n", " \
    \ (cond\n    [(empty? file_name) #f]\n    [(equal? (count file_name) 0) #f]\n\
    \    [(equal? (count file_name) 1) #f]\n    [(equal? (string->char (substring\
    \ file_name 0 (- (string-length file_name) 1))) ?dot) #f]\n    [(equal? (string->char\
    \ (substring file_name 0 (- (string-length file_name) 2))) ?letter) #f]\n    [(equal?\
    \ (string->char (substring file_name 1 (- (string-length file_name) 2))) ?a) #t]\n\
    \    [(equal? (string->char (substring file_name 1 (- (string-length file_name)\
    \ 2))) ?z) #f]\n    [(equal? (string->char (substring file_name 1 (- (string-length\
    \ file_name) 1))) ?a) #f]\n    [(equal? (string->char (substring file_name 1 (-\
    \ (string-length file_name) 1))) ?z) #f]\n    [(equal? (string->char (substring\
    \ file_name 0 (- (string-length file_name) 1))) ?letter) #f]\n    [else (equal?\
    \ (substring file_name 0 3) \"00\") #t]))\n", "  (cond\n    [(string-length file_name)\
    \ > 3 #t]\n    [(string-match #\".\" (substring file_name 0 1)) #t]\n    [(string-match\
    \ #[a-z] [substring file_name 0 (string-length file_name) 1)]\n    [else\n   \
    \  (string-match #[a-z] [substring file_name 1 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 2 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 3 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 4 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 5 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 6 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 7 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 8 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 9 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 10 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 11 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 12 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 13 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 14 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 15 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 16 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 17 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 18 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 19 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 20 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 21 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 22 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 23 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 24 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 25 (string-length file_name) 1)]\n\
    \     (string-match #[a-z] [substring file_name 26 (string-", "  (cond\n    [(number?\
    \ (string-length file_name)) 'No]\n    [(equal? (substring file_name 0 (string-length\
    \ file_name)) \".\") 'No]\n    [(let* ((letters (string->list (string->string\
    \ (string->char (substring file_name 0 (string-length file_name)))) (lambda (c)\
    \ (string-char->int c)) '() '() (substring file_name 0 (string-length file_name)\
    \ . (string->list (string->string (string->char (substring file_name 0 (string-length\
    \ file_name)))) (lambda (c) (string-char->int c)) '() '())) (numbers (string->list\
    \ (string->string (string->char (substring file_name 0 (string-length file_name))))\
    \ (lambda (c) (string-char->int c)) '() '() (substring file_name 0 (string-length\
    \ file_name) . (string->list (string->string (string->char (substring file_name\
    \ 0 (string-length file_name)))) (lambda (c) (string-char->int c)) '() '())))\n\
    \       (and (>= (length (string->list letters #'length)) 3) (equal? (car (string->list\
    \ letters #'length)) '0) (equal? (cadr (string->list letters #'length)) '(#\\\
    a)) (or (equal? (cadr (string->list letters #'length)) '(#\\b) (equal? (cadr (string->list\
    \ letters #'length)) '(#\\f) (equal? (cadr (string->list letters #'length)) '(#\\\
    n) (equal? (cadr (string->list letters #'length)) '(#\\v) (equal? (cadr (string->list\
    \ letters #'length)) '(#\\a) (equal? (cadr (string->list letters #'length)) '(#\\\
    b) (equal? (cadr (string->list letters #'length)) '(#\\f) (equal? (cadr (string->list\
    \ letters #'length)) '(#\\n) (equal? (cadr (string->list letters #'length)) '(#\\\
    v) (equal? (cadr (string->list letters #'length)) '(#\\c) (equal? (cadr (string->list\
    \ letters #'length)) '(#\\d) (equal? (cadr (string->list letters #'length)) '(#\\\
    e) (equal? (cadr (string->list letters #'length)) '(#\\h) (equal? (cadr (string->list\
    \ letters #'length)) '(#\\i) (equal? (cad", "  (cond\n    [(string-length (string->string\
    \ file_name)) (begin\n      (cond\n        [(string-length (string->string file_name))\
    \ (begin\n          (cond\n            [(string-contains-substring file_name \"\
    .\") (begin\n              (cond\n                [(string->string  (string->string\
    \ (file->name file_name)) (begin 'Yes 'No))\n                 ((let ([fileName\
    \ (file->name file_name)])\n                   (string-equal? (string->string\
    \ (file->name file_name)) \"..\")\n                   (string-equal? (string->string\
    \ (file->name file_name)) \".\")\n                   (string-length (string->string\
    \ (file->name file_name)) > 3)\n                   (char->integer (char->string\
    \ (file->name file_name)) > '9')\n                   (string->string (file->name\
    \ file_name)))\n                 (begin 'Yes 'No))]\n                [else (begin\
    \ 'Yes 'No)])\n              [else (begin 'Yes 'No)])\n            [else (begin\
    \ 'Yes 'No)])\n          [else (begin 'Yes 'No)])\n        [else (begin 'Yes 'No)])\n\
    \      [else (begin 'Yes 'No)]\n    [else (begin 'Yes 'No)])\n  [else (begin 'Yes\
    \ 'No)])\n</code>\n<|/ a dscore=0 tags=racket,scheme,conditional-statements |>\n\
    <| c |>\nYour solution is working for the most part, except for the third condition\
    \ where it should only accept a file name that starts with a letter but does not\
    \ contain \".\" The second condition should be fine. Do you know what I am doing\
    \ wrong? I really appreciate your help, thank you.\n<|/ c |>\n<| c |>\nI modified\
    \ the answer to check for a '.' before the start of the file name.  I also added\
    \ a check for if the file name is empty.\n<|/ c |>\n<| c |>\nThank you very much\
    \ for your help. I appreciate your time very much.\n<|/ c |>\n<| a dscore=0 tags=racket,scheme,conditional-statements\
    \ |>\nHere is my solution:\n<code>", "  (cond\n    [(= (length file_name) 3) \"\
    Yes\"]\n    [(= \"..\" file_name)\n     \"No\"]\n    [(= (substring (substring\
    \ file_name 0 (length file_name-2)) 0 1)\n          \"a\" \n          \"z\")\n\
    \     (= \"Yes\" (substring (substring file_name 0 (length file_name-2)) 0 1))]\n\
    \    [else \"No\"]\n    )\n  )\n", "  (cond\n    [(empty? file_name) #f]\n   \
    \ [(string=? (substring file_name 0 (length file_name)-2) \"..\") #f]\n    [(string=?\
    \ (substring file_name 0 (length file_name)-1) \".\") #f]\n    [(string=? (substring\
    \ file_name 0 (length file_name)-1) \".txt\") 'Yes]\n    [(and (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".txt\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".txt\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".txt\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".txt\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".txt\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".txt\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".txt\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".txt\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".exe\"))\n          (not (string=?\
    \ (substring file_name 0 (length file_name)-1) \".dll\"))\n          (not ", " \
    \ (if (or (string? file_name) (number? file_name) (symbol? file_name))\n     \
    \ (begin (display \"Invalid file name.\") (newline) (newline))\n      (let ((letter\
    \ (char->string (first (string-ref file_name 0 0))))\n            (dot_position\
    \ (string-match (string-ref file_name 0 (string-length file_name)) #\".\"))\n\
    \            (file_extension (substring (substring file_name 0 dot_position) \n\
    \                                  (+ dot_position \n                        \
    \              (string-length file_name))))\n            (valid_name? (= (length\
    \ letter) 3 \"The file's name should only contain one digit (0-9).\"))\n     \
    \       (not_empty? (= (string-length file_name) 1 \"The file's name should not\
    \ be empty.\")\n                         (= (string-ref file_name 0 (string-length\
    \ file_name)) \"The file's name should not have more than one dot.\")))\n    \
    \    (cond\n          (valid_name? \n           (cond\n             (not_empty?\
    \ (= (string-length file_name) 1 \"The file's name should not be empty.\")\n \
    \                        (= (string-ref file_name 0 (string-length file_name))\
    \ \"The file's name should not have more than one dot.\"))\n             (char->string\
    \ (first (string-ref file_name 0 0)))\n             (= (length (string->list file_name))\
    \ 1 \"The file's name should only contain one digit (0-9).\")))\n          (else\n\
    \           (begin (display \"Invalid file name.\") (newline) (newline)))))\n",
  "  (let ((check (string=? file_name \"\")))\n    (if (not= check false)\n      \
    \  (let ((check1 (string=? file_name\n                               \"\\\\/\"\
    ))\n              (check2 (string=? file_name\n                              \
    \ \".\"))\n              (check3 (string=? file_name\n                       \
    \        file_name\n                               \"0123456789\")))\n       \
    \   (if (and check1 check2 check3)\n              (let ((check4 (string=? (substring\
    \ file_name 0 (string-length file_name)\n                                    \
    \           \"\\\\/\") \"0123456789\"))\n                    (check5 (string=?\
    \ (substring file_name (string-length file_name)\n                           \
    \                    string-length \"\\\\/\"\n                               \
    \                \"\\\\/\"\n                                               \"\\\
    \\/\"\n                                               \"\\\\/\"\n            \
    \                                   \"\\\\/\"\n                              \
    \                 \"\\\\/\"\n                                               \"\
    \\\\/\"\n                                               \"\\\\/\"\n          \
    \                                     \"\\\\/\"\n                            \
    \                   \"\\\\/\"\n                                              \
    \ \"\\\\/\"\n                                               \"\\\\/\"\n      \
    \                                         \"\\\\/\"\n                        \
    \                       \"\\\\/\"\n                                          \
    \     \"\\\\/\"\n                                               \"\\\\/\"\n  \
    \                                             \"\\\\/\"\n                    \
    \                           \"\\\\/\"\n                                      \
    \         \"\\\\/\"\n                                               \"\\\\/\"\n\
    \                                               \"\\\\/\"\n                  \
    \                             \"\\\\/\"\n                                    \
    \           \"\\\\/\"\n                                               \"\\\\/\"\
    \n                                               \"\\\\/\"\n                 \
    \                              \"\\\\/\"\n                                   \
    \            \"\\\\/\"\n                                               \"\\\\\
    /\"\n                                               \"\\\\/\"\n              \
    \                                 \"\\\\/\"\n                                \
    \               \"\\\\/\"\n                                               \"\\\
    \\/\"\n                                               \"\\\\/\"\n            \
    \                                   \"\\\\/\"\n                              \
    \                 \"\\\\/\"\n                                               \"\
    \\\\/\"\n                                               \"\\\\/\"\n          \
    \                                     \"\\\\/\"\n                            \
    \                   \"\\\\/\"\n                                              \
    \ \"\\\\/\"\n                                               \"\\\\/\"\n      \
    \                                         \"\\\\/\"\n                        \
    \                       \"\\\\/\"\n                                          \
    \     \"\\\\/\"\n                                               \"\\\\/\"\n  \
    \                                             \"\\\\/\"\n                    \
    \                           \"\\\\/\"\n                                      \
    \         \"\\\\/\"\n                                               \"\\\\/\"\n\
    \                                               \"\\\\/\"\n                  \
    \                             \"\\\\/\"\n                                    \
    \           \"\\\\/\"\n                                               \"\\\\/\"\
    \n                                               \"\\\\/\"\n                 \
    \                              \"\\\\/\"\n                                   \
    \            \"\\\\/\"\n                                               \"\\\\\
    /\"\n                                               \"\\\\/\"\n              \
    \                                 \"\\\\/\"\n                                \
    \               \"\\\\/\"\n                                               \"\\\
    \\/\"\n                                               \"\\\\/\"\n            \
    \                                   \"\\\\/\"\n                              \
    \                 \"\\\\/\"\n                                               \"\
    \\\\/\"\n                                               \"\\\\/\"\n          \
    \                                     \"\\\\/\"\n                            \
    \                   \"\\\\/\"\n                                              \
    \ \"\\\\/\"\n                                               \"\\\\/\"\n      \
    \                                         \"\\\\/\"\n                        \
    \                       \"\\\\/\"\n                                          \
    \     \"\\\\/\"\n                                               \"\\\\/\"\n  \
    \                                             \"\\\\/\"\n                    \
    \                           \"\\\\/\"\n                                      \
    \         \"\\\\/\"\n                                               \"\\\\/\"\n",
  "  (cond ((string-match? 'regex-pattern file_name)\n         (if (string-match?\
    \ 'regex-pattern (substring-before file_name \".\"))\n             'Yes\n    \
    \         'No))\n        (else (if (string-match? 'regex-pattern (substring-before\
    \ file_name \".\"))\n                  'No\n                  'Yes))))\n    ",
  "  (cond \n    ((< file_name.length 3)\n     'No)\n    ((eq? file_name.(index '.'\
    \ 0 file_name.length)\n            \"\")\n     'No)\n    ((and\n       (char?\
    \ (substring file_name.(index '.' 0 file_name.length) 0))\n       (char? (substring\
    \ file_name.(index '.' 0 file_name.length) 0 1))\n       (char? (substring file_name.(index\
    \ '.' 0 file_name.length) 0 1 2)))\n     'No)\n    ((and\n       (char? (substring\
    \ file_name.(index '.' 0 file_name.length) 0 0))\n       (not (list? (substring\
    \ file_name.(index '.' 0 file_name.length) 0 0)))\n       (not (list? (substring\
    \ file_name.(index '.' 0 file_name.length) 0 0)))\n       (not (list? (substring\
    \ file_name.(index '.' 0 file_name.length) 0 0)))))\n    ((and\n       (char?\
    \ (substring file_name.(index '.' 0 file_name.length) 0 1))\n       (not (list?\
    \ (substring file_name.(index '.' 0 file_name.length) 0 1)))))\n    ((and\n  \
    \     (char? (substring file_name.(index '.' 0 file_name.length) 0 2))\n     \
    \  (not (list? (substring file_name.(index '.' 0 file_name.length) 0 2)))))\n\
    \    ('Yes)))\n", "  (cond [(< 3 (string-length file_name)) (list \"Invalid\"\
    )\n         (string-match \"^[a-z][a-z]+\\.\" file_name)\n         (string-match\
    \ \"^[a-z][a-z]+\\.\" (rest file_name))\n         (string-match \"^[a-z][a-z]+\\\
    .\" (rest file_name))\n         (string-match \"^[a-z][a-z]+\\.\" (rest file_name))]\n\
    \        [else (list \"Valid\")]))\n", "  (let\n    [\n      num_digits (string-length\
    \ (substring file_name 0 3))\n      (is_letter (member file-name (list #\\a (list->string\
    \ (array->list #\\a #\\z)))))\n      (has_dot (member file_name (list #\\.)))\n\
    \      (has_dot_before (string=? (substring file_name (substring (length file_name)\
    \ 0 1) #\\.))\n      (dot_has_dot (eql? (substring file_name (substring (length\
    \ file_name) 1 length) 3) \".\"))\n      (has_dot_after (string=? (substring file_name\
    \ (substring (length file_name) 2) #\\.))\n    ]\n    (if (or (= num_digits 0)\
    \ (= num_digits 1) (= num_digits 2) (= num_digits 3))\n      (if (or (= is_letter\
    \ 0) (= is_letter 1))\n        (if (or (= has_dot 0) (= has_dot 1))\n        \
    \  (if (or (= dot_has_dot 0) (= dot_has_dot 1))\n            (if (or (= has_dot_before\
    \ 0) (= has_dot_before 1))\n              (if (or (= has_dot_after 0) (= has_dot_after\
    \ 1))\n                (if (or (= dot_has_dot_before 0) (= dot_has_dot_before\
    \ 1))\n                  (if (or (= dot_has_dot_after 0) (= dot_has_dot_after\
    \ 1))\n                    'Yes\n                  'No)\n                (if (or\
    \ (= has_dot_after 0) (= has_dot_after 1))\n                  'No\n          \
    \        'No)\n              'No)\n            'No)\n          'No)\n        'No)\n\
    \      'No)))\n", "  (cond\n    [(< (string-length file_name) 3) 'No]\n    [(string=?\
    \ (substring file_name 0 (string-length file_name-length)) \"0-9\") 'No]\n   \
    \ [(substring file_name 0 (string-length file_name-length))\n     (and (string-contains?\
    \ file_name-check \n                      '(. txt)) 'Yes]\n    [(substring file_name\
    \ 0 (string-length file_name-length))\n     (and (string-contains? file_name-check\
    \ \n                      '(. exe)) 'Yes]\n    [(substring file_name 0 (string-length\
    \ file_name-length))\n     (and (string-contains? file_name-check \n         \
    \             '(. dll)) 'Yes]\n    [else 'No]))\n ", "  (cond\n    [(< 3 (string-length\
    \ file_name))\n     (string=? (substring file_name 0 (string-length file_name-1))\n\
    \                 (string-append \"0123456789\" '.'))]\n    [else\n     (string=?\
    \ (substring file_name 0 (string-length file_name-1))\n                 (string-append\
    \ \"a\" 'z' 'A'))]\n    [else\n     (string=? (substring file_name 0 (string-length\
    \ file_name-1))\n                 (string-append \"exe\" 'exe' 'dll'))]\n  ))\n",
  "  (< (length file_name) 3)\n  (= (char-alphabet (substring file_name 0 1)) #\\\
    a)\n  (= (char-alphabet (substring file_name 0 1)) #\\z)\n  (= (char-alphabet\
    \ (substring file_name 0 1)) #\\A)\n  (= (char-alphabet (substring file_name 0\
    \ 1)) #\\Z)\n  (= (char-alphabet (substring file_name 1 0)) #\\0)\n  (= (char-alphabet\
    \ (substring file_name 0 1)) #\\9)\n  (= (char-alphabet (substring file_name 0\
    \ 1)) #\\8)\n  (= (char-alphabet (substring file_name 0 1)) #\\7)\n  (= (char-alphabet\
    \ (substring file_name 0 1)) #\\6)\n  (= (char-alphabet (substring file_name 0\
    \ 1)) #\\5)\n  (= (char-alphabet (substring file_name 0 1)) #\\4)\n  (= (char-alphabet\
    \ (substring file_name 0 1)) #\\3)\n  (= (char-alphabet (substring file_name 0\
    \ 1)) #\\2)\n  (= (char-alphabet (substring file_name 0 1)) #\\1)\n  (= (char-alphabet\
    \ (substring file_name 0 1)) #\\0)\n  (equal? file_name\n          \".txt\")\n\
    \  (equal? file_name\n          \".exe\")\n  (equal? file_name\n          \".dll\"\
    ))", "  (cond\n    [(and (string= (length file_name) 3)\n          (string= (substring\
    \ file_name 0 1) '1)\n          (string= (substring file_name 0 1) 'A)\n     \
    \     (string= (substring file_name 0 1) 'z)\n          (string= (substring file_name\
    \ 0 1) 'a')\n          (string= (substring file_name 0 1) 'A')\n          (string=\
    \ (substring file_name 0 1) 'z)\n          (string= (substring file_name 0 1)\
    \ 'a)\n          (string= (substring file_name 0 1) 'Z)\n          (string= (substring\
    \ file_name 0 1) 'z)\n          (string= (substring file_name 0 1) 'a)\n     \
    \     (string= (substring file_name 0 1) 'Z)\n          (string= (substring file_name\
    \ 0 1) 'a)\n          (string= (substring file_name 0 1) 'Z)\n          (string=\
    \ (substring file_name 0 1) 'Z)\n          (string= (substring file_name 0 1)\
    \ 'a)\n          (string= (substring file_name 0 1) 'z)\n          (string= (substring\
    \ file_name 0 1) 'A)\n          (string= (substring file_name 0 1) 'z)\n     \
    \     (string= (substring file_name 0 1) 'A')\n          (string= (substring file_name\
    \ 0 1) 'z)\n          (string= (substring file_name 0 1) 'A)\n          (string=\
    \ (substring file_name 0 1) 'z)\n          (string= (substring file_name 0 1)\
    \ 'A')\n          (string= (substring file_name 0 1) 'z)\n          (string= (substring\
    \ file_name 0 1) 'A)\n          (string= (substring file_name 0 1) 'z)\n     \
    \     (string= (substring file_name 0 1) 'A)\n          (string= (substring file_name\
    \ 0 1) 'z)\n          (string= (substring file_name 0 1) 'A)\n          (string=\
    \ (substring file_name 0 1) 'z)\n          (string= (substring file_name 0 1)\
    \ 'A)\n          (string= (substring file_name 0 1) 'z)\n          (string= (substring\
    \ file_name 0 1) 'A)\n          (string= (substring file_name 0 1) 'z)\n     \
    \     (string= (substring file_name 0 1) 'A)\n          (string= (substring file_name\
    \ 0 1) 'z)\n          (string= (substring file_name 0 1) 'A)\n          (string=\
    \ (substring file_name 0 1) ", "  (cond [(empty? file_name)\n         'Yes]\n\
    \        [(> (length (substring file_name 0 (position (first file_name) file_name))\
    \ 3)\n           (length (substring file_name 0 (- (count file_name) 3)))\n  \
    \         'Yes]\n        [(string? (substring file_name 0 (position (first file_name)\
    \ file_name)))\n         ((not(= (string? (substring file_name 0 (- (count file_name)\
    \ 1)\n                                         (- (- (- (- (- (count file_name)\
    \ 2) 1)\n                                          (position (first file_name)\
    \ file_name) file_name))\n                                  'txt\n           \
    \                       'exe\n                                  'dll)\n      \
    \                            'exe\n                                  'dll)\n \
    \                         'exe\n                          'dll)\n            \
    \     'Yes]\n        [(string? (substring file_name 0 (- (- (- (- (- (- (count\
    \ file_name) 2) 1)\n                                          (position (first\
    \ file_name) file_name) file_name))\n                                  'txt\n\
    \                                  'exe\n                                  'dll)\n\
    \                          'exe\n                          'dll)\n           \
    \      'Yes]\n        [(string? (substring file_name 0 (- (- (- (- (- (- (- (-\
    \ (- (count file_name) 2)\n                                          (position\
    \ (first file_name) file_name) file_name))\n                                 \
    \ 'txt\n                                  'exe\n                             \
    \     'dll)\n                          'exe\n                          'dll)\n\
    \                 'Yes]\n        [(string? (substring file_name 0 (- (- (- (-\
    \ (- (- (- (- (- (- (- (count file_name) 3)\n                                \
    \          (position (first file_name) file_name) file_name))\n              \
    \                    'txt\n                                  'exe\n          \
    \                        'dll)\n                          'exe\n             \
    \             'dll)\n                 'Yes]\n        [(> (length (substring file_name\
    \ 0 (- (- (- (- (- (- (- (- (- (- (- (- (count file_name) 2)\n               \
    \                           (position (first file_name) file_name) file_name))\n\
    \                                  'txt\n                                  'exe\n\
    \                                  'dll)\n                          'exe\n   \
    \                       'dll)\n                          'exe\n              \
    \            'dll)\n                          'exe\n                         \
    \ 'dll)\n                 'No]\n        [(> (length (substring file_name 0 (-\
    \ (- (- (- (- (- (- (- (- (- (- (- (- (count file_name) 3)\n                 \
    \                         (position (first file_name) file_name) file_name))\n\
    \                                  'txt\n                                  'exe\n\
    \                                  'dll)\n                          'exe\n   \
    \                       'dll)\n                          'exe\n              \
    \            'dll)\n                          'exe\n                         \
    \ 'dll)\n                 'No]\n        [(> (length (substring file_name 0 (-\
    \ (- (- (- (- (- (- (- (- (- (- (- (- (- (- (count file_name) 3)\n           \
    \                               (position (first file_name) file_name) file_name))\n\
    \                                  'txt\n                                  'exe\n\
    \                                  'dll)\n                          'exe\n   \
    \                       'dll)\n                          'exe\n              \
    \            '", "  (match file_name\n      [(#regex [#c\"^[a-z]{3}[a-z]?\\.[txt|exe|dll]$\"\
    ]\n               'Yes) 'Yes]\n      [(else 'No)))\n", "  (cond\n    [(and (string-length\
    \ file_name) (string-match \"^[a-zA-z0-9]+[.]\" file_name))\n     (cond\n    \
    \   [(string-length file_name-sub1 (string-match \"^[a-zA-z]\" file_name))\n \
    \       (cond\n          [(equal? (string-downcase (substring file_name (string-length\
    \ file_name-sub1)) \"txt\"))\n           (cond\n             [(equal? (string-downcase\
    \ (substring file_name (string-length file_name-sub1)) \"exe\"))\n           \
    \    (cond\n                 [(equal? (string-downcase (substring file_name (string-length\
    \ file_name-sub1)) \"dll\"))\n                   (cond\n                     [(equal?\
    \ (string-length (substring file_name (string-length file_name-sub1)) 1) 1)\n\
    \                      (cond\n                        [(equal? (char->integer\
    \ (substring file_name (string-length file_name-sub1)) 97) (integer->char 'a'))\n\
    \                         (cond\n                          [(equal? (char->integer\
    \ (substring file_name (string-length file_name-sub1)) 105) (integer->char 'A'))\n\
    \                           (cond\n                             [(equal? (char->integer\
    \ (substring file_name (string-length file_name-sub1)) 104) (integer->char 'b'))\n\
    \                               (cond\n                                 [(equal?\
    \ (char->integer (substring file_name (string-length file_name-sub1)) 106) (integer->char\
    \ 'B'))\n                                 (cond\n                            \
    \       [(equal? (char->integer (substring file_name (string-length file_name-sub1))\
    \ 110) (integer->char 'd'))\n                                    (cond\n     \
    \                                 [(equal? (char->integer (substring file_name\
    \ (string-length file_name-sub1)) 112) (integer->char 'D'))\n                \
    \                       (cond\n                                         [(equal?\
    \ (char->integer (substring file_name (string-length file_name-sub1)) 114) (integer->char\
    \ 'f'))\n                                          (cond\n                   \
    \                         [(equal? (char->integer (substring file_name (string-length\
    \ file_name-sub1)) 116) (integer->char 'F'))\n                               \
    \             (cond\n                                              [(equal? (char->integer\
    \ (substring file_name (string-length file_name-sub1)) 118) (integer->char 'g'))\n\
    \                                              (cond\n                       \
    \                         [(equal? (char->integer (substring file_name (string-length\
    \ file_name-sub1)) 120) (integer->char 'G'))\n                               \
    \                  (cond\n                                                   [(equal?\
    \ (char->integer (substring file_name (string-length file_name-sub1)) 122) (integer->char\
    \ 'j'))\n                                                    (cond\n         \
    \                                             [(", "  (let ([i 0]) (< i (string-length\
    \ file_name) (file-extension file_name)\n                          (lambda (s)\n\
    \                            (if (string-match \"[^a-zA-Z]\" s)\n            \
    \                    (error \"invalid characters in the file name [\" s \"]\"\
    )\n                                (if (string-match \".\" s)\n              \
    \                      (error \"invalid characters in the file name [\" s \"]\"\
    )\n                                    (if (< (char-code (substring file_name\
    \ 0 i))\n                                        (code (digit-char (char-code\
    \ (substring file_name i 0))))\n                                        (error\
    \ \"the file names cannot start with digits and must contain exactly one '.' [\"\
    \ file_name \"]\")\n                                    (if (string=? s (substring\
    \ file_name (+ 0 (+ i (string-length file_name)))) \n                        \
    \                (error \"the file names cannot contain two '.' [\" file_name\
    \ \"]\")\n                                    (if (< (length s) 1) (error \"the\
    \ file names cannot contain more than one dot [\" file_name \"]\") 'yes)\n   \
    \                                 (error \"the file names cannot contain more\
    \ than one dot [\" file_name \"]\"))))))))\n", "  (cond\n    [(and (> 3 (string-length\
    \ file_name)) (string-match #rx\"^[^0-9].+\" file_name) (not (string-match #rx\"\
    ^\\.+\" file_name))\n      \"No\"]\n    [(and (= 3 (string-length file_name))\
    \ (string-match #rx\"^[^0-9]\" file_name) (not (string-match #rx\"^\\.+$\" file_name))\n\
    \      \"No\"]\n    [(and (= 3 (string-length file_name)) (string-match #rx\"\
    ^[^0-9]\" file_name) (not (string-match #rx\"^[^a-z]\\.+\" file_name))\n     \
    \ \"No\"]\n    [(and (= 3 (string-length file_name)) (string-match #rx\"^[^0-9]\"\
    \ file_name) (not (string-match #rx\"^[^a-z]\" file_name))\n      \"No\"]\n  \
    \  [(and (= 3 (string-length file_name)) (string-match #rx\"^[^0-9]\" file_name)\
    \ (not (string-match #rx\"^[^a-z]\\.+\" file_name))\n      \"Yes\"]\n    [(and\
    \ (= 3 (string-length file_name)) (string-match #rx\"^[^0-9]\" file_name) (not\
    \ (string-match #rx\"^[^a-z]\" file_name))\n      \"Yes\"]\n    [else\n      \"\
    Yes\"]\n  )\n)\n", "  (cond\n    [(string-empty? file_name) \"No\"]\n    [(or\
    \ (string? (string-length (string-ref file_name 0))) \"No\") \"No\"]\n    [(or\
    \ (string? (string-length (string-ref file_name 0))) \"No\")\n     (string? (substring\
    \ file_name 0 (string-length (string-ref file_name 0))))]\n    [(string? (substring\
    \ file_name 0 (string-length (string-ref file_name 0)))) \"No\"]\n    [(and (=\
    \ (string-length (string-ref file_name 0)) 3)\n          (string? (substring file_name\
    \ 0 (string-length (string-ref file_name 0)))))\n     \"Yes\"]\n    [(and (= (string-length\
    \ (string-ref file_name 0)) 3)\n          (string? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))))\n          (string? (substring file_name 1 (string-length\
    \ (string-ref file_name 0)))))\n     \"Yes\"]\n    [(and (= (string-length (string-ref\
    \ file_name 0)) 3)\n          (string? (substring file_name 0 (string-length (string-ref\
    \ file_name 0))))\n          (string? (substring file_name 1 (string-length (string-ref\
    \ file_name 0))))\n          (string? (substring file_name 2 (string-length (string-ref\
    \ file_name 0)))))\n     \"Yes\"]\n    [(and (= (string-length (string-ref file_name\
    \ 0)) 3)\n          (string? (substring file_name 0 (string-length (string-ref\
    \ file_name 0))))\n          (string? (substring file_name 1 (string-length (string-ref\
    \ file_name 0))))\n          (string? (substring file_name 2 (string-length (string-ref\
    \ file_name 0))))\n          (string? (substring file_name 3 (string-length (string-ref\
    \ file_name 0)))))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(string=\
    \ (string-length file_name) 0)\n     'No]\n    [(= (string-length file_name) 3)\n\
    \     'Yes]\n    [(string-match (substring file_name 0 (string-length file_name))\n\
    \                     (string->symbol \"aA\"))\n     'Yes]\n    [(string-match\
    \ (substring file_name 0 (string-length file_name))\n                     (string->symbol\
    \ \"Zz\"))\n     'Yes]\n    [(string-match (substring file_name 0 (string-length\
    \ file_name))\n                     (string->symbol \"0123456789\"))\n     'Yes]\n\
    \    [(string-match (substring file_name 0 (string-length file_name))\n      \
    \               (string->symbol \".\"))\n     'Yes]\n    [(string-match (substring\
    \ file_name 0 (string-length file_name))\n                     (string->symbol\
    \ \"[^a-z0-9]\"))\n     'No]\n    [else\n     'No]\n  )\n)\n", "  (let ([len (string-length\
    \ file_name)]\n        [letter (string-ref file_name 0 1)]\n        [dot (equal?\
    \ (string-ref file_name 0 0) '.')])\n    (and (>= 3 len) \n         (= (count\
    \ (filter (lambda (ele) (equal? ele '.')) file_name) 1) \n         (and (not letter)\n\
    \               (not (equal? (substring file_name 0 1) \"\\\\\")\n           \
    \        (equal? (substring file_name 0 (string->number (substring file_name 0\
    \ (string-length file_name) 2))) '\\\\')\n                   (equal? (substring\
    \ file_name (+ 0 (string-length file_name) 2)) \"\\\\\")\n                   (equal?\
    \ (substring file_name (- 0 (string-length file_name) 2)) \".\")\n           \
    \        (equal? (substring file_name (+ 0 (string-length file_name) 3)) \"\\\\\
    \")\n                   (equal? (substring file_name (- 0 (string-length file_name)\
    \ 3)) \".\")\n                   (equal? (substring file_name (+ 0 (string-length\
    \ file_name) 4)) \"\\\\\")\n                   (equal? (substring file_name (-\
    \ 0 (string-length file_name) 4)) \".\")\n                   (equal? (substring\
    \ file_name (+ 0 (string-length file_name) 5)) \"\\\\\")\n                   (equal?\
    \ (substring file_name (- 0 (string-length file_name) 5)) \".\")\n           \
    \        (equal? (substring file_name (+ 0 (string-length file_name) 6)) \"\\\\\
    \")\n                   (equal? (substring file_name (- 0 (string-length file_name)\
    \ 6)) \".\")\n                   (equal? (substring file_name (+ 0 (string-length\
    \ file_name) 7)) \"\\\\\")\n                   (equal? (substring file_name (-\
    \ 0 (string-length file_name) 7)) \".\")\n                   (equal? (substring\
    \ file_name (+ 0 (string-length file_name) 8)) \"\\\\\")\n                   (equal?\
    \ (substring file_name (- 0 (string-length file_name) 8)) \".\")\n           \
    \        (equal? (substring file_name (+ 0 (string-length file_name) 9)) \"\\\\\
    \")\n                   (equal? (substring file_name (- 0 (string-length file_name)\
    \ 9)) \".\")\n                   (equal? (substring file_name (+ 0 (string-length\
    \ file_name) 10)) \"\\\\\")\n                   (equal? (substring file_name (-\
    \ 0 (string-length file_name) 10)) \".\")\n                   (equal? (substring\
    \ file_name (+ 0 (string-length file_name) 11)) \"\\\\\")\n                  \
    \ (equal? (substring file_name (- 0 (string-length file_name) 11)) \".\")\n  \
    \                 (equal? (substring file_name (+ 0 (string-", "  (cond\n    ((<\
    \ 3 (string-length file_name))\n     'No)\n    ((not (string-contains-only-letters\
    \ file_name))\n     'No)\n    ((not (string-contains-only '.' file_name))\n  \
    \   'No)\n    ((string-before-last-char (string-ref file_name 0 1) #\\0)\n   \
    \  'No)\n    ((not (string-equal (substring file_name 0 (string-length (string-ref\
    \ file_name 0 1))) #\\'.'))\n     'No)\n    ((string-equal (substring file_name\
    \ 0 (string-length (string-ref file_name 0 1))) #\\'.'))\n    ((or (string-equal\
    \ (substring file_name 0 (string-length (string-ref file_name 0 1))) #\\'.') (string-equal\
    \ (substring file_name 1 (string-length (string-ref file_name 0 1))) #'\\'.'))\n\
    \     'No)\n    ((or (string-equal (substring file_name 0 (string-length (string-ref\
    \ file_name 0 1))) #\\'.') (string-equal (substring file_name 1 (string-length\
    \ (string-ref file_name 0 1))) #'\\'.'))\n     'No)\n    ((or (string-equal (substring\
    \ file_name 0 (string-length (string-ref file_name 0 1))) #\\'.') (string-equal\
    \ (substring file_name 1 (string-length (string-ref file_name 0 1))) #'\\'.'))\n\
    \     'No)\n    ((or (string-equal (substring file_name 0 (string-length (string-ref\
    \ file_name 0 1))) #\\'.') (string-equal (substring file_name 1 (string-length\
    \ (string-ref file_name 0 1))) #'\\'.'))\n     'No)\n    ((or (string-equal (substring\
    \ file_name 0 (string-length (string-ref file_name 0 1))) #\\'.') (string-equal\
    \ (substring file_name 1 (string-length (string-ref file_name 0 1))) #'\\'.'))\n\
    \     'No)\n    ((or (string-equal (substring file_name 0 (string-length (string-ref\
    \ file_name 0 1))) #\\'.') (string-equal (substring file_name 1 (string-length\
    \ (string-ref file_name 0 1))) #'\\'.'))\n     'No)\n    ((or (string-equal (substring\
    \ file_name 0 (string-length (string-ref file_name 0 1))) #\\'.') (string-equal\
    \ (substring file_name 1 (string-length (string-ref file_name 0 1))) #'\\'.'))\n\
    \     'No)\n    ((or (string-equal (substring file_name 0 (string-length (string-ref\
    \ file_name 0 1))) #\\'.') (string-equal (substring file_name 1 (string-length",
  "  (cond\n    [(string-length file_name) < 3 #t]\n    [(find-char '. file_name)\
    \ < 3 #t]\n    [(substring (substring file_name 0 1) 0) < 'a' #t]\n    [(substring\
    \ (substring file_name 0 1) 0) >= 'a' \n     #f]\n    [(substring (substring file_name\
    \ 0 1) 0) >= 'a' \n     #f]\n    [(substring (substring file_name 0 1) 0) >= 'a'\
    \ \n     #t]\n    [(substring (substring file_name 0 1) 0) >= 'a' \n     #t]\n\
    \    [(substring (substring file_name 0 1) 0) < 'a' \n     #f]\n    [(substring\
    \ (substring file_name 0 1) 0) < 'a' \n     #f]\n    [(substring (substring file_name\
    \ 0 1) 0) >= 'a' \n     #t]\n    [(substring (substring file_name 0 1) 0) >= 'a'\
    \ \n     #t]\n    [(substring (substring file_name 0 1) 0) >= 'a' \n     #t]\n\
    \    [(substring (substring file_name 0 1) 0) < 'a' \n     #f]\n    [(substring\
    \ (substring file_name 0 1) 0) < 'a' \n     #f]\n    [(substring (substring file_name\
    \ 0 1) 0) >= 'a' \n     #t]\n    [(substring (substring file_name 0 1) 0) >= 'a'\
    \ \n     #t]\n    [(substring (substring file_name 0 1) 0) >= 'a' \n     #t]\n\
    \    [(substring (substring file_name 0 1) 0) < 'a' \n     #f]\n    [(substring\
    \ (substring file_name 0 1) 0) < 'a' \n     #f]\n    [(substring (substring file_name\
    \ 0 1) 0) >= 'a' \n     #t]\n    [(substring (substring file_name 0 1) 0) >= 'a'\
    \ \n     #t]\n    [(substring (substring file_name 0 1) 0) >= 'a' \n     #t]\n\
    \    [(substring (substring file_name 0 1) 0) < 'a' \n     #f]\n    [(substring\
    \ (substring file_name 0 1) 0) < 'a' \n     #f]\n    [(substring (substring file_name\
    \ 0 1) 0) >= 'a' \n     #t]\n    [(sub", "  (cond\n    [(= (string-length file_name)\
    \ 3) 'Yes]\n    [(and (char-alphabetic? file_name) (string-match (substring file_name\
    \ 0 1) \"[a-zA-Z]\"))\n     (if (string-match (substring file_name 0 1) \"[a-zA-Z]\"\
    )\n         'No\n         'No)]\n    [(string-match (substring file_name 0 1)\
    \ \".\") \n     (if (string-match (substring file_name 0 1) \".\")\n         'Yes\n\
    \         'No)]\n    [else (file_name_check (substring file_name 1 string-length\
    \ (substring file_name 0 1))))]\n  )\n)\n", "  (cond ((string-empty? file_name)\n\
    \         'No)\n        ((string-match (string #\\. file_name) #\\[0-9]+ #\\.\
    \ #\\[0-9]+ #\\. #\\[0-9]+ #\\. #\\[0-9]+) #\\Yes\n         'Yes)\n        (else\
    \ (file_name_check ')))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
