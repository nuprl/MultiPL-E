name: HumanEval_157_right_angle_triangle
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ True if the three\n;; sides form a right-angled triangle, False otherwise.\n;;\
  \ A right-angled triangle is a triangle in which one angle is right angle or \n\
  ;; 90 degree.\n;; Example:\n;; right_angle_triangle(3, 4, 5) == True\n;; right_angle_triangle(1,\
  \ 2, 3) == False\n(define (right_angle_triangle a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n\
  \    (check-equal? (candidate 3 4 5) #t)\n    (check-equal? (candidate 1 2 3) #f)\n\
  \    (check-equal? (candidate 10 6 8) #t)\n    (check-equal? (candidate 2 2 2) #f)\n\
  \    (check-equal? (candidate 7 24 25) #t)\n    (check-equal? (candidate 10 5 7)\
  \ #f)\n    (check-equal? (candidate 5 12 13) #t)\n    (check-equal? (candidate 15\
  \ 8 17) #t)\n    (check-equal? (candidate 48 55 73) #t)\n    (check-equal? (candidate\
  \ 1 1 1) #f)\n    (check-equal? (candidate 2 2 10) #f)\n))\n\n(test-humaneval)"
completions: ["  (< (abs (- (abs a) (abs b) (abs c)))\n     (/ (abs (- (* a b) (*\
    \ b c))) 2.0)))\n", "  (= (* a b c) 360 / (/ (+ a b c) 2) 2))\n", "  (or (= b\
    \ (* c c))\n      (= (* c a) (* a a))\n      (= (* a b) (* b b))))\n", "  (cond\n\
    \    [(= a b) (= b c) (= c a)]\n    [(= a c) (= b c) (= c a)]\n    [else false]))\n",
  "  (or ((> (- a c) b) b)\n      (and (> b c) b)))\n", "  (= (mod a (abs a-b b-c))\
    \ (abs a-c c-b)))\n", "  (and (equal? a (/ b c)) (equal? b (/ c a))\n      (equal?\
    \ c (/ a b))))\n", "  (< (abs (- (* a a) (* b b) (* c c)))\n      (* a (abs (-\
    \ (* b b) (* c c)))) ))\n", "  (< (abs (- b a)) (abs (- c a))))\n", "  \n  ;;\
    \ Find all the angles using the law of cosines\n  (define (angles c x y)\n   \
    \ (define (angle1 x)\n      (* x x cos(c x)))\n    (define (angle2 y)\n      (*\
    \ y y cos(c y)))\n    (define (angle3 z)\n      (* z z cos(c z)))\n    (list (angle1\
    \ x) (angle2 y) (angle3 z)))\n\n  ;; Test all the angles\n  (define (test a b\
    \ c)\n    (let loop ((n 0)\n              (angles-to-test '()))\n      (cond ((<\
    \ n 3)\n             (loop (+ n 1)\n                   angles-to-test))\n    \
    \        (else (or (eq? (triangle_area a b c)\n                           (triangle_area\
    \ a (angles-to-test n) (angles-to-test n)))\n                     (eq? (triangle_area\
    \ a b c)\n                           (triangle_area a (angles-to-test n) (angles-to-test\
    \ n)))))\n      (loop (+ n 1)\n            angles-to-test)))\n  (or (test a b\
    \ c)\n      (test b (angles-to-test 0) c)\n      (test a c (angles-to-test 1)))\n\
    )\n", "  (cond\n    [(= a b) (= c a)]\n    [(= b c) (= c b)]\n    [else false]\n\
    \   ))\n</code>\n<|/ a tags=scheme,racket,racket-student-languages |>\n<| c |>\n\
    The condition `(= a b)` should probably be `(= a c)` (right angle triangle condition).\n\
    <|/ c |>\n<| c |>\n: Yes, thank you for pointing that out; fixed now.\n<|/ c |>\n\
    <| a |>\nI suggest to use some built-in functions to do that in a more idiomatic\
    \ way.\nFor example, you can use the built-in procedure length to find the length\
    \ of the vector, and vector-dot function which is exactly what you need in your\
    \ homework. Take a look at the documentation and examples from Racket website.\n\
    <|/ a dscore=1 tags=scheme,racket,racket-student-languages |>\n<| c |>\n`vector-dot`\
    \ isn't really the right answer, as the problem is asking whether one vector is\
    \ orthogonal to the other. Since vectors are 2-dimensional they are orthogonal\
    \ if and only if the dot product is zero.\n<|/ c |>\n<| c |>\n: you are right,\
    \ thank you for pointing that out! I just wanted to point that vector-dot could\
    \ be a solution to the problem\n<|/ c |>\n<| a dscore=1 tags=scheme,racket,racket-student-languages\
    \ |>\nThe first line defines the function vector-angle. Its purpose is to compute\
    \ the angle between two vectors. Its signature is:\n<code>", '  (< (/ a b c) (/
    2 3 1)))', "  (< (abs (- a b)) (abs (- c b))))\n)\n", "  (and (equal? a c) (equal?\
    \ b c)))\n", "  (< (/ a b c) (/ a b a)))\n", "  (= (abs a) (abs b) (abs c)))\n",
  "  (< (angle-between-points ((point-x a) (point-y a)) ((point-x b) (point-y b))\
    \ ((point-x c) (point-y c))) 90))\n", "  (or (= b c) (= a c) (= b a)))\n", " \
    \ (<= a b c)\n  (<= b c a)\n  (<= c a b))\n", "  (cond\n    ((< a b) (< b c) (<\
    \ c a))\n    ((< b a) (< a c) (< c b))\n    ((< c a) (< a b) (< b c))\n    ((=\
    \ a b) (= b c) (= c a))\n    (#t #f)\n  ))\n", "  (> (* a b c) 180)\n  (if (>\
    \ (* b c a) 180)\n      (> (* a c b) 180)\n      (> (* b a c) 180)))\n", "  (cond\n\
    \    [(= a b) (< c a)]\n    [(= b c) (< a c)]\n    [else #t (< c a)]))\n", " \
    \ (< (abs (- a b)) (abs (- a c)))\n  (< (abs (- b c)) (abs (- a c)))\n  (< (abs\
    \ (- a b)) (abs (- b c)))\n  (< (abs (- b a)) (abs (- c b)))\n  (< (abs (- c a))\
    \ (abs (- b c)))\n  (< (abs (- a c)) (abs (- c b)))\n  (< (abs (- a b)) (abs (-\
    \ c a)))\n  (< (abs (- b a)) (abs (- a c))))\n", "  (< (abs (- a b) c) (abs (-\
    \ b a) c)))\n", "  (cond\n    [(= (mod a b) (mod b c)) true]\n    [(= (mod b a)\
    \ (mod c b)) true]\n    [else false]))\n", "  (and (eq? b (car a)) \n       (eq?\
    \ c (cdr a)))\n  )\n", "  (< (abs a) \n     (abs b))\n  (< (abs a) \n     (abs\
    \ c))\n  (< (abs b) \n     (abs c))\n  (< (abs b) \n     (abs a)))\n</cell>\n\
    <code language=racket-language>", "  (> (abs (- a b))\n     (abs (- b c)))\n \
    \ (and (> (abs (- a c))\n           (abs (- b c)))\n       (> (abs (- a b))\n\
    \           (abs (- c b))))\n  (and (> (abs (- a c))\n           (abs (- b c)))\n\
    \       (> (abs (- b a))\n           (abs (- c a))))\n  (and (> (abs (- a b))\n\
    \           (abs (- b c)))\n       (> (abs (- b a))\n           (abs (- c a)))\n\
    \       (> (abs (- a c))\n           (abs (- c b))))\n  (< (abs (- a b))\n   \
    \  (abs (- b c)))\n  (< (abs (- b a))\n     (abs (- c a)))\n  (< (abs (- a c))\n\
    \     (abs (- c b)))\n  (< (abs (- a b))\n     (abs (- c a)))\n  (< (abs (- a\
    \ c))\n     (abs (- c b))\n     (abs (- a b))))\n", "  (> (abs (- (* a b) (* c\
    \ a))) 0))\n", "  (< (abs a) (abs b) (abs c)) \n  (or (= (abs b) (abs c))\n  \
    \    (= (abs a) (abs c))))\n", "  (= (abs (- a b) c) (abs (- b c) a) (abs (- c\
    \ a) b)))\n", "  (cond\n    ((< (abs (- a b)) (abs (- c b)))\n     (and (= (abs\
    \ (- a b)) 0) (= (abs (- c b)) 0)))\n    (else #t)))\n", "  (cond\n    [(= a b)\n\
    \     (= b c)\n     (= c a)]\n    [(= c b)\n     (= a b)\n     (= b a)]\n    [(=\
    \ b c)\n     (= a c)\n     (= c b)]\n    [else\n     (not (= a b)) (not (= b c))\
    \ (not (= c a))]))\n", "  (< (abs (- a b)) (abs (- a c)) (abs (- b c)))\n  )\n",
  "  (< (abs (- a b)) (abs (- c a))))\n</code>\n<|/ q |>\n<| c |>\nWhat is the purpose\
    \ of the `loop` function?\n<|/ c |>\n<| c |>\nPlease provide a more detailed description\
    \ of what your program is supposed to do.\n<|/ c |>\n<| c |>\nThe loop function\
    \ is a helper function. It's used to go through all possible combinations.\n<|/\
    \ c |>\n<| c |>\nDo you also know what `loop` does? And `abs` doesn't take two\
    \ arguments. Did you mean `abs`?\n<|/ c |>\n<| c |>\nYes I do. I tried using abs\
    \ but it didn't work. Do you know what I should use instead of it?\n<|/ c |>\n\
    <| a tags=racket,recursion |>\n<code>", "  ((< a b)\n   (< (* b c) a)\n   (< c\
    \ (/ (+ a b) (* b c))))))\n", "  (cond\n    ((< a b) (<= c b) (<= b a))\n    ((<\
    \ b a) (<= c a) (<= a b))\n    ((< c b) (<= a a) (<= b c))\n    (else (<= a c)\
    \ (<= b c) (<= c a))))\n", "  (= (abs (a-b)) (abs (a+c)))\n  (= (abs (a-c)) (abs\
    \ (a-b)))\n  (= (abs (b-c)) (abs (a-c)))\n  (= (abs (b-a)) (abs (b+c)))\n  (=\
    \ (abs (c-a)) (abs (b-a)))\n  (= (abs (c-b)) (abs (b-b)))\n  (= (abs (c-c)) (abs\
    \ (b-b)))\n  (= (abs (d-a)) (abs (c-a)))\n  (= (abs (d-b)) (abs (c-b)))\n  (=\
    \ (abs (d-c)) (abs (c-c)))\n  (= (abs (e-a)) (abs (d-a)))\n  (= (abs (e-b)) (abs\
    \ (d-b)))\n  (= (abs (e-c)) (abs (d-c)))\n  (= (abs (f-b)) (abs (e-c)))\n  (=\
    \ (abs (f-c)) (abs (e-b)))\n  (= (abs (g-a)) (abs (f-c)))\n  (= (abs (g-b)) (abs\
    \ (f-b)))\n  (= (abs (g-c)) (abs (f-a)))\n  (= (abs (h-a)) (abs (g-c)))\n  (=\
    \ (abs (h-b)) (abs (g-b)))\n  (= (abs (h-c)) (abs (g-a)))\n  (= (abs (i-a)) (abs\
    \ (h-c)))\n  (= (abs (i-b)) (abs (h-b)))\n  (= (abs (i-c)) (abs (h-a)))\n  (=\
    \ (abs (j-a)) (abs (i-c)))\n  (= (abs (j-b)) (abs (i-b)))\n  (= (abs (j-c)) (abs\
    \ (i-a)))\n  (= (abs (k-b)) (abs (j-c)))\n  (= (abs (k-c)) (abs (j-b)))\n  (=\
    \ (abs (k-a)) (abs (j-a)))\n  (= (abs (l-b)) (abs (k-c)))\n  (= (abs (l-c)) (abs\
    \ (k-b)))\n  (= (abs (l-a)) (abs (k-a)))\n  (= (abs (m-a)) (abs (l-b)))\n", " \
    \ (< (abs (- a b)) (abs (- a c)))\n  (< (abs (- a c)) (abs (- b c)))\n  (< (abs\
    \ (- b c)) (abs (- c a)))\n  (< (abs (- c a)) (abs (- c b)))\n  (< (abs (- c b))\
    \ (abs (- c c)))\n  (< (abs (- c c)) (abs (- a b)))\n  (< (abs (- c a)) (abs (-\
    \ a c)))\n  (< (abs (- a b)) (abs (- b a)))\n  (< (abs (- a c)) (abs (- c a)))\n\
    \  (< (abs (- a b)) (abs (- b c)))\n  (< (abs (- b a)) (abs (- a b)))\n  (< (abs\
    \ (- b c)) (abs (- c b)))\n  (< (abs (- b a)) (abs (- c a)))\n  (< (abs (- a c))\
    \ (abs (- c c)))\n  (< (abs (- c a)) (abs (- a c)))\n  (< (abs (- a b)) (abs (-\
    \ b a)))\n  (< (abs (- c b)) (abs (- b c))))\n", "  (< (abs (- (square a) (square\
    \ b) (square c)))\n      (abs (- (square a) (square b) (square c))))) ;; 90 degree",
  "  (= a b c))\n", "  (= (angle-triangle a b c) 0))\n", "  (< (abs (- b a)) (abs\
    \ (- c a))) (abs (- c b))))\n", "  (= (modulo b (/ a c)) 0))\n", "  (or (= a b)\n\
    \      (= c a)\n      (= c b)))\n", "  (cond\n    ;; a and c are both positive\n\
    \    ((and (- (abs (- a c)) b) (abs (- b c))) (cond (and (abs (- a c)) (abs (-\
    \ b c))) (= (abs (- a b)) (abs (- c b)))) (= (abs (- a b)) (abs (- c b)))) (=\
    \ (abs (- a b)) (abs (- c b)))) \n    ;; a is positive, b is positive, and c is\
    \ positive\n    ((and (abs (- a b)) (abs (- b c)) (abs (- c a))) (cond (and (abs\
    \ (- a b)) (abs (- b c)) (abs (- c a))) (= (abs (- a b)) (abs (- c b)))) (= (abs\
    \ (- a b)) (abs (- c b)))) (= (abs (- a b)) (abs (- c b)))) \n    ;; a is positive,\
    \ b is positive, and c is negative\n    ((and (abs (- a b)) (abs (- b c)) (- (abs\
    \ (- c a)) (abs (- c b))))  (cond (and (abs (- a b)) (abs (- b c)) (- (abs (-\
    \ c a)) (abs (- c b))))  (= (abs (- a b)) (abs (- c b)))) (= (abs (- a b)) (abs\
    \ (- c b)))) (= (abs (- a b)) (abs (- c b)))) \n    ;; a is positive, b is negative,\
    \ and c is positive\n    ((and (abs (- a b)) (- (abs (- c a)) (abs (- c b)) )\
    \ (abs (- b c)))  (cond (and (abs (- a b)) (- (abs (- c a)) (abs (- c b)) ) (abs\
    \ (- b c)))  (= (abs (- a b)) (abs (- c b)))) (= (abs (- a b)) (abs (- c b))))\
    \ (= (abs (- a b)) (abs (- c b)))) \n    ;; a is positive, b is negative, and\
    \ c is negative\n    ((and (abs (- a b)) (- (abs (- c a)) (- (abs (- c b)) (abs\
    \ (- a b))) (abs (- b c)))  (cond (and (", "  (> (- b (* a (cdr c))) (abs (- a\
    \ (* b (cdr c)))))\n  )", "  (< a b c)\n  (< a c b)\n  (< b c a))", "  (cond\n\
    \    [(< (abs (- a b) c) (abs (- b c) a) (abs (- c a) b) c))\n     #t]\n    [(<\
    \ (abs (- a b) c) (abs (- b c) a) (abs (- c a) b) c))\n     #f]\n    [(< (abs\
    \ (- a b) c) (abs (- b c) a) (abs (- c a) b) c))\n     #t]\n    [#f #f]))\n",
  "  (< (abs a) (abs b))\n  (< (abs b) (abs c))\n  (< (abs c) (abs a))\n  (< (abs\
    \ a) (abs b))\n  (< (abs a) (abs c))\n  (< (abs b) (abs c))\n  (< (abs b) (abs\
    \ a))\n  (< (abs c) (abs a)))\n", "  (cond\n    [(and (>= b a) (>= c a)) #t]\n\
    \    [(and (>= b c) (>= a c)) #t]\n    [else #f]))\n", "  (and (< (* a b) (* b\
    \ c)) (< (* a c) (* c b))))\n", '  (< (- c b) a))', "  ;; Equations:\n  ;;   x^2\
    \ + y^2 = z^2 = a^2 + b^2\n  ;;   z = sqrt(x^2 + y^2)\n  ;;   xy/z = y/z\n  ;;\
    \   a = y/z\n  ;;   xy/a = x/a\n  ;;   xy/b = x/b\n  ;;   y/z = sqrt(a^2 + b^2)\n\
    \  ;;   y/a = y/z\n  ;;   y/b = y/z\n  ;;   xy/b = y/a\n  ;;   y/a = sqrt(a^2\
    \ + b^2)\n  (define x (sqrt ((square (square a)) (square (square b)) (square (square\
    \ c))))\n  (define y (average (square a) (b c))\n    (define z (square x))\n \
    \   (define xyz y/z)\n    (define y (average y (z))\n      (define z (square x))\n\
    \      (define xy x/y)\n      (define xy (xyz xy)\n        (define x (xy xy)\n\
    \          (define y (average y (xyz x)))\n          (define z (square y))\n \
    \         (define y (average z (y)))\n          (define y (average y z))\n   \
    \       (define x (xy x)))\n        (define y (average x y))\n        (define\
    \ y (average y (square (square a)) (square (square b)) (square (square c)))))\n\
    \    (define y (average y (square (square a)) (square (square b))))\n    (define\
    \ y (average y z))\n    (define y (average y (average y z)))\n    (define x y)\n\
    \    (define x (average x y))\n    (define y (average y (square (square a))))\n\
    \    (define y (average y (square (square b))))\n    (define y (square (average\
    \ y z)))\n    (define y (average y (square (average y z))))\n    (define x (average\
    \ x y))\n    (define y (square (average y z)))\n    (define y (average y (square\
    \ (square a))))\n    (define y (square (average y (b c)))))\n  (= x y))\n", '  (=
    a b) (= a c) (= a c) (= b c) (= b (- c a)))', "  (= (abs (- a b)) (abs (- b c)))\
    \ (= (abs (- a c)) (abs (- b c))))\n  )", "  (< (abs a) (abs b) (abs c)))\n",
  "  (cond\n    ((= (mod-2 a b) 0)\n     (and (= b c) (= a c)))\n    ((= (mod-2 a\
    \ c) 0)\n     (and (= c b) (= a b)))\n    ((= (mod-2 b c) 0)\n     (and (= c a)\
    \ (= b a)))\n    ((= (mod-2 c a) 0)\n     (and (= a b) (= c b)))\n    ((= (mod-2\
    \ a b) 0)\n     (and (= b c) (= a c)))\n    ((= (mod-2 a c) 0)\n     (and (= c\
    \ b) (= a b)))\n    ((= (mod-2 b c) 0)\n     (and (= c a) (= b a)))\n    ((= (mod-2\
    \ c a) 0)\n     (and (= a b) (= c b))))", "  (< a b) (< b c) (< c a))\n  ", " \
    \ (< (abs a) 180) (< (abs b) 180) (< (abs c) 180))\n    ", "  (or (> (abs (- a\
    \ b)) (abs (- c b)))\n      (> (abs (- a c)) (abs (- b c)))\n      (> (abs (-\
    \ b c)) (abs (- c a))))))\n", "  (= (* a b) (* c a)))\n</code>\n<|/ q tags=racket,scheme\
    \ |>\n<| a tags=racket,scheme |>\nYou're close. Since you're using lists as data\
    \ structures, you'll want to use list comprehensions. Something like this should\
    \ do the trick:\n<code>", "  (cond\n    [(zero? a) (or (zero? b) (zero? c))\n\
    \    (and (equal? a b) (equal? b c))\n    (and (equal? a c) (equal? c b))\n  \
    \  (and (equal? b c) (equal? b a))\n    (and (equal? b a) (equal? c a))\n    (and\
    \ (equal? c a) (equal? c b))\n    (and (equal? c b) (equal? c a))\n    (and (equal?\
    \ a b) (equal? b c))\n    (and (equal? a c) (equal? c b))\n    (and (equal? b\
    \ c) (equal? c a))\n    (and (equal? b a) (equal? c a))\n    (and (equal? c a)\
    \ (equal? c b))\n    (and (equal? c b) (equal? c a))]]\n    [else false]))\n",
  "  (< a b c || (< b c a || < c a b)))\n", "  (< (- b (* a c)) (abs (- a b)))\n \
    \ (< (abs (- b a)) (abs (- b c)))\n  (< (abs (- c b)) (abs (- a c))))\n", "  ((=\
    \ a b) (= a c) (= b c))\n  (= (mod a b) 0) (= (mod b c) 0) (= (mod c a) 0))\n\
    \  (or (= (mod a c) 0) (= (mod b c) 0) (= (mod c b) 0))\n  (or (= (mod a b) 0)\
    \ (= (mod b a) 0) (= (mod a c) 0))\n  (or (= (mod a c) 0) (= (mod b c) 0) (= (mod\
    \ c a) 0))\n  (or (= (mod a b) 0) (= (mod b a) 0) (= (mod a c) 0))\n  (or (= (mod\
    \ a c) 0) (= (mod b c) 0) (= (mod c a) 0)))\n", '  (< (abs (- a b) c) (abs (-
    a c) b) c))', "  (< (abs a) (abs b) (abs c)) \n  (< (abs a) (abs b) (cdr c)) \n\
    \  (< (abs a) (cdr b) (cdr c)))\n", "  (< (* b c) (* a b)))\n", "  (or (= (mod\
    \ c b) 0)\n      (= (mod c a) 0)))\n", "  (< (abs (- (- a b) (- c b))) 0.0000000001))\n",
  "  (< (abs (- b c)) (abs (- a c))))\n", "  (cond\n    [(or (= a b) (= b c)) #t]\n\
    \    [(or (= a c) (= c b)) #f]\n    [else (and (or (= a b) (= b c) (= c a)) #t)]))\n",
  "  (< (abs a) (abs b) (abs c)))\n", "  (or (> (abs (- a b) c) (abs (- b c) a))\n\
    \      (> (abs (- b c) a) (abs (- c a) b))))\n", "  (< (abs (- a b)) (abs (- b\
    \ c))))\n", "  (< (* a (- b c)) (sqrt (+ (* a (- b b)) (* a b c))))\n  )\n", " \
    \ (< (* a b) (* c b)))\n", "  (= (mod-pi a) (mod-pi b))\n  (= (mod-pi a) (mod-pi\
    \ c))\n  (= (mod-pi b) (mod-pi c)))\n", "  (if (> a b c)\n      (if (> b c a)\
    \ \n          (if (> c a b) \n              (= (mod c a) (mod b a))\n        \
    \      (= (mod c b) (mod a b))\n              (= (mod c c) (mod a c)))\n     \
    \     (= (mod b a) (mod c a))\n          (= (mod b b) (mod c b))\n          (=\
    \ (mod b c) (mod c c))\n          (= (mod c a) (mod b a))\n          (= (mod c\
    \ b) (mod a b))\n          (= (mod c c) (mod a c))\n          (= (mod a a) (mod\
    \ b b))\n          (= (mod a b) (mod c b))\n          (= (mod a c) (mod c c))\n\
    \          (= (mod b a) (mod c a))\n          (= (mod b b) (mod c b))\n      \
    \    (= (mod b c) (mod c c))\n          (= (mod c a) (mod b a))\n          (=\
    \ (mod c b) (mod a b))\n          (= (mod c c) (mod a c))\n          (= (mod a\
    \ a) (mod b b))\n          (= (mod a b) (mod c b))\n          (= (mod a c) (mod\
    \ c c))\n          (= (mod b a) (mod c a))\n          (= (mod b b) (mod c b))\n\
    \          (= (mod b c) (mod c c))\n          (= (mod c a) (mod b a))\n      \
    \    (= (mod c b) (mod a b))\n          (= (mod c c) (mod a c))\n          (=\
    \ (mod a a) (mod b b))\n          (= (mod a b) (mod c b))\n          (= (mod a\
    \ c) (mod c c))\n          (= (mod b a) (mod c a))\n          (= (mod b b) (mod\
    \ c b))\n          (= (mod b c) (mod c c))\n          (= (mod c a) (mod b a))\n\
    \          (= (mod c b) (mod a b))\n          (= (mod c c) (mod a c))\n      \
    \    (= (mod a a) (mod b b))\n          (= (mod a b) (mod c b))\n          (=\
    \ (mod a c) (mod c c))\n          (= (mod b a", "  (= (abs (- a b) c) (abs (-\
    \ a c) b)))\n", "  (< (abs (a-b)) (abs (a-c)))\n  (< (abs (b-a)) (abs (b-b)))\n\
    \  (< (abs (c-a)) (abs (c-b)))\n  (> (abs (a-b)) (abs (b-a)))\n  (> (abs (b-a))\
    \ (abs (c-a)))\n  (> (abs (c-a)) (abs (c-b)))\n  (> (abs (a-c)) (abs (b-c)))\n\
    \  (> (abs (b-c)) (abs (c-c)))\n  (> (abs (c-c)) (abs (c-a)))\n  (> (abs (a-c))\
    \ (abs (a-b)))\n  (> (abs (b-a)) (abs (b-b)))\n  (> (abs (c-a)) (abs (c-b)))\n\
    \  (> (abs (a-b)) (abs (a-c)))\n  (> (abs (b-b)) (abs (b-a)))\n  (> (abs (c-b))\
    \ (abs (c-a)))\n  (> (abs (a-c)) (abs (a-b)))\n  (> (abs (b-b)) (abs (b-a)))\n\
    \  (> (abs (c-b)) (abs (c-a)))\n  (> (abs (a-c)) (abs (a-b)))\n  (> (abs (b-b))\
    \ (abs (b-a)))\n  (> (abs (c-b)) (abs (c-a)))\n  (> (abs (a-c)) (abs (a-b)))\n\
    \  (> (abs (b-b)) (abs (b-a)))\n  (> (abs (c-b)) (abs (c-a)))\n  (> (abs (a-c))\
    \ (abs (a-b)))\n  (> (abs (b-b)) (abs (b-a)))\n  (> (abs (c-b)) (abs (c-a))))\n\
    </code>\n<|/ a tags=racket,scheme dscore=3 |>\n<| c |>\nI like the idea of using\
    \ sets to solve this problem, because I can see that the problem could be simplified\
    \ even more by treating `#lang racket` sets as sets, and then checking if `#t\
    \ (set-contains #t a-b b-c) #t (set-contains #t c-b b-c)`.\n<|/ c |>\n<| c |>\n\
    I think this is more elegant than the accepted answer :) I wanted to compare performance\
    \ of the answers here and this answer but ended up comparing the two at only 5\
    \ lines of code.\n<|/ c |>\n<| c |>", "  (< (abs (- a b) (- (abs a) (abs b) c))\
    \ (abs c)))\n", "  (or (= a b) (= a c) (= b c)))\n", "  (cond\n    [(< a b)  \
    \       (> (* c b) (* a (c-b)))]\n    [(> b c)         (> (* a (c-b)) (* c (a-b)))]\n\
    \    [else            true]))\n", "  (cond (<= c b) (<= a c)  (<= b a))\n  (cond\
    \ (<= c b) (<= a b) (<= b c))\n  (cond (<= c a) (<= b a) (<= a c))\n  (cond (<=\
    \ a b) (<= b a) (<= a c))\n  (cond (<= b c) (<= c a) (<= a b))\n  (cond (<= b\
    \ a) (<= a b) (<= a c))\n  (cond (<= a c) (<= a b) (<= b c))\n  (cond (<= c b)\
    \ (<= c a) (<= a b))\n  (cond (<= c a) (<= a c) (<= b a))\n  (cond (<= a b) (<=\
    \ b a) (<= b c))\n  (cond (<= a c) (<= a b) (<= b c))\n  (cond (<= b c) (<= c\
    \ a) (<= a b))\n  (cond (<= b a) (<= a b) (<= a c))\n  (cond (<= a c) (<= a b)\
    \ (<= b c))\n  (cond (<= c a) (<= c b) (<= a b))\n  (cond (<= c b) (<= a c) (<=\
    \ a b))\n  (cond (<= b a) (<= a b) (<= a c))\n  (cond (<= a c) (<= a b) (<= b\
    \ c))\n  (cond (<= b c) (<= c a) (<= a b))\n  (cond (<= b a) (<= a b) (<= a c))\n\
    \  (cond (<= a c) (<= a b) (<= b c))\n  (cond (<= a b) (<= a c) (<= b a))\n  (cond\
    \ (<= a c) (<= a b) (<= b c))\n  (cond (<= b a) (<= a b) (<= a c))\n  (cond (<=\
    \ a c) (<= a b) (<= b c))\n  (cond (<= a b) (<= a c) (<= b a))\n  (cond (<= a\
    \ c) (<= a b) (<= b c))\n  (cond (<= b a) (<= a b) (<= a c))\n  (cond (<= a c)\
    \ (<= a b) (<= b c))\n  (cond (<= a b) (<= a c) (<= b a))\n  (cond (<= a c) (<=\
    \ a b) (<= b c))\n  (cond (<= b a) (<= a b) (<= a c))\n  (cond (<= a c) (<= a\
    \ b) (", "  (< (abs (- a b)) (abs (- b c)) (abs (- c a))))\n", "  (cond ((and\
    \ (>= a b) (>= b c)) (eq? (mod a b) (mod b c)))\n        ((and (>= a c) (>= c\
    \ b)) (eq? (mod a c) (mod c b)))\n        ((and (>= a b) (>= b c)) (eq? (mod a\
    \ b) (mod b c)))\n        (else (eq? (mod a c) (mod c b))))))\n</cell>\n<cell>\n\
    #lang racket\n", "  (<= (abs (- (sqrt (a * b) ) (sqrt (a * c) )) (sqrt (abs (a\
    \ * c) ))))\n  ; For each of the three sides of a triangle, check the angles against\
    \ the \n  ; 180 degrees and 90 degrees.\n  )\n", "  (< (abs (- (square a) (square\
    \ b) (square c))) 90))\n", "  (< (abs (- (length a) (length b))) (abs (- (length\
    \ a) (length c))))\n  (< (abs (- (length b) (length c))) (abs (- (length b) (length\
    \ a))))\n  (< (abs (- (length c) (length a))) (abs (- (length c) (length b))))\n\
    \  (< (abs (- (length a) (length b))) (abs (- (length c) (length a))))\n  (< (abs\
    \ (- (length b) (length c))) (abs (- (length c) (length b))))\n  (< (abs (- (length\
    \ a) (length c))) (abs (- (length b) (length c))))\n  (< (abs (- (length b) (length\
    \ c))) (abs (- (length a) (length c))))\n  (< (abs (- (length c) (length a)))\
    \ (abs (- (length b) (length a))))\n  (< (abs (- (length a) (length b))) (abs\
    \ (- (length c) (length b))))\n  (< (abs (- (length b) (length c))) (abs (- (length\
    \ a) (length c))))\n  (< (abs (- (length c) (length a))) (abs (- (length b) (length\
    \ a))))\n  (< (abs (- (length a) (length b))) (abs (- (length c) (length b))))\n\
    \  (< (abs (- (length b) (length c))) (abs (- (length a) (length c))))\n  (< (abs\
    \ (- (length c) (length a))) (abs (- (length b) (length a))))\n  (< (abs (- (length\
    \ a) (length b))) (abs (- (length c) (length b))))\n  (< (abs (- (length b) (length\
    \ c))) (abs (- (length a) (length c))))\n  (< (abs (- (length c) (length a)))\
    \ (abs (- (length b) (length a))))\n  (< (abs (- (length a) (length b))) (abs\
    \ (- (length c) (length b))))\n  (< (abs (- (length b) (length c))) (abs (- (length\
    \ a) (length c))))\n  (< (abs (- (length c) (length a))) (abs (- (length b) (length\
    \ a))))\n  (< (abs (- (length a) (length b))) (abs (- (length c) (length b))))\n\
    \  (< (abs (- (length b) (length c))) (abs (- (length a) (length c))))\n  (< (abs\
    \ (- (length c) (length a))) (abs (- (length b) (length a))))\n  (< (abs (- (length\
    \ a) (length b))) (abs (- (length c) (length b))))", "  (= (abs (- b c)) (abs\
    \ (- a b))))\n", "  (= (abs (- a b c)) (/ a b)))\n", "  (< (* b c) (a+b+c)))\n",
  "  (> (abs a)\n     (abs b)\n     (abs c)))\n", "  (or (= a b)\n      (= b c)\n\
    \      (= c a)\n      (= (angle-triangle a b c) 180)))\n", "  (cond\n    [(= (modulo\
    \ b c) 0)\n     (= (modulo c a) 0)\n     (= (modulo c b) 0)\n     (= (modulo b\
    \ a) 0)]\n    [(and (= (mod b c) (mod c a))\n          (= (mod b a) (mod c b)))\n\
    \     (and (= (mod b c) (mod c a))\n          (= (mod b a) (mod c b)))\n     (and\
    \ (= (mod b c) (mod c b))\n          (= (mod b a) (mod c b)))\n     (and (= (mod\
    \ b c) (mod c b))\n          (= (mod b a) (mod c b)))]\n    [else false]))\n",
  "  (= (abs (- (- (+ a b) (+ c a)) (* b c))) 180))\n  ", "  (< (* (abs (- a b) (-\
    \ a c))) (* b c)))\n", "  ;; Calculate the hypotenuse of a right angle triangle\n\
    \  (* a (* b c)))\n", "  (let ((a (- (* a a) b)))\n    (let ((b (- (* b b) c)))\n\
    \      (let ((c (- (* c c) a)))\n        (= (/ (+ a b c) 2.0) 1.0)\n        (=\
    \ (/ (+ a c b) 2.0) 1.0)\n        (= (/ (+ b c a) 2.0) 1.0)\n        ;; All tests\
    \ passed\n        ))))\n", "  (< (abs a) (abs b) (abs c)))\n", "  (or (or (= a\
    \ b) (= b c) (= c a)) (= (angles a b) 0) (= (angles b c) 0) (= (angles c a) 0)\
    \ \n      (= (angles a c) 0) (= (angles b c) 180) (= (angles c a) 180)))\n", " \
    \ (< (abs (- a b)) (abs (- a c)) (abs (- b c)))\n  )\n", "  (= (modulo c a) (modulo\
    \ b a)))\n", "  (= (* a b c) (* b (/ c a) (* c a b))))\n", "  (cond \n    ((=\
    \ a b) (or (= c b) (= a c)))\n    ((= a c) (or (= c b) (= a b)))\n    (else (=\
    \ c b))))\n", "  (< (abs a) (abs b))\n  (< (abs a) (abs c))\n  (< (abs b) (abs\
    \ c)))\n", "  (= (* a b) (* b c)) \n  (= (* a c) (* c b))\n  (= (* b c) (- (*\
    \ a a) (* a b)))\n  (= (* c b) (- (* b b) (* b c)))\n  (= (* c c) (* c a)))\n",
  '  (< (* a b) (* c a)))', "  (and (not (= a b) (= a c))\n       (not (= b c) (=\
    \ c a))))", "  (< (abs (- a b))\n     (abs (- b c))\n     (abs (- a c))))\n",
  "  (< (abs (- a b)) (abs (- c b))))\n", "  (equal? a c b (< a c b)))\n", "  (= a\
    \ b c)\n  (or (> a b) (< a c) (> b c)))\n", "  (< (abs (- b a))(abs (- c a)))\n\
    \  (< (abs (- c b))(abs (- a b))))", "  (= (* a b c) (- (* (- a b) c) (* a c b))))\n",
  "  (< (abs (- a b)) (abs (- c b)))) \n", "  (= (angle-triangle a b c) 0))\n", " \
    \ (< (abs (- (* a b) (* b c))) 180)\n  (< 180 0))\n", "  (< (- c b) (* a a)))\n",
  "  (< (abs (- a b)) (abs (- c b)))) ; check length\n", "  (= (abs (- c a)) (abs\
    \ (- b c))))\n", "  (< (* a b) (* c a)) (< (* c b) (* a c)))\n)\n", "  (<= a b\
    \ c)\n  (<= b c a)\n  (<= c a b))\n", "  (> (abs (- a b) (- a c) (- b c))\n  \
    \   (- b (sqrt (a*a + b*b + c*c)))))\n", '  (< (* c a) (* b c)))', "  (if (= a\
    \ b c) (or (= b a) (= c a))\n      (= a c) (or (= c a) (= b a))\n      (or (=\
    \ b c) (= c b))\n      (= b a) (or (= c a) (= b c)))\n    )\n  )\n", "  (< (abs\
    \ (- a b)) (abs (- b c))))\n</cell>\n<text>\nTesting the Solution\nRun the code\
    \ cell below to test your solution.  If the code cell returns PASSED, then you\
    \ have correctly implemented the solution described in the writeup.  Please continue\
    \ on to the next code cell to see if your result is correct.\n\n\n</text>\n<cell>\n\
    # Run your solution against the provided test cases.", "  (<= c a))\n", "  (=\
    \ (* a b) (* c a)))\n", "  (= (* a b c) (+ (* b c a) (* c a b))))\n", "  \n  (cond\n\
    \    ((= a b)\n     (= b c)\n     (= a c))\n    ((and (> a b)\n         (> b c))\n\
    \     (or (> a c)\n         (> c b)))\n    ((and (> a c)\n         (> c b))\n\
    \     (or (> a b)\n         (> b c)))\n    ((and (> a b)\n         (> b c))\n\
    \     (or (> a c)\n         (> c b)))\n    ((and (> a c)\n         (> c b))\n\
    \     (or (> a b)\n         (> b c)))\n    (else\n     (and (> a b)\n        \
    \  (> b c))\n     (or (> a c)\n          (> c b))\n     (and (> a c)\n       \
    \   (> c b))\n     (or (> a b)\n          (> b c)))\n  ))\n", "  (< a b c))\n\
    </cell>\n<cell>\n#lang racket\n", "  (= (abs (- (* a b) c) (* b c) (* a c))\n\
    \     (/ -(* (* a b) c) (* b c) (* a c))))\n", "  (= a (* b c) \n       (/ (-\
    \ (* b a) (* c a)) \n          (+ (* b b) (* c c)))))\n", "  (<= (abs (- a b)\
    \ (- a c) (- b c))\n      360.0))\n", "  (< (abs (- a b)) (abs (- b c)))\n  (<\
    \ (abs (- b c)) (abs (- a c)))\n  (< (abs (- c a)) (abs (- a b))))\n", "  (and\
    \ (= (length a) (length b) (length c)) \n       (< (angle-to b c) 90) \n     \
    \  (< (angle-to c a) 90)))\n", "  (and (= b c) (= a b) (= a c) (= b (/ c a)))\n\
    )\n", "  (< (sqrt (a*a+b*b+c*c)) (* 0.5 (* a b c))))\n", "  (or (= a b) (= a c)\
    \ (= b c)))\n", "  (<= a b c))\n", "  (and (> a b) (> b c) (> c a)))\n", "  (=\
    \ (angle-rad a b c) 90))\n", "  (cond\n    [(= a b) (= b c) (= a c)]\n    [else\
    \ (= a c)\n      (cond\n        [(= b c) (= 90 a)]\n        [else (= 90 a)]\n\
    \      )]\n    [else (= b c)\n      (cond\n        [(= c a) (= 90 b)]\n      \
    \  [else (= 90 b)]\n      )]\n    [else (= c a)\n      (cond\n        [(= a b)\
    \ (= 90 c)]\n        [else (= 90 c)]\n      )]\n    [else #f]\n  ))\n", "  (=\
    \ (angle-between-sides a b c) (angle-between-sides a c b)))\n", "  (< (/ a b)\
    \ (/ c a) (/ c b)))\n", "  (< (abs a) (abs b) (abs c))\n  )\n", "  (cond\n   \
    \ [(and (integer? a) (integer? b) (integer? c)) (< a b c)]\n    [(and (integer?\
    \ a) (integer? b) (integer? c)) (< b c a)]\n    [(and (integer? a) (integer? b)\
    \ (integer? c)) (< c a b)]\n    [else false]))\n", "  (= (mod a b)\n     (mod\
    \ c b)))\n", "  (= a (/ b c))\n  (= (* b c) (/ (- a b) (car c)))))\n", "  (cond\
    \ ((< a b) (< b c)) (< a c) (< b c))\n        (else #t)))\n", "  (< (abs (- (squared\
    \ a) (squared b) (squared c))) \n      (abs (- (squared a) (squared b)) (squared\
    \ c))))\n", "  (and (> a b) (> b c) (> c a)))\n", "  (< (abs (- (+ a b c) 180))\
    \ 180))\n", "  (= a b) (= b c) (= a c))\n", "  (< (abs (- a b)) (abs (- c b)))\n\
    \  (< (abs (- a c)) (abs (- b c)))\n  (< (abs (- b c)) (abs (- a c))))\n", " \
    \ (equal? a (/ b c))\n  (equal? b (/ c a))\n  (equal? c (/ a b)))\n", "  (= (sqrt\n\
    \       (+ (* a a) (* b b) (* c c))\n       (/ 2\n        (+ (* a b) (* b c))\n\
    \        (+ (* a c) (* c b)))))\n  )", "  (= ((cos (* 180 a)) (cos (* 180 b))\
    \ (cos (* 180 c)))\n     ((cos (* 180 a)) (cos (* 180 b)) (cos (* 180 c)) (* 90\
    \ a)))\n  )\n)\n\n#lang racket\n", "  (< (* a b) (* c c)))\n", "  (< (abs (- a\
    \ b) (- b c) (- c a))\n     (abs (- a c) (- c b) (- b a))))", "  (= (abs a) (abs\
    \ b) (abs c))\n  (< (abs a) (abs b) (abs c))\n  (< (abs a) (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n\
    \  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c))\n  (<= a (abs b) (abs c",
  "  (< (abs a) (abs b) (abs c))\n  (= (mod a b) 0)\n  (= (mod b c) 0)\n  (= (mod\
    \ c a) 0))\n", "  (= (angle-triangle a b c) 90)) ;; Angle must be 90 degree\n",
  "  (let ([adb (angles a b c)]\n        [bdc (angles b c d)]\n        [cda (angles\
    \ c d a)]\n        [acd (acos adb)]\n        [bcd (asin bdc)]\n        [cdc (asin\
    \ cda)]\n        [acb (acos bcd)]\n        [bcb (asin bcb)]\n        [cda (cos\
    \ cdc)]\n        [abd (cos acb)]\n        [abc (cos acb)]\n        [abc (cos acb)]\n\
    \        [acb (cos acb)]\n        [aca (-cos acb)]\n        [bda (-cos acb)]\n\
    \        [cdc (cos acb)]\n        [bcd (cos acb)]\n        [bca (cos acb)]\n \
    \       [bcaa (-cos acb)]\n        [bcbb (-cos acb)]\n        [bccc (-cos acb)]\n\
    \        [aca (cos acb)]\n        [acb (cos acb)]\n        [abd (cos acb)]\n \
    \       [abe (cos abd)]\n        [bca (cos acb)]\n        [bcd (cos acb)]\n  \
    \      [bcd (cos acb)]\n        [aca (cos acb)]\n        [acb (cos acb)]\n   \
    \     [bcb (cos acb)]\n        [cda (cos acb)]\n        [bda (-cos acb)]\n   \
    \     [bcb (-cos acb)]\n        [abe (cos acb)]\n        [bcb (-cos acb)]\n  \
    \      [bda (-cos acb)]\n        [acb (-cos acb)]\n        [abb (-cos abd)]\n\
    \        [abd (cos abb)]\n        [aca (cos abb)]\n        [abb (cos abb)]\n \
    \       [bca (cos acb)]\n        [bcd (cos acb)]\n        [bce (cos abd)]\n  \
    \      [cda (cos acb)]\n        [bce (cos abd)]\n        [abb (cos abb)]\n   \
    \     [acb (-cos abd)]\n        [abb (-cos abb)]\n        [acb (-cos abb)]\n \
    \       [abb (-co", "  (< (* a c) (* b b)))\n", '  (= (* a b c) (* a (- b c) (*
    b (- a c)))))', "  (= a b) (= b c) (= c a) (= b (* 3 c))\n  (= a c) (= c b) (=\
    \ b a) (= c (* 3 b)))\n", "  (cond [(< a b) False]\n        [(< b c) False]\n\
    \        [(< c a) False]\n        [(= a b) (= b c) (= c a)]\n        [else (=\
    \ (mod b 2) 0) (= (mod c 2) 0)]\n  ))\n#lang racket\n", "  (cond\n    [(and (<=\
    \ a b) (<= b c)) #t]\n    [(and (<= a c) (<= c b)) #t]\n    [(and (<= a b) (<=\
    \ b c)) #f]\n    [(and (<= c b) (<= b a)) #f]))", "  (< (* a b c) 1))\n", "  (let\
    \ ((a (- a b) (- a c) (- b c)))\n    (cond\n      [(< (abs (- a b) (- a c)) (abs\
    \ (- b c) (- c a)))]\n      [(< (abs (- a b) (- b c)) (abs (- c a) (- a c)))]\n\
    \      [else false]\n    )\n  )\n)\n", "  (= c a) (= c b))\n", "  (< (abs (- a\
    \ b) c) 1.0))\n", "  (= (abs a-b) (abs c-a) \n     `(or (and (= (abs a-b) (abs\
    \ c-a)) (= a c)\n                      (= a b)) (and (= (abs a-b) (abs c-a)) (=\
    \ b c))))\n  )\n", "  (= (* a b) (* c a) ))\n", "  (< (abs a) (abs b) (abs c))\
    \ #f)\n  ", "  (or (= (* a b) (* b c))\n      (= (* a c) (* b c))\n      (= (*\
    \ b a) (* c c))))\n", "  ((= (mod-tri c a) 0) (= (mod-tri c b) 0) (= (mod-tri\
    \ c c) 0)\n   (= (mod-tri b c) 0)\n   (= (mod-tri a b) 0)\n   (= (mod-tri a c)\
    \ 0)\n   (= (mod-tri b c) 0)\n   (= (mod-tri c a) 0)))\n", "  (equal? (length\
    \ a) (length b) (length c)))\n", "  (< (* b c) (* a b)))\n", "  (<= (* a b) (*\
    \ c a) (* c b)))\n</code>\nAnd here's some simple tests that you can run to verify\
    \ that your solution is correct.\n<code>", "  (= (mod (a-b) 2) 0))\n", "  (< (abs\
    \ (- a b)) (abs (- a c))) (< (abs (- b c)) (abs (- b a))))\n)\n", "  (= (mod a\
    \ 2) (mod b 2) (mod c 2)))\n", "  (cond\n    [(< a b) (and (< b c) (< c a) (<\
    \ 90 c a))]\n    [else false]))\n", "  (< (abs a) (abs b) (abs c))) ; If either\
    \ are negative then they don't form a right angle\n", "  (and (> (abs a) b) (>\
    \ (abs b) c) (> (abs c) a)))\n", "  (< (expt b 2) (expt c 2)) \n  (< (expt a 2)\
    \ (expt b 2)) \n  (< (expt a 2) (expt c 2)) \n  (< (expt c 2) (expt b 2)))\n",
  "  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  ;; Your code here.\n\
    \  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n)", "  (and (>\
    \ a b) (> b c) (> c a) (= (mod a b) (mod b c)) (= (mod a c) (mod c b))))\n", " \
    \ (< (abs a) (abs b) (abs c)))\n", "  (= (expt a 2) (expt b 2)))\n  (= (expt b\
    \ 2) (expt c 2)))\n  (= (expt c 2) (expt a 2)))\n", "  ((> a b) (> b c) (> c a))\n\
    )\n", "  (= (abs (- a b) (- c b))\n     (/ a c)))\n", "  (= (modulo (+ a b c)\
    \ 360) 90))\n</cell>\n<code language=dyalog-kernel>\n#lang racket\n", "  (cond\n\
    \    [(and (>= a b) (>= b c)) True]\n    [(and (>= a c) (>= c b)) True]\n    [(and\
    \ (>= b a) (>= a c)) True]\n    [(and (>= b c) (>= c a)) True]\n    [(and (>=\
    \ c a) (>= a b)) True]\n    [(and (>= c b) (>= b a)) True]\n    [(and (>= a a)\
    \ (>= b b) (>= c c)) True]\n    [(and (>= b b) (>= c c)) True]\n    [(and (>=\
    \ c c)) True]\n    [else False]))\n", "  (cond ((= b c) (= a b))\n        ((=\
    \ c a) (= a b))\n        ((= c b) (= a b))\n        ((< a b) (< b c) (< c a))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
