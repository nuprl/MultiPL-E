{
  "name": "mbpp_247_lps",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the length of the longest palindromic subsequence in the given string.\n#\n# $1 is a string\nlps() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    lps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TENS FOR TENS\") = \"5\" ]]\n    [[ $(candidate \"CARDIO FOR CARDS\") = \"7\" ]]\n    [[ $(candidate \"PART OF THE JOURNEY IS PART\") = \"9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a arr\n    for ((i=0; i<len; i++)); do\n        arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                arr[i,j]=$((arr[i+1,j-1]+2))\n            else\n                arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0;i<len;i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2;k<=len;k++)); do\n        for ((i=0;i<len-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                lps[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=$((lps[i+1,j-1]+2))\n            else\n                lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local string=\"$1\"\n  local length=${#string}\n  local i j k\n  local lps_table=()\n\n  for ((i=0; i<length; i++)); do\n    lps_table[i,i]=1\n  done\n\n  for ((k=2; k<=length; k++)); do\n    for ((i=0; i<length-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${string:i:1} == ${string:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps_table[i,j]=2\n        else\n          lps_table[i,j]=$((lps_table[i+1,j-1]+2))\n        fi\n      else\n        lps_table[i,j]=$((lps_table[i+1,j]>lps_table[i,j-1]?lps_table[i+1,j]:lps_table[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${lps_table[0,length-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=$1\n  local n=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))]>L[$((i+1)),$j]?L[$i,$((j-1))]:L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((n-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          table[i,j]=2\n        else\n          table[i,j]=$((table[i+1,j-1]+2))\n        fi\n      else\n        table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n      fi\n    done\n  done\n  echo ${table[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n\n    # Create a table to store results of subproblems\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[$i]=()\n        for ((j=0; j<len; j++)); do\n            table[$i][$j]=0\n        done\n    done\n\n    # Strings of length 1 are palindrome of length 1\n    for ((i=0; i<len; i++)); do\n        table[$i][$i]=1\n    done\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # http://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n    # cl is length of substring\n    for ((cl=2; cl<=len; cl++)); do\n        for ((i=0; i<len-cl+1; i++)); do\n            j=$((i+cl-1))\n            if [ \"${str:$i:1}\" == \"${str:$j:1}\" ]; then\n                table[$i][$j]=$((2+table[$((i+1))][$((j-1))]))\n            else\n                table[$i][$j]=$((table[$((i+1))][$j] > table[$i][$((j-1))] ? table[$((i+1))][$j] : table[$i][$((j-1))]))\n            fi\n        done\n    done\n\n    echo ${table[0][$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                table[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                table[i,j]=$((table[i+1,j-1]+2))\n            else\n                table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n            fi\n        done\n    done\n    echo ${table[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                table[i,j]=$((table[i+1,j-1]+2))\n            else\n                table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n            fi\n        done\n    done\n    echo ${table[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps[$len,$len]\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps=()\n\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[$i,$j]=2\n                else\n                    lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n            fi\n        done\n    done\n\n    echo ${lps[0,$((len-1))]}",
    "  # If string is empty, return 0\n  if [[ -z \"$1\" ]]; then\n    echo 0\n    return\n  fi\n\n  # If string has only one character, return 1\n  if [[ \"${#1}\" -eq 1 ]]; then\n    echo 1\n    return\n  fi\n\n  # If first and last characters are same, then length of LPS is 2 + LPS of remaining string\n  if [[ \"${1:0:1}\" == \"${1: -1}\" ]]; then\n    echo $((2 + $(lps \"${1:1:$((${#1} - 2))}\")))\n    return\n  fi\n\n  # If first and last characters are not same, then length of LPS is MAX of LPS of remaining string\n  echo $((\n    $(lps \"${1:1}\") > $(lps \"${1:0:$((${#1} - 1))}\") ?\n      $(lps \"${1:1}\") :\n      $(lps \"${1:0:$((${#1} - 1))}\")\n  ))",
    "    local str=$1\n    local len=${#str}\n    local i=0\n    local j=0\n    local l=0\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[$i,$i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:$i:1} == ${str:$j:1} && $l == 2 ]]; then\n                table[$i,$j]=2\n            elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                table[$i,$j]=$((table[$((i+1)),$((j-1))]+2))\n            else\n                table[$i,$j]=$((table[$((i+1)),$j]>table[$i,$((j-1))]?table[$((i+1)),$j]:table[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${table[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local n=$(echo \"$1\" | wc -c)\n  local i j k\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[$i,$j]=$((2+L[$((i+1)),$((j-1))]))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))] > L[$((i+1)),$j] ? L[$i,$((j-1))] : L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((n-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}"
  ]
}