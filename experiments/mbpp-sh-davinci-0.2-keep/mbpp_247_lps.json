{
  "name": "mbpp_247_lps",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the length of the longest palindromic subsequence in the given string.\n#\n# $1 is a string\nlps() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    lps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TENS FOR TENS\") = \"5\" ]]\n    [[ $(candidate \"CARDIO FOR CARDS\") = \"7\" ]]\n    [[ $(candidate \"PART OF THE JOURNEY IS PART\") = \"9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a arr\n    for ((i=0; i<len; i++)); do\n        arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                arr[i,j]=$((arr[i+1,j-1]+2))\n            else\n                arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0;i<len;i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2;k<=len;k++)); do\n        for ((i=0;i<len-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                lps[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=$((lps[i+1,j-1]+2))\n            else\n                lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local string=\"$1\"\n  local length=${#string}\n  local i j k\n  local lps_table=()\n\n  for ((i=0; i<length; i++)); do\n    lps_table[i,i]=1\n  done\n\n  for ((k=2; k<=length; k++)); do\n    for ((i=0; i<length-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${string:i:1} == ${string:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps_table[i,j]=2\n        else\n          lps_table[i,j]=$((lps_table[i+1,j-1]+2))\n        fi\n      else\n        lps_table[i,j]=$((lps_table[i+1,j]>lps_table[i,j-1]?lps_table[i+1,j]:lps_table[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${lps_table[0,length-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=$1\n  local n=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))]>L[$((i+1)),$j]?L[$i,$((j-1))]:L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((n-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          table[i,j]=2\n        else\n          table[i,j]=$((table[i+1,j-1]+2))\n        fi\n      else\n        table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n      fi\n    done\n  done\n  echo ${table[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n\n    # Create a table to store results of subproblems\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[$i]=()\n        for ((j=0; j<len; j++)); do\n            table[$i][$j]=0\n        done\n    done\n\n    # Strings of length 1 are palindrome of length 1\n    for ((i=0; i<len; i++)); do\n        table[$i][$i]=1\n    done\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # http://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n    # cl is length of substring\n    for ((cl=2; cl<=len; cl++)); do\n        for ((i=0; i<len-cl+1; i++)); do\n            j=$((i+cl-1))\n            if [ \"${str:$i:1}\" == \"${str:$j:1}\" ]; then\n                table[$i][$j]=$((2+table[$((i+1))][$((j-1))]))\n            else\n                table[$i][$j]=$((table[$((i+1))][$j] > table[$i][$((j-1))] ? table[$((i+1))][$j] : table[$i][$((j-1))]))\n            fi\n        done\n    done\n\n    echo ${table[0][$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                table[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                table[i,j]=$((table[i+1,j-1]+2))\n            else\n                table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n            fi\n        done\n    done\n    echo ${table[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                table[i,j]=$((table[i+1,j-1]+2))\n            else\n                table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n            fi\n        done\n    done\n    echo ${table[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps[$len,$len]\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps=()\n\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[$i,$j]=2\n                else\n                    lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n            fi\n        done\n    done\n\n    echo ${lps[0,$((len-1))]}",
    "  # If string is empty, return 0\n  if [[ -z \"$1\" ]]; then\n    echo 0\n    return\n  fi\n\n  # If string has only one character, return 1\n  if [[ \"${#1}\" -eq 1 ]]; then\n    echo 1\n    return\n  fi\n\n  # If first and last characters are same, then length of LPS is 2 + LPS of remaining string\n  if [[ \"${1:0:1}\" == \"${1: -1}\" ]]; then\n    echo $((2 + $(lps \"${1:1:$((${#1} - 2))}\")))\n    return\n  fi\n\n  # If first and last characters are not same, then length of LPS is MAX of LPS of remaining string\n  echo $((\n    $(lps \"${1:1}\") > $(lps \"${1:0:$((${#1} - 1))}\") ?\n      $(lps \"${1:1}\") :\n      $(lps \"${1:0:$((${#1} - 1))}\")\n  ))",
    "    local str=$1\n    local len=${#str}\n    local i=0\n    local j=0\n    local l=0\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[$i,$i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:$i:1} == ${str:$j:1} && $l == 2 ]]; then\n                table[$i,$j]=2\n            elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                table[$i,$j]=$((table[$((i+1)),$((j-1))]+2))\n            else\n                table[$i,$j]=$((table[$((i+1)),$j]>table[$i,$((j-1))]?table[$((i+1)),$j]:table[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${table[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local n=$(echo \"$1\" | wc -c)\n  local i j k\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[$i,$j]=$((2+L[$((i+1)),$((j-1))]))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))] > L[$((i+1)),$j] ? L[$i,$((j-1))] : L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((n-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local len=${#1}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local max=0\n  local arr=()\n  for ((i=0; i<len; i++)); do\n    arr[i]=0\n  done\n  for ((i=0; i<len; i++)); do\n    arr[i*len+i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=i+k-1\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        arr[i*len+j]=$((arr[(i+1)*len+j-1]+2))\n      else\n        arr[i*len+j]=$((arr[i*len+j-1]>arr[(i+1)*len+j]?arr[i*len+j-1]:arr[(i+1)*len+j]))\n      fi\n    done\n  done\n  echo ${arr[(len-1)*len+len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0;i<len;i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local max=0\n  local arr=()\n  local arr2=()\n  local arr3=()\n  local arr4=()\n  local arr5=()\n  local arr6=()\n  local arr7=()\n  local arr8=()\n  local arr9=()\n  local arr10=()\n  local arr11=()\n  local arr12=()\n  local arr13=()\n  local arr14=()\n  local arr15=()\n  local arr16=()\n  local arr17=()\n  local arr18=()\n  local arr19=()\n  local arr20=()\n  local arr21=()\n  local arr22=()\n  local arr23=()\n  local arr24=()\n  local arr25=()\n  local arr26=()\n  local arr27=()\n  local arr28=()\n  local arr29=()\n  local arr30=()\n  local arr31=()\n  local arr32=()\n  local arr33=()\n  local arr34=()\n  local arr35=()\n  local arr36=()\n  local arr37=()\n  local arr38=()\n  local arr39=()\n  local arr40=()\n  local arr41=()\n  local arr42=()\n  local arr43=()\n  local arr44=()\n  local arr45=()\n  local arr46=()\n  local arr47=()\n  local arr48=()\n  local arr49=()\n  local arr50=()\n  local arr51=()\n  local arr52=()\n  local arr53=()\n  local arr54=()\n  local arr55=()\n  local arr56=()\n  local arr57=()\n  local arr58=()\n  local arr59=()\n  local arr60=()\n  local arr61=()\n  local arr62=()\n  local arr63=()\n  local arr64=()\n  local arr65=()\n  local arr66=()\n  local arr",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ \"${str:$i:1}\" == \"${str:$j:1}\" ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps_arr[$i,$j]=2\n                else\n                    lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${lps_arr[0,$((len-1))]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 ]]; then\n                if [[ ${str:i:1} == ${str:j:1} ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=1\n                fi\n            else\n                if [[ ${str:i:1} == ${str:j:1} ]]; then\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                else\n                    dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n                fi\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local l=()\n  for ((i=0; i<len; i++)); do\n    l[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        l[i,j]=$((l[i+1,j-1]+2))\n      else\n        l[i,j]=$((l[i,j-1]>l[i+1,j]?l[i,j-1]:l[i+1,j]))\n      fi\n    done\n  done\n  echo ${l[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    dp[$i,$j]=2\n                else\n                    dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local n=$((${#1} - 1))\n    local i=0\n    local j=0\n    local L=()\n    for ((i=0; i<=n; i++)); do\n        L[$i,$i]=1\n    done\n    for ((i=2; i<=n; i++)); do\n        for ((j=0; j<=n-$i; j++)); do\n            local k=$((j+i-1))\n            if [[ ${1:$j:1} == ${1:$k:1} ]]; then\n                L[$j,$k]=$((2 + L[$((j+1)),$((k-1))]))\n            else\n                L[$j,$k]=$((${L[$j,$((k-1))]} > ${L[$((j+1)),$k]} ? ${L[$j,$((k-1))]} : ${L[$((j+1)),$k]}))\n            fi\n        done\n    done\n    echo ${L[0,$n]}",
    "  local str=$1\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n  local cccc=0\n  local dddd=0\n  local eee",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))] > dp[$((i+1)),$j] ? dp[$i,$((j-1))] : dp[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local t=0\n    local arr=()\n    local arr2=()\n    local arr3=()\n    local arr4=()\n    local arr5=()\n    local arr6=()\n    local arr7=()\n    local arr8=()\n    local arr9=()\n    local arr10=()\n    local arr11=()\n    local arr12=()\n    local arr13=()\n    local arr14=()\n    local arr15=()\n    local arr16=()\n    local arr17=()\n    local arr18=()\n    local arr19=()\n    local arr20=()\n    local arr21=()\n    local arr22=()\n    local arr23=()\n    local arr24=()\n    local arr25=()\n    local arr26=()\n    local arr27=()\n    local arr28=()\n    local arr29=()\n    local arr30=()\n    local arr31=()\n    local arr32=()\n    local arr33=()\n    local arr34=()\n    local arr35=()\n    local arr36=()\n    local arr37=()\n    local arr38=()\n    local arr39=()\n    local arr40=()\n    local arr41=()\n    local arr42=()\n    local arr43=()\n    local arr44=()\n    local arr45=()\n    local arr46=()\n    local arr47=()\n    local arr48=()\n    local arr49=()\n    local arr50=()\n    local arr51=()\n    local arr52=()\n    local arr53=()\n    local arr54=()\n    local arr55=()\n    local arr56=()\n    local arr57=()\n    local arr58=()\n    local arr59=()\n    local arr60=()\n    local arr61=()\n    local arr62=()\n    local arr63=()\n    local arr64=()\n    local arr65=()\n",
    "  local len=${#1}\n  local i j k\n  local -a L\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} && k == 2 ]]; then\n        L[i,j]=2\n      elif [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          L[i,j]=2\n        else\n          L[i,j]=$((L[i+1,j-1]+2))\n        fi\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local i j k l\n  local len=${#1}\n  local -a arr\n  for ((i=0; i<len; i++)); do\n    arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          arr[i,j]=2\n        else\n          arr[i,j]=$((arr[i+1,j-1]+2))\n        fi\n      else\n        arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${arr[0,len-1]}",
    "  local n=$((${#1}-1))\n  local i j k l\n  local -a L\n  for ((i=0; i<=n; i++)); do\n    L[i,i]=1\n  done\n  for ((l=2; l<=n+1; l++)); do\n    for ((i=0; i<=n-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${1:i:1} == ${1:j:1} && $l == 2 ]]; then\n        L[i,j]=2\n      elif [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((${L[i+1,j]}>${L[i,j-1]}?${L[i+1,j]}:${L[i,j-1]}))\n      fi\n    done\n  done\n  echo ${L[0,n]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n\n  # create a 2D array\n  local -a arr\n  for ((i=0; i<len; i++)); do\n    arr[$i]=()\n    for ((j=0; j<len; j++)); do\n      arr[$i][$j]=0\n    done\n  done\n\n  # fill the array\n  for ((k=0; k<len; k++)); do\n    for ((i=0, j=k; j<len; i++, j++)); do\n      if ((i == j)); then\n        arr[$i][$j]=1\n      elif ((str[$i] == str[$j])); then\n        arr[$i][$j]=$((arr[$((i+1))][$((j-1))] + 2))\n      else\n        arr[$i][$j]=$((arr[$i][$((j-1))] > arr[$((i+1))][$j] ? arr[$i][$((j-1))] : arr[$((i+1))][$j]))\n      fi\n    done\n  done\n\n  echo ${arr[0][$((len-1))]}",
    "  local s=$1\n  local n=${#s}\n  local i j k\n  local lps=()\n  for ((i=0; i<n; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${s:i:1} == ${s:j:1} && $k == 2 ]]; then\n        lps[i,j]=2\n      elif [[ ${s:i:1} == ${s:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))]>L[$((i+1)),$j]?L[$i,$((j-1))]:L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && k == 2 ]]; then\n        lps[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if ((k == 2)); then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local n=${#str}\n    local i j k\n    local L=()\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    L[i,j]=2\n                else\n                    L[i,j]=$((L[i+1,j-1]+2))\n                fi\n            else\n                L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local -a dp\n  for ((i=0;i<len;i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2;l<=len;l++)); do\n    for ((i=0;i<len-l+1;i++)); do\n      j=$((i+l-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          dp[i,j]=2\n        else\n          dp[i,j]=$((dp[i+1,j-1]+2))\n        fi\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k\n  local l=()\n  for ((i=0;i<n;i++)); do\n    l[$i,$i]=1\n  done\n  for ((k=2;k<=n;k++)); do\n    for ((i=0;i<n-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        l[$i,$j]=$((2+l[$((i+1)),$((j-1))]))\n      else\n        l[$i,$j]=$((l[$((i+1)),$j]>l[$i,$((j-1))]?l[$((i+1)),$j]:l[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${l[0,$((n-1))]}",
    "\tlocal str=\"$1\"\n\tlocal len=${#str}\n\tlocal i j k\n\tlocal dp=()\n\n\tfor ((i=0; i<len; i++)); do\n\t\tdp[i,i]=1\n\tdone\n\n\tfor ((k=2; k<=len; k++)); do\n\t\tfor ((i=0; i<len-k+1; i++)); do\n\t\t\tj=$((i+k-1))\n\t\t\tif [[ ${str:i:1} == ${str:j:1} ]]; then\n\t\t\t\tdp[i,j]=$((dp[i+1,j-1]+2))\n\t\t\telse\n\t\t\t\tdp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n\t\t\tfi\n\t\tdone\n\tdone\n\n\techo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n\n    for ((i = 0; i < len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k = 2; k <= len; k++)); do\n        for ((i = 0; i < len - k + 1; i++)); do\n            j=$((i + k - 1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1] + 2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j] > dp[i,j-1] ? dp[i+1,j] : dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local s=$1\n    local n=${#s}\n    local i j k\n    local L=()\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((max ${L[i+1,j]} ${L[i,j-1]}))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps_len=0\n    local lps_str=\"\"\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps_arr[i,j]=2\n                else\n                    lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n                fi\n            else\n                lps_arr[i,j]=$((max ${lps_arr[i,j-1]} ${lps_arr[i+1,j]}))\n            fi\n        done\n    done\n    echo ${lps_arr[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local l=${#1}\n  local i=0\n  local j=0\n  local k=0\n  local m=0\n  local n=0\n  local t=0\n  local c=()\n  for ((i=0; i<l; i++)); do\n    c[i,i]=1\n  done\n  for ((k=2; k<=l; k++)); do\n    for ((i=0; i<l-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          c[i,j]=2\n        else\n          c[i,j]=$((c[i+1,j-1]+2))\n        fi\n      else\n        m=$((c[i,j-1]))\n        n=$((c[i+1,j]))\n        if [[ $m -gt $n ]]; then\n          c[i,j]=$m\n        else\n          c[i,j]=$n\n        fi\n      fi\n    done\n  done\n  echo ${c[0,l-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a L\n    for ((i=0; i<len; i++)); do\n        L[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                L[$i,$j]=$((2+L[$((i+1)),$((j-1))]))\n            else\n                L[$i,$j]=$((L[$i,$((j-1))]>L[$((i+1)),$j]?L[$i,$((j-1))]:L[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${L[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((max ${lps[i,j-1]} ${lps[i+1,j]}))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "    local s=\"$1\"\n    local n=${#s}\n    local i j k\n    local l=()\n    for ((i=0;i<n;i++)); do\n        l[i,i]=1\n    done\n    for ((k=2;k<=n;k++)); do\n        for ((i=0;i<n-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                l[i,j]=$((2+l[i+1,j-1]))\n            else\n                l[i,j]=$((l[i+1,j]>l[i,j-1]?l[i+1,j]:l[i,j-1]))\n            fi\n        done\n    done\n    echo ${l[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i,j-1] > lps[i+1,j] ? lps[i,j-1] : lps[i+1,j]))\n      fi\n    done\n  done\n\n  echo ${lps[0,len-1]}",
    "  local s=\"$1\"\n  local n=${#s}\n  local i j k l\n  local dp=()\n  for ((i=0; i<n; i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2; l<=n; l++)); do\n    for ((i=0; i<n-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          dp[i,j]=2\n        else\n          dp[i,j]=$((dp[i+1,j-1]+2))\n        fi\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,n-1]}",
    "\tlocal str=$1\n\tlocal len=${#str}\n\tlocal i j k\n\tlocal dp=()\n\tfor ((i=0; i<len; i++)); do\n\t\tdp[i,i]=1\n\tdone\n\tfor ((k=2; k<=len; k++)); do\n\t\tfor ((i=0; i<len-k+1; i++)); do\n\t\t\tj=$((i+k-1))\n\t\t\tif [[ ${str:i:1} == ${str:j:1} ]]; then\n\t\t\t\tdp[i,j]=$((dp[i+1,j-1]+2))\n\t\t\telse\n\t\t\t\tdp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        table[i,j]=$((2 + table[i+1,j-1]))\n      else\n        table[i,j]=$((table[i+1,j] > table[i,j-1] ? table[i+1,j] : table[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${table[0,len-1]}",
    "    local n=$1\n    local i j k\n    local -a lps\n    for ((i=0; i<n; i++)); do\n        lps[$i,$i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${lps[$i+1,$j-1]} -eq $((k-2)) && ${s:$i:1} == ${s:$j:1} ]]; then\n                lps[$i,$j]=$((k))\n            else\n                lps[$i,$j]=$((k-1))\n            fi\n        done\n    done\n    echo ${lps[0,$((n-1))]}",
    "  local -i n=${#1}\n  local -i i j k\n  local -a lps\n  for ((i=0;i<n;i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2;k<=n;k++)); do\n    for ((i=0;i<n-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        if ((k==2)); then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local -a lps\n  for ((i=0;i<len;i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        lps[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local n=$((${#1}-1))\n    local i j k\n    local -a L\n    for ((i=0;i<=n;i++)); do\n        L[$i,$i]=1\n    done\n    for ((k=2;k<=n+1;k++)); do\n        for ((i=0;i<=n-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n                L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n            else\n                L[$i,$j]=$((L[$i,$((j-1))]>L[$((i+1)),$j]?L[$i,$((j-1))]:L[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${L[0,$n]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[$i,$j]=2\n        else\n          lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${lps[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n\n    # Create a table to store results of subproblems\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[$i]=()\n        for ((j=0; j<len; j++)); do\n            table[$i][$j]=0\n        done\n    done\n\n    # Strings of length 1 are palindrome of length 1\n    for ((i=0; i<len; i++)); do\n        table[$i][$i]=1\n    done\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n    # cl is length of substring\n    for ((cl=2; cl<=len; cl++)); do\n        for ((i=0; i<len-cl+1; i++)); do\n            j=$((i+cl-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                table[$i][$j]=$((table[$((i+1))][$((j-1))]+2))\n            else\n                table[$i][$j]=$((max ${table[$((i+1))][$j]} ${table[$i][$((j-1))]}))\n            fi\n        done\n    done\n\n    echo ${table[0][$((len-1))]}",
    "  local s=\"$1\"\n  local n=\"${#s}\"\n  local i j k\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        if ((k == 2)); then\n          L[i,j]=2\n        else\n          L[i,j]=$((L[i+1,j-1]+2))\n        fi\n      else\n        L[i,j]=$((L[i+1,j] > L[i,j-1] ? L[i+1,j] : L[i,j-1]))\n      fi\n    done\n  done\n  echo ${L[0,n-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                table[$i,$j]=$((table[$((i+1)),$((j-1))]+2))\n            else\n                table[$i,$j]=$((table[$i,$((j-1))]>table[$((i+1)),$j]?table[$i,$((j-1))]:table[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${table[0,$((len-1))]}",
    "    local -i n=${#1}\n    local -i i j k\n    local -a L\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                L[i,j]=$((2+L[i+1,j-1]))\n            else\n                L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "    local string=\"$1\"\n    local length=${#string}\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n    local aaaaa\n    local bbbbb\n    local ccccc\n    local ddddd\n    local e",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i,j-1]>dp[i+1,j]?dp[i,j-1]:dp[i+1,j]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          L[i,j]=2\n        else\n          L[i,j]=$((L[i+1,j-1]+2))\n        fi\n      else\n        L[i,j]=$(max ${L[i,j-1]} ${L[i+1,j]})\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local -i n=$((${#1}-1))\n  local -i i j k\n  local -a L\n  for ((i=0; i<=n; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=n+1; k++)); do\n    for ((i=0; i<=n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))]>L[$((i+1)),$j]?L[$i,$((j-1))]:L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$n]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i,j-1]>dp[i+1,j]?dp[i,j-1]:dp[i+1,j]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i,j-1] > L[i+1,j] ? L[i,j-1] : L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 && ${str:i:1} == ${str:j:1} ]]; then\n        lps[$i,$j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n      else\n        lps[$i,$j]=$((lps[$((i+1)),$j]>lps[$i,$((j-1))]?lps[$((i+1)),$j]:lps[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps[0,$((len-1))]}",
    "  local s=$1\n  local n=${#s}\n  local i j k l\n  local -a dp\n  for ((i=0; i<n; i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2; l<=n; l++)); do\n    for ((i=0; i<n-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          dp[i,j]=2\n        else\n          dp[i,j]=$((dp[i+1,j-1]+2))\n        fi\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,n-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n            else\n                lps[$i,$j]=$((lps[$i,$((j-1))] > lps[$((i+1)),$j] ? lps[$i,$((j-1))] : lps[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${lps[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local table=()\n\n    for ((i=0; i<len; i++)); do\n        table[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                table[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                table[i,j]=$((table[i+1,j-1]+2))\n            else\n                table[i,j]=$((table[i,j-1]>table[i+1,j]?table[i,j-1]:table[i+1,j]))\n            fi\n        done\n    done\n\n    echo ${table[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k\n  local -a l\n  for ((i=0;i<n;i++)); do\n    l[i,i]=1\n  done\n  for ((k=2;k<=n;k++)); do\n    for ((i=0;i<n-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        l[i,j]=$((2+l[i+1,j-1]))\n      else\n        l[i,j]=$((l[i,j-1]>l[i+1,j]?l[i,j-1]:l[i+1,j]))\n      fi\n    done\n  done\n  echo ${l[0,n-1]}",
    "  local n=${#1}\n  local i j k\n  local lps=()\n  for ((i=0; i<n; i++)); do\n    lps[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n        if ((k == 2)); then\n          lps[$i,$j]=2\n        else\n          lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        lps[$i,$j]=$((lps[$i,$((j-1))] > lps[$((i+1)),$j] ? lps[$i,$((j-1))] : lps[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${lps[0,$((n-1))]}",
    "  local len=${#1}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          L[i,j]=2\n        else\n          L[i,j]=$((L[i+1,j-1]+2))\n        fi\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${lps[0,len-1]}",
    "  local len=${#1}\n  local i j k\n  local -a lps\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} && $k == 2 ]]; then\n        lps[i,j]=2\n      elif [[ ${1:i:1} == ${1:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps_arr[i,j]=2\n        else\n          lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n        fi\n      else\n        lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          L[i,j]=2\n        else\n          L[i,j]=$((L[i+1,j-1]+2))\n        fi\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n\n  echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps_arr[i,j]=2\n        else\n          lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n        fi\n      else\n        lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((max ${dp[i+1,j]} ${dp[i,j-1]}))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n            fi\n        done\n    done\n\n    echo ${lps[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && k == 2 ]]; then\n        lps_arr[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n      else\n        lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "  local -i n=${#1}\n  local -i i j k\n  local -a L=()\n  for ((i=0; i<n; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=i+k-1\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,n-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n\n    for ((i=0;i<len;i++)); do\n        dp[i,i]=1\n    done\n\n    for ((l=2;l<=len;l++)); do\n        for ((i=0;i<len-l+1;i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i,j-1]>dp[i+1,j]?dp[i,j-1]:dp[i+1,j]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local s=$1\n    local n=${#s}\n    local i j k l\n    local -a dp\n    for ((i=0;i<n;i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2;l<=n;l++)); do\n        for ((i=0;i<n-l+1;i++)); do\n            j=$((i+l-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,n-1]}",
    "  local n=$1\n  local i j k\n  local -a a\n  for ((i=0; i<n; i++)); do\n    a[i,i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${a[i+1,j-1]} -eq $((k-2)) && ${a[i]} == ${a[j]} ]]; then\n        a[i,j]=$((k))\n      else\n        a[i,j]=$((k-1))\n      fi\n    done\n  done\n  echo ${a[0,n-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 && ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [ $k -eq 2 ] && [ ${str:$i:1} == ${str:$j:1} ]; then\n                L[$i,$j]=2\n            elif [ ${str:$i:1} == ${str:$j:1} ]; then\n                L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n            else\n                L[$i,$j]=$((max ${L[$((i+1)),$j]} ${L[$i,$((j-1))]}))\n            fi\n        done\n    done\n    echo ${L[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n\n    # Create a table to store results of subproblems\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[$i]=()\n        for ((j=0; j<len; j++)); do\n            table[$i][$j]=0\n        done\n    done\n\n    # Strings of length 1 are palindrome of length 1\n    for ((i=0; i<len; i++)); do\n        table[$i][$i]=1\n    done\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n    # cl is length of substring\n    for ((cl=2; cl<=len; cl++)); do\n        for ((i=0; i<len-cl+1; i++)); do\n            j=$((i+cl-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                table[$i][$j]=$((table[$((i+1))][$((j-1))] + 2))\n            else\n                table[$i][$j]=$((max ${table[$((i+1))][$j]} ${table[$i][$((j-1))]}))\n            fi\n        done\n    done\n\n    echo ${table[0][$((len-1))]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  # initialize the lps array\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[$i,$j]=2\n        else\n          lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n      fi\n    done\n  done\n\n  echo ${lps[0,$((len-1))]}",
    "  local s=$1\n  local n=${#s}\n  local i j k\n  local L=()\n  for ((i=0;i<n;i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2;k<=n;k++)); do\n    for ((i=0;i<n-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        L[$i,$j]=$((2+L[$((i+1)),$((j-1))]))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))]>L[$((i+1)),$j]?L[$i,$((j-1))]:L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((n-1))]}",
    "  local s=$1\n  local n=${#s}\n  local i j k l\n  local L=()\n  for ((i=0;i<n;i++)); do\n    L[i,i]=1\n  done\n  for ((l=2;l<=n;l++)); do\n    for ((i=0;i<n-l+1;i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          L[i,j]=2\n        else\n          L[i,j]=$((L[i+1,j-1]+2))\n        fi\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,n-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local len=${#1}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local max=0\n  local arr=()\n  for ((i=0; i<len; i++)); do\n    for ((j=0; j<len; j++)); do\n      arr[$((i*len+j))]=0\n    done\n  done\n  for ((i=0; i<len; i++)); do\n    arr[$((i*len+i))]=1\n  done\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [ \"${1:i:1}\" = \"${1:j:1}\" ] && [ $l -eq 2 ]; then\n        arr[$((i*len+j))]=2\n      elif [ \"${1:i:1}\" = \"${1:j:1}\" ]; then\n        arr[$((i*len+j))]=$((arr[$(((i+1)*len+j-1))]+2))\n      else\n        arr[$((i*len+j))]=$((arr[$((i*len+j-1))]>arr[$(((i+1)*len+j))]?arr[$((i*len+j-1))]:arr[$(((i+1)*len+j))]))\n      fi\n    done\n  done\n  echo ${arr[$(((len-1)*len+len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0;i<len;i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2;k<=len;k++)); do\n        for ((i=0;i<len-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[$i,$j]=2\n                else\n                    dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local table=()\n\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $l -eq 2 ]]; then\n          table[i,j]=2\n        else\n          table[i,j]=$((table[i+1,j-1]+2))\n        fi\n      else\n        table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${table[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                dp[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n      else\n        lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    L[i,j]=2\n                else\n                    L[i,j]=$((L[i+1,j-1]+2))\n                fi\n            else\n                L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0;i<len;i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                table[i,j]=$((table[i+1,j-1]+2))\n            else\n                table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n            fi\n        done\n    done\n    echo ${table[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n  local cccc=0\n  local dddd=0\n  local eee",
    "  local str=$1\n  local len=${#str}\n  local i j k\n\n  # Create a table to store results of subproblems\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[$i]=()\n    for ((j=0; j<len; j++)); do\n      table[$i][$j]=0\n    done\n  done\n\n  # Strings of length 1 are palindrome of length 1\n  for ((i=0; i<len; i++)); do\n    table[$i][$i]=1\n  done\n\n  # Build the table. Note that the lower diagonal values of table are\n  # useless and not filled in the process. The values are filled in a\n  # manner similar to Matrix Chain Multiplication DP solution (See\n  # https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/).\n  # cl is length of substring\n  for ((cl=2; cl<=len; cl++)); do\n    for ((i=0; i<len-cl+1; i++)); do\n      j=$((i+cl-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        table[$i][$j]=$((table[$((i+1))][$((j-1))] + 2))\n      else\n        table[$i][$j]=$((table[$i][$((j-1))] > table[$((i+1))][$j] ? table[$i][$((j-1))] : table[$((i+1))][$j]))\n      fi\n    done\n  done\n\n  echo ${table[0][$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                L[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local dp=()\n  local i j k\n\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))] > dp[$((i+1)),$j] ? dp[$i,$((j-1))] : dp[$((i+1)),$j]))\n      fi\n    done\n  done\n\n  echo ${dp[0,$((len-1))]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        table[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        table[i,j]=$((table[i+1,j-1]+2))\n      else\n        table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n      fi\n    done\n  done\n  echo ${table[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local max=0\n    local arr=()\n\n    for ((i=0; i<len; i++)); do\n        arr[i]=0\n    done\n\n    for ((i=0; i<len; i++)); do\n        arr[i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=i+k-1\n            if [[ ${str:i:1} == ${str:j:1} && k == 2 ]]; then\n                arr[i]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                arr[i]=$((arr[i+1]+2))\n            else\n                arr[i]=$((arr[i+1]>arr[i]?arr[i+1]:arr[i]))\n            fi\n        done\n    done\n\n    echo ${arr[0]}",
    "  local str=\"$1\"\n  local n=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        L[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,n-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${dp[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n  local cccc=0\n  local dddd=0\n  local eee",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && k == 2 ]]; then\n        lps_arr[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n      else\n        lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a L\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a arr\n\n    for ((i=0; i<len; i++)); do\n        arr[i,i]=1\n    done\n\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l == 2 ]]; then\n                    arr[i,j]=2\n                else\n                    arr[i,j]=$((arr[i+1,j-1]+2))\n                fi\n            else\n                arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${arr[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local matrix=()\n  for ((i=0; i<len; i++)); do\n    matrix[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        matrix[$i,$j]=$((matrix[$((i+1)),$((j-1))]+2))\n      else\n        matrix[$i,$j]=$((matrix[$((i+1)),$j]>matrix[$i,$((j-1))]?matrix[$((i+1)),$j]:matrix[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${matrix[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((max ${L[i+1,j]} ${L[i,j-1]}))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0;i<len;i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        L[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0;i<len;i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [ \"${str:i:1}\" == \"${str:j:1}\" ]; then\n        lps[i,j]=$((2+lps[i+1,j-1]))\n      else\n        lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_len=0\n    local lps_str=''\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[i]=0\n    done\n    for ((i=0; i<len; i++)); do\n        lps_arr[i]=1\n        for ((j=0; j<i; j++)); do\n            if [[ ${str:j:1} == ${str:i:1} ]]; then\n                lps_arr[j]=$((lps_arr[j]+1))\n                if [[ ${lps_arr[j]} -gt $lps_len ]]; then\n                    lps_len=${lps_arr[j]}\n                    lps_str=${str:j:lps_len}\n                fi\n            fi\n        done\n    done\n    echo \"$lps_str\"",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k l\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        if [[ $l -eq 2 ]]; then\n          dp[$i,$j]=2\n        else\n          dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 ]]; then\n                if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                    lps[$i,$j]=2\n                else\n                    lps[$i,$j]=1\n                fi\n            else\n                if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                    lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n                else\n                    lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n                fi\n            fi\n        done\n    done\n    echo ${lps[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          L[i,j]=2\n        else\n          L[i,j]=$((L[i+1,j-1]+2))\n        fi\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))] > L[$((i+1)),$j] ? L[$i,$((j-1))] : L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local -a dp\n\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          dp[$i,$j]=2\n        else\n          dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n      fi\n    done\n  done\n\n  echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a lps\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "    local -i n=${#1}\n    local -i i j k\n    local -a L\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                L[i,j]=$((2+L[i+1,j-1]))\n            else\n                L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "    local str=$1\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local max=0\n    local table=()\n\n    # init table\n    for ((i=0; i<len; i++)); do\n        table[$i,$i]=1\n    done\n\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                table[$i,$j]=$((table[$((i+1)),$((j-1))]+2))\n            else\n                table[$i,$j]=$((table[$i,$((j-1))] > table[$((i+1)),$j] ? table[$i,$((j-1))] : table[$((i+1)),$j]))\n            fi\n        done\n    done\n\n    echo ${table[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    dp[$i,$j]=2\n                else\n                    dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps=()\n\n    for ((i=0; i<len; i++)); do\n        lps[$i,$i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [ \"${str:$i:1}\" == \"${str:$j:1}\" ]; then\n                if [ $k -eq 2 ]; then\n                    lps[$i,$j]=2\n                else\n                    lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n            fi\n        done\n    done\n\n    echo ${lps[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_len=0\n    local lps_str=''\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if ((i+1 == j)); then\n                    lps_arr[i,j]=2\n                else\n                    lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n                fi\n            else\n                lps_arr[i,j]=$((lps_arr[i+1,j] > lps_arr[i,j-1] ? lps_arr[i+1,j] : lps_arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps_arr[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 && ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_arr[$i,$j]=2\n      elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n      else\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps_arr[i,j]=2\n                else\n                    lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n                fi\n            else\n                lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local max=0\n    local max_i=0\n    local max_j=0\n    local max_k=0\n    local max_l=0\n    local max_m=0\n    local max_n=0\n    local max_len=0\n    local max_str=''\n    local str_i=''\n    local str_j=''\n    local str_k=''\n    local str_l=''\n    local str_m=''\n    local str_n=''\n    local str_len=0\n    local str_rev=''\n    local str_rev_len=0\n    local str_rev_i=''\n    local str_rev_j=''\n    local str_rev_k=''\n    local str_rev_l=''\n    local str_rev_m=''\n    local str_rev_n=''\n    local str_rev_len=0\n    local str_rev_len_i=0\n    local str_rev_len_j=0\n    local str_rev_len_k=0\n    local str_rev_len_l=0\n    local str_rev_len_m=0\n    local str_rev_len_n=0\n    local str_rev_len_max=0\n    local str_rev_len_max_i=0\n    local str_rev_len_max_j=0\n    local str_rev_len_max_k=0\n    local str_rev_len_max_l=0\n    local str_rev_len_max_m=0\n    local str_rev_len_max_n=0\n    local str_rev_len_max_len=0\n    local str_rev_len_max_str=''\n    local str_rev_len_max_str_i=''\n    local str_rev_len_max_str_j=''\n    local str_rev_len_max_str_k=''\n    local str_rev_len_max_str_l=",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))] > dp[$((i+1)),$j] ? dp[$i,$((j-1))] : dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "  # Base case\n  if [[ $1 == \"\" ]]; then\n    echo 0\n    return\n  fi\n\n  # Recursive case\n  local len=${#1}\n  local first=${1:0:1}\n  local last=${1:len-1:1}\n  local sub=${1:1:len-2}\n\n  if [[ $first == $last ]]; then\n    echo $(( $(lps \"$sub\") + 2 ))\n  else\n    echo $(( $(lps \"${1:1:len-1}\") > $(lps \"${1:0:len-1}\") ? $(lps \"${1:1:len-1}\") : $(lps \"${1:0:len-1}\") ))\n  fi",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          L[i,j]=2\n        else\n          L[i,j]=$((L[i+1,j-1]+2))\n        fi\n      else\n        L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "\tlocal len=${#1}\n\tlocal i j k\n\tlocal -a lps_arr\n\tfor ((i=0; i<len; i++)); do\n\t\tlps_arr[i,i]=1\n\tdone\n\tfor ((k=2; k<=len; k++)); do\n\t\tfor ((i=0; i<len-k+1; i++)); do\n\t\t\tj=$((i+k-1))\n\t\t\tif [[ ${1:i:1} == ${1:j:1} && $k == 2 ]]; then\n\t\t\t\tlps_arr[i,j]=2\n\t\t\telif [[ ${1:i:1} == ${1:j:1} ]]; then\n\t\t\t\tlps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n\t\t\telse\n\t\t\t\tlps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 ]]; then\n                if [[ ${str:i:1} == ${str:j:1} ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=1\n                fi\n            else\n                if [[ ${str:i:1} == ${str:j:1} ]]; then\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                else\n                    dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n                fi\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k l\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2;l<=n;l++)); do\n    for ((i=0;i<n-l+1;i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((max ${dp[i+1,j]} ${dp[i,j-1]}))\n      fi\n    done\n  done\n  echo ${dp[0,n-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                lps[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=$((lps[i+1,j-1]+2))\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps_arr[i,j]=2\n                else\n                    lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n                fi\n            else\n                lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps_arr[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  # initialize lps array\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n\n  # compute lps\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[$i,$j]=2\n        else\n          lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        lps[$i,$j]=$((lps[$i,$((j-1))] > lps[$((i+1)),$j] ? lps[$i,$((j-1))] : lps[$((i+1)),$j]))\n      fi\n    done\n  done\n\n  echo ${lps[0,$((len-1))]}",
    "    local len=${#1}\n    local i j k l\n    local -a arr\n    for ((i=0; i<len; i++)); do\n        arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} && $k == 2 ]]; then\n                arr[i,j]=2\n            elif [[ ${1:i:1} == ${1:j:1} ]]; then\n                arr[i,j]=$((arr[i+1,j-1]+2))\n            else\n                arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${arr[0,len-1]}",
    "    local n=$(echo \"$1\" | wc -c)\n    local i j k\n    local L=()\n    for ((i=0; i<n; i++)); do\n        L[$i,$i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    L[$i,$j]=2\n                else\n                    L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                L[$i,$j]=$(echo -e \"${L[$i,$((j-1))]}\\n${L[$((i+1)),$j]}\" | sort -nr | head -n1)\n            fi\n        done\n    done\n    echo ${L[0,$((n-1))]}",
    "  local n=$1\n  local l=${#n}\n  local i j k\n  local -a c\n  for ((i=0; i<l; i++)); do\n    c[i,i]=1\n  done\n  for ((k=2; k<=l; k++)); do\n    for ((i=0; i<l-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${n:i:1} == ${n:j:1} ]]; then\n        c[i,j]=$((2+c[i+1,j-1]))\n      else\n        c[i,j]=$((c[i+1,j]>c[i,j-1]?c[i+1,j]:c[i,j-1]))\n      fi\n    done\n  done\n  echo ${c[0,l-1]}",
    "    local -i n=${#1}\n    local -i i j k\n    local -i L[n,n]\n    for ((i=0;i<n;i++)); do\n        L[i,i]=1\n    done\n    for ((k=2;k<=n;k++)); do\n        for ((i=0;i<n-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} && $k == 2 ]]; then\n                L[i,j]=2\n            elif [[ ${1:i:1} == ${1:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i,j-1]>dp[i+1,j]?dp[i,j-1]:dp[i+1,j]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 ]]; then\n                if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n                    lps_arr[i,j]=2\n                else\n                    lps_arr[i,j]=1\n                fi\n            else\n                if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n                    lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n                else\n                    lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n                fi\n            fi\n        done\n    done\n    echo ${lps_arr[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_table=()\n  for ((i=0; i<len; i++)); do\n    lps_table[i]=()\n    for ((j=0; j<len; j++)); do\n      lps_table[i][j]=0\n    done\n  done\n  for ((i=0; i<len; i++)); do\n    lps_table[i][i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps_table[i][j]=2\n        else\n          lps_table[i][j]=$((lps_table[i+1][j-1]+2))\n        fi\n      else\n        lps_table[i][j]=$((max ${lps_table[i][j-1]} ${lps_table[i+1][j]}))\n      fi\n    done\n  done\n  echo ${lps_table[0][len-1]}",
    "  local n=$(( ${#1} - 1 ))\n  local i j k l\n  local lps_arr=()\n  for (( i=0; i<=n; i++ )); do\n    lps_arr[$i,$i]=1\n  done\n  for (( l=2; l<=n+1; l++ )); do\n    for (( i=0; i<=n-l+1; i++ )); do\n      j=$(( i + l - 1 ))\n      if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          lps_arr[$i,$j]=2\n        else\n          lps_arr[$i,$j]=$(( lps_arr[$(( i + 1 )),$(( j - 1 ))] + 2 ))\n        fi\n      else\n        lps_arr[$i,$j]=$(( lps_arr[$(( i + 1 )),$j] > lps_arr[$i,$(( j - 1 ))] ? lps_arr[$(( i + 1 )),$j] : lps_arr[$i,$(( j - 1 ))] ))\n      fi\n    done\n  done\n  echo ${lps_arr[0,$n]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_matrix=()\n\n  for ((i=0; i<len; i++)); do\n    lps_matrix[$i,$i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$((j-1))]+2))\n      else\n        lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$j]>lps_matrix[$i,$((j-1))]?lps_matrix[$((i+1)),$j]:lps_matrix[$i,$((j-1))]))\n      fi\n    done\n  done\n\n  echo ${lps_matrix[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_matrix=()\n    for ((i=0; i<len; i++)); do\n        lps_matrix[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$((j-1))]+2))\n            else\n                lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$j]>lps_matrix[$i,$((j-1))]?lps_matrix[$((i+1)),$j]:lps_matrix[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${lps_matrix[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_table=()\n  for ((i=0; i<len; i++)); do\n    lps_table[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps_table[i,j]=2\n        else\n          lps_table[i,j]=$((lps_table[i+1,j-1]+2))\n        fi\n      else\n        lps_table[i,j]=$((\n          lps_table[i+1,j] > lps_table[i,j-1] ? lps_table[i+1,j] : lps_table[i,j-1]\n        ))\n      fi\n    done\n  done\n  echo ${lps_table[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps_arr[i,j]=2\n        else\n          lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n        fi\n      else\n        lps_arr[i,j]=$((lps_arr[i,j-1]>lps_arr[i+1,j]?lps_arr[i,j-1]:lps_arr[i+1,j]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0;i<len;i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2;k<=len;k++)); do\n        for ((i=0;i<len-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n\n    # Create a table to store results of subproblems\n    local table=()\n    for ((i=0;i<len;i++)); do\n        table[$i]=()\n        for ((j=0;j<len;j++)); do\n            table[$i][$j]=0\n        done\n    done\n\n    # Strings of length 1 are palindrome of length 1\n    for ((i=0;i<len;i++)); do\n        table[$i][$i]=1\n    done\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n    # cl is length of substring\n    for ((cl=2;cl<=len;cl++)); do\n        for ((i=0;i<len-cl+1;i++)); do\n            j=$((i+cl-1))\n            if [[ ${str:$i:1} == ${str:$j:1} && $cl == 2 ]]; then\n                table[$i][$j]=2\n            elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                table[$i][$j]=$((table[$((i+1))][$((j-1))]+2))\n            else\n                table[$i][$j]=$((table[$i][$((j-1))] > table[$((i+1))][$j] ? table[$i][$((j-1))] : table[$((i+1))][$j]))\n            fi\n        done\n    done\n\n    echo ${table[0][$((len-1))]}",
    "  local s=\"$1\"\n  local n=${#s}\n  local i j k l\n  local dp=()\n  for ((i=0; i<n; i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2; l<=n; l++)); do\n    for ((i=0; i<n-l+1; i++)); do\n      j=$((i+l-1))\n      if [ \"${s:i:1}\" == \"${s:j:1}\" ]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local arr=()\n  for ((i=0; i<len; i++)); do\n    arr[i]=()\n    for ((j=0; j<len; j++)); do\n      arr[i][j]=0\n    done\n  done\n  for ((l=1; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ $l -eq 1 ]]; then\n        arr[i][j]=1\n      elif [[ $l -eq 2 ]]; then\n        if [[ ${str:i:1} == ${str:j:1} ]]; then\n          arr[i][j]=2\n        else\n          arr[i][j]=1\n        fi\n      else\n        if [[ ${str:i:1} == ${str:j:1} ]]; then\n          arr[i][j]=$((arr[i+1][j-1]+2))\n        else\n          arr[i][j]=$((arr[i+1][j]>arr[i][j-1]?arr[i+1][j]:arr[i][j-1]))\n        fi\n      fi\n    done\n  done\n  echo ${arr[0][len-1]}"
  ]
}