{
  "name": "mbpp_605_prime_num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check if the given integer is a prime number.\n#\n# $1 is an integer\nprime_num() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    prime_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"13\") = \"true\" ]]\n    [[ $(candidate \"7\") = \"true\" ]]\n    [[ $(candidate \"-1010\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  if [ $1 -le 1 ]; then\n    echo \"false\"\n    return\n  fi\n\n  for (( i = 2; i < $1; i++ )); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n      echo \"false\"\n      return\n    fi\n  done\n\n  echo \"true\"",
    "  if [ $1 -lt 2 ]; then\n    echo \"false\"\n    return\n  fi\n\n  for ((i = 2; i < $1; i++)); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n      echo \"false\"\n      return\n    fi\n  done\n\n  echo \"true\"",
    "    if [[ $1 -le 1 ]]; then\n        echo \"false\"\n    elif [[ $1 -eq 2 ]]; then\n        echo \"true\"\n    else\n        for ((i=2; i<$1; i++)); do\n            if [[ $(( $1 % $i )) -eq 0 ]]; then\n                echo \"false\"\n                return\n            fi\n        done\n        echo \"true\"\n    fi",
    "    if [ $1 -lt 2 ]; then\n        echo \"$1 is not a prime number\"\n        return 0\n    fi\n\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            echo \"$1 is not a prime number\"\n            return 0\n        fi\n    done\n\n    echo \"$1 is a prime number\"",
    "    if [ $1 -lt 2 ]; then\n        echo \"The number $1 is not a prime number.\"\n        return 1\n    fi\n\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            echo \"The number $1 is not a prime number.\"\n            return 1\n        fi\n    done\n\n    echo \"The number $1 is a prime number.\"\n    return 0",
    "    if [ $1 -lt 2 ]; then\n        echo \"Not a prime number\"\n        return\n    fi\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            echo \"Not a prime number\"\n            return\n        fi\n    done\n    echo \"Prime number\"",
    "    local num=$1\n    local i=2\n    local flag=0\n\n    if [ $num -lt 2 ]; then\n        echo \"$num is not a prime number\"\n        return\n    fi\n\n    while [ $i -le $(($num / 2)) ]; do\n        if [ $(($num % $i)) -eq 0 ]; then\n            flag=1\n            break\n        fi\n        i=$(($i + 1))\n    done\n\n    if [ $flag -eq 0 ]; then\n        echo \"$num is a prime number\"\n    else\n        echo \"$num is not a prime number\"\n    fi",
    "    local num=$1\n    local i=2\n    while [ $i -lt $num ]; do\n        if [ $((num % i)) -eq 0 ]; then\n            echo \"$num is not a prime number\"\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    echo \"$num is a prime number\"\n    return 0",
    "    local num=$1\n    local i=2\n    while [ $i -lt $num ]; do\n        if [ $((num % i)) -eq 0 ]; then\n            echo \"$num is not a prime number\"\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    echo \"$num is a prime number\"\n    return 0",
    "    if [ $1 -lt 2 ]; then\n        echo \"false\"\n        return\n    fi\n\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n\n    echo \"true\"",
    "  if [ $1 -lt 2 ]; then\n    echo \"Not a prime number.\"\n    return 1\n  fi\n\n  for (( i=2; i<$1; i++ )); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n      echo \"Not a prime number.\"\n      return 1\n    fi\n  done\n\n  echo \"Prime number.\"\n  return 0",
    "    if [ $1 -lt 2 ]; then\n        echo \"false\"\n        return\n    fi\n\n    for (( i = 2; i < $1; i++ )); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            echo \"false\"\n            return\n        fi\n    done\n\n    echo \"true\"",
    "  if [ $1 -lt 2 ]; then\n    echo \"false\"\n  elif [ $1 -eq 2 ]; then\n    echo \"true\"\n  else\n    for (( i=2; i<$1; i++ )); do\n      if [ $(( $1 % $i )) -eq 0 ]; then\n        echo \"false\"\n        break\n      fi\n    done\n    echo \"true\"\n  fi",
    "    if [[ $1 -le 1 ]]; then\n        echo \"The number is not a prime number.\"\n        return 1\n    fi\n\n    for ((i = 2; i < $1; i++)); do\n        if [[ $(( $1 % $i )) -eq 0 ]]; then\n            echo \"The number is not a prime number.\"\n            return 1\n        fi\n    done\n\n    echo \"The number is a prime number.\"\n    return 0",
    "    if [[ $1 -eq 1 ]]; then\n        echo \"1 is not a prime number\"\n        return\n    fi\n\n    for ((i=2; i<$1; i++)); do\n        if [[ $(( $1 % $i )) -eq 0 ]]; then\n            echo \"$1 is not a prime number\"\n            return\n        fi\n    done\n\n    echo \"$1 is a prime number\"",
    "  if [ $1 -lt 2 ]; then\n    echo \"false\"\n    return\n  fi\n\n  for (( i=2; i<$1; i++ )); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n      echo \"false\"\n      return\n    fi\n  done\n\n  echo \"true\"",
    "  if [ $1 -lt 2 ]; then\n    echo \"Not a prime number\"\n    return\n  fi\n  for ((i=2; i<$1; i++)); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n      echo \"Not a prime number\"\n      return\n    fi\n  done\n  echo \"Prime number\"",
    "  if [[ $1 -lt 2 ]]; then\n    echo \"false\"\n    return\n  fi\n  for ((i=2; i<$1; i++)); do\n    if [[ $(( $1 % $i )) -eq 0 ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"",
    "    if [ $1 -le 1 ]; then\n        echo \"Not a prime number\"\n        return\n    fi\n\n    for (( i=2; i<$1; i++ )); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            echo \"Not a prime number\"\n            return\n        fi\n    done\n\n    echo \"Prime number\"",
    "  if [ $1 -lt 2 ]; then\n    echo \"false\"\n    return\n  fi\n  for ((i=2; i<$1; i++)); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\""
  ]
}