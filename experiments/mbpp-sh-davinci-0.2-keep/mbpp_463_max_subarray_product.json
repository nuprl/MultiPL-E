{
  "name": "mbpp_463_max_subarray_product",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a nums=($1)\n  local max_product=${nums[0]}\n  local min_product=${nums[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#nums[@]}; i++)); do\n    local num=${nums[$i]}\n    local max_product_candidate=$((max_product * num))\n    local min_product_candidate=$((min_product * num))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > num ? max_product : num))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < num ? min_product : num))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far",
    "  local -a array\n  local max_product=0\n  local product=0\n  local i=0\n  local j=0\n  local k=0\n  local n=0\n\n  # Convert space-separated list to array\n  array=($1)\n  n=${#array[@]}\n\n  # Find the maximum product subarray\n  for ((i=0; i<n; i++)); do\n    product=${array[i]}\n    for ((j=i+1; j<n; j++)); do\n      product=$((product * array[j]))\n      if [[ $product -gt $max_product ]]; then\n        max_product=$product\n      fi\n    done\n  done\n\n  echo $max_product",
    "  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$((${arr[i]}>0 ? $((tmp_max*${arr[i]})) : $((tmp_min*${arr[i]}))))\n    min=$((${arr[i]}>0 ? $((tmp_min*${arr[i]})) : $((tmp_max*${arr[i]}))))\n    max=$(($max>${arr[i]} ? $max : ${arr[i]}))\n    min=$(($min<${arr[i]} ? $min : ${arr[i]}))\n    result=$(($result>$max ? $result : $max))\n  done\n  echo $result",
    "    local -a arr=($1)\n    local -a max_arr=(${arr[0]})\n    local -a min_arr=(${arr[0]})\n    local max_product=${arr[0]}\n    local i=1\n    while [ $i -lt ${#arr[@]} ]; do\n        local max_tmp=$(( ${max_arr[$((i-1))]} * ${arr[$i]} ))\n        local min_tmp=$(( ${min_arr[$((i-1))]} * ${arr[$i]} ))\n        max_arr[$i]=$(max $max_tmp $min_tmp ${arr[$i]})\n        min_arr[$i]=$(min $max_tmp $min_tmp ${arr[$i]})\n        max_product=$(max $max_product ${max_arr[$i]})\n        i=$((i+1))\n    done\n    echo $max_product",
    "  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n\n    max_product=$((curr > curr*temp_max ? curr : curr*temp_max))\n    min_product=$((curr < curr*temp_min ? curr : curr*temp_min))\n\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far",
    "  local -a arr=(\"$@\")\n  local max_product=1\n  local min_product=1\n  local max_so_far=1\n  local i\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]} -gt 0 ]]; then\n      max_product=$((max_product * arr[i]))\n      min_product=$((min_product * arr[i]))\n    elif [[ ${arr[i]} -lt 0 ]]; then\n      local tmp=$max_product\n      max_product=$((min_product * arr[i]))\n      min_product=$((tmp * arr[i]))\n    else\n      max_product=1\n      min_product=1\n    fi\n\n    if [[ $max_so_far -lt $max_product ]]; then\n      max_so_far=$max_product\n    fi\n\n    if [[ $max_product -lt 1 ]]; then\n      max_product=1\n    fi\n  done\n\n  echo $max_so_far",
    "  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local curr=${arr[$i]}\n    local temp=$max\n    max=$(max $curr $((curr*max)) $((curr*min)))\n    min=$(min $curr $((curr*temp)) $((curr*min)))\n    result=$(max $result $max)\n  done\n  echo $result",
    "  local -a arr=(\"$@\")\n  local max_product=0\n  local max_ending_here=1\n  local min_ending_here=1\n\n  for i in \"${arr[@]}\"; do\n    if (( i > 0 )); then\n      max_ending_here=$(( max_ending_here * i ))\n      min_ending_here=$(( min_ending_here * i ))\n    else\n      local temp=$max_ending_here\n      max_ending_here=$(( min_ending_here * i ))\n      min_ending_here=$(( temp * i ))\n    fi\n\n    if (( max_ending_here > max_product )); then\n      max_product=$max_ending_here\n    fi\n\n    if (( max_ending_here < 1 )); then\n      max_ending_here=1\n    fi\n\n    if (( min_ending_here < 1 )); then\n      min_ending_here=1\n    fi\n  done\n\n  echo \"$max_product\"",
    "    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[i]}\n        local max_product_candidate=$((max_product*curr))\n        local min_product_candidate=$((min_product*curr))\n        max_product=$((max_product_candidate>min_product_candidate?max_product_candidate:min_product_candidate))\n        max_product=$((max_product>curr?max_product:curr))\n        min_product=$((max_product_candidate<min_product_candidate?max_product_candidate:min_product_candidate))\n        min_product=$((min_product<curr?min_product:curr))\n        max_so_far=$((max_so_far>max_product?max_so_far:max_product))\n    done\n    echo $max_so_far",
    "  local -a array=()\n  local -i i=0\n  local -i j=0\n  local -i max_product=0\n  local -i product=0\n  local -i tmp=0\n  local -i tmp_product=0\n\n  for i in $1; do\n    array+=($i)\n  done\n\n  for ((i=0; i<${#array[@]}; i++)); do\n    product=1\n    for ((j=i; j<${#array[@]}; j++)); do\n      product=$((product * array[j]))\n      if ((product > max_product)); then\n        max_product=$product\n      fi\n    done\n  done\n\n  echo $max_product",
    "  local array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=$max_product\n  for (( i=1; i<${#array[@]}; i++ )); do\n    local current=${array[$i]}\n    local max_product_candidate=$(( max_product * current ))\n    local min_product_candidate=$(( min_product * current ))\n    max_product=$(( max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate ))\n    max_product=$(( max_product > current ? max_product : current ))\n    min_product=$(( max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate ))\n    min_product=$(( min_product < current ? min_product : current ))\n    max_so_far=$(( max_so_far > max_product ? max_so_far : max_product ))\n  done\n  echo $max_so_far",
    "    local -a arr\n    local i j k\n    local max_product\n    local product\n    local -i n\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    n=${#arr[@]}\n    max_product=${arr[0]}\n\n    for ((i=0; i<n; i++)); do\n        product=${arr[i]}\n        if ((product > max_product)); then\n            max_product=$product\n        fi\n        for ((j=i+1; j<n; j++)); do\n            product=$((product * arr[j]))\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n\n    echo $max_product",
    "  local -a array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=$max_product\n\n  for ((i = 1; i < ${#array[@]}; i++)); do\n    local current=${array[i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n\n    max_product=$(max $current $((current * temp_max)) $((current * temp_min)))\n    min_product=$(min $current $((current * temp_max)) $((current * temp_min)))\n\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far",
    "  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local max_so_far=$max\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[$i]}\n    local tmp=$max\n    max=$(max $max $(max $curr $(($min * $curr))))\n    min=$(min $min $(min $curr $(($tmp * $curr))))\n    max_so_far=$(max $max_so_far $max)\n  done\n\n  echo $max_so_far",
    "  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$((${arr[$i]} * $tmp_max > ${arr[$i]} * $tmp_min ? ${arr[$i]} * $tmp_max : ${arr[$i]} * $tmp_min))\n    max=$(($max > ${arr[$i]} ? $max : ${arr[$i]}))\n    min=$((${arr[$i]} * $tmp_max < ${arr[$i]} * $tmp_min ? ${arr[$i]} * $tmp_max : ${arr[$i]} * $tmp_min))\n    min=$(($min < ${arr[$i]} ? $min : ${arr[$i]}))\n    result=$(($result > $max ? $result : $max))\n  done\n\n  echo $result",
    "  local -a arr=(\"$@\")\n  local max_product=0\n  local min_product=0\n  local max_so_far=0\n  local min_so_far=0\n  local i=0\n  local n=${#arr[@]}\n  local tmp=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[$i]} -gt 0 ]]; then\n      max_so_far=$((max_so_far * arr[i]))\n      min_so_far=$((min_so_far * arr[i]))\n    elif [[ ${arr[$i]} -lt 0 ]]; then\n      tmp=$max_so_far\n      max_so_far=$((min_so_far * arr[i]))\n      min_so_far=$((tmp * arr[i]))\n    else\n      max_so_far=0\n      min_so_far=0\n    fi\n    if [[ $max_so_far -gt $max_product ]]; then\n      max_product=$max_so_far\n    fi\n    if [[ $min_so_far -lt $min_product ]]; then\n      min_product=$min_so_far\n    fi\n  done\n  echo $max_product",
    "  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]} -lt 0 ]]; then\n      local tmp=$max\n      max=$min\n      min=$tmp\n    fi\n    max=$(( ${arr[i]} > ${arr[i]}*$max ? ${arr[i]} : ${arr[i]}*$max ))\n    min=$(( ${arr[i]} < ${arr[i]}*$min ? ${arr[i]} : ${arr[i]}*$min ))\n    result=$(( $result > $max ? $result : $max ))\n  done\n\n  echo $result",
    "  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local product_1=$((max_product * arr[i]))\n    local product_2=$((min_product * arr[i]))\n    max_product=$((product_1 > product_2 ? product_1 : product_2))\n    max_product=$((max_product > arr[i] ? max_product : arr[i]))\n    min_product=$((product_1 < product_2 ? product_1 : product_2))\n    min_product=$((min_product < arr[i] ? min_product : arr[i]))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n  echo $max_so_far",
    "  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max=$max_product\n    local temp_min=$min_product\n    max_product=$((curr > curr * temp_max ? curr : curr * temp_max))\n    min_product=$((curr < curr * temp_min ? curr : curr * temp_min))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far",
    "  local array=($1)\n  local max_product=${array[0]}\n  local min_product=${array[0]}\n  local max_so_far=${array[0]}\n\n  for ((i = 1; i < ${#array[@]}; i++)); do\n    local curr=${array[i]}\n    local temp_max_product=$max_product\n    local temp_min_product=$min_product\n\n    max_product=$(max $curr $((curr * temp_max_product)) $((curr * temp_min_product)))\n    min_product=$(min $curr $((curr * temp_max_product)) $((curr * temp_min_product)))\n    max_so_far=$(max $max_so_far $max_product)\n  done\n\n  echo $max_so_far"
  ]
}