{
  "name": "mbpp_608_bell_Number",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find nth bell number.\n#\n# $1 is an integer\nbell_Number() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    bell_Number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"15\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        local sum=0\n        for i in $(seq 0 $(( $1 - 1 )) ); do\n            sum=$(( $sum + $(bell_Number $i) * $(bell_Number $(( $1 - 1 - $i ))) ))\n        done\n        echo $sum\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        local sum=0\n        for ((i=0; i<$1; i++)); do\n            sum=$((sum + $(bell_Number $i) * $(bell_Number $(( $1 - 1 - $i ))) ))\n        done\n        echo $sum\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $(bell_Number $(( $1 - 1 )) ) * $(( $1 + 1 )) ))\n    fi",
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n    else\n        local sum=0\n        for (( i=0; i<$1; i++ ))\n        do\n            sum=$((sum+$(bell_Number $i)*$(bell_Number $(( $1-$i-1 )) ) ))\n        done\n        echo $sum\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $(bell_Number $(( $1 - 1 )) ) * ( $1 - 1 ) ))\n    fi",
    "  if [ $1 -eq 0 ]\n  then\n    echo 1\n  else\n    echo $(( $(bell_Number $(( $1 - 1 ))) + $(bell_Number $(( $1 - 2 ))) ))\n  fi",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(($1 * bell_Number($(($1 - 1)))))\n    fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        local sum=0\n        for (( i=0; i<=$1-1; i++ )); do\n            sum=$((sum+$(bell_Number $i)*$(bell_Number $(( $1-1-$i )) )))\n        done\n        echo $sum\n    fi",
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n        return\n    fi\n    if [ $1 -eq 1 ]\n    then\n        echo 1\n        return\n    fi\n    local i=2\n    local sum=1\n    local prev=1\n    local temp=0\n    while [ $i -le $1 ]\n    do\n        temp=$sum\n        sum=$(( $sum + $prev ))\n        prev=$temp\n        i=$(( $i + 1 ))\n    done\n    echo $sum",
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n    else\n        echo $(( $1 * bell_Number $(( $1 - 1 )) ))\n    fi",
    "    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local bell=()\n    bell[0]=1\n    for ((i=1; i<=n; i++))\n    do\n        bell[i]=0\n        for ((j=0; j<i; j++))\n        do\n            bell[i]=$((bell[i] + $((bell[j] * bell[i-j-1]))))\n        done\n    done\n    echo ${bell[n]}",
    "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
    "    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local bell=()\n    bell[0]=1\n    for ((i=1; i<=n; i++))\n    do\n        bell[i]=0\n        for ((j=0; j<i; j++))\n        do\n            bell[i]=$((bell[i] + bell[j] * bell[i-j-1]))\n        done\n    done\n    echo ${bell[$n]}",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $(bell_Number $(( $1 - 1 )) ) * $(( $1 + 1 )) ))\n    fi",
    "    local n=$1\n    local i=0\n    local j=0\n    local k=0\n    local bell=0\n    local bell_prev=0\n    local bell_prev_prev=0\n    local bell_prev_prev_prev=0\n    local bell_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local bell_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev",
    "    n=$1\n    bell=()\n    bell[0]=1\n    for i in $(seq 1 $n); do\n        bell[$i]=0\n        for j in $(seq 0 $((i-1))); do\n            bell[$i]=$((bell[$i] + bell[$j] * bell[$((i-j-1))]))\n        done\n    done\n    echo ${bell[$n]}",
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n    else\n        echo $(( $1 * bell_Number $(( $1 - 1 )) ))\n    fi",
    "    declare -A bell\n    bell[0,0]=1\n    for i in $(seq 1 $1); do\n        bell[$i,0]=$((${bell[$(($i-1)),$(($i-1))]}))\n        for j in $(seq 1 $i); do\n            bell[$i,$j]=$((${bell[$i,$(($j-1))]}+${bell[$(($i-1)),$j]}))\n        done\n    done\n    echo ${bell[$1,0]}",
    "    if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        local sum=0\n        for ((i=0; i<=$1-1; i++)); do\n            sum=$((sum + $(bell_Number $i) * $(bell_Number $(( $1 - 1 - $i ))) ))\n        done\n        echo $sum\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        local sum=0\n        for ((i=0; i<$1; i++)); do\n            sum=$((sum + $(bell_Number $i) * $(bell_Number $(( $1 - 1 - $i ))) ))\n        done\n        echo $sum\n    fi"
  ]
}