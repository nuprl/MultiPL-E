{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find the last digit in factorial of a given number.\n#\n# $1 is an integer\nlast_Digit_Factorial() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    last_Digit_Factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"4\" ]]\n    [[ $(candidate \"21\") = \"0\" ]]\n    [[ $(candidate \"30\") = \"0\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n    else\n        echo $(($1*$(last_Digit_Factorial $(($1-1)))))\n    fi",
    "    if [ $1 -lt 0 ]; then\n        echo \"Error: Input must be a positive integer\"\n        return 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo 1\n        return 0\n    fi\n    if [ $1 -eq 1 ]; then\n        echo 1\n        return 0\n    fi\n    if [ $1 -eq 2 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1 -eq 3 ]; then\n        echo 6\n        return 0\n    fi\n    if [ $1 -eq 4 ]; then\n        echo 4\n        return 0\n    fi\n    if [ $1 -eq 5 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1 -eq 6 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1 -eq 7 ]; then\n        echo 4\n        return 0\n    fi\n    if [ $1 -eq 8 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1 -eq 9 ]; then\n        echo 8\n        return 0\n    fi\n    if [ $1 -eq 10 ]; then\n        echo 8\n        return 0\n    fi\n    if [ $1 -eq 11 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 12 ]; then\n        echo 6\n        return 0\n    fi\n    if [ $1 -eq 13 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 14 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 15 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 16 ]; then\n        echo 6\n        return 0\n    fi\n    if [ $1 -eq 17 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 18 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 19 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 20 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 21 ]; then\n        echo 0\n        return 0",
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n    else\n        echo $(($1 * $(last_Digit_Factorial $(($1 - 1)))))\n    fi",
    "    echo \"factorial($1)\" | python3 -c \"import sys; print(int(sys.stdin.read().split()[1][-1]))\"",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(($1 * $(last_Digit_Factorial $(($1 - 1)))))\n    fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        echo $(( $(last_Digit_Factorial $(( $1 - 1 ))) * $1 ))\n    fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        echo $(($1 * $(last_Digit_Factorial $(($1 - 1)))))\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(($1 * $(last_Digit_Factorial $(($1 - 1)))))\n    fi",
    "    local num=$1\n    local factorial=1\n    while [ $num -gt 1 ]; do\n        factorial=$((factorial * num))\n        num=$((num - 1))\n    done\n    echo $factorial | grep -o .$",
    "    if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) % 10 ))\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) % 10 ))\n    fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        echo $(($1 * $(last_Digit_Factorial $(($1 - 1)))))\n    fi",
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n    else\n        echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) % 10 ))\n    fi",
    "    local n=$1\n    local factorial=1\n    local last_digit=0\n    for ((i=1; i<=n; i++)); do\n        factorial=$((factorial * i))\n        last_digit=$((factorial % 10))\n    done\n    echo $last_digit",
    "    if [[ $1 -eq 0 ]]; then\n        echo 1\n    else\n        echo $(( $(last_Digit_Factorial $(( $1 - 1 ))) * $1 ))\n    fi",
    "    echo $1 | python -c \"import sys; print(str(reduce(lambda x,y: x*y, range(1, int(sys.stdin.readline())+1))).strip()[-1])\"",
    "    local number=$1\n    local factorial=1\n    for (( i=1; i<=$number; i++ )); do\n        factorial=$(( factorial * i ))\n    done\n    echo $factorial",
    "    if [ $1 -eq 0 ]\n    then\n        echo 1\n    else\n        echo $(( $1 * $(last_Digit_Factorial $(( $1 - 1 ))) % 10 ))\n    fi",
    "    if [ $1 -lt 0 ]; then\n        echo \"Error: Input must be a positive integer\"\n        return 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo 1\n        return 0\n    fi\n    if [ $1 -eq 1 ]; then\n        echo 1\n        return 0\n    fi\n    if [ $1 -eq 2 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1 -eq 3 ]; then\n        echo 6\n        return 0\n    fi\n    if [ $1 -eq 4 ]; then\n        echo 4\n        return 0\n    fi\n    if [ $1 -eq 5 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1 -eq 6 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1 -eq 7 ]; then\n        echo 4\n        return 0\n    fi\n    if [ $1 -eq 8 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1 -eq 9 ]; then\n        echo 8\n        return 0\n    fi\n    if [ $1 -eq 10 ]; then\n        echo 8\n        return 0\n    fi\n    if [ $1 -eq 11 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 12 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 13 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 14 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 15 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 16 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 17 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 18 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 19 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 20 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 21 ]; then\n        echo 0\n        return 0",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $(last_Digit_Factorial $(( $1 - 1 ))) * $1 ))\n    fi"
  ]
}