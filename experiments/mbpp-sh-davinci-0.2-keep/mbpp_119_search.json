{
  "name": "mbpp_119_search",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find the element that appears only once in a sorted array.\n#\n# $1 is a space-separated list\nsearch() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 1 3 3 4 4 5 5 7 7 8\") = \"8\" ]]\n    [[ $(candidate \"1 2 2 3 3 4 4\") = \"1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a array=($1)\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i mid=0\n\n    while [ $i -lt $len ]; do\n        mid=$((i + len))\n        mid=$((mid / 2))\n        if [ $((mid % 2)) -eq 0 ]; then\n            if [ ${array[$mid]} -eq ${array[$((mid + 1))]} ]; then\n                i=$((mid + 2))\n            else\n                len=$mid\n            fi\n        else\n            if [ ${array[$mid]} -eq ${array[$((mid - 1))]} ]; then\n                i=$((mid + 1))\n            else\n                len=$mid\n            fi\n        fi\n    done\n\n    echo ${array[$i]}",
    "    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i mid=0\n    local -i left=0\n    local -i right=0\n\n    while [ $i -lt $len ]\n    do\n        if [ $i -eq 0 ]\n        then\n            left=$i\n            right=$i+1\n        elif [ $i -eq $len-1 ]\n        then\n            left=$i-1\n            right=$i\n        else\n            left=$i-1\n            right=$i+1\n        fi\n\n        if [ ${array[$left]} -ne ${array[$i]} -a ${array[$right]} -ne ${array[$i]} ]\n        then\n            echo ${array[$i]}\n            break\n        fi\n\n        i=$i+1\n    done",
    "    local list=\"$1\"\n    local n=0\n    local i=0\n    local found=0\n    local result=0\n\n    for n in $list; do\n        if [ $i -eq 0 ]; then\n            result=$n\n            i=1\n        elif [ $n -eq $result ]; then\n            i=0\n        else\n            found=1\n            break\n        fi\n    done\n\n    if [ $found -eq 1 ]; then\n        echo $result\n    else\n        echo \"Not found\"\n    fi",
    "    local array=($1)\n    local len=${#array[@]}\n    local i=0\n    local j=0\n    local k=0\n    local found=0\n\n    while [ $i -lt $len ]; do\n        j=$((i+1))\n        k=$((i+2))\n        if [ $j -lt $len ] && [ $k -lt $len ]; then\n            if [ ${array[$i]} -ne ${array[$j]} ] && [ ${array[$j]} -ne ${array[$k]} ]; then\n                echo ${array[$j]}\n                found=1\n                break\n            fi\n        fi\n        i=$((i+2))\n    done\n\n    if [ $found -eq 0 ]; then\n        if [ $((len%2)) -eq 0 ]; then\n            echo ${array[$((len-1))]}\n        else\n            echo ${array[$((len-2))]}\n        fi\n    fi",
    "    local array=($1)\n    local length=${#array[@]}\n    local i=0\n    local j=0\n    local k=0\n    local found=0\n    local result=0\n\n    while [ $i -lt $length ]\n    do\n        j=$((i+1))\n        k=$((i+2))\n        if [ $j -lt $length ] && [ $k -lt $length ]\n        then\n            if [ ${array[$i]} -ne ${array[$j]} ] && [ ${array[$j]} -ne ${array[$k]} ]\n            then\n                result=${array[$j]}\n                found=1\n                break\n            fi\n        fi\n        i=$((i+2))\n    done\n\n    if [ $found -eq 0 ]\n    then\n        result=${array[$length-1]}\n    fi\n\n    echo $result",
    "    local -a array=($1)\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i mid=0\n    local -i result=0\n    while ((i < len))\n    do\n        mid=$((i + len))\n        mid=$((mid / 2))\n        if ((mid % 2 == 0))\n        then\n            if ((array[mid] == array[mid - 1]))\n            then\n                i=$((mid + 1))\n            elif ((array[mid] == array[mid + 1]))\n            then\n                len=$((mid - 1))\n            else\n                result=${array[mid]}\n                break\n            fi\n        else\n            if ((array[mid] == array[mid - 1]))\n            then\n                len=$((mid - 1))\n            elif ((array[mid] == array[mid + 1]))\n            then\n                i=$((mid + 1))\n            else\n                result=${array[mid]}\n                break\n            fi\n        fi\n    done\n    echo $result",
    "    local -a array=($1)\n    local -a new_array=()\n    local -i i=0\n    local -i j=0\n    local -i len=${#array[@]}\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${array[$i]} != ${array[$i+1]} ]]; then\n            new_array[$j]=${array[$i]}\n            ((j++))\n        fi\n    done\n\n    echo ${new_array[@]}",
    "    local list=$1\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local result=0\n\n    len=${#list[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=0; j<len; j++)); do\n            if [ $i -ne $j ]; then\n                if [ ${list[$i]} -eq ${list[$j]} ]; then\n                    break\n                fi\n            fi\n        done\n        if [ $j -eq $len ]; then\n            result=${list[$i]}\n            break\n        fi\n    done\n    echo $result",
    "    local -a array=(\"$@\")\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i mid=0\n    local -i result=0\n\n    while [[ $i -lt $len ]]; do\n        mid=$((i + len))\n        mid=$((mid / 2))\n        if [[ $mid -eq $i ]]; then\n            result=$i\n            break\n        elif [[ $((mid % 2)) -eq 0 ]]; then\n            if [[ ${array[$mid]} -eq ${array[$((mid + 1))]} ]]; then\n                i=$((mid + 2))\n            else\n                len=$mid\n            fi\n        else\n            if [[ ${array[$mid]} -eq ${array[$((mid - 1))]} ]]; then\n                i=$((mid + 1))\n            else\n                len=$mid\n            fi\n        fi\n    done\n\n    echo ${array[$result]}",
    "    for i in $1; do\n        if [[ $(echo $1 | tr ' ' '\\n' | grep -c $i) -eq 1 ]]; then\n            echo $i\n            break\n        fi\n    done",
    "    for i in $1; do\n        if [[ $i != $2 ]]; then\n            echo $i\n            break\n        fi\n    done",
    "    local -a array\n    local -i i\n    local -i len\n    local -i mid\n    local -i left\n    local -i right\n    local -i result\n\n    array=( $1 )\n    len=${#array[@]}\n    left=0\n    right=$(( len - 1 ))\n\n    while (( left <= right )); do\n        mid=$(( (left + right) / 2 ))\n\n        if (( mid == 0 || mid == len - 1 )); then\n            result=$mid\n            break\n        fi\n\n        if (( array[mid] != array[mid - 1] && array[mid] != array[mid + 1] )); then\n            result=$mid\n            break\n        fi\n\n        if (( array[mid] == array[mid - 1] )); then\n            if (( (mid - left) % 2 == 0 )); then\n                right=$(( mid - 2 ))\n            else\n                left=$(( mid + 1 ))\n            fi\n        else\n            if (( (right - mid) % 2 == 0 )); then\n                left=$(( mid + 2 ))\n            else\n                right=$(( mid - 1 ))\n            fi\n        fi\n    done\n\n    echo ${array[result]}",
    "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n\n    while [ $i -lt $len ]; do\n        if [ $i -eq 0 ]; then\n            if [ ${arr[$i]} -ne ${arr[$i+1]} ]; then\n                echo ${arr[$i]}\n                return\n            fi\n        elif [ $i -eq $(($len-1)) ]; then\n            if [ ${arr[$i]} -ne ${arr[$i-1]} ]; then\n                echo ${arr[$i]}\n                return\n            fi\n        else\n            if [ ${arr[$i]} -ne ${arr[$i-1]} ] && [ ${arr[$i]} -ne ${arr[$i+1]} ]; then\n                echo ${arr[$i]}\n                return\n            fi\n        fi\n        i=$(($i+1))\n    done",
    "    local -a arr=(\"$@\")\n    local i=0\n    local len=${#arr[@]}\n    local mid=$((len/2))\n    local -i result=0\n    local -i left=0\n    local -i right=0\n    local -i left_len=0\n    local -i right_len=0\n\n    if [[ $len -eq 1 ]]; then\n        result=${arr[0]}\n    elif [[ $len -eq 2 ]]; then\n        if [[ ${arr[0]} -eq ${arr[1]} ]]; then\n            result=0\n        else\n            result=${arr[0]}\n        fi\n    else\n        left=${arr[@]:0:$mid}\n        right=${arr[@]:$mid:$len}\n        left_len=${#left[@]}\n        right_len=${#right[@]}\n\n        if [[ $left_len -eq 1 ]]; then\n            result=${left[0]}\n        elif [[ $left_len -eq 2 ]]; then\n            if [[ ${left[0]} -eq ${left[1]} ]]; then\n                result=0\n            else\n                result=${left[0]}\n            fi\n        else\n            result=$(search $left)\n        fi\n\n        if [[ $result -eq 0 ]]; then\n            if [[ $right_len -eq 1 ]]; then\n                result=${right[0]}\n            elif [[ $right_len -eq 2 ]]; then\n                if [[ ${right[0]} -eq ${right[1]} ]]; then\n                    result=0\n                else\n                    result=${right[0]}\n                fi\n            else\n                result=$(search $right)\n            fi\n        fi\n    fi\n\n    echo $result",
    "    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n\n    while [ $i -lt $len ]; do\n        if [ $i -eq 0 ]; then\n            if [ ${array[$i]} -ne ${array[$i+1]} ]; then\n                echo ${array[$i]}\n                return\n            fi\n        elif [ $i -eq $((len-1)) ]; then\n            if [ ${array[$i]} -ne ${array[$i-1]} ]; then\n                echo ${array[$i]}\n                return\n            fi\n        else\n            if [ ${array[$i]} -ne ${array[$i-1]} ] && [ ${array[$i]} -ne ${array[$i+1]} ]; then\n                echo ${array[$i]}\n                return\n            fi\n        fi\n        i=$((i+1))\n    done",
    "    local -a array=($1)\n    local -i length=${#array[@]}\n    local -i mid=$((length / 2))\n    local -i i=0\n    local -i j=$((length - 1))\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local",
    "    local -a array=($1)\n    local i=0\n    local length=${#array[@]}\n    local result=0\n    while [ $i -lt $length ]; do\n        if [ $i -eq 0 ]; then\n            if [ ${array[$i]} -ne ${array[$i+1]} ]; then\n                result=${array[$i]}\n                break\n            fi\n        elif [ $i -eq $((length-1)) ]; then\n            if [ ${array[$i]} -ne ${array[$i-1]} ]; then\n                result=${array[$i]}\n                break\n            fi\n        else\n            if [ ${array[$i]} -ne ${array[$i-1]} ] && [ ${array[$i]} -ne ${array[$i+1]} ]; then\n                result=${array[$i]}\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n    echo $result",
    "    local list=$1\n    local len=${#list}\n    local i=0\n    local mid=$((len/2))\n    local mid_val=${list:$mid:1}\n    local left_val=${list:$((mid-1)):1}\n    local right_val=${list:$((mid+1)):1}\n    if [ $len -eq 1 ]; then\n        echo $mid_val\n        return\n    fi\n    if [ $mid_val -ne $left_val ] && [ $mid_val -ne $right_val ]; then\n        echo $mid_val\n        return\n    fi\n    if [ $mid_val -eq $left_val ]; then\n        if [ $((mid%2)) -eq 0 ]; then\n            search ${list:$((mid+1))}\n        else\n            search ${list:0:$mid}\n        fi\n    else\n        if [ $((mid%2)) -eq 0 ]; then\n            search ${list:0:$mid}\n        else\n            search ${list:$((mid+1))}\n        fi\n    fi",
    "    local array=($1)\n    local length=${#array[@]}\n    local i=0\n    local found=0\n    local result=0\n\n    while [ $i -lt $length ]; do\n        if [ $i -eq 0 ]; then\n            if [ ${array[$i]} -ne ${array[$i+1]} ]; then\n                result=${array[$i]}\n                found=1\n            fi\n        elif [ $i -eq $((length-1)) ]; then\n            if [ ${array[$i]} -ne ${array[$i-1]} ]; then\n                result=${array[$i]}\n                found=1\n            fi\n        else\n            if [ ${array[$i]} -ne ${array[$i-1]} ] && [ ${array[$i]} -ne ${array[$i+1]} ]; then\n                result=${array[$i]}\n                found=1\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [ $found -eq 1 ]; then\n        echo $result\n    else\n        echo \"No unique element found\"\n    fi",
    "    local list=$1\n    local i=0\n    local len=${#list[@]}\n    local result=0\n    while [ $i -lt $len ]\n    do\n        if [ $i -eq 0 ]\n        then\n            if [ ${list[$i]} -ne ${list[$((i+1))]} ]\n            then\n                result=${list[$i]}\n                break\n            fi\n        elif [ $i -eq $((len-1)) ]\n        then\n            if [ ${list[$i]} -ne ${list[$((i-1))]} ]\n            then\n                result=${list[$i]}\n                break\n            fi\n        else\n            if [ ${list[$i]} -ne ${list[$((i-1))]} ] && [ ${list[$i]} -ne ${list[$((i+1))]} ]\n            then\n                result=${list[$i]}\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n    echo $result"
  ]
}