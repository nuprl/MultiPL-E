{
  "name": "mbpp_557_toggle_string",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to toggle the case of all characters in a string.\n#\n# $1 is a string\ntoggle_string() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    toggle_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"pYTHON\" ]]\n    [[ $(candidate \"Pangram\") = \"pANGRAM\" ]]\n    [[ $(candidate \"LIttLE\") = \"liTTle\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        char=\"${str:$i:1}\"\n        case \"$char\" in\n            [a-z])\n                new_str=\"$new_str$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n                ;;\n            [A-Z])\n                new_str=\"$new_str$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n                ;;\n            *)\n                new_str=\"$new_str$char\"\n                ;;\n        esac\n    done\n    echo \"$new_str\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new=\"\"\n    local char=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        case \"$char\" in\n            [A-Z]) new=\"$new$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\" ;;\n            [a-z]) new=\"$new$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\" ;;\n            *) new=\"$new$char\" ;;\n        esac\n    done\n    echo \"$new\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local string=\"$1\"\n    local result=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            result+=\"${char,,}\"\n        else\n            result+=\"${char^^}\"\n        fi\n    done\n    echo \"$result\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'"
  ]
}