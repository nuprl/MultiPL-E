{
  "name": "mbpp_557_toggle_string",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to toggle the case of all characters in a string.\n#\n# $1 is a string\ntoggle_string() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    toggle_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"pYTHON\" ]]\n    [[ $(candidate \"Pangram\") = \"pANGRAM\" ]]\n    [[ $(candidate \"LIttLE\") = \"liTTle\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        char=\"${str:$i:1}\"\n        case \"$char\" in\n            [a-z])\n                new_str=\"$new_str$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n                ;;\n            [A-Z])\n                new_str=\"$new_str$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n                ;;\n            *)\n                new_str=\"$new_str$char\"\n                ;;\n        esac\n    done\n    echo \"$new_str\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new=\"\"\n    local char=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        case \"$char\" in\n            [A-Z]) new=\"$new$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\" ;;\n            [a-z]) new=\"$new$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\" ;;\n            *) new=\"$new$char\" ;;\n        esac\n    done\n    echo \"$new\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local string=\"$1\"\n    local result=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            result+=\"${char,,}\"\n        else\n            result+=\"${char^^}\"\n        fi\n    done\n    echo \"$result\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local str=\"$1\"\n    local new=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        local c=\"${str:$i:1}\"\n        case $c in\n            [A-Z]) new+=\"${c,,}\" ;;\n            *) new+=\"${c^^}\" ;;\n        esac\n    done\n    echo \"$new\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local -i i=0\n    while [ $i -lt ${#1} ]; do\n        local char=${1:$i:1}\n        if [[ $char =~ [a-z] ]]; then\n            char=${char^^}\n        elif [[ $char =~ [A-Z] ]]; then\n            char=${char,,}\n        fi\n        printf \"%s\" \"$char\"\n        ((i++))\n    done\n    printf \"\\n\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local string=\"$1\"\n  local result=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=\"${string:$i:1}\"\n    if [[ \"$char\" =~ [[:upper:]] ]]; then\n      result+=\"${char,,}\"\n    else\n      result+=\"${char^^}\"\n    fi\n  done\n  echo \"$result\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr \"[:lower:]\" \"[:upper:]\" | tr \"[:upper:]\" \"[:lower:]\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  local char=\"\"\n  local ascii_code=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    ascii_code=$(printf \"%d\" \"'$char\")\n    if [[ $ascii_code -ge 65 && $ascii_code -le 90 ]]; then\n      new_string+=$(printf \\\\$(printf '%03o' \"$((ascii_code+32))\"))\n    elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n      new_string+=$(printf \\\\$(printf '%03o' \"$((ascii_code-32))\"))\n    else\n      new_string+=\"$char\"\n    fi\n  done\n\n  echo \"$new_string\"",
    "    echo \"$1\" | tr \"[:lower:]\" \"[:upper:]\" | tr \"[:upper:]\" \"[:lower:]\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"${char,,}\"\n        else\n            new_str+=\"${char^^}\"\n        fi\n    done\n    echo \"$new_str\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local string=\"$1\"\n    local toggled=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            toggled+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            toggled+=\"${char,,}\"\n        else\n            toggled+=\"$char\"\n        fi\n    done\n    echo \"$toggled\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local new=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new+=\"${char,,}\"\n    else\n      new+=\"$char\"\n    fi\n  done\n  echo \"$new\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "\techo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local string=\"$1\"\n    local result=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            result+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            result+=\"${char,,}\"\n        else\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"",
    "  local string=\"$1\"\n  local new_string=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=\"${string:$i:1}\"\n    case \"$char\" in\n      [A-Z]) new_string+=\"${char,,}\" ;;\n      [a-z]) new_string+=\"${char^^}\" ;;\n      *) new_string+=\"$char\" ;;\n    esac\n  done\n  echo \"$new_string\"",
    "    local string=\"$1\"\n    local new_string=\"\"\n    local char=\"\"\n    local ascii_code=\"\"\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=\"${string:$i:1}\"\n        ascii_code=$(printf \"%d\" \"'$char\")\n\n        if [[ $ascii_code -ge 65 && $ascii_code -le 90 ]]; then\n            new_string+=$(printf \\\\$(printf '%03o' \"$((ascii_code+32))\"))\n        elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n            new_string+=$(printf \\\\$(printf '%03o' \"$((ascii_code-32))\"))\n        else\n            new_string+=\"$char\"\n        fi\n    done\n\n    echo \"$new_string\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local new=\"\"\n  local char=\"\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      new+=\"${char,,}\"\n    else\n      new+=\"${char^^}\"\n    fi\n  done\n\n  echo \"$new\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=${string:$i:1}\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"${char,,}\"\n        elif [[ \"$char\" =~ [a-z] ]]; then\n            new_string+=\"${char^^}\"\n        else\n            new_string+=\"$char\"\n        fi\n    done\n    echo \"$new_string\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local result=\"\"\n    local i=0\n    while [ $i -lt ${#string} ]; do\n        local char=${string:$i:1}\n        if [[ $char =~ [a-z] ]]; then\n            result+=\"$(echo $char | tr '[:lower:]' '[:upper:]')\"\n        elif [[ $char =~ [A-Z] ]]; then\n            result+=\"$(echo $char | tr '[:upper:]' '[:lower:]')\"\n        else\n            result+=\"$char\"\n        fi\n        i=$((i+1))\n    done\n    echo \"$result\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local string=\"$1\"\n  local result=\"\"\n  local char=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      result+=\"${char,,}\"\n    else\n      result+=\"${char^^}\"\n    fi\n  done\n  echo \"$result\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=\"${string:$i:1}\"\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      new_string+=\"${char,,}\"\n    elif [[ \"$char\" =~ [a-z] ]]; then\n      new_string+=\"${char^^}\"\n    else\n      new_string+=\"$char\"\n    fi\n  done\n  echo \"$new_string\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local -n str=$1\n    str=${str//[a-z]/\\L&}\n    str=${str//[A-Z]/\\L&}",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local new=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new+=\"${char,,}\"\n    else\n      new+=\"$char\"\n    fi\n  done\n  echo \"$new\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local string=\"$1\"\n    local result=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ $char =~ [a-z] ]]; then\n            result+=\"${char^^}\"\n        elif [[ $char =~ [A-Z] ]]; then\n            result+=\"${char,,}\"\n        else\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  local char=\"\"\n  local ascii_code=\"\"\n  local new_ascii_code=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    ascii_code=$(printf \"%d\" \"'$char\")\n\n    if [[ $ascii_code -ge 65 && $ascii_code -le 90 ]]; then\n      new_ascii_code=$(( $ascii_code + 32 ))\n    elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n      new_ascii_code=$(( $ascii_code - 32 ))\n    else\n      new_ascii_code=$ascii_code\n    fi\n\n    new_string+=$(printf \\\\$(printf '%03o' $new_ascii_code))\n  done\n\n  echo \"$new_string\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    local char=\"\"\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=${string:$i:1}\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"${char,,}\"\n        else\n            new_string+=\"${char^^}\"\n        fi\n    done\n\n    echo \"$new_string\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local result=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    if [[ \"${str:$i:1}\" =~ [a-z] ]]; then\n      result+=\"${str:$i:1^^}\"\n    elif [[ \"${str:$i:1}\" =~ [A-Z] ]]; then\n      result+=\"${str:$i:1,,}\"\n    else\n      result+=\"${str:$i:1}\"\n    fi\n  done\n  echo \"$result\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_str+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=\"${char,,}\"\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'"
  ]
}