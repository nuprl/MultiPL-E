{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to check whether the two numbers differ at one bit position only or not.\n#\n# $1 is an integer\n# $2 is an integer\ndiffer_At_One_Bit_Pos() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    differ_At_One_Bit_Pos \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"13\" \"9\") = \"true\" ]]\n    [[ $(candidate \"15\" \"8\") = \"false\" ]]\n    [[ $(candidate \"2\" \"4\") = \"false\" ]]\n    [[ $(candidate \"2\" \"3\") = \"true\" ]]\n    [[ $(candidate \"5\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"5\") = \"true\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local x=$1\n  local y=$2\n  local z=$((x ^ y))\n  local count=0\n  while [ $z -gt 0 ]; do\n    local z=$((z & (z - 1)))\n    local count=$((count + 1))\n  done\n  if [ $count -eq 1 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "    if [ $1 -eq $2 ]; then\n        echo \"False\"\n    else\n        local x=$(($1 ^ $2))\n        local count=0\n        while [ $x -ne 0 ]; do\n            x=$(($x & ($x - 1)))\n            count=$(($count + 1))\n        done\n        if [ $count -eq 1 ]; then\n            echo \"True\"\n        else\n            echo \"False\"\n        fi\n    fi",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: differ_At_One_Bit_Pos <integer> <integer>\"\n    return 1\n  fi\n  local num1=$1\n  local num2=$2\n  local xor=$((num1 ^ num2))\n  if [ $((xor & (xor - 1))) -eq 0 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: differ_At_One_Bit_Pos <int1> <int2>\"\n    return 1\n  fi\n  local int1=$1\n  local int2=$2\n  local int1_bin=$(echo \"obase=2; $int1\" | bc)\n  local int2_bin=$(echo \"obase=2; $int2\" | bc)\n  local int1_len=${#int1_bin}\n  local int2_len=${#int2_bin}\n  local diff_len=$((int1_len - int2_len))\n  if [ $diff_len -gt 1 ] || [ $diff_len -lt -1 ]; then\n    echo \"False\"\n    return 0\n  fi\n  local diff_count=0\n  for (( i=0; i<int1_len; i++ )); do\n    if [ \"${int1_bin:i:1}\" != \"${int2_bin:i:1}\" ]; then\n      diff_count=$((diff_count + 1))\n    fi\n  done\n  if [ $diff_count -eq 1 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "  local num1=$1\n  local num2=$2\n  local xor=$((num1^num2))\n  local count=0\n  while [ $xor -ne 0 ]; do\n    xor=$((xor&(xor-1)))\n    count=$((count+1))\n  done\n  if [ $count -eq 1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "    local num1=$1\n    local num2=$2\n    local diff=$((num1 ^ num2))\n    local count=0\n    while [ $diff -ne 0 ]; do\n        diff=$((diff & (diff - 1)))\n        count=$((count + 1))\n    done\n    if [ $count -eq 1 ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "  local num1=$1\n  local num2=$2\n  local xor=$(( num1 ^ num2 ))\n  local count=0\n  while [ $xor -ne 0 ]; do\n    xor=$(( xor & (xor - 1) ))\n    (( count++ ))\n  done\n  if [ $count -eq 1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "    if [ $1 -eq $2 ]; then\n        echo \"0\"\n    else\n        echo \"1\"\n    fi",
    "    if [ $# -ne 2 ]\n    then\n        echo \"Usage: differ_At_One_Bit_Pos <integer> <integer>\"\n        return 1\n    fi\n    python -c \"print(bin($1 ^ $2).count('1') == 1)\"",
    "    if [ $1 -eq $2 ]; then\n        echo \"0\"\n    else\n        echo \"1\"\n    fi",
    "  local x=$1\n  local y=$2\n  local z=$(( x ^ y ))\n  local count=0\n  while [ $z -gt 0 ]; do\n    if [ $(( z & 1 )) -eq 1 ]; then\n      count=$(( count + 1 ))\n    fi\n    z=$(( z >> 1 ))\n  done\n  if [ $count -eq 1 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "    local num1=$1\n    local num2=$2\n    local diff=$((num1 ^ num2))\n    local count=0\n    while [[ $diff -gt 0 ]]; do\n        if [[ $((diff & 1)) -eq 1 ]]; then\n            count=$((count + 1))\n        fi\n        diff=$((diff >> 1))\n    done\n    if [[ $count -eq 1 ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "  if [ $1 -eq $2 ]; then\n    echo \"0\"\n  else\n    xor=$(( $1 ^ $2 ))\n    if [ $xor -eq 1 ]; then\n      echo \"1\"\n    else\n      echo \"0\"\n    fi\n  fi",
    "  local x=$1\n  local y=$2\n  local z=$((x ^ y))\n  local count=0\n  while [ $z -ne 0 ]\n  do\n    z=$((z & (z-1)))\n    count=$((count+1))\n  done\n  if [ $count -eq 1 ]\n  then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "    local num1=$1\n    local num2=$2\n    local diff=$((num1^num2))\n    local count=0\n    while [ $diff -gt 0 ]; do\n        local rem=$((diff%2))\n        if [ $rem -eq 1 ]; then\n            count=$((count+1))\n        fi\n        diff=$((diff/2))\n    done\n    if [ $count -eq 1 ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "    if [ $1 -eq $2 ]; then\n        echo \"0\"\n    else\n        echo \"1\"\n    fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: differ_At_One_Bit_Pos <integer> <integer>\"\n        return 1\n    fi\n\n    local num1=$1\n    local num2=$2\n\n    local xor=$((num1 ^ num2))\n    local count=0\n    while [ $xor -ne 0 ]; do\n        xor=$((xor & (xor - 1)))\n        count=$((count + 1))\n    done\n\n    if [ $count -eq 1 ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "  local num1=$1\n  local num2=$2\n  local diff=$((num1 ^ num2))\n  local count=0\n  while [ $diff -ne 0 ]\n  do\n    diff=$((diff & (diff - 1)))\n    count=$((count + 1))\n  done\n  if [ $count -eq 1 ]\n  then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: differ_At_One_Bit_Pos <integer> <integer>\"\n    return 1\n  fi\n  # Convert to binary\n  local bin1=$(echo \"obase=2; $1\" | bc)\n  local bin2=$(echo \"obase=2; $2\" | bc)\n  # Pad with zeros\n  local len1=${#bin1}\n  local len2=${#bin2}\n  if [ $len1 -gt $len2 ]; then\n    bin2=$(printf \"%0$len1\"d $bin2)\n  elif [ $len2 -gt $len1 ]; then\n    bin1=$(printf \"%0$len2\"d $bin1)\n  fi\n  # Count the number of differences\n  local diffs=0\n  for (( i=0; i<${#bin1}; i++ )); do\n    if [ \"${bin1:$i:1}\" != \"${bin2:$i:1}\" ]; then\n      (( diffs++ ))\n    fi\n  done\n  # Return the result\n  if [ $diffs -eq 1 ]; then\n    return 0\n  else\n    return 1\n  fi",
    "  local a=$1\n  local b=$2\n  local c=$((a ^ b))\n  local d=$((c & (c - 1)))\n  if [ $d -eq 0 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi"
  ]
}