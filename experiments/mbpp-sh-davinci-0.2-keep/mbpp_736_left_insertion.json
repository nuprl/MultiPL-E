{
  "name": "mbpp_736_left_insertion",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n#\n# $1 is a space-separated list\n# $2 is an integer\nleft_insertion() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    left_insertion \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 5\" \"6\") = \"4\" ]]\n    [[ $(candidate \"1 2 4 5\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 2 4 5\" \"7\") = \"4\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a array\n    local -i i\n    local -i n\n    local -i value\n    array=($1)\n    value=$2\n    n=${#array[@]}\n    for ((i=0; i<n; i++)); do\n        if [[ ${array[i]} -ge $value ]]; then\n            echo $i\n            return\n        fi\n    done\n    echo $n",
    "    local list=\"$1\"\n    local value=\"$2\"\n    local i=0\n    local len=${#list}\n    while [ $i -lt $len ]; do\n        local n=${list:$i:1}\n        if [ $n -ge $value ]; then\n            echo $i\n            return\n        fi\n        i=$((i+1))\n    done\n    echo $i",
    "    local -a list\n    local -i i\n    local -i n\n    local -i l\n    local -i r\n    local -i m\n    local -i v\n    list=($1)\n    n=${#list[@]}\n    l=0\n    r=$((n-1))\n    v=$2\n    while l<r; do\n        m=$((l+(r-l)/2))\n        if ((v<=list[m])); then\n            r=$m\n        else\n            l=$((m+1))\n        fi\n    done\n    echo $l",
    "    local -a list=($1)\n    local value=$2\n    local low=0\n    local high=${#list[@]}\n    local mid\n    while (( low < high )); do\n        mid=$(( (low + high) / 2 ))\n        if (( list[mid] < value )); then\n            low=$(( mid + 1 ))\n        else\n            high=$(( mid ))\n        fi\n    done\n    echo $low",
    "    local list=\"$1\"\n    local value=\"$2\"\n    local index=0\n    local left=0\n    local right=$((${#list} - 1))\n    local mid=0\n    local mid_value=0\n    while [[ $left -le $right ]]; do\n        mid=$((($left + $right) / 2))\n        mid_value=$(echo \"$list\" | cut -d ' ' -f $((mid + 1)))\n        if [[ $mid_value -eq $value ]]; then\n            index=$mid\n            break\n        elif [[ $mid_value -gt $value ]]; then\n            right=$((mid - 1))\n        else\n            left=$((mid + 1))\n        fi\n    done\n    echo $index",
    "    local list=$1\n    local value=$2\n    local index=0\n    for i in $list; do\n        if [ $i -lt $value ]; then\n            index=$((index+1))\n        else\n            break\n        fi\n    done\n    echo $index",
    "    local list=$1\n    local value=$2\n    local index=0\n    local len=${#list}\n    local mid=$((len/2))\n    local left=0\n    local right=$len\n    local found=0\n\n    while [ $left -lt $right ]; do\n        if [ $value -le ${list:$mid:1} ]; then\n            right=$mid\n        else\n            left=$((mid+1))\n        fi\n        mid=$((left+right)/2)\n    done\n    echo $left",
    "    local -a list=($1)\n    local value=$2\n    local index=0\n    while [[ $index -lt ${#list[@]} ]]; do\n        if [[ ${list[$index]} -ge $value ]]; then\n            break\n        fi\n        ((index++))\n    done\n    echo $index",
    "    local -a array=($1)\n    local value=$2\n    local i=0\n    local j=${#array[@]}\n    while [[ $i -lt $j ]]; do\n        local mid=$(( (i+j)/2 ))\n        if [[ ${array[$mid]} -lt $value ]]; then\n            i=$(( mid+1 ))\n        else\n            j=$mid\n        fi\n    done\n    echo $i",
    "    local -a array=(\"${!1}\")\n    local value=$2\n    local left=0\n    local right=${#array[@]}\n    local mid\n    while [ $left -lt $right ]; do\n        mid=$(((left + right) / 2))\n        if [ ${array[$mid]} -lt $value ]; then\n            left=$((mid + 1))\n        else\n            right=$mid\n        fi\n    done\n    echo $left",
    "  local -a array=($1)\n  local value=$2\n  local length=${#array[@]}\n  local left=0\n  local right=$((length - 1))\n  local mid\n  while [[ $left -lt $right ]]; do\n    mid=$(((left + right) / 2))\n    if [[ ${array[$mid]} -lt $value ]]; then\n      left=$((mid + 1))\n    else\n      right=$((mid - 1))\n    fi\n  done\n  if [[ ${array[$left]} -lt $value ]]; then\n    echo $((left + 1))\n  else\n    echo $left\n  fi",
    "  local -a array\n  local i\n  local n\n  local value\n  array=($1)\n  n=${#array[@]}\n  value=$2\n  for ((i=0; i<n; i++)); do\n    if ((array[i] >= value)); then\n      echo $i\n      return\n    fi\n  done\n  echo $n",
    "    local list=$1\n    local value=$2\n    local index=0\n    local list_length=${#list[@]}\n    local list_length_minus_one=$((list_length-1))\n    local list_length_divided_by_two=$((list_length/2))\n    local list_length_divided_by_two_plus_one=$((list_length_divided_by_two+1))\n    local list_length_divided_by_two_minus_one=$((list_length_divided_by_two-1))\n    local list_length_divided_by_two_plus_one_minus_one=$((list_length_divided_by_two_plus_one-1))\n    local list_length_divided_by_two_plus_one_plus_one=$((list_length_divided_by_two_plus_one+1))\n    local list_length_divided_by_two_plus_one_plus_one_minus_one=$((list_length_divided_by_two_plus_one_plus_one-1))\n    local list_length_divided_by_two_plus_one_plus_one_plus_one=$((list_length_divided_by_two_plus_one_plus_one+1))\n    local list_length_divided_by_two_plus_one_plus_one_plus_one_minus_one=$((list_length_divided_by_two_plus_one_plus_one_plus_one-1))\n    local list_length_divided_by_two_plus_one_plus_one_plus_one_plus_one=$((list_length_divided_by_two_plus_one_plus_one_plus_one+1))\n    local list_length_divided_by_two_plus_one_plus_one_plus_one_plus_one_minus_one=$((list_length_divided_by_two_plus_one_plus_one_plus_one_plus_one-1))\n    local list_length_divided_by_two_plus_one_plus_one_plus_one_",
    "    local list=$1\n    local value=$2\n    local index=0\n    for i in $list; do\n        if [[ $i -ge $value ]]; then\n            break\n        fi\n        index=$((index + 1))\n    done\n    echo $index",
    "    local list=\"$1\"\n    local value=\"$2\"\n    local i=0\n    local j=$((${#list} - 1))\n    while [ $i -lt $j ]; do\n        local mid=$((($i + $j) / 2))\n        if [ ${list:$mid:1} -lt $value ]; then\n            i=$((mid + 1))\n        else\n            j=$((mid - 1))\n        fi\n    done\n    if [ ${list:$i:1} -lt $value ]; then\n        echo $((i + 1))\n    else\n        echo $i\n    fi",
    "    local list=$1\n    local value=$2\n    local i=0\n    local len=${#list[@]}\n    while [ $i -lt $len ]; do\n        if [ $value -le ${list[$i]} ]; then\n            echo $i\n            return\n        fi\n        i=$((i+1))\n    done\n    echo $i",
    "    local -a arr=($1)\n    local val=$2\n    local i=0\n    local j=${#arr[@]}\n    local mid=0\n    while ((i < j)); do\n        mid=$((i + (j - i) / 2))\n        if ((val <= arr[mid])); then\n            j=$mid\n        else\n            i=$((mid + 1))\n        fi\n    done\n    echo $i",
    "    local list=$1\n    local value=$2\n    local i=0\n    local len=${#list[@]}\n    while [ $i -lt $len ]; do\n        if [ ${list[$i]} -ge $value ]; then\n            echo $i\n            return\n        fi\n        i=$((i+1))\n    done\n    echo $len",
    "    local list=\"$1\"\n    local value=\"$2\"\n    local index=0\n    for i in $list; do\n        if [ \"$i\" -ge \"$value\" ]; then\n            break\n        fi\n        index=$((index+1))\n    done\n    echo $index",
    "    local -a list=($1)\n    local value=$2\n    local i=0\n    local j=${#list[@]}\n    while ((i < j)); do\n        local mid=$(((i + j) / 2))\n        if ((value <= list[mid])); then\n            j=$mid\n        else\n            i=$((mid + 1))\n        fi\n    done\n    echo $i"
  ]
}