{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n#\n# $1 is an integer\nnext_smallest_palindrome() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    next_smallest_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"99\") = \"101\" ]]\n    [[ $(candidate \"1221\") = \"1331\" ]]\n    [[ $(candidate \"120\") = \"121\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -i num=$1\n  local -i palindrome=0\n  local -i reverse=0\n  local -i remainder=0\n  local -i temp=0\n  local -i digits=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\n  while true; do\n    num=$((num + 1))\n    temp=$num\n    reverse=0\n    while [ $temp -gt 0 ]; do\n      remainder=$((temp % 10))\n      reverse=$((reverse * 10 + remainder))\n      temp=$((temp / 10))\n    done\n    if [ $num -eq $reverse ]; then\n      palindrome=$num\n      break\n    fi\n  done\n\n  echo $palindrome",
    "    local n=$1\n    local n_len=${#n}\n    local n_half=$((n_len / 2))\n    local n_left=${n:0:n_half}\n    local n_right=${n:n_half + n_len % 2}\n    local n_left_rev=$(rev <<< \"$n_left\")\n    local n_right_rev=$(rev <<< \"$n_right\")\n    local n_left_rev_len=${#n_left_rev}\n    local n_right_rev_len=${#n_right_rev}\n    local n_left_rev_half=$((n_left_rev_len / 2))\n    local n_right_rev_half=$((n_right_rev_len / 2))\n    local n_left_rev_left=${n_left_rev:0:n_left_rev_half}\n    local n_left_rev_right=${n_left_rev:n_left_rev_half + n_left_rev_len % 2}\n    local n_right_rev_left=${n_right_rev:0:n_right_rev_half}\n    local n_right_rev_right=${n_right_rev:n_right_rev_half + n_right_rev_len % 2}\n    local n_left_rev_left_len=${#n_left_rev_left}\n    local n_left_rev_right_len=${#n_left_rev_right}\n    local n_right_rev_left_len=${#n_right_rev_left}\n    local n_right_rev_right_len=${#n_right_rev_right}\n    local n_left_rev_left_half=$((n_left_rev_left_len / 2))\n    local n_left_rev_right_half=$((n_left_rev_right_len / 2))\n    local n_right_rev_left_half=$((n_right_rev_left_len / 2))\n    local n_right_rev_right_half=$((n_right_rev_right_len / 2))\n    local",
    "  local num=$1\n  local num_len=${#num}\n  local half_len=$((num_len / 2))\n  local half_num=${num:0:half_len}\n  local half_num_rev=$(rev <<< \"$half_num\")\n  local half_num_rev_len=${#half_num_rev}\n  local half_num_rev_len_diff=$((half_len - half_num_rev_len))\n  local half_num_rev_len_diff_str=$(printf \"%0${half_num_rev_len_diff}d\" 0)\n  local half_num_rev_len_diff_str_rev=$(rev <<< \"$half_num_rev_len_diff_str\")\n  local half_num_rev_len_diff_str_rev_len=${#half_num_rev_len_diff_str_rev}\n  local half_num_rev_len_diff_str_rev_len_diff=$((half_num_rev_len_diff - half_num_rev_len_diff_str_rev_len))\n  local half_num_rev_len_diff_str_rev_len_diff_str=$(printf \"%0${half_num_rev_len_diff_str_rev_len_diff}d\" 0)\n  local half_num_rev_len_diff_str_rev_len_diff_str_rev=$(rev <<< \"$half_num_rev_len_diff_str_rev_len_diff_str\")\n  local half_num_rev_len_diff_str_rev_len_diff_str_rev_len=${#half_num_rev_len_diff_str_rev_len_diff_str_rev}\n  local half_num_rev_len_diff_str_rev_len_diff_str_rev_len_diff=$((half_num_rev_len_diff_str_rev_len_diff - half_num_rev_len_diff_str_rev_len_diff_str_rev_len))\n  local half_num_rev_len_diff_str_rev_len_diff_str_rev_len_diff",
    "  local n=$1\n  local m=$n\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n ",
    "  local num=$1\n  local palindrome=0\n  local reverse=0\n  local temp=0\n  local digit=0\n\n  while [ $palindrome -eq 0 ]; do\n    num=$((num-1))\n    temp=$num\n    reverse=0\n    while [ $temp -gt 0 ]; do\n      digit=$((temp%10))\n      reverse=$((reverse*10+digit))\n      temp=$((temp/10))\n    done\n    if [ $num -eq $reverse ]; then\n      palindrome=$num\n    fi\n  done\n  echo $palindrome",
    "    local number=$1\n    local number_length=${#number}\n    local number_length_half=$((number_length / 2))\n    local number_left=${number:0:number_length_half}\n    local number_right=${number:number_length_half}\n    local number_right_reverse=$(echo $number_right | rev)\n    local number_left_reverse=$(echo $number_left | rev)\n    local number_left_reverse_length=${#number_left_reverse}\n    local number_left_reverse_length_half=$((number_left_reverse_length / 2))\n    local number_left_reverse_left=${number_left_reverse:0:number_left_reverse_length_half}\n    local number_left_reverse_right=${number_left_reverse:number_left_reverse_length_half}\n    local number_left_reverse_right_length=${#number_left_reverse_right}\n    local number_left_reverse_right_length_half=$((number_left_reverse_right_length / 2))\n    local number_left_reverse_right_left=${number_left_reverse_right:0:number_left_reverse_right_length_half}\n    local number_left_reverse_right_right=${number_left_reverse_right:number_left_reverse_right_length_half}\n    local number_left_reverse_right_right_length=${#number_left_reverse_right_right}\n    local number_left_reverse_right_right_length_half=$((number_left_reverse_right_right_length / 2))\n    local number_left_reverse_right_right_left=${number_left_reverse_right_right:0:number_left_reverse_right_right_length_half}\n    local number_left_reverse_right_right_right=${number_left_reverse_right_right:number_left_reverse_right_right_length_half}\n    local number_left_reverse_right_right_right_length=${#number_left_reverse_right_right_right}\n    local number_left_reverse_right_right_right_",
    "    local number=$1\n    local number_length=${#number}\n    local half_length=$((number_length / 2))\n    local left_half=${number:0:half_length}\n    local right_half=${number:half_length}\n    local left_half_length=${#left_half}\n    local right_half_length=${#right_half}\n    local left_half_reversed=$(reverse_string \"$left_half\")\n    local right_half_reversed=$(reverse_string \"$right_half\")\n    local left_half_reversed_length=${#left_half_reversed}\n    local right_half_reversed_length=${#right_half_reversed}\n    local left_half_reversed_padded=$(pad_string \"$left_half_reversed\" \"$left_half_length\")\n    local right_half_reversed_padded=$(pad_string \"$right_half_reversed\" \"$right_half_length\")\n    local left_half_reversed_padded_length=${#left_half_reversed_padded}\n    local right_half_reversed_padded_length=${#right_half_reversed_padded}\n    local left_half_reversed_padded_decimal=$(string_to_decimal \"$left_half_reversed_padded\")\n    local right_half_reversed_padded_decimal=$(string_to_decimal \"$right_half_reversed_padded\")\n    local left_half_decimal=$(string_to_decimal \"$left_half\")\n    local right_half_decimal=$(string_to_decimal \"$right_half\")\n    local left_half_reversed_decimal=$(string_to_decimal \"$left_half_reversed\")\n    local right_half_reversed_decimal=$(string_to_decimal \"$right_half_reversed\")\n    local left_half_reversed_padded_decimal_plus_one=$((left_half_reversed_padded_",
    "  local num=$1\n  local num_len=${#num}\n  local half_len=$((num_len / 2))\n  local half_num=${num:0:half_len}\n  local half_num_rev=$(rev <<< \"$half_num\")\n  local half_num_rev_len=${#half_num_rev}\n  local half_num_rev_len_diff=$((half_len - half_num_rev_len))\n  local half_num_rev_pad=$(printf \"%0${half_num_rev_len_diff}d\" 0)\n  local half_num_rev_pad_len=${#half_num_rev_pad}\n  local half_num_rev_pad_len_diff=$((half_num_rev_pad_len - half_num_rev_len_diff))\n  local half_num_rev_pad_rev=$(rev <<< \"$half_num_rev_pad\")\n  local half_num_rev_pad_rev_len=${#half_num_rev_pad_rev}\n  local half_num_rev_pad_rev_len_diff=$((half_num_rev_pad_rev_len - half_num_rev_pad_len_diff))\n  local half_num_rev_pad_rev_pad=$(printf \"%0${half_num_rev_pad_rev_len_diff}d\" 0)\n  local half_num_rev_pad_rev_pad_len=${#half_num_rev_pad_rev_pad}\n  local half_num_rev_pad_rev_pad_len_diff=$((half_num_rev_pad_rev_pad_len - half_num_rev_pad_rev_len_diff))\n  local half_num_rev_pad_rev_pad_rev=$(rev <<< \"$half_num_rev_pad_rev_pad\")\n  local half_num_rev_pad_rev_pad_rev_len=${#half_num_rev_pad_rev_pad_rev}\n  local half_num_rev_pad_rev_pad_rev_len_diff=$((half_num_rev_pad_rev_",
    "    local number=$1\n    local number_length=${#number}\n    local number_length_half=$((number_length / 2))\n    local number_length_odd=$((number_length % 2))\n    local number_length_half_plus_one=$((number_length_half + number_length_odd))\n    local number_left_half=${number:0:number_length_half}\n    local number_right_half=${number:number_length_half_plus_one}\n    local number_left_half_reversed=$(echo $number_left_half | rev)\n    local number_left_half_reversed_plus_one=$((number_left_half_reversed + 1))\n    local number_left_half_reversed_plus_one_length=${#number_left_half_reversed_plus_one}\n    local number_left_half_reversed_plus_one_length_diff=$((number_length_half - number_left_half_reversed_plus_one_length))\n    local number_left_half_reversed_plus_one_padded=$(printf \"%0${number_left_half_reversed_plus_one_length_diff}d\" $number_left_half_reversed_plus_one)\n    local number_left_half_reversed_plus_one_padded_reversed=$(echo $number_left_half_reversed_plus_one_padded | rev)\n    local number_left_half_reversed_plus_one_padded_reversed_plus_one=$((number_left_half_reversed_plus_one_padded_reversed + 1))\n    local number_left_half_reversed_plus_one_padded_reversed_plus_one_length=${#number_left_half_reversed_plus_one_padded_reversed_plus_one}\n    local number_left_half_reversed_plus_one_padded_reversed_plus_one_length_diff=$((number_length_half - number_left_half_revers",
    "  local num=$1\n  local num_len=${#num}\n  local num_half=$((num_len / 2))\n  local num_half_len=$((num_half + num_len % 2))\n  local num_half_left=${num:0:num_half_len}\n  local num_half_right=${num:num_half_len:num_half}\n  local num_half_right_rev=$(rev <<< \"$num_half_right\")\n  local num_half_left_rev=$(rev <<< \"$num_half_left\")\n  local num_half_left_rev_int=$((10#$num_half_left_rev))\n  local num_half_right_rev_int=$((10#$num_half_right_rev))\n  local num_half_left_int=$((10#$num_half_left))\n  local num_half_right_int=$((10#$num_half_right))\n  local num_half_left_rev_int_next=$((num_half_left_rev_int + 1))\n  local num_half_left_rev_next=$(rev <<< \"$num_half_left_rev_int_next\")\n  local num_half_left_rev_next_len=${#num_half_left_rev_next}\n  local num_half_left_rev_next_len_diff=$((num_half_left_rev_next_len - num_half_len))\n  local num_half_left_rev_next_len_diff_abs=${num_half_left_rev_next_len_diff#-}\n  local num_half_left_rev_next_len_diff_abs_int=$((10#$num_half_left_rev_next_len_diff_abs))\n  local num_half_left_rev_next_len_diff_abs_int_next=$((num_half_left_rev_next_len_diff_abs_int + 1))\n  local num_half_left_rev_next_len_diff_abs_int_next_len=${#num_half_left_rev_next_len_diff_abs_int_next",
    "    local num=$1\n    local digits=$(echo $num | wc -c)\n    local half=$((digits/2))\n    local left=$(echo $num | cut -c1-$half)\n    local right=$(echo $num | cut -c$((half+1))-$digits)\n    local left_rev=$(echo $left | rev)\n    local right_rev=$(echo $right | rev)\n    if [[ $left -eq $right_rev ]]; then\n        echo $num\n    elif [[ $left -gt $right_rev ]]; then\n        echo $left$left_rev\n    else\n        local left_inc=$(echo $left | awk '{print $1+1}')\n        local left_inc_rev=$(echo $left_inc | rev)\n        if [[ $left_inc -eq $left_inc_rev ]]; then\n            echo $left_inc$left_inc_rev\n        else\n            echo $left_inc$left_rev\n        fi\n    fi",
    "  local num=$1\n  local num_len=${#num}\n  local num_len_half=$((num_len/2))\n  local num_len_half_odd=$((num_len%2))\n  local num_len_half_odd_add=$((num_len_half_odd*10))\n  local num_len_half_odd_add_half=$((num_len_half_odd_add/2))\n  local num_len_half_odd_add_half_sub=$((num_len_half_odd_add_half*10))\n  local num_len_half_odd_add_half_sub_half=$((num_len_half_odd_add_half_sub/2))\n  local num_len_half_odd_add_half_sub_half_add=$((num_len_half_odd_add_half_sub_half*10))\n  local num_len_half_odd_add_half_sub_half_add_half=$((num_len_half_odd_add_half_sub_half_add/2))\n  local num_len_half_odd_add_half_sub_half_add_half_sub=$((num_len_half_odd_add_half_sub_half_add_half*10))\n  local num_len_half_odd_add_half_sub_half_add_half_sub_half=$((num_len_half_odd_add_half_sub_half_add_half_sub/2))\n  local num_len_half_odd_add_half_sub_half_add_half_sub_half_add=$((num_len_half_odd_add_half_sub_half_add_half_sub_half*10))\n  local num_len_half_odd_add_half_sub_half_add_half_sub_half_add_half=$((num_len_half_odd_add_half_sub_half_add_half_sub_half_add/2))\n  local num_len_half_odd_add_half_sub_half_add_half_sub_half_add_half_sub=$((num_len_half_odd",
    "  local num=$1\n  local num_len=${#num}\n  local half_len=$((num_len / 2))\n  local left_half=${num:0:half_len}\n  local right_half=${num:half_len}\n  local left_half_len=${#left_half}\n  local right_half_len=${#right_half}\n\n  # If the number is a palindrome, then increment the left half and return the result.\n  if [[ $left_half == $right_half ]]; then\n    local left_half_incr=$((left_half + 1))\n    local left_half_incr_len=${#left_half_incr}\n    local left_half_incr_pad=$((left_half_len - left_half_incr_len))\n    local left_half_incr_padded=$(printf \"%0${left_half_incr_pad}d%s\" 0 $left_half_incr)\n    local right_half_incr_padded=${left_half_incr_padded:0:half_len}\n    local result=${left_half_incr_padded}${right_half_incr_padded}\n    echo $result\n    return\n  fi\n\n  # If the number is not a palindrome, then increment the left half and return the result.\n  local left_half_incr=$((left_half + 1))\n  local left_half_incr_len=${#left_half_incr}\n  local left_half_incr_pad=$((left_half_len - left_half_incr_len))\n  local left_half_incr_padded=$(printf \"%0${left_half_incr_pad}d%s\" 0 $left_half_incr)\n  local right_half_incr_padded=${left_half_incr_padded:0:half_len}\n  local result=${left_half_incr_padded}${right_half_incr_padded}\n  echo $result",
    "    local number=$1\n    local number_length=${#number}\n    local half_length=$((number_length / 2))\n    local first_half=${number:0:half_length}\n    local second_half=${number:$((half_length + number_length % 2)):half_length}\n    local first_half_decremented=$((first_half - 1))\n    local first_half_incremented=$((first_half + 1))\n    local second_half_reversed=$(echo $second_half | rev)\n\n    if [[ $first_half_decremented -eq 0 ]]; then\n        echo $((first_half_incremented * 10 ** half_length + first_half_incremented))\n    elif [[ $first_half_decremented -lt 0 ]]; then\n        echo $((first_half_incremented * 10 ** half_length + first_half_incremented))\n    elif [[ $first_half -eq $second_half_reversed ]]; then\n        echo $number\n    elif [[ $first_half -gt $second_half_reversed ]]; then\n        echo $((first_half * 10 ** half_length + first_half))\n    elif [[ $first_half -lt $second_half_reversed ]]; then\n        echo $((first_half_incremented * 10 ** half_length + first_half_incremented))\n    fi",
    "    local number=$1\n    local number_length=${#number}\n    local left_half_length=$((number_length / 2))\n    local left_half=${number:0:left_half_length}\n    local right_half=${number:$left_half_length}\n    local right_half_length=${#right_half}\n    local right_half_reversed=$(reverse_string \"$right_half\")\n    local left_half_incremented=$((left_half + 1))\n    local left_half_incremented_length=${#left_half_incremented}\n    local left_half_incremented_padded=$(pad_string \"$left_half_incremented\" \"$left_half_length\")\n    local left_half_incremented_padded_reversed=$(reverse_string \"$left_half_incremented_padded\")\n    local left_half_incremented_padded_reversed_length=${#left_half_incremented_padded_reversed}\n    local left_half_incremented_padded_reversed_truncated=${left_half_incremented_padded_reversed:0:right_half_length}\n    local left_half_incremented_padded_reversed_truncated_length=${#left_half_incremented_padded_reversed_truncated}\n\n    if [ \"$left_half_incremented_padded_reversed_truncated_length\" -lt \"$right_half_length\" ]; then\n        left_half_incremented_padded_reversed_truncated=$(pad_string \"$left_half_incremented_padded_reversed_truncated\" \"$right_half_length\")\n    fi\n\n    if [ \"$left_half_incremented_padded_reversed_truncated\" -gt \"$right_half\" ]; then\n        echo \"$left_half_incremented_padded$left_half_incremented_padded_reversed_truncated\"\n    else\n        echo \"$left_half$right_half_reversed\"\n    fi",
    "    local num=$1\n    local num_len=${#num}\n    local half_len=$((num_len/2))\n    local half_num=${num:0:half_len}\n    local half_num_rev=$(rev <<< \"$half_num\")\n    local half_num_rev_len=${#half_num_rev}\n    local half_num_rev_len_diff=$((half_len - half_num_rev_len))\n    local half_num_rev_pad=$(printf \"%0${half_num_rev_len_diff}d\" 0)\n    local half_num_rev_pad=$half_num_rev_pad$half_num_rev\n    local half_num_rev_pad_len=${#half_num_rev_pad}\n    local half_num_rev_pad_len_diff=$((half_len - half_num_rev_pad_len))\n    local half_num_rev_pad_pad=$(printf \"%0${half_num_rev_pad_len_diff}d\" 0)\n    local half_num_rev_pad_pad=$half_num_rev_pad_pad$half_num_rev_pad\n    local half_num_rev_pad_pad_len=${#half_num_rev_pad_pad}\n    local half_num_rev_pad_pad_len_diff=$((half_len - half_num_rev_pad_pad_len))\n    local half_num_rev_pad_pad_pad=$(printf \"%0${half_num_rev_pad_pad_len_diff}d\" 0)\n    local half_num_rev_pad_pad_pad=$half_num_rev_pad_pad_pad$half_num_rev_pad_pad\n    local half_num_rev_pad_pad_pad_len=${#half_num_rev_pad_pad_pad}\n    local half_num_rev_pad_pad_pad_len_diff=$((half_len - half_num_rev_pad_pad_pad_len))\n    local half_num_rev_pad_pad_pad_pad=$(printf \"%0${half_num_rev",
    "    local number=$1\n    local palindrome=0\n    local digits=${#number}\n    local half_digits=$((digits / 2))\n    local half_number=${number:0:half_digits}\n    local reverse_half_number=$(reverse_string \"$half_number\")\n    local left_half_number=0\n    local right_half_number=0\n    local left_half_number_plus_one=0\n    local right_half_number_plus_one=0\n\n    if (( digits % 2 == 0 )); then\n        left_half_number=$half_number\n        right_half_number=$reverse_half_number\n    else\n        left_half_number=${half_number:0:$((half_digits - 1))}\n        right_half_number=${reverse_half_number:0:$((half_digits - 1))}\n    fi\n\n    left_half_number_plus_one=$((left_half_number + 1))\n    right_half_number_plus_one=$((right_half_number + 1))\n\n    if (( left_half_number_plus_one < right_half_number )); then\n        palindrome=$((left_half_number * 10 ** half_digits + reverse_string \"$left_half_number\"))\n    elif (( left_half_number_plus_one > right_half_number )); then\n        palindrome=$((left_half_number_plus_one * 10 ** half_digits + reverse_string \"$left_half_number_plus_one\"))\n    else\n        palindrome=$((left_half_number_plus_one * 10 ** half_digits + reverse_string \"$left_half_number_plus_one\"))\n    fi\n\n    echo \"$palindrome\"",
    "  local n=$1\n  local m=$n\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n ",
    "  local num=$1\n  local digits=$(echo $num | wc -c)\n  local half=$((digits/2))\n  local left=$(echo $num | cut -c1-$half)\n  local right=$(echo $num | cut -c$((digits-half+1))-$digits)\n  local left_rev=$(echo $left | rev)\n  if [[ $left == $left_rev ]]; then\n    echo $num\n  elif [[ $left -gt $left_rev ]]; then\n    echo $left$(echo $left | rev)\n  else\n    local left_inc=$(echo $left | rev | awk '{print $1+1}' | rev)\n    echo $left_inc$(echo $left_inc | rev)\n  fi",
    "    local num=$1\n    local num_len=${#num}\n    local num_len_half=$((num_len / 2))\n    local num_len_half_odd=$((num_len % 2))\n    local num_len_half_odd_adj=$((num_len_half_odd + 1))\n    local num_len_half_odd_adj_half=$((num_len_half_odd_adj / 2))\n    local num_len_half_odd_adj_half_adj=$((num_len_half_odd_adj_half - 1))\n    local num_len_half_odd_adj_half_adj_half=$((num_len_half_odd_adj_half_adj / 2))\n    local num_len_half_odd_adj_half_adj_half_adj=$((num_len_half_odd_adj_half_adj_half + 1))\n    local num_len_half_odd_adj_half_adj_half_adj_half=$((num_len_half_odd_adj_half_adj_half_adj / 2))\n    local num_len_half_odd_adj_half_adj_half_adj_half_adj=$((num_len_half_odd_adj_half_adj_half_adj_half + 1))\n    local num_len_half_odd_adj_half_adj_half_adj_half_adj_half=$((num_len_half_odd_adj_half_adj_half_adj_half_adj / 2))\n    local num_len_half_odd_adj_half_adj_half_adj_half_adj_half_adj=$((num_len_half_odd_adj_half_adj_half_adj_half_adj_half + 1))\n    local num_len_half_odd_adj_half_adj_half_adj_half_adj_half_adj_half=$((num_len_half_odd_adj_half_adj_half_adj_half_adj_half_adj / 2))\n    local num_len_half_odd_adj_half_adj_half_adj_half_adj_half_adj_half_adj=$((num_len_half_odd"
  ]
}