{
  "name": "mbpp_415_max_Product",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find a pair with highest product from a given array of integers.\n#\n# $1 is a space-separated list\nmax_Product() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    max_Product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 7 0 8 4\") = \"7 8\" ]]\n    [[ $(candidate \"0 -1 -2 -4 5 0 -6\") = \"-4 -6\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 3\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=$1\n    local max=0\n    local product=0\n    for i in $list; do\n        for j in $list; do\n            product=$((i * j))\n            if [ $product -gt $max ]; then\n                max=$product\n            fi\n        done\n    done\n    echo $max",
    "  local -a array=($1)\n  local max_product=0\n  local product=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  for ((i=0; i<${#array[@]}; i++))\n  do\n    for ((j=i+1; j<${#array[@]}; j++))\n    do\n      product=$((array[i] * array[j]))\n      if [ $product -gt $max_product ]\n      then\n        max_product=$product\n        k=$i\n        l=$j\n      fi\n    done\n  done\n  echo \"The pair with highest product is (${array[k]}, ${array[l]})\"",
    "    max_product=0\n    for (( i=0; i<$#; i++ ))\n    do\n        for (( j=i+1; j<$#; j++ ))\n        do\n            product=$(( $1 * $2 ))\n            if (( $product > $max_product ))\n            then\n                max_product=$product\n            fi\n        done\n    done\n    echo $max_product",
    "    local -a arr=(\"$@\")\n    local max_prod=0\n    local prod=0\n    local max1=0\n    local max2=0\n    local min1=0\n    local min2=0\n    for i in \"${arr[@]}\"; do\n        if [ \"$i\" -gt \"$max1\" ]; then\n            max2=$max1\n            max1=$i\n        elif [ \"$i\" -gt \"$max2\" ]; then\n            max2=$i\n        fi\n        if [ \"$i\" -lt \"$min1\" ]; then\n            min2=$min1\n            min1=$i\n        elif [ \"$i\" -lt \"$min2\" ]; then\n            min2=$i\n        fi\n    done\n    prod=$((max1 * max2))\n    if [ \"$prod\" -gt \"$max_prod\" ]; then\n        max_prod=$prod\n    fi\n    prod=$((min1 * min2))\n    if [ \"$prod\" -gt \"$max_prod\" ]; then\n        max_prod=$prod\n    fi\n    echo \"$max_prod\"",
    "    local -a array=($1)\n    local max=0\n    local product=0\n    for ((i=0; i<${#array[@]}; i++)); do\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            product=$((array[i]*array[j]))\n            if [[ $product -gt $max ]]; then\n                max=$product\n            fi\n        done\n    done\n    echo $max",
    "    local -a array=($1)\n    local max_product=0\n    local max_product_pair=()\n    local max_product_pair_index=()\n    local max_product_pair_index_count=0\n    local max_product_pair_index_count_prev=0\n    local max_product_pair_index_count_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair_index_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_product_pair",
    "    local -a arr=($1)\n    local max=0\n    local max_i=0\n    local max_j=0\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ $((${arr[i]} * ${arr[j]})) -gt $max ]]; then\n                max=${arr[i]} * ${arr[j]}\n                max_i=$i\n                max_j=$j\n            fi\n        done\n    done\n    echo \"Max product is ${arr[max_i]} * ${arr[max_j]} = $max\"",
    "  local -a arr=(\"$@\")\n  local max1=0\n  local max2=0\n  local max3=0\n  local max4=0\n  local max5=0\n  local max6=0\n  local max7=0\n  local max8=0\n  local max9=0\n  local max10=0\n  local max11=0\n  local max12=0\n  local max13=0\n  local max14=0\n  local max15=0\n  local max16=0\n  local max17=0\n  local max18=0\n  local max19=0\n  local max20=0\n  local max21=0\n  local max22=0\n  local max23=0\n  local max24=0\n  local max25=0\n  local max26=0\n  local max27=0\n  local max28=0\n  local max29=0\n  local max30=0\n  local max31=0\n  local max32=0\n  local max33=0\n  local max34=0\n  local max35=0\n  local max36=0\n  local max37=0\n  local max38=0\n  local max39=0\n  local max40=0\n  local max41=0\n  local max42=0\n  local max43=0\n  local max44=0\n  local max45=0\n  local max46=0\n  local max47=0\n  local max48=0\n  local max49=0\n  local max50=0\n  local max51=0\n  local max52=0\n  local max53=0\n  local max54=0\n  local max55=0\n  local max56=0\n  local max57=0\n  local max58=0\n  local max59=0\n  local max60=0\n  local max61=0\n  local max62=0\n  local max63=0\n  local max64=0\n  local max65=0\n  local max66=0\n  local max67=0\n  local max68=0\n  local max69=0\n  local max70=0\n  local max71=0\n  local max",
    "    local -a arr=(\"$@\")\n    local max=0\n    local max_i=0\n    local max_j=0\n    for i in \"${!arr[@]}\"; do\n        for j in \"${!arr[@]}\"; do\n            if [ \"$i\" -ne \"$j\" ]; then\n                if [ \"${arr[$i]}\" -gt \"$max\" ]; then\n                    max=\"${arr[$i]}\"\n                    max_i=\"$i\"\n                fi\n                if [ \"${arr[$j]}\" -gt \"$max\" ]; then\n                    max=\"${arr[$j]}\"\n                    max_j=\"$j\"\n                fi\n            fi\n        done\n    done\n    echo \"${arr[$max_i]} ${arr[$max_j]}\"",
    "    local -a arr=(\"$@\")\n    local max1=0\n    local max2=0\n    local max3=0\n    local max4=0\n    local max5=0\n    local max6=0\n    local max7=0\n    local max8=0\n    local max9=0\n    local max10=0\n    local max11=0\n    local max12=0\n    local max13=0\n    local max14=0\n    local max15=0\n    local max16=0\n    local max17=0\n    local max18=0\n    local max19=0\n    local max20=0\n    local max21=0\n    local max22=0\n    local max23=0\n    local max24=0\n    local max25=0\n    local max26=0\n    local max27=0\n    local max28=0\n    local max29=0\n    local max30=0\n    local max31=0\n    local max32=0\n    local max33=0\n    local max34=0\n    local max35=0\n    local max36=0\n    local max37=0\n    local max38=0\n    local max39=0\n    local max40=0\n    local max41=0\n    local max42=0\n    local max43=0\n    local max44=0\n    local max45=0\n    local max46=0\n    local max47=0\n    local max48=0\n    local max49=0\n    local max50=0\n    local max51=0\n    local max52=0\n    local max53=0\n    local max54=0\n    local max55=0\n    local max56=0\n    local max57=0\n    local max58=0\n    local max59=0\n    local max60=0\n    local max61=0\n    local max62=0\n    local max63=0\n    local max64=0\n    local max65=0\n    local max66=0\n    local max67=0\n    local max68=0\n    local max69=0\n    local max70=0\n    local max71=0\n    local max",
    "    local -a array=($1)\n    local max=${array[0]}\n    local second_max=${array[1]}\n    local min=${array[0]}\n    local second_min=${array[1]}\n    local product=0\n    local i=0\n    local len=${#array[@]}\n\n    if [[ $len -lt 2 ]]; then\n        echo \"Need at least 2 numbers\"\n        return 1\n    fi\n\n    if [[ $len -eq 2 ]]; then\n        echo $(( array[0] * array[1] ))\n        return 0\n    fi\n\n    for (( i=0; i<len; i++ )); do\n        if [[ ${array[$i]} -gt $max ]]; then\n            second_max=$max\n            max=${array[$i]}\n        elif [[ ${array[$i]} -gt $second_max ]]; then\n            second_max=${array[$i]}\n        fi\n\n        if [[ ${array[$i]} -lt $min ]]; then\n            second_min=$min\n            min=${array[$i]}\n        elif [[ ${array[$i]} -lt $second_min ]]; then\n            second_min=${array[$i]}\n        fi\n    done\n\n    product=$(( max * second_max ))\n    if [[ $(( min * second_min )) -gt $product ]]; then\n        product=$(( min * second_min ))\n    fi\n\n    echo $product",
    "    local -a array=($1)\n    local max=${array[0]}\n    local second_max=${array[0]}\n    local min=${array[0]}\n    local second_min=${array[0]}\n    for i in ${array[@]}; do\n        if [[ $i -gt $max ]]; then\n            second_max=$max\n            max=$i\n        elif [[ $i -gt $second_max ]]; then\n            second_max=$i\n        fi\n        if [[ $i -lt $min ]]; then\n            second_min=$min\n            min=$i\n        elif [[ $i -lt $second_min ]]; then\n            second_min=$i\n        fi\n    done\n    echo $((max * second_max)) $((min * second_min)) | sort -nr | head -n1",
    "    local -a array=($1)\n    local max_product=0\n    local product=0\n    for ((i=0; i<${#array[@]}; i++)); do\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            product=$((array[i] * array[j]))\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n    echo $max_product",
    "    # Convert the space-separated list into an array\n    local -a arr=($1)\n    # Sort the array in descending order\n    IFS=$'\\n' sorted=($(sort -nr <<<\"${arr[*]}\"))\n    # Print the product of the first two elements\n    echo ${sorted[0]}*${sorted[1]} | bc",
    "    local -a array=(\"$@\")\n    local max=0\n    for ((i=0; i<${#array[@]}; i++)); do\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            local product=$((array[i] * array[j]))\n            if ((product > max)); then\n                max=$product\n            fi\n        done\n    done\n    echo $max",
    "    local -a arr=($1)\n    local max=0\n    local max_i=0\n    local max_j=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ $((arr[i]*arr[j])) -gt $max ]]; then\n                max=$((arr[i]*arr[j]))\n                max_i=$i\n                max_j=$j\n            fi\n        done\n    done\n    echo \"The pair with the highest product is ${arr[max_i]} and ${arr[max_j]}\"",
    "    local -a array=(\"$@\")\n    local max=0\n    for ((i=0; i<${#array[@]}; i++)); do\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            local product=$((array[i] * array[j]))\n            if [[ $product -gt $max ]]; then\n                max=$product\n            fi\n        done\n    done\n    echo $max",
    "    local -a arr=($1)\n    local max=0\n    local max_i=0\n    local max_j=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((${arr[i]} * ${arr[j]} > max)); then\n                max=${arr[i]} * ${arr[j]}\n                max_i=$i\n                max_j=$j\n            fi\n        done\n    done\n    echo \"(${arr[max_i]}, ${arr[max_j]})\"",
    "    local -a arr=(\"$@\")\n    local max1=0\n    local max2=0\n    local max3=0\n    local max4=0\n    local max5=0\n    local max6=0\n    local max7=0\n    local max8=0\n    local max9=0\n    local max10=0\n    local max11=0\n    local max12=0\n    local max13=0\n    local max14=0\n    local max15=0\n    local max16=0\n    local max17=0\n    local max18=0\n    local max19=0\n    local max20=0\n    local max21=0\n    local max22=0\n    local max23=0\n    local max24=0\n    local max25=0\n    local max26=0\n    local max27=0\n    local max28=0\n    local max29=0\n    local max30=0\n    local max31=0\n    local max32=0\n    local max33=0\n    local max34=0\n    local max35=0\n    local max36=0\n    local max37=0\n    local max38=0\n    local max39=0\n    local max40=0\n    local max41=0\n    local max42=0\n    local max43=0\n    local max44=0\n    local max45=0\n    local max46=0\n    local max47=0\n    local max48=0\n    local max49=0\n    local max50=0\n    local max51=0\n    local max52=0\n    local max53=0\n    local max54=0\n    local max55=0\n    local max56=0\n    local max57=0\n    local max58=0\n    local max59=0\n    local max60=0\n    local max61=0\n    local max62=0\n    local max63=0\n    local max64=0\n    local max65=0\n    local max66=0\n    local max67=0\n    local max68=0\n    local max69=0\n    local max70=0\n    local max71=0\n    local max",
    "    # Convert the input string to an array\n    arr=($1)\n    # Sort the array in descending order\n    arr=($(for i in \"${arr[@]}\"; do echo $i; done | sort -nr))\n    # Multiply the first two elements\n    echo \"${arr[0]} * ${arr[1]} = $((arr[0]*arr[1]))\""
  ]
}