{
  "name": "mbpp_3_is_not_prime",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to identify non-prime numbers.\n#\n# $1 is an integer\nis_not_prime() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    is_not_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"35\") = \"true\" ]]\n    [[ $(candidate \"37\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if [ $1 -lt 2 ]; then\n        return 0\n    fi\n\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 1\n    fi\n\n    for ((i = 2; i < $1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n\n    return 1",
    "    if [ $1 -le 1 ]; then\n        return 0\n    fi\n\n    for (( i=2; i<$1; i++ )); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 1\n    fi\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -le 1 ]; then\n        return 0\n    fi\n\n    for ((i=2; i<$1; i++)); do\n        if [ $(($1 % $i)) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 0\n    fi\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -le 1 ]; then\n        return 0\n    fi\n\n    for (( i=2; i<$1; i++ )); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 0\n    fi\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 1\n    fi\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 0\n    fi\n    for (( i = 2; i < $1; i++ )); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 1\n    fi\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -le 1 ]; then\n        return 0\n    fi\n\n    for (( i=2; i<$1; i++ )); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n\n    return 1",
    "    if [ $1 -le 1 ]; then\n        return 0\n    fi\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "  if [ $1 -lt 2 ]; then\n    return 0\n  fi\n  for ((i=2; i<$1; i++)); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n      return 0\n    fi\n  done\n  return 1",
    "    if [ $1 -lt 2 ]; then\n        return 0\n    fi\n    for ((i = 2; i < $1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 1\n    fi\n    for ((i = 2; i < $1; i++)); do\n        if [ $(($1 % $i)) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 0\n    fi\n\n    for (( i=2; i<$1; i++ )); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 0\n    fi\n\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n\n    return 1",
    "    if [[ $1 -le 1 ]]; then\n        return 0\n    fi\n\n    for (( i=2; i<$1; i++ )); do\n        if [[ $(( $1 % $i )) -eq 0 ]]; then\n            return 0\n        fi\n    done\n\n    return 1",
    "    if [ $1 -lt 2 ]; then\n        return 1\n    fi\n    for ((i=2; i<$1; i++)); do\n        if [ $(( $1 % $i )) -eq 0 ]; then\n            return 0\n        fi\n    done\n    return 1"
  ]
}