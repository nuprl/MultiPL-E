{
  "name": "mbpp_129_magic_square_test",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to calculate whether the matrix is a magic square.\n#\n# $1 is a newline-separated, space-separated list\nmagic_square_test() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    magic_square_test \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7 12 1 14\\n2 13 8 11\\n16 3 10 5\\n9 6 15 4\") = \"true\" ]]\n    [[ $(candidate \"2 7 6\\n9 5 1\\n4 3 8\") = \"true\" ]]\n    [[ $(candidate \"2 7 6\\n9 5 1\\n4 3 7\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -i sum=0\n  local -i sum_diag1=0\n  local -i sum_diag2=0\n  local -i sum_row=0\n  local -i sum_col=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n ",
    "  local -i sum=0\n  local -i row=0\n  local -i col=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0",
    "    local -a matrix\n    local -i i j k\n    local -i sum_row sum_col sum_diag sum_anti_diag\n    local -i sum_row_prev sum_col_prev sum_diag_prev sum_anti_diag_prev\n\n    # Read the matrix\n    i=0\n    while read -r line; do\n        matrix[i++]=$line\n    done <<< \"$1\"\n\n    # Check if the matrix is square\n    if (( ${#matrix[@]} != ${#matrix[0]} )); then\n        echo \"The matrix is not square.\"\n        return 1\n    fi\n\n    # Check if the matrix is magic square\n    for (( i=0; i<${#matrix[@]}; i++ )); do\n        sum_row=0\n        sum_col=0\n        for (( j=0; j<${#matrix[0]}; j++ )); do\n            sum_row=$(( sum_row + ${matrix[i]:j:1} ))\n            sum_col=$(( sum_col + ${matrix[j]:i:1} ))\n        done\n        if (( i == 0 )); then\n            sum_row_prev=$sum_row\n            sum_col_prev=$sum_col\n        else\n            if (( sum_row != sum_row_prev || sum_col != sum_col_prev )); then\n                echo \"The matrix is not magic square.\"\n                return 1\n            fi\n        fi\n    done\n\n    # Check if the matrix is magic square\n    sum_diag=0\n    sum_anti_diag=0\n    for (( i=0; i<${#matrix[@]}; i++ )); do\n        sum_diag=$(( sum_diag + ${matrix[i]:i:1} ))\n        sum_anti_diag=$(( sum_anti_diag + ${matrix[i]:$(( ${#matrix[0]} - i - 1 )):1} ))\n    done\n    if (( sum_diag != sum_row_prev || sum_anti_diag != sum_row_prev )); then\n        echo \"The matrix is not magic square.\"\n        return 1\n    fi\n\n",
    "    local -i sum=0\n    local -i row=0\n    local -i col=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local",
    "  local -a matrix\n  local -i i=0 j=0 sum=0\n  local -i row_sum=0 col_sum=0 diag_sum=0\n  local -i row_count=0 col_count=0 diag_count=0\n  local -i row_index=0 col_index=0 diag_index=0\n  local -i row_index_2=0 col_index_2=0 diag_index_2=0\n  local -i row_index_3=0 col_index_3=0 diag_index_3=0\n  local -i row_index_4=0 col_index_4=0 diag_index_4=0\n  local -i row_index_5=0 col_index_5=0 diag_index_5=0\n  local -i row_index_6=0 col_index_6=0 diag_index_6=0\n  local -i row_index_7=0 col_index_7=0 diag_index_7=0\n  local -i row_index_8=0 col_index_8=0 diag_index_8=0\n  local -i row_index_9=0 col_index_9=0 diag_index_9=0\n  local -i row_index_10=0 col_index_10=0 diag_index_10=0\n  local -i row_index_11=0 col_index_11=0 diag_index_11=0\n  local -i row_index_12=0 col_index_12=0 diag_index_12=0\n  local -i row_index_13=0 col_index_13=0 diag_index_13=0\n  local -i row_index_14=0 col_index_14=0 diag_index_14=0\n  local -i row_index_15=0 col_index_15=0 diag_index_15=0\n  local -i row_index_16=0 col_index_16=0 diag_index_16=0\n  local -i row_index_17=0 col_index_17=0 diag_index_",
    "  local -a matrix\n  local -i i j sum1 sum2\n  local -i n=$(wc -l <<< \"$1\")\n  local -i m=$(wc -w <<< \"$1\")\n  if (( n != m )); then\n    echo \"Not a square matrix\"\n    return 1\n  fi\n  # read the matrix into an array\n  i=0\n  while read -r line; do\n    j=0\n    for word in $line; do\n      matrix[$((i * n + j))]=$word\n      ((j++))\n    done\n    ((i++))\n  done <<< \"$1\"\n  # check the rows\n  for ((i = 0; i < n; i++)); do\n    sum1=0\n    for ((j = 0; j < n; j++)); do\n      ((sum1 += matrix[i * n + j]))\n    done\n    if ((i == 0)); then\n      sum2=$sum1\n    elif ((sum1 != sum2)); then\n      echo \"Not a magic square\"\n      return 1\n    fi\n  done\n  # check the columns\n  for ((j = 0; j < n; j++)); do\n    sum1=0\n    for ((i = 0; i < n; i++)); do\n      ((sum1 += matrix[i * n + j]))\n    done\n    if ((sum1 != sum2)); then\n      echo \"Not a magic square\"\n      return 1\n    fi\n  done\n  # check the diagonals\n  sum1=0\n  for ((i = 0; i < n; i++)); do\n    ((sum1 += matrix[i * n + i]))\n  done\n  if ((sum1 != sum2)); then\n    echo \"Not a magic square\"\n    return 1\n  fi\n  sum1=0\n  for ((i = 0; i < n; i++)); do\n    ((sum1 += matrix[i * n + (n - i - 1)]))\n  done\n  if ((sum1 != sum2)); then\n    echo \"Not a magic square\"\n    return 1\n  fi\n  echo \"It's a magic square\"",
    "  local -i sum=0\n  local -i row=0\n  local -i col=0\n  local -i diag=0\n  local -i diag2=0\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n",
    "  local -a matrix\n  local -i i j k n sum\n  local -i row_sum col_sum diag_sum\n  local -i row_sum_expected col_sum_expected diag_sum_expected\n\n  # Read the matrix into an array.\n  i=0\n  while read -r line; do\n    matrix[i++]=$line\n  done <<< \"$1\"\n\n  # Calculate the expected sum of each row, column, and diagonal.\n  n=${#matrix[0]}\n  sum=0\n  for ((i=0; i<n; i++)); do\n    sum=$((sum + ${matrix[0]:i:1}))\n  done\n  row_sum_expected=$col_sum_expected=$diag_sum_expected=$sum\n\n  # Check the sums of each row, column, and diagonal.\n  for ((i=0; i<n; i++)); do\n    row_sum=0\n    col_sum=0\n    for ((j=0; j<n; j++)); do\n      row_sum=$((row_sum + ${matrix[i]:j:1}))\n      col_sum=$((col_sum + ${matrix[j]:i:1}))\n    done\n    if [[ $row_sum != $row_sum_expected ]]; then\n      return 1\n    fi\n    if [[ $col_sum != $col_sum_expected ]]; then\n      return 1\n    fi\n  done\n\n  # Check the sum of the diagonals.\n  diag_sum=0\n  for ((i=0; i<n; i++)); do\n    diag_sum=$((diag_sum + ${matrix[i]:i:1}))\n  done\n  if [[ $diag_sum != $diag_sum_expected ]]; then\n    return 1\n  fi\n  diag_sum=0\n  for ((i=0; i<n; i++)); do\n    diag_sum=$((diag_sum + ${matrix[i]:$((n-i-1)):1}))\n  done\n  if [[ $diag_sum != $diag_sum_expected ]",
    "    local -a matrix\n    local -i i j sum\n    local -i n=0\n    local -i n_rows=0\n    local -i n_cols=0\n    local -i sum_diag1=0\n    local -i sum_diag2=0\n    local -i sum_row=0\n    local -i sum_col=0\n\n    # Read the matrix into an array\n    while read -a row; do\n        (( n_cols = ${#row[@]} ))\n        for (( j = 0; j < n_cols; j++ )); do\n            matrix[n++]=${row[j]}\n        done\n        (( n_rows++ ))\n    done <<< \"$1\"\n\n    # Check that the matrix is square\n    if (( n_rows != n_cols )); then\n        return 1\n    fi\n\n    # Check that the matrix is a magic square\n    for (( i = 0; i < n_rows; i++ )); do\n        sum_row=0\n        sum_col=0\n        for (( j = 0; j < n_cols; j++ )); do\n            (( sum_row += matrix[i * n_cols + j] ))\n            (( sum_col += matrix[j * n_cols + i] ))\n        done\n        if (( i == 0 )); then\n            sum=sum_row\n        else\n            if (( sum_row != sum || sum_col != sum )); then\n                return 1\n            fi\n        fi\n        (( sum_diag1 += matrix[i * n_cols + i] ))\n        (( sum_diag2 += matrix[i * n_cols + (n_cols - i - 1)] ))\n    done\n    if (( sum_diag1 != sum || sum_diag2 != sum )); then\n        return 1\n    fi\n\n    return 0",
    "    local -a matrix\n    local -i i j sum\n    local -i row_sum col_sum diag_sum diag_sum2\n    local -i row_count col_count\n\n    # Read the matrix into an array.\n    i=0\n    while read -r line; do\n        matrix[i++]=\"$line\"\n    done <<< \"$1\"\n\n    # Check the number of rows and columns.\n    row_count=${#matrix[@]}\n    col_count=${#matrix[0]}\n    if [[ $row_count -ne $col_count ]]; then\n        return 1\n    fi\n\n    # Check the row sums.\n    for ((i=0; i<row_count; i++)); do\n        sum=0\n        for ((j=0; j<col_count; j++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        if [[ $i -eq 0 ]]; then\n            row_sum=$sum\n        elif [[ $row_sum -ne $sum ]]; then\n            return 1\n        fi\n    done\n\n    # Check the column sums.\n    for ((j=0; j<col_count; j++)); do\n        sum=0\n        for ((i=0; i<row_count; i++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        if [[ $j -eq 0 ]]; then\n            col_sum=$sum\n        elif [[ $col_sum -ne $sum ]]; then\n            return 1\n        fi\n    done\n\n    # Check the diagonal sums.\n    sum=0\n    for ((i=0; i<row_count; i++)); do\n        sum=$((sum + ${matrix[i]:i:1}))\n    done\n    diag_sum=$sum\n    sum=0\n    for ((i=0; i<row_count; i++)); do\n        sum=$((sum + ${matrix[i]:((row_count - i - 1)):1}))\n    done\n    diag_sum2=$sum\n    if [[ $diag_sum -ne $",
    "  local -i sum=0\n  local -i sum_diag=0\n  local -i sum_diag_inv=0\n  local -i sum_row=0\n  local -i sum_col=0\n  local -i row=0\n  local -i col=0\n  local -i row_max=0\n  local -i col_max=0\n  local -i row_min=0\n  local -i col_min=0\n  local -i row_cur=0\n  local -i col_cur=0\n  local -i row_cur_max=0\n  local -i col_cur_max=0\n  local -i row_cur_min=0\n  local -i col_cur_min=0\n  local -i row_cur_sum=0\n  local -i col_cur_sum=0\n  local -i row_cur_sum_diag=0\n  local -i col_cur_sum_diag=0\n  local -i row_cur_sum_diag_inv=0\n  local -i col_cur_sum_diag_inv=0\n  local -i row_cur_sum_row=0\n  local -i col_cur_sum_col=0\n  local -i row_cur_sum_row_max=0\n  local -i col_cur_sum_col_max=0\n  local -i row_cur_sum_row_min=0\n  local -i col_cur_sum_col_min=0\n  local -i row_cur_sum_row_max_max=0\n  local -i col_cur_sum_col_max_max=0\n  local -i row_cur_sum_row_min_min=0\n  local -i col_cur_sum_col_min_min=0\n  local -i row_cur_sum_row_max_min=0\n  local -i col_cur_sum_col_max_min=0\n  local -i row_cur_sum_row_min_max=0\n  local -i col_cur_sum_col_min_max=0\n  local -i row_cur_sum_row",
    "  local sum=0\n  local row_sum=0\n  local col_sum=0\n  local diag_sum=0\n  local diag_sum_2=0\n  local row_count=0\n  local col_count=0\n  local row_index=0\n  local col_index=0\n  local row_index_2=0\n  local col_index_2=0\n  local row_index_3=0\n  local col_index_3=0\n  local row_index_4=0\n  local col_index_4=0\n  local row_index_5=0\n  local col_index_5=0\n  local row_index_6=0\n  local col_index_6=0\n  local row_index_7=0\n  local col_index_7=0\n  local row_index_8=0\n  local col_index_8=0\n  local row_index_9=0\n  local col_index_9=0\n  local row_index_10=0\n  local col_index_10=0\n  local row_index_11=0\n  local col_index_11=0\n  local row_index_12=0\n  local col_index_12=0\n  local row_index_13=0\n  local col_index_13=0\n  local row_index_14=0\n  local col_index_14=0\n  local row_index_15=0\n  local col_index_15=0\n  local row_index_16=0\n  local col_index_16=0\n  local row_index_17=0\n  local col_index_17=0\n  local row_index_18=0\n  local col_index_18=0\n  local row_index_19=0\n  local col_index_19=0\n  local row_index_20=0\n  local col_index_20=0\n  local row_index_21=0\n  local col_index_21=0\n  local row_index_22=0\n  local col_index_22=0\n  local row_index_23=0\n  local col_index_23",
    "  local -a matrix\n  local -i sum\n  local -i i j\n  local -i n\n  local -i row_sum col_sum diag_sum\n\n  # Read the matrix\n  while read -a row; do\n    matrix+=(\"${row[@]}\")\n  done <<< \"$1\"\n\n  # Get the number of rows/columns\n  n=${#matrix[@]}\n  n=$((n ** 0.5))\n\n  # Calculate the sum of the first row\n  sum=0\n  for ((i=0; i<n; i++)); do\n    sum=$((sum + matrix[i]))\n  done\n\n  # Check the sum of each row\n  for ((i=0; i<n; i++)); do\n    row_sum=0\n    for ((j=0; j<n; j++)); do\n      row_sum=$((row_sum + matrix[i*n+j]))\n    done\n    if [[ $row_sum -ne $sum ]]; then\n      echo \"Not a magic square\"\n      return\n    fi\n  done\n\n  # Check the sum of each column\n  for ((j=0; j<n; j++)); do\n    col_sum=0\n    for ((i=0; i<n; i++)); do\n      col_sum=$((col_sum + matrix[i*n+j]))\n    done\n    if [[ $col_sum -ne $sum ]]; then\n      echo \"Not a magic square\"\n      return\n    fi\n  done\n\n  # Check the sum of the diagonal\n  diag_sum=0\n  for ((i=0; i<n; i++)); do\n    diag_sum=$((diag_sum + matrix[i*n+i]))\n  done\n  if [[ $diag_sum -ne $sum ]]; then\n    echo \"Not a magic square\"\n    return\n  fi\n\n  # Check the sum of the other diagonal\n  diag_sum=0\n  for ((i=0; i<n; i++)); do\n    diag_sum=$((diag_sum + matrix[i*n+n-i-1]))\n",
    "  local -a matrix\n  local -i i=0 j=0 sum=0\n  local -i rows=0 cols=0\n  local -i row_sum=0 col_sum=0\n  local -i diag_sum=0 diag_sum_2=0\n  local -i row_index=0 col_index=0\n  local -i matrix_size=0\n  local -i row_index_2=0 col_index_2=0\n  local -i row_index_3=0 col_index_3=0\n  local -i row_index_4=0 col_index_4=0\n  local -i row_index_5=0 col_index_5=0\n  local -i row_index_6=0 col_index_6=0\n  local -i row_index_7=0 col_index_7=0\n  local -i row_index_8=0 col_index_8=0\n  local -i row_index_9=0 col_index_9=0\n  local -i row_index_10=0 col_index_10=0\n  local -i row_index_11=0 col_index_11=0\n  local -i row_index_12=0 col_index_12=0\n  local -i row_index_13=0 col_index_13=0\n  local -i row_index_14=0 col_index_14=0\n  local -i row_index_15=0 col_index_15=0\n  local -i row_index_16=0 col_index_16=0\n  local -i row_index_17=0 col_index_17=0\n  local -i row_index_18=0 col_index_18=0\n  local -i row_index_19=0 col_index_19=0\n  local -i row_index_20=0 col_index_20=0\n  local -i row_index_21=0 col_index_21=0\n  local -i row_index_22=0 col_index_22=0\n  local -i row_index_23=0 col_index_23=0\n  local",
    "  local -a matrix\n  local -i i j k sum\n  local -i n=0\n  local -i m=0\n  local -i row_sum=0\n  local -i col_sum=0\n  local -i diag_sum=0\n  local -i diag_sum_2=0\n  local -i row_count=0\n  local -i col_count=0\n\n  # Read the matrix into an array.\n  while IFS= read -r line; do\n    matrix[$n]=\"$line\"\n    (( n++ ))\n  done\n\n  # Get the number of rows and columns.\n  for (( i = 0; i < n; i++ )); do\n    for (( j = 0; j < ${#matrix[$i]}; j++ )); do\n      if [[ ${matrix[$i]:$j:1} == ' ' ]]; then\n        (( m++ ))\n      fi\n    done\n    (( m++ ))\n    (( row_count++ ))\n    m=0\n  done\n  (( col_count = m ))\n\n  # Check if the matrix is a magic square.\n  for (( i = 0; i < n; i++ )); do\n    for (( j = 0; j < ${#matrix[$i]}; j++ )); do\n      if [[ ${matrix[$i]:$j:1} == ' ' ]]; then\n        (( k++ ))\n      fi\n      if [[ $k -eq $m ]]; then\n        (( sum += ${matrix[$i]:$j:1} ))\n        (( row_sum += ${matrix[$i]:$j:1} ))\n        (( k = 0 ))\n      fi\n    done\n    if [[ $i -eq 0 ]]; then\n      (( diag_sum += ${matrix[$i]:$j:1} ))\n    fi\n    if [[ $i -eq $(( n - 1 )) ]]; then\n      (( diag_sum_2 += ${matrix[$i]:$j:1} ))\n    fi\n    (( k = 0 ))\n  done\n\n  for (( i = 0; i < n; i++ )); do\n    for (( j = 0; j",
    "  local -a matrix\n  local -i i j k\n  local -i sum_row sum_col sum_diag1 sum_diag2\n  local -i n_rows n_cols\n  local -i n_rows_expected n_cols_expected\n  local -i sum_expected\n\n  # Read the matrix into an array\n  i=0\n  while read -r line; do\n    matrix[i++]=$line\n  done <<< \"$1\"\n\n  # Check that the matrix is square\n  n_rows=${#matrix[@]}\n  n_cols=$(echo \"${matrix[0]}\" | wc -w)\n  n_rows_expected=$n_cols\n  n_cols_expected=$n_rows\n  if [[ $n_rows -ne $n_rows_expected || $n_cols -ne $n_cols_expected ]]; then\n    echo \"Matrix is not square\"\n    return 1\n  fi\n\n  # Check that the matrix has the same number of elements in each row\n  for ((i=0; i<n_rows; i++)); do\n    if [[ $(echo \"${matrix[i]}\" | wc -w) -ne $n_cols ]]; then\n      echo \"Matrix is not square\"\n      return 1\n    fi\n  done\n\n  # Check that the matrix has the same number of elements in each column\n  for ((j=0; j<n_cols; j++)); do\n    k=0\n    for ((i=0; i<n_rows; i++)); do\n      k=$((k + $(echo \"${matrix[i]}\" | cut -d ' ' -f $((j+1)))))\n    done\n    if [[ $k -ne $n_rows ]]; then\n      echo \"Matrix is not square\"\n      return 1\n    fi\n  done\n\n  # Check that the matrix has the same sum in each row\n  sum_expected=0\n  for ((j=0; j<n_cols; j++)); do\n    sum_expected=$((sum_expected + $(echo \"${matrix[0]}\" | cut -d ' ' -f $((j",
    "  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i n=0\n  local -i m=0\n  local -i k=0\n  local -i l=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo=0\n  local -i ppp=0\n  local -i qqq=",
    "  local -i sum=0\n  local -i row=0\n  local -i col=0\n  local -i diag=0\n  local -i rdiag=0\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0",
    "    local -a matrix\n    local -i i j sum\n    local -i n=0\n    local -i sum_diag_1=0\n    local -i sum_diag_2=0\n    local -i sum_row=0\n    local -i sum_col=0\n    local -i sum_expected=0\n    local -i n_rows=0\n    local -i n_cols=0\n    local -i n_rows_expected=0\n    local -i n_cols_expected=0\n\n    # Read the matrix\n    while read -r line; do\n        matrix[n++]=$line\n    done <<< \"$1\"\n\n    # Get the number of rows and columns\n    n_rows=$(echo \"${matrix[0]}\" | wc -w)\n    n_cols=${#matrix[@]}\n\n    # Calculate the expected sum of a row\n    sum_expected=$((n_rows * (n_rows * n_rows + 1) / 2))\n\n    # Check that all rows have the same number of columns\n    for ((i=0; i<n_cols; i++)); do\n        n_cols_expected=$(echo \"${matrix[i]}\" | wc -w)\n        if [[ $n_cols_expected -ne $n_rows ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n\n    # Check that all columns have the same number of rows\n    for ((j=0; j<n_rows; j++)); do\n        n_rows_expected=0\n        for ((i=0; i<n_cols; i++)); do\n            sum=$(echo \"${matrix[i]}\" | cut -d ' ' -f $((j+1)))\n            if [[ $sum -eq 0 ]]; then\n                echo \"false\"\n                return\n            fi\n            n_rows_expected=$((n_rows_expected + 1))\n        done\n        if [[ $n_rows_expected -ne $n_cols ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n\n    # Check that the sum of each row is the same\n    for",
    "  local -i sum=0\n  local -i sum_tmp=0\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n"
  ]
}