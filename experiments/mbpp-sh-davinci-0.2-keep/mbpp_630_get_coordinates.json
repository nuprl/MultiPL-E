{
  "name": "mbpp_630_get_coordinates",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n#\n# $1 is a space-separated list\nget_coordinates() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local coordinates=\"$1\"\n    local x=\"$(echo \"$coordinates\" | cut -d' ' -f1)\"\n    local y=\"$(echo \"$coordinates\" | cut -d' ' -f2)\"\n    local z=\"$(echo \"$coordinates\" | cut -d' ' -f3)\"\n    echo \"$x $y $z\"\n    echo \"$((x+1)) $y $z\"\n    echo \"$((x-1)) $y $z\"\n    echo \"$x $((y+1)) $z\"\n    echo \"$x $((y-1)) $z\"\n    echo \"$x $y $((z+1))\"\n    echo \"$x $y $((z-1))\"",
    "    local x=$1\n    local y=$2\n    local z=$3\n\n    echo \"$((x - 1)) $y $z\"\n    echo \"$((x + 1)) $y $z\"\n    echo \"$x $((y - 1)) $z\"\n    echo \"$x $((y + 1)) $z\"\n    echo \"$x $y $((z - 1))\"\n    echo \"$x $y $((z + 1))\"",
    "    echo \"$1\" | sed -e 's/[^0-9 ]//g'",
    "    echo \"$1\" | sed 's/[^0-9 ]//g'",
    "  echo \"$1\" | sed -e 's/^\\([0-9]*\\) \\([0-9]*\\)$/\\1\\2/'",
    "    local x y\n    read x y <<< \"$1\"\n    echo \"$((x-1)) $y\"\n    echo \"$((x+1)) $y\"\n    echo \"$x $((y-1))\"\n    echo \"$x $((y+1))\"",
    "    echo $1 | sed -e 's/[^0-9 ]//g'",
    "    echo $1 | awk '{print $1, $2}'",
    "    local -a coords\n    local -a result\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n",
    "    local x y\n    read x y <<< \"$1\"\n    echo \"$((x-1)) $y\"\n    echo \"$((x+1)) $y\"\n    echo \"$x $((y-1))\"\n    echo \"$x $((y+1))\"",
    "    echo \"$1\" | sed -r 's/[^0-9 ]//g'",
    "    echo \"$1\" | sed -e 's/^\\([0-9]*\\) \\([0-9]*\\)$/\\1\\n\\2/'",
    "    local x=$1\n    local y=$2\n    local z=$3\n\n    echo \"$((x-1)) $y $z\"\n    echo \"$((x+1)) $y $z\"\n    echo \"$x $((y-1)) $z\"\n    echo \"$x $((y+1)) $z\"\n    echo \"$x $y $((z-1))\"\n    echo \"$x $y $((z+1))\"",
    "  local x=$1\n  local y=$2\n  local z=$3\n  local coordinates=()\n  for i in $(seq -1 1); do\n    for j in $(seq -1 1); do\n      for k in $(seq -1 1); do\n        if [[ $i -eq 0 && $j -eq 0 && $k -eq 0 ]]; then\n          continue\n        fi\n        coordinates+=(\"$((x + i)) $((y + j)) $((z + k))\")\n      done\n    done\n  done\n  echo \"${coordinates[@]}\"",
    "    echo \"$1\" | sed 's/[^0-9 ]//g'",
    "    local x=$1\n    local y=$2\n    local z=$3\n    local coordinates=(\n        \"$((x-1)) $y $z\"\n        \"$((x+1)) $y $z\"\n        \"$x $((y-1)) $z\"\n        \"$x $((y+1)) $z\"\n        \"$x $y $((z-1))\"\n        \"$x $y $((z+1))\"\n    )\n    echo \"${coordinates[@]}\"",
    "    local -a coordinates\n    local -a x_coordinates\n    local -a y_coordinates\n    local -a z_coordinates\n    local -a x_coordinates_adjacent\n    local -a y_coordinates_adjacent\n    local -a z_coordinates_adjacent\n    local -a adjacent_coordinates\n    local -a adjacent_coordinates_sorted\n    local -a adjacent_coordinates_unique\n    local -a adjacent_coordinates_unique_sorted\n    local -a adjacent_coordinates_unique_sorted_joined\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined_trimmed\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined_trimmed_sorted\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined_trimmed\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined_trimmed_sorted\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined_trimmed\n    local -a adjacent_coordinates_unique_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined_trimmed_sorted_joined_trimmed_s",
    "    local -a coordinates\n    local -a x\n    local -a y\n    local -a z\n    local -a w\n    local -a t\n    local -a u\n    local -a v\n    local -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a a\n    local -a b\n    local -a c\n    local -a d\n    local -a e\n    local -a f\n    local -a g\n    local -a h\n    local -a i\n    local -a j\n    local -a k\n    local -a l\n    local -a m\n    local -a n\n    local -a o\n    local -a p\n    local -a q\n    local -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a aa\n    local -a ab\n    local -a ac\n    local -a ad\n    local -a ae\n    local -a af\n    local -a ag\n    local -a ah\n    local -a ai\n    local -a aj\n    local -a ak\n    local -a al\n    local -a am\n    local -a an\n    local -a ao\n    local -a ap\n    local -a aq\n    local -a ar\n    local -a as\n    local -a at\n    local -a au\n    local -a av\n    local -a aw\n    local -a ax\n    local -a ay\n    local -a az\n    local -a ba\n    local -a bb\n    local -a bc\n    local -a bd\n    local -a be\n    local -a bf\n    local -a bg\n    local -a bh\n    local -a bi\n    local -a bj\n    local -a bk\n    local -a bl\n    local -a bm\n    local -a b",
    "    local coordinates=\"$1\"\n    local x y\n    read x y <<< \"$coordinates\"\n    echo \"$((x-1)) $y\"\n    echo \"$((x+1)) $y\"\n    echo \"$x $((y-1))\"\n    echo \"$x $((y+1))\"",
    "    local x=$1\n    local y=$2\n    local z=$3\n    local coordinates=()\n    for i in $(seq -1 1); do\n        for j in $(seq -1 1); do\n            for k in $(seq -1 1); do\n                if [[ $i -eq 0 && $j -eq 0 && $k -eq 0 ]]; then\n                    continue\n                fi\n                coordinates+=($(($x + $i)) $(($y + $j)) $(($z + $k)))\n            done\n        done\n    done\n    echo \"${coordinates[@]}\""
  ]
}