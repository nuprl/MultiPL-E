{
  "name": "mbpp_420_cube_Sum",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find the cube sum of first n even natural numbers.\n#\n# $1 is an integer\ncube_Sum() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    cube_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"72\" ]]\n    [[ $(candidate \"3\") = \"288\" ]]\n    [[ $(candidate \"4\") = \"800\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if [ $1 -eq 0 ]; then\n        echo 0\n    else\n        echo $(( $1 * $1 * $1 + $(cube_Sum $(( $1 - 1 ))) ))\n    fi",
    "    local sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n        i=$(( $i + 2 ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo \"Sum of cube of first $1 natural numbers is: $sum\"",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        sum=$((sum + ((2*i-1)*(2*i-1)*(2*i-1))))\n    done\n    echo $sum",
    "    if [ $1 -lt 0 ]; then\n        echo \"Error: Number must be positive\"\n        exit 1\n    fi\n    sum=0\n    for (( i=0; i<=$1; i+=2 )); do\n        sum=$(( $sum + $i**3 ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    local sum=0\n    for (( i=0; i<=$1; i++ ))\n    do\n        if [ $((i%2)) -eq 0 ]\n        then\n            sum=$((sum+i**3))\n        fi\n    done\n    echo $sum",
    "    if [ $1 -lt 1 ]; then\n        echo \"Please enter a positive integer\"\n        exit 1\n    fi\n    sum=0\n    for (( i=1; i<=$1; i++ )); do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i*$i*$i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "\tlocal sum=0\n\tfor (( i=1; i<=$1; i++ ))\n\tdo\n\t\tsum=$(( $sum + $(( $i * $i * $i )) ))\n\tdone\n\techo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for ((i=1; i<=$1; i++))\n    do\n        sum=$((sum + i**3))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum"
  ]
}