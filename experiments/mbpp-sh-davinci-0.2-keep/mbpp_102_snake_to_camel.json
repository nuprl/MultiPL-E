{
  "name": "mbpp_102_snake_to_camel",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if $first_char; then\n      result=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n      first_char=false\n    else\n      result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    # replace all underscores with spaces\n    # capitalize each word\n    # remove spaces\n    echo \"$1\" | sed -e 's/_/ /g' -e 's/\\b\\(.\\)/\\u\\1/g' -e 's/ //g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  if [ -z \"$1\" ]; then\n    echo \"Usage: $0 <string>\"\n    return 1\n  fi\n\n  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n  local next_char_upper=false\n  for ((i=0; i<${#str}; i++)); do\n    local char=${str:$i:1}\n    if [[ $char == \"_\" ]]; then\n      next_char_upper=true\n    else\n      if [[ $next_char_upper == true ]]; then\n        char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n        next_char_upper=false\n      fi\n      if [[ $first_char == true ]]; then\n        char=$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\n        first_char=false\n      fi\n      result+=\"$char\"\n    fi\n  done\n  echo \"$result\"",
    "    echo $1 | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$((i+1)):1}\"\n\n    if [ \"$char\" == \"_\" ]; then\n      char=\"${next_char^}\"\n      i=$((i+1))\n    fi\n\n    result+=\"$char\"\n    i=$((i+1))\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/^([a-z])|_([a-z])/\\U\\1\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    while [[ -n \"$str\" ]]; do\n        local char=\"${str:0:1}\"\n        str=\"${str:1}\"\n\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n                first_char=false\n            fi\n            result=\"$result$char\"\n        fi\n    done\n\n    echo \"$result\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if $first_char; then\n            result=\"$word\"\n            first_char=false\n        else\n            result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        fi\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/([a-z])_([a-z])/\\1\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([a-z]\\)\\([a-zA-Z0-9]*\\)/\\u\\1\\2/g'",
    "    local str=$1\n    local new_str=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n        next_char=${str:$((i+1)):1}\n        if [ \"$char\" = \"_\" ]; then\n            char=\"${next_char^^}\"\n            i=$((i+1))\n        fi\n        new_str+=$char\n        i=$((i+1))\n    done\n    echo $new_str",
    "    echo $1 | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g' -e 's/^\\([^_]\\)/\\1/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([a-z]\\)\\([a-z]*\\)/\\u\\1\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"${1//_/ }\" | awk '{for(i=1;i<=NF;i++) { $i=toupper(substr($i,1,1)) substr($i,2) }}1' | tr -d ' '",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n    for word in $(echo \"$1\" | tr '_' ' '); do\n        first_char=\"$(echo \"$word\" | cut -c1 | tr '[:lower:]' '[:upper:]')\"\n        rest_of_word=\"$(echo \"$word\" | cut -c2-)\"\n        result=\"$result$first_char$rest_of_word\"\n    done\n    echo \"$result\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if $first_char; then\n            result=\"$(echo \"$word\" | tr '[:lower:]' '[:upper:]')\"\n            first_char=false\n        else\n            result=\"$result$(echo \"$word\" | tr '[:upper:]' '[:lower:]')\"\n        fi\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/([^_]+)_?/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n  local next_upper=false\n\n  for (( i=0; i<len; i++ )); do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$((i+1)):1}\"\n    if [[ \"$char\" == \"_\" ]]; then\n      next_upper=true\n    else\n      if [[ \"$next_upper\" == true ]]; then\n        char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n        next_upper=false\n      fi\n      new_str+=\"$char\"\n    fi\n  done\n\n  echo \"$new_str\"",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n\n    while [[ \"$str\" =~ ([^_]*)_([^_]*) ]]; do\n        if [[ -n \"${BASH_REMATCH[1]}\" ]]; then\n            result+=\"${BASH_REMATCH[1]}\"\n        fi\n        result+=\"${BASH_REMATCH[2]^}\"\n        str=\"${str#*_}\"\n    done\n    echo \"$result\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local word_start=true\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            word_start=true\n        else\n            if $word_start; then\n                if $first_char; then\n                    first_char=false\n                else\n                    result+=\"${char^}\"\n                else\n                    result+=\"$char\"\n                fi\n                word_start=false\n            fi\n        fi\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if $first_char; then\n            result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n            first_char=false\n        else\n            result+=\"$word\"\n        fi\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local string=\"$1\"\n    local result=\"\"\n    local first_char=true\n    for word in $(echo \"$string\" | tr '_' ' '); do\n        if $first_char; then\n            first_char=false\n            result=\"$word\"\n        else\n            result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        fi\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$i+1:1}\"\n\n    if [ \"$char\" == \"_\" ]; then\n      char=\"${next_char^}\"\n      i=$((i+1))\n    fi\n\n    result+=\"$char\"\n    i=$((i+1))\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    for word in $(echo \"$str\" | tr \"_\" \" \"); do\n        if $first_char; then\n            result=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n            first_char=false\n        else\n            result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        fi\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/([^_]+)_?/\\U\\1/g'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n    local next_next_char=\"\"\n\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        next_char=\"${str:$((i+1)):1}\"\n        next_next_char=\"${str:$((i+2)):1}\"\n\n        if [ \"$char\" == \"_\" ]; then\n            if [ \"$next_char\" == \"_\" ]; then\n                new_str=\"${new_str}_\"\n                i=$((i+1))\n            else\n                new_str=\"${new_str}${next_char^}\"\n                i=$((i+2))\n            fi\n        else\n            new_str=\"${new_str}${char}\"\n            i=$((i+1))\n        fi\n    done\n\n    echo \"$new_str\"",
    "    echo \"$1\" | sed -r 's/(_[a-z])/\\U\\1/g' | sed -r 's/^([a-z])/\\U\\1/g'",
    "    local str=\"$1\"\n    local output\n    while [[ ${str} =~ ([^_]*)_([^_]*) ]]; do\n        output=\"${output}${BASH_REMATCH[1]}${BASH_REMATCH[2]^}\"\n        str=${str#${BASH_REMATCH[0]}}\n    done\n    echo \"${output}${str}\"",
    "  local snake_case=$1\n  local camel_case=\"\"\n  local word=\"\"\n  local first_char=\"\"\n  local rest=\"\"\n\n  for word in $(echo $snake_case | tr '_' ' '); do\n    first_char=$(echo $word | cut -c1 | tr '[:lower:]' '[:upper:]')\n    rest=$(echo $word | cut -c2-)\n    camel_case=\"$camel_case$first_char$rest\"\n  done\n\n  echo $camel_case",
    "    # Split the string into an array of words\n    IFS='_' read -r -a words <<< \"$1\"\n    # Capitalize the first letter of each word\n    for word in \"${words[@]}\"; do\n        # Capitalize the first letter of the word\n        word=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        # Append the word to the result\n        result+=\"$word\"\n    done\n    # Print the result\n    echo \"$result\"",
    "  echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local output\n  while [[ ${str} =~ ([^_]*)_([^_]*) ]]; do\n    output=\"${output}${BASH_REMATCH[1]}${BASH_REMATCH[2]^}\"\n    str=${str#${BASH_REMATCH[0]}}\n  done\n  echo \"${output}${str}\"",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#str}\n    for (( i=0; i<len; i++ )); do\n        local char=${str:$i:1}\n        if [[ $char == \"_\" ]]; then\n            (( i++ ))\n            local next_char=${str:$i:1}\n            result+=$(echo $next_char | tr '[a-z]' '[A-Z]')\n        else\n            result+=$char\n        fi\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=${str:0:1}\n    local rest_of_string=${str:1}\n    local camel_case_string=${first_char^^}${rest_of_string//_/}\n    echo \"$camel_case_string\"",
    "  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n\n  while [[ -n \"$str\" ]]; do\n    word=\"${str%%_*}\"\n    str=\"${str#*_}\"\n    if [[ -z \"$result\" ]]; then\n      result=\"$word\"\n    else\n      result=\"$result${word^}\"\n    fi\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$i+1:1}\"\n\n    if [ \"$char\" == \"_\" ]; then\n      char=\"${next_char^}\"\n      ((i++))\n    fi\n\n    result+=\"$char\"\n    ((i++))\n  done\n\n  echo \"$result\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=1\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if [ $first_char -eq 1 ]; then\n            result=\"$word\"\n            first_char=0\n        else\n            result=\"$result$(echo \"$word\" | sed -e 's/^./\\U&/')\"\n        fi\n    done\n\n    echo \"$result\"",
    "    local string=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n    local first_char_upper=\"\"\n    local rest_of_word_lower=\"\"\n\n    for word in $(echo \"$string\" | tr '_' ' '); do\n        first_char=\"${word:0:1}\"\n        rest_of_word=\"${word:1}\"\n        first_char_upper=\"$(echo \"$first_char\" | tr '[:lower:]' '[:upper:]')\"\n        rest_of_word_lower=\"$(echo \"$rest_of_word\" | tr '[:upper:]' '[:lower:]')\"\n        result=\"$result$first_char_upper$rest_of_word_lower\"\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "  local str=$1\n  local new_str=\"\"\n  local first_char=1\n  local i=0\n  local len=${#str}\n  for ((i=0; i<len; i++)); do\n    local char=${str:$i:1}\n    if [[ $char == \"_\" ]]; then\n      first_char=1\n    else\n      if [[ $first_char == 1 ]]; then\n        new_str+=$(echo $char | tr '[a-z]' '[A-Z]')\n        first_char=0\n      else\n        new_str+=$char\n      fi\n    fi\n  done\n  echo $new_str",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  # Convert all \"_\" to \" \"\n  # Convert all lowercase letters to uppercase\n  # Remove all spaces\n  echo \"$1\" | sed -e 's/_/ /g' -e 's/\\([a-z]\\)/\\U\\1/g' -e 's/ //g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_[a-z])/\\U\\1/g' | sed -r 's/^([a-z])/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        next_char=\"${str:$((i + 1)):1}\"\n        if [ \"$char\" = \"_\" ]; then\n            new_str=\"$new_str${next_char^^}\"\n            i=$((i + 1))\n        else\n            new_str=\"$new_str$char\"\n        fi\n        i=$((i + 1))\n    done\n    echo \"$new_str\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/([^_]+)_?/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(_[a-z])/\\U\\1/g' | sed -r 's/^./\\U&/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local i=0\n    local len=${#str}\n    local ch=\"\"\n\n    while [ $i -lt $len ]; do\n        ch=${str:$i:1}\n        if [ \"$ch\" == \"_\" ]; then\n            ((i++))\n            ch=${str:$i:1}\n            ch=${ch^^}\n        fi\n        new_str=\"$new_str$ch\"\n        ((i++))\n    done\n    echo \"$new_str\"",
    "    echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  # Remove underscores\n  local str=\"${1//_/}\"\n  # Convert to lowercase\n  str=\"${str,,}\"\n  # Capitalize first letter\n  str=\"${str^}\"\n  # Capitalize first letter of each word\n  str=\"${str// /}\"\n  echo \"$str\"",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local snake_case=$1\n  local camel_case=\"\"\n  local word=\"\"\n  local first_letter=\"\"\n  local rest_of_word=\"\"\n\n  for word in $(echo $snake_case | tr '_' ' '); do\n    first_letter=$(echo $word | cut -c1 | tr '[:lower:]' '[:upper:]')\n    rest_of_word=$(echo $word | cut -c2-)\n    camel_case=\"$camel_case$first_letter$rest_of_word\"\n  done\n\n  echo $camel_case",
    "    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local first_char=true\n    local next_upper=false\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            next_upper=true\n        else\n            if [[ \"$next_upper\" == true ]]; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                next_upper=false\n            fi\n            if [[ \"$first_char\" == true ]]; then\n                char=\"$(tr '[:upper:]' '[:lower:]' <<< \"$char\")\"\n                first_char=false\n            fi\n            new_str+=\"$char\"\n        fi\n    done\n    echo \"$new_str\"",
    "    local str=\"$1\"\n    local result=\"\"\n\n    while [[ \"$str\" =~ ([^_]*)_([^_]*) ]]; do\n        if [[ \"${BASH_REMATCH[1]}\" != \"\" ]]; then\n            result+=\"${BASH_REMATCH[1]^}\"\n        fi\n        str=\"${BASH_REMATCH[2]}\"\n    done\n\n    if [[ \"$str\" != \"\" ]]; then\n        result+=\"${str^}\"\n    fi\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n\n    while [[ -n \"$str\" ]]; do\n        word=\"${str%%_*}\"\n        first_char=\"${word:0:1}\"\n        rest_of_word=\"${word:1}\"\n        result+=\"${first_char^^}${rest_of_word,,}\"\n        str=\"${str#*_}\"\n    done\n\n    echo \"$result\"",
    "    # Split the string into an array of words\n    local words=(${1//_/ })\n    # Capitalize the first letter of each word\n    local words_capitalized=()\n    for word in \"${words[@]}\"; do\n        words_capitalized+=(\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\")\n    done\n    # Join the array of words into a string\n    local camel_case=\"${words_capitalized[0]}\"\n    for ((i=1; i<${#words_capitalized[@]}; i++)); do\n        camel_case+=\"${words_capitalized[i]}\"\n    done\n    echo \"$camel_case\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    # Replace all underscores with spaces\n    local str=\"${1//_/ }\"\n    # Capitalize the first letter of each word\n    str=\"$(tr '[:lower:]' '[:upper:]' <<< ${str:0:1})${str:1}\"\n    # Replace all spaces with nothing\n    str=\"${str// /}\"\n    echo \"$str\"",
    "  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local first_char=\"\"\n  local rest_of_word=\"\"\n  local first_char_upper=\"\"\n  local rest_of_word_lower=\"\"\n  local IFS=\"_\"\n  for word in $str; do\n    first_char=\"${word:0:1}\"\n    rest_of_word=\"${word:1}\"\n    first_char_upper=\"$(echo $first_char | tr '[:lower:]' '[:upper:]')\"\n    rest_of_word_lower=\"$(echo $rest_of_word | tr '[:upper:]' '[:lower:]')\"\n    result=\"$result$first_char_upper$rest_of_word_lower\"\n  done\n  echo \"$result\"",
    "    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    local str=$1\n    local result=\"\"\n    local first_char=true\n    for word in $(echo $str | tr \"_\" \" \"); do\n        if [ $first_char = true ]; then\n            result+=$(echo $word | tr '[:lower:]' '[:upper:]')\n            first_char=false\n        else\n            result+=$word\n        fi\n    done\n    echo $result",
    "  local input=\"$1\"\n  local output=\"\"\n  local first_char=true\n\n  while IFS= read -r -n1 char; do\n    if [[ $char == \"_\" ]]; then\n      first_char=true\n      continue\n    fi\n\n    if $first_char; then\n      output+=\"${char^^}\"\n      first_char=false\n    else\n      output+=\"$char\"\n    fi\n  done <<< \"$input\"\n\n  echo \"$output\"",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    local string=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    while [[ ${#string} -gt 0 ]]; do\n        local char=\"${string:0:1}\"\n        string=\"${string:1}\"\n\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        elif $first_char; then\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n            first_char=false\n        fi\n\n        result=\"$result$char\"\n    done\n\n    echo \"$result\"",
    "    # Convert all lowercase letters followed by an underscore\n    # to uppercase\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    # Split the string by '_'\n    # Convert the first letter of each word to uppercase\n    # Join the words with ''\n    echo \"$1\" | awk -F '_' '{for (i=1; i<=NF; i++) {$i=toupper(substr($i,1,1)) substr($i,2)}} 1' | tr -d '\\n'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n    next_char=${str:$((i+1)):1}\n\n    if [ \"$char\" = \"_\" ]; then\n      new_str+=\"${next_char^}\"\n      i=$((i+1))\n    else\n      new_str+=\"$char\"\n    fi\n\n    i=$((i+1))\n  done\n\n  echo \"$new_str\"",
    "    echo \"$1\" | sed -r 's/([_])([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        local char=${str:$i:1}\n        if [ \"$char\" == \"_\" ]; then\n            let i++\n            char=${str:$i:1}\n            char=${char^^}\n        fi\n        result=\"$result$char\"\n        let i++\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  # Convert all \"_\" to \" \"\n  # Convert the first letter of each word to uppercase\n  # Remove all spaces\n  echo \"$1\" | sed -e 's/_/ /g' -e 's/\\b\\(.\\)/\\u\\1/g' -e 's/ //g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=1\n    local char\n\n    while [ -n \"$str\" ]; do\n        char=\"${str:0:1}\"\n        str=\"${str:1}\"\n\n        if [ \"$char\" = \"_\" ]; then\n            char=\"${str:0:1}\"\n            str=\"${str:1}\"\n            char=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n        fi\n\n        if [ $first_char -eq 1 ]; then\n            char=\"$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n            first_char=0\n        fi\n\n        result=\"$result$char\"\n    done\n\n    echo \"$result\"",
    "    local string=\"$1\"\n    local result=\"\"\n    local first_char=\"\"\n    local rest=\"\"\n    local first_char_upper=\"\"\n    local rest_lower=\"\"\n\n    while [[ \"$string\" != \"\" ]]; do\n        first_char=\"${string:0:1}\"\n        rest=\"${string:1}\"\n        first_char_upper=\"$(echo \"$first_char\" | tr '[:lower:]' '[:upper:]')\"\n        rest_lower=\"$(echo \"$rest\" | tr '[:upper:]' '[:lower:]')\"\n        result=\"$result$first_char_upper$rest_lower\"\n        string=\"${rest_lower#_}\"\n    done\n\n    echo \"$result\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=1\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if [ $first_char -eq 1 ]; then\n            result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n            first_char=0\n        else\n            result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        fi\n    done\n\n    echo \"$result\"",
    "    local str=$1\n    local new_str=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n        next_char=${str:$i+1:1}\n        if [ \"$char\" == \"_\" ]; then\n            char=\"\"\n            next_char=`echo $next_char | tr '[a-z]' '[A-Z]'`\n        fi\n        new_str=$new_str$char$next_char\n        i=$((i+1))\n    done\n    echo $new_str",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo $1 | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n\n  while [[ \"$str\" =~ ([^_]*)_?(.*) ]]; do\n    if [[ ! -z ${BASH_REMATCH[1]} ]]; then\n      result+=\"${BASH_REMATCH[1]:0:1^}${BASH_REMATCH[1]:1}\"\n    fi\n    str=${BASH_REMATCH[2]}\n  done\n\n  if [[ ! -z $str ]]; then\n    result+=\"${str:0:1^}${str:1}\"\n  fi\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n\n    while [[ \"$str\" =~ ([^_]*)_([^_]*) ]]; do\n        if [[ \"${BASH_REMATCH[1]}\" != \"\" ]]; then\n            result+=\"${BASH_REMATCH[1]^}\"\n        fi\n        str=\"${BASH_REMATCH[2]}\"\n    done\n    result+=\"${str^}\"\n\n    echo \"$result\"",
    "  echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo $1 | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/^\\([a-z]\\)/\\U\\1/' -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "  echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "    local str=$1\n    local new_str=\"\"\n    local i=0\n    local str_len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n    while [ $i -lt $str_len ]; do\n        char=${str:$i:1}\n        next_char=${str:$((i+1)):1}\n        if [ \"$char\" == \"_\" ]; then\n            new_str+=\"${next_char^}\"\n        else\n            new_str+=\"$char\"\n        fi\n        i=$((i+1))\n    done\n    echo \"$new_str\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local first_char=true\n    local next_upper=false\n    local char\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            next_upper=true\n        else\n            if $next_upper; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                next_upper=false\n            fi\n            if $first_char; then\n                char=\"$(tr '[:upper:]' '[:lower:]' <<< \"$char\")\"\n                first_char=false\n            fi\n            new_str=\"$new_str$char\"\n        fi\n    done\n\n    echo \"$new_str\"",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/([^_]+)_?/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n\n    while [[ \"$str\" =~ ([^_]*)_([^_]*) ]]; do\n        if [[ \"${BASH_REMATCH[1]}\" != \"\" ]]; then\n            result+=\"${BASH_REMATCH[1]^}\"\n        fi\n        str=\"${BASH_REMATCH[2]}\"\n    done\n\n    if [[ \"$str\" != \"\" ]]; then\n        result+=\"${str^}\"\n    fi\n\n    echo \"$result\"",
    "    # Convert to lowercase\n    local str=\"${1,,}\"\n    # Replace underscores with spaces\n    str=\"${str//_/ }\"\n    # Capitalize each word\n    str=\"${str^}\"\n    # Remove spaces\n    str=\"${str// /}\"\n    echo \"$str\"",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  # Convert the string to lower case\n  local lower_case=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n  # Replace all underscores with spaces\n  local with_spaces=$(echo \"$lower_case\" | tr '_' ' ')\n  # Capitalize the first letter of each word\n  local capitalized=$(echo \"$with_spaces\" | sed -e 's/\\b\\(.\\)/\\u\\1/g')\n  # Remove all spaces\n  echo \"$capitalized\" | tr -d ' '",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    local str=$1\n    local str_len=${#str}\n    local result=\"\"\n    local i=0\n    local char=\"\"\n    local next_char=\"\"\n    while [ $i -lt $str_len ]; do\n        char=${str:$i:1}\n        next_char=${str:$i+1:1}\n        if [ \"$char\" == \"_\" ]; then\n            char=${next_char^^}\n            i=$((i+1))\n        fi\n        result+=$char\n        i=$((i+1))\n    done\n    echo $result",
    "    local str=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n    local next_is_upper=false\n\n    for (( i=0; i<len; i++ )); do\n        char=\"${str:$i:1}\"\n        next_char=\"${str:$((i+1)):1}\"\n\n        if [[ \"$char\" == \"_\" ]]; then\n            next_is_upper=true\n            continue\n        fi\n\n        if [[ \"$next_is_upper\" == true ]]; then\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n            next_is_upper=false\n        fi\n\n        result+=\"$char\"\n    done\n\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n    local next_is_upper=false\n\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n        next_char=${str:$((i+1)):1}\n        next_is_upper=false\n\n        if [ \"$char\" == \"_\" ]; then\n            next_is_upper=true\n        else\n            if [ \"$next_is_upper\" == true ]; then\n                char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n                next_is_upper=false\n            fi\n            result+=\"$char\"\n        fi\n\n        i=$((i+1))\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'"
  ]
}