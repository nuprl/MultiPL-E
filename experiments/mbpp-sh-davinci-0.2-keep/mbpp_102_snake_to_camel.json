{
  "name": "mbpp_102_snake_to_camel",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if $first_char; then\n      result=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n      first_char=false\n    else\n      result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    # replace all underscores with spaces\n    # capitalize each word\n    # remove spaces\n    echo \"$1\" | sed -e 's/_/ /g' -e 's/\\b\\(.\\)/\\u\\1/g' -e 's/ //g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  if [ -z \"$1\" ]; then\n    echo \"Usage: $0 <string>\"\n    return 1\n  fi\n\n  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n  local next_char_upper=false\n  for ((i=0; i<${#str}; i++)); do\n    local char=${str:$i:1}\n    if [[ $char == \"_\" ]]; then\n      next_char_upper=true\n    else\n      if [[ $next_char_upper == true ]]; then\n        char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n        next_char_upper=false\n      fi\n      if [[ $first_char == true ]]; then\n        char=$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\n        first_char=false\n      fi\n      result+=\"$char\"\n    fi\n  done\n  echo \"$result\"",
    "    echo $1 | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$((i+1)):1}\"\n\n    if [ \"$char\" == \"_\" ]; then\n      char=\"${next_char^}\"\n      i=$((i+1))\n    fi\n\n    result+=\"$char\"\n    i=$((i+1))\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/^([a-z])|_([a-z])/\\U\\1\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    while [[ -n \"$str\" ]]; do\n        local char=\"${str:0:1}\"\n        str=\"${str:1}\"\n\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n                first_char=false\n            fi\n            result=\"$result$char\"\n        fi\n    done\n\n    echo \"$result\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if $first_char; then\n            result=\"$word\"\n            first_char=false\n        else\n            result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        fi\n    done\n\n    echo \"$result\""
  ]
}