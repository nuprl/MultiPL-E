{
  "name": "mbpp_262_split_two_parts",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n#\n# $1 is a $Any\n# $2 is an integer\nsplit_two_parts() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    split_two_parts \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 3 4 4 5 1\" \"3\") = \"1 1 2\\n3 4 4 5 1\" ]]\n    [[ $(candidate \"a b c d\" \"2\") = \"a b\\nc d\" ]]\n    [[ $(candidate \"p y t h o n\" \"4\") = \"p y t h\\no n\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local list=$1\n  local L=$2\n  local first_part=${list:0:L}\n  local second_part=${list:L}\n  echo \"$first_part,$second_part\"",
    "  local list=$1\n  local L=$2\n  local first_part=${list:0:$L}\n  local second_part=${list:$L}\n  echo \"$first_part $second_part\"",
    "  local list=$1\n  local L=$2\n  local first_part=$(echo $list | cut -d ' ' -f -$L)\n  local second_part=$(echo $list | cut -d ' ' -f $((L+1))-)\n  echo \"$first_part $second_part\"",
    "  local list=$1\n  local L=$2\n  local first_part=()\n  local second_part=()\n  local i=0\n  while [ $i -lt $L ]; do\n    first_part+=(${list[$i]})\n    i=$((i+1))\n  done\n  while [ $i -lt ${#list[@]} ]; do\n    second_part+=(${list[$i]})\n    i=$((i+1))\n  done\n  echo \"${first_part[@]} ${second_part[@]}\"",
    "  local list=$1\n  local length=$2\n  local first_part=()\n  local second_part=()\n  local i=0\n  for item in $list; do\n    if [ $i -lt $length ]; then\n      first_part+=($item)\n    else\n      second_part+=($item)\n    fi\n    ((i++))\n  done\n  echo \"(${first_part[@]}) (${second_part[@]})\"",
    "    local -n list=$1\n    local length=$2\n    local first_part=()\n    local second_part=()\n    for ((i=0; i<${#list[@]}; i++)); do\n        if ((i < length)); then\n            first_part+=(${list[i]})\n        else\n            second_part+=(${list[i]})\n        fi\n    done\n    echo \"(${first_part[@]}) (${second_part[@]})\"",
    "    local list=$1\n    local length=$2\n    local first_part=\"\"\n    local second_part=\"\"\n    local i=0\n    for item in $list; do\n        if [ $i -lt $length ]; then\n            first_part=\"$first_part $item\"\n        else\n            second_part=\"$second_part $item\"\n        fi\n        i=$((i+1))\n    done\n    echo \"($first_part) ($second_part)\"",
    "  local list=$1\n  local L=$2\n  local first_part=()\n  local second_part=()\n  local i=0\n  while [ $i -lt $L ]; do\n    first_part+=(${list[$i]})\n    ((i++))\n  done\n  while [ $i -lt ${#list[@]} ]; do\n    second_part+=(${list[$i]})\n    ((i++))\n  done\n  echo \"(${first_part[@]}) (${second_part[@]})\"",
    "  local list=$1\n  local L=$2\n  local first_part=()\n  local second_part=()\n  local i=0\n  for item in $list; do\n    if [ $i -lt $L ]; then\n      first_part+=($item)\n    else\n      second_part+=($item)\n    fi\n    i=$((i+1))\n  done\n  echo \"(${first_part[@]}) (${second_part[@]})\"",
    "  local list=$1\n  local L=$2\n  local first_part=()\n  local second_part=()\n  local i=0\n  for item in $list; do\n    if [ $i -lt $L ]; then\n      first_part+=($item)\n    else\n      second_part+=($item)\n    fi\n    i=$((i+1))\n  done\n  echo \"(${first_part[@]}) (${second_part[@]})\"",
    "    local list=$1\n    local L=$2\n    local first_part=()\n    local second_part=()\n    local i=0\n    while [ $i -lt $L ]\n    do\n        first_part+=(${list[$i]})\n        i=$((i+1))\n    done\n    while [ $i -lt ${#list[@]} ]\n    do\n        second_part+=(${list[$i]})\n        i=$((i+1))\n    done\n    echo \"(${first_part[@]}, ${second_part[@]})\"",
    "    local list=$1\n    local L=$2\n    local first_part=()\n    local second_part=()\n    local i=0\n    for item in $list; do\n        if [ $i -lt $L ]; then\n            first_part+=($item)\n        else\n            second_part+=($item)\n        fi\n        i=$((i+1))\n    done\n    echo \"(${first_part[@]}) (${second_part[@]})\"",
    "  local -n _list=$1\n  local _length=$2\n  local _first_part=()\n  local _second_part=()\n\n  for ((i=0; i<${#_list[@]}; i++)); do\n    if [ $i -lt $_length ]; then\n      _first_part+=(${_list[$i]})\n    else\n      _second_part+=(${_list[$i]})\n    fi\n  done\n\n  echo \"$(printf \"%s\\n\" \"${_first_part[@]}\")\"\n  echo \"$(printf \"%s\\n\" \"${_second_part[@]}\")\"",
    "  local list=$1\n  local L=$2\n  local first_part=${list:0:$L}\n  local second_part=${list:$L}\n  echo \"($first_part, $second_part)\"",
    "  local -n list=$1\n  local -i L=$2\n  local -a first_part=()\n  local -a second_part=()\n  local -i i=0\n  for i in \"${!list[@]}\"; do\n    if (( i < L )); then\n      first_part+=(\"${list[i]}\")\n    else\n      second_part+=(\"${list[i]}\")\n    fi\n  done\n  echo \"$(declare -p first_part) $(declare -p second_part)\"",
    "  local -n _list=$1\n  local _length=$2\n  local _first_part=()\n  local _second_part=()\n  for ((i=0; i<${#_list[@]}; i++)); do\n    if ((i < _length)); then\n      _first_part+=(${_list[i]})\n    else\n      _second_part+=(${_list[i]})\n    fi\n  done\n  echo \"(${_first_part[@]}) (${_second_part[@]})\"",
    "  local list=$1\n  local L=$2\n  local first_part=${list:0:$L}\n  local second_part=${list:$L}\n  echo \"($first_part, $second_part)\"",
    "  local list=$1\n  local length=$2\n  local first_part=\"\"\n  local second_part=\"\"\n  local i=0\n\n  while [ $i -lt $length ]; do\n    first_part=\"$first_part ${list[$i]}\"\n    i=$((i+1))\n  done\n\n  while [ $i -lt ${#list[@]} ]; do\n    second_part=\"$second_part ${list[$i]}\"\n    i=$((i+1))\n  done\n\n  echo \"($first_part) ($second_part)\"",
    "    local list=$1\n    local L=$2\n    local first_part=()\n    local second_part=()\n    local i=0\n    for item in $list; do\n        if [ $i -lt $L ]; then\n            first_part+=($item)\n        else\n            second_part+=($item)\n        fi\n        i=$((i+1))\n    done\n    echo \"(${first_part[@]}) (${second_part[@]})\"",
    "    local list=$1\n    local L=$2\n    local first_part=${list:0:$L}\n    local second_part=${list:$L}\n    echo \"($first_part, $second_part)\""
  ]
}