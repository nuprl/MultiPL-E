{
  "name": "mbpp_604_reverse_words",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to reverse words seperated by spaces in a given string.\n#\n# $1 is a string\nreverse_words() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    reverse_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python program\") = \"program python\" ]]\n    [[ $(candidate \"java language\") = \"language java\" ]]\n    [[ $(candidate \"indian man\") = \"man indian\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local string=\"$1\"\n    local words=($string)\n    local reversed_words=()\n    for word in \"${words[@]}\"; do\n        reversed_words=(\"$word\" \"${reversed_words[@]}\")\n    done\n    echo \"${reversed_words[@]}\"",
    "  local str=\"$1\"\n  local words=()\n  local i=0\n  while read -r word; do\n    words[i++]=\"$word\"\n  done <<< \"$str\"\n  for ((i=${#words[@]}-1; i>=0; i--)); do\n    echo -n \"${words[i]} \"\n  done\n  echo",
    "    local str=\"$1\"\n    local words=()\n    local i=0\n\n    # Split the string into words\n    while read -r word; do\n        words[$i]=\"$word\"\n        ((i++))\n    done <<< \"$str\"\n\n    # Print the words in reverse order\n    for ((i=${#words[@]}-1; i>=0; i--)); do\n        echo -n \"${words[$i]} \"\n    done\n    echo",
    "    local str=$1\n    local words=($str)\n    local rev_words=()\n    for word in ${words[@]}; do\n        rev_words=($word ${rev_words[@]})\n    done\n    echo ${rev_words[@]}",
    "    local string=\"$1\"\n    local words=()\n    local word\n    while read -r word; do\n        words+=(\"$word\")\n    done <<< \"$string\"\n    for ((i = ${#words[@]} - 1; i >= 0; i--)); do\n        echo -n \"${words[i]} \"\n    done\n    echo",
    "  local str=\"$1\"\n  local rev_str=\"\"\n  local word=\"\"\n  for word in $str; do\n    rev_str=\"$word $rev_str\"\n  done\n  echo \"$rev_str\"",
    "    local words=()\n    local word=''\n    local c=''\n    local i=0\n    local j=0\n    local len=0\n    local str=''\n\n    if [ -z \"$1\" ]; then\n        echo \"Usage: $0 <string>\"\n        return 1\n    fi\n\n    str=\"$1\"\n    len=${#str}\n\n    for ((i=0; i<len; i++)); do\n        c=${str:$i:1}\n        if [ \"$c\" == ' ' ]; then\n            words[$j]=\"$word\"\n            word=''\n            ((j++))\n        else\n            word=\"$word$c\"\n        fi\n    done\n    words[$j]=\"$word\"\n\n    for ((i=${#words[@]}-1; i>=0; i--)); do\n        echo -n \"${words[$i]} \"\n    done\n    echo",
    "    local string=\"$1\"\n    local words=()\n    local word=\"\"\n    local i=0\n    local j=0\n\n    # Split the string into words\n    while read -n1 char; do\n        if [[ \"$char\" == \" \" ]]; then\n            words[i]=\"$word\"\n            word=\"\"\n            ((i++))\n        else\n            word=\"$word$char\"\n        fi\n    done <<< \"$string\"\n    words[i]=\"$word\"\n\n    # Print the words in reverse order\n    ((j=i))\n    while ((j >= 0)); do\n        echo -n \"${words[j]} \"\n        ((j--))\n    done\n    echo",
    "    local str=$1\n    local words=($str)\n    local reversed_words=()\n    for ((i=${#words[@]}-1; i>=0; i--)); do\n        reversed_words+=(${words[i]})\n    done\n    echo \"${reversed_words[@]}\"",
    "  local str=\"$1\"\n  local words=()\n  local word=\"\"\n  local i=0\n  local j=0\n  local len=${#str}\n  for (( i=0; i<len; i++ )); do\n    if [[ \"${str:$i:1}\" == \" \" ]]; then\n      words[$j]=\"$word\"\n      word=\"\"\n      (( j++ ))\n    else\n      word=\"$word${str:$i:1}\"\n    fi\n  done\n  words[$j]=\"$word\"\n  (( j++ ))\n  for (( i=j-1; i>=0; i-- )); do\n    echo -n \"${words[$i]} \"\n  done\n  echo",
    "    local str=\"$1\"\n    local words=()\n    local i=0\n    local word=\"\"\n\n    while read -r -n 1 char; do\n        if [[ \"$char\" == \" \" ]]; then\n            words[$i]=\"$word\"\n            word=\"\"\n            ((i++))\n        else\n            word=\"$word$char\"\n        fi\n    done <<< \"$str\"\n\n    words[$i]=\"$word\"\n    ((i++))\n\n    for ((j = $i - 1; j >= 0; j--)); do\n        echo -n \"${words[$j]} \"\n    done\n    echo",
    "  local str=$1\n  local words=()\n  local word=''\n  local i=0\n  local c=''\n  local len=${#str}\n\n  for ((i=0; i<len; i++)); do\n    c=${str:$i:1}\n    if [[ $c == ' ' ]]; then\n      words+=(\"$word\")\n      word=''\n    else\n      word+=$c\n    fi\n  done\n  words+=(\"$word\")\n\n  for ((i=${#words[@]}-1; i>=0; i--)); do\n    echo -n \"${words[$i]}\"\n    if ((i > 0)); then\n      echo -n ' '\n    fi\n  done\n  echo",
    "    local string=\"$1\"\n    local words=()\n    local word\n    local i\n    local reversed_string\n\n    # Split string into words\n    while read -r word; do\n        words+=(\"$word\")\n    done <<< \"$string\"\n\n    # Reverse words\n    for ((i = ${#words[@]} - 1; i >= 0; i--)); do\n        reversed_string+=\"${words[i]} \"\n    done\n\n    # Remove trailing space\n    reversed_string=${reversed_string% }\n\n    echo \"$reversed_string\"",
    "    local words=$1\n    local word_array=($words)\n    local reversed_words=\"\"\n    for ((i=${#word_array[@]}-1; i>=0; i--)); do\n        reversed_words=\"$reversed_words ${word_array[i]}\"\n    done\n    echo $reversed_words",
    "  local str=\"$1\"\n  local rev_str=\"\"\n  local word=\"\"\n\n  for word in $str; do\n    rev_str=\"$word $rev_str\"\n  done\n\n  echo \"$rev_str\"",
    "    local string=$1\n    local words=($string)\n    local reversed_words=()\n    for word in \"${words[@]}\"; do\n        reversed_words=($word \"${reversed_words[@]}\")\n    done\n    echo \"${reversed_words[@]}\"",
    "    local str=\"$1\"\n    local words=()\n    local word=\"\"\n    local i=0\n\n    # Split the string into words\n    while read -r -n 1 char; do\n        if [[ \"$char\" == \" \" ]]; then\n            words[i]=\"$word\"\n            word=\"\"\n            ((i++))\n        else\n            word=\"${word}${char}\"\n        fi\n    done <<< \"$str\"\n    words[i]=\"$word\"\n\n    # Print the words in reverse order\n    for ((i=${#words[@]}-1; i>=0; i--)); do\n        echo -n \"${words[i]} \"\n    done\n    echo",
    "  echo \"$1\" | awk '{for(i=NF;i>=1;i--) printf \"%s \",$i; print \"\"}'",
    "\tlocal str=$1\n\tlocal words=($str)\n\tlocal i=0\n\tlocal len=${#words[@]}\n\tlocal tmp\n\twhile [ $i -lt $((len/2)) ]; do\n\t\ttmp=${words[$i]}\n\t\twords[$i]=${words[$((len-i-1))]}\n\t\twords[$((len-i-1))]=$tmp\n\t\ti=$((i+1))\n\tdone\n\techo ${words[@]}",
    "  local string=\"$1\"\n  local words=()\n  local word=''\n  local i=0\n\n  # Split the string into words\n  while read -n1 char; do\n    if [[ \"$char\" == ' ' ]]; then\n      words[i]=\"$word\"\n      ((i++))\n      word=''\n    else\n      word=\"$word$char\"\n    fi\n  done <<< \"$string\"\n  words[i]=\"$word\"\n\n  # Print the words in reverse order\n  for ((i=${#words[@]}-1; i>=0; i--)); do\n    echo -n \"${words[i]} \"\n  done\n  echo"
  ]
}