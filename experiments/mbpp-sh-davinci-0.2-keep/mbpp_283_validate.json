{
  "name": "mbpp_283_validate",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n#\n# $1 is an integer\nvalidate() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    validate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1234\") = \"true\" ]]\n    [[ $(candidate \"51241\") = \"false\" ]]\n    [[ $(candidate \"321\") = \"true\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local num=$1\n    local digits=()\n    local freq=()\n    local digit\n    local i\n    local j\n    local k\n\n    # get digits\n    while [ $num -gt 0 ]; do\n        digit=$((num % 10))\n        digits+=($digit)\n        num=$((num / 10))\n    done\n\n    # get frequency\n    for ((i=0; i<${#digits[@]}; i++)); do\n        freq[i]=0\n        for ((j=0; j<${#digits[@]}; j++)); do\n            if [ ${digits[i]} -eq ${digits[j]} ]; then\n                freq[i]=$((freq[i] + 1))\n            fi\n        done\n    done\n\n    # check frequency\n    for ((k=0; k<${#freq[@]}; k++)); do\n        if [ ${freq[k]} -gt ${digits[k]} ]; then\n            echo \"False\"\n            return\n        fi\n    done\n\n    echo \"True\"",
    "    local -i num=$1\n    local -i digit\n    local -i count\n    local -i result=0\n    local -i i=0\n    local -i j=0\n    local -i len=${#num}\n    local -a arr\n    local -a count_arr\n    local -a result_arr\n\n    while (( i < len )); do\n        digit=${num:i:1}\n        count=0\n        for (( j = 0; j < len; j++ )); do\n            if (( ${num:j:1} == digit )); then\n                (( count++ ))\n            fi\n        done\n        if (( count > digit )); then\n            result=1\n            break\n        fi\n        (( i++ ))\n    done\n\n    echo $result",
    "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"valid\"\n    else\n        echo \"invalid\"\n    fi",
    "    local -i n=$1\n    local -i digit\n    local -i count\n    local -i result=0\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    while (( n > 0 )); do\n        digit=$(( n % 10 ))\n        count=0\n        for (( i = n; i > 0; i /= 10 )); do\n            if (( i % 10 == digit )); then\n                (( count++ ))\n            fi\n        done\n        if (( count > digit )); then\n            (( result++ ))\n        fi\n        (( n /= 10 ))\n    done\n    echo $result",
    "  local num=$1\n  local digits=($(echo $num | grep -o .))\n  local freq=($(echo ${digits[@]} | grep -o . | sort | uniq -c | awk '{print $1}'))\n  local i=0\n\n  for digit in ${digits[@]}; do\n    if [[ ${freq[$i]} -gt $digit ]]; then\n      echo \"False\"\n      return\n    fi\n    ((i++))\n  done\n  echo \"True\"",
    "    local num=$1\n    local digits=()\n    local freq=()\n    local digit\n    local i\n    local j\n\n    while [ $num -gt 0 ]; do\n        digit=$((num % 10))\n        num=$((num / 10))\n        digits+=($digit)\n        freq[$digit]=$((freq[$digit] + 1))\n    done\n\n    for ((i = 0; i < ${#digits[@]}; i++)); do\n        digit=${digits[$i]}\n        if [ ${freq[$digit]} -gt $digit ]; then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local num=$1\n    local digits=()\n    local freq=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n\n    for (( i=0; i<${#num}; i++ )); do\n        case ${num:$i:1} in\n            0) ((z++)) ;;\n            1) ((o++)) ;;\n            2) ((t++)) ;;\n            3) ((h++)) ;;\n            4) ((f++)) ;;\n            5) ((f++)) ;;\n            6) ((s++)) ;;\n            7) ((s++)) ;;\n            8) ((e++)) ;;\n            9) ((n++)) ;;\n        esac\n    done\n\n    digits=($z $o $t $h $f $f $s $s $e $n)\n    freq=($z $o $t $h $f $f $s $s $e $n)\n\n    for (( i=0; i<${#digits[@]}; i++ )); do\n        for (( j=0; j<${#freq[@]}; j++ )); do\n            if [[ ${digits[$i]} -gt ${freq[$j]} ]]; then\n                echo \"false\"\n                return\n            fi\n        done\n    done\n\n    echo \"true\"",
    "    local number=$1\n    local digit\n    local frequency\n    local result=1\n    for digit in $(echo $number | sed 's/./& /g'); do\n        frequency=$(echo $number | grep -o $digit | wc -l)\n        if [ $frequency -gt $digit ]; then\n            result=0\n            break\n        fi\n    done\n    echo $result",
    "  local -i num=$1\n  local -i digit\n  local -i freq\n  local -i count\n  local -i result=1\n  local -a digits=()\n  local -a freqs=()\n  local -a counts=()\n\n  while (( num > 0 )); do\n    digit=$(( num % 10 ))\n    num=$(( num / 10 ))\n    if [[ -z ${digits[$digit]} ]]; then\n      digits[$digit]=$digit\n      freqs[$digit]=0\n      counts[$digit]=0\n    fi\n    (( freqs[$digit]++ ))\n    (( counts[$digit]++ ))\n  done\n\n  for digit in \"${digits[@]}\"; do\n    freq=${freqs[$digit]}\n    count=${counts[$digit]}\n    if (( freq > digit )); then\n      result=0\n      break\n    elif (( freq == digit )); then\n      (( counts[$digit]-- ))\n    fi\n  done\n\n  for count in \"${counts[@]}\"; do\n    if (( count > 0 )); then\n      result=0\n      break\n    fi\n  done\n\n  echo $result",
    "  local integer=$1\n  local digit\n  local frequency\n  for digit in {0..9}; do\n    frequency=$(echo \"$integer\" | grep -o \"$digit\" | wc -l)\n    if [[ $frequency -gt $digit ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"",
    "  local num=$1\n  local digits=($(echo $num | sed 's/./& /g'))\n  local digit_counts=($(echo ${digits[@]} | tr ' ' '\\n' | sort | uniq -c | awk '{print $1}'))\n  local digit_counts_len=${#digit_counts[@]}\n  local i=0\n  local is_valid=1\n  while [ $i -lt $digit_counts_len ]; do\n    if [ ${digit_counts[$i]} -gt $i ]; then\n      is_valid=0\n      break\n    fi\n    i=$((i+1))\n  done\n  echo $is_valid",
    "    local n=$1\n    local -a digits\n    local -a freq\n    local i\n    local j\n    local d\n    local f\n\n    while (( n > 0 )); do\n        d=$(( n % 10 ))\n        n=$(( n / 10 ))\n        digits[${#digits[@]}]=$d\n    done\n\n    for (( i = 0; i < ${#digits[@]}; i++ )); do\n        d=${digits[$i]}\n        f=0\n        for (( j = 0; j < ${#digits[@]}; j++ )); do\n            if (( d == ${digits[$j]} )); then\n                f=$(( f + 1 ))\n            fi\n        done\n        freq[$i]=$f\n    done\n\n    for (( i = 0; i < ${#digits[@]}; i++ )); do\n        d=${digits[$i]}\n        f=${freq[$i]}\n        if (( f > d )); then\n            echo \"False\"\n            return\n        fi\n    done\n\n    echo \"True\"",
    "    local num=$1\n    local digits=()\n    local digit_counts=()\n    local i=0\n    local digit=0\n    local count=0\n    local valid=1\n\n    while [ $num -gt 0 ]; do\n        digit=$((num % 10))\n        num=$((num / 10))\n        digits[$i]=$digit\n        ((i++))\n    done\n\n    for ((i=0; i<${#digits[@]}; i++)); do\n        digit=${digits[$i]}\n        count=0\n        for ((j=0; j<${#digits[@]}; j++)); do\n            if [ $digit -eq ${digits[$j]} ]; then\n                ((count++))\n            fi\n        done\n        digit_counts[$i]=$count\n    done\n\n    for ((i=0; i<${#digits[@]}; i++)); do\n        if [ ${digit_counts[$i]} -gt ${digits[$i]} ]; then\n            valid=0\n            break\n        fi\n    done\n\n    echo $valid",
    "    local num=$1\n    local digits=()\n    local freq=()\n    local i=0\n    local j=0\n    local k=0\n\n    # Get the digits\n    while [ $num -gt 0 ]; do\n        digits[$i]=$((num % 10))\n        num=$((num / 10))\n        i=$((i + 1))\n    done\n\n    # Get the frequency of each digit\n    for ((j = 0; j < ${#digits[@]}; j++)); do\n        freq[$j]=0\n        for ((k = 0; k < ${#digits[@]}; k++)); do\n            if [ ${digits[$j]} -eq ${digits[$k]} ]; then\n                freq[$j]=$((freq[$j] + 1))\n            fi\n        done\n    done\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for ((j = 0; j < ${#digits[@]}; j++)); do\n        if [ ${freq[$j]} -gt ${digits[$j]} ]; then\n            echo \"False\"\n            return\n        fi\n    done\n\n    echo \"True\"",
    "    local -i num=$1\n    local -i digit\n    local -i count\n    local -i result=1\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local",
    "    local num=\"$1\"\n    local digit\n    local freq\n    local result=0\n\n    for digit in $(seq 0 9); do\n        freq=$(echo \"$num\" | grep -o \"$digit\" | wc -l)\n        if [ \"$freq\" -gt \"$digit\" ]; then\n            result=1\n            break\n        fi\n    done\n\n    echo \"$result\"",
    "    local number=$1\n    local digit\n    local count\n    local result=0\n\n    for digit in $(seq 0 9); do\n        count=$(echo $number | grep -o $digit | wc -l)\n        if [ $count -gt $digit ]; then\n            result=1\n        fi\n    done\n\n    return $result",
    "    local -i num=$1\n    local -i digit\n    local -i count\n\n    while (( num > 0 )); do\n        digit=$(( num % 10 ))\n        num=$(( num / 10 ))\n        count=0\n        while (( num > 0 )); do\n            if (( digit == num % 10 )); then\n                (( count++ ))\n            fi\n            num=$(( num / 10 ))\n        done\n        if (( count > digit )); then\n            return 1\n        fi\n    done\n    return 0",
    "    local int=$1\n    local digits=()\n    local digit\n    local freq\n    local i\n    local j\n    local valid=true\n\n    # get digits\n    while (( int > 0 )); do\n        digits+=($(( int % 10 )))\n        int=$(( int / 10 ))\n    done\n\n    # check frequency\n    for (( i=0; i<${#digits[@]}; i++ )); do\n        digit=${digits[$i]}\n        freq=0\n        for (( j=0; j<${#digits[@]}; j++ )); do\n            if (( digit == ${digits[$j]} )); then\n                freq=$(( freq + 1 ))\n            fi\n        done\n        if (( freq > digit )); then\n            valid=false\n            break\n        fi\n    done\n\n    echo $valid",
    "    local num=$1\n    local digit\n    local count\n    for (( digit=0; digit<10; digit++ )); do\n        count=0\n        for (( i=0; i<${#num}; i++ )); do\n            if [[ ${num:$i:1} -eq $digit ]]; then\n                (( count++ ))\n            fi\n        done\n        if [[ $count -gt $digit ]]; then\n            echo \"False\"\n            return\n        fi\n    done\n    echo \"True\""
  ]
}