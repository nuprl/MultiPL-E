{
  "name": "mbpp_128_long_words",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find words that are longer than n characters from a given list of words.\n#\n# $1 is an integer\n# $2 is a string\nlong_words() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    long_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"python is a programming language\") = \"python programming language\" ]]\n    [[ $(candidate \"2\" \"writing a program\") = \"writing program\" ]]\n    [[ $(candidate \"5\" \"sorting list\") = \"sorting\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local str=$2\n    for word in $str; do\n        if [[ ${#word} -gt $n ]]; then\n            echo $word\n        fi\n    done",
    "  local n=$1\n  local str=$2\n  for word in $str; do\n    if [[ ${#word} -gt $n ]]; then\n      echo $word\n    fi\n  done",
    "    local n=$1\n    local str=$2\n    for word in $str; do\n        if [[ ${#word} -gt $n ]]; then\n            echo $word\n        fi\n    done",
    "  local n=$1\n  local str=$2\n  for word in $str; do\n    if [[ ${#word} -gt $n ]]; then\n      echo $word\n    fi\n  done",
    "    local n=$1\n    local string=$2\n    local words=`echo $string | tr \" \" \"\\n\"`\n    for word in $words; do\n        if [ ${#word} -gt $n ]; then\n            echo $word\n        fi\n    done",
    "    local n=$1\n    local str=$2\n    for word in $str; do\n        if [[ ${#word} -gt $n ]]; then\n            echo $word\n        fi\n    done",
    "    local n=$1\n    local str=$2\n    for word in $str; do\n        if [ ${#word} -gt $n ]; then\n            echo $word\n        fi\n    done",
    "\tfor word in $2; do\n\t\tif [ ${#word} -gt $1 ]; then\n\t\t\techo $word\n\t\tfi\n\tdone",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <string>\"\n        return 1\n    fi\n\n    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n\n    if [[ ! $2 =~ ^[a-zA-Z ]+$ ]]; then\n        echo \"Error: $2 is not a string\"\n        return 1\n    fi\n\n    for word in $2; do\n        if [ ${#word} -gt $1 ]; then\n            echo $word\n        fi\n    done",
    "    local n=$1\n    local str=$2\n    for word in $str; do\n        if [ ${#word} -gt $n ]; then\n            echo $word\n        fi\n    done",
    "  local n=$1\n  local str=$2\n  for word in $str; do\n    if [ ${#word} -gt $n ]; then\n      echo $word\n    fi\n  done",
    "    local n=$1\n    local str=$2\n    echo $str | tr \" \" \"\\n\" | grep -E \"^.{$n,}$\"",
    "    local n=$1\n    local words=$2\n    for word in $words; do\n        if [[ ${#word} -gt $n ]]; then\n            echo $word\n        fi\n    done",
    "  if [[ $# -ne 2 ]]; then\n    echo \"Usage: $0 <integer> <string>\"\n    exit 1\n  fi\n\n  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n    echo \"First argument must be an integer\"\n    exit 1\n  fi\n\n  if [[ ! $2 =~ ^[a-zA-Z]+$ ]]; then\n    echo \"Second argument must be a string\"\n    exit 1\n  fi\n\n  for word in $2; do\n    if [[ ${#word} -gt $1 ]]; then\n      echo $word\n    fi\n  done",
    "  local n=$1\n  local words=$2\n  for word in $words; do\n    if [ ${#word} -gt $n ]; then\n      echo $word\n    fi\n  done",
    "    local n=$1\n    local words=$2\n    for word in $words; do\n        if [ ${#word} -gt $n ]; then\n            echo $word\n        fi\n    done",
    "    local n=$1\n    local str=$2\n    local words=$(echo $str | tr \" \" \"\\n\")\n    for word in $words; do\n        if [ ${#word} -gt $n ]; then\n            echo $word\n        fi\n    done",
    "    local n=$1\n    local words=$2\n    for word in $words; do\n        if [ ${#word} -gt $n ]; then\n            echo $word\n        fi\n    done",
    "  local n=$1\n  local string=$2\n  local words=$(echo $string | tr \" \" \"\\n\")\n  for word in $words\n  do\n    if [ ${#word} -gt $n ]; then\n      echo $word\n    fi\n  done",
    "    local n=$1\n    local str=$2\n\n    for word in $str; do\n        if [ ${#word} -gt $n ]; then\n            echo $word\n        fi\n    done"
  ]
}