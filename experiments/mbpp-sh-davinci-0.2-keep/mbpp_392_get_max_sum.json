{
  "name": "mbpp_392_get_max_sum",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n#\n# $1 is an integer\nget_max_sum() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    get_max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"60\") = \"106\" ]]\n    [[ $(candidate \"10\") = \"12\" ]]\n    [[ $(candidate \"2\") = \"2\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=n; j++)); do\n            for ((k=0; k<=n; k++)); do\n                for ((l=0; l<=n; l++)); do\n                    sum=$((i+j+k+l))\n                    if [ $sum -eq $n ]; then\n                        sum=$((i+j+k+l))\n                        if [ $sum -gt $max_sum ]; then\n                            max_sum=$sum\n                        fi\n                    fi\n                done\n            done\n        done\n    done\n    echo $max_sum",
    "    local n=$1\n    local sum=0\n    local max_sum=0\n    local max_sum_array=()\n    local max_sum_array_index=0\n    local max_sum_array_size=0\n    local max_sum_array_size_limit=10\n    local max_sum_array_size_limit_reached=0\n    local max_sum_array_size_limit_reached_index=0\n    local max_sum_array_size_limit_reached_sum=0\n    local max_sum_array_size_limit_reached_max_sum=0\n    local max_sum_array_size_limit_reached_max_sum_index=0\n    local max_sum_array_size_limit_reached_max_sum_sum=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_index=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_sum=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_max_sum=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_max_sum_index=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_max_sum_sum=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_max_sum_max_sum=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_max_sum_max_sum_index=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_max_sum_max_sum_sum=0\n    local max_sum_array_size_limit_reached_max_sum_max_sum_max_sum_max_sum_max_sum=0\n    local max_sum_array_size_limit",
    "    local n=$1\n    local sum=0\n    local divisors=(2 3 4 5)\n    for divisor in ${divisors[@]}; do\n        local quotient=$((n / divisor))\n        if [ $quotient -gt 0 ]; then\n            sum=$((sum + $(get_max_sum $quotient)))\n        fi\n    done\n    if [ $sum -gt $n ]; then\n        echo $sum\n    else\n        echo $n\n    fi",
    "    local n=$1\n    local max_sum=0\n    local sum=0\n    local i=0\n\n    if [[ $n -le 0 ]]; then\n        echo 0\n        return\n    fi\n\n    for (( i=2; i<=5; i++ )); do\n        sum=$(( $n/$i ))\n        sum=$(get_max_sum $sum)\n        if [[ $sum -gt $max_sum ]]; then\n            max_sum=$sum\n        fi\n    done\n\n    if [[ $(( $n + $max_sum )) -gt $n ]]; then\n        echo $(( $n + $max_sum ))\n    else\n        echo $n\n    fi",
    "  local n=$1\n  local sum=0\n  local max_sum=0\n  local max_sum_list=()\n  local max_sum_list_index=0\n\n  if [ $n -lt 0 ]; then\n    echo \"Invalid input\"\n    return 1\n  fi\n\n  if [ $n -eq 0 ]; then\n    echo \"0\"\n    return 0\n  fi\n\n  if [ $n -eq 1 ]; then\n    echo \"1\"\n    return 0\n  fi\n\n  for i in $(seq 2 5); do\n    sum=$(($n/$i))\n    max_sum_list[$max_sum_list_index]=$(get_max_sum $sum)\n    max_sum_list_index=$(($max_sum_list_index+1))\n  done\n\n  max_sum=$(echo ${max_sum_list[*]} | tr \" \" \"\\n\" | sort -nr | head -n 1)\n  max_sum=$(($max_sum+$n))\n\n  echo $max_sum",
    "    local n=$1\n    local sum=0\n    local max_sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=n; j++)); do\n            for ((k=0; k<=n; k++)); do\n                for ((l=0; l<=n; l++)); do\n                    for ((m=0; m<=n; m++)); do\n                        sum=$((i/2 + j/3 + k/4 + l/5 + m))\n                        if [ $sum -gt $max_sum ]; then\n                            max_sum=$sum\n                        fi\n                    done\n                done\n            done\n        done\n    done\n    echo $max_sum",
    "  local n=$1\n  local max_sum=0\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  for ((i=0; i<=n; i++)); do\n    for ((j=0; j<=n; j++)); do\n      for ((k=0; k<=n; k++)); do\n        for ((l=0; l<=n; l++)); do\n          sum=$((i + j + k + l))\n          if [ $sum -eq $n ]; then\n            sum=$((i + j + k + l))\n            if [ $sum -gt $max_sum ]; then\n              max_sum=$sum\n            fi\n          fi\n        done\n      done\n    done\n  done\n  echo $max_sum",
    "    local n=$1\n    local sum=0\n    local max_sum=0\n    local max_sum_array=()\n    local max_sum_array_index=0\n    local max_sum_array_size=0\n    local max_sum_array_size_index=0\n    local max_sum_array_size_index_value=0\n    local max_sum_array_size_index_value_index=0\n    local max_sum_array_size_index_value_index_value=0\n    local max_sum_array_size_index_value_index_value_index=0\n    local max_sum_array_size_index_value_index_value_index_value=0\n    local max_sum_array_size_index_value_index_value_index_value_index=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value_index=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value_index_value=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value_index_value_index=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value_index_value_index_value=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value_index_value_index_value_index=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value_index_value_index_value_index_value=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index=0\n    local max_sum_array_size_index_value_index_value_index_value_index_value_index_value_index_value_index_value",
    "    local n=$1\n    local sum=0\n    local max_sum=0\n\n    if [[ $n -lt 0 ]]; then\n        echo \"Error: n must be a positive integer\"\n        return 1\n    fi\n\n    if [[ $n -eq 0 ]]; then\n        echo 0\n        return 0\n    fi\n\n    if [[ $n -eq 1 ]]; then\n        echo 1\n        return 0\n    fi\n\n    for i in {2..5}; do\n        sum=$(get_max_sum $((n / i)))\n        if [[ $sum -gt $max_sum ]]; then\n            max_sum=$sum\n        fi\n    done\n\n    if [[ $((max_sum + n)) -gt $((n * 5)) ]]; then\n        echo $((max_sum + n))\n    else\n        echo $((n * 5))\n    fi",
    "    local n=$1\n    local sum=0\n    local max_sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local max_i=0\n    local max_j=0\n    local max_k=0\n    local max_l=0\n    local max_m=0\n    local max_n=$n\n    local max_sum=$n\n    local sum=0\n    for (( i=1; i<=$n; i++ )); do\n        for (( j=1; j<=$n; j++ )); do\n            for (( k=1; k<=$n; k++ )); do\n                for (( l=1; l<=$n; l++ )); do\n                    for (( m=1; m<=$n; m++ )); do\n                        sum=$(( $i + $j + $k + $l + $m ))\n                        if [ $sum -eq $n ]; then\n                            if [ $max_sum -lt $(( $i + $j + $k + $l + $m )) ]; then\n                                max_sum=$(( $i + $j + $k + $l + $m ))\n                                max_i=$i\n                                max_j=$j\n                                max_k=$k\n                                max_l=$l\n                                max_m=$m\n                                max_n=$n\n                            fi\n                        fi\n                    done\n                done\n            done\n        done\n    done\n    echo \"Max sum is $max_sum for n=$max_n, i=$max_i, j=$max_j, k=$max_k, l=$max_l, m=$max_m\"",
    "  local n=$1\n  local max_sum=0\n  if [[ $n -le 0 ]]; then\n    echo 0\n    return\n  fi\n  if [[ $n -le 5 ]]; then\n    echo $n\n    return\n  fi\n  for (( i=2; i<=5; i++ )); do\n    local sum=$(get_max_sum $(( n / i )))\n    if [[ $sum -gt $max_sum ]]; then\n      max_sum=$sum\n    fi\n  done\n  echo $(( max_sum + n ))",
    "  local n=$1\n  local sum=0\n  local max_sum=0\n  local max_sum_n=0\n  local max_sum_n_2=0\n  local max_sum_n_3=0\n  local max_sum_n_4=0\n  local max_sum_n_5=0\n  local max_sum_n_2_3=0\n  local max_sum_n_2_4=0\n  local max_sum_n_2_5=0\n  local max_sum_n_3_4=0\n  local max_sum_n_3_5=0\n  local max_sum_n_4_5=0\n  local max_sum_n_2_3_4=0\n  local max_sum_n_2_3_5=0\n  local max_sum_n_2_4_5=0\n  local max_sum_n_3_4_5=0\n  local max_sum_n_2_3_4_5=0\n\n  if [[ $n -le 0 ]]; then\n    echo 0\n    return\n  fi\n\n  if [[ $n -eq 1 ]]; then\n    echo 1\n    return\n  fi\n\n  max_sum_n=$n\n  max_sum_n_2=$(get_max_sum $((n/2)))\n  max_sum_n_3=$(get_max_sum $((n/3)))\n  max_sum_n_4=$(get_max_sum $((n/4)))\n  max_sum_n_5=$(get_max_sum $((n/5)))\n  max_sum_n_2_3=$((max_sum_n_2 + max_sum_n_3))\n  max_sum_n_2_4=$((max_sum_n_2 + max_sum_n_4))\n  max_sum_n_2_5=$((max_sum_n_2 + max_sum_n_5))\n  max_sum_n_3_4=$((max_sum_n_3 + max_sum_n_4))\n  max_sum_n_3_5",
    "  local n=$1\n  local max_sum=0\n  local sum=0\n  if [ $n -lt 0 ]; then\n    echo \"Error: n must be a positive integer\"\n    exit 1\n  fi\n  if [ $n -eq 0 ]; then\n    echo 0\n    return\n  fi\n  if [ $n -eq 1 ]; then\n    echo 1\n    return\n  fi\n  if [ $n -eq 2 ]; then\n    echo 2\n    return\n  fi\n  if [ $n -eq 3 ]; then\n    echo 3\n    return\n  fi\n  if [ $n -eq 4 ]; then\n    echo 4\n    return\n  fi\n  if [ $n -eq 5 ]; then\n    echo 5\n    return\n  fi\n  for i in 2 3 4 5; do\n    sum=$(get_max_sum $(($n/$i)))\n    if [ $sum -gt $max_sum ]; then\n      max_sum=$sum\n    fi\n  done\n  if [ $max_sum -gt $n ]; then\n    echo $max_sum\n  else\n    echo $n\n  fi",
    "    local n=$1\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\n    if [[ $n -le 0 ]]; then\n        echo 0\n        return\n    fi\n\n    for ((i=0; i<=n; i+=2)); do\n        for ((j=0; j<=n; j+=3)); do\n            for ((k=0; k<=n; k+=4)); do\n                for ((l=0; l<=n; l+=5)); do\n                    sum=$((i+j+k+l))\n                    if [[ $sum -le $n ]]; then\n                        if [[ $sum -gt $max_sum ]]; then\n                            max_sum=$sum\n                        fi\n                    fi\n                done\n            done\n        done\n    done\n\n    echo $max_sum",
    "    local n=$1\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=n; j++)); do\n            for ((k=0; k<=n; k++)); do\n                for ((l=0; l<=n; l++)); do\n                    for ((m=0; m<=n; m++)); do\n                        sum=$((i+j+k+l+m))\n                        if [ $sum -eq $n ]; then\n                            sum=$((i/2+j/3+k/4+l/5+m))\n                            if [ $sum -gt $max_sum ]; then\n                                max_sum=$sum\n                            fi\n                        fi\n                    done\n                done\n            done\n        done\n    done\n    echo $max_sum",
    "    local n=$1\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n_div_2=0\n    local n_div_3=0\n    local n_div_4=0\n    local n_div_5=0\n\n    if [[ $n -eq 0 ]]; then\n        echo 0\n        return\n    fi\n\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=n; j++)); do\n            for ((k=0; k<=n; k++)); do\n                for ((l=0; l<=n; l++)); do\n                    for ((m=0; m<=n; m++)); do\n                        n_div_2=$((n/2))\n                        n_div_3=$((n/3))\n                        n_div_4=$((n/4))\n                        n_div_5=$((n/5))\n                        sum=$((i+j+k+l+m))\n                        if [[ $sum -gt $max_sum ]]; then\n                            max_sum=$sum\n                        fi\n                    done\n                done\n            done\n        done\n    done\n\n    echo $max_sum",
    "    local n=$1\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    for ((i=0; i<=n/2; i++)); do\n        for ((j=0; j<=n/3; j++)); do\n            for ((k=0; k<=n/4; k++)); do\n                for ((l=0; l<=n/5; l++)); do\n                    sum=$((i+j+k+l))\n                    if [[ $sum -eq $n ]]; then\n                        max_sum=$((max_sum+i+j+k+l))\n                    fi\n                done\n            done\n        done\n    done\n    echo $max_sum",
    "    local n=$1\n    local sum=0\n    local max_sum=0\n    local max_sum_n=0\n    local max_sum_n_1=0\n    local max_sum_n_2=0\n    local max_sum_n_3=0\n    local max_sum_n_4=0\n    local max_sum_n_5=0\n\n    if [ $n -lt 0 ]; then\n        echo \"Invalid input\"\n        return\n    fi\n\n    if [ $n -eq 0 ]; then\n        echo 0\n        return\n    fi\n\n    if [ $n -eq 1 ]; then\n        echo 1\n        return\n    fi\n\n    if [ $n -eq 2 ]; then\n        echo 2\n        return\n    fi\n\n    if [ $n -eq 3 ]; then\n        echo 3\n        return\n    fi\n\n    if [ $n -eq 4 ]; then\n        echo 4\n        return\n    fi\n\n    if [ $n -eq 5 ]; then\n        echo 5\n        return\n    fi\n\n    max_sum_n_1=$(get_max_sum $((n-1)))\n    max_sum_n_2=$(get_max_sum $((n-2)))\n    max_sum_n_3=$(get_max_sum $((n-3)))\n    max_sum_n_4=$(get_max_sum $((n-4)))\n    max_sum_n_5=$(get_max_sum $((n-5)))\n\n    max_sum=$((max_sum_n_1 + max_sum_n_2 + max_sum_n_3 + max_sum_n_4 + max_sum_n_5))\n\n    if [ $max_sum -lt $n ]; then\n        echo $n\n    else\n        echo $max_sum\n    fi",
    "    local n=$1\n    local max_sum\n    if [[ $n -le 0 ]]; then\n        max_sum=0\n    elif [[ $n -le 5 ]]; then\n        max_sum=$n\n    else\n        local sum1=$(( $(get_max_sum $((n/2))) + $(get_max_sum $((n/3))) + $(get_max_sum $((n/4))) + $(get_max_sum $((n/5))) ))\n        local sum2=$n\n        if [[ $sum1 -gt $sum2 ]]; then\n            max_sum=$sum1\n        else\n            max_sum=$sum2\n        fi\n    fi\n    echo $max_sum",
    "    local n=$1\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    for (( i=0; i<=n; i++ )); do\n        for (( j=0; j<=n; j++ )); do\n            for (( k=0; k<=n; k++ )); do\n                for (( l=0; l<=n; l++ )); do\n                    for (( m=0; m<=n; m++ )); do\n                        sum=$(( i + j + k + l + m ))\n                        if [[ $sum -eq $n ]]; then\n                            sum=$(( i + j + k + l + m ))\n                            if [[ $sum -gt $max_sum ]]; then\n                                max_sum=$sum\n                            fi\n                        fi\n                    done\n                done\n            done\n        done\n    done\n    echo $max_sum"
  ]
}