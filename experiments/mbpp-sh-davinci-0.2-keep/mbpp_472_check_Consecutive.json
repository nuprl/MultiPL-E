{
  "name": "mbpp_472_check_Consecutive",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to check whether the given list contains consecutive numbers or not.\n#\n# $1 is a space-separated list\ncheck_Consecutive() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    check_Consecutive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 5 6\") = \"false\" ]]\n    [[ $(candidate \"1 2 1\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    # convert the list to an array\n    arr=($1)\n    # sort the array\n    arr=($(for i in \"${arr[@]}\"; do echo \"$i\"; done | sort))\n    # check if the array is consecutive\n    for ((i=0; i<${#arr[@]}-1; i++)); do\n        if [[ ${arr[$i]} -ne $(( ${arr[$i+1]} - 1 )) ]]; then\n            echo \"The list is not consecutive.\"\n            return 1\n        fi\n    done\n    echo \"The list is consecutive.\"\n    return 0",
    "    # Convert the list to an array\n    local list=($1)\n    # Sort the array\n    local sorted=($(printf \"%s\\n\" \"${list[@]}\" | sort -n))\n    # Check if the list is consecutive\n    local consecutive=1\n    for (( i=0; i<${#sorted[@]}-1; i++ )); do\n        if [ ${sorted[$i]} -ne $(( ${sorted[$((i+1))]} - 1 )) ]; then\n            consecutive=0\n            break\n        fi\n    done\n    # Print the result\n    if [ $consecutive -eq 1 ]; then\n        echo \"The list is consecutive\"\n    else\n        echo \"The list is not consecutive\"\n    fi",
    "    # Convert the list to an array\n    arr=($1)\n    # Sort the array\n    arr=($(for i in \"${arr[@]}\"; do echo $i; done | sort))\n    # Check if the array is consecutive\n    for (( i=0; i<${#arr[@]}-1; i++ )); do\n        if [ $((${arr[$i]}+1)) -ne ${arr[$i+1]} ]; then\n            echo \"False\"\n            return\n        fi\n    done\n    echo \"True\"",
    "    local list=$1\n    local arr=($list)\n    local i=0\n    local j=0\n    local count=0\n    local flag=0\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [ ${arr[$i]} -eq ${arr[$j]} ]\n            then\n                flag=1\n                break\n            fi\n        done\n        if [ $flag -eq 1 ]\n        then\n            break\n        fi\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo \"List is not consecutive\"\n    else\n        echo \"List is consecutive\"\n    fi",
    "    local list=$1\n    local len=${#list}\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local flag=0\n    local arr=()\n    for i in $list; do\n        arr[$j]=$i\n        j=$((j+1))\n    done\n    for ((i=0; i<$len; i++)); do\n        for ((j=i+1; j<$len; j++)); do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]; then\n                tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n            fi\n        done\n    done\n    for ((i=0; i<$len; i++)); do\n        if [ $((arr[$i]+1)) -eq ${arr[$((i+1))]} ]; then\n            flag=1\n        else\n            flag=0\n            break\n        fi\n    done\n    if [ $flag -eq 1 ]; then\n        echo \"Consecutive\"\n    else\n        echo \"Not Consecutive\"\n    fi",
    "    local list=$1\n    local prev=0\n    for i in $list; do\n        if [ $i -eq $prev ]; then\n            echo \"False\"\n            return\n        fi\n        prev=$i\n    done\n    echo \"True\"",
    "    # sort the list\n    sorted=$(echo $1 | tr \" \" \"\\n\" | sort -n)\n    # check if the list is consecutive\n    if [[ $sorted == $(seq $sorted $((sorted+${#sorted[@]}-1))) ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "    local list=$1\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n    local len=0\n    local arr=()\n    local arr2=()\n    local arr3=()\n    local arr4=()\n    local arr5=()\n    local arr6=()\n    local arr7=()\n    local arr8=()\n    local arr9=()\n    local arr10=()\n    local arr11=()\n    local arr12=()\n    local arr13=()\n    local arr14=()\n    local arr15=()\n    local arr16=()\n    local arr17=()\n    local arr18=()\n    local arr19=()\n    local arr20=()\n    local arr21=()\n    local arr22=()\n    local arr23=()\n    local arr24=()\n    local arr25=()\n    local arr26=()\n    local arr27=()\n    local arr28=()\n    local arr29=()\n    local arr30=()\n    local arr31=()\n    local arr32=()\n    local arr33=()\n    local arr34=()\n    local arr35=()\n    local arr36=()\n    local arr37=()\n    local arr38=()\n    local arr39=()\n    local arr40=()\n    local arr41=()\n    local arr42=()\n    local arr43=()\n    local arr44=()\n    local arr45=()\n    local arr46=()\n    local arr47=()\n    local arr48=()\n    local arr49=()\n    local arr50=()\n    local arr51=()\n    local arr52=()\n    local arr53=()\n    local arr54=()\n    local arr55=()\n    local arr56=()\n    local arr57=()\n    local arr58=()\n    local arr59=()\n    local arr60=()\n    local arr61=()\n    local arr62=()\n    local arr63=()\n    local arr64=()\n    local arr65=()\n    local arr66=()\n    local arr67=()\n    local arr68=()\n",
    "    local list=$1\n    local list_len=$(echo $list | wc -w)\n    local list_sorted=$(echo $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    local list_sorted_len=$(echo $list_sorted | wc -w)\n    if [ $list_len -ne $list_sorted_len ]; then\n        echo \"False\"\n    else\n        local list_diff=$(echo $list_sorted | tr ' ' '\\n' | awk '{print $2 - $1}' | tr '\\n' ' ')\n        local list_diff_len=$(echo $list_diff | wc -w)\n        local list_diff_sorted=$(echo $list_diff | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n        local list_diff_sorted_len=$(echo $list_diff_sorted | wc -w)\n        if [ $list_diff_len -ne $list_diff_sorted_len ]; then\n            echo \"False\"\n        else\n            local list_diff_sorted_first=$(echo $list_diff_sorted | cut -d ' ' -f 1)\n            if [ $list_diff_sorted_first -eq 1 ]; then\n                echo \"True\"\n            else\n                echo \"False\"\n            fi\n        fi\n    fi",
    "    local list=$1\n    local consecutive=true\n    local prev=0\n    for i in $list; do\n        if [ $prev -ne 0 ]; then\n            if [ $((i - prev)) -ne 1 ]; then\n                consecutive=false\n                break\n            fi\n        fi\n        prev=$i\n    done\n    echo $consecutive",
    "    local list=$1\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local flag=0\n    local arr=()\n    local arr_len=0\n\n    arr=($list)\n    arr_len=${#arr[@]}\n\n    for ((i=0; i<arr_len; i++))\n    do\n        for ((j=i+1; j<arr_len; j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n        done\n    done\n\n    for ((k=0; k<arr_len; k++))\n    do\n        if [ $k -eq 0 ]\n        then\n            len=${arr[k]}\n        else\n            if [ $len -eq $((arr[k]-1)) ]\n            then\n                len=${arr[k]}\n            else\n                flag=1\n                break\n            fi\n        fi\n    done\n\n    if [ $flag -eq 1 ]\n    then\n        echo \"The given list is not consecutive\"\n    else\n        echo \"The given list is consecutive\"\n    fi",
    "    local list=$1\n    local list_sorted=$(echo $list | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    local list_sorted_diff=$(echo $list_sorted | tr ' ' '\\n' | awk '{print $1-$2}' | tr '\\n' ' ')\n    local list_sorted_diff_unique=$(echo $list_sorted_diff | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    if [ $list_sorted_diff_unique = \"0 1\" ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "    local list=$1\n    local len=${#list}\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n    for (( i=0; i<len; i++ )); do\n        for (( j=i+1; j<len; j++ )); do\n            if [[ ${list:i:1} -gt ${list:j:1} ]]; then\n                flag=1\n                break\n            fi\n        done\n        if [[ $flag -eq 1 ]]; then\n            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]; then\n        for (( i=0; i<len; i++ )); do\n            for (( j=i+1; j<len; j++ )); do\n                if [[ ${list:i:1} -lt ${list:j:1} ]]; then\n                    flag=2\n                    break\n                fi\n            done\n            if [[ $flag -eq 2 ]]; then\n                break\n            fi\n        done\n    fi\n    if [[ $flag -eq 1 ]]; then\n        echo \"The list is in descending order\"\n    elif [[ $flag -eq 2 ]]; then\n        echo \"The list is in ascending order\"\n    else\n        echo \"The list is not in any order\"\n    fi",
    "    local list=$1\n    local list_size=$(echo $list | wc -w)\n    local min=$(echo $list | tr ' ' '\\n' | sort -n | head -n 1)\n    local max=$(echo $list | tr ' ' '\\n' | sort -n | tail -n 1)\n    local consecutive_size=$(($max - $min + 1))\n    if [ $list_size -eq $consecutive_size ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "    local list=$1\n    local first=$(echo $list | cut -d' ' -f1)\n    local last=$(echo $list | cut -d' ' -f2)\n    local diff=$((last-first))\n    local count=$(echo $list | wc -w)\n    local expected=$((first+diff*(count-1)))\n    local actual=$(echo $list | cut -d' ' -f$count)\n    if [ $expected -eq $actual ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "    # Convert the space-separated list into a python list\n    # and check whether the list is consecutive or not\n    python -c \"\nimport sys\n\ndef check_consecutive(l):\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n\nl = [int(i) for i in sys.argv[1].split()]\nprint(check_consecutive(l))\n\" \"$1\"",
    "    local list=$1\n    local list_len=${#list}\n    local list_len_minus_1=$((list_len - 1))\n    local list_len_minus_2=$((list_len - 2))\n    local list_len_minus_3=$((list_len - 3))\n    local list_len_minus_4=$((list_len - 4))\n    local list_len_minus_5=$((list_len - 5))\n    local list_len_minus_6=$((list_len - 6))\n    local list_len_minus_7=$((list_len - 7))\n    local list_len_minus_8=$((list_len - 8))\n    local list_len_minus_9=$((list_len - 9))\n    local list_len_minus_10=$((list_len - 10))\n    local list_len_minus_11=$((list_len - 11))\n    local list_len_minus_12=$((list_len - 12))\n    local list_len_minus_13=$((list_len - 13))\n    local list_len_minus_14=$((list_len - 14))\n    local list_len_minus_15=$((list_len - 15))\n    local list_len_minus_16=$((list_len - 16))\n    local list_len_minus_17=$((list_len - 17))\n    local list_len_minus_18=$((list_len - 18))\n    local list_len_minus_19=$((list_len - 19))\n    local list_len_minus_20=$((list_len - 20))\n    local list_len_minus_21=$((list_len - 21))\n    local list_len_minus_22=$((list_len - 22))\n    local list_len_minus_23=$((list_len - 23))\n    local list_len_minus_24=$((list_len - 24))\n    local list_len_minus_25=$((list_len - 25))\n    local list_len_minus_26=$((list_len - 26))\n    local list_len_minus_27=$((list_len - 27))\n    local list_len_minus_",
    "    # Convert the list to an array\n    local -a list=($1)\n    # Sort the array\n    local -a sorted=($(printf \"%s\\n\" \"${list[@]}\" | sort -n))\n    # Check if the array is consecutive\n    local -i i=0\n    local -i j=1\n    while [ $i -lt ${#sorted[@]} ]; do\n        if [ ${sorted[$i]} -ne $((sorted[$j] - 1)) ]; then\n            echo \"False\"\n            return\n        fi\n        i=$((i + 1))\n        j=$((j + 1))\n    done\n    echo \"True\"",
    "    # Convert the string to an array\n    arr=($1)\n\n    # Check if the array is empty\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo \"The list is empty\"\n        return\n    fi\n\n    # Check if the array has only one element\n    if [ ${#arr[@]} -eq 1 ]; then\n        echo \"The list has only one element\"\n        return\n    fi\n\n    # Check if the array has only two elements\n    if [ ${#arr[@]} -eq 2 ]; then\n        if [ ${arr[0]} -eq $((arr[1]-1)) ] || [ ${arr[0]} -eq $((arr[1]+1)) ]; then\n            echo \"The list contains consecutive numbers\"\n        else\n            echo \"The list does not contain consecutive numbers\"\n        fi\n        return\n    fi\n\n    # Check if the array has more than two elements\n    for ((i=0; i<${#arr[@]}-1; i++)); do\n        if [ ${arr[i]} -ne $((arr[i+1]-1)) ] && [ ${arr[i]} -ne $((arr[i+1]+1)) ]; then\n            echo \"The list does not contain consecutive numbers\"\n            return\n        fi\n    done\n    echo \"The list contains consecutive numbers\"",
    "    local list=\"$1\"\n    local sorted=$(echo \"$list\" | tr ' ' '\\n' | sort -n)\n    local first=$(echo \"$sorted\" | head -n 1)\n    local last=$(echo \"$sorted\" | tail -n 1)\n    local diff=$((last - first))\n    local count=$(echo \"$sorted\" | wc -l)\n    if [[ $diff -eq $((count - 1)) ]]; then\n        echo \"Consecutive\"\n    else\n        echo \"Not Consecutive\"\n    fi"
  ]
}