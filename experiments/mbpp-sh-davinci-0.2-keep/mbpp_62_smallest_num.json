{
  "name": "mbpp_62_smallest_num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find smallest number in a list.\n#\n# $1 is a space-separated list\nsmallest_num() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    smallest_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 1 45 99\") = \"1\" ]]\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n    [[ $(candidate \"45 46 50 60\") = \"45\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    python -c \"print(min($1))\"",
    "  local list=$1\n  local smallest=${list%% *}\n  for num in $list; do\n    if (( num < smallest )); then\n      smallest=$num\n    fi\n  done\n  echo $smallest",
    "    echo \"$1\" | tr ' ' '\\n' | sort -n | head -1",
    "    local nums=($1)\n    local smallest=${nums[0]}\n    for num in \"${nums[@]}\"; do\n        if (( num < smallest )); then\n            smallest=$num\n        fi\n    done\n    echo $smallest",
    "    echo \"$1\" | tr ' ' '\\n' | sort -n | head -n 1",
    "    echo \"$1\" | tr ' ' '\\n' | sort -n | head -n 1",
    "    echo \"$1\" | tr ' ' '\\n' | sort -n | head -n 1",
    "    echo \"$1\" | tr ' ' '\\n' | sort -n | head -n 1",
    "  local list=$1\n  local smallest=${list%% *}\n  for num in $list; do\n    if (( num < smallest )); then\n      smallest=$num\n    fi\n  done\n  echo $smallest",
    "    local list=$1\n    local num=${list%% *}\n    for i in $list; do\n        if (( $i < $num )); then\n            num=$i\n        fi\n    done\n    echo $num",
    "    local nums=($1)\n    local smallest=${nums[0]}\n    for num in ${nums[@]}; do\n        if [[ $num -lt $smallest ]]; then\n            smallest=$num\n        fi\n    done\n    echo $smallest",
    "    local nums=($1)\n    local smallest=${nums[0]}\n    for num in ${nums[@]}; do\n        if [[ $num -lt $smallest ]]; then\n            smallest=$num\n        fi\n    done\n    echo $smallest",
    "  local nums=$1\n  local smallest=${nums%% *}\n  for num in $nums; do\n    if [[ $num -lt $smallest ]]; then\n      smallest=$num\n    fi\n  done\n  echo $smallest",
    "    local nums=($1)\n    local smallest=${nums[0]}\n    for num in ${nums[@]}; do\n        if (( num < smallest )); then\n            smallest=$num\n        fi\n    done\n    echo $smallest",
    "    local nums=($1)\n    local smallest=${nums[0]}\n    for num in ${nums[@]}; do\n        if (( num < smallest )); then\n            smallest=$num\n        fi\n    done\n    echo $smallest",
    "    local nums=($1)\n    local smallest=${nums[0]}\n    for num in ${nums[@]}; do\n        if (( $num < $smallest )); then\n            smallest=$num\n        fi\n    done\n    echo $smallest",
    "    local list=$1\n    local smallest=${list%% *}\n    for num in $list; do\n        if (( num < smallest )); then\n            smallest=$num\n        fi\n    done\n    echo $smallest",
    "    local min=$1\n    shift\n    for i in $@; do\n        if [[ $i -lt $min ]]; then\n            min=$i\n        fi\n    done\n    echo $min",
    "    local list=$1\n    local smallest=${list%% *}\n    for num in $list; do\n        if (( num < smallest )); then\n            smallest=$num\n        fi\n    done\n    echo $smallest",
    "    local nums=\"$1\"\n    local smallest
  ]
}