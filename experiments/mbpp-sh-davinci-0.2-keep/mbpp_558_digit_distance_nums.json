{
  "name": "mbpp_558_digit_distance_nums",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find the sum of the per-digit difference between two integers.\n#\n# $1 is an integer\n# $2 is an integer\ndigit_distance_nums() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    digit_distance_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"2\") = \"1\" ]]\n    [[ $(candidate \"23\" \"56\") = \"6\" ]]\n    [[ $(candidate \"123\" \"256\") = \"7\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        exit 1\n    fi\n\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        exit 1\n    fi\n\n    if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        exit 1\n    fi\n\n    # Convert the two integers to strings\n    num1=\"$1\"\n    num2=\"$2\"\n\n    # Get the length of the two strings\n    len1=${#num1}\n    len2=${#num2}\n\n    # Get the length of the longest string\n    if [ $len1 -gt $len2 ]; then\n        len=$len1\n    else\n        len=$len2\n    fi\n\n    # Pad the shorter string with zeroes\n    if [ $len1 -lt $len2 ]; then\n        num1=$(printf \"%0${len}d\" $num1)\n    else\n        num2=$(printf \"%0${len}d\" $num2)\n    fi\n\n    # Iterate over the two strings and calculate the difference\n    sum=0\n    for (( i=0; i<$len; i++ )); do\n        sum=$(( sum + abs(${num1:$i:1} - ${num2:$i:1}) ))\n    done\n\n    echo $sum",
    "  if [[ $# -ne 2 ]]; then\n    echo \"Usage: digit_distance_nums <int> <int>\"\n    return 1\n  fi\n\n  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n    echo \"digit_distance_nums: argument 1 must be an integer\"\n    return 1\n  fi\n\n  if [[ ! $2 =~ ^[0-9]+$ ]]; then\n    echo \"digit_distance_nums: argument 2 must be an integer\"\n    return 1\n  fi\n\n  local -i num1=$1\n  local -i num2=$2\n  local -i sum=0\n\n  while [[ $num1 -gt 0 || $num2 -gt 0 ]]; do\n    local -i digit1=$(( num1 % 10 ))\n    local -i digit2=$(( num2 % 10 ))\n    local -i diff=$(( digit1 - digit2 ))\n    sum=$(( sum + diff ))\n    num1=$(( num1 / 10 ))\n    num2=$(( num2 / 10 ))\n  done\n\n  echo $sum",
    "    if [[ ! $1 =~ ^-?[0-9]+$ ]] || [[ ! $2 =~ ^-?[0-9]+$ ]]; then\n        echo \"error: both arguments must be integers\"\n        return 1\n    fi\n\n    # convert to absolute value\n    local num1=$(echo $1 | sed 's/-//g')\n    local num2=$(echo $2 | sed 's/-//g')\n\n    # convert to string\n    local num1_str=$(echo $num1 | sed 's/^0*//')\n    local num2_str=$(echo $num2 | sed 's/^0*//')\n\n    # get length of each number\n    local num1_len=${#num1_str}\n    local num2_len=${#num2_str}\n\n    # pad with zeros to make both numbers the same length\n    if [[ $num1_len -gt $num2_len ]]; then\n        num2_str=$(printf \"%0${num1_len}d\" $num2)\n    elif [[ $num2_len -gt $num1_len ]]; then\n        num1_str=$(printf \"%0${num2_len}d\" $num1)\n    fi\n\n    # get the difference of each digit\n    local sum=0\n    for (( i=0; i<${#num1_str}; i++ )); do\n        local digit1=${num1_str:$i:1}\n        local digit2=${num2_str:$i:1}\n        local diff=$(( digit1 - digit2 ))\n        if [[ $diff -lt 0 ]]; then\n            diff=$(( -diff ))\n        fi\n        sum=$(( sum + diff ))\n    done\n\n    echo $sum",
    "    if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"Please enter two integers\"\n        return 1\n    fi\n    # convert the numbers to strings\n    num1=$(echo $1 | sed 's/^0*//')\n    num2=$(echo $2 | sed 's/^0*//')\n    # get the length of the numbers\n    len1=${#num1}\n    len2=${#num2}\n    # get the difference in length\n    len_diff=$((len1-len2))\n    # if the first number is longer, add zeros to the front of the second number\n    if [[ $len_diff -gt 0 ]]; then\n        num2=$(printf \"%0${len_diff}d%s\" 0 $num2)\n    # if the second number is longer, add zeros to the front of the first number\n    elif [[ $len_diff -lt 0 ]]; then\n        num1=$(printf \"%0$((-len_diff))d%s\" 0 $num1)\n    fi\n    # get the length of the numbers\n    len1=${#num1}\n    len2=${#num2}\n    # initialize the sum\n    sum=0\n    # loop through the numbers\n    for ((i=0; i<len1; i++)); do\n        # get the digit at the current index\n        digit1=${num1:i:1}\n        digit2=${num2:i:1}\n        # add the absolute value of the difference to the sum\n        sum=$((sum+abs(digit1-digit2)))\n    done\n    echo $sum",
    "  if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n\n  local -i sum=0\n  local -i num1=$1\n  local -i num2=$2\n  local -i digit1\n  local -i digit2\n\n  while [[ $num1 -gt 0 ]] || [[ $num2 -gt 0 ]]; do\n    digit1=$(( num1 % 10 ))\n    digit2=$(( num2 % 10 ))\n    sum=$(( sum + abs(digit1 - digit2) ))\n    num1=$(( num1 / 10 ))\n    num2=$(( num2 / 10 ))\n  done\n\n  echo $sum",
    "    local num1=$1\n    local num2=$2\n    local sum=0\n    local num1_len=${#num1}\n    local num2_len=${#num2}\n    local max_len=$num1_len\n    if [[ $num2_len -gt $num1_len ]]; then\n        max_len=$num2_len\n    fi\n    local i=0\n    while [[ $i -lt $max_len ]]; do\n        local num1_digit=0\n        local num2_digit=0\n        if [[ $i -lt $num1_len ]]; then\n            num1_digit=${num1:$i:1}\n        fi\n        if [[ $i -lt $num2_len ]]; then\n            num2_digit=${num2:$i:1}\n        fi\n        sum=$((sum + (num1_digit - num2_digit)))\n        i=$((i + 1))\n    done\n    echo $sum",
    "\tlocal num1=$1\n\tlocal num2=$2\n\tlocal sum=0\n\tlocal i=0\n\tlocal len1=${#num1}\n\tlocal len2=${#num2}\n\tlocal len=$((len1 > len2 ? len1 : len2))\n\tlocal num1_arr=()\n\tlocal num2_arr=()\n\n\tfor ((i=0; i<len; i++)); do\n\t\tnum1_arr[i]=${num1:i:1}\n\t\tnum2_arr[i]=${num2:i:1}\n\tdone\n\n\tfor ((i=0; i<len; i++)); do\n\t\tsum=$((sum + abs(${num1_arr[i]} - ${num2_arr[i]})))\n\tdone\n\n\techo $sum",
    "  local num1=$1\n  local num2=$2\n  local sum=0\n  local num1_len=${#num1}\n  local num2_len=${#num2}\n  local num1_digit\n  local num2_digit\n  local i\n  for ((i=0; i<num1_len; i++)); do\n    num1_digit=${num1:$i:1}\n    num2_digit=${num2:$i:1}\n    sum=$((sum + (num1_digit - num2_digit)))\n  done\n  echo $sum",
    "    if [[ $# -ne 2 ]]; then\n        echo \"Usage: $0 <int1> <int2>\"\n        exit 1\n    fi\n\n    # Convert to strings\n    local num1=\"$1\"\n    local num2=\"$2\"\n\n    # Get the length of the longest number\n    local len1=${#num1}\n    local len2=${#num2}\n    local max_len=$len1\n    if [[ $len2 -gt $len1 ]]; then\n        max_len=$len2\n    fi\n\n    # Pad the shorter number with zeros\n    if [[ $len1 -lt $len2 ]]; then\n        num1=$(printf \"%0${max_len}d\" \"$num1\")\n    else\n        num2=$(printf \"%0${max_len}d\" \"$num2\")\n    fi\n\n    # Iterate over the digits and calculate the difference\n    local sum=0\n    for ((i=0; i<max_len; i++)); do\n        local digit1=${num1:i:1}\n        local digit2=${num2:i:1}\n        local diff=$(( digit1 - digit2 ))\n        if [[ $diff -lt 0 ]]; then\n            diff=$(( -diff ))\n        fi\n        sum=$(( sum + diff ))\n    done\n\n    echo $sum",
    "    local num1=$1\n    local num2=$2\n    local sum=0\n    local diff=0\n\n    for (( i=0; i<${#num1}; i++ )); do\n        diff=$(( ${num1:$i:1} - ${num2:$i:1} ))\n        sum=$(( sum + diff ))\n    done\n\n    echo $sum",
    "  # get the digits of the numbers\n  local digits1=$(echo $1 | grep -o .)\n  local digits2=$(echo $2 | grep -o .)\n\n  # get the length of the numbers\n  local len1=${#digits1}\n  local len2=${#digits2}\n\n  # get the difference in length\n  local diff=$((len1 - len2))\n\n  # if the first number is longer, pad the second number with zeros\n  if [ $diff -gt 0 ]; then\n    digits2=$(printf \"%0${diff}d%s\" 0 \"$digits2\")\n  # if the second number is longer, pad the first number with zeros\n  elif [ $diff -lt 0 ]; then\n    digits1=$(printf \"%0${diff#-}d%s\" 0 \"$digits1\")\n  fi\n\n  # get the sum of the differences\n  local sum=0\n  for ((i=0; i<${#digits1}; i++)); do\n    sum=$((sum + ${digits1:i:1} - ${digits2:i:1}))\n  done\n\n  echo $sum",
    "    # Convert the numbers to strings\n    num1=$(echo $1 | sed 's/\\(.\\)/\\1 /g')\n    num2=$(echo $2 | sed 's/\\(.\\)/\\1 /g')\n\n    # Pad the shorter number with zeros\n    if [ ${#num1} -gt ${#num2} ]; then\n        num2=$(printf \"%0${#num1}d\" $num2)\n    else\n        num1=$(printf \"%0${#num2}d\" $num1)\n    fi\n\n    # Calculate the sum of the differences\n    sum=0\n    for i in $(seq 0 $((${#num1} - 1))); do\n        sum=$(($sum + abs(${num1:$i:1} - ${num2:$i:1})))\n    done\n\n    echo $sum",
    "    local num1=$1\n    local num2=$2\n    local sum=0\n    local num1_len=${#num1}\n    local num2_len=${#num2}\n    local num1_digit\n    local num2_digit\n    local i\n    for ((i=0; i<num1_len; i++)); do\n        num1_digit=${num1:i:1}\n        num2_digit=${num2:i:1}\n        sum=$((sum + abs(num1_digit - num2_digit)))\n    done\n    echo $sum",
    "    if [ $# -ne 2 ]\n    then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    local -i sum=0\n    local -i num1=$1\n    local -i num2=$2\n\n    while [ $num1 -gt 0 ]\n    do\n        local -i digit1=$(( num1 % 10 ))\n        local -i digit2=$(( num2 % 10 ))\n        local -i diff=$(( digit1 - digit2 ))\n        sum=$(( sum + diff ))\n        num1=$(( num1 / 10 ))\n        num2=$(( num2 / 10 ))\n    done\n\n    echo $sum",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <int1> <int2>\"\n        return 1\n    fi\n    local int1=$1\n    local int2=$2\n    local sum=0\n    while [ $int1 -gt 0 ] || [ $int2 -gt 0 ]; do\n        local digit1=$((int1 % 10))\n        local digit2=$((int2 % 10))\n        local diff=$((digit1 - digit2))\n        sum=$((sum + diff))\n        int1=$((int1 / 10))\n        int2=$((int2 / 10))\n    done\n    echo $sum",
    "    if [[ $# -ne 2 ]]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        exit 1\n    fi\n\n    if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        exit 1\n    fi\n\n    local num1=$1\n    local num2=$2\n    local sum=0\n\n    while [[ $num1 -gt 0 ]] && [[ $num2 -gt 0 ]]; do\n        local digit1=$((num1 % 10))\n        local digit2=$((num2 % 10))\n        local diff=$((digit1 - digit2))\n        if [[ $diff -lt 0 ]]; then\n            diff=$((-diff))\n        fi\n        sum=$((sum + diff))\n        num1=$((num1 / 10))\n        num2=$((num2 / 10))\n    done\n\n    echo $sum",
    "    if [[ $1 -lt 0 || $2 -lt 0 ]]; then\n        echo \"Both numbers must be positive integers\"\n        return 1\n    fi\n\n    if [[ $1 -gt $2 ]]; then\n        echo \"The first number must be less than the second number\"\n        return 1\n    fi\n\n    if [[ $1 -eq $2 ]]; then\n        echo \"The numbers must be different\"\n        return 1\n    fi\n\n    local sum=0\n    local num1=$1\n    local num2=$2\n    while [[ $num1 -gt 0 ]]; do\n        local digit1=$(( num1 % 10 ))\n        local digit2=$(( num2 % 10 ))\n        local diff=$(( digit1 - digit2 ))\n        if [[ $diff -lt 0 ]]; then\n            diff=$(( -diff ))\n        fi\n        sum=$(( sum + diff ))\n        num1=$(( num1 / 10 ))\n        num2=$(( num2 / 10 ))\n    done\n    echo $sum",
    "    if [[ $# -ne 2 ]]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        exit 1\n    fi\n    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        exit 1\n    fi\n    if [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        exit 1\n    fi\n    local num1=$1\n    local num2=$2\n    local sum=0\n    while [[ $num1 -gt 0 || $num2 -gt 0 ]]; do\n        local digit1=$(( num1 % 10 ))\n        local digit2=$(( num2 % 10 ))\n        local diff=$(( digit1 - digit2 ))\n        if [[ $diff -lt 0 ]]; then\n            diff=$(( -diff ))\n        fi\n        sum=$(( sum + diff ))\n        num1=$(( num1 / 10 ))\n        num2=$(( num2 / 10 ))\n    done\n    echo $sum",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n\n  local num1=$1\n  local num2=$2\n\n  local sum=0\n  local num1_len=${#num1}\n  local num2_len=${#num2}\n  local max_len=$((num1_len > num2_len ? num1_len : num2_len))\n\n  for ((i=0; i<max_len; i++)); do\n    local digit1=${num1:$((num1_len - i - 1)):1}\n    local digit2=${num2:$((num2_len - i - 1)):1}\n\n    if [ -z \"$digit1\" ]; then\n      digit1=0\n    fi\n\n    if [ -z \"$digit2\" ]; then\n      digit2=0\n    fi\n\n    sum=$((sum + (digit1 - digit2) * (digit1 - digit2)))\n  done\n\n  echo $sum",
    "    if [[ $# -ne 2 ]]; then\n        echo \"Usage: digit_distance_nums <int1> <int2>\"\n        return 1\n    fi\n\n    # Convert to strings\n    local num1=\"$1\"\n    local num2=\"$2\"\n\n    # Convert to arrays\n    local num1_array=($(echo \"${num1}\" | grep -o .))\n    local num2_array=($(echo \"${num2}\" | grep -o .))\n\n    # Pad the shorter array with zeros\n    local num1_len=${#num1_array[@]}\n    local num2_len=${#num2_array[@]}\n    if [[ ${num1_len} -lt ${num2_len} ]]; then\n        local pad_len=$((num2_len - num1_len))\n        for ((i=0; i<${pad_len}; i++)); do\n            num1_array=(\"0\" \"${num1_array[@]}\")\n        done\n    elif [[ ${num2_len} -lt ${num1_len} ]]; then\n        local pad_len=$((num1_len - num2_len))\n        for ((i=0; i<${pad_len}; i++)); do\n            num2_array=(\"0\" \"${num2_array[@]}\")\n        done\n    fi\n\n    # Calculate the sum of the per-digit difference\n    local sum=0\n    for ((i=0; i<${#num1_array[@]}; i++)); do\n        local diff=$((num1_array[i] - num2_array[i]))\n        if [[ ${diff} -lt 0 ]]; then\n            diff=$((-1 * diff))\n        fi\n        sum=$((sum + diff))\n    done\n\n    echo \"${sum}\""
  ]
}