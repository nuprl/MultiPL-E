{
  "name": "mbpp_739_find_Index",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n#\n# $1 is an integer\nfind_Index() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    find_Index \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"14\" ]]\n    [[ $(candidate \"4\") = \"45\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local i=1\n    local t=0\n    local d=0\n    while [ $d -ne $n ]\n    do\n        t=$(( $i * ($i + 1) / 2 ))\n        d=$(echo $t | wc -c)\n        i=$(( $i + 1 ))\n    done\n    echo $(( $i - 1 ))",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ ${#sum} -lt $n ]; do\n        sum=$((sum+i))\n        i=$((i+1))\n    done\n    echo $((i-1))",
    "  local n=$1\n  local i=1\n  local sum=0\n  local index=0\n  while [ $sum -lt $n ]\n  do\n    sum=$(( $i * ($i + 1) / 2 ))\n    index=$(( $index + 1 ))\n    i=$(( $i + 1 ))\n  done\n  echo $index",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ $((10**$n)) -gt $sum ]; do\n        sum=$((i*(i+1)/2))\n        ((i++))\n    done\n    echo $((i-1))",
    "    local n=$1\n    local i=1\n    local sum=0\n    local index=0\n    while [ $sum -lt $n ]\n    do\n        sum=$(( $i * ($i + 1) / 2 ))\n        index=$(( $index + 1 ))\n        i=$(( $i + 1 ))\n    done\n    echo $index",
    "    local n=$1\n    local i=1\n    local sum=0\n    local index=0\n    while [ $sum -lt $n ]\n    do\n        sum=$(( $i * ($i + 1) / 2 ))\n        index=$i\n        i=$(( $i + 1 ))\n    done\n    echo $index",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [[ ${#sum} -lt $n ]]; do\n        sum=$(( $i * ($i + 1) / 2 ))\n        (( i++ ))\n    done\n    echo $(( i - 1 ))",
    "    local n=$1\n    local i=1\n    local t=0\n    local len=0\n    while [ $len -lt $n ]\n    do\n        t=$(( $i * ($i + 1) / 2 ))\n        len=${#t}\n        i=$(( $i + 1 ))\n    done\n    echo $(( $i - 1 ))",
    "    local n=$1\n    local i=1\n    local t=1\n    local count=1\n    while [ $count -lt $n ]\n    do\n        i=$((i+1))\n        t=$((t+i))\n        count=$(echo $t | wc -c)\n    done\n    echo $i",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ $((10**(n-1))) -gt $sum ]\n    do\n        sum=$((i*(i+1)/2))\n        i=$((i+1))\n    done\n    echo $((i-1))",
    "    local n=$1\n    local i=1\n    local t=1\n    local len=0\n    while [ $len -ne $n ]; do\n        t=$(( $i * ($i + 1) / 2 ))\n        len=${#t}\n        (( i++ ))\n    done\n    echo $(( $i - 1 ))",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ ${#sum} -lt $n ]; do\n        sum=$(($sum + $i))\n        i=$(($i + 1))\n    done\n    echo $((i - 1))",
    "    local n=$1\n    local i=1\n    local t=1\n    local len=0\n    while [ $len -ne $n ]\n    do\n        t=$((i*(i+1)/2))\n        len=${#t}\n        i=$((i+1))\n    done\n    echo $((i-1))",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ $((10**(n-1))) -gt $sum ]; do\n        sum=$((i*(i+1)/2))\n        i=$((i+1))\n    done\n    echo $((i-1))",
    "    local n=$1\n    local i=1\n    local t=1\n    while [ ${#t} -lt $n ]; do\n        i=$((i+1))\n        t=$((i*(i+1)/2))\n    done\n    echo $i",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ $((10**$n)) -gt $sum ]; do\n        sum=$((i*(i+1)/2))\n        ((i++))\n    done\n    echo $((i-1))",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ ${#sum} -lt $n ]\n    do\n        sum=$((i*(i+1)/2))\n        i=$((i+1))\n    done\n    echo $((i-1))",
    "    # Initialize first triangular number\n    tn=0\n    # Initialize index of triangular number\n    i=1\n    # Find the index of triangular number\n    while [ ${#tn} -ne $1 ]\n    do\n        tn=$((tn+i))\n        i=$((i+1))\n    done\n    # Print the index of triangular number\n    echo $((i-1))",
    "    local n=$1\n    local i=1\n    local sum=1\n    while [ ${#sum} -lt $n ]; do\n        i=$((i+1))\n        sum=$((i*(i+1)/2))\n    done\n    echo $i",
    "    # Write your code here\n    # Store the number of digits in a variable\n    digits=$1\n    # Initialize the index to 1\n    index=1\n    # Initialize the triangular number to 1\n    triangular=1\n    # Loop until the number of digits in the triangular number is equal to the number of digits in the input\n    while [ ${#triangular} -ne $digits ]; do\n        # Increment the index by 1\n        index=$((index+1))\n        # Calculate the triangular number\n        triangular=$((index*(index+1)/2))\n    done\n    # Return the index\n    echo $index"
  ]
}