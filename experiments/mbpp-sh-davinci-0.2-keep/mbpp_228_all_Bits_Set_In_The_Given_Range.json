{
  "name": "mbpp_228_all_Bits_Set_In_The_Given_Range",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to check whether all the bits are unset in the given range or not.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nall_Bits_Set_In_The_Given_Range() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    all_Bits_Set_In_The_Given_Range \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\" \"1\" \"2\") = \"true\" ]]\n    [[ $(candidate \"17\" \"2\" \"4\") = \"true\" ]]\n    [[ $(candidate \"39\" \"4\" \"6\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  if [ $# -ne 3 ]; then\n    echo \"Usage: $0 <number> <start> <end>\"\n    exit 1\n  fi\n\n  local number=$1\n  local start=$2\n  local end=$3\n\n  if [ $start -gt $end ]; then\n    echo \"start should be less than end\"\n    exit 1\n  fi\n\n  local bits_in_number=$(echo \"obase=2; $number\" | bc)\n  local bits_in_number_length=${#bits_in_number}\n\n  if [ $end -gt $bits_in_number_length ]; then\n    echo \"end should be less than or equal to the number of bits in the number\"\n    exit 1\n  fi\n\n  local bits_in_range=$(echo \"$bits_in_number\" | cut -c $start-$end)\n  local bits_in_range_length=${#bits_in_range}\n\n  for (( i=0; i<$bits_in_range_length; i++ )); do\n    if [ ${bits_in_range:$i:1} -eq 1 ]; then\n      echo \"false\"\n      return\n    fi\n  done\n\n  echo \"true\"",
    "    if [ $# -ne 3 ]\n    then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\n        exit 1\n    fi\n\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]\n    then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\n        exit 1\n    fi\n\n    if [ $2 -gt $3 ]\n    then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\n        exit 1\n    fi\n\n    if [ $1 -eq 0 ]\n    then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 1 ]\n    then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $2 -eq $3 ]\n    then\n        if [ $(( $1 & (1 << $2) )) -eq 0 ]\n        then\n            echo \"True\"\n        else\n            echo \"False\"\n        fi\n        exit 0\n    fi\n\n    for i in $(seq $2 $3)\n    do\n        if [ $(( $1 & (1 << $i) )) -ne 0 ]\n        then\n            echo \"False\"\n            exit 0\n        fi\n    done\n\n    echo \"True\"",
    "    if [ $# -ne 3 ]; then\n        echo \"Usage: all_Bits_Set_In_The_Given_Range <number> <start> <end>\"\n        return 1\n    fi\n\n    local number=$1\n    local start=$2\n    local end=$3\n\n    if [ $start -gt $end ]; then\n        echo \"start must be less than end\"\n        return 1\n    fi\n\n    local i=$start\n    while [ $i -le $end ]; do\n        if [ $((number & (1 << i))) -eq 0 ]; then\n            echo \"false\"\n            return 0\n        fi\n        i=$((i + 1))\n    done\n\n    echo \"true\"",
    "    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    if [ $1 -eq 0 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $2 -eq $3 ]\n    then\n        echo \"True\"\n        return\n    fi\n    if [ $2 -gt $3 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 1 ]\n    then\n        echo \"True\"\n        return\n    fi\n    if [ $1 -eq 2 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 3 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 4 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 5 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 6 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 7 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 8 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 9 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 10 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 11 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 12 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 13 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 14 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 15 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [ $1 -eq 16 ]\n    then\n        echo \"False\"\n        return\n    fi\n    if [",
    "\tlocal num=$1\n\tlocal start=$2\n\tlocal end=$3\n\tlocal temp=$((1<<$end))\n\tlocal temp=$((temp-1))\n\tlocal temp=$((temp<<$start))\n\tlocal temp=$((temp&num))\n\tif [ $temp -eq $num ]; then\n\t\techo \"All bits are set\"\n\telse\n\t\techo \"All bits are not set\"\n\tfi",
    "    if [ $# -ne 3 ]\n    then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]\n    then\n        echo \"Error: All arguments must be positive integers\"\n        return 2\n    fi\n\n    if [ $1 -gt $2 ]\n    then\n        echo \"Error: First argument must be less than or equal to second argument\"\n        return 3\n    fi\n\n    if [ $2 -gt $3 ]\n    then\n        echo \"Error: Second argument must be less than or equal to third argument\"\n        return 4\n    fi\n\n    if [ $1 -gt $3 ]\n    then\n        echo \"Error: First argument must be less than or equal to third argument\"\n        return 5\n    fi\n\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]\n    then\n        echo \"Error: All arguments must be different\"\n        return 6\n    fi\n\n    if [ $1 -eq $2 ]\n    then\n        echo \"Error: First argument must be different from second argument\"\n        return 7\n    fi\n\n    if [ $2 -eq $3 ]\n    then\n        echo \"Error: Second argument must be different from third argument\"\n        return 8\n    fi\n\n    if [ $1 -eq $3 ]\n    then\n        echo \"Error: First argument must be different from third argument\"\n        return 9\n    fi\n\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]\n    then\n        echo \"Error: All arguments must be positive integers\"\n        return 10\n    fi\n\n    if [ $1 -gt $2 ]\n    then\n        echo \"Error: First argument must be less than or equal to second argument\"\n        return 11\n    fi\n\n    if [ $2 -gt $3 ]\n    then\n        echo \"Error: Second argument must be less than or equal to third argument\"\n        return 12\n    fi\n\n    if [ $1 -gt $3 ]\n    then\n        echo \"Error: First argument must be less than or equal to third argument\"",
    "\tlocal num=$1\n\tlocal start=$2\n\tlocal end=$3\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal l=0\n\tlocal m=0\n\tlocal n=0\n\tlocal o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal r=0\n\tlocal s=0\n\tlocal t=0\n\tlocal u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal x=0\n\tlocal y=0\n\tlocal z=0\n\tlocal aa=0\n\tlocal bb=0\n\tlocal cc=0\n\tlocal dd=0\n\tlocal ee=0\n\tlocal ff=0\n\tlocal gg=0\n\tlocal hh=0\n\tlocal ii=0\n\tlocal jj=0\n\tlocal kk=0\n\tlocal ll=0\n\tlocal mm=0\n\tlocal nn=0\n\tlocal oo=0\n\tlocal pp=0\n\tlocal qq=0\n\tlocal rr=0\n\tlocal ss=0\n\tlocal tt=0\n\tlocal uu=0\n\tlocal vv=0\n\tlocal ww=0\n\tlocal xx=0\n\tlocal yy=0\n\tlocal zz=0\n\tlocal aaa=0\n\tlocal bbb=0\n\tlocal ccc=0\n\tlocal ddd=0\n\tlocal eee=0\n\tlocal fff=0\n\tlocal ggg=0\n\tlocal hhh=0\n\tlocal iii=0\n\tlocal jjj=0\n\tlocal kkk=0\n\tlocal lll=0\n\tlocal mmm=0\n\tlocal nnn=0\n\tlocal ooo=0\n\tlocal ppp=0\n\tlocal qqq=0\n\tlocal rrr=0\n\tlocal sss=0\n\tlocal ttt=0\n\tlocal uuu=0\n\tlocal vvv=0\n\tlocal www=0\n\tlocal xxx=0\n\tlocal yyy=0\n\tlocal zzz=0\n\tlocal aaaa=0\n\tlocal bbbb=0\n\tlocal cccc=0\n\tlocal dddd=0\n\t",
    "    if [ $# -ne 3 ]\n    then\n        echo \"Usage: $0 <number> <start> <end>\"\n        exit 1\n    fi\n    number=$1\n    start=$2\n    end=$3\n    for (( i=$start; i<=$end; i++ ))\n    do\n        if [ $(( $number & (1 << $i) )) -eq 0 ]\n        then\n            echo \"All bits are not set in the given range\"\n            exit 0\n        fi\n    done\n    echo \"All bits are set in the given range\"",
    "    local num=$1\n    local start=$2\n    local end=$3\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local count=0\n    local flag=0\n    local arr=()\n    local arr1=()\n    local arr2=()\n    local arr3=()\n    local arr4=()\n    local arr5=()\n    local arr6=()\n    local arr7=()\n    local arr8=()\n    local arr9=()\n    local arr10=()\n    local arr11=()\n    local arr12=()\n    local arr13=()\n    local arr14=()\n    local arr15=()\n    local arr16=()\n    local arr17=()\n    local arr18=()\n    local arr19=()\n    local arr20=()\n    local arr21=()\n    local arr22=()\n    local arr23=()\n    local arr24=()\n    local arr25=()\n    local arr26=()\n    local arr27=()\n    local arr28=()\n    local arr29=()\n    local arr30=()\n    local arr31=()\n    local arr32=()\n    local arr33=()\n    local arr34=()\n    local arr35=()\n    local arr36=()\n    local arr37=()\n    local arr38=()\n    local arr39=()\n    local arr40=()\n    local arr41=()\n    local arr42=()\n    local arr43=()\n    local arr44=()\n    local arr45=()\n    local arr46=()\n    local arr47=()\n    local arr48=()\n    local arr49=()\n    local arr50=()\n    local arr51=()\n    local arr52=()\n    local arr53=()\n    local arr54=()\n    local arr55=()\n    local arr56=()\n    local arr57=()\n    local arr58=()\n    local arr59=()\n    local arr60=()\n    local arr61=()\n    local arr62=()\n    local arr63=()\n    local arr64=()\n    local arr",
    "  if [ $# -ne 3 ]; then\n    echo \"Usage: $0 <integer> <integer> <integer>\"\n    exit 1\n  fi\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo \"Error: All arguments must be positive integers\"\n    exit 1\n  fi\n  if [ $1 -gt $2 ]; then\n    echo \"Error: The first argument must be less than the second argument\"\n    exit 1\n  fi\n  if [ $2 -gt $3 ]; then\n    echo \"Error: The second argument must be less than the third argument\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo \"Error: All arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n    echo \"Error: All arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n    echo \"Error: All arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq 1 ] && [ $2 -eq 1 ] && [ $3 -eq 1 ]; then\n    echo \"Error: All arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq 2 ] && [ $2 -eq 2 ] && [ $3 -eq 2 ]; then\n    echo \"Error: All arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq 3 ] && [ $2 -eq 3 ] && [ $3 -eq 3 ]; then\n    echo \"Error: All arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq 4 ] && [ $2 -eq 4 ] && [ $3 -eq 4 ]; then\n    echo \"Error: All arguments must be different\"\n    exit 1\n  fi\n  if [ $1 -eq 5 ] && [ $2 -eq 5 ] && [ $3 -eq 5 ]; then\n    echo \"Error: All arguments must be different\"",
    "  local num=$1\n  local start=$2\n  local end=$3\n  local bits=$(echo \"obase=2; $num\" | bc)\n  local bits_length=${#bits}\n  local bits_start=$(($bits_length - $start))\n  local bits_end=$(($bits_length - $end))\n  local bits_range=$(echo $bits | cut -c $bits_start-$bits_end)\n  local bits_range_length=${#bits_range}\n  local bits_range_ones=$(echo $bits_range | tr -d 0)\n  local bits_range_ones_length=${#bits_range_ones}\n  if [ $bits_range_ones_length -eq $bits_range_length ]; then\n    echo \"All bits are set in the given range\"\n  else\n    echo \"All bits are not set in the given range\"\n  fi",
    "    local num=$1\n    local start=$2\n    local end=$3\n    local i=0\n    local count=0\n    local flag=0\n    for (( i=start; i<=end; i++ ))\n    do\n        if [ $(( $num & (1 << $i) )) -eq 0 ]\n        then\n            flag=1\n            break\n        fi\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"All bits are set in the given range\"\n    else\n        echo \"All bits are not set in the given range\"\n    fi",
    "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\n        exit 1\n    fi\n\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n        echo \"All the arguments must be positive integers\"\n        exit 1\n    fi\n\n    if [ $2 -gt $3 ]; then\n        echo \"The second argument must be less than the third argument\"\n        exit 1\n    fi\n\n    if [ $2 -eq $3 ]; then\n        echo \"The second argument must be less than the third argument\"\n        exit 1\n    fi\n\n    if [ $1 -eq 0 ]; then\n        echo \"The first argument must be greater than zero\"\n        exit 1\n    fi\n\n    if [ $1 -eq 1 ]; then\n        echo \"The first argument must be greater than one\"\n        exit 1\n    fi\n\n    if [ $1 -eq 2 ]; then\n        echo \"The first argument must be greater than two\"\n        exit 1\n    fi\n\n    if [ $1 -eq 3 ]; then\n        echo \"The first argument must be greater than three\"\n        exit 1\n    fi\n\n    if [ $1 -eq 4 ]; then\n        echo \"The first argument must be greater than four\"\n        exit 1\n    fi\n\n    if [ $1 -eq 5 ]; then\n        echo \"The first argument must be greater than five\"\n        exit 1\n    fi\n\n    if [ $1 -eq 6 ]; then\n        echo \"The first argument must be greater than six\"\n        exit 1\n    fi\n\n    if [ $1 -eq 7 ]; then\n        echo \"The first argument must be greater than seven\"\n        exit 1\n    fi\n\n    if [ $1 -eq 8 ]; then\n        echo \"The first argument must be greater than eight\"\n        exit 1\n    fi\n\n    if [ $1 -eq 9 ]; then\n        echo \"The first argument must be greater than nine\"\n        exit 1\n    fi\n\n    if [ $1 -eq 10 ]; then\n        echo \"The first argument must be greater than ten\"\n        exit 1\n    fi\n\n    if [ $1 -eq 11 ]; then\n        echo \"The first argument must be greater than",
    "\tlocal num=$1\n\tlocal start=$2\n\tlocal end=$3\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal l=0\n\tlocal m=0\n\tlocal n=0\n\tlocal o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal r=0\n\tlocal s=0\n\tlocal t=0\n\tlocal u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal x=0\n\tlocal y=0\n\tlocal z=0\n\tlocal aa=0\n\tlocal bb=0\n\tlocal cc=0\n\tlocal dd=0\n\tlocal ee=0\n\tlocal ff=0\n\tlocal gg=0\n\tlocal hh=0\n\tlocal ii=0\n\tlocal jj=0\n\tlocal kk=0\n\tlocal ll=0\n\tlocal mm=0\n\tlocal nn=0\n\tlocal oo=0\n\tlocal pp=0\n\tlocal qq=0\n\tlocal rr=0\n\tlocal ss=0\n\tlocal tt=0\n\tlocal uu=0\n\tlocal vv=0\n\tlocal ww=0\n\tlocal xx=0\n\tlocal yy=0\n\tlocal zz=0\n\tlocal aaa=0\n\tlocal bbb=0\n\tlocal ccc=0\n\tlocal ddd=0\n\tlocal eee=0\n\tlocal fff=0\n\tlocal ggg=0\n\tlocal hhh=0\n\tlocal iii=0\n\tlocal jjj=0\n\tlocal kkk=0\n\tlocal lll=0\n\tlocal mmm=0\n\tlocal nnn=0\n\tlocal ooo=0\n\tlocal ppp=0\n\tlocal qqq=0\n\tlocal rrr=0\n\tlocal sss=0\n\tlocal ttt=0\n\tlocal uuu=0\n\tlocal vvv=0\n\tlocal www=0\n\tlocal xxx=0\n\tlocal yyy=0\n\tlocal zzz=0\n\tlocal aaaa=0\n\tlocal bbbb=0\n\tlocal cccc=0\n\tlocal dddd=0\n\t",
    "    if [ $# -ne 3 ]; then\n        echo \"Usage: all_Bits_Set_In_The_Given_Range <integer> <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n        echo \"Usage: all_Bits_Set_In_The_Given_Range <integer> <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $2 -gt $3 ]; then\n        echo \"Usage: all_Bits_Set_In_The_Given_Range <integer> <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $3 -gt 31 ]; then\n        echo \"Usage: all_Bits_Set_In_The_Given_Range <integer> <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $2 -eq $3 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"False\"\n            return 0\n        fi\n\n        if [ $1 -eq 1 ]; then\n            echo \"True\"\n            return 0\n        fi\n    fi\n\n    if [ $2 -eq 0 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"False\"\n            return 0\n        fi\n\n        if [ $1 -eq 1 ]; then\n            echo \"True\"\n            return 0\n        fi\n    fi\n\n    if [ $2 -eq 1 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"False\"\n            return 0\n        fi\n\n        if [ $1 -eq 1 ]; then\n            echo \"True\"\n            return 0\n        fi\n    fi\n\n    if [ $2 -eq 2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"False\"\n            return 0\n        fi\n\n        if [ $1 -eq 1 ]; then\n            echo \"True\"\n            return 0\n        fi\n    fi\n\n    if [ $2 -eq 3 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"False\"\n            return 0\n        fi\n\n        if [ $1 -eq 1 ]; then\n            echo \"True\"\n            return 0\n       ",
    "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\n        exit 1\n    fi\n\n    local num=$1\n    local start=$2\n    local end=$3\n\n    if [ $start -gt $end ]; then\n        echo \"Start should be less than end\"\n        exit 1\n    fi\n\n    local i=$start\n    while [ $i -le $end ]; do\n        local bit=$(( $num & (1 << $i) ))\n        if [ $bit -eq 0 ]; then\n            echo \"Bit $i is not set\"\n            return 1\n        fi\n        i=$(( $i + 1 ))\n    done\n\n    echo \"All bits are set\"\n    return 0",
    "\tlocal num=$1\n\tlocal start=$2\n\tlocal end=$3\n\tlocal i=0\n\tlocal flag=0\n\tfor (( i=start; i<=end; i++ ))\n\tdo\n\t\tif [ $(( $num & (1 << $i) )) -eq 0 ]\n\t\tthen\n\t\t\tflag=1\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif [ $flag -eq 0 ]\n\tthen\n\t\techo \"All bits are set in the given range\"\n\telse\n\t\techo \"All bits are not set in the given range\"\n\tfi",
    "  local num=$1\n  local start=$2\n  local end=$3\n  local i\n  for ((i=start; i<=end; i++)); do\n    if [[ $((num & (1 << i))) -eq 0 ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "  local num=$1\n  local start=$2\n  local end=$3\n  local i=0\n  local j=0\n  local k=0\n  local result=0\n  local temp=0\n  local temp1=0\n  local temp2=0\n  local temp3=0\n  local temp4=0\n  local temp5=0\n  local temp6=0\n  local temp7=0\n  local temp8=0\n  local temp9=0\n  local temp10=0\n  local temp11=0\n  local temp12=0\n  local temp13=0\n  local temp14=0\n  local temp15=0\n  local temp16=0\n  local temp17=0\n  local temp18=0\n  local temp19=0\n  local temp20=0\n  local temp21=0\n  local temp22=0\n  local temp23=0\n  local temp24=0\n  local temp25=0\n  local temp26=0\n  local temp27=0\n  local temp28=0\n  local temp29=0\n  local temp30=0\n  local temp31=0\n  local temp32=0\n  local temp33=0\n  local temp34=0\n  local temp35=0\n  local temp36=0\n  local temp37=0\n  local temp38=0\n  local temp39=0\n  local temp40=0\n  local temp41=0\n  local temp42=0\n  local temp43=0\n  local temp44=0\n  local temp45=0\n  local temp46=0\n  local temp47=0\n  local temp48=0\n  local temp49=0\n  local temp50=0\n  local temp51=0\n  local temp52=0\n  local temp53=0\n  local temp54=0\n  local temp55=0\n  local temp56=0\n  local temp57=0\n  local temp58=0\n  local temp59=0\n  local temp60=0\n  local temp61=0\n  local temp62=0\n  local temp63=0\n  local temp64=0\n  local temp65=0\n  local temp66=0\n ",
    "\t# Write your code here\n\t# To print results to the standard output you can use print\n\t# Example: print \"Hello world!\"\n\tif [ $1 -lt 0 -o $2 -lt 0 -o $3 -lt 0 ]\n\tthen\n\t\techo \"Please enter positive integers\"\n\t\treturn\n\tfi\n\tif [ $1 -gt $2 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $2 -gt $3 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $1 -eq $2 -a $2 -eq $3 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $1 -eq $2 -a $2 -eq $3 -a $1 -eq 0 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $1 -eq $2 -a $2 -eq $3 -a $1 -eq 1 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $1 -eq $2 -a $2 -eq $3 -a $1 -eq 2 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $1 -eq $2 -a $2 -eq $3 -a $1 -eq 3 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $1 -eq $2 -a $2 -eq $3 -a $1 -eq 4 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $1 -eq $2 -a $2 -eq $3 -a $1 -eq 5 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif [ $1 -eq $2 -a $2 -eq $3 -a $1 -eq 6 ]\n\tthen\n\t\techo \"Please enter the range correctly\"\n\t\treturn\n\tfi\n\tif ["
  ]
}