{
  "name": "mbpp_635_heap_sort",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort the given list.\n#\n# $1 is a space-separated list\nheap_sort() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    heap_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9 2 4 6 8 0\") = \"0 1 2 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 25 58\") = \"14 22 25 25 35 58 65 75 85\" ]]\n    [[ $(candidate \"7 1 9 5\") = \"1 5 7 9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n\n    # Build the heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < len)); do\n            j = 2 * k + 1\n            if ((j < len - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = len - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = tmp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local tmp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < len)); do\n      if ((child + 1 < len && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n      fi\n      parent=$child\n      child=$((2 * parent + 1))\n    done\n  done\n\n  # Sort the heap\n  for ((i = len - 1; i > 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n      fi\n      parent=$child\n      child=$((2 * parent + 1))\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n    for ((i=n-1; i>=0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" $i 0\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local largest\n    local left\n    local right\n\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        largest=$i\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n\n        if [[ $left -lt $length && ${list[$left]} -gt ${list[$largest]} ]]; then\n            largest=$left\n        fi\n\n        if [[ $right -lt $length && ${list[$right]} -gt ${list[$largest]} ]]; then\n            largest=$right\n        fi\n\n        if [[ $largest -ne $i ]]; then\n            temp=${list[$i]}\n            list[$i]=${list[$largest]}\n            list[$largest]=$temp\n        fi\n    done\n\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        for ((j = length / 2 - 1; j >= 0; j--)); do\n            largest=$j\n            left=$((2 * j + 1))\n            right=$((2 * j + 2))\n\n            if [[ $left -lt $i && ${list[$left]} -gt ${list[$largest]} ]]; then\n                largest=$left\n            fi\n\n            if [[ $right -lt $i && ${list[$right]} -gt ${list[$largest]} ]]; then\n                largest=$right\n            fi\n\n            if [[ $largest -ne $j ]]; then\n                temp=${list[$j]}\n                list[$j]=${list[$largest]}\n                list[$largest]=$temp\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=$1\n    local size=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build the heap\n    for ((i=size/2-1; i>=0; i--)); do\n        heapify $list $size $i\n    done\n\n    # One by one extract an element from heap\n    for ((i=size-1; i>=0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify $list $i 0\n    done",
    "  local list=$1\n  local n=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local k\n  local temp\n  local parent\n  local child\n\n  # Build a heap\n  for ((i=n/2; i>=0; i--)); do\n    parent=$i\n    child=$((2*parent+1))\n    while ((child < n)); do\n      if ((child+1 < n && list[child] < list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort\n  for ((i=n-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2*parent+1))\n    while ((child < i)); do\n      if ((child+1 < i && list[child] < list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local list=$1\n    local heap_size=${#list[@]}\n    local i\n    local temp\n    # build a max heap\n    for (( i = heap_size / 2 - 1; i >= 0; i-- )); do\n        heapify $list $i $heap_size\n    done\n    # extract elements from the heap\n    for (( i = heap_size - 1; i >= 0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify $list 0 $(( i - 1 ))\n    done",
    "    local list=$1\n    local size=${#list}\n    local i\n    local tmp\n    local j\n    local k\n    local n\n\n    # Build heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        k = $i\n        while ((2 * k + 1 < size)); do\n            j = 2 * k + 1\n            if ((j < size - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = $tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = size - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = $tmp\n        n = $i\n        k = 0\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = $tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n    local aaaaa\n    local bbbbb\n    local ccccc\n    local d",
    "    local list=($1)\n    local heap_size=${#list[@]}\n    local i\n    for ((i=heap_size/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $heap_size\n    done\n    for ((i=heap_size-1; i>=0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" 0 $i\n    done\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local i=0\n    local j=0\n    local k=0\n    local n=0\n    local tmp=0\n    local heap_size=0\n\n    # Convert space-separated list to array\n    local array=($list)\n\n    # Build a max heap\n    n=${#array[@]}\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heap_size=$n\n        while ((2 * i + 1 < heap_size)); do\n            j=$((2 * i + 1))\n            if ((j + 1 < heap_size && array[j] < array[j + 1])); then\n                j=$((j + 1))\n            fi\n            if ((array[i] < array[j])); then\n                tmp=${array[i]}\n                array[i]=${array[j]}\n                array[j]=$tmp\n            fi\n            i=$j\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${array[0]}\n        array[0]=${array[i]}\n        array[i]=$tmp\n        heap_size=$i\n        k=0\n        while ((2 * k + 1 < heap_size)); do\n            j=$((2 * k + 1))\n            if ((j + 1 < heap_size && array[j] < array[j + 1])); then\n                j=$((j + 1))\n            fi\n            if ((array[k] < array[j])); then\n                tmp=${array[k]}\n                array[k]=${array[j]}\n                array[j]=$tmp\n            fi\n            k=$j\n        done\n    done\n\n    # Convert array to space-separated list\n    list=${array[0]}\n    for ((i = 1; i < n; i++)); do\n        list=\"$list ${array[i]}\"\n    done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build heap\n    for (( i = length / 2 - 1; i >= 0; i-- )); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract element from heap\n    for (( i = length - 1; i > 0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local k=0\n\n    # build heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $len $i\n    done\n\n    # extract elements\n    for ((i = len - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the elements\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n    local n\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < length)); do\n            j = 2 * k + 1\n            if ((j < length - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = length - 1; i > 0; i--)); do\n        temp = list[0]\n        list[0] = list[i]\n        list[i] = temp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the sorted list\n    for ((i = 0; i < length; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "  local list=\"$1\"\n  local n=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local k\n  local temp\n  local heap_size=$n\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" $i $n\n  done\n\n  # One by one extract an element from heap\n  for ((i = n - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=$(echo \"$list\" | cut -d ' ' -f 1)\n    list=$(echo \"$list\" | cut -d ' ' -f 2-)\n    list=\"$list $temp\"\n\n    # call max heapify on the reduced heap\n    heapify \"$list\" 0 $((--heap_size))\n  done\n\n  # Move elements from temp list to original list\n  for ((i = 0; i < n; i++)); do\n    temp=$(echo \"$list\" | cut -d ' ' -f $((n - i)))\n    list=$(echo \"$list\" | cut -d ' ' -f 1-$((n - i - 1)))\n    list=\"$list $temp\"\n  done\n\n  echo \"$list\"",
    "    local list=$1\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify $list $length $i\n    done\n\n    # One by one extract an element from heap\n    for ((i = length - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify $list $i 0\n    done",
    "    local list=($1)\n    local i\n    local j\n    local temp\n    local n=${#list[@]}\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the elements from the heap\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local k=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract the root element\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build a max heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while [[ $child -lt $length ]]; do\n      if [[ $((child + 1)) -lt $length ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while [[ $child -lt $i ]]; do\n      if [[ $((child + 1)) -lt $i ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}"
  ]
}