{
  "name": "mbpp_635_heap_sort",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort the given list.\n#\n# $1 is a space-separated list\nheap_sort() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    heap_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9 2 4 6 8 0\") = \"0 1 2 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 25 58\") = \"14 22 25 25 35 58 65 75 85\" ]]\n    [[ $(candidate \"7 1 9 5\") = \"1 5 7 9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n\n    # Build the heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < len)); do\n            j = 2 * k + 1\n            if ((j < len - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = len - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = tmp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local tmp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < len)); do\n      if ((child + 1 < len && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n      fi\n      parent=$child\n      child=$((2 * parent + 1))\n    done\n  done\n\n  # Sort the heap\n  for ((i = len - 1; i > 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n      fi\n      parent=$child\n      child=$((2 * parent + 1))\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n    for ((i=n-1; i>=0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" $i 0\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local largest\n    local left\n    local right\n\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        largest=$i\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n\n        if [[ $left -lt $length && ${list[$left]} -gt ${list[$largest]} ]]; then\n            largest=$left\n        fi\n\n        if [[ $right -lt $length && ${list[$right]} -gt ${list[$largest]} ]]; then\n            largest=$right\n        fi\n\n        if [[ $largest -ne $i ]]; then\n            temp=${list[$i]}\n            list[$i]=${list[$largest]}\n            list[$largest]=$temp\n        fi\n    done\n\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        for ((j = length / 2 - 1; j >= 0; j--)); do\n            largest=$j\n            left=$((2 * j + 1))\n            right=$((2 * j + 2))\n\n            if [[ $left -lt $i && ${list[$left]} -gt ${list[$largest]} ]]; then\n                largest=$left\n            fi\n\n            if [[ $right -lt $i && ${list[$right]} -gt ${list[$largest]} ]]; then\n                largest=$right\n            fi\n\n            if [[ $largest -ne $j ]]; then\n                temp=${list[$j]}\n                list[$j]=${list[$largest]}\n                list[$largest]=$temp\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=$1\n    local size=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build the heap\n    for ((i=size/2-1; i>=0; i--)); do\n        heapify $list $size $i\n    done\n\n    # One by one extract an element from heap\n    for ((i=size-1; i>=0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify $list $i 0\n    done",
    "  local list=$1\n  local n=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local k\n  local temp\n  local parent\n  local child\n\n  # Build a heap\n  for ((i=n/2; i>=0; i--)); do\n    parent=$i\n    child=$((2*parent+1))\n    while ((child < n)); do\n      if ((child+1 < n && list[child] < list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort\n  for ((i=n-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2*parent+1))\n    while ((child < i)); do\n      if ((child+1 < i && list[child] < list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local list=$1\n    local heap_size=${#list[@]}\n    local i\n    local temp\n    # build a max heap\n    for (( i = heap_size / 2 - 1; i >= 0; i-- )); do\n        heapify $list $i $heap_size\n    done\n    # extract elements from the heap\n    for (( i = heap_size - 1; i >= 0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify $list 0 $(( i - 1 ))\n    done",
    "    local list=$1\n    local size=${#list}\n    local i\n    local tmp\n    local j\n    local k\n    local n\n\n    # Build heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        k = $i\n        while ((2 * k + 1 < size)); do\n            j = 2 * k + 1\n            if ((j < size - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = $tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = size - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = $tmp\n        n = $i\n        k = 0\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = $tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n    local aaaaa\n    local bbbbb\n    local ccccc\n    local d",
    "    local list=($1)\n    local heap_size=${#list[@]}\n    local i\n    for ((i=heap_size/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $heap_size\n    done\n    for ((i=heap_size-1; i>=0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" 0 $i\n    done\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local i=0\n    local j=0\n    local k=0\n    local n=0\n    local tmp=0\n    local heap_size=0\n\n    # Convert space-separated list to array\n    local array=($list)\n\n    # Build a max heap\n    n=${#array[@]}\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heap_size=$n\n        while ((2 * i + 1 < heap_size)); do\n            j=$((2 * i + 1))\n            if ((j + 1 < heap_size && array[j] < array[j + 1])); then\n                j=$((j + 1))\n            fi\n            if ((array[i] < array[j])); then\n                tmp=${array[i]}\n                array[i]=${array[j]}\n                array[j]=$tmp\n            fi\n            i=$j\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${array[0]}\n        array[0]=${array[i]}\n        array[i]=$tmp\n        heap_size=$i\n        k=0\n        while ((2 * k + 1 < heap_size)); do\n            j=$((2 * k + 1))\n            if ((j + 1 < heap_size && array[j] < array[j + 1])); then\n                j=$((j + 1))\n            fi\n            if ((array[k] < array[j])); then\n                tmp=${array[k]}\n                array[k]=${array[j]}\n                array[j]=$tmp\n            fi\n            k=$j\n        done\n    done\n\n    # Convert array to space-separated list\n    list=${array[0]}\n    for ((i = 1; i < n; i++)); do\n        list=\"$list ${array[i]}\"\n    done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build heap\n    for (( i = length / 2 - 1; i >= 0; i-- )); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract element from heap\n    for (( i = length - 1; i > 0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local k=0\n\n    # build heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $len $i\n    done\n\n    # extract elements\n    for ((i = len - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the elements\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n    local n\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < length)); do\n            j = 2 * k + 1\n            if ((j < length - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = length - 1; i > 0; i--)); do\n        temp = list[0]\n        list[0] = list[i]\n        list[i] = temp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the sorted list\n    for ((i = 0; i < length; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "  local list=\"$1\"\n  local n=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local k\n  local temp\n  local heap_size=$n\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" $i $n\n  done\n\n  # One by one extract an element from heap\n  for ((i = n - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=$(echo \"$list\" | cut -d ' ' -f 1)\n    list=$(echo \"$list\" | cut -d ' ' -f 2-)\n    list=\"$list $temp\"\n\n    # call max heapify on the reduced heap\n    heapify \"$list\" 0 $((--heap_size))\n  done\n\n  # Move elements from temp list to original list\n  for ((i = 0; i < n; i++)); do\n    temp=$(echo \"$list\" | cut -d ' ' -f $((n - i)))\n    list=$(echo \"$list\" | cut -d ' ' -f 1-$((n - i - 1)))\n    list=\"$list $temp\"\n  done\n\n  echo \"$list\"",
    "    local list=$1\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify $list $length $i\n    done\n\n    # One by one extract an element from heap\n    for ((i = length - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify $list $i 0\n    done",
    "    local list=($1)\n    local i\n    local j\n    local temp\n    local n=${#list[@]}\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the elements from the heap\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local k=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract the root element\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build a max heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while [[ $child -lt $length ]]; do\n      if [[ $((child + 1)) -lt $length ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while [[ $child -lt $i ]]; do\n      if [[ $((child + 1)) -lt $i ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local heap_size\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heap_size=$n\n    while true; do\n      k=$i\n      j=$((2 * k + 1))\n      if [ $j -lt $heap_size ] && [ ${list[j]} -gt ${list[k]} ]; then\n        k=$j\n      fi\n      if [ $((j + 1)) -lt $heap_size ] && [ ${list[j + 1]} -gt ${list[k]} ]; then\n        k=$((j + 1))\n      fi\n      if [ $k -eq $i ]; then\n        break\n      fi\n      temp=${list[i]}\n      list[i]=${list[k]}\n      list[k]=$temp\n      i=$k\n    done\n  done\n\n  # One by one extract an element from heap\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heap_size=$((heap_size - 1))\n    k=0\n    while true; do\n      j=$((2 * k + 1))\n      if [ $j -lt $heap_size ] && [ ${list[j]} -gt ${list[k]} ]; then\n        k=$j\n      fi\n      if [ $((j + 1)) -lt $heap_size ] && [ ${list[j + 1]} -gt ${list[k]} ]; then\n        k=$((j + 1))\n      fi\n      if [ $k -eq $i ]; then\n        break\n      fi\n      temp=${list[i]}\n      list[i]=${list[k]}\n      list[k]=$temp\n      i=$k\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local tmp\n  local k\n  local l\n  local r\n  local largest\n\n  # Build heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    k=$i\n    tmp=${list[$i]}\n    while true; do\n      l=$((2 * k + 1))\n      r=$((2 * k + 2))\n      if [[ $l -lt $len && ${list[$l]} -gt $tmp ]]; then\n        largest=$l\n      else\n        largest=$k\n      fi\n      if [[ $r -lt $len && ${list[$r]} -gt ${list[$largest]} ]]; then\n        largest=$r\n      fi\n      if [[ $largest -eq $k ]]; then\n        break\n      fi\n      list[$k]=${list[$largest]}\n      k=$largest\n    done\n    list[$k]=$tmp\n  done\n\n  # Sort\n  for ((i = len - 1; i > 0; i--)); do\n    tmp=${list[$i]}\n    list[$i]=${list[0]}\n    list[0]=$tmp\n    k=0\n    while true; do\n      l=$((2 * k + 1))\n      r=$((2 * k + 2))\n      if [[ $l -lt $i && ${list[$l]} -gt ${list[$k]} ]]; then\n        largest=$l\n      else\n        largest=$k\n      fi\n      if [[ $r -lt $i && ${list[$r]} -gt ${list[$largest]} ]]; then\n        largest=$r\n      fi\n      if [[ $largest -eq $k ]]; then\n        break\n      fi\n      tmp=${list[$largest]}\n      list[$largest]=${list[$k]}\n      list[$k]=$tmp\n      k=$largest\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n\n  local temp\n  local heap_size\n\n  # Build a max heap\n  for ((i = ${#list[@]} / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i ${#list[@]}\n  done\n\n  # Heap sort\n  for ((i = ${#list[@]} - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "  local list=$1\n  local length=$(echo $list | wc -w)\n  local i\n  local j\n  local temp\n  local parent\n  local child\n  local child_index\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$(echo $list | cut -d' ' -f$((i + 1)))\n    child_index=$((i * 2 + 1))\n    child=$(echo $list | cut -d' ' -f$((child_index + 1)))\n    while [[ $child_index -lt $length ]]; do\n      if [[ $child_index -lt $((length - 1)) ]]; then\n        if [[ $child -lt $(echo $list | cut -d' ' -f$((child_index + 2))) ]]; then\n          child_index=$((child_index + 1))\n          child=$(echo $list | cut -d' ' -f$((child_index + 1)))\n        fi\n      fi\n      if [[ $parent -lt $child ]]; then\n        list=$(echo $list | sed \"s/\\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\)/\\1 \\3 \\2 \\4 \\5/\")\n        list=$(echo $list | sed \"s/\\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\)/\\1 \\3 \\2 \\4 \\5/\")\n        list=$(echo $list | sed \"s/\\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\)/\\1 \\3 \\2 \\4 \\5/\")\n        list=$(echo $list | sed \"s/\\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\)/\\1 \\3 \\2 \\4 \\5/\")\n        list=$(echo $list | sed \"s/\\([^ ]*\\) \\([^ ]*\\) \\([^ ]*\\) \\([^ ]",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the root element\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local heap_size=$n\n\n    for ((i = n/2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((--heap_size))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n\n    # build heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # sort\n    for ((i = n - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = tmp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build a max heap\n    for ((i = n/2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # One by one extract an element from heap\n    for ((i = n - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" $((i)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i temp\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)) do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = n - 1; i > 0; i--)); do\n        temp = list[0]\n        list[0] = list[i]\n        list[i] = temp\n        k = 0\n        while ((2 * k + 1 < i)) do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Extract the root and heapify\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local length=$(echo \"$list\" | wc -w)\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" $i $length\n  done\n\n  # Extract the root element and heapify the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    list=$(swap \"$list\" 0 $i)\n    heapify \"$list\" 0 $i\n  done\n\n  echo \"$list\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local temp=0\n    local n=${#list[@]}\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        while true; do\n            child=$((parent * 2 + 1))\n            if [[ $child -ge $length ]]; then\n                break\n            fi\n            if [[ $((child + 1)) -lt $length ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n                child=$((child + 1))\n            fi\n            if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n                temp=${list[$parent]}\n                list[$parent]=${list[$child]}\n                list[$child]=$temp\n                parent=$child\n            else\n                break\n            fi\n        done\n    done\n    # Sort the heap\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        parent=0\n        while true; do\n            child=$((parent * 2 + 1))\n            if [[ $child -ge $i ]]; then\n                break\n            fi\n            if [[ $((child + 1)) -lt $i ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n                child=$((child + 1))\n            fi\n            if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n                temp=${list[$parent]}\n                list[$parent]=${list[$child]}\n                list[$child]=$temp\n                parent=$child\n            else\n                break\n            fi\n        done\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local tmp\n\n    # Build the max heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $len\n    done\n\n    # One by one extract an element from heap\n    for ((i = len - 1; i >= 0; i--)); do\n        # Move current root to end\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local tmp\n  local len=${#list[@]}\n  for ((i=len/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $len\n  done\n  for ((i=len-1; i>=0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$tmp\n    heapify \"${list[@]}\" 0 $((i-1))\n  done\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local heap_size=${#list[@]}\n  local temp=0\n\n  # Build the heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $heap_size\n  done\n\n  # Extract elements from the heap\n  for ((i = heap_size - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i - 1))\n  done\n\n  echo \"${list[@]}\"",
    "    local list=$1\n    local size=${#list[@]}\n    local i\n    local j\n    local temp\n    local left\n    local right\n    local largest\n\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify $list $size $i\n    done\n\n    for ((i = size - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        heapify $list $i 0\n    done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        k=$i\n        temp=${list[$i]}\n        while ((k * 2 + 1 < length)); do\n            l=$k\n            m=$((k * 2 + 1))\n            if ((m + 1 < length && list[m] < list[m + 1])); then\n                m=$((m + 1))\n            fi\n            if ((list[m] > temp)); then\n                list[$l]=${list[$m]}\n                k=$m\n            else\n                break\n            fi\n        done\n        list[$k]=$temp\n    done\n\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        k=0\n        while ((k * 2 + 1 < i)); do\n            l=$k\n            m=$((k * 2 + 1))\n            if ((m + 1 < i && list[m] < list[m + 1])); then\n                m=$((m + 1))\n            fi\n            if ((list[m] > list[l])); then\n                n=${list[$l]}\n                list[$l]=${list[$m]}\n                list[$m]=$n\n                k=$m\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=$1\n    local heap_size=${#list}\n    local i\n    local temp\n    local temp_index\n    local temp_index_left\n    local temp_index_right\n    local temp_index_largest\n\n    build_max_heap \"$list\"\n\n    for (( i=$heap_size-1; i>=1; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$((heap_size-1))\n        max_heapify \"$list\" 0 $heap_size\n    done",
    "  local list=($1)\n  local n=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Heap sort\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=$1\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        tmp=${list[$i]}\n        while ((2*k+1<len)); do\n            j=$((2*k+1))\n            if ((j<len-1)) && ((list[j]<list[j+1])); then\n                ((j++))\n            fi\n            if ((tmp>=list[j])); then\n                break\n            else\n                list[$k]=${list[$j]}\n                ((k=j))\n            fi\n        done\n        list[$k]=$tmp\n    done\n\n    for ((i=len-1; i>0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$tmp\n        k=0\n        while ((2*k+1<i)); do\n            j=$((2*k+1))\n            if ((j<i-1)) && ((list[j]<list[j+1])); then\n                ((j++))\n            fi\n            if ((list[k]>=list[j])); then\n                break\n            else\n                tmp=${list[$k]}\n                list[$k]=${list[$j]}\n                list[$j]=$tmp\n                ((k=j))\n            fi\n        done\n    done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while ((child < length)); do\n            if ((child + 1 < length)) && ((list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        parent=0\n        child=$((2 * parent + 1))\n        while ((child < i)); do\n            if ((child + 1 < i)) && ((list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=($1)\n    local i\n    local j\n    local temp\n    local heap_size=${#list[@]}\n\n    # Build a max heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $heap_size\n    done\n\n    # Heap sort\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify $i $n \"${list[@]}\"\n    done\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify 0 $i \"${list[@]}\"\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build a max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract elements from the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n\n  # Build the heap.\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap.\n  for ((i = n - 1; i > 0; i--)); do\n    temp = list[0]\n    list[0] = list[i]\n    list[i] = temp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n\n  # Build heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $len $i\n  done\n\n  # Heap sort\n  for ((i = len - 1; i >= 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local left=0\n    local right=0\n    local largest=0\n\n    # Build a max heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $len $i\n    done\n\n    # One by one extract an element from heap\n    for ((i = len - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local n=${#list[@]}\n    local temp\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Heap sort\n    for ((i = n - 1; i > 0; i--)); do\n        temp = list[0]\n        list[0] = list[i]\n        list[i] = temp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap.\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    while true; do\n      child=$((2 * parent + 1))\n      if [[ $child -lt $length && ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ $child -lt $length && ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap.\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    parent=0\n    while true; do\n      child=$((2 * parent + 1))\n      if [[ $child -lt $i && ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ $child -lt $i && ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n      else\n        break\n      fi\n    done\n  done\n\n  # Print the result.\n  for ((i = 0; i < length; i++)); do\n    echo -n \"${list[$i]} \"\n  done\n  echo",
    "  local list=\"$1\"\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local n=0\n  local len=0\n\n  len=$(echo \"$list\" | wc -w)\n  n=$((len / 2))\n\n  # Build the heap\n  for ((i = n; i >= 0; i--)); do\n    heapify \"$list\" $i $len\n  done\n\n  # Extract the elements from the heap\n  for ((i = len - 1; i >= 0; i--)); do\n    temp=$(echo \"$list\" | awk '{print $1}')\n    list=$(echo \"$list\" | awk '{$1 = \"\"; print $0}' | sed 's/^ *//')\n    list=\"$list $temp\"\n    heapify \"$list\" 0 $i\n  done\n\n  echo \"$list\"",
    "    local list=($1)\n    local i\n    local j\n    local temp\n    local n=${#list[@]}\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local largest\n\n  # Build the heap\n  for ((i = n/2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Extract the elements from the heap\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i-1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # Extract the root element\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local k=0\n    local t=0\n    local tmp=0\n\n    # Build the heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $len\n    done\n\n    # Extract the root and heapify\n    for ((i = len - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n\n  local temp\n\n  # Build the heap.\n  for ((i = ${#list[@]} / 2 - 1; i >= 0; i--)); do\n    k = $i\n    temp = ${list[$i]}\n    while ((2 * k + 1 < ${#list[@]})); do\n      j = $((2 * k + 1))\n      if ((j < ${#list[@]} - 1 && list[$j] < list[$((j + 1))])); then\n        ((j++))\n      fi\n      if ((temp >= list[$j])); then\n        break\n      fi\n      list[$k] = ${list[$j]}\n      ((k = j))\n    done\n    list[$k] = $temp\n  done\n\n  # Sort the heap.\n  for ((i = ${#list[@]} - 1; i > 0; i--)); do\n    temp = ${list[$i]}\n    list[$i] = ${list[0]}\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = $((2 * k + 1))\n      if ((j < i - 1 && list[$j] < list[$((j + 1))])); then\n        ((j++))\n      fi\n      if ((temp >= list[$j])); then\n        break\n      fi\n      list[$k] = ${list[$j]}\n      ((k = j))\n    done\n    list[$k] = $temp\n  done\n\n  # Print the sorted list.\n  for ((i = 0; i < ${#list[@]}; i++)); do\n    echo ${list[$i]}\n  done",
    "  local -a list=($1)\n  local -i n=${#list[@]}\n  local -i i\n  local -i j\n  local -i k\n  local -i t\n  local -i largest\n\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        t = list[k]\n        list[k] = list[j]\n        list[j] = t\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  for ((i = n - 1; i > 0; i--)); do\n    t = list[0]\n    list[0] = list[i]\n    list[i] = t\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        t = list[k]\n        list[k] = list[j]\n        list[j] = t\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[*]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    while true; do\n      child=$((2 * parent + 1))\n      if [[ $child -ge $length ]]; then\n        break\n      fi\n      if [[ $child -lt $((length - 1)) && ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -ge ${list[$child]} ]]; then\n        break\n      fi\n      temp=${list[$parent]}\n      list[$parent]=${list[$child]}\n      list[$child]=$temp\n      parent=$child\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    parent=0\n    while true; do\n      child=$((2 * parent + 1))\n      if [[ $child -ge $i ]]; then\n        break\n      fi\n      if [[ $child -lt $((i - 1)) && ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -ge ${list[$child]} ]]; then\n        break\n      fi\n      temp=${list[$parent]}\n      list[$parent]=${list[$child]}\n      list[$child]=$temp\n      parent=$child\n    done\n  done\n\n  # Print the result\n  for ((i = 0; i < length; i++)); do\n    echo ${list[$i]}\n  done",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i=n/2-1; i>=0; i--)); do\n    k=i\n    temp=${list[k]}\n    while ((2*k+1<n)); do\n      parent=k\n      child=$((2*k+1))\n      if ((child<n-1)) && ((list[child]<list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((temp>=list[child])); then\n        break\n      fi\n      list[parent]=${list[child]}\n      k=child\n    done\n    list[k]=$temp\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    temp=${list[i]}\n    list[i]=${list[0]}\n    k=0\n    while ((2*k+1<i)); do\n      parent=k\n      child=$((2*k+1))\n      if ((child<i-1)) && ((list[child]<list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((temp>=list[child])); then\n        break\n      fi\n      list[parent]=${list[child]}\n      k=child\n    done\n    list[k]=$temp\n  done\n\n  echo \"${list[@]}\"",
    "\tlocal list=($1)\n\tlocal length=${#list[@]}\n\tlocal i\n\tlocal j\n\tlocal temp\n\tlocal k\n\n\t# Build a max heap\n\tfor ((i=length/2-1; i>=0; i--)); do\n\t\theapify \"${list[@]}\" $i $length\n\tdone\n\n\t# Extract the max element and place it at the end of the array\n\tfor ((i=length-1; i>=0; i--)); do\n\t\ttemp=${list[0]}\n\t\tlist[0]=${list[i]}\n\t\tlist[i]=$temp\n\t\theapify \"${list[@]}\" 0 $i\n\tdone\n\n\t# Print the sorted list\n\tfor ((i=0; i<length; i++)); do\n\t\techo -n \"${list[i]} \"\n\tdone\n\techo",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local temp\n  local k\n  local l\n  local m\n  local n\n\n  # Build the heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    k=$i\n    temp=${list[$i]}\n\n    while ((k < len / 2)); do\n      j=$((2 * k + 1))\n      if ((j < len - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if [[ \"${list[j]}\" -le \"$temp\" ]]; then\n        break\n      fi\n      list[$k]=${list[$j]}\n      ((k = j))\n    done\n    list[$k]=$temp\n  done\n\n  # Sort the heap\n  for ((i = len - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    k=0\n    while ((k < i / 2)); do\n      j=$((2 * k + 1))\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if [[ \"${list[j]}\" -le \"${list[$k]}\" ]]; then\n        break\n      fi\n      temp=${list[$k]}\n      list[$k]=${list[$j]}\n      list[$j]=$temp\n      ((k = j))\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=\"$1\"\n    local i\n    local j\n    local temp\n    local length=${#list[@]}\n    local parent\n    local child\n    local parent_index\n    local child_index\n\n    # Build max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        parent_index=$i\n        parent=${list[$i]}\n        while [[ $parent_index -lt $length ]]; do\n            child_index=$((parent_index * 2 + 1))\n            if [[ $child_index -lt $length ]]; then\n                child=${list[$child_index]}\n                if [[ $((child_index + 1)) -lt $length ]]; then\n                    if [[ ${list[$((child_index + 1))]} -gt $child ]]; then\n                        child=${list[$((child_index + 1))]}\n                        child_index=$((child_index + 1))\n                    fi\n                fi\n                if [[ $child -gt $parent ]]; then\n                    list[$parent_index]=$child\n                    list[$child_index]=$parent\n                    parent_index=$child_index\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        parent_index=0\n        parent=${list[0]}\n        while [[ $parent_index -lt $i ]]; do\n            child_index=$((parent_index * 2 + 1))\n            if [[ $child_index -lt $i ]]; then\n                child=${list[$child_index]}\n                if [[ $((child_index + 1)) -lt $i ]]; then\n                    if [[ ${list[$((child_index + 1))]} -gt $child ]]; then\n                        child=${list[$((child_index + 1))]}\n                        child_index=$((child_index + 1))\n                    fi\n                fi\n                if [[ $child -gt $parent ]]; then\n",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local heap_size=0\n    local left=0\n    local right=0\n    local largest=0\n\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heap_size=$length\n        while ((1)); do\n            left=$((2 * i + 1))\n            right=$((2 * i + 2))\n            largest=$i\n            if ((left < heap_size && list[left] > list[largest])); then\n                largest=$left\n            fi\n            if ((right < heap_size && list[right] > list[largest])); then\n                largest=$right\n            fi\n            if ((largest == i)); then\n                break\n            fi\n            temp=${list[i]}\n            list[i]=${list[largest]}\n            list[largest]=$temp\n            i=$largest\n        done\n    done\n\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$i\n        j=0\n        while ((1)); do\n            left=$((2 * j + 1))\n            right=$((2 * j + 2))\n            largest=$j\n            if ((left < heap_size && list[left] > list[largest])); then\n                largest=$left\n            fi\n            if ((right < heap_size && list[right] > list[largest])); then\n                largest=$right\n            fi\n            if ((largest == j)); then\n                break\n            fi\n            temp=${list[j]}\n            list[j]=${list[largest]}\n            list[largest]=$temp\n            j=$largest\n        done\n    done\n\n    echo \"${list[*]}\"",
    "  local list=$1\n  local heap_size=${#list[@]}\n  local i\n  local temp\n  build_max_heap $list\n  for (( i=heap_size-1; i>=1; i-- )); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heap_size=$((heap_size-1))\n    max_heapify $list 0 $heap_size\n  done",
    "  local list=\"$1\"\n  local sorted=()\n  local heap=()\n  local heap_size=0\n  local i=0\n\n  # Build a max heap\n  for item in $list; do\n    heap[$heap_size]=$item\n    ((heap_size++))\n    heapify_up $heap_size\n  done\n\n  # Extract the max element from the heap and put it in the sorted list\n  while ((heap_size > 0)); do\n    sorted[$i]=${heap[0]}\n    ((i++))\n    ((heap_size--))\n    heap[0]=${heap[$heap_size]}\n    heapify_down $heap_size\n  done\n\n  echo \"${sorted[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract elements from the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=$1\n    local i=0\n    local j=0\n    local k=0\n    local n=0\n    local tmp=0\n\n    # Get the length of the list\n    n=$(echo $list | wc -w)\n\n    # Build the heap\n    for ((i = n / 2; i >= 0; i--)); do\n        heapify $list $i $n\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i >= 0; i--)); do\n        tmp=$(echo $list | cut -d ' ' -f $i)\n        list=$(echo $list | cut -d ' ' -f -$i | sed 's/\\s*$//')\n        list=\"$list $(echo $list | cut -d ' ' -f $n)\"\n        list=$(echo $list | cut -d ' ' -f -$n | sed 's/\\s*$//')\n        list=\"$list $tmp\"\n        heapify $list 0 $i\n    done\n\n    echo $list",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i=len/2-1; i>=0; i--)); do\n    parent=$i\n    while true; do\n      child=$((2*parent+1))\n      if [[ $child -ge $len ]]; then\n        break\n      fi\n      if [[ $child -lt $((len-1)) && ${list[$child]} -lt ${list[$((child+1))]} ]]; then\n        child=$((child+1))\n      fi\n      if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i=len-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    parent=0\n    while true; do\n      child=$((2*parent+1))\n      if [[ $child -ge $i ]]; then\n        break\n      fi\n      if [[ $child -lt $((i-1)) && ${list[$child]} -lt ${list[$((child+1))]} ]]; then\n        child=$((child+1))\n      fi\n      if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n\n    # Build a max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"$i\" \"$length\"\n    done\n\n    # Extract the root element and heapify the remaining elements\n    for ((i = length - 1; i > 0; i--)); do\n        swap \"$i\" \"0\"\n        heapify \"0\" \"$i\"\n    done",
    "  local list=\"$1\"\n  local i\n  local j\n  local k\n  local temp\n  local size\n  local heap_size\n  local left\n  local right\n  local largest\n\n  size=${#list[@]}\n  heap_size=$size\n\n  # Build a max heap\n  for ((i=size/2-1; i>=0; i--)); do\n    k=$i\n    while true; do\n      left=$((2*k+1))\n      right=$((2*k+2))\n      largest=$k\n      if [[ $left -lt $heap_size && ${list[$left]} -gt ${list[$largest]} ]]; then\n        largest=$left\n      fi\n      if [[ $right -lt $heap_size && ${list[$right]} -gt ${list[$largest]} ]]; then\n        largest=$right\n      fi\n      if [[ $largest -eq $k ]]; then\n        break\n      fi\n      temp=${list[$k]}\n      list[$k]=${list[$largest]}\n      list[$largest]=$temp\n      k=$largest\n    done\n  done\n\n  # One by one extract an element from heap\n  for ((i=$size-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    heap_size=$((heap_size-1))\n    k=0\n    while true; do\n      left=$((2*k+1))\n      right=$((2*k+2))\n      largest=$k\n      if [[ $left -lt $heap_size && ${list[$left]} -gt ${list[$largest]} ]]; then\n        largest=$left\n      fi\n      if [[ $right -lt $heap_size && ${list[$right]} -gt ${list[$largest]} ]]; then\n        largest=$right\n      fi\n      if [[ $largest -eq $k ]]; then\n        break\n      fi\n      temp=${list[$k]}\n      list[$k]=${list[$largest]}\n      list[$largest]=$temp\n     ",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i=1; i<n; i++))\n  do\n    j=$i\n    while ((j>0))\n    do\n      k=$(((j-1)/2))\n      if ((list[k]<list[j]))\n      then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n      fi\n      j=$k\n    done\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--))\n  do\n    temp=${list[i]}\n    list[i]=${list[0]}\n    list[0]=$temp\n    parent=0\n    while ((1))\n    do\n      child=$((2*parent+1))\n      if ((child>=i))\n      then\n        break\n      fi\n      if ((child+1<i)) && ((list[child]<list[child+1]))\n      then\n        ((child++))\n      fi\n      if ((list[parent]<list[child]))\n      then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n      else\n        break\n      fi\n      parent=$child\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local i\n  local j\n  local temp\n  local size=${#list[@]}\n  local parent\n  local child\n\n  # Build a max heap\n  for ((i = size / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while [[ $child -lt $size ]]; do\n      if [[ $child -lt $((size - 1)) ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -ge ${list[$child]} ]]; then\n        break\n      fi\n      temp=${list[$parent]}\n      list[$parent]=${list[$child]}\n      list[$child]=$temp\n      parent=$child\n      child=$((2 * parent + 1))\n    done\n  done\n\n  # Sort the heap\n  for ((i = size - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n\n    parent=0\n    child=$((2 * parent + 1))\n    while [[ $child -lt $i ]]; do\n      if [[ $child -lt $((i - 1)) ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -ge ${list[$child]} ]]; then\n        break\n      fi\n      temp=${list[$parent]}\n      list[$parent]=${list[$child]}\n      list[$child]=$temp\n      parent=$child\n      child=$((2 * parent + 1))\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=\"$1\"\n    local heap_size=${#list[@]}\n    local i\n    local j\n    local temp\n\n    build_max_heap \"$list\"\n\n    for ((i=$heap_size-1; i>0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$((heap_size-1))\n        max_heapify \"$list\" 0 $heap_size\n    done",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the elements\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=$1\n  local tmp_file=$(mktemp)\n  local sorted_list=\"\"\n\n  # Write the list to a temporary file\n  echo \"$list\" > $tmp_file\n\n  # Sort the file\n  sort $tmp_file > $tmp_file.sorted\n\n  # Read the sorted list\n  sorted_list=$(cat $tmp_file.sorted)\n\n  # Remove the temporary files\n  rm $tmp_file $tmp_file.sorted\n\n  # Return the sorted list\n  echo \"$sorted_list\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $length\n  done\n  for ((i = length - 1; i >= 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" 0 $i\n  done\n  echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local heap_size=${#list}\n    local i=0\n    local j=0\n    local temp=0\n    local temp_index=0\n    local temp_index2=0\n    local temp_index3=0\n    local temp_index4=0\n    local temp_index5=0\n    local temp_index6=0\n    local temp_index7=0\n    local temp_index8=0\n    local temp_index9=0\n    local temp_index10=0\n    local temp_index11=0\n    local temp_index12=0\n    local temp_index13=0\n    local temp_index14=0\n    local temp_index15=0\n    local temp_index16=0\n    local temp_index17=0\n    local temp_index18=0\n    local temp_index19=0\n    local temp_index20=0\n    local temp_index21=0\n    local temp_index22=0\n    local temp_index23=0\n    local temp_index24=0\n    local temp_index25=0\n    local temp_index26=0\n    local temp_index27=0\n    local temp_index28=0\n    local temp_index29=0\n    local temp_index30=0\n    local temp_index31=0\n    local temp_index32=0\n    local temp_index33=0\n    local temp_index34=0\n    local temp_index35=0\n    local temp_index36=0\n    local temp_index37=0\n    local temp_index38=0\n    local temp_index39=0\n    local temp_index40=0\n    local temp_index41=0\n    local temp_index42=0\n    local temp_index43=0\n    local temp_index44=0\n    local temp_index45=0\n    local temp_index46=0\n    local temp_index47=0\n    local temp_index48=0\n    local temp_index49=0\n    local temp_index50=0\n    local temp_index51=0\n    local temp_index52=0\n    local temp_index53=",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local largest\n    local left\n    local right\n\n    # Build max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        largest=$i\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n\n        if [[ $left -lt $length && ${list[$left]} -gt ${list[$largest]} ]]; then\n            largest=$left\n        fi\n\n        if [[ $right -lt $length && ${list[$right]} -gt ${list[$largest]} ]]; then\n            largest=$right\n        fi\n\n        if [[ $largest -ne $i ]]; then\n            temp=${list[$i]}\n            list[$i]=${list[$largest]}\n            list[$largest]=$temp\n        fi\n    done\n\n    # One by one extract an element from heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        # Heapify root element\n        largest=0\n        left=$((2 * largest + 1))\n        right=$((2 * largest + 2))\n\n        while [[ $left -lt $i ]]; do\n            if [[ $right -lt $i && ${list[$right]} -gt ${list[$left]} ]]; then\n                largest=$right\n            else\n                largest=$left\n            fi\n\n            if [[ ${list[$largest]} -gt ${list[$((largest / 2))]} ]]; then\n                temp=${list[$largest]}\n                list[$largest]=${list[$((largest / 2))]}\n                list[$((largest / 2))]=$temp\n            else\n                break\n            fi\n\n            left=$((2 * largest + 1))\n            right=$((2 * largest + 2))\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n\n  local tmp\n\n  # Build a max-heap\n  for ((i = ${#list[@]} / 2 - 1; i >= 0; i--)); do\n    k = $i\n    while true; do\n      j = $((2 * k + 1))\n      if ((j >= ${#list[@]})); then\n        break\n      fi\n      if ((j + 1 < ${#list[@]})) && ((list[j] < list[j + 1])); then\n        j = $((j + 1))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = ${list[k]}\n        list[k] = ${list[j]}\n        list[j] = $tmp\n        k = $j\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort\n  for ((i = ${#list[@]} - 1; i > 0; i--)); do\n    tmp = ${list[0]}\n    list[0] = ${list[i]}\n    list[i] = $tmp\n    k = 0\n    while true; do\n      j = $((2 * k + 1))\n      if ((j >= i)); then\n        break\n      fi\n      if ((j + 1 < i)) && ((list[j] < list[j + 1])); then\n        j = $((j + 1))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = ${list[k]}\n        list[k] = ${list[j]}\n        list[j] = $tmp\n        k = $j\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while [[ $child -lt $length ]]; do\n      if [[ $((child + 1)) -lt $length ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while [[ $child -lt $i ]]; do\n      if [[ $((child + 1)) -lt $i ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=\"$1\"\n  local heap_size=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local temp\n\n  # Build a max heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" $heap_size $i\n  done\n\n  # One by one extract an element from heap\n  for ((i = heap_size - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=$(echo \"$list\" | cut -d ' ' -f 1)\n    list=$(echo \"$list\" | cut -d ' ' -f 2-)\n    list=\"$list $temp\"\n\n    # call max heapify on the reduced heap\n    heapify \"$list\" $i 0\n  done\n\n  echo \"$list\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n  local left\n  local right\n\n  # Build max heap\n  for ((i=n/2-1; i>=0; i--)); do\n    largest=$i\n    left=$((2*i+1))\n    right=$((2*i+2))\n\n    if [[ $left -lt $n && ${list[$left]} -gt ${list[$largest]} ]]; then\n      largest=$left\n    fi\n\n    if [[ $right -lt $n && ${list[$right]} -gt ${list[$largest]} ]]; then\n      largest=$right\n    fi\n\n    if [[ $largest -ne $i ]]; then\n      temp=${list[$i]}\n      list[$i]=${list[$largest]}\n      list[$largest]=$temp\n    fi\n  done\n\n  # Heap sort\n  for ((i=n-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n\n    # Heapify root element\n    largest=0\n    left=$((2*largest+1))\n    right=$((2*largest+2))\n\n    while [[ $left -lt $i ]]; do\n      if [[ $right -lt $i && ${list[$right]} -gt ${list[$left]} ]]; then\n        largest=$right\n      else\n        largest=$left\n      fi\n\n      if [[ ${list[$largest]} -gt ${list[$((largest/2))]} ]]; then\n        temp=${list[$((largest/2))]}\n        list[$((largest/2))]=${list[$largest]}\n        list[$largest]=$temp\n      else\n        break\n      fi\n\n      left=$((2*largest+1))\n      right=$((2*largest+2))\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=\"$1\"\n    local len=$(echo \"$list\" | wc -w)\n    local i=0\n    local j=0\n    local tmp=0\n    local heap_size=$len\n    local left=0\n    local right=0\n    local largest=0\n\n    # Build a max heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" $i $len\n    done\n\n    # One by one extract an element from heap\n    for ((i = len - 1; i >= 0; i--)); do\n        # Move current root to end\n        tmp=$(echo \"$list\" | cut -d ' ' -f 1)\n        list=$(echo \"$list\" | cut -d ' ' -f 2-)\n        list=\"$list $tmp\"\n\n        # call max heapify on the reduced heap\n        heapify \"$list\" 0 $i\n    done\n\n    echo \"$list\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local n=${#list[@]}\n  local temp=0\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)) do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Extract the elements\n  for ((i = n - 1; i >= 0; i--)) do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "  local -a list=($1)\n  local -i i j k\n  local -i n=${#list[@]}\n  local -i temp\n\n  for ((i=n/2-1; i>=0; i--)); do\n    k=i\n    temp=${list[i]}\n\n    while ((2*k+1<n)); do\n      j=2*k+1\n      if ((j<n-1)) && ((${list[j]}<${list[j+1]})); then\n        ((j++))\n      fi\n      if ((temp>=${list[j]})); then\n        break\n      fi\n      list[k]=${list[j]}\n      ((k=j))\n    done\n    list[k]=$temp\n  done\n\n  for ((i=n-1; i>0; i--)); do\n    temp=${list[i]}\n    list[i]=${list[0]}\n    k=0\n\n    while ((2*k+1<i)); do\n      j=2*k+1\n      if ((j<i-1)) && ((${list[j]}<${list[j+1]})); then\n        ((j++))\n      fi\n      if ((temp>=${list[j]})); then\n        break\n      fi\n      list[k]=${list[j]}\n      ((k=j))\n    done\n    list[k]=$temp\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n  for ((i = n - 1; i >= 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local tmp\n  local parent\n  local child\n\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    parent=${list[i]}\n    child=i\n\n    while [[ $child -lt $((n / 2)) ]]; do\n      child=$((2 * child + 1))\n\n      if [[ $child -lt $((n - 1)) && ${list[child]} -lt ${list[child + 1]} ]]; then\n        child=$((child + 1))\n      fi\n\n      if [[ $parent -lt ${list[child]} ]]; then\n        list[$((child / 2))]=${list[child]}\n        child=$((2 * child))\n      else\n        break\n      fi\n    done\n\n    list[$((child / 2))]=$parent\n  done\n\n  for ((i = n - 1; i > 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    parent=${list[0]}\n    child=0\n\n    while [[ $child -lt $((i / 2)) ]]; do\n      child=$((2 * child + 1))\n\n      if [[ $child -lt $((i - 1)) && ${list[child]} -lt ${list[child + 1]} ]]; then\n        child=$((child + 1))\n      fi\n\n      if [[ $parent -lt ${list[child]} ]]; then\n        list[$((child / 2))]=${list[child]}\n        child=$((2 * child))\n      else\n        break\n      fi\n    done\n\n    list[$((child / 2))]=$parent\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local k=0\n    local l=0\n    local m=0\n\n    # build max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        heapify $i $len \"${list[@]}\"\n    done\n\n    # sort\n    for ((i=len-1; i>=0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify 0 $i \"${list[@]}\"\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i=length/2-1; i>=0; i--)); do\n    parent=$i\n    child=$((2*parent+1))\n    while ((child<length)); do\n      if ((child+1<length && list[child]<list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((list[parent]<list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i=length-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2*parent+1))\n    while ((child<i)); do\n      if ((child+1<i && list[child]<list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((list[parent]<list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local heap_size=${#list[@]}\n\n  for ((i=n/2-1; i>=0; i--)); do\n    heap_size=${#list[@]}\n    k=i\n    while ((2*k+1<heap_size)); do\n      j=2*k+1\n      if ((j+1<heap_size && list[j]<list[j+1])); then\n        j=$((j+1))\n      fi\n      if ((list[k]<list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  while ((heap_size>0)); do\n    temp=${list[0]}\n    list[0]=${list[heap_size-1]}\n    list[heap_size-1]=$temp\n    heap_size=$((heap_size-1))\n    k=0\n    while ((2*k+1<heap_size)); do\n      j=2*k+1\n      if ((j+1<heap_size && list[j]<list[j+1])); then\n        j=$((j+1))\n      fi\n      if ((list[k]<list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local size=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build a max heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $size $i\n    done\n\n    # Extract elements one by one\n    for ((i = size - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root of the heap (the largest element) and put it at the end\n  # of the array. Then, heapify the remaining elements.\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n\n    for ((i = n / 2 - 1; i >= 0; i--))\n    do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    for ((i = n - 1; i >= 0; i--))\n    do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build the heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $len $i\n    done\n\n    # One by one extract an element from heap\n    for ((i = len - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n  local left\n  local right\n\n  # Build max heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    largest=$i\n    left=$((2 * i + 1))\n    right=$((2 * i + 2))\n\n    if [ $left -lt $length ] && [ ${list[$left]} -gt ${list[$largest]} ]; then\n      largest=$left\n    fi\n\n    if [ $right -lt $length ] && [ ${list[$right]} -gt ${list[$largest]} ]; then\n      largest=$right\n    fi\n\n    if [ $largest -ne $i ]; then\n      temp=${list[$i]}\n      list[$i]=${list[$largest]}\n      list[$largest]=$temp\n    fi\n  done\n\n  # Heap sort\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n\n    # Heapify\n    for ((j = 0; j < i;)); do\n      largest=$j\n      left=$((2 * j + 1))\n      right=$((2 * j + 2))\n\n      if [ $left -lt $i ] && [ ${list[$left]} -gt ${list[$largest]} ]; then\n        largest=$left\n      fi\n\n      if [ $right -lt $i ] && [ ${list[$right]} -gt ${list[$largest]} ]; then\n        largest=$right\n      fi\n\n      if [ $largest -ne $j ]; then\n        temp=${list[$j]}\n        list[$j]=${list[$largest]}\n        list[$largest]=$temp\n        j=$largest\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=$1\n  local length=$(echo $list | wc -w)\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < length)); do\n      if ((child + 1 < length)); then\n        if ((${list[child]} < ${list[child + 1]})); then\n          child=$((child + 1))\n        fi\n      fi\n      if ((${list[parent]} < ${list[child]})); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i)); then\n        if ((${list[child]} < ${list[child + 1]})); then\n          child=$((child + 1))\n        fi\n      fi\n      if ((${list[parent]} < ${list[child]})); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local tmp=0\n\n    # Build the heap\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the elements from the heap\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build the heap\n    for ((i = 1; i < length; i++)); do\n        j=$i\n        while ((j > 0)); do\n            parent=$((j - 1))\n            parent=$((parent / 2))\n            if ((list[j] > list[parent])); then\n                temp=${list[j]}\n                list[j]=${list[parent]}\n                list[parent]=$temp\n            fi\n            j=$parent\n        done\n    done\n\n    # Sort the heap\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[i]}\n        list[i]=${list[0]}\n        list[0]=$temp\n        j=0\n        while (((j * 2 + 1) < i)); do\n            child=$((j * 2 + 1))\n            if (((j * 2 + 2) < i && list[j * 2 + 2] > list[child])); then\n                child=$((j * 2 + 2))\n            fi\n            if ((list[j] < list[child])); then\n                temp=${list[j]}\n                list[j]=${list[child]}\n                list[child]=$temp\n            fi\n            j=$child\n        done\n    done\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local i\n    local j\n    local k\n    local n\n    local tmp\n    local heap_size\n    local left\n    local right\n    local largest\n\n    # Build the heap\n    n=0\n    for i in $list; do\n        heap[$n]=\"$i\"\n        n=$((n+1))\n    done\n    heap_size=$n\n\n    for ((i=heap_size/2-1; i>=0; i--)); do\n        while true; do\n            left=$((2*i+1))\n            right=$((2*i+2))\n            largest=$i\n            if [ $left -lt $heap_size ] && [ ${heap[$left]} -gt ${heap[$largest]} ]; then\n                largest=$left\n            fi\n            if [ $right -lt $heap_size ] && [ ${heap[$right]} -gt ${heap[$largest]} ]; then\n                largest=$right\n            fi\n            if [ $largest -ne $i ]; then\n                tmp=${heap[$i]}\n                heap[$i]=${heap[$largest]}\n                heap[$largest]=$tmp\n                i=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i=heap_size-1; i>=1; i--)); do\n        tmp=${heap[0]}\n        heap[0]=${heap[$i]}\n        heap[$i]=$tmp\n        heap_size=$i\n        k=0\n        while true; do\n            left=$((2*k+1))\n            right=$((2*k+2))\n            largest=$k\n            if [ $left -lt $heap_size ] && [ ${heap[$left]} -gt ${heap[$largest]} ]; then\n                largest=$left\n            fi\n            if [ $right -lt $heap_size ] && [ ${heap[$right]} -gt ${heap[$largest]} ]; then\n                largest=$right\n            fi\n            if [ $largest -ne $k ]; then\n                tmp=${heap[",
    "    local list=\"$1\"\n    local size=$(echo \"$list\" | wc -w)\n    local i\n    local j\n    local k\n    local temp\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < size)); do\n            j = 2 * k + 1\n            if ((j < size - 1 && ${list[j]} < ${list[j + 1]})); then\n                j++\n            fi\n            if ((${list[k]} < ${list[j]})); then\n                temp = ${list[k]}\n                list[k] = ${list[j]}\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n    for ((i = size - 1; i > 0; i--)); do\n        temp = ${list[0]}\n        list[0] = ${list[i]}\n        list[i] = temp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1 && ${list[j]} < ${list[j + 1]})); then\n                j++\n            fi\n            if ((${list[k]} < ${list[j]})); then\n                temp = ${list[k]}\n                list[k] = ${list[j]}\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local temp\n  local n=${#list[@]}\n\n  for ((i=n/2-1; i>=0; i--)); do\n    k=$i\n    while ((2*k+1<n)); do\n      j=$((2*k+1))\n      if ((j<n-1)) && ((list[j]<list[j+1])); then\n        j=$((j+1))\n      fi\n      if ((list[k]<list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  for ((i=n-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    k=0\n    while ((2*k+1<i)); do\n      j=$((2*k+1))\n      if ((j<i-1)) && ((list[j]<list[j+1])); then\n        j=$((j+1))\n      fi\n      if ((list[k]<list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local n=${#list[@]}\n  local temp=0\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify list $i $n\n  done\n\n  # Extract elements from the heap\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify list 0 $i\n  done\n\n  # Print the sorted list\n  for ((i = 0; i < n; i++)); do\n    echo -n \"${list[i]} \"\n  done\n  echo",
    "  local list=($1)\n  local heap_size=${#list[@]}\n  local i\n  local temp\n\n  build_max_heap \"${list[@]}\"\n\n  for ((i=$heap_size-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    heap_size=$((heap_size-1))\n    max_heapify \"${list[@]}\" 0 $heap_size\n  done\n\n  echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local length=\"$2\"\n  local i\n  local j\n  local temp\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" \"$length\" \"$i\"\n  done\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=\"$(echo \"$list\" | cut -d ' ' -f 1)\"\n    list=\"$(echo \"$list\" | cut -d ' ' -f 2-)\"\n    list=\"$(echo \"$list\" | sed \"s/^$temp / /\")\"\n    list=\"$(echo \"$list\" | sed \"s/ $temp$/ /\")\"\n    list=\"$temp $list\"\n    heapify \"$list\" \"$i\" \"0\"\n  done\n  echo \"$list\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n    local tmp_index\n\n    # Build the heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        tmp_index=$i\n        tmp=${list[$i]}\n        while ((2 * tmp_index + 1 < len)); do\n            j=2 * tmp_index + 1\n            if ((j < len - 1)) && ((list[j] < list[j + 1])); then\n                j=$j + 1\n            fi\n            if ((tmp < list[j])); then\n                list[$tmp_index]=${list[$j]}\n                tmp_index=$j\n            else\n                break\n            fi\n        done\n        list[$tmp_index]=$tmp\n    done\n\n    # Sort the heap\n    for ((i = len - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$tmp\n        tmp_index=0\n        tmp=${list[0]}\n        while ((2 * tmp_index + 1 < i)); do\n            j=2 * tmp_index + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j=$j + 1\n            fi\n            if ((tmp < list[j])); then\n                list[$tmp_index]=${list[$j]}\n                tmp_index=$j\n            else\n                break\n            fi\n        done\n        list[$tmp_index]=$tmp\n    done\n\n    # Print the result\n    for ((i = 0; i < len; i++)); do\n        echo -n \"${list[$i]} \"\n    done\n    echo",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root element and heapify the reduced heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local tmp=0\n\n    # Build the heap\n    for ((i=n/2-1; i>=0; i--))\n    do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the elements\n    for ((i=n-1; i>=0; i--))\n    do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local n=${#list[@]}\n  local temp=0\n\n  for ((i=n/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i-1))\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n\n  for (( i = n / 2 - 1; i >= 0; i-- )); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  for (( i = n - 1; i >= 0; i-- )); do\n    list[0]=$(swap \"${list[0]}\" \"${list[$i]}\")\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local heap_size=0\n    local left=0\n    local right=0\n    local largest=0\n\n    # Build the heap\n    for ((i=len/2-1; i>=0; i--)); do\n        heap_size=$len\n        while ((1)); do\n            left=$((2*i+1))\n            right=$((2*i+2))\n            largest=$i\n            if ((left<heap_size && list[left]>list[largest])); then\n                largest=$left\n            fi\n            if ((right<heap_size && list[right]>list[largest])); then\n                largest=$right\n            fi\n            if ((largest==i)); then\n                break\n            fi\n            temp=${list[i]}\n            list[i]=${list[largest]}\n            list[largest]=$temp\n            i=$largest\n        done\n    done\n\n    # Sort the heap\n    for ((i=len-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$i\n        k=0\n        while ((1)); do\n            left=$((2*k+1))\n            right=$((2*k+2))\n            largest=$k\n            if ((left<heap_size && list[left]>list[largest])); then\n                largest=$left\n            fi\n            if ((right<heap_size && list[right]>list[largest])); then\n                largest=$right\n            fi\n            if ((largest==k)); then\n                break\n            fi\n            temp=${list[k]}\n            list[k]=${list[largest]}\n            list[largest]=$temp\n            k=$largest\n        done\n    done\n\n    # Print the sorted list\n    for ((i=0; i<len; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n\n  local tmp\n\n  # Build the heap\n  for ((i = ${#list[@]} / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < ${#list[@]})); do\n      j = 2 * k + 1\n      if ((j < ${#list[@]} - 1 && list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((n = ${#list[@]}; n > 0; n--)); do\n    tmp = list[0]\n    list[0] = list[n - 1]\n    list[n - 1] = tmp\n    k = 0\n    while ((2 * k + 1 < n - 1)); do\n      j = 2 * k + 1\n      if ((j < n - 1 && list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local list=$1\n    local i=0\n    local j=0\n    local k=0\n    local n=0\n    local temp=0\n    local heap_size=0\n    local left=0\n    local right=0\n    local largest=0\n\n    # Build a max heap\n    n=${#list[@]}\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heap_size=$n\n        while ((1)); do\n            left=$((2 * i + 1))\n            right=$((2 * i + 2))\n            largest=$i\n            if ((left < heap_size && list[left] > list[largest])); then\n                largest=$left\n            fi\n            if ((right < heap_size && list[right] > list[largest])); then\n                largest=$right\n            fi\n            if ((largest != i)); then\n                temp=${list[i]}\n                list[i]=${list[largest]}\n                list[largest]=$temp\n                i=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract elements from heap one by one\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$((heap_size - 1))\n        k=0\n        while ((1)); do\n            left=$((2 * k + 1))\n            right=$((2 * k + 2))\n            largest=$k\n            if ((left < heap_size && list[left] > list[largest])); then\n                largest=$left\n            fi\n            if ((right < heap_size && list[right] > list[largest])); then\n                largest=$right\n            fi\n            if ((largest != k)); then\n                temp=${list[k]}\n                list[k]=${list[largest]}\n                list[largest]=$temp\n                k=$largest\n            else\n                break\n            fi\n        done\n    done",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Extract elements from the heap\n  for ((i = n - 1; i > 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n\n    # Call heapify on the reduced heap\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local temp\n  local heap_size=${#list[@]}\n\n  # Build the heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $heap_size\n  done\n\n  # Extract elements from the heap\n  for ((i = heap_size - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i - 1))\n  done\n\n  # Print the sorted list\n  for ((i = 0; i < heap_size; i++)); do\n    echo ${list[i]}\n  done",
    "    local list=\"$1\"\n    local heap_size=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build max heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" $heap_size $i\n    done\n\n    # Extract elements one by one\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # Call max heapify on the reduced heap\n        heapify \"$list\" $((i - 1)) 0\n    done",
    "  local list=$1\n  local heap_size=${#list[@]}\n  local i\n  local temp\n  build_max_heap \"$list\"\n  for (( i=heap_size-1; i>0; i-- )); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heap_size=$((heap_size-1))\n    max_heapify \"$list\" 0 $heap_size\n  done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract elements from the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local -a list=($1)\n  local -a heap\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#list[@]}\n  local -i m=0\n  local -i t=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\n  # build the heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n    j=i\n    while ((j>0)); do\n      k=(j-1)/2\n      if ((heap[j]<heap[k])); then\n        t=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$t\n      fi\n      j=k\n    done\n  done\n\n  # sort the heap\n  for ((i=n-1; i>0; i--)); do\n    t=${heap[0]}\n    heap[0]=${heap[i]}\n    heap[i]=$t\n    m=0\n    while ((1)); do\n      p=2*m+1\n      q=2*m+2\n      if ((p>=i)); then\n        break\n      fi\n      if ((q>=i)); then\n        r=$p\n      else\n        r=$((heap[p]<heap[q]?p:q))\n      fi\n      if ((heap[m]>heap[r])); then\n        s=${heap[m]}\n        heap[m]=${heap[r]}\n        heap[r]=$s\n      fi\n      m=$r\n    done\n  done\n\n  # print the sorted list\n  for ((i=0; i<n; i++)); do\n    echo -n \"${heap[i]} \"\n  done\n  echo",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n  local k=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the elements from the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local heap_size=0\n    local i=0\n    local tmp=0\n    local left=0\n    local right=0\n    local largest=0\n\n    build_max_heap \"$list\"\n    heap_size=$(echo \"$list\" | wc -w)\n    for ((i = heap_size - 1; i > 0; i--)); do\n        tmp=$(echo \"$list\" | awk '{print $1}')\n        list=$(echo \"$list\" | awk '{$1 = \"\"; print $0}')\n        list=\"$tmp $list\"\n        heap_size=$((heap_size - 1))\n        max_heapify \"$list\" 0 $heap_size\n    done\n    echo \"$list\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n    for ((i=n/2-1; i>=0; i--))\n    do\n        heapify $i $n \"${list[@]}\"\n    done\n    for ((i=n-1; i>=0; i--))\n    do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify 0 $i \"${list[@]}\"\n    done\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $length\n  done\n\n  # Extract the root element and heapify the remaining elements\n  for ((i = length - 1; i > 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "  local list=$1\n  local size=${#list}\n  local i=0\n  local j=0\n  local temp=0\n  local left=0\n  local right=0\n  local largest=0\n\n  for ((i = size / 2 - 1; i >= 0; i--)); do\n    heapify $list $size $i\n  done\n\n  for ((i = size - 1; i >= 0; i--)); do\n    temp=${list[i]}\n    list[i]=${list[0]}\n    list[0]=$temp\n    heapify $list $i 0\n  done\n\n  echo \"$list\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n  # Build the heap\n  for ((i = n / 2; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < n)); do\n      if ((child + 1 < n && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n  echo ${list[@]}",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n\n  # Build heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Heap sort\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local heap_size=\"$(echo \"$list\" | wc -w)\"\n    local i\n    local j\n    local k\n    local temp\n\n    # Build the heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" \"$heap_size\" \"$i\"\n    done\n\n    # One by one extract an element from the heap\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=\"$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\"\n        list=\"$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\"\n        list=\"$(echo \"$list\" | awk \"{print \\$$((heap_size + 1))}\")\"\n        list=\"$(echo \"$list\" | awk \"{print \\$$((heap_size + 1))}\")\"\n\n        # call max heapify on the reduced heap\n        heapify \"$list\" \"$((i + 1))\" \"0\"\n    done",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n  local largest=0\n  local left=0\n  local right=0\n\n  for (( i = length / 2 - 1; i >= 0; i-- )); do\n    heapify \"${list[@]}\" $i $length\n  done\n\n  for (( i = length - 1; i >= 0; i-- )); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i - 1))\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n=${#list[@]}\n  local temp\n\n  # Build the heap\n  for ((i=n/2-1; i>=0; i--)); do\n    k=i\n    while ((2*k+1<n)); do\n      j=2*k+1\n      if ((j<n-1)) && ((list[j]<list[j+1])); then\n        j=$((j+1))\n      fi\n      if ((list[k]<list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    k=0\n    while ((2*k+1<i)); do\n      j=2*k+1\n      if ((j<i-1)) && ((list[j]<list[j+1])); then\n        j=$((j+1))\n      fi\n      if ((list[k]<list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract the elements from the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local heap_size=${#list[@]}\n  local i\n  local temp\n\n  # Build a max heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $heap_size $i\n  done\n\n  # One by one extract an element from heap\n  for ((i = heap_size - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    # call max heapify on the reduced heap\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local tmp\n    local k\n\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        tmp=${list[$i]}\n        while ((2*k+1<len)); do\n            j=$((2*k+1))\n            if ((j<len-1)) && ((list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((tmp<list[j])); then\n                list[k]=${list[j]}\n                k=$j\n            else\n                break\n            fi\n        done\n        list[k]=$tmp\n    done\n\n    for ((i=len-1; i>0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        k=0\n        while ((2*k+1<i)); do\n            j=$((2*k+1))\n            if ((j<i-1)) && ((list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((list[k]<list[j])); then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i j temp\n  local n=${#list[@]}\n\n  # Build max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Heap sort\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i - 1))\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local tmp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    tmp = list[0]\n    list[0] = list[i]\n    list[i] = tmp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n    local -i heap_size\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heap_size=${#list[@]}\n        k=i\n        while ((2 * k + 1 < heap_size)); do\n            j=2 * k + 1\n            if ((j + 1 < heap_size && list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                t=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$t\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        t=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$t\n        heap_size=i\n        k=0\n        while ((2 * k + 1 < heap_size)); do\n            j=2 * k + 1\n            if ((j + 1 < heap_size && list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                t=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$t\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=$1\n  local length=${#list}\n  local i\n  local j\n  local temp\n\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify $list $length $i\n  done\n\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list:0:1}\n    list=${list:1}\n    list=${list:0:$i}${temp}${list:$i}\n    heapify $list $i 0\n  done\n  echo $list",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local tmp=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract the root element and heapify the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local n=${#list[@]}\n  local temp=0\n  local heap_size=0\n\n  # Build a heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heap_size=${#list[@]}\n    heap_size=$((heap_size - 1))\n    heapify \"${list[@]}\" $i $heap_size\n  done\n\n  # One by one extract an element from heap\n  for ((i = n - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    # call max heapify on the reduced heap\n    heap_size=$((heap_size - 1))\n    heapify \"${list[@]}\" 0 $heap_size\n  done\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n=${#list[@]}\n  local tmp\n  for ((i=n/2-1; i>=0; i--)); do\n    k=i\n    while ((2*k+1<n)); do\n      j=2*k+1\n      if ((j<n-1)) && ((list[j]<list[j+1])); then\n        ((j++))\n      fi\n      if ((list[k]<list[j])); then\n        tmp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$tmp\n        ((k=j))\n      else\n        break\n      fi\n    done\n  done\n  for ((i=n-1; i>0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    k=0\n    while ((2*k+1<i)); do\n      j=2*k+1\n      if ((j<i-1)) && ((list[j]<list[j+1])); then\n        ((j++))\n      fi\n      if ((list[k]<list[j])); then\n        tmp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$tmp\n        ((k=j))\n      else\n        break\n      fi\n    done\n  done\n  echo ${list[@]}",
    "    local list=\"$1\"\n    local heap_size=${#list[@]}\n    local i\n    local j\n    local temp\n    local largest\n\n    # Build the heap\n    for (( i = heap_size / 2 - 1; i >= 0; i-- )); do\n        heapify \"$list\" \"$heap_size\" \"$i\"\n    done\n\n    # Extract the elements from the heap\n    for (( i = heap_size - 1; i >= 0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"$list\" \"$i\" \"0\"\n    done",
    "    local -a list=($1)\n    local -i length=${#list[@]}\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n    local -i largest=0\n\n    # Build the heap\n    for ((i=length/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract elements from the heap\n    for ((i=length-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    # Print the sorted list\n    for ((i=0; i<length; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "  local list=\"$1\"\n  local length=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local temp\n  local k\n\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" \"$length\" \"$i\"\n  done\n\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=$(echo \"$list\" | cut -d ' ' -f 1)\n    list=$(echo \"$list\" | cut -d ' ' -f 2-)\n    list=\"$temp $list\"\n    heapify \"$list\" \"$i\" 0\n  done\n\n  echo \"$list\"",
    "  local list=$1\n  local tmp_file=$(mktemp)\n  local sorted_list=\"\"\n\n  # Create a max heap\n  for i in $list; do\n    echo $i >> $tmp_file\n  done\n  build_max_heap $tmp_file\n\n  # Extract the max element from the heap and put it at the end of the list\n  while [ $(wc -l $tmp_file | awk '{print $1}') -gt 0 ]; do\n    local max=$(head -n 1 $tmp_file)\n    sorted_list=\"$sorted_list $max\"\n    sed -i '1d' $tmp_file\n    max_heapify $tmp_file 0\n  done\n\n  # Remove the temporary file\n  rm $tmp_file\n\n  # Return the sorted list\n  echo $sorted_list",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # Extract the root element and heapify the heap\n    for ((i = n - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # Call max heapify on the reduced heap\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n  # One by one extract an element from heap\n  for ((i = n - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    # call max heapify on the reduced heap\n    heapify \"${list[@]}\" $i 0\n  done\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root element and heapify the remaining\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  # Print the sorted list\n  for ((i = 0; i < length; i++)); do\n    echo -n \"${list[$i]} \"\n  done\n  echo",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for (( i = length / 2 - 1; i >= 0; i-- )); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root of the heap and put it at the end of the array\n  for (( i = length - 1; i > 0; i-- )); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local parent=0\n    local child=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while ((child < length)); do\n            if ((child + 1 < length && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        parent=0\n        child=$((2 * parent + 1))\n        while ((child < i)); do\n            if ((child + 1 < i && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the result\n    for ((i = 0; i < length; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local tmp\n\n  # build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # extract the elements\n  for ((i = n - 1; i >= 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    heapify \"${list[@]}\" 0 $((i - 1))\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = n - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = tmp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    # Build a max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n    # One by one extract an element from heap\n    for ((i = length - 1; i > 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" $i 0\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local tmp\n    local n=${#list[@]}\n    local n2=$((n/2))\n    for ((i=n2; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" 0 $((i-1))\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # Extract elements from the heap\n    for ((i = n - 1; i > 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # Call heapify on the reduced heap\n        heapify \"${list[@]}\" $i 0\n    done",
    "    local list=($1)\n    local size=${#list[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local k=0\n\n    # Build the heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $size\n    done\n\n    # Extract the elements from the heap\n    for ((i = size - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        while true; do\n            child=$((2 * parent + 1))\n            if [[ $child -lt $n && ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n                child=$((child + 1))\n            fi\n            if [[ $child -ge $n || ${list[$parent]} -ge ${list[$child]} ]]; then\n                break\n            fi\n            temp=${list[$parent]}\n            list[$parent]=${list[$child]}\n            list[$child]=$temp\n            parent=$child\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        parent=0\n        while true; do\n            child=$((2 * parent + 1))\n            if [[ $child -lt $i && ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n                child=$((child + 1))\n            fi\n            if [[ $child -ge $i || ${list[$parent]} -ge ${list[$child]} ]]; then\n                break\n            fi\n            temp=${list[$parent]}\n            list[$parent]=${list[$child]}\n            list[$child]=$temp\n            parent=$child\n        done\n    done\n\n    # Print the result\n    for ((i = 0; i < n; i++)); do\n        echo ${list[$i]}\n    done",
    "\t# Write your code here\n\t#\n\t# You can use the following functions:\n\t#\n\t# heap_sort_max_heapify()\n\t# heap_sort_build_max_heap()\n\t# heap_sort_heap_extract_max()\n\t# heap_sort_heap_increase_key()\n\t# heap_sort_max_heap_insert()\n\t#\n\t# You can use the following variables:\n\t#\n\t# heap_sort_A\n\t# heap_sort_heap_size\n\t#\n\t# You can use the following constants:\n\t#\n\t# heap_sort_INFINITY\n\t#\n\t# You can use the following functions:\n\t#\n\t# heap_sort_swap()\n\t# heap_sort_print_list()\n\t#\n\t# You can use the following variables:\n\t#\n\t# heap_sort_A\n\t# heap_sort_heap_size\n\t#\n\t# You can use the following constants:\n\t#\n\t# heap_sort_INFINITY\n\t#\n\t# You can use the following functions:\n\t#\n\t# heap_sort_swap()\n\t# heap_sort_print_list()\n\t#\n\t# You can use the following variables:\n\t#\n\t# heap_sort_A\n\t# heap_sort_heap_size\n\t#\n\t# You can use the following constants:\n\t#\n\t# heap_sort_INFINITY\n\t#\n\t# You can use the following functions:\n\t#\n\t# heap_sort_swap()\n\t# heap_sort_print_list()\n\t#\n\t# You can use the following variables:\n\t#\n\t# heap_sort_A\n\t# heap_sort_heap_size\n\t#\n\t# You can use the following constants:\n\t#\n\t# heap_sort_INFINITY\n\t#\n\t# You can use the following functions:\n\t#\n\t# heap_sort_swap()\n\t# heap_sort_print_list()\n\t#\n\t# You can use the following variables:\n\t#\n\t# heap_sort_A\n\t",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local heap_size\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heap_size=$n\n    while ((1)); do\n      k=$i\n      j=$((2 * k + 1))\n      if [[ $j -lt $heap_size && ${list[j]} -gt ${list[k]} ]]; then\n        k=$j\n      fi\n      if [[ $j + 1 -lt $heap_size && ${list[j + 1]} -gt ${list[k]} ]]; then\n        k=$((j + 1))\n      fi\n      if [[ $k -eq $i ]]; then\n        break\n      fi\n      temp=${list[i]}\n      list[i]=${list[k]}\n      list[k]=$temp\n      i=$k\n    done\n  done\n\n  # Heap sort\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heap_size=$i\n    k=0\n    while ((1)); do\n      j=$((2 * k + 1))\n      if [[ $j -lt $heap_size && ${list[j]} -gt ${list[k]} ]]; then\n        k=$j\n      fi\n      if [[ $j + 1 -lt $heap_size && ${list[j + 1]} -gt ${list[k]} ]]; then\n        k=$((j + 1))\n      fi\n      if [[ $k -eq $i ]]; then\n        break\n      fi\n      temp=${list[i]}\n      list[i]=${list[k]}\n      list[k]=$temp\n      i=$k\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local temp=0\n  local n=${#list[@]}\n  local largest=0\n  local left=0\n  local right=0\n\n  # Build the heap\n  for ((i = n/2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Extract the elements\n  for ((i = n-1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local length=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local tmp\n  local parent\n  local child\n  local heap_size=$length\n\n  # Build heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while [ $child -lt $length ]; do\n      if [ $((child + 1)) -lt $length ] && \\\n        [ $(echo \"$list\" | cut -d ' ' -f $((child + 1))) -gt \\\n          $(echo \"$list\" | cut -d ' ' -f $((child))) ]; then\n        child=$((child + 1))\n      fi\n      if [ $(echo \"$list\" | cut -d ' ' -f $((child + 1))) -gt \\\n        $(echo \"$list\" | cut -d ' ' -f $((parent + 1))) ]; then\n        tmp=$(echo \"$list\" | cut -d ' ' -f $((parent + 1)))\n        list=$(echo \"$list\" | sed \"s/\\s\\+$tmp//\")\n        list=$(echo \"$list\" | sed \"s/^$tmp\\s\\+//\")\n        list=$(echo \"$list\" | sed \"s/^$tmp$//\")\n        list=\"$list $(echo \"$list\" | cut -d ' ' -f $((child + 1)))\"\n        list=$(echo \"$list\" | sed \"s/\\s\\+$tmp//\")\n        list=$(echo \"$list\" | sed \"s/^$tmp\\s\\+//\")\n        list=$(echo \"$list\" | sed \"s/^$tmp$//\")\n        list=\"$list $tmp\"\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort\n  for ((i = length - 1; i >= 1; i--)); do\n    tmp=$(echo \"$list\" | cut -d ' ' -f 1)\n    list=$(echo \"$list\" | sed \"s/\\s\\+$tmp//\")\n",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  # Build a max heap\n  for ((i = n/2 - 1; i >= 0; i--)); do\n    k=$i\n    while [[ 2*k+1 -lt $n ]]; do\n      j=$((2*k+1))\n      if [[ $j -lt $((n-1)) && ${list[$j]} -lt ${list[$((j+1))]} ]]; then\n        j=$((j+1))\n      fi\n      if [[ ${list[$k]} -lt ${list[$j]} ]]; then\n        temp=${list[$k]}\n        list[$k]=${list[$j]}\n        list[$j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n  # Heap sort\n  for ((i = n-1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    k=0\n    while [[ 2*k+1 -lt $i ]]; do\n      j=$((2*k+1))\n      if [[ $j -lt $((i-1)) && ${list[$j]} -lt ${list[$((j+1))]} ]]; then\n        j=$((j+1))\n      fi\n      if [[ ${list[$k]} -lt ${list[$j]} ]]; then\n        temp=${list[$k]}\n        list[$k]=${list[$j]}\n        list[$j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n  echo ${list[@]}",
    "    local list=($1)\n    local heap_size=${#list[@]}\n    local i\n    local temp\n\n    # Build heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $heap_size\n    done\n\n    # Heap sort\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local tmp_file=\"$(mktemp)\"\n    local sorted_file=\"$(mktemp)\"\n    local sorted_list=\"\"\n\n    # Write the list to a temporary file\n    echo \"$list\" > \"$tmp_file\"\n\n    # Sort the file\n    sort -n \"$tmp_file\" > \"$sorted_file\"\n\n    # Read the sorted file into a variable\n    sorted_list=\"$(cat \"$sorted_file\")\"\n\n    # Remove the temporary files\n    rm \"$tmp_file\"\n    rm \"$sorted_file\"\n\n    # Return the sorted list\n    echo \"$sorted_list\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local n=${#list[@]}\n  local temp=0\n\n  # Build the heap\n  for ((i=n/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Extract the elements from the heap\n  for ((i=n-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i-1))\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local tmp\n    local k\n    local l\n    local r\n    local largest\n\n    # Build max heap\n    for ((i = len/2 - 1; i >= 0; i--)); do\n        k=$i\n        while true; do\n            l=$((2*k + 1))\n            r=$((2*k + 2))\n            if [[ $l -lt $len && ${list[$l]} -gt ${list[$k]} ]]; then\n                largest=$l\n            else\n                largest=$k\n            fi\n            if [[ $r -lt $len && ${list[$r]} -gt ${list[$largest]} ]]; then\n                largest=$r\n            fi\n            if [[ $largest -ne $k ]]; then\n                tmp=${list[$k]}\n                list[$k]=${list[$largest]}\n                list[$largest]=$tmp\n                k=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # Heap sort\n    for ((i = len - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$tmp\n        k=0\n        while true; do\n            l=$((2*k + 1))\n            r=$((2*k + 2))\n            if [[ $l -lt $i && ${list[$l]} -gt ${list[$k]} ]]; then\n                largest=$l\n            else\n                largest=$k\n            fi\n            if [[ $r -lt $i && ${list[$r]} -gt ${list[$largest]} ]]; then\n                largest=$r\n            fi\n            if [[ $largest -ne $k ]]; then\n                tmp=${list[$k]}\n                list[$k]=${list[$largest]}\n                list[$largest]=$tmp\n                k=$largest\n            else\n                break\n            fi\n        done\n    done\n    echo ${list[@]}",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n\n    # build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $length\n    done\n\n    # extract the elements\n    for ((i = length - 1; i > 0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local length=$(echo \"$list\" | wc -w)\n    local i\n    local j\n    local k\n    local temp\n    local temp_list\n\n    # Build max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        temp_list=\"\"\n        for ((j = 0; j < length; j++)); do\n            if [ \"$j\" -eq \"$i\" ]; then\n                temp_list=\"$temp_list 1\"\n            else\n                temp_list=\"$temp_list 0\"\n            fi\n        done\n        heapify \"$list\" \"$temp_list\" \"$length\" \"$i\"\n    done\n\n    # Extract elements from heap one by one\n    for ((i = length - 1; i > 0; i--)); do\n        # Move current root to end\n        temp=$(echo \"$list\" | cut -d ' ' -f 1)\n        list=$(echo \"$list\" | cut -d ' ' -f 2-)\n        list=\"$list $temp\"\n\n        # Call max heapify on the reduced heap\n        temp_list=\"\"\n        for ((j = 0; j < length; j++)); do\n            if [ \"$j\" -eq \"0\" ]; then\n                temp_list=\"$temp_list 1\"\n            else\n                temp_list=\"$temp_list 0\"\n            fi\n        done\n        heapify \"$list\" \"$temp_list\" \"$i\" \"0\"\n    done\n    echo \"$list\"",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local n\n    local temp\n    local heap_size\n\n    # Build the heap\n    for ((i=${#list[@]}/2-1; i>=0; i--)); do\n        heap_size=${#list[@]}\n        k=$i\n        while true; do\n            j=$((2*k+1))\n            if [ $j -ge $heap_size ]; then\n                break\n            fi\n            if [ $j -lt $((heap_size-1)) ] && [ ${list[$j]} -lt ${list[$((j+1))]} ]; then\n                j=$((j+1))\n            fi\n            if [ ${list[$k]} -ge ${list[$j]} ]; then\n                break\n            fi\n            temp=${list[$k]}\n            list[$k]=${list[$j]}\n            list[$j]=$temp\n            k=$j\n        done\n    done\n\n    # Sort the heap\n    for ((i=${#list[@]}-1; i>0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        heap_size=$i\n        k=0\n        while true; do\n            j=$((2*k+1))\n            if [ $j -ge $heap_size ]; then\n                break\n            fi\n            if [ $j -lt $((heap_size-1)) ] && [ ${list[$j]} -lt ${list[$((j+1))]} ]; then\n                j=$((j+1))\n            fi\n            if [ ${list[$k]} -ge ${list[$j]} ]; then\n                break\n            fi\n            temp=${list[$k]}\n            list[$k]=${list[$j]}\n            list[$j]=$temp\n            k=$j\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"$i\" \"$n\"\n  done\n\n  # Extract elements one by one\n  for ((i = n - 1; i >= 0; i--)); do\n    swap \"$i\" \"0\"\n    heapify \"0\" \"$i\"\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < length)); do\n      if ((child + 1 < length)) && ((list[child] < list[child + 1])); then\n        ((child++))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        ((parent = child))\n        ((child = 2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    ((parent = 0))\n    ((child = 2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i)) && ((list[child] < list[child + 1])); then\n        ((child++))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        ((parent = child))\n        ((child = 2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local i=${#list[@]}\n    local j=0\n    local tmp=0\n    local k=0\n\n    # Build the heap\n    for ((j = i / 2 - 1; j >= 0; j--)); do\n        heapify \"${list[@]}\" $j $i\n    done\n\n    # Extract the elements from the heap\n    for ((j = i - 1; j >= 0; j--)); do\n        tmp=${list[0]}\n        list[0]=${list[j]}\n        list[j]=$tmp\n        heapify \"${list[@]}\" 0 $j\n    done\n\n    # Print the sorted list\n    for ((k = 0; k < i; k++)); do\n        echo -n \"${list[k]} \"\n    done\n    echo",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local tmp\n  local k\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort\n  for ((i = n - 1; i > 0; i--)); do\n    tmp = list[0]\n    list[0] = list[i]\n    list[i] = tmp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=\"$1\"\n    local heap_size=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local left=0\n    local right=0\n    local largest=0\n\n    # Build a max heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify $list $heap_size $i\n    done\n\n    # Extract elements one by one\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify $list $i 0\n    done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while ((child < length)); do\n            if ((child + 1 < length)) && ((list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        parent=0\n        child=$((2 * parent + 1))\n        while ((child < i)); do\n            if ((child + 1 < i)) && ((list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local i j temp\n  local n=${#list[@]}\n\n  # Build the heap\n  for ((i=n/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Extract the elements\n  for ((i=n-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local i\n  local j\n  local temp\n  local size=${#list[@]}\n  # Build the heap\n  for ((i=size/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $size\n  done\n  # Extract the elements from the heap\n  for ((i=size-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    heapify \"${list[@]}\" 0 $i\n  done\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i j temp\n  local size=${#list[@]}\n\n  # Build the heap\n  for ((i = size / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $size $i\n  done\n\n  # One by one extract an element from heap\n  for ((i = size - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n\n    # call max heapify on the reduced heap\n    heapify \"${list[@]}\" $((i)) 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n\n    # build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify list $i $n\n    done\n\n    # extract elements one by one\n    for ((i = n - 1; i >= 0; i--)); do\n        # move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify list 0 $((i - 1))\n    done\n\n    echo ${list[@]}",
    "    local -a list=($1)\n    local -i i\n    local -i j\n    local -i k\n    local -i n=${#list[@]}\n    local -i temp\n\n    # Build the heap\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j<n-1)) && ((list[j]<list[j+1])); then\n                ((j++))\n            fi\n            if ((list[k]<list[j])); then\n                temp=list[k]\n                list[k]=list[j]\n                list[j]=temp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i=n-1; i>0; i--)); do\n        temp=list[0]\n        list[0]=list[i]\n        list[i]=temp\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j<i-1)) && ((list[j]<list[j+1])); then\n                ((j++))\n            fi\n            if ((list[k]<list[j])); then\n                temp=list[k]\n                list[k]=list[j]\n                list[j]=temp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=$1\n    local heap_size=${#list[@]}\n    local i=0\n\n    build_max_heap \"$list\"\n    while (( heap_size > 1 )); do\n        swap \"$list\" 0 $(( heap_size - 1 ))\n        (( heap_size-- ))\n        max_heapify \"$list\" 0 $heap_size\n    done",
    "    local list=$1\n    local size=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build the heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify $list $size $i\n    done\n\n    # Extract elements from the heap\n    for ((i = size - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        heapify $list $i 0\n    done",
    "    local list=\"$1\"\n    local tmp_file=\"$(mktemp)\"\n    local result=\"\"\n\n    # Write the list to a temporary file\n    echo \"$list\" > \"$tmp_file\"\n\n    # Sort the file\n    sort \"$tmp_file\" > \"$tmp_file.sorted\"\n\n    # Read the sorted file\n    result=\"$(<\"$tmp_file.sorted\")\"\n\n    # Remove the temporary files\n    rm \"$tmp_file\" \"$tmp_file.sorted\"\n\n    # Print the result\n    echo \"$result\"",
    "    local list=\"$1\"\n    local i\n    local j\n    local tmp\n    local len=${#list}\n    local last_parent=$((len/2-1))\n\n    # build heap\n    for ((i=last_parent; i>=0; i--)); do\n        heapify \"$list\" \"$i\" \"$len\"\n    done\n\n    # sort\n    for ((i=len-1; i>0; i--)); do\n        tmp=${list:0:1}\n        list=${list:1}\n        list=${list:0:i-1}${tmp}${list:i-1}\n        heapify \"$list\" \"0\" \"$i\"\n    done\n    echo \"$list\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local length=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local temp\n  local heap_size=$length\n  local left\n  local right\n  local largest\n\n  # Build a max heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" $i $length\n  done\n\n  # One by one extract an element from heap\n  for ((i = length - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" | awk \"{print \\$$((i + 1))}\")\n    list=$(echo \"$list\" |",
    "    local list=$1\n    local size=${#list[@]}\n    local i\n    local j\n    local tmp\n\n    # Build heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify $i $size \"${list[@]}\"\n    done\n\n    # Heap sort\n    for ((i = size - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify 0 $i \"${list[@]}\"\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < n)); do\n      if ((child + 1 < n)) && ((list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i)) && ((list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local tmp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i=n/2-1; i>=0; i--)); do\n    parent=$i\n    child=$((2*parent+1))\n    while ((child<n)); do\n      if ((child+1<n && list[child]<list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((list[child]>list[parent])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    parent=0\n    child=$((2*parent+1))\n    while ((child<i)); do\n      if ((child+1<i && list[child]<list[child+1])); then\n        child=$((child+1))\n      fi\n      if ((list[child]>list[parent])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    while true; do\n      child=$((2 * parent + 1))\n      if [[ $child -lt $n && ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ $child -lt $n && ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    parent=0\n    while true; do\n      child=$((2 * parent + 1))\n      if [[ $child -lt $i && ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n        child=$((child + 1))\n      fi\n      if [[ $child -lt $i && ${list[$parent]} -lt ${list[$child]} ]]; then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n        parent=$child\n      else\n        break\n      fi\n    done\n  done\n\n  # Print\n  for ((i = 0; i < n; i++)); do\n    echo -n \"${list[$i]} \"\n  done\n  echo",
    "    local list=\"$1\"\n    local n=$(echo \"$list\" | wc -w)\n    local i\n    local j\n    local tmp\n    local parent\n    local child\n\n    # Build the heap\n    for ((i = 1; i < n; i++)); do\n        tmp=$(echo \"$list\" | cut -d ' ' -f $i)\n        j=$i\n        while ((j > 0)); do\n            parent=$((j - 1))\n            if ((tmp > $(echo \"$list\" | cut -d ' ' -f $parent))); then\n                list=$(echo \"$list\" | sed \"s/\\($(echo \"$list\" | cut -d ' ' -f $parent)\\)\\($(echo \"$list\" | cut -d ' ' -f $j)\\)/\\2\\1/\")\n            else\n                break\n            fi\n            j=$parent\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        list=$(echo \"$list\" | sed \"s/\\($(echo \"$list\" | cut -d ' ' -f 0)\\)\\($(echo \"$list\" | cut -d ' ' -f $i)\\)/\\2\\1/\")\n        tmp=$(echo \"$list\" | cut -d ' ' -f $i)\n        j=0\n        while ((j < i)); do\n            child=$((j * 2 + 1))\n            if ((child < i - 1 && $(echo \"$list\" | cut -d ' ' -f $child) < $(echo \"$list\" | cut -d ' ' -f $((child + 1))))); then\n                child=$((child + 1))\n            fi\n            if ((child < i && tmp < $(echo \"$list\" | cut -d ' ' -f $child))); then\n                list=$(echo \"$list\" | sed \"s/\\($(echo \"$list\" | cut -d ' ' -f $j)\\)\\($(echo \"$list\" | cut -d ' ' -f $child)\\)/\\2\\1/\")\n            else\n                break\n            fi\n            j=$child\n        done\n    done\n\n    echo \"$list\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n  local left\n  local right\n\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    largest=$i\n    left=$((2 * i + 1))\n    right=$((2 * i + 2))\n\n    if [[ $left -lt $length && ${list[$left]} -gt ${list[$largest]} ]]; then\n      largest=$left\n    fi\n\n    if [[ $right -lt $length && ${list[$right]} -gt ${list[$largest]} ]]; then\n      largest=$right\n    fi\n\n    if [[ $largest -ne $i ]]; then\n      temp=${list[$i]}\n      list[$i]=${list[$largest]}\n      list[$largest]=$temp\n    fi\n  done\n\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n\n    for ((j = length / 2 - 1; j >= 0; j--)); do\n      largest=$j\n      left=$((2 * j + 1))\n      right=$((2 * j + 2))\n\n      if [[ $left -lt $i && ${list[$left]} -gt ${list[$largest]} ]]; then\n        largest=$left\n      fi\n\n      if [[ $right -lt $i && ${list[$right]} -gt ${list[$largest]} ]]; then\n        largest=$right\n      fi\n\n      if [[ $largest -ne $j ]]; then\n        temp=${list[$j]}\n        list[$j]=${list[$largest]}\n        list[$largest]=$temp\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=$1\n  local length=$(echo $list | wc -w)\n  local i\n  local j\n  local k\n  local temp\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify $list $length $i\n  done\n\n  # Extract the root element from the heap and put it at the end of the list.\n  # Then heapify the remaining list.\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=$(echo $list | cut -d' ' -f$i)\n    list=$(echo $list | cut -d' ' -f1-$i)\n    list=\"$list $(echo $list | cut -d' ' -f1)\"\n    list=$(echo $list | cut -d' ' -f2-$i)\n    list=\"$list $temp\"\n    heapify $list $i 0\n  done\n\n  echo $list",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n\n  local temp\n\n  # Build the heap\n  for ((i = ${#list[@]} / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < ${#list[@]})); do\n      j = 2 * k + 1\n      if ((j < ${#list[@]} - 1 && list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = ${#list[@]} - 1; i > 0; i--)); do\n    temp = list[0]\n    list[0] = list[i]\n    list[i] = temp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1 && list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract elements from the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local k=0\n\n    for ((i=len/2-1; i>=0; i--))\n    do\n        heapify $i $len \"${list[@]}\"\n    done\n\n    for ((i=len-1; i>=0; i--))\n    do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify 0 $i \"${list[@]}\"\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n\n    # build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # extract the elements\n    for ((i = n - 1; i > 0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local k\n  local l\n  local m\n  local n\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    k=$i\n    temp=${list[i]}\n    while ((2 * k + 1 < length)); do\n      l=$((2 * k + 1))\n      m=$((2 * k + 2))\n      if ((m < length && list[m] > list[l])); then\n        l=$m\n      fi\n      if ((list[l] <= temp)); then\n        break\n      fi\n      list[k]=${list[l]}\n      k=$l\n    done\n    list[k]=$temp\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[i]}\n    list[i]=${list[0]}\n    list[0]=$temp\n    k=0\n    while ((2 * k + 1 < i)); do\n      l=$((2 * k + 1))\n      m=$((2 * k + 2))\n      if ((m < i && list[m] > list[l])); then\n        l=$m\n      fi\n      if ((list[l] <= temp)); then\n        break\n      fi\n      list[k]=${list[l]}\n      k=$l\n    done\n    list[k]=$temp\n  done\n\n  # Print the result\n  for ((i = 0; i < length; i++)); do\n    echo -n \"${list[i]} \"\n  done\n  echo",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n\n  # build the heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $len $i\n  done\n\n  # extract the root element and heapify the rest\n  for ((i = len - 1; i > 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\""
  ]
}