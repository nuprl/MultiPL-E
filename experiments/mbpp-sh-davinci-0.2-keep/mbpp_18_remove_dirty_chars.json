{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to remove characters from the first string which are present in the second string.\n#\n# $1 is a string\n# $2 is a string\nremove_dirty_chars() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    remove_dirty_chars \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"probasscurve\" \"pros\") = \"bacuve\" ]]\n    [[ $(candidate \"digitalindia\" \"talent\") = \"digiidi\" ]]\n    [[ $(candidate \"exoticmiles\" \"toxic\") = \"emles\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local str=\"$1\"\n    local dirty_chars=\"$2\"\n    local clean_str=\"\"\n    local i=0\n    local j=0\n    local dirty_chars_len=${#dirty_chars}\n    local str_len=${#str}\n    local dirty_char_found=0\n\n    for ((i=0; i<str_len; i++)); do\n        dirty_char_found=0\n        for ((j=0; j<dirty_chars_len; j++)); do\n            if [[ \"${str:i:1}\" == \"${dirty_chars:j:1}\" ]]; then\n                dirty_char_found=1\n                break\n            fi\n        done\n        if [[ $dirty_char_found -eq 0 ]]; then\n            clean_str+=\"${str:i:1}\"\n        fi\n    done\n\n    echo \"$clean_str\"",
    "  echo \"$1\" | tr -d \"$2\"",
    "  local -r dirty_chars=\"$1\"\n  local -r string=\"$2\"\n  local -r clean_string=\"${string//[$dirty_chars]}\"\n  echo \"$clean_string\"",
    "  local clean_string=\"\"\n  local dirty_string=\"$1\"\n  local dirty_chars=\"$2\"\n  local i=0\n  local j=0\n  local dirty_char=\"\"\n  local clean_char=\"\"\n\n  for ((i=0; i<${#dirty_string}; i++)); do\n    dirty_char=\"${dirty_string:$i:1}\"\n    for ((j=0; j<${#dirty_chars}; j++)); do\n      clean_char=\"${dirty_chars:$j:1}\"\n      if [ \"$dirty_char\" == \"$clean_char\" ]; then\n        break\n      fi\n    done\n    if [ \"$dirty_char\" != \"$clean_char\" ]; then\n      clean_string=\"$clean_string$dirty_char\"\n    fi\n  done\n  echo \"$clean_string\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=${string:$i:1}\n    if [[ $dirty_chars =~ $char ]]; then\n      continue\n    fi\n    clean_string+=$char\n  done\n  echo \"$clean_string\"",
    "    local clean_string=\"\"\n    local dirty_chars=\"$2\"\n    local string=\"$1\"\n    local i=0\n    local char=\"\"\n    local clean_char=\"\"\n    local clean_chars=\"\"\n    local dirty_char=\"\"\n    local dirty_chars_length=0\n    local string_length=0\n    local clean_chars_length=0\n\n    string_length=${#string}\n    dirty_chars_length=${#dirty_chars}\n\n    for ((i=0; i<string_length; i++)); do\n        char=\"${string:$i:1}\"\n        clean_char=1\n        for ((j=0; j<dirty_chars_length; j++)); do\n            dirty_char=\"${dirty_chars:$j:1}\"\n            if [[ \"$char\" == \"$dirty_char\" ]]; then\n                clean_char=0\n                break\n            fi\n        done\n        if [[ $clean_char -eq 1 ]]; then\n            clean_chars+=\"$char\"\n        fi\n    done\n\n    clean_chars_length=${#clean_chars}\n    for ((i=0; i<clean_chars_length; i++)); do\n        char=\"${clean_chars:$i:1}\"\n        clean_string+=\"$char\"\n    done\n\n    echo \"$clean_string\"",
    "  echo \"$1\" | tr -d \"$2\"",
    "  local clean_string=\"\"\n  for (( i=0; i<${#1}; i++ )); do\n    if [[ ! \"${2}\" =~ \"${1:$i:1}\" ]]; then\n      clean_string+=\"${1:$i:1}\"\n    fi\n  done\n  echo \"${clean_string}\"",
    "  local str1=$1\n  local str2=$2\n  local str3=\"\"\n  local i=0\n  local j=0\n  local flag=0\n  for ((i=0; i<${#str1}; i++)); do\n    for ((j=0; j<${#str2}; j++)); do\n      if [ \"${str1:$i:1}\" == \"${str2:$j:1}\" ]; then\n        flag=1\n      fi\n    done\n    if [ $flag -eq 0 ]; then\n      str3=\"$str3${str1:$i:1}\"\n    fi\n    flag=0\n  done\n  echo $str3",
    "  echo \"$1\" | tr -d \"$2\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  local current_char=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    current_char=\"${string:i:1}\"\n    if [[ ! $dirty_chars =~ $current_char ]]; then\n      clean_string+=\"$current_char\"\n    fi\n  done\n\n  echo \"$clean_string\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  local current_char=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    current_char=\"${string:$i:1}\"\n\n    if [[ $dirty_chars != *\"$current_char\"* ]]; then\n      clean_string+=\"$current_char\"\n    fi\n  done\n\n  echo \"$clean_string\"",
    "  local -r clean_string=\"$1\"\n  local -r dirty_string=\"$2\"\n  local -r dirty_chars=\"${dirty_string//[^[:alnum:]]/}\"\n  local -r clean_chars=\"${clean_string//[^[:alnum:]]/}\"\n  local -r dirty_chars_regex=\"[${dirty_chars}]\"\n  local -r clean_chars_regex=\"[${clean_chars}]\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex//\\[/\\\\[}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\]/\\\\]}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\^/\\\\^}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\$/\\\\$}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\*/\\\\*}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\+/\\\\+}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\?/\\\\?}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\(/\\\\(}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\)/\\\\)}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\{/\\\\{}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//\\}/\\\\}}\"\n  local -r clean_chars_regex_escaped=\"${clean_chars_regex_escaped//",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  local current_char=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    current_char=\"${string:$i:1}\"\n\n    if [[ $dirty_chars != *\"$current_char\"* ]]; then\n      clean_string+=\"$current_char\"\n    fi\n  done\n\n  echo \"$clean_string\"",
    "  local str1=$1\n  local str2=$2\n  local str3=\"\"\n  local i=0\n  local j=0\n  local len1=${#str1}\n  local len2=${#str2}\n  for ((i=0; i<len1; i++)); do\n    for ((j=0; j<len2; j++)); do\n      if [[ ${str1:i:1} == ${str2:j:1} ]]; then\n        break\n      fi\n    done\n    if [[ $j == $len2 ]]; then\n      str3+=\"${str1:i:1}\"\n    fi\n  done\n  echo $str3",
    "  local str1=$1\n  local str2=$2\n  local str3=\"\"\n  for ((i=0; i<${#str1}; i++)); do\n    local char=${str1:$i:1}\n    if [[ $str2 != *\"$char\"* ]]; then\n      str3+=$char\n    fi\n  done\n  echo \"$str3\"",
    "  local str1=\"$1\"\n  local str2=\"$2\"\n  local str_len=${#str1}\n  local i=0\n  local j=0\n  local k=0\n  local str_out=\"\"\n  local str_out_len=0\n  local str_out_idx=0\n  local str_out_idx_found=0\n  local str_out_idx_found_idx=0\n\n  while [ $i -lt $str_len ]\n  do\n    j=0\n    str_out_idx_found=0\n    while [ $j -lt $str_len ]\n    do\n      if [ \"${str1:$i:1}\" == \"${str2:$j:1}\" ]\n      then\n        str_out_idx_found=1\n        break\n      fi\n      j=$((j+1))\n    done\n\n    if [ $str_out_idx_found -eq 0 ]\n    then\n      str_out_idx=$((str_out_idx+1))\n      str_out_idx_found_idx=$((str_out_idx_found_idx+1))\n      str_out=\"$str_out${str1:$i:1}\"\n    fi\n\n    i=$((i+1))\n  done\n\n  echo \"$str_out\"",
    "  echo \"$1\" | tr -d \"$2\"",
    "\tlocal clean_string=\"\"\n\tfor (( i=0; i<${#1}; i++ )); do\n\t\tlocal char=${1:$i:1}\n\t\tif [[ $2 != *$char* ]]; then\n\t\t\tclean_string+=$char\n\t\tfi\n\tdone\n\techo $clean_string",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=${string:$i:1}\n    if [[ $dirty_chars =~ $char ]]; then\n      continue\n    fi\n    clean_string+=$char\n  done\n  echo \"$clean_string\""
  ]
}