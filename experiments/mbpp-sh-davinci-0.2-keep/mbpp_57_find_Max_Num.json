{
  "name": "mbpp_57_find_Max_Num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find the largest number that can be formed with the given list of digits.\n#\n# $1 is a space-separated list\nfind_Max_Num() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    find_Max_Num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"321\" ]]\n    [[ $(candidate \"4 5 6 1\") = \"6541\" ]]\n    [[ $(candidate \"1 2 3 9\") = \"9321\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    echo $1 | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    echo $1 | tr ' ' '\\n' | sort -rn | tr -d '\\n'",
    "    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    python -c \"print(''.join(sorted(list('$1'), reverse=True)))\"",
    "    local arr=($1)\n    local max=0\n    local max_num=0\n    for i in ${arr[@]}; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n            max_num=$i\n        fi\n    done\n    echo $max_num",
    "    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    echo $1 | tr \" \" \"\\n\" | sort -nr | tr \"\\n\" \" \"",
    "    echo $1 | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    echo $1 | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    echo $1 | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | sed 's/ $//'",
    "    local nums=$1\n    local max=0\n    for num in $nums; do\n        if [[ $num -gt $max ]]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    local digits=\"$1\"\n    local max_num=0\n    for num in $digits; do\n        if [ $num -gt $max_num ]; then\n            max_num=$num\n        fi\n    done\n    echo $max_num",
    "    local list=$1\n    local max_num=0\n    local num=0\n    local i=0\n    local j=0\n    local len=0\n    local temp=0\n    local temp_num=0\n    local temp_max_num=0\n    local temp_list=()\n    local temp_len=0\n    local temp_i=0\n    local temp_j=0\n    local temp_temp=0\n    local temp_temp_num=0\n    local temp_temp_max_num=0\n    local temp_temp_list=()\n    local temp_temp_len=0\n    local temp_temp_i=0\n    local temp_temp_j=0\n\n    len=${#list[@]}\n    for ((i=0; i<len; i++)); do\n        temp=${list[i]}\n        temp_list=()\n        for ((j=0; j<len; j++)); do\n            if [[ $j -ne $i ]]; then\n                temp_list+=(${list[j]})\n            fi\n        done\n        temp_len=${#temp_list[@]}\n        temp_max_num=0\n        for ((temp_i=0; temp_i<temp_len; temp_i++)); do\n            temp_temp=${temp_list[temp_i]}\n            temp_temp_list=()\n            for ((temp_j=0; temp_j<temp_len; temp_j++)); do\n                if [[ $temp_j -ne $temp_i ]]; then\n                    temp_temp_list+=(${temp_list[temp_j]})\n                fi\n            done\n            temp_temp_len=${#temp_temp_list[@]}\n            temp_temp_max_num=0\n            for ((temp_temp_i=0; temp_temp_i<temp_temp_len; temp_temp_i++)); do\n                temp_temp_max_num=$((temp_temp_max_num*10+temp_temp_list[temp_temp_i]))\n            done\n            if [[ $temp_temp_max_num -gt $temp_max_num ]]; then",
    "    echo $1 | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    echo $1 | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    echo $1 | tr \" \" \"\\n\" | sort -nr | tr \"\\n\" \" \"",
    "    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    echo $1 | tr \" \" \"\\n\" | sort -nr | tr \"\\n\" \" \""
  ]
}