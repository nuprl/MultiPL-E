{
  "name": "mbpp_475_sort_counter",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort a dictionary by value.\n#\n# $1 is a two column CSV in key,value order\nsort_counter() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    sort_counter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Math,81\\nPhysics,83\\nChemistry,87\") = \"Chemistry 87\\nPhysics 83\\nMath 81\" ]]\n    [[ $(candidate \"Math,400\\nPhysics,300\\nChemistry,250\") = \"Math 400\\nPhysics 300\\nChemistry 250\" ]]\n    [[ $(candidate \"Math,900\\nPhysics,1000\\nChemistry,1250\") = \"Chemistry 1250\\nPhysics 1000\\nMath 900\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r",
    "    awk -F, '{print $2 \",\" $1}' $1 | sort -t, -k1,1nr | awk -F, '{print $2 \",\" $1}'",
    "    sort -t, -k2,2nr -k1,1",
    "  awk -F, '{print $2 \",\" $1}' $1 | sort -n | awk -F, '{print $2 \",\" $1}'",
    "    cat $1 | sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r \"$1\"",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "    cat $1 | sort -t, -k2 -n -r",
    "    sort -t, -k2 -nr -o \"$1\" \"$1\"",
    "  sort -t, -k2,2nr -k1,1 $1",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -nr $1",
    "  awk -F, '{print $2 \",\" $1}' $1 | sort -n",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r \"$1\"",
    "    sort -t, -k2 -n -r",
    "    local file=$1\n    if [[ -z $file ]]; then\n        echo \"Usage: $0 <file>\"\n        return 1\n    fi\n    if [[ ! -f $file ]]; then\n        echo \"File $file does not exist\"\n        return 1\n    fi\n    sort -t, -k2 -nr $file",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2nr,2 \"$1\"",
    "    sort -t, -k2,2nr -k1,1",
    "  awk -F, '{print $2 \",\" $1}' $1 | sort -t, -n -r | awk -F, '{print $2 \",\" $1}'",
    "  sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2 -n -r $1",
    "    local csv=\"$1\"\n    local tmpfile=\"$(mktemp)\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd=\"sort -t, -k2,2nr\"\n    local sort_cmd",
    "  local csv=\"$1\"\n  local sort_key=\"$2\"\n  local sort_order=\"$3\"\n  local sort_type=\"$4\"\n  local sort_cmd=\"sort -t, -k${sort_key},${sort_key}${sort_order}${sort_type}\"\n  echo \"$csv\" | $sort_cmd",
    "  sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r $1",
    "  local csv=\"$1\"\n  local tmpfile=$(mktemp)\n  local sort_key=\"$2\"\n  local sort_order=\"$3\"\n\n  # Sort the CSV by the second column\n  sort -t, -k2,2 -n -r \"$csv\" > \"$tmpfile\"\n\n  # If the sort key is specified, sort by that key instead\n  if [ -n \"$sort_key\" ]; then\n    sort -t, -k\"$sort_key\",$sort_key -n -r \"$tmpfile\" > \"$tmpfile.2\"\n    mv \"$tmpfile.2\" \"$tmpfile\"\n  fi\n\n  # If the sort order is specified, sort in that order\n  if [ -n \"$sort_order\" ]; then\n    sort -t, -k2,2 -n \"$tmpfile\" > \"$tmpfile.2\"\n    mv \"$tmpfile.2\" \"$tmpfile\"\n  fi\n\n  cat \"$tmpfile\"\n  rm \"$tmpfile\"",
    "  sort -t, -k2 -n -r $1",
    "  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2 -n -r",
    "  awk -F, '{print $2\",\"$1}' $1 | sort -t, -n -r | awk -F, '{print $2\",\"$1}'",
    "  sort -t, -k2 -n -r",
    "  cat $1 | sort -t, -k2 -n -r",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r $1",
    "    local csv=\"$1\"\n    if [ -z \"$csv\" ]; then\n        echo \"Usage: sort_counter <csv>\"\n        return 1\n    fi\n    sort -t, -k2 -nr -o \"$csv\" \"$csv\"",
    "  sort -t, -k2 -n -r",
    "  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -nr \"$1\"",
    "  sort -t, -k2 -n -r $1",
    "    awk -F, '{print $2 \",\" $1}' $1 | sort -t, -n -r | awk -F, '{print $2 \",\" $1}'",
    "  sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r",
    "  awk 'BEGIN { FS = \",\" } ; { print $2 \",\" $1 }' $1 | sort -n | awk 'BEGIN { FS = \",\" } ; { print $2 \",\" $1 }'",
    "    sort -t, -k2,2nr -k1,1 $1",
    "  sort -t, -k2 -n -r $1",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2,2nr -k1,1",
    "  local input=\"$1\"\n  local output=\"$2\"\n  local sort_key=\"$3\"\n  local sort_order=\"$4\"\n  local sort_type=\"$5\"\n  local sort_key_index=\"$6\"\n  local sort_order_index=\"$7\"\n  local sort_type_index=\"$8\"\n\n  if [ -z \"$sort_key\" ]; then\n    sort_key=\"value\"\n  fi\n\n  if [ -z \"$sort_order\" ]; then\n    sort_order=\"desc\"\n  fi\n\n  if [ -z \"$sort_type\" ]; then\n    sort_type=\"numeric\"\n  fi\n\n  if [ -z \"$sort_key_index\" ]; then\n    sort_key_index=\"1\"\n  fi\n\n  if [ -z \"$sort_order_index\" ]; then\n    sort_order_index=\"2\"\n  fi\n\n  if [ -z \"$sort_type_index\" ]; then\n    sort_type_index=\"3\"\n  fi\n\n  if [ -z \"$output\" ]; then\n    output=\"/dev/stdout\"\n  fi\n\n  if [ -z \"$input\" ]; then\n    input=\"/dev/stdin\"\n  fi\n\n  local sort_key_header=\"$sort_key\"\n  local sort_order_header=\"$sort_order\"\n  local sort_type_header=\"$sort_type\"\n\n  if [ \"$sort_key_index\" != \"1\" ]; then\n    sort_key_header=\"$(head -n 1 \"$input\" | cut -d, -f\"$sort_key_index\")\"\n  fi\n\n  if [ \"$sort_order_index\" != \"2\" ]; then\n    sort_order_header=\"$(head -n 1 \"$input\" | cut -d, -f\"$sort_order_index\")\"\n  fi\n\n  if [ \"$sort_type_index\" != \"3\" ]; then\n    sort_type_header=\"$(head -n 1 \"$input\" | cut -d, -f\"$sort_type_index\")\"\n  fi\n\n  local sort_key_index=\"$(head -n 1 \"$input\" | sed 's/,/\\n",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "    local csv=\"$1\"\n    local tmp=$(mktemp)\n    local tmp2=$(mktemp)\n    local tmp3=$(mktemp)\n    local tmp4=$(mktemp)\n    local tmp5=$(mktemp)\n    local tmp6=$(mktemp)\n    local tmp7=$(mktemp)\n    local tmp8=$(mktemp)\n    local tmp9=$(mktemp)\n    local tmp10=$(mktemp)\n    local tmp11=$(mktemp)\n    local tmp12=$(mktemp)\n    local tmp13=$(mktemp)\n    local tmp14=$(mktemp)\n    local tmp15=$(mktemp)\n    local tmp16=$(mktemp)\n    local tmp17=$(mktemp)\n    local tmp18=$(mktemp)\n    local tmp19=$(mktemp)\n    local tmp20=$(mktemp)\n    local tmp21=$(mktemp)\n    local tmp22=$(mktemp)\n    local tmp23=$(mktemp)\n    local tmp24=$(mktemp)\n    local tmp25=$(mktemp)\n    local tmp26=$(mktemp)\n    local tmp27=$(mktemp)\n    local tmp28=$(mktemp)\n    local tmp29=$(mktemp)\n    local tmp30=$(mktemp)\n    local tmp31=$(mktemp)\n    local tmp32=$(mktemp)\n    local tmp33=$(mktemp)\n    local tmp34=$(mktemp)\n    local tmp35=$(mktemp)\n    local tmp36=$(mktemp)\n    local tmp37=$(mktemp)\n    local tmp38=$(mktemp)\n    local tmp39=$(mktemp)\n    local tmp40=$(mktemp)\n    local tmp41=$(mktemp)\n    local tmp42=$(mktemp)\n    local tmp43=$(mktemp)\n    local tmp44=$(mktemp)\n    local tmp45=$(mktemp)\n    local tmp46=$(mktemp)\n    local tmp47=$(mktemp)\n    local tmp48=$(mktemp)\n    local tmp49=$(mktemp)\n    local tmp50=$(mktemp)\n    local tmp",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r $1",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2,2nr -k1,1",
    "  awk -F, '{print $2 \",\" $1}' $1 | sort -n | awk -F, '{print $2 \",\" $1}'",
    "    sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r $1",
    "    cat \"$1\" | sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -nr $1",
    "  sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2 -n -r",
    "  sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2 -nr",
    "  sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2,2nr -k1,1r $1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2nr,2 \"$1\"",
    "  awk -F, '{print $2 \",\" $1}' $1 | sort -n | awk -F, '{print $2 \",\" $1}'",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2,2nr -k1,1",
    "  local input=\"$1\"\n  local output=\"$2\"\n  local tmpfile=\"$(mktemp)\"\n  local tmpfile2=\"$(mktemp)\"\n\n  # Sort by value\n  sort -t, -k2 -n -r \"$input\" > \"$tmpfile\"\n\n  # Sort by key\n  sort -t, -k1 \"$tmpfile\" > \"$tmpfile2\"\n\n  # Remove the tmpfile\n  rm \"$tmpfile\"\n\n  # Move the tmpfile2 to the output\n  mv \"$tmpfile2\" \"$output\"",
    "  sort -t, -k2 -n -r",
    "    # sort by value, then by key\n    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r",
    "  awk -F, '{print $2 \",\" $1}' $1 | sort -t, -n -r | awk -F, '{print $2 \",\" $1}'",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r $1",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2nr,2 \"$1\"",
    "  sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2nr,2 \"$1\"",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r \"$1\"",
    "    sort -t, -k2nr,2 -k1,1",
    "    sort -t, -k2 -nr $1",
    "  cat $1 | sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r \"$1\"",
    "    sort -t, -k2 -nr -o $1 $1",
    "    sort -t, -k2 -n -r $1",
    "  local input=\"$1\"\n  local output=\"$2\"\n  local sort_key=\"$3\"\n  local sort_order=\"$4\"\n  local sort_type=\"$5\"\n  local sort_unique=\"$6\"\n  local sort_numeric=\"$7\"\n  local sort_reverse=\"$8\"\n  local sort_case=\"$9\"\n  local sort_human=\"${10}\"\n  local sort_version=\"${11}\"\n  local sort_month=\"${12}\"\n  local sort_debug=\"${13}\"\n  local sort_stable=\"${14}\"\n  local sort_merge=\"${15}\"\n  local sort_compress=\"${16}\"\n  local sort_files0=\"${17}\"\n  local sort_files1=\"${18}\"\n  local sort_files2=\"${19}\"\n  local sort_files3=\"${20}\"\n  local sort_files4=\"${21}\"\n  local sort_files5=\"${22}\"\n  local sort_files6=\"${23}\"\n  local sort_files7=\"${24}\"\n  local sort_files8=\"${25}\"\n  local sort_files9=\"${26}\"\n  local sort_files10=\"${27}\"\n  local sort_files11=\"${28}\"\n  local sort_files12=\"${29}\"\n  local sort_files13=\"${30}\"\n  local sort_files14=\"${31}\"\n  local sort_files15=\"${32}\"\n  local sort_files16=\"${33}\"\n  local sort_files17=\"${34}\"\n  local sort_files18=\"${35}\"\n  local sort_files19=\"${36}\"\n  local sort_files20=\"${37}\"\n  local sort_files21=\"${38}\"\n  local sort_files22=\"${39}\"\n  local sort_files23=\"${40}\"\n  local sort_files24=\"${41}\"\n  local sort_files25=\"${42}\"\n  local sort_files26=\"${43}\"\n  local sort_files27=\"${44}\"\n  local sort_files28=\"${45}\"\n  local sort_files29=\"${46}\"\n  local sort_files30=\"${47}\"\n  local sort_files31=\"${48}\"\n",
    "  awk -F, '{print $2 \",\" $1}' \"$1\" | sort -t, -n -r | awk -F, '{print $2 \",\" $1}'",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r $1",
    "    awk -F, '{print $2\",\"$1}' \"$1\" | sort -t, -n -r | awk -F, '{print $2\",\"$1}'",
    "  # Sort by value, then by key\n  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2nr,2 $1",
    "  local input=\"$1\"\n  local output=\"$2\"\n  local sort_key=\"$3\"\n  local sort_order=\"$4\"\n  local sort_type=\"$5\"\n  local sort_unique=\"$6\"\n  local sort_numeric=\"$7\"\n  local sort_reverse=\"$8\"\n  local sort_case_sensitive=\"$9\"\n  local sort_human_numeric=\"${10}\"\n  local sort_month=\"${11}\"\n  local sort_version=\"${12}\"\n  local sort_random=\"${13}\"\n  local sort_random_seed=\"${14}\"\n  local sort_stable=\"${15}\"\n  local sort_merge=\"${16}\"\n  local sort_compress_blanks=\"${17}\"\n  local sort_ignore_leading_blanks=\"${18}\"\n  local sort_ignore_case=\"${19}\"\n  local sort_dictionary_order=\"${20}\"\n  local sort_ignore_nonprinting=\"${21}\"\n  local sort_debug=\"${22}\"\n  local sort_key_pos=\"${23}\"\n  local sort_key_pos_start=\"${24}\"\n  local sort_key_pos_end=\"${25}\"\n  local sort_key_pos_length=\"${26}\"\n  local sort_key_pos_delimiter=\"${27}\"\n  local sort_key_pos_numeric=\"${28}\"\n  local sort_key_pos_month=\"${29}\"\n  local sort_key_pos_version=\"${30}\"\n  local sort_key_pos_ignore_case=\"${31}\"\n  local sort_key_pos_ignore_leading_blanks=\"${32}\"\n  local sort_key_pos_dictionary_order=\"${33}\"\n  local sort_key_pos_ignore_nonprinting=\"${34}\"\n  local sort_key_pos_debug=\"${35}\"\n  local sort_key_pos_compress_blanks=\"${36}\"\n  local sort_key_pos_random=\"${37}\"\n  local sort_key_pos_random_seed=\"${38}\"\n  local sort_key_pos_stable=\"${39}\"\n  local sort_key_pos_mer",
    "  local csv=\"$1\"\n  local tmpfile=$(mktemp)\n  local tmpfile2=$(mktemp)\n  cut -d, -f2 \"$csv\" | sort -n > \"$tmpfile\"\n  while read line; do\n    local value=$(echo \"$line\" | cut -d, -f2)\n    local key=$(grep -F \"$value\" \"$csv\" | cut -d, -f1)\n    echo \"$key,$value\" >> \"$tmpfile2\"\n  done < \"$tmpfile\"\n  cat \"$tmpfile2\"\n  rm \"$tmpfile\"\n  rm \"$tmpfile2\"",
    "  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r $1",
    "  sort -t, -k2 -n -r",
    "  sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r -o \"$1\" \"$1\"",
    "    sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2 -n -r",
    "    sort -t, -k2nr -k1,1",
    "    sort -t, -k2 -nr $1",
    "    sort -t, -k2 -n -r",
    "  awk -F, '{print $2 \",\" $1}' $1 | sort -n",
    "    sort -t, -k2nr,2 \"$1\"",
    "    sort -t, -k2nr,2 \"$1\"",
    "  awk -F, '{print $2\",\"$1}' $1 | sort -n",
    "    sort -t, -k2 -n -r $1",
    "  sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r $1",
    "  awk -F, '{print $2\" \"$1}' $1 | sort -n | awk '{print $2\",\"$1}'",
    "    awk -F, '{print $2\",\"$1}' \"$1\" | sort -t, -n -r | awk -F, '{print $2\",\"$1}'",
    "    sort -t, -k2 -n -r $1",
    "  sort -t, -k2 -n -r",
    "    local input=\"$1\"\n    local output=\"$2\"\n    local tmpfile=\"$(mktemp)\"\n    local tmpfile2=\"$(mktemp)\"\n    local tmpfile3=\"$(mktemp)\"\n    local tmpfile4=\"$(mktemp)\"\n\n    # Sort by value\n    cut -d, -f2 \"$input\" | sort -n > \"$tmpfile\"\n    # Get the keys\n    cut -d, -f1 \"$input\" > \"$tmpfile2\"\n    # Join the two files\n    paste \"$tmpfile\" \"$tmpfile2\" > \"$tmpfile3\"\n    # Sort by key\n    sort -t, -k2 \"$tmpfile3\" > \"$tmpfile4\"\n    # Get the keys\n    cut -d, -f2 \"$tmpfile4\" > \"$tmpfile\"\n    # Get the values\n    cut -d, -f1 \"$tmpfile4\" > \"$tmpfile2\"\n    # Join the two files\n    paste \"$tmpfile\" \"$tmpfile2\" > \"$output\"\n\n    rm \"$tmpfile\" \"$tmpfile2\" \"$tmpfile3\" \"$tmpfile4\"",
    "    sort -t, -k2nr,2 \"$1\"",
    "  cat $1 | sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r $1",
    "  awk -F, '{print $2\",\"$1}' $1 | sort -t, -n -r | awk -F, '{print $2\",\"$1}'",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -nr $1",
    "  sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2nr,2 $1",
    "    sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2 -n -r $1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r $1",
    "  sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r",
    "  local counter_file=\"$1\"\n  sort -t, -k2 -nr \"$counter_file\"",
    "    sort -t, -k2 -n -r $1",
    "    sort -t, -k2,2nr -k1,1",
    "  sort -t, -k2 -n -r",
    "    sort -t, -k2nr -k1 $1",
    "    sort -t, -k2,2nr -k1,1 $1",
    "    sort -t, -k2 -n -r",
    "    sort -t, -k2 -n -r",
    "  sort -t, -k2 -n -r",
    "    sort -t, -k2,2nr -k1,1",
    "    sort -t, -k2 -n -r $1",
    "    awk -F, '{print $2 \",\" $1}' $1 | sort -t, -n -k1,1 | awk -F, '{print $2 \",\" $1}'",
    "    sort -t, -k2 -n -r \"$1\"",
    "  awk -F, '{print $2\",\"$1}' $1 | sort -t, -n -r | awk -F, '{print $2\",\"$1}'",
    "    sort -t, -k2 -n -r"
  ]
}