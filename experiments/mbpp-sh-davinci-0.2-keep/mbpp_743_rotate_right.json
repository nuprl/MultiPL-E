{
  "name": "mbpp_743_rotate_right",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n#\n# $1 is a space-separated list\n# $2 is an integer\nrotate_right() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    rotate_right \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"3\") = \"8 9 10 1 2 3 4 5 6 7\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2\") = \"9 10 1 2 3 4 5 6 7 8\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"5\") = \"6 7 8 9 10 1 2 3 4 5\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local list=$1\n  local n=$2\n  local length=$(echo $list | wc -w)\n  local new_list=$(echo $list | cut -d ' ' -f $((length - n + 1))-$length)\n  new_list=\"$new_list $(echo $list | cut -d ' ' -f 1-$((length - n)))\"\n  echo $new_list",
    "    local -n list=$1\n    local -i n=$2\n    local -a rotated\n    local -i i\n    for ((i=0; i<${#list[@]}; i++)); do\n        rotated[(i+n)%${#list[@]}]=${list[i]}\n    done\n    list=(\"${rotated[@]}\")",
    "    local list=$1\n    local n=$2\n    local -a arr=(\"${list[@]}\")\n    local -a result\n    for ((i=0; i<${#arr[@]}; i++)); do\n        result[$(((i+n)%${#arr[@]}))]=${arr[$i]}\n    done\n    echo \"${result[@]}\"",
    "    local -n list=$1\n    local -i n=$2\n    local -a new_list=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i len=0\n\n    len=${#list[@]}\n    m=$((len - n))\n    for i in ${!list[@]}; do\n        if ((i < m)); then\n            new_list[j]=${list[i]}\n            j=$((j + 1))\n        else\n            new_list[k]=${list[i]}\n            k=$((k + 1))\n        fi\n    done\n    list=(\"${new_list[@]}\")",
    "    local list=$1\n    local n=$2\n    local new_list=\"\"\n    local i=0\n    local j=0\n    local len=${#list}\n    for i in $(seq 0 $((len-1))); do\n        j=$(((i+n)%len))\n        new_list=\"$new_list ${list:$j:1}\"\n    done\n    echo $new_list",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local result=\"\"\n    local i=0\n    for item in $list; do\n        if [ $i -ge $n ]; then\n            result=\"$result $item\"\n        fi\n        i=$((i+1))\n    done\n    for item in $list; do\n        if [ $i -lt $n ]; then\n            result=\"$result $item\"\n        fi\n        i=$((i+1))\n    done\n    echo \"$result\"",
    "  local list=$1\n  local n=$2\n  local new_list=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local temp=0\n  local temp_list=()\n  local temp_list2=()\n  local temp_list3=()\n  local temp_list4=()\n  local temp_list5=()\n  local temp_list6=()\n  local temp_list7=()\n  local temp_list8=()\n  local temp_list9=()\n  local temp_list10=()\n  local temp_list11=()\n  local temp_list12=()\n  local temp_list13=()\n  local temp_list14=()\n  local temp_list15=()\n  local temp_list16=()\n  local temp_list17=()\n  local temp_list18=()\n  local temp_list19=()\n  local temp_list20=()\n  local temp_list21=()\n  local temp_list22=()\n  local temp_list23=()\n  local temp_list24=()\n  local temp_list25=()\n  local temp_list26=()\n  local temp_list27=()\n  local temp_list28=()\n  local temp_list29=()\n  local temp_list30=()\n  local temp_list31=()\n  local temp_list32=()\n  local temp_list33=()\n  local temp_list34=()\n  local temp_list35=()\n  local temp_list36=()\n  local temp_list37=()\n  local temp_list38=()\n  local temp_list39=()\n  local temp_list40=()\n  local temp_list41=()\n  local temp_list42=()\n  local temp_list43=()\n  local temp_list44=()\n  local temp_list45=()\n  local temp_list46=()\n  local temp_list47=()\n  local temp_list48=()\n  local temp_list49=()\n  local temp_list50=()\n  local temp_list51=()\n  local temp_",
    "    local list=$1\n    local n=$2\n    local -a array\n    local i\n    local j\n    local k\n    local -i len\n    local -i n_mod\n    local -i n_mod_minus_1\n    local -i n_mod_minus_2\n    local -i n_mod_minus_3\n    local -i n_mod_minus_4\n    local -i n_mod_minus_5\n    local -i n_mod_minus_6\n    local -i n_mod_minus_7\n    local -i n_mod_minus_8\n    local -i n_mod_minus_9\n    local -i n_mod_minus_10\n    local -i n_mod_minus_11\n    local -i n_mod_minus_12\n    local -i n_mod_minus_13\n    local -i n_mod_minus_14\n    local -i n_mod_minus_15\n    local -i n_mod_minus_16\n    local -i n_mod_minus_17\n    local -i n_mod_minus_18\n    local -i n_mod_minus_19\n    local -i n_mod_minus_20\n    local -i n_mod_minus_21\n    local -i n_mod_minus_22\n    local -i n_mod_minus_23\n    local -i n_mod_minus_24\n    local -i n_mod_minus_25\n    local -i n_mod_minus_26\n    local -i n_mod_minus_27\n    local -i n_mod_minus_28\n    local -i n_mod_minus_29\n    local -i n_mod_minus_30\n    local -i n_mod_minus_31\n    local -i n_mod_minus_32\n    local -i n_mod_minus_33\n    local -i n_mod_minus_34\n    local -i n_mod_minus_35\n    local -i n_mod_minus_36\n    local -i n_mod_minus_37\n    local -i n_mod_minus_38\n    local -i n_mod_minus_39",
    "    local list=$1\n    local n=$2\n    local rotated_list=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local list_length=0\n    local list_array=()\n\n    # Split the list into an array\n    list_array=($list)\n    list_length=${#list_array[@]}\n\n    # Rotate the list\n    for ((i=0; i<$list_length; i++)); do\n        j=$((i+n))\n        if [ $j -ge $list_length ]; then\n            j=$((j-list_length))\n        fi\n        rotated_list[$k]=${list_array[$j]}\n        k=$((k+1))\n    done\n\n    # Print the rotated list\n    echo ${rotated_list[@]}",
    "    local list=$1\n    local n=$2\n    local result=\"\"\n    local i=0\n    local len=${#list}\n    while [ $i -lt $len ]; do\n        local index=$((($i + $n) % $len))\n        result=\"$result${list:$index:1}\"\n        i=$((i+1))\n    done\n    echo \"$result\"",
    "    local -n arr=$1\n    local n=$2\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local tmp=${arr[$((len-1))]}\n        local j\n        for ((j=len-1; j>0; j--)); do\n            arr[$j]=${arr[$((j-1))]}\n        done\n        arr[0]=$tmp\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a arr\n    local i\n    local j\n    local k\n    local tmp\n\n    IFS=\" \" read -r -a arr <<< \"$list\"\n    for ((i=0; i<n; i++)); do\n        tmp=${arr[-1]}\n        for ((j=${#arr[@]}-1; j>0; j--)); do\n            arr[j]=${arr[j-1]}\n        done\n        arr[0]=$tmp\n    done\n    for ((k=0; k<${#arr[@]}; k++)); do\n        printf \"%s \" \"${arr[k]}\"\n    done\n    printf \"\\n\"",
    "    local list=$1\n    local n=$2\n    local list_len=${#list}\n    local new_list=()\n    for ((i=0; i<list_len; i++)); do\n        new_list[$(((i+n)%list_len))]=${list[$i]}\n    done\n    echo ${new_list[@]}",
    "    local list=$1\n    local n=$2\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local temp=0\n    local temp2=0\n\n    len=${#list}\n    for ((i=0; i<len; i++)); do\n        temp=$(echo $list | cut -d' ' -f$((i+1)))\n        temp2=$((temp+n))\n        if [ $temp2 -gt $len ]; then\n            temp2=$((temp2-len))\n        fi\n        result=\"$result $temp2\"\n    done\n    echo $result",
    "    local list=$1\n    local n=$2\n    local new_list=()\n    local i=0\n    local j=0\n    local len=0\n    local index=0\n\n    len=${#list[@]}\n    for ((i=0; i<len; i++)); do\n        index=$(( (i+n) % len ))\n        new_list[$i]=${list[$index]}\n    done\n\n    echo ${new_list[@]}",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a array\n    local -i i\n    local -i len\n    local -i n_mod\n    local -i start\n    local -i end\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_mod_minus_1\n    local -i n_mod_minus_2\n    local -i n_mod_minus_3\n    local -i n_mod_minus_4\n    local -i n_mod_minus_5\n    local -i n_mod_minus_6\n    local -i n_mod_minus_7\n    local -i n_mod_minus_8\n    local -i n_mod_minus_9\n    local -i n_mod_minus_10\n    local -i n_mod_minus_11\n    local -i n_mod_minus_12\n    local -i n_mod_minus_13\n    local -i n_mod_minus_14\n    local -i n_mod_minus_15\n    local -i n_mod_minus_16\n    local -i n_mod_minus_17\n    local -i n_mod_minus_18\n    local -i n_mod_minus_19\n    local -i n_mod_minus_20\n    local -i n_mod_minus_21\n    local -i n_mod_minus_22\n    local -i n_mod_minus_23\n    local -i n_mod_minus_24\n    local -i n_mod_minus_25\n    local -i n_mod_minus_26\n    local -i n_mod_minus_27\n    local -i n_mod_minus_28\n    local -i n_mod_minus_29\n    local -i n_mod_minus_30\n    local -i n_mod_minus_31\n    local -i n_mod_minus_32\n    local -i n_mod_minus_33\n    local -i n_mod_minus_34\n    local -i n_mod_minus_35\n    local -i n_mod_minus_36\n   ",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a array\n    local -a rotated\n    local i\n    local j\n    local k\n    local len\n\n    # Convert the list to an array\n    array=($list)\n\n    # Get the length of the array\n    len=${#array[@]}\n\n    # Rotate the array\n    for ((i=0; i<len; i++)); do\n        j=$((i+n))\n        k=$((j%len))\n        rotated[$i]=${array[$k]}\n    done\n\n    # Convert the array back to a list\n    echo \"${rotated[@]}\"",
    "    local list=$1\n    local n=$2\n    local result=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local temp=0\n    local arr=()\n\n    # convert string to array\n    arr=($list)\n    len=${#arr[@]}\n\n    # rotate array\n    for ((i=0; i<n; i++))\n    do\n        temp=${arr[$len-1]}\n        for ((j=$len-1; j>0; j--))\n        do\n            arr[$j]=${arr[$j-1]}\n        done\n        arr[0]=$temp\n    done\n\n    # convert array to string\n    for ((k=0; k<len; k++))\n    do\n        result=\"$result ${arr[$k]}\"\n    done\n\n    echo $result",
    "  local list=$1\n  local n=$2\n  local result=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local temp=0\n  local temp2=0\n  local temp3=0\n  local temp4=0\n  local temp5=0\n  local temp6=0\n  local temp7=0\n  local temp8=0\n  local temp9=0\n  local temp10=0\n  local temp11=0\n  local temp12=0\n  local temp13=0\n  local temp14=0\n  local temp15=0\n  local temp16=0\n  local temp17=0\n  local temp18=0\n  local temp19=0\n  local temp20=0\n  local temp21=0\n  local temp22=0\n  local temp23=0\n  local temp24=0\n  local temp25=0\n  local temp26=0\n  local temp27=0\n  local temp28=0\n  local temp29=0\n  local temp30=0\n  local temp31=0\n  local temp32=0\n  local temp33=0\n  local temp34=0\n  local temp35=0\n  local temp36=0\n  local temp37=0\n  local temp38=0\n  local temp39=0\n  local temp40=0\n  local temp41=0\n  local temp42=0\n  local temp43=0\n  local temp44=0\n  local temp45=0\n  local temp46=0\n  local temp47=0\n  local temp48=0\n  local temp49=0\n  local temp50=0\n  local temp51=0\n  local temp52=0\n  local temp53=0\n  local temp54=0\n  local temp55=0\n  local temp56=0\n  local temp57=0\n  local temp58=0\n  local temp59=0\n  local temp60=0\n  local temp61=0\n  local temp62=0\n  local temp63=0\n  local temp64=0\n  local temp65=0\n  local temp66=0\n  local temp67=0\n  local",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local list_len=\"$(echo \"$list\" | wc -w)\"\n    local new_list=\"\"\n    local i\n    for ((i=0; i<list_len; i++)); do\n        local item=\"$(echo \"$list\" | cut -d' ' -f$((i+1)))\"\n        local new_index=$(((i+n)%list_len))\n        new_list=\"$new_list $(echo \"$list\" | cut -d' ' -f$((new_index+1)))\"\n    done\n    echo \"$new_list\""
  ]
}