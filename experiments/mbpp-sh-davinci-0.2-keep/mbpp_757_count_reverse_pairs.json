{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n#\n# $1 is a space-separated list\ncount_reverse_pairs() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    count_reverse_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"julia best tseb for ailuj\") = \"2\" ]]\n    [[ $(candidate \"geeks best for skeeg\") = \"1\" ]]\n    [[ $(candidate \"makes best sekam for rof\") = \"2\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=$1\n    local count=0\n    for word in $list; do\n        for word2 in $list; do\n            if [[ $word == $(rev <<< $word2) ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  local word\n  for word in $list; do\n    if [[ \"$word\" == $(rev <<< \"$word\") ]]; then\n      ((count++))\n    fi\n  done\n  echo $count",
    "    local list=\"$1\"\n    local count=0\n    for word in $list; do\n        local reverse=$(echo $word | rev)\n        if [[ $word == $reverse ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count",
    "    local list=$1\n    local count=0\n    local i=0\n    local j=0\n    local len=${#list}\n    local reverse=\"\"\n    local word=\"\"\n\n    for ((i=0; i<len; i++)); do\n        word=${list:i:1}\n        for ((j=i+1; j<len; j++)); do\n            reverse=${list:j:1}\n            if [[ $word == $reverse ]]; then\n                ((count++))\n            fi\n        done\n    done\n\n    echo $count",
    "    local list=$1\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [[ $i == $(echo $j | rev) ]]; then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  for word in $list; do\n    if [[ \"$word\" == $(rev <<< \"$word\") ]]; then\n      ((count++))\n    fi\n  done\n  echo $count",
    "    local list=\"$1\"\n    local count=0\n    local word\n    for word in $list; do\n        local reverse=\"$(echo \"$word\" | rev)\"\n        if [[ \"$word\" = \"$reverse\" ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo \"$count\"",
    "    local list=\"$1\"\n    local count=0\n    for word in $list; do\n        local reverse_word=$(echo $word | rev)\n        if [[ $list =~ $reverse_word ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo $count",
    "    local list=$1\n    local count=0\n    for word in $list; do\n        local reverse=$(echo $word | rev)\n        if [[ $list =~ $reverse ]]; then\n            ((count++))\n        fi\n    done\n    echo $count",
    "    local list=$1\n    local count=0\n    for word in $list; do\n        local reverse_word=$(echo $word | rev)\n        if [[ $list =~ $reverse_word ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo $count",
    "    local list=\"$1\"\n    local count=0\n    local word\n    for word in $list; do\n        local reverse=\"$(echo \"$word\" | rev)\"\n        if [[ \"$word\" == \"$reverse\" ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo \"$count\"",
    "  local list=$1\n  local count=0\n  local i=0\n  local j=0\n  local len=0\n  local rev=''\n  local arr=()\n  for i in $list; do\n    arr[$len]=$i\n    len=$((len+1))\n  done\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      rev=$(echo ${arr[$i]} | rev)\n      if [[ $rev == ${arr[$j]} ]]; then\n        count=$((count+1))\n      fi\n    done\n  done\n  echo $count",
    "    local list=$1\n    local count=0\n    local i=0\n    local j=0\n    local len=0\n    local temp=0\n    local reverse=0\n    local list_array=()\n    local reverse_array=()\n\n    # Convert the list to an array\n    list_array=($list)\n\n    # Get the length of the list\n    len=${#list_array[@]}\n\n    # Loop through the list\n    for ((i=0; i<len; i++)); do\n        # Get the reverse of the current element\n        reverse=$(reverse_string ${list_array[$i]})\n\n        # Loop through the list again\n        for ((j=i+1; j<len; j++)); do\n            # If the current element is the reverse of the current element\n            if [ \"$reverse\" == \"${list_array[$j]}\" ]; then\n                # Increment the count\n                count=$((count+1))\n            fi\n        done\n    done\n\n    # Return the count\n    echo $count",
    "    local list=\"$1\"\n    local count=0\n    local word\n    for word in $list; do\n        local reverse=\"$(echo \"$word\" | rev)\"\n        if [[ \"$word\" == \"$reverse\" ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo \"$count\"",
    "    local list=$1\n    local count=0\n    for word in $list; do\n        local reverse=$(echo $word | rev)\n        if [[ $list =~ $reverse ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo $count",
    "    local list=$1\n    local count=0\n    for word in $list; do\n        local reverse=`echo $word | rev`\n        for word2 in $list; do\n            if [ \"$word2\" = \"$reverse\" ]; then\n                count=$((count+1))\n            fi\n        done\n    done\n    echo $count",
    "  local -a words=($1)\n  local -i count=0\n  local -i i=0\n  local -i j=0\n  local -i len=${#words[@]}\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n ",
    "    local list=$1\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [[ \"$i\" == \"$(rev <<< $j)\" ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  for word in $list; do\n    local reverse=\"$(echo $word | rev)\"\n    if [[ \"$word\" == \"$reverse\" ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo $count",
    "    local list=$1\n    local count=0\n    local i=0\n    local j=0\n    local len=0\n    local rev=''\n    local word=''\n    local words=()\n    local revs=()\n    # Split the list into an array\n    IFS=' ' read -r -a words <<< \"$list\"\n    len=${#words[@]}\n    # Reverse each word and store it in an array\n    for ((i=0; i<len; i++)); do\n        word=${words[i]}\n        rev=''\n        for ((j=${#word}-1; j>=0; j--)); do\n            rev+=${word:$j:1}\n        done\n        revs[i]=$rev\n    done\n    # Compare each word with its reverse\n    for ((i=0; i<len; i++)); do\n        word=${words[i]}\n        for ((j=0; j<len; j++)); do\n            if [ \"$word\" == \"${revs[j]}\" ]; then\n                count=$((count+1))\n            fi\n        done\n    done\n    # Return the count\n    echo $count"
  ]
}