{
  "name": "mbpp_166_find_even_pair",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that counts the number of pairs of integers in a list that xor to an even number.\n#\n# $1 is a space-separated list\nfind_even_pair() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    find_even_pair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 4 7 2 1\") = \"4\" ]]\n    [[ $(candidate \"7 2 8 1 0 5 11\") = \"9\" ]]\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=\"$1\"\n    local count=0\n    local i\n    local j\n    for i in $list; do\n        for j in $list; do\n            if [ $((i ^ j)) -eq 0 ]; then\n                count=$((count + 1))\n            fi\n        done\n    done\n    echo $count",
    "    local -a list=($1)\n    local -i count=0\n    local -i i j\n    for ((i=0; i<${#list[@]}; i++)); do\n        for ((j=i+1; j<${#list[@]}; j++)); do\n            (( (list[i] ^ list[j]) % 2 == 0 )) && ((count++))\n        done\n    done\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  for i in $list; do\n    for j in $list; do\n      if (( (i ^ j) % 2 == 0 )); then\n        (( count++ ))\n      fi\n    done\n  done\n  echo $count",
    "    local list=\"$1\"\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [ $((i ^ j)) -eq $(((i ^ j) / 2 * 2)) ]; then\n                count=$((count + 1))\n            fi\n        done\n    done\n    echo $count",
    "  local -a list=($1)\n  local -i count=0\n  for ((i=0; i<${#list[@]}; i++)); do\n    for ((j=i+1; j<${#list[@]}; j++)); do\n      ((list[i]^list[j]%2==0)) && ((count++))\n    done\n  done\n  echo $count",
    "  local list=$1\n  local count=0\n  local i j\n  for i in $list; do\n    for j in $list; do\n      if (( (i ^ j) % 2 == 0 )); then\n        (( count++ ))\n      fi\n    done\n  done\n  echo $count",
    "  local list=$1\n  local count=0\n  for i in $list; do\n    for j in $list; do\n      if [ $((i ^ j)) -eq $(((i ^ j) / 2 * 2)) ]; then\n        ((count++))\n      fi\n    done\n  done\n  echo $((count / 2))",
    "    local list=\"$1\"\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [ $(( $i ^ $j )) -eq $(( $i ^ $j )) 2> /dev/null ]; then\n                if [ $(( $i ^ $j )) -eq 0 ]; then\n                    count=$(( count + 1 ))\n                fi\n            fi\n        done\n    done\n    echo $(( count / 2 ))",
    "  local -i count=0\n  local -a list=($1)\n  local -i len=${#list[@]}\n  local -i i=0\n  local -i j=0\n  local -i xor=0\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      xor=$((list[i] ^ list[j]))\n      ((xor % 2 == 0)) && ((count++))\n    done\n  done\n  echo $count",
    "  local list=\"$1\"\n  local count=0\n  for i in $list; do\n    for j in $list; do\n      if (( (i ^ j) % 2 == 0 )); then\n        (( count++ ))\n      fi\n    done\n  done\n  echo $count",
    "  local list=\"$1\"\n  local count=0\n  local i\n  local j\n  for i in $list; do\n    for j in $list; do\n      if [ $((i ^ j)) -eq $(((i ^ j) / 2 * 2)) ]; then\n        count=$((count + 1))\n      fi\n    done\n  done\n  echo $count",
    "    local list=$1\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [ $((i ^ j)) -eq $(((i ^ j) / 2 * 2)) ]; then\n                count=$((count + 1))\n            fi\n        done\n    done\n    echo $((count / 2))",
    "  local list=\"$1\"\n  local count=0\n  local i\n  local j\n  for i in $list; do\n    for j in $list; do\n      if [[ $((i ^ j)) -eq 0 ]]; then\n        ((count++))\n      fi\n    done\n  done\n  echo $((count / 2))",
    "  local list=\"$1\"\n  local count=0\n  for i in $list; do\n    for j in $list; do\n      if [ $(( $i ^ $j )) -eq 0 ]; then\n        count=$(( count + 1 ))\n      fi\n    done\n  done\n  echo $count",
    "    local list=\"$1\"\n    local count=0\n    local i j\n    for i in $list; do\n        for j in $list; do\n            if (( (i ^ j) % 2 == 0 )); then\n                (( count++ ))\n            fi\n        done\n    done\n    echo $count",
    "    local -a arr=($1)\n    local count=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( (${arr[i]} ^ ${arr[j]}) % 2 == 0 )); then\n                ((count++))\n            fi\n        done\n    done\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  local i\n  local j\n  for i in $list; do\n    for j in $list; do\n      if [[ $(( $i ^ $j )) -eq 0 ]]; then\n        (( count++ ))\n      fi\n    done\n  done\n  echo $(( count / 2 ))",
    "    local list=\"$1\"\n    local count=0\n    local x\n    local y\n    for x in $list; do\n        for y in $list; do\n            if [ $((x ^ y)) -eq $(((x ^ y) / 2 * 2)) ]; then\n                count=$((count + 1))\n            fi\n        done\n    done\n    echo $((count / 2))",
    "  local list=\"$1\"\n  local count=0\n  for i in $list; do\n    for j in $list; do\n      if [ $(( $i ^ $j )) -eq $(( $i ^ $j )) 2> /dev/null ]; then\n        if [ $(( $i ^ $j )) -eq 0 ]; then\n          (( count++ ))\n        fi\n      fi\n    done\n  done\n  echo $(( count / 2 ))",
    "  local -n _list=$1\n  local count=0\n  for i in \"${_list[@]}\"; do\n    for j in \"${_list[@]}\"; do\n      if (( (i ^ j) % 2 == 0 )); then\n        (( count++ ))\n      fi\n    done\n  done\n  echo $count"
  ]
}