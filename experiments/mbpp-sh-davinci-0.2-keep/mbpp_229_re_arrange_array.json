{
  "name": "mbpp_229_re_arrange_array",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n#\n# $1 is a space-separated list\n# $2 is an integer\nre_arrange_array() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    re_arrange_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 2 -3 4 5 6 -7 8 9\" \"9\") = \"-1 -3 -7 4 5 6 2 8 9\" ]]\n    [[ $(candidate \"12 -14 -26 13 15\" \"5\") = \"-14 -26 12 13 15\" ]]\n    [[ $(candidate \"10 24 36 -42 -39 -78 85\" \"7\") = \"-42 -39 -78 10 24 36 85\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local tmp=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -lt 0 ]; then\n      tmp=${arr[$i]}\n      arr[$i]=${arr[$j]}\n      arr[$j]=$tmp\n      ((j++))\n    fi\n    ((i++))\n  done",
    "  local -n arr=$1\n  local n=$2\n  local -a neg_arr\n  local -a pos_arr\n  local -a result_arr\n  local i\n  for i in ${arr[@]}; do\n    if [[ $i -lt 0 ]]; then\n      neg_arr+=(\"$i\")\n    else\n      pos_arr+=(\"$i\")\n    fi\n  done\n  for ((i=0; i<n; i++)); do\n    if [[ ${neg_arr[$i]} ]]; then\n      result_arr+=(\"${neg_arr[$i]}\")\n    else\n      result_arr+=(\"${pos_arr[$i]}\")\n    fi\n  done\n  for ((i=n; i<${#arr[@]}; i++)); do\n    if [[ ${pos_arr[$i]} ]]; then\n      result_arr+=(\"${pos_arr[$i]}\")\n    else\n      result_arr+=(\"${neg_arr[$i]}\")\n    fi\n  done\n  echo \"${result_arr[@]}\"",
    "  local -n array=$1\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  local len=${#array[@]}\n  while [ $i -lt $len ]; do\n    if [ ${array[$i]} -lt 0 ]; then\n      temp=${array[$i]}\n      array[$i]=${array[$j]}\n      array[$j]=$temp\n      ((j++))\n    fi\n    ((i++))\n  done",
    "  local array=($1)\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  for ((i=0; i<n; i++))\n  do\n    if [[ ${array[i]} -lt 0 ]]\n    then\n      temp=${array[i]}\n      for ((j=i; j>0 && ${array[j-1]} -ge 0; j--))\n      do\n        array[j]=${array[j-1]}\n      done\n      array[j]=$temp\n    fi\n  done\n  echo ${array[@]}",
    "  local -n arr=\"$1\"\n  local n=\"$2\"\n  local i=0\n  local j=0\n  local temp\n\n  while [[ $i -lt $n ]]; do\n    if [[ ${arr[$i]} -lt 0 ]]; then\n      temp=${arr[$i]}\n      arr[$i]=${arr[$j]}\n      arr[$j]=$temp\n      ((j++))\n    fi\n    ((i++))\n  done",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -lt 0 ]\n    then\n      temp=${arr[$i]}\n      arr[$i]=${arr[$j]}\n      arr[$j]=$temp\n      j=$((j+1))\n    fi\n    i=$((i+1))\n  done",
    "    local -a arr=(\"${!1}\")\n    local n=$2\n    local -a result=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0",
    "  local -a array=(\"${@:1:$2}\")\n  local -a positive_array=()\n  local -a negative_array=()\n\n  for ((i=0; i<${#array[@]}; i++)); do\n    if [[ ${array[$i]} -lt 0 ]]; then\n      negative_array+=(${array[$i]})\n    else\n      positive_array+=(${array[$i]})\n    fi\n  done\n\n  echo \"${negative_array[@]} ${positive_array[@]}\"",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt 0 ]]; then\n      temp=${arr[i]}\n      for ((j=i; j>0 && ${arr[j-1]} -ge 0; j--)); do\n        arr[j]=${arr[j-1]}\n      done\n      arr[j]=$temp\n    fi\n  done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local tmp=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -lt 0 ]\n        then\n            tmp=${arr[$i]}\n            arr[$i]=${arr[$j]}\n            arr[$j]=$tmp\n            ((j++))\n        fi\n        ((i++))\n    done",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt 0 ]]; then\n      temp=${arr[i]}\n      for ((j=i; j>0 && ${arr[j-1]} -ge 0; j--)); do\n        arr[j]=${arr[j-1]}\n      done\n      arr[j]=$temp\n    fi\n  done",
    "  local array=($1)\n  local n=$2\n\n  local i=0\n  local j=0\n  local temp=0\n\n  for ((i=0; i<n; i++))\n  do\n    if [[ ${array[i]} -lt 0 ]]\n    then\n      temp=${array[i]}\n      array[i]=${array[j]}\n      array[j]=$temp\n      ((j++))\n    fi\n  done\n\n  echo ${array[*]}",
    "  local array=($1)\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n\n  while (( i < n ))\n  do\n    if (( array[i] < 0 ))\n    then\n      temp=${array[i]}\n      array[i]=${array[j]}\n      array[j]=$temp\n      (( j++ ))\n    fi\n    (( i++ ))\n  done\n\n  echo ${array[@]}",
    "    local -a arr=(\"${!1}\")\n    local n=$2\n    local -a neg=()\n    local -a pos=()\n    for i in \"${arr[@]}\"; do\n        if (( i < 0 )); then\n            neg+=($i)\n        else\n            pos+=($i)\n        fi\n    done\n    echo \"${neg[@]}\" \"${pos[@]}\" | tr ' ' '\\n' | head -n $n",
    "    local -a arr=(\"${!1}\")\n    local n=$2\n    local -a neg=()\n    local -a pos=()\n    local -a res=()\n    for ((i=0; i<n; i++)); do\n        if ((arr[i] < 0)); then\n            neg+=(${arr[i]})\n        else\n            pos+=(${arr[i]})\n        fi\n    done\n    res=(${neg[@]} ${pos[@]})\n    echo \"${res[@]}\"",
    "  local -n arr=$1\n  local n=$2\n  local tmp\n  local i\n  local j\n  for ((i=0; i<n; i++)); do\n    for ((j=i+1; j<n; j++)); do\n      if [[ ${arr[i]} -gt 0 && ${arr[j]} -lt 0 ]]; then\n        tmp=${arr[i]}\n        arr[i]=${arr[j]}\n        arr[j]=$tmp\n      fi\n    done\n  done",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -lt 0 ]\n    then\n      temp=${arr[$i]}\n      arr[$i]=${arr[$j]}\n      arr[$j]=$temp\n      ((j++))\n    fi\n    ((i++))\n  done",
    "    local -a arr=(\"${!1}\")\n    local n=\"$2\"\n    local -a neg_arr=()\n    local -a pos_arr=()\n    local -a result=()\n    local i\n    for ((i = 0; i < n; i++)); do\n        if ((arr[i] < 0)); then\n            neg_arr+=(\"${arr[i]}\")\n        else\n            pos_arr+=(\"${arr[i]}\")\n        fi\n    done\n    result=(\"${neg_arr[@]}\" \"${pos_arr[@]}\")\n    echo \"${result[@]}\"",
    "  local -n arr=$1\n  local n=$2\n  local -a neg_arr\n  local -a pos_arr\n  local -a res_arr\n  local i\n  local j\n  local k\n\n  for ((i=0; i<n; i++)); do\n    if ((arr[i] < 0)); then\n      neg_arr+=(${arr[i]})\n    else\n      pos_arr+=(${arr[i]})\n    fi\n  done\n\n  for ((i=0; i<${#neg_arr[@]}; i++)); do\n    res_arr+=(${neg_arr[i]})\n  done\n\n  for ((i=0; i<${#pos_arr[@]}; i++)); do\n    res_arr+=(${pos_arr[i]})\n  done\n\n  for ((i=0; i<${#res_arr[@]}; i++)); do\n    arr[i]=${res_arr[i]}\n  done",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local tmp=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -lt 0 ]; then\n      tmp=${arr[$i]}\n      arr[$i]=${arr[$j]}\n      arr[$j]=$tmp\n      j=$((j+1))\n    fi\n    i=$((i+1))\n  done"
  ]
}