{
  "name": "mbpp_135_hexagonal_num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the nth hexagonal number.\n#\n# $1 is an integer\nhexagonal_num() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    hexagonal_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"190\" ]]\n    [[ $(candidate \"5\") = \"45\" ]]\n    [[ $(candidate \"7\") = \"91\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $(( n * (2 * n - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo \"scale=0; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    # nth hexagonal number is equal to 2n^2 - n\n    echo $((2 * $1 * $1 - $1))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"scale=0; $1*(2*$1-1)\" | bc",
    "    n=$1\n    echo $(( n * (2 * n - 1) ))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  n=$1\n  echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    if [ $1 -lt 1 ]; then\n        echo \"Error: argument must be greater than 0.\"\n        return 1\n    fi\n    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo \"scale=0; $1 * (2 * $1 - 1)\" | bc",
    "  local n=$1\n  echo $(( n * (2 * n - 1) ))",
    "    echo \"scale=0; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $(( n * (2 * n - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $(( n * (2 * n - 1) ))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $(( n * (2 * n - 1) ))",
    "  echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    if [[ $1 -lt 1 ]]; then\n        echo \"Error: Argument must be a positive integer.\"\n        return 1\n    fi\n\n    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo \"scale=0; $1 * (2 * $1 - 1)\" | bc",
    "  echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "    if [[ $1 -lt 1 ]]; then\n        echo \"Error: argument must be greater than 0\"\n        return 1\n    fi\n    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  if [[ $1 -lt 1 ]]; then\n    echo \"Error: argument must be greater than 0\"\n    return 1\n  fi\n\n  echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    if [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $1 * (2 * $1 - 1) ))\n    fi",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo \"scale=0; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo \"scale=0; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  local hex_num=$((n * (2 * n - 1)))\n  echo $hex_num",
    "  if [ $1 -eq 1 ]; then\n    echo 1\n  else\n    echo $(( $1 * (2 * $1 - 1) ))\n  fi",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    # nth hexagonal number is 2n^2 - n\n    echo $((2 * $1 * $1 - $1))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"obase=16; $(echo \"scale=0; $1*(2*$1-1)\" | bc)\" | bc",
    "  echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    # nth hexagonal number is equal to n * (2 * n - 1)\n    echo \"$1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    local hex_num=$((n*(2*n-1)))\n    echo $hex_num",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  (( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $(( n * (2 * n - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    else\n        echo $(( $1 * (2 * $1 - 1) ))\n    fi",
    "    local n=$1\n    echo $((n*(2*n-1)))"
  ]
}