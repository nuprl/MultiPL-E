{
  "name": "mbpp_751_check_min_heap",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n#\n# $1 is a space-separated list\ncheck_min_heap() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    check_min_heap \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"2 3 4 5 10 15\") = \"true\" ]]\n    [[ $(candidate \"2 10 4 5 3 15\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a heap=(\"$@\")\n    local -i i=0\n    local -i n=${#heap[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i last_parent=0\n    local -i last_left=0\n    local -i last_right=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i",
    "    local -a a=($1)\n    local n=${#a[@]}\n    local i=0\n    local flag=0\n    while [ $i -lt $((n/2)) ]\n    do\n        if [ $((2*i+1)) -lt $n ] && [ ${a[$i]} -gt ${a[$((2*i+1))]} ]\n        then\n            flag=1\n            break\n        fi\n        if [ $((2*i+2)) -lt $n ] && [ ${a[$i]} -gt ${a[$((2*i+2))]} ]\n        then\n            flag=1\n            break\n        fi\n        i=$((i+1))\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"Given array is a min heap\"\n    else\n        echo \"Given array is not a min heap\"\n    fi",
    "    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local l=$((2*i + 1))\n        local r=$((2*i + 2))\n        if ((l < n && arr[i] > arr[l])) || ((r < n && arr[i] > arr[r])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]\n    do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "  local -a arr=(\"$@\")\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((2*i+1 < ${#arr[@]})) && ((arr[i] > arr[2*i+1])); then\n      return 1\n    fi\n    if ((2*i+2 < ${#arr[@]})) && ((arr[i] > arr[2*i+2])); then\n      return 1\n    fi\n  done\n  return 0",
    "    local array=($1)\n    local i=0\n    local n=${#array[@]}\n    local left_child\n    local right_child\n    local parent\n    local is_min_heap=1\n\n    while [ $i -lt $n ]\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        parent=$((i-1/2))\n\n        if [ $left_child -lt $n ] && [ ${array[$left_child]} -lt ${array[$i]} ]\n        then\n            is_min_heap=0\n            break\n        fi\n\n        if [ $right_child -lt $n ] && [ ${array[$right_child]} -lt ${array[$i]} ]\n        then\n            is_min_heap=0\n            break\n        fi\n\n        if [ $parent -ge 0 ] && [ ${array[$i]} -lt ${array[$parent]} ]\n        then\n            is_min_heap=0\n            break\n        fi\n\n        i=$((i+1))\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n\n    while (( i < len )); do\n        left_child=$(( 2 * i + 1 ))\n        right_child=$(( 2 * i + 2 ))\n\n        if (( left_child < len )); then\n            if (( arr[i] > arr[left_child] )); then\n                return 1\n            fi\n        fi\n\n        if (( right_child < len )); then\n            if (( arr[i] > arr[right_child] )); then\n                return 1\n            fi\n        fi\n\n        (( i++ ))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=1; i<n; i++))\n    do\n        if [[ ${arr[$((i-1))]} -gt ${arr[$i]} ]]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a arr=($1)\n    local i\n    local l\n    local r\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        l=$((2*i+1))\n        r=$((2*i+2))\n        if [[ $l -lt $n && ${arr[$i]} -gt ${arr[$l]} ]]; then\n            return 1\n        fi\n        if [[ $r -lt $n && ${arr[$i]} -gt ${arr[$r]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a array=($1)\n  local -i n=${#array[@]}\n  local -i i=0\n  local -i left=0\n  local -i right=0\n  local -i parent=0\n  for ((i=1; i<n; i++))\n  do\n    left=$((2*i+1))\n    right=$((2*i+2))\n    parent=$((i-1))\n    if [[ $left -lt $n && ${array[$left]} -lt ${array[$parent]} ]]\n    then\n      echo \"false\"\n      return\n    fi\n    if [[ $right -lt $n && ${array[$right]} -lt ${array[$parent]} ]]\n    then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < ${#arr[@]} && arr[i] > arr[left])) || ((right < ${#arr[@]} && arr[i] > arr[right])); then\n            echo \"Not a min heap\"\n            return 1\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n / 2 - 1))\n    while [ $i -le $last_parent ]; do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            echo \"false\"\n            return\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i + 1))\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "  local arr=($1)\n  local len=${#arr[@]}\n  local i\n  for ((i=0; i<len; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n      echo \"false\"\n      return\n    fi\n    if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n && ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n            return 1\n        fi\n        if [[ $((2*i+2)) -lt $n && ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local eeee=0\n    local",
    "    local -n arr=$1\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n    for ((i=0; i<=last_parent; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local i=0\n  local n=${#arr[@]}\n  local last_parent=$((n/2 - 1))\n  while [ $i -le $last_parent ]; do\n    local left=$((2*i + 1))\n    local right=$((2*i + 2))\n    if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n      return 1\n    fi\n    if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n      return 1\n    fi\n    i=$((i + 1))\n  done\n  return 0",
    "    local -a array=($1)\n    local -i i=0\n    local -i n=${#array[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i last_parent=0\n\n    # Check if the given array represents a min heap\n    while [ $i -lt $n ]\n    do\n        parent=$((i - 1))\n        left=$((2 * parent + 1))\n        right=$((2 * parent + 2))\n\n        if [ $left -lt $n ] && [ ${array[$parent]} -gt ${array[$left]} ]\n        then\n            echo \"The given array does not represent a min heap\"\n            return 1\n        fi\n\n        if [ $right -lt $n ] && [ ${array[$parent]} -gt ${array[$right]} ]\n        then\n            echo \"The given array does not represent a min heap\"\n            return 1\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo \"The given array represents a min heap\"\n    return 0",
    "  local -a array=($1)\n  local i\n  local n=${#array[@]}\n  for ((i=0; i<n; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if ((left < n && array[i] > array[left])) || ((right < n && array[i] > array[right])); then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2 - 1))\n    for ((i=0; i<=last_parent; i++)); do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]\n    do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    local parent\n    local left\n    local right\n\n    for ((i = 1; i < n; i++)); do\n        parent=$((i - 1))\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n\n        if [[ $left -lt $n && ${arr[$parent]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n\n        if [[ $right -lt $n && ${arr[$parent]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local left_child=0\n  local right_child=0\n  local parent=0\n  local is_min_heap=1\n\n  while [ $i -lt $len ]; do\n    left_child=$((2*i + 1))\n    right_child=$((2*i + 2))\n    parent=$((i - 1))\n\n    if [ $left_child -lt $len ] && [ $right_child -lt $len ]; then\n      if [ ${arr[$i]} -gt ${arr[$left_child]} ] || [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n        is_min_heap=0\n        break\n      fi\n    elif [ $left_child -lt $len ]; then\n      if [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n        is_min_heap=0\n        break\n      fi\n    elif [ $right_child -lt $len ]; then\n      if [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n        is_min_heap=0\n        break\n      fi\n    fi\n\n    i=$((i + 1))\n  done\n\n  echo $is_min_heap",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "  local -a arr=($1)\n  local n=${#arr[@]}\n  local i\n  for ((i=0; i<n; i++)); do\n    if [[ $((2*i+1)) -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n      return 1\n    fi\n    if [[ $((2*i+2)) -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local parent_index=0\n    local left_child_index=0\n    local right_child_index=0\n\n    while [ $i -lt $n ]\n    do\n        parent_index=$((i))\n        left_child_index=$((2*i+1))\n        right_child_index=$((2*i+2))\n\n        if [ $left_child_index -lt $n ] && [ ${arr[$parent_index]} -gt ${arr[$left_child_index]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n\n        if [ $right_child_index -lt $n ] && [ ${arr[$parent_index]} -gt ${arr[$right_child_index]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n\n        i=$((i+1))\n    done\n\n    echo \"Min heap\"",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a a=($1)\n    local i\n    for ((i=0; i<${#a[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#a[@]} ]]; then\n            if [[ ${a[$i]} -gt ${a[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt ${#a[@]} ]]; then\n            if [[ ${a[$i]} -gt ${a[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a a=($1)\n    local i=0\n    local n=${#a[@]}\n    local last_parent=$((n/2-1))\n    local left_child right_child\n\n    while [[ $i -le $last_parent ]]; do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [[ ${a[i]} -gt ${a[left_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right_child -lt $n && ${a[i]} -gt ${a[right_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n        ((i++))\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local array=($1)\n  local len=${#array[@]}\n  local i\n  local left_child\n  local right_child\n  local parent\n\n  for ((i=1; i<len; i++)); do\n    parent=$((i/2))\n    left_child=$((2*i))\n    right_child=$((2*i+1))\n\n    if [[ $left_child -lt $len ]]; then\n      if [[ ${array[$i]} -lt ${array[$left_child]} ]]; then\n        return 1\n      fi\n    fi\n\n    if [[ $right_child -lt $len ]]; then\n      if [[ ${array[$i]} -lt ${array[$right_child]} ]]; then\n        return 1\n      fi\n    fi\n  done\n\n  return 0",
    "    local -a array=($1)\n    local i\n    local n=${#array[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "\tlocal -a arr=($1)\n\tlocal n=${#arr[@]}\n\tfor ((i=0; i<n; i++)); do\n\t\tlocal left=$((2*i+1))\n\t\tlocal right=$((2*i+2))\n\t\tif [[ $left -lt $n ]] && [[ ${arr[i]} -gt ${arr[left]} ]]; then\n\t\t\treturn 1\n\t\tfi\n\t\tif [[ $right -lt $n ]] && [[ ${arr[i]} -gt ${arr[right]} ]]; then\n\t\t\treturn 1\n\t\tfi\n\tdone\n\treturn 0",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$left]} -lt ${arr[$i]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$right]} -lt ${arr[$i]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a a\n    a=($1)\n    local i\n    for ((i=0; i<${#a[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#a[@]} && ${a[$i]} -gt ${a[$((2*i+1))]} ]]; then\n            return 1\n        fi\n        if [[ $((2*i+2)) -lt ${#a[@]} && ${a[$i]} -gt ${a[$((2*i+2))]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i last_parent=0\n    local -i last_left=0\n    local -i last_right=0\n\n    for ((i=0; i<len; i++)); do\n        parent=$((i/2))\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${array[$i]} -lt ${array[$parent]} ]]; then\n                last_parent=$parent\n                last_left=$left\n                last_right=$right\n            else\n                echo \"Not a min heap, ${array[$i]} is less than ${array[$parent]} at index $i\"\n                return 1\n            fi\n        fi\n    done\n    echo \"Min heap, last parent is ${array[$last_parent]} at index $last_parent\"\n    return 0",
    "\tlocal -a array=($1)\n\tlocal i\n\tfor ((i=0; i<${#array[@]}; i++)); do\n\t\tif [[ $((2*i+1)) -lt ${#array[@]} ]]; then\n\t\t\tif [[ ${array[$i]} -gt ${array[$((2*i+1))]} ]]; then\n\t\t\t\treturn 1\n\t\t\tfi\n\t\tfi\n\t\tif [[ $((2*i+2)) -lt ${#array[@]} ]]; then\n\t\t\tif [[ ${array[$i]} -gt ${array[$((2*i+2))]} ]]; then\n\t\t\t\treturn 1\n\t\t\tfi\n\t\tfi\n\tdone\n\treturn 0",
    "    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    for ((i=1; i<len; i++)); do\n        left=$((2*i))\n        right=$((2*i+1))\n        parent=$((i/2))\n\n        if [[ $left -lt $len && ${array[$parent]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n\n        if [[ $right -lt $len && ${array[$parent]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=1; i<n; i++)); do\n        local p=$((i/2))\n        if [[ ${arr[p]} -gt ${arr[i]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local i=0\n  local n=${#arr[@]}\n  local last_parent=$((n / 2 - 1))\n  while [ $i -le $last_parent ]; do\n    local left_child=$((2 * i + 1))\n    local right_child=$((2 * i + 2))\n    if [ $left_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n      return 1\n    fi\n    if [ $right_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n      return 1\n    fi\n    i=$((i + 1))\n  done\n  return 0",
    "\tlocal -a array=($1)\n\tlocal i=0\n\tlocal size=${#array[@]}\n\tlocal left_child_index=0\n\tlocal right_child_index=0\n\tlocal parent_index=0\n\tlocal parent=0\n\tlocal left_child=0\n\tlocal right_child=0\n\n\twhile [ $i -lt $size ]\n\tdo\n\t\tleft_child_index=$((2 * i + 1))\n\t\tright_child_index=$((2 * i + 2))\n\t\tparent_index=$(((i - 1) / 2))\n\t\tparent=${array[$parent_index]}\n\t\tleft_child=${array[$left_child_index]}\n\t\tright_child=${array[$right_child_index]}\n\n\t\tif [ $left_child_index -lt $size ] && [ $left_child -lt $parent ]\n\t\tthen\n\t\t\techo \"Left child is less than parent\"\n\t\t\treturn 1\n\t\tfi\n\n\t\tif [ $right_child_index -lt $size ] && [ $right_child -lt $parent ]\n\t\tthen\n\t\t\techo \"Right child is less than parent\"\n\t\t\treturn 1\n\t\tfi\n\n\t\ti=$((i + 1))\n\tdone\n\n\techo \"Array is a min heap\"\n\treturn 0",
    "  local -a arr=(\"$@\")\n  local i=0\n  local len=${#arr[@]}\n  local last_parent=$((len / 2 - 1))\n  local left_child=$((2 * i + 1))\n  local right_child=$((2 * i + 2))\n\n  for ((i = 0; i <= last_parent; i++)); do\n    if [[ $left_child -lt len ]] && [[ ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n      return 1\n    fi\n    if [[ $right_child -lt len ]] && [[ ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n      return 1\n    fi\n  done\n\n  return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local size=${#arr[@]}\n    local left\n    local right\n    local parent\n    for ((i=1; i<size; i++)); do\n        parent=$((i-1))\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $size && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $size && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    while [ $i -lt $len ]; do\n        if [ $((2 * i + 1)) -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$((2 * i + 1))]} ]; then\n                return 1\n            fi\n        fi\n        if [ $((2 * i + 2)) -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$((2 * i + 2))]} ]; then\n                return 1\n            fi\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n    local is_min_heap=true\n\n    while [ $i -lt $len ]; do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i/2))\n        if [ $left -lt $len ] && [ $right -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$left]} ] || [ ${arr[$i]} -gt ${arr[$right]} ]; then\n                is_min_heap=false\n                break\n            fi\n        elif [ $left -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$left]} ]; then\n                is_min_heap=false\n                break\n            fi\n        elif [ $right -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$right]} ]; then\n                is_min_heap=false\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n    for ((i=0; i<=last_parent; i++)); do\n        local left_child=$((2*i+1))\n        local right_child=$((2*i+2))\n        if [[ $left_child -lt $n && ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right_child -lt $n && ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a heap=($1)\n    local n=${#heap[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${heap[$i]} -gt ${heap[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${heap[$i]} -gt ${heap[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i=0\n    local l=${#arr[@]}\n    local n=$((l / 2 - 1))\n    local c1 c2\n    while ((i <= n)); do\n        c1=$((2 * i + 1))\n        c2=$((2 * i + 2))\n        if ((arr[i] > arr[c1] || (c2 < l && arr[i] > arr[c2]))); then\n            return 1\n        fi\n        ((i++))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local j=0\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++))\n    do\n        if [ $((2*i+1)) -lt $n ]\n        then\n            if [ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]\n            then\n                return 1\n            fi\n        fi\n        if [ $((2*i+2)) -lt $n ]\n        then\n            if [ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]\n            then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i last_parent=$((len/2-1))\n    while [ $i -le $last_parent ]; do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if [ $left -lt $len ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            return 1\n        fi\n        if [ $right -lt $len ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            return 1\n        fi\n        ((i++))\n    done\n    return 0",
    "  local -a arr=($1)\n  local i\n  local n=${#arr[@]}\n  local left\n  local right\n  local parent\n\n  for ((i=1; i<n; i++)); do\n    left=$((2*i+1))\n    right=$((2*i+2))\n    parent=$((i-1))\n    if [[ $left -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n      return 1\n    fi\n    if [[ $right -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n\n    while [ $i -lt $len ]\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [ $left -lt $len ]\n        then\n            if [ ${arr[$i]} -gt ${arr[$left]} ]\n            then\n                return 1\n            fi\n        fi\n        if [ $right -lt $len ]\n        then\n            if [ ${arr[$i]} -gt ${arr[$right]} ]\n            then\n                return 1\n            fi\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left\n    local right\n    local parent\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i/2))\n\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${arr[$i]} -lt ${arr[$parent]} ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        if [[ $((i*2+1)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((i*2+1))]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n        if [[ $((i*2+2)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((i*2+2))]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n    local -i result=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i/2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${array[$left]} -lt ${array[$i]} ]]; then\n                result=1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${array[$right]} -lt ${array[$i]} ]]; then\n                result=1\n            fi\n        fi\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${array[$i]} -lt ${array[$parent]} ]]; then\n                result=1\n            fi\n        fi\n    done\n    echo $result",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $right -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\"",
    "    local -a array=($1)\n    local -i i=0\n    local -i size=${#array[@]}\n    local -i last_parent=$((size/2-1))\n    local -i left_child right_child\n    while [ $i -le $last_parent ]; do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [ $left_child -lt $size ] && [ ${array[$i]} -gt ${array[$left_child]} ]; then\n            echo \"false\"\n            return\n        fi\n        if [ $right_child -lt $size ] && [ ${array[$i]} -gt ${array[$right_child]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"true\"",
    "    local -a array=($1)\n    local -i size=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n\n    while [ $i -lt $size ]\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n\n        if [ $left -lt $size ] && [ ${array[$i]} -gt ${array[$left]} ]\n        then\n            return 1\n        fi\n\n        if [ $right -lt $size ] && [ ${array[$i]} -gt ${array[$right]} ]\n        then\n            return 1\n        fi\n\n        i=$((i+1))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=1; i<len; i++)); do\n        local parent=$((i-1))\n        if ((arr[parent] > arr[i])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local parent=0\n    local left=0\n    local right=0\n    while [ $i -lt $n ]\n    do\n        parent=$i\n        left=$((2*$i+1))\n        right=$((2*$i+2))\n        if [ $left -lt $n ] && [ ${arr[$left]} -lt ${arr[$parent]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n        if [ $right -lt $n ] && [ ${arr[$right]} -lt ${arr[$parent]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"Is a min heap\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent_index=$((n/2-1))\n    local left_child_index=0\n    local right_child_index=0\n    for ((i=0; i<=last_parent_index; i++)); do\n        left_child_index=$((2*i+1))\n        right_child_index=$((2*i+2))\n        if [[ ${arr[$i]} -gt ${arr[$left_child_index]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ ${arr[$i]} -gt ${arr[$right_child_index]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=(\"$@\")\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2 - 1))\n    while [ $i -le $last_parent ]; do\n        local left_child=$((2*i + 1))\n        local right_child=$((2*i + 2))\n        if [ $left_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n            echo \"false\"\n            return\n        fi\n        if [ $right_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"true\"",
    "  local -a arr=($1)\n  local i=0\n  local n=${#arr[@]}\n  local left_child_index\n  local right_child_index\n  local left_child\n  local right_child\n\n  while [ $i -lt $n ]\n  do\n    left_child_index=$((2*i + 1))\n    right_child_index=$((2*i + 2))\n    left_child=${arr[$left_child_index]}\n    right_child=${arr[$right_child_index]}\n\n    if [ $left_child_index -lt $n ] && [ $left_child -lt ${arr[$i]} ]\n    then\n      return 1\n    fi\n\n    if [ $right_child_index -lt $n ] && [ $right_child -lt ${arr[$i]} ]\n    then\n      return 1\n    fi\n\n    i=$((i+1))\n  done\n\n  return 0",
    "  local -a array=($1)\n  local -i n=${#array[@]}\n  local -i i=0\n  local -i left=0\n  local -i right=0\n  local -i parent=0\n  local -i flag=0\n  for ((i=1; i<n; i++)) do\n    left=$((2*i))\n    right=$((2*i+1))\n    parent=$((i/2))\n    if [[ $left -lt $n && ${array[$left]} -lt ${array[$parent]} ]]\n    then\n      flag=1\n    fi\n    if [[ $right -lt $n && ${array[$right]} -lt ${array[$parent]} ]]\n    then\n      flag=1\n    fi\n  done\n  if [[ $flag -eq 1 ]]\n  then\n    echo \"Given array is not a min heap\"\n  else\n    echo \"Given array is a min heap\"\n  fi",
    "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i last_parent=0\n    local -i last_parent_idx=0\n    local -i last_parent_left_idx=0\n    local -i last_parent_right_idx=0\n    local -i last_parent_left=0\n    local -i last_parent_right=0\n\n    if (( len < 2 )); then\n        echo \"true\"\n        return\n    fi\n\n    while (( i < len )); do\n        parent=${arr[i]}\n        left=$(( 2 * i + 1 ))\n        right=$(( 2 * i + 2 ))\n\n        if (( left < len )); then\n            if (( parent > arr[left] )); then\n                echo \"false\"\n                return\n            fi\n        fi\n\n        if (( right < len )); then\n            if (( parent > arr[right] )); then\n                echo \"false\"\n                return\n            fi\n        fi\n\n        (( i++ ))\n    done\n\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]; do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n\n    for ((i=0; i<n; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $n && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i = 0; i < n; i++)); do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n    for ((i=1; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left=0\n    local right=0\n    local parent=0\n    local is_min_heap=1\n\n    while [ $i -lt $len ]; do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        parent=$((i / 2))\n\n        if [ $left -lt $len ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            is_min_heap=0\n            break\n        fi\n\n        if [ $right -lt $len ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            is_min_heap=0\n            break\n        fi\n\n        if [ $i -gt 0 ] && [ ${arr[$i]} -lt ${arr[$parent]} ]; then\n            is_min_heap=0\n            break\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo $is_min_heap",
    "    local -a array=($1)\n    local i\n    for ((i=0; i<${#array[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#array[@]} ]]; then\n            if [[ ${array[$i]} -gt ${array[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt ${#array[@]} ]]; then\n            if [[ ${array[$i]} -gt ${array[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local size=${#array[@]}\n    local i\n    for ((i=0; i<size; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $size && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $size && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a heap=($1)\n    local i\n    local n=${#heap[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${heap[$i]} -gt ${heap[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${heap[$i]} -gt ${heap[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n && ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n            return 1\n        fi\n        if [[ $((2*i+2)) -lt $n && ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n    local result=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i/2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                result=1\n                break\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                result=1\n                break\n            fi\n        fi\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${arr[$i]} -lt ${arr[$parent]} ]]; then\n                result=1\n                break\n            fi\n        fi\n    done\n    echo $result",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    while (( i < n ))\n    do\n        left=$(( 2*i + 1 ))\n        right=$(( 2*i + 2 ))\n\n        if (( left < n && array[i] > array[left] ))\n        then\n            return 1\n        fi\n\n        if (( right < n && array[i] > array[right] ))\n        then\n            return 1\n        fi\n\n        (( i++ ))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local size=${#arr[@]}\n    while [ $i -lt $size ]\n    do\n        local left=$((2*$i + 1))\n        local right=$((2*$i + 2))\n        if [ $left -lt $size ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n        if [ $right -lt $size ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"It's a min heap\"",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local i=0\n    local len=${#array[@]}\n    local last_parent=$((len / 2 - 1))\n    local left_child right_child\n\n    while [ $i -le $last_parent ]; do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n        if [ ${array[$i]} -gt ${array[$left_child]} ]; then\n            echo \"false\"\n            return\n        fi\n        if [ $right_child -lt $len ] && [ ${array[$i]} -gt ${array[$right_child]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i + 1))\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i i=0\n    local -i l=${#arr[@]}\n    local -i p=0\n    local -i c=0\n    local -i r=0\n    local -i m=0\n    local -i n=0\n    local -i j=0\n    local -i k=0\n    local -i s=0\n\n    for ((i=0; i<l; i++)); do\n        p=$((i-1))\n        c=$i\n        r=$((i+1))\n        m=$((p/2))\n        n=$((c/2))\n        j=$((r/2))\n        k=$((m*2))\n        s=$((n*2))\n        if [[ $i -eq 0 ]]; then\n            continue\n        elif [[ $i -eq 1 ]]; then\n            if [[ ${arr[$i]} -lt ${arr[$p]} ]]; then\n                continue\n            else\n                echo \"not a min heap\"\n                return 1\n            fi\n        elif [[ $i -eq 2 ]]; then\n            if [[ ${arr[$i]} -lt ${arr[$p]} ]]; then\n                continue\n            else\n                echo \"not a min heap\"\n                return 1\n            fi\n        elif [[ $i -gt 2 ]]; then\n            if [[ $i -eq $k ]]; then\n                if [[ ${arr[$i]} -lt ${arr[$m]} ]]; then\n                    continue\n                else\n                    echo \"not a min heap\"\n                    return 1\n                fi\n            elif [[ $i -eq $s ]]; then\n                if [[ ${arr[$i]} -lt ${arr[$n]} ]]; then\n                    continue\n                else\n                    echo \"not a min heap\"\n                    return 1\n                fi\n            elif [[ $i -eq $j ]]; then\n                if [[ ${arr[$i]} -lt ${arr[$n]} ]]; then\n                    continue\n                else\n                    echo \"not a min heap\"\n                    return 1\n                fi\n            else\n                echo \"not a min heap\"\n                return 1\n            fi\n        fi\n",
    "    local -a arr=(\"$@\")\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local parent=0\n    local left=0\n    local right=0\n\n    while [ $i -lt $n ]\n    do\n        parent=$i\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n\n        if [ $left -lt $n ] && [ ${arr[$parent]} -gt ${arr[$left]} ]\n        then\n            echo \"false\"\n            return\n        fi\n\n        if [ $right -lt $n ] && [ ${arr[$parent]} -gt ${arr[$right]} ]\n        then\n            echo \"false\"\n            return\n        fi\n\n        i=$((i+1))\n    done\n\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local last_parent=$((len / 2 - 1))\n    local left_child=0\n    local right_child=0\n    local is_min_heap=1\n\n    while [ $i -le $last_parent ]; do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n\n        if [ $left_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n            is_min_heap=0\n            break\n        fi\n\n        if [ $right_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n            is_min_heap=0\n            break\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local -i i=0\n    local -i n=${#arr[@]}\n    local -i parent=0\n    local -i left_child=0\n    local -i right_child=0\n\n    for ((i=1; i<n; i++))\n    do\n        parent=$((i-1))\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n\n        if [[ $left_child -lt $n && ${arr[$parent]} -gt ${arr[$left_child]} ]]\n        then\n            echo \"Not a min heap\"\n            return 1\n        fi\n\n        if [[ $right_child -lt $n && ${arr[$parent]} -gt ${arr[$right_child]} ]]\n        then\n            echo \"Not a min heap\"\n            return 1\n        fi\n    done\n\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local last_parent=$((len / 2 - 1))\n    local i\n    for ((i = 0; i <= last_parent; i++)); do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n    local -i is_min_heap=1\n\n    for ((i=1; i<len; i++)); do\n        left=$((2*i))\n        right=$((2*i+1))\n        parent=$((i/2))\n        if [ $left -lt $len ] && [ ${array[$left]} -lt ${array[$parent]} ]; then\n            is_min_heap=0\n            break\n        fi\n        if [ $right -lt $len ] && [ ${array[$right]} -lt ${array[$parent]} ]; then\n            is_min_heap=0\n            break\n        fi\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                echo \"Not a min heap\"\n                return\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                echo \"Not a min heap\"\n                return\n            fi\n        fi\n    done\n    echo \"It's a min heap\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while (( i < n ))\n    do\n        if (( 2*i+1 < n && arr[i] > arr[2*i+1] ))\n        then\n            return 1\n        fi\n        if (( 2*i+2 < n && arr[i] > arr[2*i+2] ))\n        then\n            return 1\n        fi\n        (( i++ ))\n    done\n    return 0",
    "    local -a arr\n    arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\"",
    "    local -a array=(\"$@\")\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n\n        if [[ $left -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$left]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n\n        if [[ $right -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$right]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${array[$i]} -lt ${array[$parent]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n\n    echo \"true\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local parent=0\n    local left=0\n    local right=0\n    for ((i=1; i<n; i++)); do\n        parent=$((i-1))\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$parent]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$parent]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a a=($1)\n    local i=0\n    local n=${#a[@]}\n    local last_parent=$((n/2-1))\n    while ((i<=last_parent)); do\n        if ((a[i]>a[2*i+1] || a[i]>a[2*i+2])); then\n            return 1\n        fi\n        ((i++))\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n    local parent=0\n\n    while [ $i -lt $len ]\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        parent=$i\n\n        if [ $left_child -lt $len ]\n        then\n            if [ ${arr[$left_child]} -lt ${arr[$parent]} ]\n            then\n                echo \"Not a min heap\"\n                return\n            fi\n        fi\n\n        if [ $right_child -lt $len ]\n        then\n            if [ ${arr[$right_child]} -lt ${arr[$parent]} ]\n            then\n                echo \"Not a min heap\"\n                return\n            fi\n        fi\n\n        i=$((i+1))\n    done\n\n    echo \"Min heap\"",
    "  local -a arr=($1)\n  local i\n  local n=${#arr[@]}\n  for ((i=0; i<n; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n      echo \"Not a min heap\"\n      return\n    fi\n  done\n  echo \"Is a min heap\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local left=0\n    local right=0\n    local parent=0\n\n    while [ $i -lt $n ]\n    do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        parent=${arr[$i]}\n\n        if [ $left -lt $n ]\n        then\n            if [ $parent -gt ${arr[$left]} ]\n            then\n                return 1\n            fi\n        fi\n\n        if [ $right -lt $n ]\n        then\n            if [ $parent -gt ${arr[$right]} ]\n            then\n                return 1\n            fi\n        fi\n\n        i=$((i + 1))\n    done\n\n    return 0",
    "    local -a array=($1)\n    local len=${#array[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${array[$i]} -gt ${array[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $len && ${array[$i]} -gt ${array[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "\tlocal -a arr=($1)\n\tlocal i=0\n\tlocal len=${#arr[@]}\n\tlocal parent=0\n\tlocal left=0\n\tlocal right=0\n\tlocal is_min_heap=true\n\n\twhile [ $i -lt $len ]; do\n\t\tparent=${arr[$i]}\n\t\tleft=$((2*i+1))\n\t\tright=$((2*i+2))\n\n\t\tif [ $left -lt $len ] && [ $parent -gt ${arr[$left]} ]; then\n\t\t\tis_min_heap=false\n\t\t\tbreak\n\t\tfi\n\n\t\tif [ $right -lt $len ] && [ $parent -gt ${arr[$right]} ]; then\n\t\t\tis_min_heap=false\n\t\t\tbreak\n\t\tfi\n\n\t\ti=$((i+1))\n\tdone\n\n\techo $is_min_heap",
    "    local -a heap=($1)\n    local i=0\n    local size=${#heap[@]}\n    while [ $i -lt $((size/2)) ]; do\n        if [ ${heap[$i]} -gt ${heap[$((2*i+1))]} ] || [ ${heap[$i]} -gt ${heap[$((2*i+2))]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left=0\n    local right=0\n    local parent=0\n    while [ $i -lt $len ]; do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [ $left -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$left]} ]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n        if [ $right -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$right]} ]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n        i=$((i+1))\n    done\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local size=${#array[@]}\n    local i\n    for ((i=0; i<size; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $size && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $size && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local l=$((2*i+1))\n        local r=$((2*i+2))\n        if [[ $l -lt $n && ${arr[$i]} -gt ${arr[$l]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $r -lt $n && ${arr[$i]} -gt ${arr[$r]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local size=${#arr[@]}\n    local i\n    for ((i=0; i<size; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $size && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $size && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n    local left=0\n    local right=0\n    local parent=0\n\n    for ((i=0; i<n; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a a=($1)\n    local i=0\n    local n=${#a[@]}\n    local last_parent=$((n/2-1))\n    while [ $i -le $last_parent ]; do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${a[$i]} -gt ${a[$left]} ]; then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${a[$i]} -gt ${a[$right]} ]; then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)) {\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    }\n    return 0",
    "    local -a arr\n    arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i i=0\n    local -i n=${#arr[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n\n    while ((i < n))\n    do\n        parent=$((i + 1))\n        left=$((2 * parent - 1))\n        right=$((2 * parent))\n\n        if ((left < n && arr[i] > arr[left]))\n        then\n            return 1\n        fi\n\n        if ((right < n && arr[i] > arr[right]))\n        then\n            return 1\n        fi\n\n        ((i++))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2 - 1))\n    for ((i=0; i<=last_parent; i++)); do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"Not a min heap\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"Not a min heap\"\n            return\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr\n    local -i i\n    local -i n\n    local -i left\n    local -i right\n    local -i parent\n\n    arr=($1)\n    n=${#arr[@]}\n\n    for ((i=1; i<n; i++)); do\n        parent=$((i/2))\n        left=$((2*i))\n        right=$((2*i+1))\n\n        if [[ $parent -ge 0 && $left -lt n && $right -lt n ]]; then\n            if [[ ${arr[$parent]} -gt ${arr[$left]} || ${arr[$parent]} -gt ${arr[$right]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        elif [[ $parent -ge 0 && $left -lt n ]]; then\n            if [[ ${arr[$parent]} -gt ${arr[$left]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n    done\n\n    echo \"Min heap\"\n    return 0",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left<n && arr[i]>arr[left])) || ((right<n && arr[i]>arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr\n    read -ra arr <<< \"$1\"\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "  local -a arr=($1)\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ $((2*i+1)) -lt ${#arr[@]} ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n        return 1\n      fi\n    fi\n    if [[ $((2*i+2)) -lt ${#arr[@]} ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n        return 1\n      fi\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local parent=$((len / 2 - 1))\n    local left_child=$((2 * parent + 1))\n    local right_child=$((2 * parent + 2))\n    while [ $parent -ge 0 ]; do\n        if [ ${arr[$parent]} -gt ${arr[$left_child]} ] || [ ${arr[$parent]} -gt ${arr[$right_child]} ]; then\n            return 1\n        fi\n        parent=$((parent - 1))\n        left_child=$((2 * parent + 1))\n        right_child=$((2 * parent + 2))\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i = 0; i < n; i++)); do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2 - 1))\n    while [ $i -le $last_parent ]\n    do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            echo \"false\"\n            return\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            echo \"false\"\n            return\n        fi\n        ((i++))\n    done\n    echo \"true\"",
    "  local -a a=($1)\n  local n=${#a[@]}\n  local i\n  for ((i=0; i<n; i++)); do\n    local l=$((2*i+1))\n    local r=$((2*i+2))\n    if [[ $l -lt $n && ${a[$i]} -gt ${a[$l]} ]]; then\n      return 1\n    fi\n    if [[ $r -lt $n && ${a[$i]} -gt ${a[$r]} ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2 - 1))\n    for ((i=0; i<=last_parent; i++)); do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a arr=(\"$@\")\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ $((2*i+1)) -lt ${#arr[@]} ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n        return 1\n      fi\n    fi\n    if [[ $((2*i+2)) -lt ${#arr[@]} ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n        return 1\n      fi\n    fi\n  done\n  return 0",
    "  local -a array=($1)\n  local n=${#array[@]}\n  local i\n  for ((i=0; i<n; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if ((left < n && array[i] > array[left])) || ((right < n && array[i] > array[right])); then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    while ((i < len))\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if ((left < len && arr[i] > arr[left]))\n        then\n            echo \"false\"\n            return\n        fi\n        if ((right < len && arr[i] > arr[right]))\n        then\n            echo \"false\"\n            return\n        fi\n        ((i++))\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n    for i in $(seq 0 $last_parent); do\n        if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]] || [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr\n    arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < len && arr[i] > arr[left])); then\n            return 1\n        fi\n        if ((right < len && arr[i] > arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local last_parent=$((len/2 - 1))\n    local left_child=$((i*2 + 1))\n    local right_child=$((i*2 + 2))\n    while [ $i -le $last_parent ]; do\n        if [ ${arr[$i]} -gt ${arr[$left_child]} ] || [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n        i=$((i+1))\n        left_child=$((i*2 + 1))\n        right_child=$((i*2 + 2))\n    done\n    echo \"Min heap\"\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n\n    while [[ $i -lt $n ]]; do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$i\n        if [[ $left -lt $n && ${arr[$left]} -lt ${arr[$parent]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$right]} -lt ${arr[$parent]} ]]; then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local list=($1)\n  local len=${#list[@]}\n  local i=0\n  local left=0\n  local right=0\n  local parent=0\n  local is_min_heap=1\n\n  while [ $i -lt $len ]\n  do\n    left=$((2 * i + 1))\n    right=$((2 * i + 2))\n\n    if [ $left -lt $len ]\n    then\n      parent=${list[$i]}\n      left=${list[$left]}\n      if [ $parent -gt $left ]\n      then\n        is_min_heap=0\n        break\n      fi\n    fi\n\n    if [ $right -lt $len ]\n    then\n      parent=${list[$i]}\n      right=${list[$right]}\n      if [ $parent -gt $right ]\n      then\n        is_min_heap=0\n        break\n      fi\n    fi\n\n    i=$((i + 1))\n  done\n\n  echo $is_min_heap",
    "    local -a array=($1)\n    local last_index=$((${#array[@]} - 1))\n    local last_parent_index=$(($last_index / 2))\n    for ((i = 0; i <= last_parent_index; i++)); do\n        local left_child_index=$((2 * i + 1))\n        local right_child_index=$((2 * i + 2))\n        if [[ ${array[$i]} -gt ${array[$left_child_index]} ]]; then\n            return 1\n        fi\n        if [[ ${array[$i]} -gt ${array[$right_child_index]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    for ((i=1; i<len; i++))\n    do\n        left=$((2*i))\n        right=$((2*i+1))\n\n        if [ $left -lt $len ]\n        then\n            parent=$((i/2))\n            if [ ${arr[$parent]} -gt ${arr[$left]} ]\n            then\n                return 1\n            fi\n        fi\n\n        if [ $right -lt $len ]\n        then\n            parent=$((i/2))\n            if [ ${arr[$parent]} -gt ${arr[$right]} ]\n            then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i parent=0\n\n    for ((i=0; i<n; i++))\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        largest=$i\n        if [[ $left -lt $n && ${array[$left]} -gt ${array[$largest]} ]]\n        then\n            largest=$left\n        fi\n        if [[ $right -lt $n && ${array[$right]} -gt ${array[$largest]} ]]\n        then\n            largest=$right\n        fi\n        if [[ $largest -ne $i ]]\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a heap=()\n    local -i i=0\n    local -i n=0\n    local -i last_parent=0\n    local -i last_parent_index=0\n    local -i last_parent_left_child=0\n    local -i last_parent_right_child=0\n    local -i last_parent_left_child_index=0\n    local -i last_parent_right_child_index=0\n\n    for i in $1; do\n        heap[n++]=$i\n    done\n\n    last_parent_index=$((n / 2 - 1))\n    for ((i=last_parent_index; i>=0; i--)); do\n        last_parent=${heap[i]}\n        last_parent_left_child_index=$((2 * i + 1))\n        last_parent_right_child_index=$((2 * i + 2))\n        last_parent_left_child=${heap[last_parent_left_child_index]}\n        last_parent_right_child=${heap[last_parent_right_child_index]}\n\n        if [[ $last_parent_left_child -a $last_parent_left_child -lt $last_parent ]]; then\n            return 1\n        fi\n\n        if [[ $last_parent_right_child -a $last_parent_right_child -lt $last_parent ]]; then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -a arr\n    arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"Not a min heap\"\n            return\n        fi\n        if [[ $right -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"Not a min heap\"\n            return\n        fi\n    done\n    echo \"Min heap\"",
    "  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i\n  for ((i=0; i<n; i++)); do\n    local -i left=$((2*i+1))\n    local -i right=$((2*i+2))\n    if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n      return 1\n    fi\n    if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a array\n    array=($1)\n    local -i n=${#array[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if [[ $left -lt $n && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\n    for ((i=0; i<n; i++)); do\n        j=$((i*2+1))\n        k=$((i*2+2))\n        if ((j<n)); then\n            if ((array[i]>array[j])); then\n                return 1\n            fi\n        fi\n        if ((k<n)); then\n            if ((array[i]>array[k])); then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local array=($1)\n    local len=${#array[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n    local is_min_heap=1\n\n    while [ $i -lt $len ]; do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        parent=$i\n        if [ $left -lt $len ]; then\n            if [ ${array[$left]} -lt ${array[$parent]} ]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        if [ $right -lt $len ]; then\n            if [ ${array[$right]} -lt ${array[$parent]} ]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        i=$((i + 1))\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        if [ $((2*i+1)) -lt $n ]; then\n            if [ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]; then\n                return 1\n            fi\n        fi\n        if [ $((2*i+2)) -lt $n ]; then\n            if [ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n\n    for ((i=1; i<n; i++))\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1))\n        if [[ $left -lt $n && ${arr[$parent]} -gt ${arr[$left]} ]]\n        then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$parent]} -gt ${arr[$right]} ]]\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=(\"$@\")\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    for ((i=0; i<n; i++)); do\n        left=$((2*i + 1))\n        right=$((2*i + 2))\n        parent=$(((i-1)/2))\n\n        if [[ $left -lt $n && ${array[$left]} -lt ${array[$i]} ]]; then\n            return 1\n        fi\n\n        if [[ $right -lt $n && ${array[$right]} -lt ${array[$i]} ]]; then\n            return 1\n        fi\n\n        if [[ $parent -ge 0 && ${array[$parent]} -gt ${array[$i]} ]]; then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    local left\n    local right\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n    done\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i\n    local n=${#arr[@]}\n    local last_parent_idx=$((n / 2 - 1))\n    for ((i = 0; i <= last_parent_idx; i++)); do\n        local left_child_idx=$((2 * i + 1))\n        local right_child_idx=$((2 * i + 2))\n        if ((left_child_idx < n && arr[i] > arr[left_child_idx])); then\n            return 1\n        fi\n        if ((right_child_idx < n && arr[i] > arr[right_child_idx])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local size=${#arr[@]}\n    for ((i=0; i<size; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $size && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $size && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local i\n    local n=${#array[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i = 0; i < n; i++)); do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a a=($1)\n    local i=0\n    local n=${#a[@]}\n    local last_parent=$((n/2-1))\n    while [ $i -le $last_parent ]; do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${a[$i]} -gt ${a[$left]} ]; then\n            echo \"false\"\n            return\n        fi\n        if [ $right -lt $n ] && [ ${a[$i]} -gt ${a[$right]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"true\"",
    "  local -a arr=($1)\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i last_parent=$((len / 2 - 1))\n  local -i left_child right_child\n\n  while ((i <= last_parent)) ; do\n    left_child=$((2 * i + 1))\n    right_child=$((2 * i + 2))\n    if ((arr[i] > arr[left_child])) ; then\n      return 1\n    fi\n    if ((right_child < len)) ; then\n      if ((arr[i] > arr[right_child])) ; then\n        return 1\n      fi\n    fi\n    ((i++))\n  done\n  return 0",
    "    local -a array=($1)\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i max_index=$((len-1))\n    local -i max_parent_index=$((max_index/2))\n\n    for ((i=0; i<=max_parent_index; i++)); do\n        parent=${array[$i]}\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -le $max_index ]]; then\n            if [[ $parent -gt ${array[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -le $max_index ]]; then\n            if [[ $parent -gt ${array[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local l=$((2*i+1))\n        local r=$((2*i+2))\n        if [[ $l -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$l]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $r -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$r]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local arr=($1)\n    local i\n    local l\n    local r\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        l=$((2*i+1))\n        r=$((2*i+2))\n        if ((l<n && arr[i]>arr[l])) || ((r<n && arr[i]>arr[r])); then\n            echo \"Not a min heap\"\n            return\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a array=(\"$@\")\n    local -i n=${#array[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if ((left < n && array[i] > array[left])) || ((right < n && array[i] > array[right])); then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if [[ $left -lt $n ]] && [[ ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n ]] && [[ ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr\n    local i\n    local left\n    local right\n    local parent\n    local is_min_heap=1\n\n    arr=($1)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        left=$((2*i))\n        right=$((2*i+1))\n        parent=$((i/2))\n        if [[ ${arr[$i]} -lt ${arr[$parent]} ]]; then\n            is_min_heap=0\n            break\n        fi\n        if [[ $left -lt ${#arr[@]} ]] && [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n            is_min_heap=0\n            break\n        fi\n        if [[ $right -lt ${#arr[@]} ]] && [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n            is_min_heap=0\n            break\n        fi\n    done\n\n    echo $is_min_heap",
    "    local -a arr\n    arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $right -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i i=0\n    local -i n=${#array[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n\n    for ((i=1; i<n; i++))\n    do\n        parent=$((i-1))\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n\n        if [[ $left -lt $n && ${array[$parent]} -gt ${array[$left]} ]]\n        then\n            return 1\n        fi\n\n        if [[ $right -lt $n && ${array[$parent]} -gt ${array[$right]} ]]\n        then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -a heap=()\n    local i\n    local n\n    local parent\n    local left\n    local right\n    local -i is_min_heap=1\n    #\n    # Convert input to array\n    #\n    IFS=' ' read -r -a heap <<< \"$1\"\n    #\n    # Check if the array is a min heap\n    #\n    n=${#heap[@]}\n    for ((i=0; i<n; i++)); do\n        parent=${heap[$i]}\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if (( left < n )); then\n            if (( parent > heap[$left] )); then\n                is_min_heap=0\n            fi\n        fi\n        if (( right < n )); then\n            if (( parent > heap[$right] )); then\n                is_min_heap=0\n            fi\n        fi\n    done\n    echo $is_min_heap",
    "    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i parent=0\n\n    for ((i=0; i<n; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        largest=$i\n        if [[ $left -lt $n && ${arr[$left]} -gt ${arr[$largest]} ]]; then\n            largest=$left\n        fi\n        if [[ $right -lt $n && ${arr[$right]} -gt ${arr[$largest]} ]]; then\n            largest=$right\n        fi\n        if [[ $largest -ne $i ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        if ((2*i+1 < n)) && ((arr[i] > arr[2*i+1])); then\n            return 1\n        fi\n        if ((2*i+2 < n)) && ((arr[i] > arr[2*i+2])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++))\n    do\n        if [[ $((2*i+1)) -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]\n        then\n            return 1\n        fi\n        if [[ $((2*i+2)) -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i=0\n    local len=${#arr[@]}\n    local last_parent=$((len / 2 - 1))\n    local left_child=0\n    local right_child=0\n    local is_min_heap=1\n\n    for ((i=0; i<=last_parent; i++)); do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n\n        if [[ ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n            is_min_heap=0\n            break\n        fi\n\n        if [[ $right_child -lt $len && ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n            is_min_heap=0\n            break\n        fi\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n\n    for ((i=0; i<len; i++))\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n        if [ $left -lt $len ] && [ ${arr[$left]} -lt ${arr[$i]} ]\n        then\n            return 1\n        fi\n        if [ $right -lt $len ] && [ ${arr[$right]} -lt ${arr[$i]} ]\n        then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i\n  local left\n  local right\n  for ((i=0; i<len; i++)); do\n    left=$((2*i+1))\n    right=$((2*i+2))\n    if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n      return 1\n    fi\n    if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n      return 1\n    fi\n  done\n  return 0"
  ]
}