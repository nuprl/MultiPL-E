{
  "name": "mbpp_751_check_min_heap",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n#\n# $1 is a space-separated list\ncheck_min_heap() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    check_min_heap \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"2 3 4 5 10 15\") = \"true\" ]]\n    [[ $(candidate \"2 10 4 5 3 15\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a heap=(\"$@\")\n    local -i i=0\n    local -i n=${#heap[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i last_parent=0\n    local -i last_left=0\n    local -i last_right=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i last_right_value=0\n    local -i last_parent_index=0\n    local -i last_left_index=0\n    local -i last_right_index=0\n    local -i last_parent_value=0\n    local -i last_left_value=0\n    local -i",
    "    local -a a=($1)\n    local n=${#a[@]}\n    local i=0\n    local flag=0\n    while [ $i -lt $((n/2)) ]\n    do\n        if [ $((2*i+1)) -lt $n ] && [ ${a[$i]} -gt ${a[$((2*i+1))]} ]\n        then\n            flag=1\n            break\n        fi\n        if [ $((2*i+2)) -lt $n ] && [ ${a[$i]} -gt ${a[$((2*i+2))]} ]\n        then\n            flag=1\n            break\n        fi\n        i=$((i+1))\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"Given array is a min heap\"\n    else\n        echo \"Given array is not a min heap\"\n    fi",
    "    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local l=$((2*i + 1))\n        local r=$((2*i + 2))\n        if ((l < n && arr[i] > arr[l])) || ((r < n && arr[i] > arr[r])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]\n    do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "  local -a arr=(\"$@\")\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((2*i+1 < ${#arr[@]})) && ((arr[i] > arr[2*i+1])); then\n      return 1\n    fi\n    if ((2*i+2 < ${#arr[@]})) && ((arr[i] > arr[2*i+2])); then\n      return 1\n    fi\n  done\n  return 0",
    "    local array=($1)\n    local i=0\n    local n=${#array[@]}\n    local left_child\n    local right_child\n    local parent\n    local is_min_heap=1\n\n    while [ $i -lt $n ]\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        parent=$((i-1/2))\n\n        if [ $left_child -lt $n ] && [ ${array[$left_child]} -lt ${array[$i]} ]\n        then\n            is_min_heap=0\n            break\n        fi\n\n        if [ $right_child -lt $n ] && [ ${array[$right_child]} -lt ${array[$i]} ]\n        then\n            is_min_heap=0\n            break\n        fi\n\n        if [ $parent -ge 0 ] && [ ${array[$i]} -lt ${array[$parent]} ]\n        then\n            is_min_heap=0\n            break\n        fi\n\n        i=$((i+1))\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n\n    while (( i < len )); do\n        left_child=$(( 2 * i + 1 ))\n        right_child=$(( 2 * i + 2 ))\n\n        if (( left_child < len )); then\n            if (( arr[i] > arr[left_child] )); then\n                return 1\n            fi\n        fi\n\n        if (( right_child < len )); then\n            if (( arr[i] > arr[right_child] )); then\n                return 1\n            fi\n        fi\n\n        (( i++ ))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=1; i<n; i++))\n    do\n        if [[ ${arr[$((i-1))]} -gt ${arr[$i]} ]]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a arr=($1)\n    local i\n    local l\n    local r\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        l=$((2*i+1))\n        r=$((2*i+2))\n        if [[ $l -lt $n && ${arr[$i]} -gt ${arr[$l]} ]]; then\n            return 1\n        fi\n        if [[ $r -lt $n && ${arr[$i]} -gt ${arr[$r]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a array=($1)\n  local -i n=${#array[@]}\n  local -i i=0\n  local -i left=0\n  local -i right=0\n  local -i parent=0\n  for ((i=1; i<n; i++))\n  do\n    left=$((2*i+1))\n    right=$((2*i+2))\n    parent=$((i-1))\n    if [[ $left -lt $n && ${array[$left]} -lt ${array[$parent]} ]]\n    then\n      echo \"false\"\n      return\n    fi\n    if [[ $right -lt $n && ${array[$right]} -lt ${array[$parent]} ]]\n    then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < ${#arr[@]} && arr[i] > arr[left])) || ((right < ${#arr[@]} && arr[i] > arr[right])); then\n            echo \"Not a min heap\"\n            return 1\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n / 2 - 1))\n    while [ $i -le $last_parent ]; do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            echo \"false\"\n            return\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i + 1))\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "  local arr=($1)\n  local len=${#arr[@]}\n  local i\n  for ((i=0; i<len; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n      echo \"false\"\n      return\n    fi\n    if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n && ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n            return 1\n        fi\n        if [[ $((2*i+2)) -lt $n && ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local eeee=0\n    local",
    "    local -n arr=$1\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n    for ((i=0; i<=last_parent; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0"
  ]
}