{
  "name": "mbpp_141_pancake_sort",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort a list of elements.\n#\n# $1 is a space-separated list\npancake_sort() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    pancake_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 79 25 38 69\") = \"15 25 38 69 79\" ]]\n    [[ $(candidate \"98 12 54 36 85\") = \"12 36 54 85 98\" ]]\n    [[ $(candidate \"41 42 32 12 23\") = \"12 23 32 41 42\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=\"$1\"\n    local sorted_list=\"\"\n    local list_length=$(echo \"$list\" | wc -w)\n    local i=0\n    local j=0\n    local max_index=0\n    local max_value=0\n    local temp_list=\"\"\n    local temp_value=\"\"\n    local temp_index=0\n    local temp_list_length=0\n    local temp_list_length_half=0\n    local temp_list_length_half_rounded=0\n    local temp_list_length_half_rounded_plus_one=0\n    local temp_list_length_half_rounded_minus_one=0\n    local temp_list_length_half_rounded_plus_one_index=0\n    local temp_list_length_half_rounded_minus_one_index=0\n    local temp_list_length_half_rounded_plus_one_value=0\n    local temp_list_length_half_rounded_minus_one_value=0\n    local temp_list_length_half_rounded_plus_one_index_value=0\n    local temp_list_length_half_rounded_minus_one_index_value=0\n    local temp_list_length_half_rounded_plus_one_index_value_abs=0\n    local temp_list_length_half_rounded_minus_one_index_value_abs=0\n    local temp_list_length_half_rounded_plus_one_index_value_abs_min=0\n    local temp_list_length_half_rounded_minus_one_index_value_abs_min=0\n    local temp_list_length_half_rounded_plus_one_index_value_abs_min_index=0\n    local temp_list_length_half_rounded_minus_one_index_value_abs_min_index=0\n    local temp_list_length_half_rounded_plus_one_index_value_abs_min_value=0\n    local temp_list_length_half_rounded_minus_one_index_value_abs_min_value=0\n    local temp_list_length_half_rounded_plus_one_index_value_",
    "  local list=\"$1\"\n  local sorted=()\n  local max_index=0\n  local max_value=0\n  local i=0\n  local j=0\n  local k=0\n  local tmp=0\n  local tmp_list=()\n\n  for i in $list; do\n    if [ $i -gt $max_value ]; then\n      max_value=$i\n      max_index=$k\n    fi\n    k=$((k + 1))\n  done\n\n  if [ $max_index -ne 0 ]; then\n    tmp_list=($list)\n    for i in $(seq 0 $((max_index - 1))); do\n      tmp=${tmp_list[$i]}\n      tmp_list[$i]=${tmp_list[$max_index]}\n      tmp_list[$max_index]=$tmp\n    done\n    list=$(echo ${tmp_list[@]})\n  fi\n\n  sorted+=($max_value)\n  list=$(echo $list | sed \"s/$max_value //\")\n\n  if [ -n \"$list\" ]; then\n    sorted+=($(pancake_sort \"$list\"))\n  fi\n\n  echo ${sorted[@]}",
    "    local list=\"$1\"\n    local sorted=()\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n    local temp=0\n    local temp_index=0\n    local temp_list=()\n\n    for i in $list; do\n        sorted[$i]=$i\n    done\n\n    for ((i=${#sorted[@]}; i>0; i--)); do\n        max=${sorted[0]}\n        max_index=0\n        for ((j=1; j<i; j++)); do\n            if [[ ${sorted[$j]} -gt $max ]]; then\n                max=${sorted[$j]}\n                max_index=$j\n            fi\n        done\n        if [[ $max_index -ne 0 ]]; then\n            temp=${sorted[0]}\n            sorted[0]=$max\n            sorted[$max_index]=$temp\n        fi\n        temp_list=()\n        for ((j=0; j<i; j++)); do\n            temp_list[$j]=${sorted[$j]}\n        done\n        sorted=(\"${sorted[@]:$i}\")\n        sorted=(\"${temp_list[@]}\" \"${sorted[@]}\")\n    done\n\n    echo \"${sorted[@]}\"",
    "    local list=\"$1\"\n    local -a array=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i max=0\n    local -i max_index=0\n    local -i tmp=0\n\n    # Convert the list to an array\n    while read -r item; do\n        array[i++]=\"$item\"\n    done <<< \"$list\"\n\n    # Sort the array\n    n=${#array[@]}\n    for ((i=0; i<n-1; i++)); do\n        max=${array[0]}\n        max_index=0\n        for ((j=1; j<n-i; j++)); do\n            if ((array[j] > max)); then\n                max=${array[j]}\n                max_index=$j\n            fi\n        done\n\n        # Flip the array\n        for ((k=0; k<max_index; k++)); do\n            tmp=${array[k]}\n            array[k]=${array[max_index]}\n            array[max_index]=$tmp\n        done\n\n        # Flip the array\n        for ((k=0; k<n-i-1; k++)); do\n            tmp=${array[k]}\n            array[k]=${array[n-i-1]}\n            array[n-i-1]=$tmp\n        done\n    done\n\n    # Convert the array to a list\n    for ((i=0; i<n; i++)); do\n        echo -n \"${array[i]} \"\n    done\n    echo",
    "    local list=\"$1\"\n    local sorted_list=()\n    local max_index=0\n    local max_value=0\n    local i=0\n    local j=0\n    local tmp=0\n    local tmp_list=()\n    local tmp_list_len=0\n\n    for i in $list; do\n        sorted_list+=(\"$i\")\n    done\n\n    for ((i=0; i<${#sorted_list[@]}; i++)); do\n        max_index=$i\n        max_value=${sorted_list[$i]}\n        for ((j=i+1; j<${#sorted_list[@]}; j++)); do\n            if [[ ${sorted_list[$j]} -gt $max_value ]]; then\n                max_index=$j\n                max_value=${sorted_list[$j]}\n            fi\n        done\n        if [[ $max_index -ne $i ]]; then\n            tmp_list=()\n            for ((j=0; j<=$i; j++)); do\n                tmp_list+=(\"${sorted_list[$j]}\")\n            done\n            tmp_list_len=${#tmp_list[@]}\n            for ((j=0; j<$tmp_list_len; j++)); do\n                sorted_list[$j]=${sorted_list[$((max_index-j))]}\n            done\n            for ((j=0; j<$tmp_list_len; j++)); do\n                sorted_list[$((max_index-j))]=${tmp_list[$((tmp_list_len-j-1))]}\n            done\n        fi\n    done\n\n    echo \"${sorted_list[@]}\"",
    "  local list=\"$1\"\n  local sorted=()\n  local max_index=0\n  local max_value=0\n  local i=0\n  local j=0\n  local temp=0\n  local temp_index=0\n  local temp_value=0\n  local temp_list=()\n  local temp_sorted=()\n\n  while [ ${#list} -gt 0 ]; do\n    max_index=0\n    max_value=${list[0]}\n    for i in ${list[@]}; do\n      if [ $i -gt $max_value ]; then\n        max_value=$i\n        max_index=$j\n      fi\n      j=$((j+1))\n    done\n    temp_index=0\n    for i in ${list[@]}; do\n      if [ $temp_index -le $max_index ]; then\n        temp_list[$temp_index]=$i\n      else\n        temp_sorted[$((temp_index-max_index-1))]=$i\n      fi\n      temp_index=$((temp_index+1))\n    done\n    list=(\"${temp_list[@]}\")\n    sorted=(\"${temp_sorted[@]}\")\n    temp_list=()\n    temp_sorted=()\n    j=0\n  done\n\n  echo \"${sorted[@]}\"",
    "  local list=\"$1\"\n  local sorted=()\n  local max=0\n  local max_index=0\n  local i=0\n  local j=0\n  local tmp=0\n\n  for i in $list; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n      max_index=$j\n    fi\n    ((j++))\n  done\n\n  sorted+=($max)\n  list=$(echo $list | sed \"s/$max//g\")\n\n  if [[ -z $list ]]; then\n    echo ${sorted[@]}\n    return\n  fi\n\n  list=$(echo $list | sed \"s/^ //g\")\n  list=$(echo $list | sed \"s/ $//g\")\n\n  list=$(pancake_sort \"$list\")\n\n  for i in $list; do\n    sorted+=($i)\n  done\n\n  echo ${sorted[@]}",
    "    local list=$1\n    local sorted=()\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n    local tmp=0\n\n    for ((i=0; i<${#list[@]}; i++)); do\n        max=${list[0]}\n        max_index=0\n        for ((j=0; j<${#list[@]}; j++)); do\n            if [[ ${list[j]} -gt $max ]]; then\n                max=${list[j]}\n                max_index=$j\n            fi\n        done\n        sorted+=($max)\n        list=(${list[@]:0:$max_index} ${list[@]:$((max_index+1))})\n    done\n\n    echo ${sorted[@]}",
    "    local list=$1\n    local sorted=\n    local i=\n    local j=\n    local max=\n    local max_index=\n    local tmp=\n    for ((i=0; i < ${#list}; i++)); do\n        max=${list[0]}\n        max_index=0\n        for ((j=1; j < ${#list}; j++)); do\n            if (( ${list[j]} > max )); then\n                max=${list[j]}\n                max_index=$j\n            fi\n        done\n        sorted+=\"$max \"\n        unset list[max_index]\n        list=( \"${list[@]}\" )\n    done\n    echo \"$sorted\"",
    "  local list=\"$1\"\n  local sorted=()\n  local max=0\n  local max_index=0\n  local i=0\n  local j=0\n  local k=0\n  local n=0\n  local tmp=0\n\n  # Find the largest element in the list\n  for i in $list; do\n    if [ $i -gt $max ]; then\n      max=$i\n      max_index=$n\n    fi\n    n=$((n+1))\n  done\n\n  # Flip the largest element to the top\n  for i in $(seq $((max_index+1))); do\n    tmp=${list%% *}\n    list=${list#* }\n    list=\"$tmp $list\"\n  done\n\n  # Flip the largest element to the bottom\n  for i in $(seq $((n-max_index))); do\n    tmp=${list##* }\n    list=${list% *}\n    list=\"$list $tmp\"\n  done\n\n  # Remove the largest element from the list\n  list=${list% *}\n\n  # Recurse\n  if [ -n \"$list\" ]; then\n    pancake_sort \"$list\"\n  fi\n\n  # Print the largest element\n  echo $max",
    "  local list=\"$1\"\n  local i=0\n  local j=0\n  local max=0\n  local max_index=0\n  local temp=0\n  local len=0\n  local result=0\n\n  len=`echo \"$list\" | wc -w`\n\n  for ((i=0; i<len; i++)); do\n    max=0\n    max_index=0\n    for ((j=0; j<len-i; j++)); do\n      temp=`echo \"$list\" | cut -d ' ' -f $((j+1))`\n      if [[ $temp -gt $max ]]; then\n        max=$temp\n        max_index=$j\n      fi\n    done\n    if [[ $max_index -ne 0 ]]; then\n      list=`echo \"$list\" | awk '{print $1}'`\n      for ((j=0; j<max_index; j++)); do\n        list=`echo \"$list\" | awk '{print $2}'`\n      done\n      list=`echo \"$list\" | awk '{print $2}'`\n      for ((j=0; j<max_index; j++)); do\n        list=`echo \"$list\" | awk '{print $1}'`\n      done\n      list=`echo \"$list\" | awk '{print $1}'`\n    fi\n    list=`echo \"$list\" | awk '{print $2}'`\n    list=`echo \"$list\" | awk '{print $1}'`\n  done\n\n  echo \"$list\"",
    "  local list=$1\n  local list_size=$(echo $list | wc -w)\n  local sorted_list=\"\"\n  local i=0\n\n  while [ $i -lt $list_size ]; do\n    local max_index=$(echo $list | awk '{print $1}')\n    local max_value=$(echo $list | awk '{print $1}')\n    local j=1\n\n    while [ $j -le $list_size ]; do\n      local value=$(echo $list | awk -v j=$j '{print $j}')\n\n      if [ $value -gt $max_value ]; then\n        max_index=$j\n        max_value=$value\n      fi\n\n      j=$((j + 1))\n    done\n\n    if [ $max_index -ne $list_size ]; then\n      list=$(echo $list | awk -v max_index=$max_index '{\n        for (i = 1; i <= NF; i++) {\n          if (i == max_index) {\n            for (j = i; j > 1; j--) {\n              printf \"%s \", $(j - 1)\n            }\n          } else {\n            printf \"%s \", $i\n          }\n        }\n        print \"\"\n      }')\n\n      list=$(echo $list | awk '{\n        for (i = NF; i > 1; i--) {\n          printf \"%s \", $(i - 1)\n        }\n        print $1\n      }')\n    fi\n\n    sorted_list=\"$sorted_list $max_value\"\n    i=$((i + 1))\n  done\n\n  echo $sorted_list",
    "\tlocal list=\"$1\"\n\tlocal sorted=()\n\tlocal i=0\n\tlocal max=0\n\tlocal max_index=0\n\tlocal temp=()\n\n\t# Find the max element in the list\n\tfor i in $list; do\n\t\tif [[ $i -gt $max ]]; then\n\t\t\tmax=$i\n\t\tfi\n\tdone\n\n\t# Repeat until the list is sorted\n\twhile [[ $max -gt 0 ]]; do\n\t\t# Find the index of the max element\n\t\ti=0\n\t\tfor element in $list; do\n\t\t\tif [[ $element -eq $max ]]; then\n\t\t\t\tmax_index=$i\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\t((i++))\n\t\tdone\n\n\t\t# Flip the list until the max element is at the top\n\t\twhile [[ $max_index -gt 0 ]]; do\n\t\t\t# Flip the list\n\t\t\ttemp=()\n\t\t\tfor element in $list; do\n\t\t\t\ttemp=($element ${temp[@]})\n\t\t\tdone\n\t\t\tlist=${temp[@]}\n\n\t\t\t# Decrement the index of the max element\n\t\t\t((max_index--))\n\t\tdone\n\n\t\t# Flip the list until the max element is at the bottom\n\t\twhile [[ $max_index -lt $(( ${#list[@]} - 1 )) ]]; do\n\t\t\t# Flip the list\n\t\t\ttemp=()\n\t\t\tfor element in $list; do\n\t\t\t\ttemp=($element ${temp[@]})\n\t\t\tdone\n\t\t\tlist=${temp[@]}\n\n\t\t\t# Increment the index of the max element\n\t\t\t((max_index++))\n\t\tdone\n\n\t\t# Add the max element to the sorted list\n\t\tsorted=($max ${sorted[@]})\n\n\t\t# Remove the max element from the list\n\t\ttemp=()\n\t\tfor element in $list; do\n\t\t\tif [[ $element -ne $max ]]; then\n\t\t\t\ttemp=(${temp[@]} $element)\n\t\t\tfi\n\t",
    "    local list=\"$1\"\n    local sorted=()\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n    local tmp=0\n    local tmp2=0\n    local tmp3=0\n    local tmp4=0\n    local tmp5=0\n    local tmp6=0\n    local tmp7=0\n    local tmp8=0\n    local tmp9=0\n    local tmp10=0\n    local tmp11=0\n    local tmp12=0\n    local tmp13=0\n    local tmp14=0\n    local tmp15=0\n    local tmp16=0\n    local tmp17=0\n    local tmp18=0\n    local tmp19=0\n    local tmp20=0\n    local tmp21=0\n    local tmp22=0\n    local tmp23=0\n    local tmp24=0\n    local tmp25=0\n    local tmp26=0\n    local tmp27=0\n    local tmp28=0\n    local tmp29=0\n    local tmp30=0\n    local tmp31=0\n    local tmp32=0\n    local tmp33=0\n    local tmp34=0\n    local tmp35=0\n    local tmp36=0\n    local tmp37=0\n    local tmp38=0\n    local tmp39=0\n    local tmp40=0\n    local tmp41=0\n    local tmp42=0\n    local tmp43=0\n    local tmp44=0\n    local tmp45=0\n    local tmp46=0\n    local tmp47=0\n    local tmp48=0\n    local tmp49=0\n    local tmp50=0\n    local tmp51=0\n    local tmp52=0\n    local tmp53=0\n    local tmp54=0\n    local tmp55=0\n    local tmp56=0\n    local tmp57=0\n    local tmp58=0\n    local tmp59=0\n    local tmp60=0\n    local tmp61=0\n    local tmp62=0\n    local tmp63=0\n    local tmp64=0\n    local tmp65=0\n    local tmp66=0\n    local tmp67=0\n    local tmp",
    "    local list=\"$1\"\n    local sorted_list=\"\"\n    local max_index=0\n    local max_value=0\n    local i=0\n    local j=0\n    local temp=0\n    local temp_list=\"\"\n\n    for i in $list; do\n        if [[ $i -gt $max_value ]]; then\n            max_value=$i\n            max_index=$j\n        fi\n        j=$((j+1))\n    done\n\n    if [[ $max_index -ne 0 ]]; then\n        temp_list=$(pancake_flip $list $max_index)\n        temp_list=$(pancake_flip $temp_list $((j-1)))\n    else\n        temp_list=$list\n    fi\n\n    if [[ $j -eq 1 ]]; then\n        sorted_list=$temp_list\n    else\n        sorted_list=$(pancake_sort \"$(echo $temp_list | cut -d ' ' -f 1-$((j-1)))\")\n    fi\n\n    echo \"$sorted_list $max_value\"",
    "  local list=\"$1\"\n  local sorted=()\n  local max_index=0\n  local max_value=0\n  local i=0\n  local j=0\n  local tmp=0\n\n  while [ ${#list} -gt 0 ]; do\n    max_index=0\n    max_value=0\n    i=0\n    for j in $list; do\n      if [ $j -gt $max_value ]; then\n        max_value=$j\n        max_index=$i\n      fi\n      i=$((i+1))\n    done\n\n    if [ $max_index -gt 0 ]; then\n      list=$(echo $list | cut -d' ' -f$((max_index+1))-${#list})\n      list=$(echo $list | cut -d' ' -f1-$max_index)\n      list=\"$max_value $list\"\n    fi\n\n    sorted=($max_value ${sorted[@]})\n  done\n\n  echo ${sorted[@]}",
    "    local list=\"$1\"\n    local max_index=0\n    local max_value=0\n    local i=0\n    local j=0\n    local temp=0\n    local sorted=0\n    local list_length=0\n    local list_array=()\n\n    # Split the list into an array\n    IFS=' ' read -r -a list_array <<< \"$list\"\n    list_length=${#list_array[@]}\n\n    # Loop through the list until it is sorted\n    while [ $sorted -eq 0 ]; do\n        # Find the largest value in the list\n        for ((i=0; i<list_length; i++)); do\n            if [ ${list_array[$i]} -gt $max_value ]; then\n                max_value=${list_array[$i]}\n                max_index=$i\n            fi\n        done\n\n        # Flip the largest value to the top of the list\n        if [ $max_index -ne 0 ]; then\n            for ((i=0; i<max_index; i++)); do\n                temp=${list_array[$i]}\n                list_array[$i]=${list_array[$max_index]}\n                list_array[$max_index]=$temp\n            done\n        fi\n\n        # Flip the largest value to the bottom of the list\n        if [ $max_index -ne $((list_length - 1)) ]; then\n            for ((i=list_length - 1; i>max_index; i--)); do\n                temp=${list_array[$i]}\n                list_array[$i]=${list_array[$max_index]}\n                list_array[$max_index]=$temp\n            done\n        fi\n\n        # Check if the list is sorted\n        sorted=1\n        for ((i=0; i<list_length - 1; i++)); do\n            if [ ${list_array[$i]} -gt ${list_array[$((i + 1))]} ]; then\n                sorted=0\n            fi\n        done\n    done\n\n    # Print the sorted list\n    for ((i=0; i<list_length; i++)); do\n        printf \"%d \" \"${",
    "    local list=\"$1\"\n    local sorted=()\n    local max_index=0\n    local max_value=0\n    local max_index_from_end=0\n    local max_value_from_end=0\n    local i=0\n    local j=0\n\n    for i in $list; do\n        if [[ $i -gt $max_value ]]; then\n            max_value=$i\n            max_index=$j\n        fi\n        j=$((j+1))\n    done\n\n    sorted+=(\"$max_value\")\n    list=$(echo $list | sed \"s/$max_value//\")\n\n    for i in $list; do\n        if [[ $i -gt $max_value_from_end ]]; then\n            max_value_from_end=$i\n            max_index_from_end=$j\n        fi\n        j=$((j+1))\n    done\n\n    sorted+=(\"$max_value_from_end\")\n    list=$(echo $list | sed \"s/$max_value_from_end//\")\n\n    echo ${sorted[@]}",
    "    local list=\"$1\"\n    local sorted_list=\"\"\n    local max_index=0\n    local max_value=0\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local temp_list=\"\"\n    local temp_list2=\"\"\n    local temp_list3=\"\"\n\n    # Find the largest element in the list\n    for i in $list; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$k\n        fi\n        k=$((k+1))\n    done\n\n    # If the largest element is not at the end of the list,\n    # flip the list so that it is at the end.\n    if [ $max_index -ne $k ]; then\n        temp_list=$(echo $list | cut -d' ' -f1-$max_index)\n        temp_list2=$(echo $list | cut -d' ' -f$((max_index+1))-$k)\n        temp_list3=$(echo $temp_list | rev)\n        list=\"$temp_list3 $temp_list2\"\n    fi\n\n    # If the list is not empty, recurse\n    if [ $k -gt 0 ]; then\n        temp_list=$(echo $list | cut -d' ' -f1-$((k-1)))\n        list=$(pancake_sort \"$temp_list\")\n    fi\n\n    # Flip the list so that the largest element is at the beginning\n    temp_list=$(echo $list | cut -d' ' -f1-$((k-1)))\n    temp_list2=$(echo $list | cut -d' ' -f$k)\n    temp_list3=$(echo $temp_list | rev)\n    list=\"$temp_list2 $temp_list3\"\n\n    echo $list",
    "    local list=\"$1\"\n    local sorted=()\n    local max=0\n    local max_index=0\n    local i=0\n    local j=0\n    local tmp=0\n    local tmp_index=0\n    local tmp_list=()\n\n    for i in $list; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n            max_index=$j\n        fi\n        ((j++))\n    done\n\n    sorted+=(\"$max\")\n\n    if [[ $max_index -ne 0 ]]; then\n        tmp_list=($list)\n        tmp_index=0\n        for i in ${tmp_list[@]}; do\n            if [[ $tmp_index -lt $max_index ]]; then\n                tmp_list[$tmp_index]=${tmp_list[$max_index]}\n                tmp_list[$max_index]=$i\n            fi\n            ((tmp_index++))\n        done\n    fi\n\n    tmp_list=(${tmp_list[@]:0:$max_index})\n\n    if [[ ${#tmp_list[@]} -gt 0 ]]; then\n        sorted+=($(pancake_sort \"${tmp_list[@]}\"))\n    fi\n\n    echo \"${sorted[@]}\""
  ]
}