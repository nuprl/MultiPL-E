{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a matrix=()\n  local -i i j n=0\n  local -i max_i max_j\n  local -i max_avg=0\n  local -i avg=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n\n  while read -r line; do\n    matrix+=(\"$line\")\n    ((n++))\n  done\n\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < n; j++)); do\n      if ((i == 0 && j == 0)); then\n        max_i=$i\n        max_j=$j\n        max_avg=${matrix[$i,$j]}\n        max_count=1\n      elif ((i == 0)); then\n        sum=${matrix[$i,$j-1]}\n        count=1\n      elif ((j == 0)); then\n        sum=${matrix[$i-1,$j]}\n        count=1\n      else\n        sum=${matrix[$i-1,$j]}+${matrix[$i,$j-1]}\n        count=2\n      fi\n\n      avg=$((sum / count))\n      matrix[$i,$j]=$avg\n\n      if ((avg > max_avg)); then\n        max_i=$i\n        max_j=$j\n        max_avg=$avg\n        max_count=$count\n      fi\n    done\n  done\n\n  echo \"$max_i $max_j $max_avg $max_count\"",
    "  local matrix=\"$1\"\n  local rows=$(wc -l <<< \"$matrix\")\n  local cols=$(wc -w <<< \"$matrix\")\n  local row=0\n  local col=0\n  local total=0\n  local max=0\n  local max_path=()\n  local path=()\n  local cell\n  local cell_cost\n  local path_cost\n  local path_length\n  local path_average\n  local path_average_max\n\n  while true; do\n    cell=$(awk -v row=$row -v col=$col '{print $col}' <<< \"$matrix\")\n    cell_cost=$(awk -v row=$row -v col=$col '{print $col}' <<< \"$matrix\")\n    path+=($cell)\n    total=$((total + cell_cost))\n    if [[ $row -eq $((rows - 1)) ]] && [[ $col -eq $((cols - 1)) ]]; then\n      path_cost=$total\n      path_length=${#path[@]}\n      path_average=$((path_cost / path_length))\n      if [[ $path_average -gt $max ]]; then\n        max=$path_average\n        max_path=(\"${path[@]}\")\n      fi\n      unset path\n      total=0\n      col=0\n      row=0\n      continue\n    fi\n    if [[ $col -eq $((cols - 1)) ]]; then\n      row=$((row + 1))\n      col=0\n      continue\n    fi\n    col=$((col + 1))\n  done\n  echo \"${max_path[@]}\"",
    "  local matrix=$1\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp=()\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      local -i val=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i+1{print $j+1}')\n      if ((i==0 && j==0)); then\n        dp[$i,$j]=$val\n      elif ((i==0)); then\n        dp[$i,$j]=$((dp[$i,$j-1]+val))\n      elif ((j==0)); then\n        dp[$i,$j]=$((dp[$i-1,$j]+val))\n      else\n        dp[$i,$j]=$((dp[$i-1,$j]+dp[$i,$j-1]-dp[$i-1,$j-1]+val))\n      fi\n    done\n  done\n  echo \"${dp[$((n-1)),$((m-1))]}\"",
    "  local matrix=\"$1\"\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i m=$(wc -w <<< \"$matrix\")\n  local -i i j k\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=0\n    done\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((i==0 && j==0)); then\n        dp[i,j]=$(cut -d' ' -f1 <<< \"$matrix\")\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1] + $(cut -d' ' -f$((j+1)) <<< \"$matrix\")))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j] + $(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n      else\n        dp[i,j]=$((dp[i-1,j] + dp[i,j-1] + $(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n      fi\n    done\n  done\n  echo \"scale=2; ${dp[n-1,m-1]}/($n+$m-1)\" | bc",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j])+${matrix[i]:j:1})\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp=(0)\n  local -a path=(0)\n  local -a cost=(0)\n  local -a count=(0)\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local cell=${matrix[$i]}\n      cell=${cell:$j:1}\n      local idx=$((i*n+j))\n      if ((i==0 && j==0)); then\n        dp[$idx]=$cell\n        path[$idx]=$cell\n        cost[$idx]=$cell\n        count[$idx]=1\n      elif ((i==0)); then\n        dp[$idx]=$((dp[$((idx-1))]+cell))\n        path[$idx]=$((path[$((idx-1))]+cell))\n        cost[$idx]=$((cost[$((idx-1))]+cell))\n        count[$idx]=$((count[$((idx-1))]+1))\n      elif ((j==0)); then\n        dp[$idx]=$((dp[$((idx-n))]+cell))\n        path[$idx]=$((path[$((idx-n))]+cell))\n        cost[$idx]=$((cost[$((idx-n))]+cell))\n        count[$idx]=$((count[$((idx-n))]+1))\n      else\n        local left=$((dp[$((idx-1))]*count[$((idx-1))]))\n        local up=$((dp[$((idx-n))]*count[$((idx-n))]))\n        if ((left>up)); then\n          dp[$idx]=$((left+cell))\n          path[$idx]=$((path[$((idx-1))]+cell))\n          cost[$idx]=$((cost[$((idx-1))]+cell))\n          count[$idx]=",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk \"{print \\$$((j+1))}\")\n      if ((i > 0)); then\n        dp[i,j]=$((dp[i,j] + dp[i-1,j]))\n      fi\n      if ((j > 0)); then\n        dp[i,j]=$((dp[i,j] + dp[i,j-1]))\n      fi\n      if ((i > 0 && j > 0)); then\n        dp[i,j]=$((dp[i,j] - dp[i-1,j-1]))\n      fi\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      for ((k=i;k<n;k++)); do\n        for ((l=j;l<m;l++)); do\n          local -i sum=dp[k,l]\n          if ((i > 0)); then\n            sum=$((sum - dp[i-1,l]))\n          fi\n          if ((j > 0)); then\n            sum=$((sum - dp[k,j-1]))\n          fi\n          if ((i > 0 && j > 0)); then\n            sum=$((sum + dp[i-1,j-1]))\n          fi\n          local -i area=$(((k-i+1)*(l-j+1)))\n          local -i avg=$((sum/area))\n          if ((avg > max)); then\n            max=$avg\n          fi\n        done\n      done\n   ",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i val=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n      if ((j>0)); then\n        val=$((val+dp[j-1]))\n      fi\n      dp[j]=$((val<dp[j]?dp[j]:val))\n    done\n  done\n  echo \"${dp[-1]}\"",
    "  local -n matrix=$1\n  local n=$(wc -l <<< \"$matrix\")\n  local -a dp\n  for ((i=0; i<n; i++)); do\n    dp[i]=0\n  done\n  for ((i=n-2; i>=0; i--)); do\n    dp[i]=$(bc <<< \"scale=6; (${dp[i+1]} + ${matrix[i+1]})/2\")\n  done\n  for ((i=n-2; i>=0; i--)); do\n    for ((j=n-2; j>=0; j--)); do\n      local -a row=(${matrix[i]})\n      local -a nextRow=(${matrix[i+1]})\n      dp[j]=$(bc <<< \"scale=6; (${dp[j]} + ${dp[j+1]} + ${row[j]} + ${nextRow[j]})/4\")\n    done\n  done\n  printf \"%.6f\\n\" \"${dp[0]}\"",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_cost_plus_one=\"$((max_cost + 1))\"\n  local -r max_cost_plus_two=\"$((max_cost + 2))\"\n  local -r max_cost_plus_three=\"$((max_cost + 3))\"\n  local -r max_cost_plus_four=\"$((max_cost + 4))\"\n  local -r max_cost_plus_five=\"$((max_cost + 5))\"\n  local -r max_cost_plus_six=\"$((max_cost + 6))\"\n  local -r max_cost_plus_seven=\"$((max_cost + 7))\"\n  local -r max_cost_plus_eight=\"$((max_cost + 8))\"\n  local -r max_cost_plus_nine=\"$((max_cost + 9))\"\n  local -r max_cost_plus_ten=\"$((max_cost + 10))\"\n  local -r max_cost_plus_eleven=\"$((max_cost + 11))\"\n  local -r max_cost_plus_twelve=\"$((max_cost + 12))\"\n  local -r max_cost_plus_thirteen=\"$((max_cost + 13))\"\n  local -r max_cost_plus_fourteen=\"$((max_cost + 14))\"\n  local -r max_cost_plus_fifteen=\"$((max_cost + 15))\"\n  local -r max_cost_plus_sixteen=\"$((max_cost + 16))\"\n  local -r max_cost_plus_seventeen=\"$((max_cost + 17))\"\n  local -r max_cost_plus_eighteen=\"$((max_cost + 18))\"\n  local -r max_cost_plus_nineteen=\"$((max_cost + 19))\"\n  local -r max_cost_plus_twenty=\"$((",
    "  local -a matrix\n  local -i i=0 j=0\n  local -i n=0\n  local -i max_avg=0\n  local -i avg=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r matrix=\"$(sed 's/ /,/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/^/[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/$/]/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/$/,/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/^/[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/,$/]/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\n//g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\[\\[/\\[\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\]/\\]\\]/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_path_length=\"$((n + m - 2))\"\n  local -r max_average=\"$((max_cost / max_path_length))\"\n  local -r max_average_length=\"${#max_average}\"\n  local -r max_average_length_plus_one=\"$((max_average_length + 1))\"\n  local -r max_average_length_plus_two=\"$((max_average_length + 2))\"\n  local -r max_average_length_plus_three=\"$((max_average_length + 3))\"\n  local -r max_average_length_plus_four=\"$((max_average_length + 4))\"\n  local -r max_average_length_plus_five=\"$((max_average_length + 5))\"\n  local -r max_average_length_plus_six=\"$((max_average_length + 6))\"\n  local -r max_average_length_plus_seven=\"$((max_average_length + 7))\"\n  local -r max_average_length_plus_eight=\"$((max_average_length + 8))\"\n  local -r max_average_length_plus_nine=\"$((max_average_length + 9))\"\n  local -r max_average_length_plus_ten=\"$((max_average_length + 10))\"\n  local -r max_average_length_plus_eleven=\"$((max_average_length + 11))\"\n  local -r max_average_length_plus_twelve=\"$((max_average_length + 12))\"\n  local -r max_average_length_plus_thirteen=\"$((max_average_length + 13))\"\n  local -r max_average_length_plus_fourteen=\"$((max_average_length + 14))\"\n  local -r max_average_length_plus",
    "  local -a matrix\n  local -i i j n\n  local -i max_avg=0\n  local -i max_avg_i=0\n  local -i max_avg_j=0\n  local -i max_avg_n=0\n  local -i max_avg_sum=0\n  local -i sum=0\n  local -i avg=0\n  local -i cost=0\n\n  IFS=$'\\n' read -r -d '' -a matrix < <(echo \"$1\")\n  n=${#matrix[@]}\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      sum=0\n      for ((k=i; k<n; k++)); do\n        for ((l=j; l<n; l++)); do\n          cost=${matrix[k]:l:1}\n          sum=$((sum + cost))\n          avg=$((sum / ((k-i+1)*(l-j+1))))\n          if [[ $avg -gt $max_avg ]]; then\n            max_avg=$avg\n            max_avg_i=$i\n            max_avg_j=$j\n            max_avg_n=$((k-i+1))\n            max_avg_sum=$sum\n          fi\n        done\n      done\n    done\n  done\n\n  echo \"max_avg=$max_avg\"\n  echo \"max_avg_i=$max_avg_i\"\n  echo \"max_avg_j=$max_avg_j\"\n  echo \"max_avg_n=$max_avg_n\"\n  echo \"max_avg_sum=$max_avg_sum\"",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max_avg=0\n  local -i avg=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_sum=0\n  local -i max_max=0\n  local -i max_avg=0\n  local -i max_max_avg=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_l=0\n  local -i max_max_sum=0\n  local -i max_max_max=0\n  local -i max_max_avg=0\n  local -i max_max_max_avg=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_l=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_max=0\n  local -i max_max_max_avg=0\n  local -i max_max_max_max_avg=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_l=0\n  local -i max_max_max_max_sum=0\n  local -",
    "  local matrix=\"$1\"\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i j\n  local -a costs\n  local -i cost\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_cost=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n  local -i max_cost_cost=0\n  local -i max_cost_cost_i=0\n  local -i max_cost_cost_j=0\n  local -i max_cost_cost_cost=0\n  local -i max_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_cost_j=",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp=()\n  local -i i j\n  for ((i=0;i<rows;i++)); do\n    for ((j=0;j<cols;j++)); do\n      local -i cur=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      if ((i==0 && j==0)); then\n        dp[$((i*cols+j))]=$cur\n      elif ((i==0)); then\n        dp[$((i*cols+j))]=$((dp[$((i*cols+j-1))]+cur))\n      elif ((j==0)); then\n        dp[$((i*cols+j))]=$((dp[$(((i-1)*cols+j))]+cur))\n      else\n        dp[$((i*cols+j))]=$((dp[$((i*cols+j-1))]+cur))\n        if ((dp[$((i*cols+j))] < dp[$(((i-1)*cols+j))]+cur)); then\n          dp[$((i*cols+j))]=$((dp[$(((i-1)*cols+j))]+cur))\n        fi\n      fi\n    done\n  done\n  echo \"${dp[@]}\"\n  echo \"${dp[@]}\" | awk \"{print \\$$((rows*cols))/$((rows+cols-1))}\"",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  local max_avg=0\n  local max_path=()\n  local sum=0\n  local avg=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        dp[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n        path[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n      elif [[ $i -eq 0 ]]; then\n        dp[$i,$j]=$((${dp[$i,$((j-1))]} + $(echo \"$matrix\" | head -n 1 | awk -v j=$((j+1)) '{print $j}')))\n        path[$i,$j]=$((${path[$i,$((j-1))]} + $(echo \"$matrix\" | head -n 1 | awk -v j=$((j+1)) '{print $j}')))\n      elif [[ $j -eq 0 ]]; then\n        dp[$i,$j]=$((${dp[$((i-1)),$j]} + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')))\n        path[$i,$j]=$((${path[$((i-1)),$j]} + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')))\n      else\n        dp[$i,$j]=$((${dp[$i,$((j-1))]} + $(echo \"$matrix\" | head -n $",
    "  local -a matrix\n  local -i i j\n  local -i n\n  local -i max_avg\n  local -i max_avg_i max_avg_j\n  local -i sum\n  local -i sum_i sum_j\n  local -i sum_max\n  local -i sum_max_i sum_max_j\n  local -i sum_max_n\n  local -i sum_max_n_i sum_max_n_j\n  local -i sum_max_n_i_prev sum_max_n_j_prev\n  local -i sum_max_n_i_prev_prev sum_max_n_j_prev_prev\n  local -i sum_max_n_i_prev_prev_prev sum_max_n_j_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp=()\n  local -a path=()\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      local cost=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i{print $j}')\n      if ((i==0 && j==0)); then\n        dp[i,j]=$cost\n        path[i,j]=$cost\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1]+cost))\n        path[i,j]=$((path[i,j-1]+cost))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j]+cost))\n        path[i,j]=$((path[i-1,j]+cost))\n      else\n        dp[i,j]=$((dp[i-1,j]+cost))\n        path[i,j]=$((path[i-1,j]+cost))\n        if ((dp[i,j-1]>dp[i,j])); then\n          dp[i,j]=$((dp[i,j-1]+cost))\n          path[i,j]=$((path[i,j-1]+cost))\n        fi\n      fi\n    done\n  done\n  echo \"${path[n-1,m-1]} $((n+m-1))\" | awk '{printf \"%.2f\\n\", $1/$2}'",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_average_path=()\n  local max_average_path_cost=0\n  local max_average_path_length=0\n  local path_cost=0\n  local path_length=0\n  local path=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local cost=0\n  local average=0\n  local path_string=''\n  local path_cost_string=''\n  local path_length_string=''\n  local max_average_path_string=''\n  local max_average_path_cost_string=''\n  local max_average_path_length_string=''\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      path=()\n      path_cost=0\n      path_length=0\n      for ((k=i; k<n; k++)); do\n        for ((l=j; l<m; l++)); do\n          cost=$(echo \"$matrix\" | head -n $((k+1)) | tail -n 1 | awk -v l=$l '{print $l}')\n          path+=(\"$cost\")\n          path_cost=$((path_cost+cost))\n          path_length=$((path_length+1))\n          average=$((path_cost/path_length))\n          if ((average > max_average)); then\n            max_average=$average\n            max_average_path=(\"${path[@]}\")\n            max_average_path_cost=$path_cost\n            max_average_path_length=$path_length\n          fi\n        done\n      done\n    done\n  done\n\n  for ((i=0; i<${#max_average_path[@]}; i++)); do\n    path_string+=\"${max_average_path[i]} \"\n  done\n  path_string=${path",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_sum=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_sum=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max_j=0\n  local -i max_max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max_max=0\n  local -i max_max_max_max_max",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_path=\"$(seq 1 \"$max\" | tr -d '\\n')\"\n  local -r min_path=\"$(seq \"$max\" -1 1 | tr -d '\\n')\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $max / $max\")\"\n  local -r min_average_path=\"$(seq \"$max\" -1 1 | tr -d '\\n')\"\n  local -r max_average_path=\"$(seq 1 \"$max\" | tr -d '\\n')\"\n  local -r max_average_path_cost=\"$(\n    paste <(echo \"$matrix\") <(echo \"$max_average_path\") |\n      awk '{print $1 * $2}' |\n      paste -sd+ |\n      bc\n  )\"\n  local -r min_average_path_cost=\"$(\n    paste <(echo \"$matrix\") <(echo \"$min_average_path\") |\n      awk '{print $1 * $2}' |\n      paste -sd+ |\n      bc\n  )\"\n  local -r max_path_cost=\"$(\n    paste <(echo \"$matrix\") <(echo \"$max_path\") |\n      awk '{print $1 * $2}' |\n      paste -sd+ |\n      bc\n  )\"\n  local -r min_path_cost=\"$(\n    paste <(echo \"$matrix\") <(echo \"$min_path\") |\n      awk '{print $1 * $2}' |\n      paste -sd+ |\n      bc\n  )\"\n  local -r max_average_path_cost_rounded=\"$(bc -l <<< \"scale=2; $",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i m=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max=0\n  local -i sum=0\n  local -i maxSum=0\n  local -i maxCount=0\n  local -i count=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxK=0\n  local -i maxL=0\n  local -i maxN=0\n  local -i maxM=0\n  local -i maxCount=0\n  local -i maxSum=0\n  local -i maxAverage=0\n  local -i average=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n  local -i maxAverage=0\n",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r matrix_n=\"$(tr ' ' '\\n' <<< \"$matrix\")\"\n  local -r matrix_m=\"$(tr '\\n' ' ' <<< \"$matrix\")\"\n  local -r matrix_n_m=\"$(tr ' ' '\\n' <<< \"$matrix_m\")\"\n  local -r matrix_m_n=\"$(tr '\\n' ' ' <<< \"$matrix_n\")\"\n  local -r matrix_n_m_n=\"$(tr ' ' '\\n' <<< \"$matrix_m_n\")\"\n  local -r matrix_m_n_m=\"$(tr '\\n' ' ' <<< \"$matrix_n_m\")\"\n  local -r matrix_n_m_n_m=\"$(tr ' ' '\\n' <<< \"$matrix_m_n_m\")\"\n  local -r matrix_m_n_m_n=\"$(tr '\\n' ' ' <<< \"$matrix_n_m_n\")\"\n  local -r matrix_n_m_n_m_n=\"$(tr ' ' '\\n' <<< \"$matrix_m_n_m_n\")\"\n  local -r matrix_m_n_m_n_m=\"$(tr '\\n' ' ' <<< \"$matrix_n_m_n_m\")\"\n  local -r matrix_n_m_n_m_n_m=\"$(tr ' ' '\\n' <<< \"$matrix_m_n_m_n_m\")\"\n  local -r matrix_m_n_m_n_m_n=\"$(tr '\\n' ' ' <<< \"$matrix_n_m_n_m_n\")\"\n  local -r matrix_n_m_n_m_n_m_n=\"$(tr ' ' '\\n' <<< \"$matrix_m_n_m_",
    "  local -a matrix\n  local -i i j n\n  local -i max_average_of_path=0\n  local -i max_average_of_path_i=0\n  local -i max_average_of_path_j=0\n  local -i max_average_of_path_n=0\n  local -i max_average_of_path_sum=0\n  local -i max_average_of_path_count=0\n  local -i max_average_of_path_average=0\n  local -i average_of_path=0\n  local -i average_of_path_i=0\n  local -i average_of_path_j=0\n  local -i average_of_path_n=0\n  local -i average_of_path_sum=0\n  local -i average_of_path_count=0\n  local -i average_of_path_average=0\n  local -i sum=0\n  local -i count=0\n  local -i average=0\n  local -i cell=0\n  local -i next_cell=0\n  local -i next_cell_i=0\n  local -i next_cell_j=0\n  local -i next_cell_n=0\n  local -i next_cell_sum=0\n  local -i next_cell_count=0\n  local -i next_cell_average=0\n  local -i next_cell_average_of_path=0\n  local -i next_cell_average_of_path_i=0\n  local -i next_cell_average_of_path_j=0\n  local -i next_cell_average_of_path_n=0\n  local -i next_cell_average_of_path_sum=0\n  local -i next_cell_average_of_path_count=0\n  local -i next_cell_average_of_path_average=0\n  local -i next_cell_max_average_of_path=0\n  local -i next_cell_max_average_of_path_i=0\n  local -i next_cell_max_average_of_path",
    "  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\n  local -a costs\n  local -a paths\n  local -a path\n  local -a pathCosts\n  local -a pathCost\n  local -a pathCostsSorted\n  local -a pathCostSorted\n  local -a pathSorted\n  local -a pathSortedCost\n  local -a pathSortedCosts\n  local -a pathSortedCostsSorted\n  local -a pathSortedCostSorted\n  local -a pathSortedSorted\n  local -a pathSortedSortedCost\n  local -a pathSortedSortedCosts\n  local -a pathSortedSortedCostsSorted\n  local -a pathSortedSortedCostSorted\n  local -a pathSortedSortedSorted\n  local -a pathSortedSortedSortedCost\n  local -a pathSortedSortedSortedCosts\n  local -a pathSortedSortedSortedCostsSorted\n  local -a pathSortedSortedSortedCostSorted\n  local -a pathSortedSortedSortedSorted\n  local -a pathSortedSortedSortedSortedCost\n  local -a pathSortedSortedSortedSortedCosts\n  local -a pathSortedSortedSortedSortedCostsSorted\n  local -a pathSortedSortedSortedSortedCostSorted\n  local -a pathSortedSortedSortedSortedSorted\n  local -a pathSortedSortedSortedSortedSortedCost\n  local -a pathSortedSortedSortedSortedSortedCosts\n  local -a pathSortedSortedSortedSortedSortedCostsSorted\n  local -a pathSortedSortedSortedSortedSortedCostSorted\n  local -a pathSortedSortedSortedSortedSortedSorted\n  local -a pathSortedSortedSortedSortedSortedSortedCost\n  local -a pathSortedSortedSortedSortedSortedSortedCosts\n  local -",
    "  local -n matrix=$1\n  local -a path=()\n  local -i i=0 j=0\n  local -i max_i=0 max_j=0\n  local -i max_average=0\n  local -i average=0\n  local -i cost=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_cost=0\n  local -i max_path_cost=0\n  local -i max_path_count=0\n  local -i max_path_average=0\n  local -i max_path_i=0\n  local -i max_path_j=0\n  local -i max_path_max_i=0\n  local -i max_path_max_j=0\n  local -i max_path_max_average=0\n  local -i max_path_max_cost=0\n  local -i max_path_max_count=0\n\n  for ((i=0; i<${#matrix[@]}; i++)); do\n    for ((j=0; j<${#matrix[$i]}; j++)); do\n      cost=${matrix[$i]:$j:1}\n      count=1\n      average=$cost\n      max_average=$average\n      max_i=$i\n      max_j=$j\n      max_count=$count\n      max_cost=$cost\n      path=(\"$i $j\")\n      while [[ $i -lt ${#matrix[@]}-1 && $j -lt ${#matrix[$i]}-1 ]]; do\n        if [[ ${matrix[$i+1]:$j:1} -gt ${matrix[$i]:$j+1:1} ]]; then\n          i=$i+1\n        else\n          j=$j+1\n        fi\n        cost=$cost+${matrix[$i]:$j:1}\n        count=$count+1\n        average=$cost/$count\n        if [[ $average -gt $max_average ]]; then\n          max_average=$average\n          max_i=$i\n          max_j=$j\n          max_count=$count\n          max",
    "  local -a matrix\n  local -i i j n\n  local -i max_i max_j\n  local -i max_avg\n  local -i avg\n  local -i sum\n  local -i count\n  local -i cost\n  local -i max_cost\n  local -i max_count\n  local -i max_sum\n  local -i max_avg\n\n  IFS=$'\\n' read -r -d '' -a matrix < <(echo \"$1\")\n  n=${#matrix[@]}\n  max_i=$((n-1))\n  max_j=$((n-1))\n  max_cost=0\n  max_count=0\n  max_sum=0\n  max_avg=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      cost=${matrix[$i]}\n      cost=${cost:$j:1}\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        sum=$cost\n        count=1\n      elif [[ $i -eq 0 ]]; then\n        sum=$((sum+cost))\n        count=$((count+1))\n      elif [[ $j -eq 0 ]]; then\n        sum=$((sum+cost))\n        count=$((count+1))\n      else\n        sum=$((sum+cost))\n        count=$((count+1))\n      fi\n      avg=$((sum/count))\n      if [[ $i -eq $max_i && $j -eq $max_j ]]; then\n        if [[ $avg -gt $max_avg ]]; then\n          max_cost=$cost\n          max_count=$count\n          max_sum=$sum\n          max_avg=$avg\n        fi\n      fi\n    done\n  done\n  echo \"$max_avg\"",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a path\n  local i j\n  local max_avg=0\n  local max_path=()\n  local max_path_len=0\n  local avg\n  local path_len\n\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[$i,$j]=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i{print $j}')\n      path[$i,$j]=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i{print $j}')\n    done\n  done\n\n  for ((i=1;i<n;i++)); do\n    dp[$i,0]=$((dp[$i,0]+dp[$((i-1)),0]))\n    path[$i,0]=$((path[$i,0]+path[$((i-1)),0]))\n  done\n\n  for ((j=1;j<m;j++)); do\n    dp[0,$j]=$((dp[0,$j]+dp[0,$((j-1))]))\n    path[0,$j]=$((path[0,$j]+path[0,$((j-1))]))\n  done\n\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<m;j++)); do\n      if [[ ${dp[$((i-1)),$j]} -gt ${dp[$i,$((j-1))]} ]]; then\n        dp[$i,$j]=$((dp[$i,$j]+dp[$((i-1)),$j]))\n        path[$i,$j]=$((path[$i,$j]+path[$((i-1)),$j]))\n     ",
    "    local -n matrix=$1\n    local -i N=${#matrix[@]}\n    local -i i j\n    local -i sum=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_sum=0\n    local -i max_count=0\n    local -i count=0\n    local -a path\n    local -a max_path\n    local -a visited\n    local -a max_visited\n    local -a stack\n    local -a max_stack\n    local -a stack_i\n    local -a stack_j\n    local -a max_stack_i\n    local -a max_stack_j\n    local -a stack_sum\n    local -a max_stack_sum\n    local -a stack_count\n    local -a max_stack_count\n    local -a stack_path\n    local -a max_stack_path\n    local -a stack_visited\n    local -a max_stack_visited\n    local -a stack_stack\n    local -a max_stack_stack\n    local -a stack_stack_i\n    local -a max_stack_stack_i\n    local -a stack_stack_j\n    local -a max_stack_stack_j\n    local -a stack_stack_sum\n    local -a max_stack_stack_sum\n    local -a stack_stack_count\n    local -a max_stack_stack_count\n    local -a stack_stack_path\n    local -a max_stack_stack_path\n    local -a stack_stack_visited\n    local -a max_stack_stack_visited\n\n    for ((i=0; i<N; i++)); do\n        for ((j=0; j<N; j++)); do\n            visited[i,j]=0\n        done\n    done\n\n    stack=(0 0)\n    stack_i=(0)\n    stack_j=(0)\n    stack_sum=(0)\n    stack_count=(0)\n    stack_path=()\n    stack_visited=()\n    stack_stack=()\n    stack_stack_",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 100))\"\n  local -r min_cost=\"$((n * m * -100))\"\n  local -r max_avg=\"$((max_cost / n))\"\n  local -r min_avg=\"$((min_cost / n))\"\n  local -r max_avg_int=\"$((max_avg + 1))\"\n  local -r min_avg_int=\"$((min_avg - 1))\"\n  local -r max_avg_int_len=\"${#max_avg_int}\"\n  local -r min_avg_int_len=\"${#min_avg_int}\"\n  local -r max_avg_int_len_plus_one=\"$((max_avg_int_len + 1))\"\n  local -r min_avg_int_len_plus_one=\"$((min_avg_int_len + 1))\"\n  local -r max_avg_int_len_plus_one_spaces=\"$(printf '%*s' \"$max_avg_int_len_plus_one\")\"\n  local -r min_avg_int_len_plus_one_spaces=\"$(printf '%*s' \"$min_avg_int_len_plus_one\")\"\n  local -r max_avg_int_len_plus_one_spaces_plus_one=\"$(printf '%*s' \"$((max_avg_int_len_plus_one + 1))\")\"\n  local -r min_avg_int_len_plus_one_spaces_plus_one=\"$(printf '%*s' \"$((min_avg_int_len_plus_one + 1))\")\"\n  local -r max_avg_int_len_plus_one_spaces_plus_two=\"$(printf '%*s' \"$((max",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -r max=$((n * m))\n  local -r max_average=$(echo \"scale=2; $max / 2\" | bc)\n  local -r max_average_int=$(echo \"$max_average\" | cut -d. -f1)\n  local -r max_average_dec=$(echo \"$max_average\" | cut -d. -f2)\n  local -r max_average_dec_len=$(echo \"$max_average_dec\" | wc -c)\n  local -r max_average_dec_len_plus_one=$((max_average_dec_len + 1))\n  local -r max_average_dec_len_plus_one_len=$(echo \"$max_average_dec_len_plus_one\" | wc -c)\n  local -r max_average_dec_len_plus_one_len_plus_one=$((max_average_dec_len_plus_one_len + 1))\n  local -r max_average_dec_len_plus_one_len_plus_one_len=$(echo \"$max_average_dec_len_plus_one_len_plus_one\" | wc -c)\n  local -r max_average_dec_len_plus_one_len_plus_one_len_plus_one=$((max_average_dec_len_plus_one_len_plus_one_len + 1))\n  local -r max_average_dec_len_plus_one_len_plus_one_len_plus_one_len=$(echo \"$max_average_dec_len_plus_one_len_plus_one_len_plus_one\" | wc -c)\n  local -r max_average_dec_len_plus_one_len_plus_one_len_plus_one_len_plus_one=$((max_average_dec_len_plus_one_len_plus_one_len_plus_one_len + 1))\n",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$((n * m * 10))\n  local -r max_cost_plus_one=$((max_cost + 1))\n  local -r max_cost_plus_two=$((max_cost + 2))\n  local -r max_cost_plus_three=$((max_cost + 3))\n  local -r max_cost_plus_four=$((max_cost + 4))\n  local -r max_cost_plus_five=$((max_cost + 5))\n  local -r max_cost_plus_six=$((max_cost + 6))\n  local -r max_cost_plus_seven=$((max_cost + 7))\n  local -r max_cost_plus_eight=$((max_cost + 8))\n  local -r max_cost_plus_nine=$((max_cost + 9))\n  local -r max_cost_plus_ten=$((max_cost + 10))\n\n  local -r max_cost_plus_one_div_two=$((max_cost_plus_one / 2))\n  local -r max_cost_plus_two_div_two=$((max_cost_plus_two / 2))\n  local -r max_cost_plus_three_div_two=$((max_cost_plus_three / 2))\n  local -r max_cost_plus_four_div_two=$((max_cost_plus_four / 2))\n  local -r max_cost_plus_five_div_two=$((max_cost_plus_five / 2))\n  local -r max_cost_plus_six_div_two=$((max_cost_plus_six / 2))\n  local -r max_cost_plus_seven_div_two=$((max_cost_plus_seven / 2))\n  local -r max_cost_plus_eight_div_two=$((max_cost_plus_eight / 2))\n  local -r max_cost_plus_nine_div_two=$((max_",
    "  local matrix=\"$1\"\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i j k\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(awk -v i=$i '{print $i}' <<< \"$matrix\")\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i max=0\n      for ((k=0;k<i;k++)); do\n        local -i tmp=$((${dp[k]} + ${dp[i*n+j]}))\n        if ((tmp > max)); then\n          max=$tmp\n        fi\n      done\n      dp[i*n+j]=$max\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    local -i tmp=$((${dp[(n-1)*n+i]} / (n-1)))\n    if ((tmp > max)); then\n      max=$tmp\n    fi\n  done\n  echo $max",
    "  local matrix=\"$1\"\n  local row_count=$(echo \"$matrix\" | wc -l)\n  local col_count=$(echo \"$matrix\" | head -n1 | wc -w)\n  local max_average=0\n  local max_path=''\n  local max_cost=0\n  local max_cells=0\n  local path=''\n  local cost=0\n  local cells=0\n  local average=0\n  local row=0\n  local col=0\n  local cell=0\n  local cell_cost=0\n  local next_cell_cost=0\n  local next_cell=0\n  local next_row=0\n  local next_col=0\n  local next_path=''\n  local next_cost=0\n  local next_cells=0\n  local next_average=0\n  local next_row_count=0\n  local next_col_count=0\n  local next_matrix=''\n  local next_matrix_row=''\n  local next_matrix_col=''\n  local next_matrix_cell=''\n  local next_matrix_cell_cost=0\n  local next_matrix_row_count=0\n  local next_matrix_col_count=0\n  local next_matrix_average=0\n  local next_matrix_cost=0\n  local next_matrix_cells=0\n  local next_matrix_path=''\n  local next_matrix_path_cost=0\n  local next_matrix_path_cells=0\n  local next_matrix_path_average=0\n  local next_matrix_path_average_int=0\n  local next_matrix_path_average_dec=0\n  local next_matrix_path_average_dec_int=0\n  local next_matrix_path_average_dec_dec=0\n  local next_matrix_path_average_dec_dec_int=0\n  local next_matrix_path_average_dec_dec_dec=0\n  local next_matrix_path_average_dec_dec_dec_int=0\n  local next_mat",
    "  local -a matrix\n  local -i n\n  local -i i j\n  local -i max_avg\n  local -i max_sum\n  local -i max_count\n  local -i sum\n  local -i count\n  local -i avg\n  local -i cost\n  local -i cost_i\n  local -i cost_j\n  local -i cost_ij\n  local -i cost_ji\n  local -i cost_i_1j\n  local -i cost_ij_1\n  local -i cost_i_1j_1\n  local -i cost_ij_1_1\n  local -i cost_i_1j_1_1\n  local -i cost_ij_1_1_1\n  local -i cost_i_1j_1_1_1\n  local -i cost_ij_1_1_1_1\n  local -i cost_i_1j_1_1_1_1\n  local -i cost_ij_1_1_1_1_1\n  local -i cost_i_1j_1_1_1_1_1\n  local -i cost_ij_1_1_1_1_1_1\n  local -i cost_i_1j_1_1_1_1_1_1\n  local -i cost_ij_1_1_1_1_1_1_1\n  local -i cost_i_1j_1_1_1_1_1_1_1\n  local -i cost_ij_1_1_1_1_1_1_1_1\n  local -i cost_i_1j_1_1_1_1_1_1_1_1\n  local -i cost_ij_1_1_1_1_1_1_1_1_1\n  local -i cost_i_1j_1_1_1_1_1_1_1_1_1\n  local -i cost_ij_1_1_1_1_1_1_1_1_1_1\n  local -i cost_i_1j_1_1_1_1_1_",
    "  local -n matrix=$1\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp=()\n  local i j\n  for ((i = 0; i < n; i++)); do\n    dp[i]=()\n    for ((j = 0; j < m; j++)); do\n      dp[i][j]=0\n    done\n  done\n  dp[0][0]=$(echo \"$matrix\" | head -n 1 | cut -d ' ' -f 1)\n  for ((i = 1; i < n; i++)); do\n    dp[i][0]=$((dp[i - 1][0] + $(echo \"$matrix\" | head -n $((i + 1)) | tail -n 1 | cut -d ' ' -f 1)))\n  done\n  for ((j = 1; j < m; j++)); do\n    dp[0][j]=$((dp[0][j - 1] + $(echo \"$matrix\" | head -n 1 | cut -d ' ' -f $((j + 1)))))\n  done\n  for ((i = 1; i < n; i++)); do\n    for ((j = 1; j < m; j++)); do\n      dp[i][j]=$((dp[i - 1][j] + dp[i][j - 1] + $(echo \"$matrix\" | head -n $((i + 1)) | tail -n 1 | cut -d ' ' -f $((j + 1)))))\n    done\n  done\n  echo \"${dp[n - 1][m - 1]}\"",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_cost_plus_one=\"$((max_cost + 1))\"\n  local -r max_cost_plus_two=\"$((max_cost + 2))\"\n  local -r max_cost_plus_three=\"$((max_cost + 3))\"\n  local -r max_cost_plus_four=\"$((max_cost + 4))\"\n  local -r max_cost_plus_five=\"$((max_cost + 5))\"\n  local -r max_cost_plus_six=\"$((max_cost + 6))\"\n  local -r max_cost_plus_seven=\"$((max_cost + 7))\"\n  local -r max_cost_plus_eight=\"$((max_cost + 8))\"\n  local -r max_cost_plus_nine=\"$((max_cost + 9))\"\n  local -r max_cost_plus_ten=\"$((max_cost + 10))\"\n  local -r max_cost_plus_eleven=\"$((max_cost + 11))\"\n  local -r max_cost_plus_twelve=\"$((max_cost + 12))\"\n  local -r max_cost_plus_thirteen=\"$((max_cost + 13))\"\n  local -r max_cost_plus_fourteen=\"$((max_cost + 14))\"\n  local -r max_cost_plus_fifteen=\"$((max_cost + 15))\"\n  local -r max_cost_plus_sixteen=\"$((max_cost + 16))\"\n  local -r max_cost_plus_seventeen=\"$((max_cost + 17))\"\n  local -r max_cost_plus_eighteen=\"$((max_cost + 18))\"\n  local -r max_cost_plus_nineteen=\"$((max_cost + 19))\"\n  local -r max_cost_plus_",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j k\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      dp[i,j]=0\n    done\n  done\n  dp[0,0]=${matrix[0]}\n  for ((i=1;i<n;i++)); do\n    dp[i,0]=$((dp[i-1,0]+${matrix[i]}))\n  done\n  for ((j=1;j<n;j++)); do\n    dp[0,j]=$((dp[0,j-1]+${matrix[j*n]}))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<n;j++)); do\n      dp[i,j]=$((dp[i-1,j]>dp[i,j-1]?dp[i-1,j]:dp[i,j-1]))\n      dp[i,j]=$((dp[i,j]+${matrix[i+j*n]}))\n    done\n  done\n  echo \"${dp[n-1,n-1]} $((n*n))\" | awk '{printf \"%.2f\\n\",$1/$2}'",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_m=0\n  local -i max_n=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_average=0\n  local -i average=0\n  local -i max_average=0\n  local -i max_average_i=0\n  local -i max_average_j=0\n  local -i max_average_k=0\n  local -i max_average_l=0\n  local -i max_average_m=0\n  local -i max_average_n=0\n  local -i max_average_count=0\n  local -i max_average_sum=0\n  local -i max_average_average=0\n  local -i max_average_average=0\n  local -i max_average_average_i=0\n  local -i max_average_average_j=0\n  local -i max_average_average_k=0\n  local -i max_average_average_l=0\n  local -i max_average_average_m=0\n  local -i max_average_average_n=0\n  local -i max_average_average_count=0\n  local -i max_average_average_sum=0\n  local -i max_average_average_average=0\n  local -i max_average_average_average=0\n  local -i max_average_average_average_i=0\n  local -i max_average_average_average_j=0\n  local -i max_average_average_average",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -r max_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\n  local -r min_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n 1)\n  local -r max_avg=$(echo \"scale=2; $max_cost / $n\" | bc)\n  local -r min_avg=$(echo \"scale=2; $min_cost / $n\" | bc)\n  local -r min_avg_rounded=$(echo \"$min_avg\" | awk '{printf \"%.0f\", $0}')\n  local -r max_avg_rounded=$(echo \"$max_avg\" | awk '{printf \"%.0f\", $0}')\n  local -r min_avg_rounded_plus_one=$((min_avg_rounded + 1))\n  local -r max_avg_rounded_minus_one=$((max_avg_rounded - 1))\n  local -r min_avg_rounded_plus_one_plus_one=$((min_avg_rounded_plus_one + 1))\n  local -r max_avg_rounded_minus_one_minus_one=$((max_avg_rounded_minus_one - 1))\n  local -r min_avg_rounded_plus_one_plus_one_plus_one=$((min_avg_rounded_plus_one_plus_one + 1))\n  local -r max_avg_rounded_minus_one_minus_one_minus_one=$((max_avg_rounded_minus_one_minus_one - 1))\n  local -r min_avg_rounded_plus_one_plus_one_plus_one_plus_one=$((min_avg_rounded_plus_one_plus_one_plus_one + 1))\n  local -r max_avg_rounded_minus",
    "  local -a matrix=()\n  local -i i=0 j=0 k=0\n  local -i n=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i max_i=0\n  local -i max_j=",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n 1)\"\n  local -r max_path_length=\"$((n + m - 2))\"\n  local -r min_path_length=\"$((n + m - 1))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max_cost / $min_path_length\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $min_cost / $max_path_length\")\"\n  local -r max_average_int=\"$(echo \"$max_average\" | cut -d '.' -f 1)\"\n  local -r min_average_int=\"$(echo \"$min_average\" | cut -d '.' -f 1)\"\n  local -r max_average_dec=\"$(echo \"$max_average\" | cut -d '.' -f 2)\"\n  local -r min_average_dec=\"$(echo \"$min_average\" | cut -d '.' -f 2)\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r min_average_dec_len=\"${#min_average_dec}\"\n  local -r max_average_dec_len_diff=\"$((max_average_dec_len - min_average_dec_len))\"\n  local -r max_average_dec_len_diff_abs=\"$(echo \"$max_average_dec_len_diff\" | awk '{print $1 < 0 ? -$1 : $1}')\"\n  local -r max_average_dec_len_diff_abs_padded=\"$(printf \"%0${max_average_dec_len_diff_abs}",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r matrix_size=\"$((n * m))\"\n  local -r max_sum=\"$((n * m * 100))\"\n  local -r max_average=\"$((max_sum / matrix_size))\"\n  local -r max_average_decimal=\"$((max_average % 100))\"\n  local -r max_average_integer=\"$((max_average / 100))\"\n  local -r max_average_decimal_len=\"${#max_average_decimal}\"\n  local -r max_average_integer_len=\"${#max_average_integer}\"\n  local -r max_average_len=\"$((max_average_integer_len + max_average_decimal_len + 1))\"\n  local -r max_average_format=\"%0${max_average_len}d\"\n  local -r max_average_string=\"$(printf \"$max_average_format\" \"$max_average\")\"\n  local -r max_average_integer_string=\"${max_average_string:0:max_average_integer_len}\"\n  local -r max_average_decimal_string=\"${max_average_string:max_average_integer_len:max_average_decimal_len}\"\n  local -r max_average_decimal_string_len=\"${#max_average_decimal_string}\"\n  local -r max_average_decimal_string_format=\"%0${max_average_decimal_string_len}d\"\n  local -r max_average_decimal_string_format_len=\"${#max_average_decimal_string_format}\"\n  local -r max_average_decimal_string_format_len_minus_1=\"$((max_average_decimal_string_format_len - 1))\"\n  local -r max_average_decimal_string_format_len_minus_2=\"$((max_average_decimal_string_format_len - 2))\"\n  local",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      dp[j]=$(bc -l <<< \"${matrix[i]}[$j] + ${dp[j]}\")\n      if ((i > 0)); then\n        dp[j]=$(bc -l <<< \"${dp[j]} + ${dp[j-1]}\")\n        dp[j]=$(bc -l <<< \"${dp[j]} / 2\")\n      fi\n    done\n  done\n  printf '%.2f\\n' \"${dp[-1]}\"",
    "    local -r matrix=\"$1\"\n    local -r n=\"$(wc -l <<< \"$matrix\")\"\n    local -r m=\"$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\"\n    local -r max_cost=\"$((n * m * 9))\"\n    local -r max_cost_str=\"$(printf \"%0${#max_cost}d\" \"$max_cost\")\"\n    local -r max_cost_len=\"${#max_cost_str}\"\n    local -r max_cost_str_plus_one=\"$(printf \"%0${#max_cost}d\" \"$((max_cost + 1))\")\"\n    local -r max_cost_len_plus_one=\"${#max_cost_str_plus_one}\"\n    local -r max_cost_len_plus_one_minus_one=\"$((max_cost_len_plus_one - 1))\"\n    local -r max_cost_len_plus_one_minus_one_str=\"$(printf \"%0${#max_cost}d\" \"$max_cost_len_plus_one_minus_one\")\"\n    local -r max_cost_len_plus_one_minus_one_str_plus_one=\"$(printf \"%0${#max_cost}d\" \"$((max_cost_len_plus_one_minus_one + 1))\")\"\n    local -r max_cost_len_plus_one_minus_one_str_plus_one_len=\"${#max_cost_len_plus_one_minus_one_str_plus_one}\"\n    local -r max_cost_len_plus_one_minus_one_str_plus_one_len_minus_one=\"$((max_cost_len_plus_one_minus_one_str_plus_one_len - 1))\"\n    local -r max_cost_len_plus_one_minus_one_str_plus_one_len_minus_one_str=\"$(printf \"%0${#max_cost}d\" \"$max_cost_len_plus_one_minus_one_str_plus_one_len_minus_one",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a path\n  local -i max_avg=0\n  local -i sum=0\n  local -i count=0\n  local -i avg=0\n  local -i max_sum=0\n  local -i max_count=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      path[i,j]=0\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      if ((i==0 && j==0)); then\n        path[i,j]=${matrix[i,j]}\n      elif ((i==0)); then\n        path[i,j]=${path[i,j-1]}+${matrix[i,j]}\n      elif ((j==0)); then\n        path[i,j]=${path[i-1,j]}+${matrix[i,j]}\n      else\n        path[i,j]=$((path[i-1,j]>path[i,j-1]?path[i-1,j]:path[i,j-1]))+${matrix[i,j]}\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      sum=0\n      count=0\n      for ((k=0; k<=i; k++)); do\n        for ((l=0; l<=j; l++)); do\n          sum=$((sum+matrix[k,l]))\n          count=$((count+1))\n        done\n      done\n      avg=$((sum/count))\n      if ((avg>max_avg)); then\n        max_avg=$avg\n        max_sum=$sum\n        max_count=$count\n      fi\n    done\n  done\n\n  echo \"$max_avg\"",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_avg=0\n  local max_path=\"\"\n\n  for ((i=0; i<rows; i++)); do\n    for ((j=0; j<cols; j++)); do\n      local path=$(getPath \"$matrix\" \"$i\" \"$j\")\n      local avg=$(echo \"$path\" | awk '{sum+=$1} END {print sum/NR}')\n      if (( $(echo \"$avg > $max_avg\" | bc -l) )); then\n        max_avg=$avg\n        max_path=$path\n      fi\n    done\n  done\n\n  echo \"$max_path\"",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp=(0)\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i][0]))\n  done\n  for ((j=1;j<n;j++)); do\n    dp[0]=$((dp[0]+matrix[0][j]))\n    for ((i=1;i<n;i++)); do\n      dp[i]=$((dp[i-1]>dp[i]?dp[i-1]:dp[i]))\n      dp[i]=$((dp[i]+matrix[i][j]))\n    done\n  done\n  echo $((dp[n-1]*100/(n*n)))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_path_length=\"$((n + m - 1))\"\n  local -r max_average=\"$((max_cost / max_path_length))\"\n  local -r max_average_length=\"${#max_average}\"\n  local -r max_average_length_plus_one=\"$((max_average_length + 1))\"\n  local -r max_average_length_plus_two=\"$((max_average_length + 2))\"\n  local -r max_average_length_plus_three=\"$((max_average_length + 3))\"\n  local -r max_average_length_plus_four=\"$((max_average_length + 4))\"\n  local -r max_average_length_plus_five=\"$((max_average_length + 5))\"\n  local -r max_average_length_plus_six=\"$((max_average_length + 6))\"\n  local -r max_average_length_plus_seven=\"$((max_average_length + 7))\"\n  local -r max_average_length_plus_eight=\"$((max_average_length + 8))\"\n  local -r max_average_length_plus_nine=\"$((max_average_length + 9))\"\n  local -r max_average_length_plus_ten=\"$((max_average_length + 10))\"\n  local -r max_average_length_plus_eleven=\"$((max_average_length + 11))\"\n  local -r max_average_length_plus_twelve=\"$((max_average_length + 12))\"\n  local -r max_average_length_plus_thirteen=\"$((max_average_length + 13))\"\n  local -r max_average_length_plus_fourteen=\"$((max_average_length + 14))\"\n  local -r max_average_length_plus",
    "  local -a matrix\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i maxCount=0\n  local -i maxSum=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxK=0\n  local -i maxL=0\n  local -i maxM=0\n  local -i maxN=0\n  local -i maxO=0\n  local -i maxP=0\n  local -i maxQ=0\n  local -i maxR=0\n  local -i maxS=0\n  local -i maxT=0\n  local -i maxU=0\n  local -i maxV=0\n  local -i maxW=0\n  local -i maxX=0\n  local -i maxY=0\n  local -i maxZ=0\n  local -i maxAA=0\n  local -i maxAB=0\n  local -i maxAC=0\n  local -i maxAD=0\n  local -i maxAE=0\n  local -i maxAF=0\n  local -i maxAG=0\n  local -i maxAH=0\n  local -i maxAI=0\n  local -i maxAJ=0\n  local -i maxAK=0\n  local -i maxAL=0\n  local -i maxAM=0\n  local -i maxAN=0\n  local -i maxAO=0\n  local -i maxAP=0\n  local -i maxAQ=0\n  local -i maxAR=0\n  local -i maxAS=0\n  local -i maxAT=0\n  local -i maxAU=0\n  local -i maxAV=0\n  local -i maxAW=0\n  local -i maxAX=0\n  local -i maxAY=0\n  local -i maxAZ=0\n  local -i maxBA=0\n  local -i maxBB=",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(awk '{print NF}' <<< \"$matrix\" | sort -nu | head -n1)\n  local -r max_paths=$((n * m))\n  local -r max_cost=$((n * m * 9))\n  local -r max_average=$((max_cost / max_paths))\n  local -r max_average_len=$(printf \"%d\" \"$max_average\" | wc -c)\n  local -r max_average_len=$((max_average_len - 1))\n  local -r max_average_str=$(printf \"%0${max_average_len}d\" \"$max_average\")\n  local -r max_average_str_len=$(printf \"%s\" \"$max_average_str\" | wc -c)\n  local -r max_average_str_len=$((max_average_str_len - 1))\n  local -r max_average_str_len_str=$(printf \"%0${max_average_str_len}d\" \"$max_average_str_len\")\n  local -r max_average_str_len_str_len=$(printf \"%s\" \"$max_average_str_len_str\" | wc -c)\n  local -r max_average_str_len_str_len=$((max_average_str_len_str_len - 1))\n  local -r max_average_str_len_str_len_str=$(printf \"%0${max_average_str_len_str_len}d\" \"$max_average_str_len_str_len\")\n  local -r max_average_str_len_str_len_str_len=$(printf \"%s\" \"$max_average_str_len_str_len_str\" | wc -c)\n  local -r max_average_str_len_str_len_str_len=$((max_average_str_len_str_len_str_len - 1))\n  local -r max_average_str_len_str_len_str_len_str=$(",
    "    local -a matrix\n    local -i i j n\n    local -i max_avg=0\n    local -i max_avg_i=0\n    local -i max_avg_j=0\n    local -i max_avg_n=0\n    local -i max_avg_sum=0\n    local -i max_avg_sum_i=0\n    local -i max_avg_sum_j=0\n    local -i max_avg_sum_n=0\n    local -i max_avg_sum_sum=0\n    local -i max_avg_sum_sum_i=0\n    local -i max_avg_sum_sum_j=0\n    local -i max_avg_sum_sum_n=0\n    local -i max_avg_sum_sum_sum=0\n    local -i max_avg_sum_sum_sum_i=0\n    local -i max_avg_sum_sum_sum_j=0\n    local -i max_avg_sum_sum_sum_n=0\n    local -i max_avg_sum_sum_sum_sum=0\n    local -i max_avg_sum_sum_sum_sum_i=0\n    local -i max_avg_sum_sum_sum_sum_j=0\n    local -i max_avg_sum_sum_sum_sum_n=0\n    local -i max_avg_sum_sum_sum_sum_sum=0\n    local -i max_avg_sum_sum_sum_sum_sum_i=0\n    local -i max_avg_sum_sum_sum_sum_sum_j=0\n    local -i max_avg_sum_sum_sum_sum_sum_n=0\n    local -i max_avg_sum_sum_sum_sum_sum_sum=0\n    local -i max_avg_sum_sum_sum_sum_sum_sum_i=0\n    local -i max_avg_sum_sum_sum_sum_sum_sum_j=0\n    local -i",
    "  local -a matrix\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i maxCount=0\n  local -i maxSum=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxAvg=0\n  local -i avg=0\n  local -i avgSum=0\n  local -i avgCount=0\n  local -i avgI=0\n  local -i avgJ=0\n  local -i avgAvg=0\n  local -i maxAvgI=0\n  local -i maxAvgJ=0\n  local -i maxAvgAvg=0\n  local -i maxAvgSum=0\n  local -i maxAvgCount=0\n  local -i maxAvgMax=0\n  local -i maxAvgMaxI=0\n  local -i maxAvgMaxJ=0\n  local -i maxAvgMaxCount=0\n  local -i maxAvgMaxSum=0\n  local -i maxAvgMaxAvg=0\n  local -i maxAvgMaxAvgI=0\n  local -i maxAvgMaxAvgJ=0\n  local -i maxAvgMaxAvgCount=0\n  local -i maxAvgMaxAvgSum=0\n  local -i maxAvgMaxAvgAvg=0\n  local -i maxAvgMaxAvgAvgI=0\n  local -i maxAvgMaxAvgAvgJ=0\n  local -i maxAvgMaxAvgAvgCount=0\n  local -i maxAvgMaxAvgAvgSum=0\n  local -i maxAvgMaxAvgAvgAvg=0\n  local -i maxAvgMaxAvgAvgAvgI=0\n  local -i maxAvgMaxAvgAvgAvgJ=0\n  local -i maxAvgMaxAvgAvgAvgCount=0\n  local -i maxAvgMaxAvgAvgAvgSum=0\n  local -i maxAvgMaxAvgAvgAvgAvg=0\n  local -i maxAvgMaxAvgAvgAvgAvgI=0\n  local -i maxAvgMaxAvgAvgAvgAvgJ=0\n  local -i maxAvgMaxAvgAvgAvgAvgCount=0\n  local -i",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i max=0\n  local -i curr=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_curr=0\n  local -i max_max=0\n  local -i max_sum_count=0\n  local -i max_sum_i=0\n  local -i max_sum_j=0\n  local -i max_sum_k=0\n  local -i max_sum_n=0\n  local -i max_sum_curr=0\n  local -i max_sum_max=0\n  local -i max_sum_sum=0\n  local -i max_sum_count=0\n  local -i max_sum_max_count=0\n  local -i max_sum_max_sum=0\n  local -i max_sum_max_i=0\n  local -i max_sum_max_j=0\n  local -i max_sum_max_k=0\n  local -i max_sum_max_n=0\n  local -i max_sum_max_curr=0\n  local -i max_sum_max_max=0\n  local -i max_sum_max_sum=0\n  local -i max_sum_max_count=0\n  local -i max_sum_max_max_count=0\n  local -i max_sum_max_max_sum=0\n  local -i max_sum_max_max_i=0\n  local -i max_sum_max_max_j=0\n  local -i max_sum_max_max_k=0\n  local -i max_sum_max_max_n=0\n  local -i max_sum_max_max",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -r max_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n1)\n  local -r min_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n1)\n  local -r max_path_length=$((n + m - 1))\n  local -r max_average=$(echo \"scale=2; $max_cost / $max_path_length\" | bc)\n  local -r min_average=$(echo \"scale=2; $min_cost / $max_path_length\" | bc)\n  local -r epsilon=$(echo \"scale=2; $max_average / 100\" | bc)\n  local -r max_iterations=$((max_path_length * max_path_length))\n\n  local -r costs=$(echo \"$matrix\" | tr ' ' '\\n')\n  local -r costs_array=($costs)\n  local -r costs_array_length=$(echo \"${#costs_array[@]}\")\n\n  local -r costs_matrix=$(echo \"$matrix\" | tr ' ' '\\n' | paste -sd ' ' -)\n  local -r costs_matrix_array=($costs_matrix)\n  local -r costs_matrix_array_length=$(echo \"${#costs_matrix_array[@]}\")\n\n  local -r costs_matrix_transposed=$(echo \"$matrix\" | tr ' ' '\\n' | paste -sd ' ' - | tr ' ' '\\n' | paste -sd ' ' -)\n  local -r costs_matrix_transposed_array=($costs_matrix_transposed)\n  local -r costs_matrix_transposed_array_length=$(echo \"${#costs_matrix_transposed_array[@]}\")\n\n  local -r costs_matrix_transposed_re",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i=0 j=0\n  local -i max=0\n  local -i sum=0\n  local -i maxSum=0\n  local -i maxCount=0\n  local -i count=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxI2=0\n  local -i maxJ2=0\n  local -i maxI3=0\n  local -i maxJ3=0\n  local -i maxI4=0\n  local -i maxJ4=0\n  local -i maxI5=0\n  local -i maxJ5=0\n  local -i maxI6=0\n  local -i maxJ6=0\n  local -i maxI7=0\n  local -i maxJ7=0\n  local -i maxI8=0\n  local -i maxJ8=0\n  local -i maxI9=0\n  local -i maxJ9=0\n  local -i maxI10=0\n  local -i maxJ10=0\n  local -i maxI11=0\n  local -i maxJ11=0\n  local -i maxI12=0\n  local -i maxJ12=0\n  local -i maxI13=0\n  local -i maxJ13=0\n  local -i maxI14=0\n  local -i maxJ14=0\n  local -i maxI15=0\n  local -i maxJ15=0\n  local -i maxI16=0\n  local -i maxJ16=0\n  local -i maxI17=0\n  local -i maxJ17=0\n  local -i maxI18=0\n  local -i maxJ18=0\n  local -i maxI19=0\n  local -i maxJ19=0\n  local -i maxI20=0\n  local -i maxJ20=0\n  local -i maxI21=0\n  local -i maxJ21=0\n  local -i maxI22=0\n  local -i maxJ22=",
    "  local matrix=\"$1\"\n  local -i rows=$(echo \"$matrix\" | wc -l)\n  local -i cols=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max=0\n  local -i current=0\n  local -i next=0\n  local -i next_right=0\n  local -i next_down=0\n  local -i next_right_down=0\n  local -i next_right_down_sum=0\n  local -i next_right_sum=0\n  local -i next_down_sum=0\n  local -i next_right_down_count=0\n  local -i next_right_count=0\n  local -i next_down_count=0\n  local -i next_right_down_avg=0\n  local -i next_right_avg=0\n  local -i next_down_avg=0\n  local -i next_right_down_max=0\n  local -i next_right_max=0\n  local -i next_down_max=0\n  local -i next_right_down_max_avg=0\n  local -i next_right_max_avg=0\n  local -i next_down_max_avg=0\n  local -i max_avg=0\n  local -i max_avg_count=0\n  local -i max_avg_sum=0\n  local -i max_avg_max=0\n  local -i max_avg_max_avg=0\n  local -i max_avg_max_avg_count=0\n  local -i max_avg_max_avg_sum=0\n  local -i max_avg_max_avg_max=0\n  local -i max_avg_max_avg_max_avg=0\n  local -i max_avg_max_avg_max_avg_count=0\n  local -i max_avg_max_avg",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -i max_average=0\n  local -i max_average_path_length=0\n  local -i max_average_path_cost=0\n  local -i max_average_path_count=0\n  local -i max_average_path_total_cost=0\n  local -i max_average_path_total_length=0\n  local -i max_average_path_total_count=0\n  local -i max_average_path_total_average=0\n  local -i max_average_path_total_average_count=0\n  local -i max_average_path_total_average_cost=0\n  local -i max_average_path_total_average_length=0\n  local -i max_average_path_total_average_average=0\n  local -i max_average_path_total_average_average_count=0\n  local -i max_average_path_total_average_average_cost=0\n  local -i max_average_path_total_average_average_length=0\n  local -i max_average_path_total_average_average_average=0\n  local -i max_average_path_total_average_average_average_count=0\n  local -i max_average_path_total_average_average_average_cost=0\n  local -i max_average_path_total_average_average_average_length=0\n  local -i max_average_path_total_average_average_average_average=0\n  local -i max_average_path_total_average_average_average_average_count=0\n  local -i max_average_path_total_average_average_average_average_cost=0\n  local -i max_average_path_total_average_average_average_average_length=0\n  local -i max_average_path_total_average_average_average_average_average=0\n  local -i max_average_path_total",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a path\n  local -i i j\n  local -i max_avg\n  local -i max_avg_row\n  local -i max_avg_col\n  local -i max_avg_row_count\n  local -i max_avg_col_count\n  local -i current_avg\n  local -i current_avg_row\n  local -i current_avg_col\n  local -i current_avg_row_count\n  local -i current_avg_col_count\n  local -i current_avg_row_count_sum\n  local -i current_avg_col_count_sum\n  local -i current_avg_row_count_sum_prev\n  local -i current_avg_col_count_sum_prev\n  local -i current_avg_row_count_sum_prev_prev\n  local -i current_avg_col_count_sum_prev_prev\n  local -i current_avg_row_count_sum_prev_prev_prev\n  local -i current_avg_col_count_sum_prev_prev_prev\n  local -i current_avg_row_count_sum_prev_prev_prev_prev\n  local -i current_avg_col_count_sum_prev_prev_prev_prev\n  local -i current_avg_row_count_sum_prev_prev_prev_prev_prev\n  local -i current_avg_col_count_sum_prev_prev_prev_prev_prev\n  local -i current_avg_row_count_sum_prev_prev_prev_prev_prev_prev\n  local -i current_avg_col_count_sum_prev_prev_prev_prev_prev_prev\n  local -i current_avg_row_count_sum_prev_prev_prev_prev_prev_prev_prev\n  local -i current_",
    "  local -n matrix=$1\n  local n=$(wc -l <<< \"$matrix\")\n  local -a dp=()\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  local -a row\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i i=0\n  local -i j=0\n  while read -a row; do\n    for ((j=0;j<n;j++)); do\n      sum=${row[j]}\n      if ((i > 0)); then\n        sum=$((sum + dp[j]))\n      fi\n      if ((j > 0)); then\n        sum=$((sum + dp[j-1]))\n      fi\n      if ((i > 0 && j > 0)); then\n        sum=$((sum - dp[j-1]))\n      fi\n      dp[j]=$sum\n      if ((sum > max)); then\n        max=$sum\n        max_i=$i\n        max_j=$j\n      fi\n    done\n    ((i++))\n  done <<< \"$matrix\"\n  echo $max_i $max_j",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_1=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_len_plus_1_padded=\"$(printf \"%0${max_average_dec_len_plus_1}d\" 0)\"\n  local -r max_average_dec_padded=\"$(printf \"%0${max_average_dec_len_plus_1}d\" \"$max_average_dec\")\"\n  local -r max_average_padded=\"$(printf \"%0${max_average_dec_len_plus_1}d\" \"$max_average_int\")\"\n  local -r max_average_padded_plus_1=\"$((max_average_padded + 1))\"\n  local -r max_average_padded_plus_1_padded=\"$(printf \"%0${max_average_dec_len_plus_1}d\" \"$max_average_padded_plus_1\")\"\n  local -r max_average_padded_plus_1_padded_plus_1=\"$((max_average_padded_plus_1_padded + 1))\"\n  local -r max_average_padded_plus_1_padded_plus_1_padded=\"$(printf \"%0${max_average_dec_len_plus_1}d\" \"$max_average_padded_plus_1_padded_plus_",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -r max=$((n * m))\n  local -r max_average=$(echo \"$matrix\" | awk '{for(i=1;i<=NF;i++)sum+=$i;print sum/(NF*NR)}')\n  local -r max_average_int=$(echo \"$max_average\" | awk '{print int($1)}')\n  local -r max_average_dec=$(echo \"$max_average\" | awk '{print $1-int($1)}')\n  local -r max_average_dec_int=$(echo \"$max_average_dec\" | awk '{print int($1*10^6)}')\n  local -r max_average_dec_int_len=$(echo \"$max_average_dec_int\" | wc -c)\n  local -r max_average_dec_int_len_max=$((6 - max_average_dec_int_len))\n  local -r max_average_dec_int_len_max_str=$(printf \"%0${max_average_dec_int_len_max}d\" 0)\n  local -r max_average_dec_int_str=$(echo \"$max_average_dec_int_len_max_str$max_average_dec_int\" | sed 's/^0*//')\n  local -r max_average_str=\"$max_average_int.$max_average_dec_int_str\"\n  local -r max_average_len=$(echo \"$max_average_str\" | wc -c)\n  local -r max_average_len_max=$((max_average_len - 1))\n  local -r max_average_len_max_str=$(printf \"%0${max_average_len_max}d\" 0)\n  local -r max_average_str_padded=\"$max_average_len_max_str$max_average_str\"\n  local -r max_average_str_p",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r dp=\"$(mktemp)\"\n  local -r path=\"$(mktemp)\"\n  local -r result=\"$(mktemp)\"\n  local -r path_cost=\"$(mktemp)\"\n  local -r path_len=\"$(mktemp)\"\n  local -r path_avg=\"$(mktemp)\"\n  local -r path_max=\"$(mktemp)\"\n  local -r path_max_avg=\"$(mktemp)\"\n  local -r path_max_avg_path=\"$(mktemp)\"\n  local -r path_max_avg_path_len=\"$(mktemp)\"\n  local -r path_max_avg_path_avg=\"$(mktemp)\"\n  local -r path_max_avg_path_max=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg_path=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg_path_len=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg_path_avg=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg_path_max=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg_path_max_avg=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg_path_max_avg_path=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg_path_max_avg_path_len=\"$(mktemp)\"\n  local -r path_max_avg_path_max_avg_path_max_avg_path_av",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r total=\"$((n * m))\"\n  local -r cost=\"$(awk '{s+=$1} END {print s}' <<< \"$matrix\")\"\n  local -r average=\"$(bc -l <<< \"scale=4; $cost / $total\")\"\n  echo \"$average\"",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp=()\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      fi\n    done\n  done\n  echo $((dp[n-1]/(n*n)))",
    "  local -n matrix=$1\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$matrix\")\n  local -A dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((i==0 && j==0)); then\n        dp[$i,$j]=$(cut -d' ' -f1 <<< \"$matrix\")\n      elif ((i==0)); then\n        dp[$i,$j]=$((dp[$i,$((j-1))]+$(cut -d' ' -f$((j+1)) <<< \"$matrix\")))\n      elif ((j==0)); then\n        dp[$i,$j]=$((dp[$((i-1)),$j]+$(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n      else\n        dp[$i,$j]=$((dp[$((i-1)),$j]+$(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n      fi\n    done\n  done\n  echo \"${dp[$((n-1)),$((m-1))]}\"",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i m=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_m=0\n  local -i max_n=0\n  local -i max_i_j=0\n  local -i max_k_l=0\n  local -i max_m_n=0\n  local -i max_i_j_k_l=0\n  local -i max_i_j_k_l_m_n=0\n  local -i max_i_j_k_l_m_n_count=0\n  local -i max_i_j_k_l_m_n_sum=0\n  local -a array\n  local -a max_array\n  local -a max_i_j_array\n  local -a max_k_l_array\n  local -a max_m_n_array\n  local -a max_i_j_k_l_array\n  local -a max_i_j_k_l_m_n_array\n  local -a max_i_j_k_l_m_n_count_array\n  local -a max_i_j_k_l_m_n_sum_array\n  local -a max_i_j_k_l_m_n_count_array\n  local -a max_i_j_k_l_m_n_sum_array\n  local -a max_i_j_k_l_m_n_count_array\n  local -a max_i_j_k_l_m_n_sum_array\n  local -a max_i_j_k_l_m_n",
    "  local -a matrix\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0\n ",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((i==0 && j==0)); then\n        dp[i,j]=$(echo \"$matrix\" | head -n1 | awk '{print $1}')\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1]+$(echo \"$matrix\" | head -n1 | awk -v j=$((j+1)) '{print $j}')))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j]+$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk '{print $1}')))\n      else\n        dp[i,j]=$((dp[i-1,j]+dp[i,j-1]+$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk -v j=$((j+1)) '{print $j}')))\n      fi\n    done\n  done\n  echo $((dp[n-1,m-1]/((n-1)+(m-1)+1)))",
    "  local matrix=\"$1\"\n  local -a path\n  local -a costs\n  local -a row\n  local -a col\n  local -a rows\n  local -a cols\n  local -a max_costs\n  local -a max_path\n  local -a max_row\n  local -a max_col\n  local -a max_rows\n  local -a max_cols\n  local -i i\n  local -i j\n  local -i k\n  local -i n\n  local -i max_n\n  local -i max_cost\n  local -i cost\n  local -i max_average\n  local -i average\n  local -i max_i\n  local -i max_j\n  local -i max_k\n  local -i max_row_i\n  local -i max_col_i\n  local -i max_row_j\n  local -i max_col_j\n  local -i max_row_k\n  local -i max_col_k\n  local -i max_row_n\n  local -i max_col_n\n\n  while read -r line; do\n    row=($line)\n    rows+=(\"${row[@]}\")\n    cols+=(\"${row[@]}\")\n  done <<< \"$matrix\"\n\n  n=${#rows[@]}\n  max_n=$n\n  max_cost=0\n  max_average=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      for ((k=0; k<n; k++)); do\n        cost=0\n        for ((l=0; l<n; l++)); do\n          if ((l < i)); then\n            cost+=${rows[l]:j:1}\n          elif ((l < j)); then\n            cost+=${cols[l]:i:1}\n          elif ((l < k)); then\n            cost+=${rows[l]:j:1}\n          else\n            cost+=${cols[l]:i:1}\n          fi\n        done\n        average=$((cost / (i + j + k",
    "    local -n matrix=$1\n    local -i n=${#matrix[@]}\n    local -a dp\n    for ((i=0;i<n;i++)); do\n        dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n')\n    done\n    for ((i=1;i<n;i++)); do\n        dp[i][0]=$(echo \"${dp[i-1][0]} ${matrix[i][0]}\" | awk '{print $1+$2}')\n        dp[0][i]=$(echo \"${dp[0][i-1]} ${matrix[0][i]}\" | awk '{print $1+$2}')\n    done\n    for ((i=1;i<n;i++)); do\n        for ((j=1;j<n;j++)); do\n            dp[i][j]=$(echo \"${dp[i-1][j]} ${dp[i][j-1]} ${matrix[i][j]}\" | awk '{print $1+$2+$3}')\n        done\n    done\n    echo \"${dp[n-1][n-1]} $((n*n))\" | awk '{print $1/$2}'",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r total=\"$(awk '{s+=$1}END{print s}' <<< \"$matrix\")\"\n  local -r max=\"$((total / n))\"\n  local -r max_path=\"$(\n    awk '{\n      for(i=1;i<=NF;i++){\n        if(i==1){\n          print $i\n        }else{\n          print $i\" \"$(i-1)\n        }\n      }\n    }' <<< \"$matrix\"\n  )\"\n  echo \"$max_path\"\n  echo \"$max\"",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=${matrix[i]}\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 10))\"\n  local -r max_path=\"$(seq -s' ' \"$n\" | tr -d '[:digit:]')\"\n  local -r max_path_cost=\"$(paste -sd+ <<< \"$max_path\")\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max_path_cost / $n\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_padded=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_padded=\"$(printf \"%0${max_average_dec_len_padded}d\" \"$max_average_dec\")\"\n  local -r max_average_padded=\"$max_average_int.$max_average_dec_padded\"\n  local -r max_average_padded_len=\"${#max_average_padded}\"\n  local -r max_average_padded_len_padded=\"$((max_average_padded_len + 1))\"\n  local -r max_average_padded_padded=\"$(printf \"%0${max_average_padded_len_padded}d\" \"$max_average_padded\")\"\n  local -r max_average_padded_padded_len=\"${#max_average_padded_padded}\"\n  local -r max_average_padded_padded_len_padded=\"$((max_average_padded_padded_len + 1))\"\n  local -r max_average_padded_padded",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_count=0\n  local -i max_max_sum=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_count=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_count=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_count=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_count=0\n  local -i max_max_max_max_max_max",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_n=0\n  local -i max_max_count=0\n  local -i max_max_sum=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_n=0\n  local -i max_max_max_count=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_count=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_count=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max",
    "  local -a matrix\n  local -i i j\n  local -i n\n  local -i sum\n  local -i max_sum\n  local -i max_len\n  local -i max_avg\n  local -i len\n  local -i avg\n  local -i cost\n  local -i row\n  local -i col\n  local -i next_row\n  local -i next_col\n  local -i next_cost\n  local -i next_len\n  local -i next_sum\n  local -i next_avg\n  local -i next_max_avg\n  local -i next_max_sum\n  local -i next_max_len\n  local -i next_max_avg_len\n  local -i next_max_avg_sum\n  local -i next_max_avg_avg\n  local -i max_avg_len\n  local -i max_avg_sum\n  local -i max_avg_avg\n\n  IFS=$'\\n' read -r -d '' -a matrix < <(echo \"$1\")\n  n=${#matrix[@]}\n  max_avg_len=0\n  max_avg_sum=0\n  max_avg_avg=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      cost=${matrix[i]:j:1}\n      len=1\n      sum=cost\n      avg=$((sum/len))\n      if ((i==0 && j==0)); then\n        max_sum=sum\n        max_len=len\n        max_avg=avg\n      else\n        next_max_avg_len=0\n        next_max_avg_sum=0\n        next_max_avg_avg=0\n        for ((row=i-1; row>=0; row--)); do\n          next_cost=${matrix[row]:j:1}\n          next_len=$((len+1))\n          next_sum=$((sum+next_cost))\n          next_avg=$((next_sum",
    "  local -n matrix=$1\n  local -a dp\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      fi\n    done\n  done\n  echo \"${dp[n-1]} $((n*n))\" | awk '{printf \"%.2f\\n\", $1/$2}'",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local -a dp\n  local -a path\n  local i j k\n  for ((i=0; i<n; i++)); do\n    dp[i]=0\n    path[i]=0\n  done\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      local cell=$(echo \"$matrix\" | sed -n \"$((i+1))p\" | awk \"{print \\$$((j+1))}\")\n      if ((i == 0)); then\n        dp[j]=$cell\n      elif ((j == 0)); then\n        dp[j]=$((dp[j] + cell))\n      else\n        dp[j]=$((dp[j-1] > dp[j] ? dp[j-1] + cell : dp[j] + cell))\n      fi\n      if ((i == n-1)); then\n        path[j]=$((j > 0 && dp[j-1] > dp[j] ? j-1 : j))\n      fi\n    done\n  done\n  local max=$((dp[n-1] / n))\n  local -a path_\n  for ((i=n-1; i>=0; i--)); do\n    path_[i]=$((path[i]+1))\n    if ((i > 0)); then\n      i=$((path[i]-1))\n    fi\n  done\n  echo \"${path_[*]}\"\n  echo \"$max\"",
    "  local -n matrix=$1\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i=0 j=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i maxCount=0\n  local -i maxSum=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxAvg=0\n  local -i avg=0\n  local -i maxAvg=0\n  local -i maxAvgI=0\n  local -i maxAvgJ=0\n  local -i maxAvgCount=0\n  local -i maxAvgSum=0\n  local -i maxAvgAvg=0\n  local -i maxAvgMax=0\n  local -i maxAvgMaxI=0\n  local -i maxAvgMaxJ=0\n  local -i maxAvgMaxCount=0\n  local -i maxAvgMaxSum=0\n  local -i maxAvgMaxAvg=0\n  local -i maxAvgMaxMax=0\n  local -i maxAvgMaxMaxI=0\n  local -i maxAvgMaxMaxJ=0\n  local -i maxAvgMaxMaxCount=0\n  local -i maxAvgMaxMaxSum=0\n  local -i maxAvgMaxMaxAvg=0\n  local -i maxAvgMaxMaxMax=0\n  local -i maxAvgMaxMaxMaxI=0\n  local -i maxAvgMaxMaxMaxJ=0\n  local -i maxAvgMaxMaxMaxCount=0\n  local -i maxAvgMaxMaxMaxSum=0\n  local -i maxAvgMaxMaxMaxAvg=0\n  local -i maxAvgMaxMaxMaxMax=0\n  local -i maxAvgMaxMaxMaxMaxI=0\n  local -i maxAvgMaxMaxMaxMaxJ=0\n  local -i maxAvgMaxMaxMaxMaxCount=0\n  local -i maxAvgMaxMaxMaxMaxSum=0\n  local -i maxAvgMaxMaxMaxMaxAvg=0\n  local -i maxAvgMaxMaxMaxMaxMax=0\n  local -i maxAvgMaxMaxMaxMaxMaxI=0\n  local -i maxAvgMaxMaxMaxMaxMaxJ=",
    "  local matrix=\"$1\"\n  local -a costs\n  local -a path\n  local -a paths\n  local -a path_costs\n  local -a path_averages\n  local -a path_averages_sorted\n  local -a path_averages_sorted_desc\n  local -a path_averages_sorted_desc_max\n  local -a path_averages_sorted_desc_max_index\n  local -a path_averages_sorted_desc_max_index_path\n  local -a path_averages_sorted_desc_max_index_path_cost\n  local -a path_averages_sorted_desc_max_index_path_average\n  local -a path_averages_sorted_desc_max_index_path_average_rounded\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string_joined\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string_joined_string\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string_joined_string_string\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string_joined_string_string_string\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string_joined_string_string_string_string\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string_joined_string_string_string_string_string\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string_joined_string_string_string_string_string_string\n  local -a path_averages_sorted_desc_max_index_path_average_rounded_string_joined_string_string_string_string_string_string_string\n  local -a path_averages_sorted_desc",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local i j k\n  local cost\n  local max_cost=0\n  local max_cost_path\n  local max_cost_path_len=0\n  local max_cost_path_avg=0\n  local path\n  local path_len\n  local path_avg\n  local paths=()\n  local path_idx=0\n  local path_idx_max=0\n  local path_idx_max_avg=0\n  local path_idx_max_len=0\n  local path_idx_max_path\n  local path_idx_max_path_avg\n  local path_idx_max_path_len\n  local path_idx_max_path_avg_max=0\n  local path_idx_max_path_len_max=0\n  local path_idx_max_path_avg_max_path\n  local path_idx_max_path_len_max_path\n  local path_idx_max_path_avg_max_path_avg\n  local path_idx_max_path_len_max_path_len\n  local path_idx_max_path_avg_max_path_avg_max=0\n  local path_idx_max_path_len_max_path_len_max=0\n  local path_idx_max_path_avg_max_path_avg_max_path\n  local path_idx_max_path_len_max_path_len_max_path\n  local path_idx_max_path_avg_max_path_avg_max_path_avg\n  local path_idx_max_path_len_max_path_len_max_path_len\n  local path_idx_max_path_avg_max_path_avg_max_path_avg_max=0\n  local path_idx_max_path_len_max",
    "  local -n matrix=$1\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i cost=$(cut -d' ' -f$((j+1)) <<< \"${matrix[i]}\")\n      if ((i==0 && j==0)); then\n        dp[i,j]=$cost\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1]+cost))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j]+cost))\n      else\n        dp[i,j]=$((dp[i-1,j]+cost))\n        if ((dp[i,j-1]+cost > dp[i,j])); then\n          dp[i,j]=$((dp[i,j-1]+cost))\n        fi\n      fi\n    done\n  done\n  echo $((dp[n-1,n-1]/(2*n-1)))",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_m=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i avg=0\n  local -a row\n  local -a col\n  local -a row_sum\n  local -a col_sum\n  local -a row_avg\n  local -a col_avg\n  local -a row_max\n  local -a col_max\n  local -a row_max_i\n  local -a col_max_i\n  local -a row_max_j\n  local -a col_max_j\n  local -a row_max_k\n  local -a col_max_k\n  local -a row_max_l\n  local -a col_max_l\n  local -a row_max_m\n  local -a col_max_m\n  local -a row_max_sum\n  local -a col_max_sum\n  local -a row_max_avg\n  local -a col_max_avg\n\n  # read the matrix\n  while read -r line; do\n    row=($line)\n    n=${#row[@]}\n    for ((i=0; i<n; i++)); do\n      col[$i,$j]=${row[$i]}\n    done\n    j=$((j+1))\n  done <<< \"$matrix\"\n\n  # compute row sums\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=0; j<n; j++)); do\n      sum=$((sum+${col[$i,$j]}))\n    done\n    row_sum[$i]=",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_path=\"\"\n  local max_path_cost=0\n  local max_path_cells=0\n  local path_cost=0\n  local path_cells=0\n  local path=\"\"\n  local i=0\n  local j=0\n  local cell=0\n  local cell_cost=0\n  local cell_cost_str=\"\"\n  local cell_cost_str_len=0\n  local cell_cost_str_len_max=0\n  local cell_cost_str_len_max_str=\"\"\n  local cell_cost_str_len_max_str_len=0\n  local cell_cost_str_len_max_str_len_max=0\n  local cell_cost_str_len_max_str_len_max_str=\"\"\n  local cell_cost_str_len_max_str_len_max_str_len=0\n  local cell_cost_str_len_max_str_len_max_str_len_max=0\n  local cell_cost_str_len_max_str_len_max_str_len_max_str=\"\"\n  local cell_cost_str_len_max_str_len_max_str_len_max_str_len=0\n  local cell_cost_str_len_max_str_len_max_str_len_max_str_len_max=0\n  local cell_cost_str_len_max_str_len_max_str_len_max_str_len_max_str=\"\"\n  local cell_cost_str_len_max_str_len_max_str_len_max_str_len_max_str_len=0\n  local cell_cost_str_len_max_str_len_max_str_len_max_str_len_max_str_len_max=0\n  local cell_cost_str_len_max_str_len_max_str_len_max_str_",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_path_len=\"$((n + m - 1))\"\n  local -r max_avg=\"$((max_cost / max_path_len))\"\n  local -r max_avg_len=\"${#max_avg}\"\n  local -r max_avg_len_1=\"$((max_avg_len - 1))\"\n  local -r max_avg_len_2=\"$((max_avg_len - 2))\"\n  local -r max_avg_len_3=\"$((max_avg_len - 3))\"\n  local -r max_avg_len_4=\"$((max_avg_len - 4))\"\n  local -r max_avg_len_5=\"$((max_avg_len - 5))\"\n  local -r max_avg_len_6=\"$((max_avg_len - 6))\"\n  local -r max_avg_len_7=\"$((max_avg_len - 7))\"\n  local -r max_avg_len_8=\"$((max_avg_len - 8))\"\n  local -r max_avg_len_9=\"$((max_avg_len - 9))\"\n  local -r max_avg_len_10=\"$((max_avg_len - 10))\"\n  local -r max_avg_len_11=\"$((max_avg_len - 11))\"\n  local -r max_avg_len_12=\"$((max_avg_len - 12))\"\n  local -r max_avg_len_13=\"$((max_avg_len - 13))\"\n  local -r max_avg_len_14=\"$((max_avg_len - 14))\"\n  local -r max_avg_len_15=\"",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_sum=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_sum=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max_j=0\n  local -i max_max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max_max=0\n  local -i max_max_max_max_max",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -r max=$((n * m))\n  local -r max_average=$(echo \"scale=2; $max / 2\" | bc)\n  local -r max_average_int=$(echo \"$max_average\" | cut -d. -f1)\n  local -r max_average_dec=$(echo \"$max_average\" | cut -d. -f2)\n  local -r max_average_dec_len=${#max_average_dec}\n  local -r max_average_dec_len_plus_one=$((max_average_dec_len + 1))\n  local -r max_average_dec_len_plus_one_zeros=$(printf \"%0${max_average_dec_len_plus_one}d\" 0)\n  local -r max_average_dec_len_plus_one_zeros_plus_one=$((max_average_dec_len_plus_one_zeros + 1))\n  local -r max_average_dec_len_plus_one_zeros_plus_one_zeros=$(printf \"%0${max_average_dec_len_plus_one_zeros_plus_one}d\" 0)\n  local -r max_average_dec_len_plus_one_zeros_plus_one_zeros_plus_one=$((max_average_dec_len_plus_one_zeros_plus_one_zeros + 1))\n  local -r max_average_dec_len_plus_one_zeros_plus_one_zeros_plus_one_zeros=$(printf \"%0${max_average_dec_len_plus_one_zeros_plus_one_zeros_plus_one}d\" 0)\n  local -r max_average_dec_len_plus_one_zeros_plus_one_zeros_plus_one_zeros_plus_one=$((max_average_dec_len_plus_one_zeros_plus_one",
    "  local -a matrix\n  local -i i j n\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_sum=0\n  local -i max_avg=0\n  local -i avg=0\n  local -i max_avg_i=0\n  local -i max_avg_j=0\n  local -i max_avg_n=0\n  local -i max_avg_sum=0\n  local -i max_avg_avg=0\n  local -i max_avg_max=0\n  local -i max_avg_max_i=0\n  local -i max_avg_max_j=0\n  local -i max_avg_max_n=0\n  local -i max_avg_max_sum=0\n  local -i max_avg_max_avg=0\n  local -i max_avg_max_max=0\n  local -i max_avg_max_max_i=0\n  local -i max_avg_max_max_j=0\n  local -i max_avg_max_max_n=0\n  local -i max_avg_max_max_sum=0\n  local -i max_avg_max_max_avg=0\n  local -i max_avg_max_max_max=0\n  local -i max_avg_max_max_max_i=0\n  local -i max_avg_max_max_max_j=0\n  local -i max_avg_max_max_max_n=0\n  local -i max_avg_max_max_max_sum=0\n  local -i max_avg_max_max_max_avg=0\n  local -i max_avg_max_max_max_max=0\n  local -i max_avg_max_max_max_max_i=0\n  local -i max_avg_max_max_",
    "  local -n matrix=$1\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i=0 j=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i sum=0\n  local -i avg=0\n  local -i cell=0\n  local -i next_cell=0\n  local -i next_cell_sum=0\n  local -i next_cell_avg=0\n  local -i next_cell_max_avg=0\n  local -i next_cell_max_sum=0\n  local -i next_cell_max_avg_sum=0\n  local -i next_cell_max_avg_avg=0\n  local -i next_cell_max_avg_avg_sum=0\n  local -i next_cell_max_avg_avg_avg=0\n  local -i next_cell_max_avg_avg_avg_sum=0\n  local -i next_cell_max_avg_avg_avg_avg=0\n  local -i next_cell_max_avg_avg_avg_avg_sum=0\n  local -i next_cell_max_avg_avg_avg_avg_avg=0\n  local -i next_cell_max_avg_avg_avg_avg_avg_sum=0\n  local -i next_cell_max_avg_avg_avg_avg_avg_avg=0\n  local -i next_cell_max_avg_avg_avg_avg_avg_avg_sum=0\n  local -i next_cell_max_avg_avg_avg_avg_avg_avg_avg=0\n  local -i next_cell_max_avg_avg_avg_avg_avg_avg_avg_sum=0\n  local -i next_cell_max_avg_avg_avg_avg_avg_avg_avg",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_path=()\n  local max_path_sum=0\n  local max_path_len=0\n  local path=()\n  local path_sum=0\n  local path_len=0\n  local i=0\n  local j=0\n  local val=0\n  local average=0\n\n  # Recursive function to find all paths\n  findPath() {\n    local i=$1\n    local j=$2\n    local path=(\"${!3}\")\n    local path_sum=$4\n    local path_len=$5\n\n    # Add current cell to path\n    path+=(\"$i,$j\")\n    path_sum=$((path_sum + val))\n    path_len=$((path_len + 1))\n\n    # If we reached the bottom right cell, check if this path has a higher average than the current max\n    if [[ $i -eq $((n - 1)) && $j -eq $((m - 1)) ]]; then\n      average=$(bc <<< \"scale=2; $path_sum / $path_len\")\n      if (( $(bc <<< \"$average > $max_average\") )); then\n        max_average=$average\n        max_path=(\"${path[@]}\")\n        max_path_sum=$path_sum\n        max_path_len=$path_len\n      fi\n    fi\n\n    # If we can move right, do it\n    if [[ $j -lt $((m - 1)) ]]; then\n      findPath $i $((j + 1)) path[@] $path_sum $path_len\n    fi\n\n    # If we can move down, do it\n    if [[ $i -lt $((n - 1)) ]]; then\n      findPath $((i + 1)) $j path[@] $path_sum $path_len\n    fi\n  }\n\n  # Find all paths\n  findPath 0 0 path[@] 0 0\n\n  # Print results\n  echo \"Max average:",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n1 <<< \"$matrix\" | wc -w)\n  local -r max_sum=$((n * m * 9))\n  local -r max_avg=$((max_sum / n))\n  local -r max_avg_str=$(printf \"%0${#max_avg}d\" $max_avg)\n  local -r max_avg_len=${#max_avg_str}\n  local -r max_avg_str_len=$((max_avg_len + 1))\n  local -r max_avg_str_len_str=$(printf \"%0${#max_avg_str_len}d\" $max_avg_str_len)\n  local -r max_avg_str_len_str_len=${#max_avg_str_len_str}\n  local -r max_avg_str_len_str_len_str=$(printf \"%0${#max_avg_str_len_str_len}d\" $max_avg_str_len_str_len)\n  local -r max_avg_str_len_str_len_str_len=${#max_avg_str_len_str_len_str}\n  local -r max_avg_str_len_str_len_str_len_str=$(printf \"%0${#max_avg_str_len_str_len_str_len}d\" $max_avg_str_len_str_len_str_len)\n  local -r max_avg_str_len_str_len_str_len_str_len=${#max_avg_str_len_str_len_str_len_str}\n  local -r max_avg_str_len_str_len_str_len_str_len_str=$(printf \"%0${#max_avg_str_len_str_len_str_len_str_len}d\" $max_avg_str_len_str_",
    "  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local -i i j\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_i_count=0\n  local -i max_j_count=0\n  local -i max_i_sum=0\n  local -i max_j_sum=0\n  local -i max_i_max=0\n  local -i max_j_max=0\n  local -i max_i_max_sum=0\n  local -i max_j_max_sum=0\n  local -i max_i_max_count=0\n  local -i max_j_max_count=0\n  local -i max_i_max_i=0\n  local -i max_j_max_j=0\n  local -i max_i_max_i_count=0\n  local -i max_j_max_j_count=0\n  local -i max_i_max_i_sum=0\n  local -i max_j_max_j_sum=0\n  local -i max_i_max_i_max=0\n  local -i max_j_max_j_max=0\n  local -i max_i_max_i_max_sum=0\n  local -i max_j_max_j_max_sum=0\n  local -i max_i_max_i_max_count=0\n  local -i max_j_max_j_max_count=0\n  local -i max_i_max_i_max_i=0\n  local -i max_j_max_j_max_j=0\n  local -i max_i_max_i_max_i_count=0\n  local -i max_j_max_j_max_j_count=0\n  local -i max_i_max_i_max_i_",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$((n * m * 10))\n  local -r max_paths=$((n * m))\n  local -r max_path_length=$((n + m - 1))\n  local -r max_path_cost=$((max_path_length * max_cost))\n  local -r max_path_average=$((max_path_cost / max_path_length))\n  local -r max_average=$((max_path_average + 1))\n  local -r max_average_length=$((max_average + 1))\n\n  local -a averages=()\n  local -a path=()\n  local -a paths=()\n  local -a path_costs=()\n  local -a path_lengths=()\n  local -a path_averages=()\n  local -a path_averages_lengths=()\n\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\n  local -i max_average_length_minus_1=$((max_average_length - 1))\n  local -i max_average_length_minus_2=$((max_average_length - 2))\n  local -i max_average_length_minus_3=$((max_average_length - 3))\n  local -i max_average_length_minus_4=$((max_average_length - 4))\n  local -i max_average_length_minus_5=$((max_average_length - 5))\n ",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i = 0; i < n; i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n  done\n  for ((i = 1; i < n; i++)); do\n    for ((j = 0; j < n; j++)); do\n      local -i cur=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n      if ((j > 0)); then\n        local -i left=${dp[j - 1]}\n        if ((left < cur)); then\n          cur=$left\n        fi\n      fi\n      if ((j < n - 1)); then\n        local -i right=${dp[j + 1]}\n        if ((right < cur)); then\n          cur=$right\n        fi\n      fi\n      dp[j]=$cur\n    done\n  done\n  echo \"${dp[-1]}\"",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -r total=$(echo \"$matrix\" | tr ' ' '\\n' | paste -sd+ | bc)\n  local -r max=$((n + m - 2))\n  echo \"$total / $max\" | bc -l",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r max_cost=\"$((n * m * 100))\"\n  local -r min_cost=\"$((-max_cost))\"\n  local -r max_path=\"$(seq 1 \"$n\" | tr -d '\\n')\"\n  local -r min_path=\"$(seq \"$n\" -1 1 | tr -d '\\n')\"\n  local -r max_path_cost=\"$(\n    echo \"$matrix\" |\n    awk -v max_cost=\"$max_cost\" -v min_cost=\"$min_cost\" -v max_path=\"$max_path\" -v min_path=\"$min_path\" '\n      BEGIN {\n        split(max_path, max_path_arr, \"\");\n        split(min_path, min_path_arr, \"\");\n      }\n      {\n        for (i = 1; i <= NF; i++) {\n          if (i == 1) {\n            max_cost_arr[i] = $i;\n            min_cost_arr[i] = $i;\n          } else {\n            max_cost_arr[i] = $i + max_cost_arr[i - 1];\n            min_cost_arr[i] = $i + min_cost_arr[i - 1];\n          }\n        }\n        for (i = 2; i <= NF; i++) {\n          if (max_cost_arr[i] < max_cost_arr[i - 1]) {\n            max_cost_arr[i] = max_cost_arr[i - 1];\n            max_path_arr[i] = max_path_arr[i - 1];\n          }\n          if (min_cost_arr[i] > min_cost_arr[i - 1]) {\n            min_cost_arr[i] = min_cost_arr[i - 1];\n            min_path_arr[i] = min_path_arr[i - 1];\n",
    "  local matrix=\"$1\"\n  local rows=\"$(echo \"$matrix\" | wc -l)\"\n  local cols=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -a path=()\n  local -a costs=()\n  local -a max=()\n  local -a maxcost=()\n  local -a maxpath=()\n  local -a maxpathcost=()\n  local -a maxpathcosts=()\n  local -a maxpathcosts_=()\n  local -a maxpathcosts__=()\n  local -a maxpathcosts___=()\n  local -a maxpathcosts____=()\n  local -a maxpathcosts_____=()\n  local -a maxpathcosts______=()\n  local -a maxpathcosts_______=()\n  local -a maxpathcosts________=()\n  local -a maxpathcosts_________=()\n  local -a maxpathcosts__________=()\n  local -a maxpathcosts___________=()\n  local -a maxpathcosts____________=()\n  local -a maxpathcosts_____________=()\n  local -a maxpathcosts______________=()\n  local -a maxpathcosts_______________=()\n  local -a maxpathcosts________________=()\n  local -a maxpathcosts_________________=()\n  local -a maxpathcosts__________________=()\n  local -a maxpathcosts___________________=()\n  local -a maxpathcosts____________________=()\n  local -a maxpathcosts_____________________=()\n  local -a maxpathcosts______________________=()\n  local -a maxpathcosts_______________________=()\n  local -a maxpathcosts________________________=()\n  local -a maxpathcosts_________________________=()\n  local -a maxpathcosts__________________________=()\n  local -a maxpathcosts___________________________=()\n  local -a maxpathcosts____________________________=()\n  local -a maxpathcosts_____________________________=()\n  local -a maxpathcosts______________________________=()\n  local -a maxpathcosts_______________________________=()\n  local -a max",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[i,j]=${matrix[i,j]}\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1]+matrix[i,j]))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j]+matrix[i,j]))\n      else\n        dp[i,j]=$((dp[i-1,j]+dp[i,j-1]+matrix[i,j]))\n      fi\n    done\n  done\n  echo $((dp[n-1,n-1]/(n*n)))",
    "  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp=(0)\n  local -a path=(0)\n  local i j k\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<=i;j++)); do\n      local -a tmp=(${dp[@]})\n      for ((k=0;k<i;k++)); do\n        local x=$((i-k))\n        local y=$((j-k))\n        local z=$((j-k-1))\n        local a=${matrix[$((i*n+j))]}\n        local b=${matrix[$((x*n+y))]}\n        local c=${matrix[$((x*n+z))]}\n        if ((y>=0 && y<n)); then\n          tmp[$y]=$((a+b))\n        fi\n        if ((z>=0 && z<n)); then\n          tmp[$z]=$((a+c))\n        fi\n      done\n      dp=(${tmp[@]})\n      path[$j]=$((i*n+j))\n    done\n  done\n  local max=0\n  local maxi=0\n  for ((i=0;i<n;i++)); do\n    local avg=$((dp[i]/n))\n    if ((avg>max)); then\n      max=$avg\n      maxi=$i\n    fi\n  done\n  echo \"${path[$maxi]}\"",
    "  local -n matrix=$1\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i j\n  local -a dp=(0)\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+${matrix[i-1]:0:1}))\n  done\n  for ((i=1;i<n;i++)); do\n    dp[0]=$((dp[0]+${matrix[i*n]:0:1}))\n    for ((j=1;j<n;j++)); do\n      dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n      dp[j]=$((dp[j]+${matrix[i*n+j]:0:1}))\n    done\n  done\n  echo \"${dp[n-1]} $((n*n))\" | bc -l",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i sum_i=0\n  local -i sum_j=0\n  local -i max_sum=0\n  local -i max_sum_i=0\n  local -i max_sum_j=0\n  local -i max_sum_n=0\n  local -i max_sum_n_i=0\n  local -i max_sum_n_j=0\n  local -i max_sum_n_sum=0\n  local -i max_sum_n_sum_i=0\n  local -i max_sum_n_sum_j=0\n  local -i max_sum_n_sum_n=0\n  local -i max_sum_n_sum_n_i=0\n  local -i max_sum_n_sum_n_j=0\n  local -i max_sum_n_sum_n_sum=0\n  local -i max_sum_n_sum_n_sum_i=0\n  local -i max_sum_n_sum_n_sum_j=0\n  local -i max_sum_n_sum_n_sum_n=0\n  local -i max_sum_n_sum_n_sum_n_i=0\n  local -i max_sum_n_sum_n_sum_n_j=0\n  local -i max_sum_n_sum_n_sum_n_sum=0\n  local -i max_sum_n_sum_n_sum_n_sum_i=0\n  local -i max_sum_n_sum_n_sum_n_sum_j=0\n  local -i max_sum_n_sum_n_sum_n_sum_n=0\n  local -i max_sum_n_sum_n_sum_n_sum_n_i=0\n  local -i max_sum_n",
    "  local -n matrix=$1\n  local -a path=()\n  local -i i=0 j=0\n  local -i max_average=0\n  local -i current_average=0\n  local -i current_sum=0\n  local -i current_length=0\n  local -i max_length=0\n  local -i max_sum=0\n  local -i n=${#matrix[@]}\n  local -i m=${#matrix[0]}\n  local -i max_i=0\n  local -i max_j=0\n\n  while true; do\n    if [[ $i -lt $n ]]; then\n      path+=(\"${matrix[$i]:$j:1}\")\n      current_sum=$((current_sum + matrix[$i][$j]))\n      current_length=$((current_length + 1))\n      current_average=$((current_sum / current_length))\n      if [[ $current_average -gt $max_average ]]; then\n        max_average=$current_average\n        max_sum=$current_sum\n        max_length=$current_length\n        max_i=$i\n        max_j=$j\n      fi\n    fi\n    if [[ $i -eq $n-1 && $j -eq $m-1 ]]; then\n      break\n    fi\n    if [[ $i -eq $n-1 ]]; then\n      j=$((j + 1))\n    elif [[ $j -eq $m-1 ]]; then\n      i=$((i + 1))\n    elif [[ $((matrix[$i+1][$j])) -gt $((matrix[$i][$j+1])) ]]; then\n      i=$((i + 1))\n    else\n      j=$((j + 1))\n    fi\n  done\n\n  echo \"${path[@]:0:$max_length}\"",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i m=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i maxCount=0\n  local -i maxSum=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxK=0\n  local -i maxL=0\n  local -i maxAvg=0\n  local -i avg=0\n  local -i maxAvg=0\n  local -i maxAvgCount=0\n  local -i maxAvgSum=0\n  local -i maxAvgI=0\n  local -i maxAvgJ=0\n  local -i maxAvgK=0\n  local -i maxAvgL=0\n  local -i maxAvgAvg=0\n  local -i maxAvgAvg=0\n  local -i maxAvgAvgCount=0\n  local -i maxAvgAvgSum=0\n  local -i maxAvgAvgI=0\n  local -i maxAvgAvgJ=0\n  local -i maxAvgAvgK=0\n  local -i maxAvgAvgL=0\n  local -i maxAvgAvgAvg=0\n  local -i maxAvgAvgAvg=0\n  local -i maxAvgAvgAvgCount=0\n  local -i maxAvgAvgAvgSum=0\n  local -i maxAvgAvgAvgI=0\n  local -i maxAvgAvgAvgJ=0\n  local -i maxAvgAvgAvgK=0\n  local -i maxAvgAvgAvgL=0\n  local -i maxAvgAvgAvgAvg=0\n  local -i maxAvgAvgAvgAvg=0\n  local -i maxAvgAvgAvgAvgCount=0\n  local -i maxAvgAvgAvgAvgSum=0\n  local -i maxAvgAvgAvgAvgI=0\n  local -i maxAvgAvgAvgAvgJ=0\n  local -i maxAvgAvgAvgAvgK=0\n  local -i maxAvgAvgAvgAvgL=0\n  local -i maxAvgAvgAvgAvg",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i maxCount=0\n  local -i maxSum=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxK=0\n  local -i maxL=0\n  local -i maxM=0\n  local -i maxN=0\n  local -i maxO=0\n  local -i maxP=0\n  local -i maxQ=0\n  local -i maxR=0\n  local -i maxS=0\n  local -i maxT=0\n  local -i maxU=0\n  local -i maxV=0\n  local -i maxW=0\n  local -i maxX=0\n  local -i maxY=0\n  local -i maxZ=0\n  local -i maxA=0\n  local -i maxB=0\n  local -i maxC=0\n  local -i maxD=0\n  local -i maxE=0\n  local -i maxF=0\n  local -i maxG=0\n  local -i maxH=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxK=0\n  local -i maxL=0\n  local -i maxM=0\n  local -i maxN=0\n  local -i maxO=0\n  local -i maxP=0\n  local -i maxQ=0\n  local -i maxR=0\n  local -i maxS=0\n  local -i maxT=0\n  local -i maxU=0\n  local -i maxV=0\n  local -i maxW=0\n  local -i maxX=0\n  local -i maxY=0\n  local -i maxZ=0\n  local -i maxA=0\n  local -i maxB=0",
    "    local -a matrix\n    local -i i j\n    local -i n\n    local -i max_avg\n    local -i max_avg_i\n    local -i max_avg_j\n    local -i max_avg_n\n    local -i max_avg_sum\n    local -i sum\n    local -i avg\n    local -i avg_i\n    local -i avg_j\n    local -i avg_n\n    local -i avg_sum\n\n    IFS=$'\\n' read -r -d '' -a matrix < <(echo \"$1\")\n    n=${#matrix[@]}\n    max_avg=0\n    max_avg_i=0\n    max_avg_j=0\n    max_avg_n=0\n    max_avg_sum=0\n    for ((i=0;i<n;i++)); do\n        for ((j=0;j<n;j++)); do\n            sum=0\n            avg_i=$i\n            avg_j=$j\n            avg_n=0\n            avg_sum=0\n            while ((avg_i<n && avg_j<n)); do\n                avg_n+=1\n                avg_sum+=${matrix[avg_i*n+avg_j]}\n                avg=$((avg_sum/avg_n))\n                if ((avg>max_avg)); then\n                    max_avg=$avg\n                    max_avg_i=$avg_i\n                    max_avg_j=$avg_j\n                    max_avg_n=$avg_n\n                    max_avg_sum=$avg_sum\n                fi\n                if ((avg_i<n-1)); then\n                    avg_i+=1\n                else\n                    avg_j+=1\n                fi\n            done\n        done\n    done\n    echo \"max_avg=$max_avg\"\n    echo \"max_avg_i=$max_avg_i\"\n    echo \"max_avg_j=$max_avg_j\"\n    echo \"max_avg_n=$max_avg",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_path=''\n  local max_sum=0\n  local max_length=0\n  local path=''\n  local sum=0\n  local length=0\n  local i=0\n  local j=0\n  local cell=0\n  local average=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      cell=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i {print $j}')\n      path=\"$path $cell\"\n      sum=$((sum + cell))\n      length=$((length + 1))\n      if ((i == n - 1 && j == m - 1)); then\n        average=$((sum / length))\n        if ((average > max_average)); then\n          max_average=$average\n          max_path=\"$path\"\n          max_sum=$sum\n          max_length=$length\n        fi\n      fi\n    done\n  done\n\n  echo \"$max_path\"",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i cost=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n $((j+1)) | tail -n 1)\n      local -i left=$((dp[j] + cost))\n      local -i up=$((dp[j-1] + cost))\n      dp[j]=$((left > up ? left : up))\n    done\n  done\n  echo \"${dp[-1]}\"",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp=(0)\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j])+${matrix[i]:j:1})\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(echo \"$matrix\" | awk '{for(i=1;i<=NF;i++) sum+=$i} END {print sum/NR}')\"\n  local -r max_average_rounded=\"$(printf '%.0f' \"$max_average\")\"\n  local -r max_average_rounded_plus_one=\"$((max_average_rounded + 1))\"\n  local -r max_average_rounded_plus_one_length=\"${#max_average_rounded_plus_one}\"\n  local -r max_average_rounded_plus_one_length_plus_one=\"$((max_average_rounded_plus_one_length + 1))\"\n  local -r max_average_rounded_plus_one_length_plus_one_length=\"${#max_average_rounded_plus_one_length_plus_one}\"\n  local -r max_average_rounded_plus_one_length_plus_one_length_plus_one=\"$((max_average_rounded_plus_one_length_plus_one + 1))\"\n  local -r max_average_rounded_plus_one_length_plus_one_length_plus_one_length=\"${#max_average_rounded_plus_one_length_plus_one_length_plus_one}\"\n  local -r max_average_rounded_plus_one_length_plus_one_length_plus_one_length_plus_one=\"$((max_average_rounded_plus_one_length_plus_one_length_plus_one + 1))\"\n  local -r max_average_rounded_plus_one_length_plus_one_length_plus_one_length_plus_one_length=\"${#max_average_rounded_plus_one_length_plus_one_length_plus_one_length_plus_one}\"\n  local -r max_average_rounded",
    "  local -a matrix\n  local -i n\n  local -i i j\n  local -i max_avg\n  local -i max_avg_i max_avg_j\n  local -i sum\n  local -i sum_i sum_j\n  local -i sum_max_i sum_max_j\n  local -i sum_max_i_j\n  local -i sum_max_i_j_i sum_max_i_j_j\n  local -i sum_max_i_j_i_j\n  local -i sum_max_i_j_i_j_i sum_max_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j\n  local -i sum_max_i_j_i_j_i_j_i sum_max_i_j_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j_i_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i sum_max_i_j_i_j_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j_i sum_max_i_j_i_j_i_j_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j_i_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j_i_j_i sum_max_i_j_i_j_i_j_i_j_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j_i_j_i_j\n  local -i sum_max_",
    "  local -n matrix=$1\n  local rows=${#matrix[@]}\n  local cols=${#matrix[0]}\n  local -a dp=()\n  local i j k\n  for ((i=0;i<rows;i++)); do\n    for ((j=0;j<cols;j++)); do\n      if ((i == 0 && j == 0)); then\n        dp[i,j]=${matrix[i,j]}\n      elif ((i == 0)); then\n        dp[i,j]=$((dp[i,j-1] + matrix[i,j]))\n      elif ((j == 0)); then\n        dp[i,j]=$((dp[i-1,j] + matrix[i,j]))\n      else\n        dp[i,j]=$((dp[i-1,j] + dp[i,j-1] + matrix[i,j]))\n      fi\n    done\n  done\n  echo \"${dp[rows-1,cols-1]} / $((rows+cols-1))\" | bc -l",
    "  local -a matrix\n  local -i n\n  local -i i j k\n  local -i max_average\n  local -i current_average\n  local -i current_sum\n  local -i current_count\n  local -i current_value\n  local -i current_row\n  local -i current_column\n  local -i next_row\n  local -i next_column\n  local -i next_value\n  local -i next_count\n  local -i next_sum\n  local -i next_average\n  local -i next_max_average\n  local -i next_max_count\n  local -i next_max_sum\n  local -i next_max_row\n  local -i next_max_column\n  local -i next_max_value\n  local -i next_max_average_value\n  local -i next_max_average_count\n  local -i next_max_average_sum\n  local -i next_max_average_row\n  local -i next_max_average_column\n  local -i next_max_average_value\n  local -i next_max_average_average\n  local -i next_max_average_average_value\n  local -i next_max_average_average_count\n  local -i next_max_average_average_sum\n  local -i next_max_average_average_row\n  local -i next_max_average_average_column\n  local -i next_max_average_average_average\n  local -i next_max_average_average_average_value\n  local -i next_max_average_average_average_count\n  local -i next_max_average_average_average_sum\n  local -i next_max_average_average_average_row\n  local -i next_max_average_average_average_column\n  local -i next_max_average_average_average_average\n  local -i next_max_average_average_average_average_value\n  local -i next_max_average_average_average_average_count\n  local -i next_max_average_average_average_average_sum\n  local -i next_max_average",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(wc -w <<< \"$matrix\")\n  local -r max=$((n * m))\n  local -r max_average=$(bc -l <<< \"scale=2; $max / 2\")\n  local -r max_average_int=$(cut -d. -f1 <<< \"$max_average\")\n  local -r max_average_dec=$(cut -d. -f2 <<< \"$max_average\")\n  local -r max_average_dec_len=${#max_average_dec}\n  local -r max_average_dec_len_plus_one=$((max_average_dec_len + 1))\n  local -r max_average_dec_len_plus_one_padded=$(printf \"%0${max_average_dec_len_plus_one}d\" 0)\n  local -r max_average_dec_padded=$(printf \"%0${max_average_dec_len_plus_one}d\" \"$max_average_dec\")\n  local -r max_average_padded=$(printf \"%d.%s\" \"$max_average_int\" \"$max_average_dec_padded\")\n  local -r max_average_padded_len=${#max_average_padded}\n  local -r max_average_padded_len_plus_one=$((max_average_padded_len + 1))\n  local -r max_average_padded_len_plus_one_padded=$(printf \"%0${max_average_padded_len_plus_one}d\" 0)\n  local -r max_average_padded_padded=$(printf \"%s.%s\" \"$max_average_padded\" \"$max_average_padded_len_plus_one_padded\")\n  local -r max_average_padded_padded_len=${#max_average_padded_padded}\n  local -r max_average_padded_padded_len_plus_one=$((max_average_padded_padded_len + 1))\n",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local sum=0\n  local i=0\n  local j=0\n  while [[ $i -lt $n && $j -lt $m ]]; do\n    sum=$((sum + $(echo \"$matrix\" | head -n$((i + 1)) | tail -n1 | awk \"{print \\$$((j + 1))}\")))\n    if [[ $((i + j)) -eq $((n + m - 2)) ]]; then\n      break\n    fi\n    if [[ $i -eq $((n - 1)) ]]; then\n      j=$((j + 1))\n    elif [[ $j -eq $((m - 1)) ]]; then\n      i=$((i + 1))\n    else\n      local next_i=$((i + 1))\n      local next_j=$((j + 1))\n      local curr=$(echo \"$matrix\" | head -n$((i + 1)) | tail -n1 | awk \"{print \\$$((j + 1))}\")\n      local next_i=$(echo \"$matrix\" | head -n$((next_i + 1)) | tail -n1 | awk \"{print \\$$((j + 1))}\")\n      local next_j=$(echo \"$matrix\" | head -n$((i + 1)) | tail -n1 | awk \"{print \\$$((next_j + 1))}\")\n      if [[ $next_i -gt $next_j ]]; then\n        i=$((i + 1))\n      else\n        j=$((j + 1))\n      fi\n    fi\n  done\n  echo \"$sum $((n + m - 1))\" | awk '{printf \"%.2f\", $1 / $2}'",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i max=0\n  local -i sum=0\n  local -i maxSum=0\n  local -i maxCount=0\n  local -i count=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxK=0\n  local -i maxL=0\n  local -i maxM=0\n  local -i maxN=0\n  local -i maxO=0\n  local -i maxP=0\n  local -i maxQ=0\n  local -i maxR=0\n  local -i maxS=0\n  local -i maxT=0\n  local -i maxU=0\n  local -i maxV=0\n  local -i maxW=0\n  local -i maxX=0\n  local -i maxY=0\n  local -i maxZ=0\n  local -i maxAA=0\n  local -i maxAB=0\n  local -i maxAC=0\n  local -i maxAD=0\n  local -i maxAE=0\n  local -i maxAF=0\n  local -i maxAG=0\n  local -i maxAH=0\n  local -i maxAI=0\n  local -i maxAJ=0\n  local -i maxAK=0\n  local -i maxAL=0\n  local -i maxAM=0\n  local -i maxAN=0\n  local -i maxAO=0\n  local -i maxAP=0\n  local -i maxAQ=0\n  local -i maxAR=0\n  local -i maxAS=0\n  local -i maxAT=0\n  local -i maxAU=0\n  local -i maxAV=0\n  local -i maxAW=0\n  local -i maxAX=0\n  local -i maxAY=0\n  local -i maxAZ=0\n  local -i maxBA=0\n  local -i max",
    "  local -r input=\"$1\"\n  local -r n=\"$(wc -l <<< \"$input\")\"\n  local -r m=\"$(head -1 <<< \"$input\" | wc -w)\"\n  local -r max_sum=$((n * m * 9))\n  local -r max_avg=$((max_sum / n))\n  local -r max_avg_len=$((n + m - 1))\n  local -r max_avg_len_div=$((max_avg_len / 2))\n  local -r max_avg_len_mod=$((max_avg_len % 2))\n  local -r max_avg_len_half=$((max_avg_len_div + max_avg_len_mod))\n  local -r max_avg_len_half_plus_one=$((max_avg_len_half + 1))\n  local -r max_avg_len_half_minus_one=$((max_avg_len_half - 1))\n  local -r max_avg_len_half_plus_one_div=$((max_avg_len_half_plus_one / 2))\n  local -r max_avg_len_half_plus_one_mod=$((max_avg_len_half_plus_one % 2))\n  local -r max_avg_len_half_plus_one_half=$((max_avg_len_half_plus_one_div + max_avg_len_half_plus_one_mod))\n  local -r max_avg_len_half_plus_one_half_plus_one=$((max_avg_len_half_plus_one_half + 1))\n  local -r max_avg_len_half_plus_one_half_minus_one=$((max_avg_len_half_plus_one_half - 1))\n  local -r max_avg_len_half_minus_one_div=$((max_avg_len_half_minus_one / 2))\n  local -r max_avg_len_half_minus_one_mod=$((max_av",
    "  local -n arr=$1\n  local -i n=${#arr[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${arr[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+arr[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+arr[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]+arr[i*n+j]:dp[j]+arr[i*n+j]))\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_1=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_len_plus_2=\"$((max_average_dec_len + 2))\"\n  local -r max_average_dec_len_plus_3=\"$((max_average_dec_len + 3))\"\n  local -r max_average_dec_len_plus_4=\"$((max_average_dec_len + 4))\"\n  local -r max_average_dec_len_plus_5=\"$((max_average_dec_len + 5))\"\n  local -r max_average_dec_len_plus_6=\"$((max_average_dec_len + 6))\"\n  local -r max_average_dec_len_plus_7=\"$((max_average_dec_len + 7))\"\n  local -r max_average_dec_len_plus_8=\"$((max_average_dec_len + 8))\"\n  local -r max_average_dec_len_plus_9=\"$((max_average_dec_len + 9))\"\n  local -r max_average_dec_len_plus_10=\"$((max_average_dec_len + 10))\"\n  local -r max_average_dec_len_plus_11=\"$((max_average_dec_len + 11))\"\n  local -r max_average_",
    "  local -n matrix=$1\n  local -a path=()\n  local -a sum=()\n  local -a count=()\n  local -a max=()\n  local -a max_path=()\n  local -a max_sum=()\n  local -a max_count=()\n  local -i i=0\n  local -i j=0\n  local -i n=0\n  local -i m=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i max_sum_i=0\n  local -i max_sum_j=0\n  local -i max_sum_n=0\n  local -i max_sum_m=0\n  local -i max_count_i=0\n  local -i max_count_j=0\n  local -i max_count_n=0\n  local -i max_count_m=0\n  local -i max_path_i=0\n  local -i max_path_j=0\n  local -i max_path_n=0\n  local -i max_path_m=0\n  local -i max_path_len=0\n  local -i max_path_len_i=0\n  local -i max_path_len_j=0\n  local -i max_path_len_n=0\n  local -i max_path_len_m=0\n  local -i max_path_len_i_j=0\n  local -i max_path_len_n_m=0\n  local -i max_path_len_i_j_n_m=0\n  local -i max_path_len_i_j_n_m_len=0\n  local -i max_path_len_i_j_n_m_len_i=0\n  local -i max_path_len_i_j_n_m_len_j=0\n  local -i max_path_len_i_j_n_m_len_n=0\n  local -i max_path_len_i",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$((n * m))\n  local -r max_average=$((max_cost / 2))\n  local -r min_average=$((max_cost / n))\n  local -r min_cost=$((min_average * n))\n  local -r max_paths=$((n * m))\n  local -r max_path_length=$((n + m - 1))\n  local -r max_path_size=$((max_path_length * max_paths))\n  local -r max_path_average=$((max_cost / max_path_length))\n  local -r max_path_cost=$((max_path_average * max_path_length))\n  local -r max_path_average_size=$((max_path_average * max_paths))\n  local -r max_path_cost_size=$((max_path_cost * max_paths))\n  local -r max_path_average_size_size=$((max_path_average_size * max_paths))\n  local -r max_path_cost_size_size=$((max_path_cost_size * max_paths))\n  local -r max_path_average_size_size_size=$((max_path_average_size_size * max_paths))\n  local -r max_path_cost_size_size_size=$((max_path_cost_size_size * max_paths))\n  local -r max_path_average_size_size_size_size=$((max_path_average_size_size_size * max_paths))\n  local -r max_path_cost_size_size_size_size=$((max_path_cost_size_size_size * max_paths))\n  local -r max_path_average_size_size_size_size_size=$((max_path_average_size_size_size_size * max_paths))\n  local -r max_",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(awk '{print NF}' <<< \"$matrix\" | sort -nu | head -n1)\"\n  local -r max=\"$((n*m))\"\n  local -r max_avg=\"$(bc -l <<< \"scale=2; $max/2\")\"\n  local -r max_avg_int=\"$(awk -F. '{print $1}' <<< \"$max_avg\")\"\n  local -r max_avg_dec=\"$(awk -F. '{print $2}' <<< \"$max_avg\")\"\n  local -r max_avg_dec_len=\"${#max_avg_dec}\"\n  local -r max_avg_dec_len_padded=\"$((max_avg_dec_len+1))\"\n  local -r max_avg_dec_padded=\"$(printf \"%0${max_avg_dec_len_padded}d\" \"$max_avg_dec\")\"\n  local -r max_avg_padded=\"$max_avg_int.$max_avg_dec_padded\"\n  local -r max_avg_padded_len=\"${#max_avg_padded}\"\n  local -r max_avg_padded_len_padded=\"$((max_avg_padded_len+1))\"\n  local -r max_avg_padded_padded=\"$(printf \"%0${max_avg_padded_len_padded}d\" \"$max_avg_padded\")\"\n  local -r max_avg_padded_padded_len=\"${#max_avg_padded_padded}\"\n  local -r max_avg_padded_padded_len_padded=\"$((max_avg_padded_padded_len+1))\"\n  local -r max_avg_padded_padded_padded=\"$(printf \"%0${max_avg_padded_padded_",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if ((i == 0 && j == 0)); then\n        dp[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n        path[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n      elif ((i == 0)); then\n        dp[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk -v j=$j '{print $j}')\n        path[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk -v j=$j '{print $j}')\n      elif ((j == 0)); then\n        dp[$i,$j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')\n        path[$i,$j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')\n      else\n        dp[$i,$j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk -v j=$j '{print $j}')\n        path[$i,$j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk -v j=$j '{print $j}')\n      fi\n    done\n  done\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if ((i == 0 && j == 0)); then\n        continue\n",
    "  local -n arr=$1\n  local n=${#arr[@]}\n  local -a dp=()\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${arr[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+arr[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+arr[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+arr[i*n+j]))\n      fi\n    done\n  done\n  echo $((dp[n-1]/(n*n)))",
    "  local -a matrix\n  local -i i j k\n  local -i rows cols\n  local -i max_average\n  local -i max_average_path_length\n  local -i max_average_path_cost\n  local -i max_average_path_cost_sum\n  local -i max_average_path_cost_count\n  local -i max_average_path_cost_average\n  local -i max_average_path_cost_average_max\n  local -i max_average_path_cost_average_max_path_length\n  local -i max_average_path_cost_average_max_path_cost\n  local -i max_average_path_cost_average_max_path_cost_sum\n  local -i max_average_path_cost_average_max_path_cost_count\n  local -i max_average_path_cost_average_max_path_cost_average\n  local -i max_average_path_cost_average_max_path_cost_average_max\n  local -i max_average_path_cost_average_max_path_cost_average_max_path_length\n  local -i max_average_path_cost_average_max_path_cost_average_max_path_cost\n  local -i max_average_path_cost_average_max_path_cost_average_max_path_cost_sum\n  local -i max_average_path_cost_average_max_path_cost_average_max_path_cost_count\n  local -i max_average_path_cost_average_max_path_cost_average_max_path_cost_average\n  local -i max_average_path_cost_average_max_path_cost_average_max_path_cost_average_max\n  local -i max_average_path_cost_average_max_path_cost_average_max_path_cost_average_max_path_length\n  local -i max_average_path_cost_average_max_path_cost_average_max_path_cost_average_max_path_cost\n  local -i max_average_path_cost_average_max_path_cost",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r n_m=\"$((n * m))\"\n  local -r max_avg=\"$(echo \"$matrix\" | awk '{for(i=1;i<=NF;i++) sum+=$i} END {print sum/NR}')\"\n  local -r max_avg_int=\"$(echo \"$max_avg\" | awk '{print int($1)}')\"\n  local -r max_avg_dec=\"$(echo \"$max_avg\" | awk '{print $1-int($1)}')\"\n  local -r max_avg_dec_int=\"$(echo \"$max_avg_dec * 10^6\" | bc | awk '{print int($1)}')\"\n  local -r max_avg_dec_int_len=\"$(echo \"$max_avg_dec_int\" | wc -c)\"\n  local -r max_avg_dec_int_len_1=\"$((max_avg_dec_int_len - 1))\"\n  local -r max_avg_dec_int_len_1_zeros=\"$(printf '%0.s0' $(seq 1 \"$max_avg_dec_int_len_1\"))\"\n  local -r max_avg_dec_int_len_1_zeros_1=\"$((max_avg_dec_int_len_1_zeros + 1))\"\n  local -r max_avg_dec_int_len_1_zeros_1_zeros=\"$(printf '%0.s0' $(seq 1 \"$max_avg_dec_int_len_1_zeros_1\"))\"\n  local -r max_avg_dec_int_len_1_zeros_1_zeros_1=\"$((max_avg_dec_int_len_1_zeros_1_zeros + 1))\"\n  local -r",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r dp=\"$(mktemp)\"\n  local -r dp_row=\"$(mktemp)\"\n  local -r dp_col=\"$(mktemp)\"\n  local -r dp_diag=\"$(mktemp)\"\n  local -r dp_row_avg=\"$(mktemp)\"\n  local -r dp_col_avg=\"$(mktemp)\"\n  local -r dp_diag_avg=\"$(mktemp)\"\n  local -r dp_row_max=\"$(mktemp)\"\n  local -r dp_col_max=\"$(mktemp)\"\n  local -r dp_diag_max=\"$(mktemp)\"\n  local -r dp_row_max_avg=\"$(mktemp)\"\n  local -r dp_col_max_avg=\"$(mktemp)\"\n  local -r dp_diag_max_avg=\"$(mktemp)\"\n\n  # Initialize the dp matrix\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      echo \"$(echo \"$matrix\" | head -n$((i + 1)) | tail -n1 | awk \"{print \\$$((j + 1))}\")\" >> \"$dp\"\n    done\n  done\n\n  # Initialize the dp_row matrix\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      if [[ $i -eq 0 ]]; then\n        echo \"$(echo \"$matrix\" | head -n1 | awk \"{print \\$$((j + 1))}\")\" >> \"$dp_row\"\n      else\n        echo \"$(echo \"$dp_row\" | head -n$i | tail -n1 | awk \"{print \\$$((j + 1)) + $(echo \"$matrix\" | head -n",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i sum=0\n  local -i sum_i=0\n  local -i sum_j=0\n  local -i cost=0\n  local -i cost_i=0\n  local -i cost_j=0\n  local -i max_cost=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n  local -i max_cost_sum=0\n  local -i max_cost_sum_i=0\n  local -i max_cost_sum_j=0\n  local -i max_cost_sum_n=0\n  local -i max_cost_sum_n_i=0\n  local -i max_cost_sum_n_j=0\n  local -i max_cost_sum_n_cost=0\n  local -i max_cost_sum_n_cost_i=0\n  local -i max_cost_sum_n_cost_j=0\n\n  # Find the max cost\n  while read -r line; do\n    for cost in $line; do\n      if (( cost > max )); then\n        max=\"$cost\"\n        max_i=\"$i\"\n        max_j=\"$j\"\n      fi\n      (( j++ ))\n    done\n    (( i++ ))\n    j=0\n  done <<< \"$matrix\"\n\n  # Find the max cost sum\n  i=0\n  j=0\n  while read -r line; do\n    for cost in $line; do\n      sum=$(( sum + cost ))\n      if (( sum > max_cost_sum )); then\n        max_cost_sum=\"$sum\"\n        max_cost_sum_i=\"$i\"\n        max_cost_sum_j=\"$j\"\n      fi\n      (( j++ ))\n    done\n    (( i++ ))\n    j=0\n  done <<< \"$matrix\"\n\n  # Find the max",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i m=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i max_average=0\n  local -i average=0\n  local -i max_average_i=0\n  local -i max_average_j=0\n  local -i max_average_n=0\n  local -i max_average_m=0\n  local -i max_average_sum=0\n  local -i max_average_max=0\n  local -i max_average_average=0\n\n  # read matrix\n  while read line; do\n    m=0\n    for cell in $line; do\n      matrix_[$n,$m]=$cell\n      ((m++))\n    done\n    ((n++))\n  done <<< \"$matrix\"\n\n  # find max\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((matrix_[$i,$j]>max)); then\n        max=${matrix_[$i,$j]}\n      fi\n    done\n  done\n\n  # find max sum\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      sum=0\n      for ((n=i;n<n;n++)); do\n        for ((m=j;m<m;m++)); do\n          ((sum+=matrix_[$n,$m]))\n        done\n      done\n      if ((sum>max_sum)); then\n        max_sum=$sum\n        max_i=$i\n        max_j=$j\n        max_n=$n\n        max_m=$m\n      fi\n    done\n  done\n\n  # find max average\n  for ((",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=4; $max / 2\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=4; $max / $max\")\"\n  local -r max_average_rounded=\"$(printf '%.*f\\n' 0 \"$max_average\")\"\n  local -r min_average_rounded=\"$(printf '%.*f\\n' 0 \"$min_average\")\"\n  local -r max_average_rounded_plus_one=\"$((max_average_rounded + 1))\"\n  local -r min_average_rounded_plus_one=\"$((min_average_rounded + 1))\"\n  local -r max_average_rounded_plus_one_decimal=\"$(bc -l <<< \"scale=4; $max_average_rounded_plus_one / 1\")\"\n  local -r min_average_rounded_plus_one_decimal=\"$(bc -l <<< \"scale=4; $min_average_rounded_plus_one / 1\")\"\n  local -r max_average_rounded_plus_one_decimal_rounded=\"$(printf '%.*f\\n' 4 \"$max_average_rounded_plus_one_decimal\")\"\n  local -r min_average_rounded_plus_one_decimal_rounded=\"$(printf '%.*f\\n' 4 \"$min_average_rounded_plus_one_decimal\")\"\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one=\"$(bc -l <<< \"scale=4; $max_average_rounded_plus_one_decimal_rounded + 0.0001\")\"\n  local -r min_average_rounded_plus_one_decimal_rounded_plus_one=\"$(bc -l <<< \"scale=4; $min_average_rounded_",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(awk '{print NF}' <<< \"$matrix\" | sort -nu | head -n1)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_average_int=\"$(awk -F. '{print $1}' <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(awk -F. '{print $2}' <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_one=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_len_plus_one_padded=\"$(printf \"%0${max_average_dec_len_plus_one}d\" 0)\"\n  local -r max_average_dec_padded=\"$max_average_dec$max_average_dec_len_plus_one_padded\"\n  local -r max_average_padded=\"$max_average_int.$max_average_dec_padded\"\n  local -r max_average_padded_len=\"${#max_average_padded}\"\n  local -r max_average_padded_len_plus_one=\"$((max_average_padded_len + 1))\"\n  local -r max_average_padded_len_plus_one_padded=\"$(printf \"%0${max_average_padded_len_plus_one}d\" 0)\"\n  local -r max_average_padded_padded=\"$max_average_padded$max_average_padded_len_plus_one_padded\"\n  local -r max_average_padded_padded_len=\"${#max_average_padded_padded}\"\n  local -r max_average_padded_padded_len_plus_one=\"",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -r max_sum=$((n * m * 100))\n  local -r max_avg=$(echo \"scale=2; $max_sum / $n\" | bc)\n  local -r max_avg_int=$(echo \"$max_avg\" | cut -d. -f1)\n  local -r max_avg_dec=$(echo \"$max_avg\" | cut -d. -f2)\n  local -r max_avg_dec_len=$(echo \"$max_avg_dec\" | wc -c)\n  local -r max_avg_dec_len_minus_1=$((max_avg_dec_len - 1))\n  local -r max_avg_dec_len_minus_2=$((max_avg_dec_len - 2))\n  local -r max_avg_dec_len_minus_3=$((max_avg_dec_len - 3))\n  local -r max_avg_dec_len_minus_4=$((max_avg_dec_len - 4))\n  local -r max_avg_dec_len_minus_5=$((max_avg_dec_len - 5))\n  local -r max_avg_dec_len_minus_6=$((max_avg_dec_len - 6))\n  local -r max_avg_dec_len_minus_7=$((max_avg_dec_len - 7))\n  local -r max_avg_dec_len_minus_8=$((max_avg_dec_len - 8))\n  local -r max_avg_dec_len_minus_9=$((max_avg_dec_len - 9))\n  local -r max_avg_dec_len_minus_10=$((max_avg_dec_len - 10))\n  local -r max_avg_dec_len_minus_11=$((max_avg_dec_len",
    "  local -r matrix=\"$1\"\n  local -r rows=\"$(wc -l <<< \"$matrix\")\"\n  local -r cols=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r last_row=\"$((rows - 1))\"\n  local -r last_col=\"$((cols - 1))\"\n  local -r last_cell=\"$((last_row * cols + last_col))\"\n  local -r max_cost=\"$((last_row + last_col))\"\n  local -r max_sum=\"$((max_cost * last_cell))\"\n  local -r max_average=\"$((max_sum / last_cell))\"\n  local -r max_average_decimal=\"$((max_average * 100))\"\n  local -r max_average_fraction=\"$((max_average_decimal % 100))\"\n  local -r max_average_integer=\"$((max_average_decimal / 100))\"\n  local -r max_average_fraction_length=\"${#max_average_fraction}\"\n  local -r max_average_fraction_padding=\"$((2 - max_average_fraction_length))\"\n  local -r max_average_fraction_padding_string=\"$(printf '%0.s0' $(seq 1 \"$max_average_fraction_padding\"))\"\n  local -r max_average_string=\"$max_average_integer.$max_average_fraction_padding_string$max_average_fraction\"\n  local -r max_average_string_length=\"${#max_average_string}\"\n  local -r max_average_string_padding=\"$((max_average_string_length - max_average_fraction_length))\"\n  local -r max_average_string_padding_string=\"$(printf '%0.s0' $(seq 1 \"$max_average_string_padding\"))\"\n  local -r max_average_string_padded=\"$max_average_string_padding_string$max_average_string\"\n  local -r max_average_string_padded_length=\"${#max_average_",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$((max / 2))\"\n  local -r max_average_float=\"$(bc -l <<< \"scale=2; $max_average / 1\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average_float\")\"\n  local -r max_average_decimal=\"$(cut -d. -f2 <<< \"$max_average_float\")\"\n  local -r max_average_decimal_len=\"${#max_average_decimal}\"\n  local -r max_average_decimal_len_plus_1=\"$((max_average_decimal_len + 1))\"\n  local -r max_average_decimal_len_plus_1_zeros=\"$(printf \"%0${max_average_decimal_len_plus_1}d\" 0)\"\n  local -r max_average_decimal_len_plus_1_zeros_plus_1=\"$((max_average_decimal_len_plus_1 + 1))\"\n  local -r max_average_decimal_len_plus_1_zeros_plus_1_zeros=\"$(printf \"%0${max_average_decimal_len_plus_1_zeros_plus_1}d\" 0)\"\n  local -r max_average_decimal_len_plus_1_zeros_plus_1_zeros_plus_1=\"$((max_average_decimal_len_plus_1_zeros_plus_1 + 1))\"\n  local -r max_average_decimal_len_plus_1_zeros_plus_1_zeros_plus_1_zeros=\"$(printf \"%0${max_average_decimal_len_plus_1_zeros_plus_1_zeros_plus_1}d\" 0)\"\n  local -r max",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n')\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<n;j++)); do\n      dp[i][j]=$((dp[i][j] + max(dp[i-1][j], dp[i][j-1])))\n    done\n  done\n  echo \"${dp[n-1][n-1]} $((n*n))\" | awk '{printf \"%.2f\", $1/$2}'",
    "  local -r matrix=\"$1\"\n  local -r rows=\"$(wc -l <<< \"$matrix\")\"\n  local -r cols=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_row=\"$((rows - 1))\"\n  local -r max_col=\"$((cols - 1))\"\n  local -r max_index=\"$((max_row * cols + max_col))\"\n  local -r max_cost=\"$(tail -n 1 <<< \"$matrix\" | awk '{print $NF}')\"\n  local -r max_average=\"$(bc -l <<< \"scale=3; $max_cost / $max_index\")\"\n  local -r max_average_rounded=\"$(printf '%.3f' <<< \"$max_average\")\"\n  local -r max_average_rounded_len=\"${#max_average_rounded}\"\n  local -r max_average_rounded_len_plus_one=\"$((max_average_rounded_len + 1))\"\n  local -r max_average_rounded_len_plus_one_padded=\"$(printf '%*s' \"$max_average_rounded_len_plus_one\" | tr ' ' '0')\"\n  local -r max_average_rounded_len_plus_one_padded_len=\"${#max_average_rounded_len_plus_one_padded}\"\n  local -r max_average_rounded_len_plus_one_padded_len_plus_one=\"$((max_average_rounded_len_plus_one_padded_len + 1))\"\n  local -r max_average_rounded_len_plus_one_padded_len_plus_one_padded=\"$(printf '%*s' \"$max_average_rounded_len_plus_one_padded_len_plus_one\" | tr ' ' '0')\"\n  local -r max_average_rounded_len_plus_one_padded_len_plus_one_padded_len=\"${#max_average_rounded_len_plus_one_padded_len_plus_one_p",
    "  local matrix=()\n  local i=0\n  local j=0\n  local n=0\n  local m=0\n  local cost=0\n  local max=0\n  local max_i=0\n  local max_j=0\n  local max_cost=0\n  local max_path=()\n  local path=()\n  local path_cost=0\n  local path_i=0\n  local path_j=0\n  local path_len=0\n  local path_max_i=0\n  local path_max_j=0\n  local path_max_cost=0\n  local path_max_len=0\n  local path_max_path=()\n  local path_max_path_cost=0\n  local path_max_path_len=0\n  local path_max_path_i=0\n  local path_max_path_j=0\n  local path_max_path_max_i=0\n  local path_max_path_max_j=0\n  local path_max_path_max_cost=0\n  local path_max_path_max_len=0\n  local path_max_path_max_path=()\n  local path_max_path_max_path_cost=0\n  local path_max_path_max_path_len=0\n  local path_max_path_max_path_i=0\n  local path_max_path_max_path_j=0\n  local path_max_path_max_path_max_i=0\n  local path_max_path_max_path_max_j=0\n  local path_max_path_max_path_max_cost=0\n  local path_max_path_max_path_max_len=0\n  local path_max_path_max_path_max_path=()\n  local path_max_path_max_path_max_path_cost=0\n  local path_max_path_max_path_max_path_len=0\n  local path_max_path_max_path_max_path_i=0\n  local path_max_path_max_path_max_path_j",
    "  local -n matrix=$1\n  local -a path\n  local -i i j\n  local -i max_average=0\n  local -i max_average_path_length=0\n  local -i max_average_path_cost=0\n  local -i max_average_path_count=0\n\n  for ((i=0; i<${#matrix[@]}; i++)); do\n    for ((j=0; j<${#matrix[0]}; j++)); do\n      path=()\n      maxAverageOfPathHelper \"$i\" \"$j\" \"${matrix[i,j]}\" \"${#matrix[@]}\" \"${#matrix[0]}\"\n      if ((max_average_path_length == ${#matrix[@]} + ${#matrix[0]} - 1)); then\n        break 2\n      fi\n    done\n  done\n\n  echo \"$max_average_path_count\"",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 10))\"\n\n  local -a costs\n  local -a paths\n  local -a path_costs\n  local -a path_lengths\n  local -a path_averages\n\n  local -i i\n  local -i j\n  local -i k\n  local -i cost\n  local -i path_cost\n  local -i path_length\n  local -i path_average\n\n  # Initialize costs\n  i=0\n  while read -r line; do\n    j=0\n    for cost in $line; do\n      costs[$((i * m + j))]=$cost\n      ((j++))\n    done\n    ((i++))\n  done <<< \"$matrix\"\n\n  # Initialize paths\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      paths[$((i * m + j))]=\"$i $j\"\n    done\n  done\n\n  # Initialize path costs\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      path_costs[$((i * m + j))]=$max_cost\n    done\n  done\n\n  # Initialize path lengths\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      path_lengths[$((i * m + j))]=0\n    done\n  done\n\n  # Initialize path averages\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      path_averages[$((i * m + j))]=0\n    done\n  done\n\n  # Compute path costs\n  for ((i = 0; i < n; i++)); do\n    for ((",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_average_path=\"\"\n  local max_average_path_cost=0\n  local max_average_path_length=0\n\n  # Iterate over all possible paths\n  for ((i=0; i<$((2**($rows+$cols-2))); i++)); do\n    local path=\"\"\n    local path_cost=0\n    local path_length=0\n    local row=0\n    local col=0\n\n    # Generate the path\n    for ((j=0; j<$(($rows+$cols-2)); j++)); do\n      local direction=$((i>>j&1))\n      if [[ $direction -eq 0 ]]; then\n        path=\"$path$row,$col \"\n        path_cost=$((path_cost+$(echo \"$matrix\" | head -n $((row+1)) | tail -n 1 | awk \"{print \\$$((col+1))}\")))\n        path_length=$((path_length+1))\n        row=$((row+1))\n      else\n        path=\"$path$row,$col \"\n        path_cost=$((path_cost+$(echo \"$matrix\" | head -n $((row+1)) | tail -n 1 | awk \"{print \\$$((col+1))}\")))\n        path_length=$((path_length+1))\n        col=$((col+1))\n      fi\n    done\n    path=\"$path$row,$col\"\n    path_cost=$((path_cost+$(echo \"$matrix\" | head -n $((row+1)) | tail -n 1 | awk \"{print \\$$((col+1))}\")))\n    path_length=$((path_length+1))\n\n    # Check if the path is valid\n    if [[ $row -eq $rows-1 && $col -eq $cols-1 ]]; then\n      local average=$((path_cost/path_length))\n      if [[ $average",
    "  local -n matrix=$1\n  local -n sums=$2\n  local -n counts=$3\n  local -n max=$4\n  local -n max_count=$5\n  local -n max_sum=$6\n  local -n max_avg=$7\n  local -n max_path=$8\n  local -n max_path_count=$9\n  local -n max_path_sum=${10}\n  local -n max_path_avg=${11}\n  local -n max_path_path=${12}\n  local -n max_path_path_count=${13}\n  local -n max_path_path_sum=${14}\n  local -n max_path_path_avg=${15}\n  local -n max_path_path_path=${16}\n  local -n max_path_path_path_count=${17}\n  local -n max_path_path_path_sum=${18}\n  local -n max_path_path_path_avg=${19}\n  local -n max_path_path_path_path=${20}\n  local -n max_path_path_path_path_count=${21}\n  local -n max_path_path_path_path_sum=${22}\n  local -n max_path_path_path_path_avg=${23}\n  local -n max_path_path_path_path_path=${24}\n  local -n max_path_path_path_path_path_count=${25}\n  local -n max_path_path_path_path_path_sum=${26}\n  local -n max_path_path_path_path_path_avg=${27}\n  local -n max_path_path_path_path_path_path=${28}\n  local -n max_path_path_path_path_path_path_count=${29}\n  local -n max_path_path_path_path_path_path_sum=${30}\n  local -n max_path_path_path_path_path_path_avg=${31}\n  local",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(wc -w <<< \"$(head -n1 <<< \"$matrix\")\")\n  local -r max=$((n * m))\n  local -r max_avg=$(bc -l <<< \"scale=2; ($(tr ' ' '+' <<< \"$matrix\") / $max)\")\n  local -r max_avg_int=$(bc <<< \"$max_avg * 100\")\n  local -r max_avg_int_len=$(wc -c <<< \"$max_avg_int\")\n  local -r max_avg_int_len_minus_1=$((max_avg_int_len - 1))\n  local -r max_avg_int_len_minus_2=$((max_avg_int_len - 2))\n  local -r max_avg_int_len_minus_3=$((max_avg_int_len - 3))\n  local -r max_avg_int_len_minus_4=$((max_avg_int_len - 4))\n  local -r max_avg_int_len_minus_5=$((max_avg_int_len - 5))\n  local -r max_avg_int_len_minus_6=$((max_avg_int_len - 6))\n  local -r max_avg_int_len_minus_7=$((max_avg_int_len - 7))\n  local -r max_avg_int_len_minus_8=$((max_avg_int_len - 8))\n  local -r max_avg_int_len_minus_9=$((max_avg_int_len - 9))\n  local -r max_avg_int_len_minus_10=$((max_avg_int_len - 10))\n  local -r max_avg_int_len_minus_11=$((max_avg_int_len - 11))\n  local -r max_avg_int_len_minus_12=$((max_av",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local -a path\n  local -a costs\n  local -a sums\n  local -a counts\n  local -a averages\n  local -a maxes\n  local -a max_paths\n  local -a max_averages\n  local -a max_costs\n  local -a max_sums\n  local -a max_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_",
    "  local -n matrix=$1\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(awk -v i=$i '{print $i}' <<< \"$matrix\")\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((j==0)); then\n        dp[i]=$(echo \"${dp[i]} ${dp[i-1]}\" | awk '{print $1+$2}')\n      else\n        dp[i]=$(echo \"${dp[i]} ${dp[i-1]}\" | awk -v j=$j '{print $1+$(j+1)}')\n      fi\n    done\n  done\n  echo \"${dp[n-1]}\" | awk '{print $NF}'",
    "  local -a matrix\n  local -i i j k n\n  local -i max_avg=0\n  local -i max_avg_i=0\n  local -i max_avg_j=0\n  local -i max_avg_k=0\n  local -i max_avg_n=0\n  local -i sum=0\n  local -i avg=0\n  local -i n_rows=0\n  local -i n_cols=0\n  local -i n_paths=0\n  local -i n_paths_max=0\n  local -i n_paths_max_i=0\n  local -i n_paths_max_j=0\n  local -i n_paths_max_k=0\n  local -i n_paths_max_n=0\n  local -i n_paths_max_sum=0\n  local -i n_paths_max_avg=0\n  local -i n_paths_max_n_rows=0\n  local -i n_paths_max_n_cols=0\n  local -i n_paths_max_n_paths=0\n  local -i n_paths_max_n_paths_max=0\n  local -i n_paths_max_n_paths_max_i=0\n  local -i n_paths_max_n_paths_max_j=0\n  local -i n_paths_max_n_paths_max_k=0\n  local -i n_paths_max_n_paths_max_n=0\n  local -i n_paths_max_n_paths_max_sum=0\n  local -i n_paths_max_n_paths_max_avg=0\n  local -i n_paths_max_n_paths_max_n_rows=0\n  local -i n_paths_max_n_paths_max_n_cols=0\n  local -i n_paths_max_n_paths_max_n_paths=0\n ",
    "  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local -a dp\n  local -i i j k\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i sum=0\n      for ((k=0;k<=i;k++)); do\n        sum+=${dp[k]}\n      done\n      local -i row=$(sed -n \"$((i+1))p\" <<< \"$matrix\")\n      local -i val=$(cut -d' ' -f$((j+1)) <<< \"$row\")\n      dp[j]=$((sum+val))\n    done\n  done\n  local -i sum=0\n  for ((i=0;i<n;i++)); do\n    sum+=${dp[i]}\n  done\n  echo $((sum/n))",
    "  local -a matrix=()\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_m=0\n  local -i max_n=0\n  local -i max_o=0\n  local -i max_p=0\n  local -i max_q=0\n  local -i max_r=0\n  local -i max_s=0\n  local -i max_t=0\n  local -i max_u=0\n  local -i max_v=0\n  local -i max_w=0\n  local -i max_x=0\n  local -i max_y=0\n  local -i max_z=0\n  local -i max_aa=0\n  local -i max_ab=0\n  local -i max_ac=0\n  local -i max_ad=0\n  local -i max_ae=0\n  local -i max_af=0\n  local -i max_ag=0\n  local -i max_ah=0\n  local -i max_ai=0\n  local -i max_aj=0\n  local -i max_ak=0\n  local -i max_al=0\n  local -i max_am=0\n  local -i max_an=0\n  local -i max_ao=0\n  local -i max_ap=0\n  local -i max_aq=0\n  local -i max_ar=0\n  local -i max_as=0\n  local -i max_at=0\n  local -i max_au=0\n  local -i max_av=0\n  local -i max_aw=0\n  local -i max_ax=0\n  local -i max_ay=0\n  local -i max_az=0\n  local -i max_ba",
    "  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$matrix\")\n  local -a dp\n  local -a path\n  local i j k\n  local max_avg\n  local max_path\n  local avg\n  local path_str\n  local -i sum\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      dp[i,j]=0\n      path[i,j]=\"\"\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if ((i == 0 && j == 0)); then\n        dp[i,j]=${matrix[i,j]}\n        path[i,j]=\"$i,$j\"\n      elif ((i == 0)); then\n        dp[i,j]=$((dp[i,j-1] + matrix[i,j]))\n        path[i,j]=\"${path[i,j-1]} $i,$j\"\n      elif ((j == 0)); then\n        dp[i,j]=$((dp[i-1,j] + matrix[i,j]))\n        path[i,j]=\"${path[i-1,j]} $i,$j\"\n      else\n        if ((dp[i-1,j] > dp[i,j-1])); then\n          dp[i,j]=$((dp[i-1,j] + matrix[i,j]))\n          path[i,j]=\"${path[i-1,j]} $i,$j\"\n        else\n          dp[i,j]=$((dp[i,j-1] + matrix[i,j]))\n          path[i,j]=\"${path[i,j-1]} $i,$j\"\n        fi\n      fi\n    done\n  done\n\n  max_avg=0\n  max_path=\"\"\n  for ((i=0; i<",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  dp[0]=${matrix[0]}\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i*n]))\n  done\n  for ((i=1;i<n;i++)); do\n    dp[0]=$((dp[0]+matrix[i]))\n    for ((j=1;j<n;j++)); do\n      dp[j]=$((matrix[i*n+j]+max(dp[j-1],dp[j])))\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\"\n  local -r max_path_length=\"$((n + m - 2))\"\n  local -r max_path_cost=\"$((max_cost * max_path_length))\"\n  local -r max_average=\"$((max_path_cost / max_path_length))\"\n  local -r max_average_str=\"$(echo \"$max_average\" | sed 's/\\([0-9]\\+\\)\\([0-9]\\{3\\}\\)/\\1,\\2/g')\"\n  local -r max_average_str_len=\"$(echo -n \"$max_average_str\" | wc -c)\"\n  local -r max_average_str_len_plus_one=\"$((max_average_str_len + 1))\"\n  local -r max_average_str_len_plus_one_spaces=\"$(printf \"%*s\" \"$max_average_str_len_plus_one\")\"\n  local -r max_average_str_len_plus_one_spaces_len=\"$(echo -n \"$max_average_str_len_plus_one_spaces\" | wc -c)\"\n  local -r max_average_str_len_plus_one_spaces_len_minus_one=\"$((max_average_str_len_plus_one_spaces_len - 1))\"\n  local -r max_average_str_len_plus_one_spaces_len_minus_one_spaces=\"$(printf \"%*s\" \"$max_average_str_len_plus_one_spaces_len_minus_one\")\"\n  local -r max_average_str_len_plus_one_spaces_len_minus_one_spaces_len=\"$(echo -n \"$max_average_str_",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      path[i,j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n    done\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<m;j++)); do\n      for ((k=0;k<i;k++)); do\n        local tmp=$(echo \"${dp[k,j]} + ${dp[i,j]}\" | bc -l)\n        if [[ $(echo \"$tmp > ${dp[i,j]}\" | bc -l) -eq 1 ]]; then\n          dp[i,j]=$tmp\n          path[i,j]=\"${path[k,j]} ${path[i,j]}\"\n        fi\n      done\n      for ((k=0;k<j;k++)); do\n        local tmp=$(echo \"${dp[i,k]} + ${dp[i,j]}\" | bc -l)\n        if [[ $(echo \"$tmp > ${dp[i,j]}\" | bc -l) -eq 1 ]]; then\n          dp[i,j]=$tmp\n          path[i,j]=\"${path[i,k]} ${path[i,j]}\"\n        fi\n      done\n    done\n  done\n  local max=0\n  local max_path=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      local tmp=$(echo",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  local max_avg=0\n  local avg\n\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((i==0 && j==0)); then\n        dp[$i,$j]=$(echo \"$matrix\" | head -n1 | cut -d' ' -f1)\n        path[$i,$j]=0\n      elif ((i==0)); then\n        dp[$i,$j]=$((dp[$i,$((j-1))]+$(echo \"$matrix\" | head -n1 | cut -d' ' -f$((j+1)))))\n        path[$i,$j]=$((path[$i,$((j-1))]+1))\n      elif ((j==0)); then\n        dp[$i,$j]=$((dp[$((i-1)),$j]+$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | cut -d' ' -f1)))\n        path[$i,$j]=$((path[$((i-1)),$j]+1))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))]+$(echo \"$matrix\" | head -n1 | cut -d' ' -f$((j+1)))))\n        path[$i,$j]=$((path[$i,$((j-1))]+1))\n        if ((dp[$((i-1)),$j]>dp[$i,$((j-1))])); then\n          dp[$i,$j]=$((dp[$((i-1)),$j]+$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | cut -d' ' -f",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n        if ((dp[j]<dp[j]+matrix[i*n+j])); then\n          dp[j]=$((dp[j]+matrix[i*n+j]))\n        fi\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_one=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_len_plus_one_padded=\"$(printf \"%0${max_average_dec_len_plus_one}d\" 0)\"\n  local -r max_average_dec_len_plus_one_padded_int=\"$((10 ** max_average_dec_len_plus_one_padded))\"\n  local -r max_average_dec_len_plus_one_padded_int_plus_one=\"$((max_average_dec_len_plus_one_padded_int + 1))\"\n  local -r max_average_dec_len_plus_one_padded_int_plus_one_padded=\"$(printf \"%0${max_average_dec_len_plus_one}d\" \"$max_average_dec_len_plus_one_padded_int_plus_one\")\"\n  local -r max_average_dec_len_plus_one_padded_int_plus_one_padded_int=\"$((10 ** max_average_dec_len_plus_one_padded_int_plus_one_padded))\"\n  local -r max_average_dec_len_plus_one_padded_int_plus_one_padded_int_plus_one=\"$((max_average_dec_len_",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc <<< \"scale=2; $max / 2\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_one=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_plus_one=\"$(printf \"%0${max_average_dec_len_plus_one}d\" \"$((10#$max_average_dec + 1))\")\"\n  local -r max_average_dec_plus_one_len=\"${#max_average_dec_plus_one}\"\n  local -r max_average_dec_plus_one_len_minus_one=\"$((max_average_dec_plus_one_len - 1))\"\n  local -r max_average_dec_plus_one_len_minus_one_plus_one=\"$((max_average_dec_plus_one_len_minus_one + 1))\"\n  local -r max_average_dec_plus_one_len_minus_one_plus_one_plus_one=\"$((max_average_dec_plus_one_len_minus_one_plus_one + 1))\"\n  local -r max_average_dec_plus_one_len_minus_one_plus_one_plus_one_plus_one=\"$((max_average_dec_plus_one_len_minus_one_plus_one_plus_one + 1))\"\n  local -r max_average_dec_plus_one_len_minus_one_plus_one_plus_one_plus_one_",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -r max_cost=$((n * m * 9))\n  local -r max_path_length=$((n + m - 1))\n\n  local -a costs\n  for ((i = 0; i < max_path_length; i++)); do\n    costs[i]=$max_cost\n  done\n  costs[0]=0\n\n  local -a row\n  local -a col\n  local -a row_costs\n  local -a col_costs\n  local -i row_cost\n  local -i col_cost\n  local -i row_index\n  local -i col_index\n  local -i cost\n  local -i new_cost\n  local -i max_cost_index\n\n  for ((i = 0; i < n; i++)); do\n    read -r -a row <<<\"$(echo \"$matrix\" | head -n$((i + 1)) | tail -n1)\"\n    for ((j = 0; j < m; j++)); do\n      cost=${row[j]}\n      row_costs=()\n      col_costs=()\n      for ((k = 0; k < max_path_length; k++)); do\n        row_index=$((i - k))\n        col_index=$((j - k))\n        if ((row_index >= 0 && col_index >= 0)); then\n          row_cost=${costs[row_index]}\n          col_cost=${costs[col_index]}\n          if ((row_cost < max_cost)); then\n            row_costs+=(\"$row_cost\")\n          fi\n          if ((col_cost < max_cost)); then\n            col_costs+=(\"$col_cost\")\n          fi\n        fi\n      done\n      if ((${#row_costs[@]} == 0 && ${#col_costs[@]} == 0)); then\n        costs[0]=$max_cost\n      else\n        max_cost_index=0",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r max_cost=\"$((n * m * 100))\"\n  local -r max_path=\"$(printf \"%0${n}d\" 1)\"\n  local -r max_path_cost=\"$(awk -v max_cost=\"$max_cost\" -v max_path=\"$max_path\" '\n    BEGIN {\n      split(max_path, path, \"\")\n      for (i = 1; i <= length(max_path); i++) {\n        path_cost += path[i]\n      }\n    }\n    {\n      for (i = 1; i <= NF; i++) {\n        if ($i > max_cost) {\n          max_cost = $i\n        }\n      }\n    }\n    END {\n      print max_cost\n    }\n  ' <<< \"$matrix\")\"\n  local -r max_average=\"$((max_path_cost / n))\"\n  local -r max_average_path=\"$(awk -v max_average=\"$max_average\" -v max_path=\"$max_path\" '\n    BEGIN {\n      split(max_path, path, \"\")\n      for (i = 1; i <= length(max_path); i++) {\n        path_cost += path[i]\n      }\n    }\n    {\n      for (i = 1; i <= NF; i++) {\n        if ($i > max_average) {\n          max_average = $i\n        }\n      }\n    }\n    END {\n      print max_average\n    }\n  ' <<< \"$matrix\")\"\n  echo \"$max_average_path\"",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=${matrix[i]}\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      fi\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    if ((dp[i]>max)); then\n      max=dp[i]\n    fi\n  done\n  echo $((max/n))",
    "  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp=(0)\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i][0]))\n  done\n  for ((j=1;j<n;j++)); do\n    dp[0]=$((dp[0]+matrix[0][j]))\n    for ((i=1;i<n;i++)); do\n      dp[i]=$((dp[i-1]>dp[i]?dp[i-1]:dp[i]))\n      dp[i]=$((dp[i]+matrix[i][j]))\n    done\n  done\n  echo $((dp[n-1]*2/(n*n)))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_count=0\n  local -i count=0\n\n  while read -r line; do\n    j=0\n    while read -r cell; do\n      if ((i == 0 && j == 0)); then\n        sum=\"$cell\"\n        count=1\n      elif ((i == 0)); then\n        sum=\"$((sum + cell))\"\n        ((count++))\n      elif ((j == 0)); then\n        sum=\"$((sum + cell))\"\n        ((count++))\n      else\n        local -r prev_sum=\"$(sed -n \"$((i - 1))p\" <<< \"$matrix\" | cut -d ' ' -f \"$((j + 1))\")\"\n        local -r prev_count=\"$(sed -n \"$((i - 1))p\" <<< \"$matrix\" | cut -d ' ' -f \"$((j + 2))\")\"\n        local -r prev_average=\"$(bc -l <<< \"scale=2; $prev_sum / $prev_count\")\"\n        local -r prev_sum_2=\"$(cut -d ' ' -f \"$((j))\" <<< \"$line\")\"\n        local -r prev_count_2=\"$(cut -d ' ' -f \"$((j + 1))\" <<< \"$line\")\"\n        local -r prev_average_2=\"$(bc -l <<< \"scale=2; $prev_sum_2 / $prev_count_2\")\"\n\n        if ((prev_average > prev_average_2)); then\n         ",
    "  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -r max_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\n  local -r min_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n 1)\n  local -r max_average=$(echo \"scale=2; $max_cost / $n\" | bc)\n  local -r min_average=$(echo \"scale=2; $min_cost / $n\" | bc)\n  local -r max_average_rounded=$(echo \"$max_average\" | awk '{printf \"%.0f\\n\", $0}')\n  local -r min_average_rounded=$(echo \"$min_average\" | awk '{printf \"%.0f\\n\", $0}')\n  local -r max_average_rounded_plus_one=$((max_average_rounded + 1))\n  local -r min_average_rounded_minus_one=$((min_average_rounded - 1))\n  local -r max_average_rounded_plus_one_decimal=$(echo \"$max_average_rounded_plus_one\" | awk '{printf \"%.2f\\n\", $0}')\n  local -r min_average_rounded_minus_one_decimal=$(echo \"$min_average_rounded_minus_one\" | awk '{printf \"%.2f\\n\", $0}')\n  local -r max_average_rounded_plus_one_decimal_minus_min_average=$(echo \"scale=2; $max_average_rounded_plus_one_decimal - $min_average\" | bc)\n  local -r min_average_rounded_minus_one_decimal_minus_max_average=$(echo \"scale=2; $min_average_rounded_minus_one_decimal - $max_average\" | bc)\n  local -r max_average_rounded_plus_one_decimal_minus",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a costs\n  local -a paths\n  local -a path\n  local -a maxPath\n  local maxCost=0\n  local maxAverage=0\n  local cost=0\n  local average=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$(awk '{print $1}' <<< \"$matrix\" | sort -nr | head -n 1)\n  local -r min_cost=$(awk '{print $1}' <<< \"$matrix\" | sort -n | head -n 1)\n  local -r max_path_cost=$((n * m * max_cost))\n  local -r min_path_cost=$((n * m * min_cost))\n  local -r max_avg=$((max_path_cost / n))\n  local -r min_avg=$((min_path_cost / n))\n  local -r max_avg_int=$((max_avg / 10))\n  local -r min_avg_int=$((min_avg / 10))\n  local -r max_avg_dec=$((max_avg % 10))\n  local -r min_avg_dec=$((min_avg % 10))\n  local -r max_avg_dec_len=$(wc -c <<< \"$max_avg_dec\")\n  local -r min_avg_dec_len=$(wc -c <<< \"$min_avg_dec\")\n  local -r max_avg_dec_len_diff=$((max_avg_dec_len - min_avg_dec_len))\n  local -r max_avg_dec_len_diff_abs=$((max_avg_dec_len_diff < 0 ? -max_avg_dec_len_diff : max_avg_dec_len_diff))\n  local -r max_avg_dec_len_diff_abs_pow=$((10 ** max_avg_dec_len_diff_abs))\n  local -r max_avg_dec_len_diff_abs_pow_mul=$((max_avg_dec_len_diff < 0 ? max_avg_dec_len_diff_",
    "  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local max_average=0\n  local max_path=()\n  local max_path_cost=0\n  local max_path_length=0\n  local path=()\n  local path_cost=0\n  local path_length=0\n  local i=0\n  local j=0\n  local k=0\n  local cell=0\n  local average=0\n  local path_string=''\n  local max_path_string=''\n\n  for ((i=0; i<n; i++)); do\n    path[i]=0\n  done\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      cell=$(awk -v i=$i -v j=$j '{print $((i+1))}' <<< \"$matrix\")\n      path[j]=$cell\n      path_cost=$((path_cost + cell))\n      path_length=$((path_length + 1))\n      average=$((path_cost / path_length))\n      if ((average > max_average)); then\n        max_average=$average\n        max_path_cost=$path_cost\n        max_path_length=$path_length\n        for ((k=0; k<n; k++)); do\n          max_path[k]=${path[k]}\n        done\n      fi\n    done\n  done\n\n  max_path_string=$(printf '%s ' \"${max_path[@]}\")\n  echo \"max_average: $max_average\"\n  echo \"max_path: $max_path_string\"\n  echo \"max_path_cost: $max_path_cost\"\n  echo \"max_path_length: $max_path_length\"",
    "  local -a matrix\n  local -i n\n  local -i i j\n  local -i max_average\n  local -i max_average_i max_average_j\n  local -i sum\n  local -i sum_i sum_j\n  local -i sum_max_i sum_max_j\n  local -i sum_max_i_j\n  local -i sum_max_i_j_i sum_max_i_j_j\n  local -i sum_max_i_j_i_j\n  local -i sum_max_i_j_i_j_i sum_max_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j\n  local -i sum_max_i_j_i_j_i_j_i sum_max_i_j_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j_i_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i sum_max_i_j_i_j_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j_i sum_max_i_j_i_j_i_j_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j_i_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j_i_j_i sum_max_i_j_i_j_i_j_i_j_i_j_i_j_j\n  local -i sum_max_i_j_i_j_i_j_i_j_i_j_i_j_i_j\n  local -i sum_max_i_j",
    "  local -n matrix=$1\n  local -a costs\n  local -i i j\n  local -i n=${#matrix[@]}\n  local -i max_cost=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n\n  for ((i=0;i<n;i++)); do\n    costs[i]=0\n  done\n\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i == 0 && j == 0)); then\n        costs[j]=${matrix[i*n+j]}\n      elif ((i == 0)); then\n        costs[j]=${costs[j-1]}+${matrix[i*n+j]}\n      elif ((j == 0)); then\n        costs[j]=${costs[j]}+${matrix[i*n+j]}\n      else\n        costs[j]=$(( ${costs[j-1]} > ${costs[j]} ? ${costs[j-1]} : ${costs[j]} ))\n        costs[j]=$(( ${costs[j]} + ${matrix[i*n+j]} ))\n      fi\n      if (( ${costs[j]} > max_cost )); then\n        max_cost=${costs[j]}\n        max_cost_i=$i\n        max_cost_j=$j\n      fi\n    done\n  done\n\n  echo $(( max_cost / (n * n) ))",
    "  local matrix=\"$1\"\n  local max_average=0\n  local max_average_path=()\n  local max_average_path_length=0\n  local max_average_path_cost=0\n  local max_average_path_cost_sum=0\n  local max_average_path_cost_average=0\n  local max_average_path_cost_average_rounded=0\n\n  local path=()\n  local path_length=0\n  local path_cost=0\n  local path_cost_sum=0\n  local path_cost_average=0\n  local path_cost_average_rounded=0\n\n  local matrix_lines=($(echo \"$matrix\" | tr '\\n' ' '))\n  local matrix_lines_length=${#matrix_lines[@]}\n  local matrix_lines_length_minus_one=$((matrix_lines_length - 1))\n  local matrix_lines_length_minus_two=$((matrix_lines_length - 2))\n\n  local matrix_line_length=0\n  local matrix_line_length_minus_one=0\n  local matrix_line_length_minus_two=0\n\n  local matrix_line_lengths=()\n  local matrix_line_lengths_length=0\n\n  local matrix_line_lengths_max=0\n  local matrix_line_lengths_max_index=0\n\n  local matrix_line_lengths_min=0\n  local matrix_line_lengths_min_index=0\n\n  local matrix_line_lengths_difference=0\n\n  local matrix_line_lengths_difference_max=0\n  local matrix_line_lengths_difference_max_index=0\n\n  local matrix_line_lengths_difference_min=0\n  local matrix_line_lengths_difference_min_index=0\n\n  local matrix_line_lengths_difference_max_index_plus_one=0\n  local matrix_line_lengths_difference_max_index_plus_two=0\n  local matrix_line_lengths_difference_max_index_plus_three=0\n\n  local matrix_line_lengths_diff",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j])+${matrix[i]:j:1})\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$matrix\")\n  local -a dp\n  local -a path\n  local i j k\n  local max_avg=0\n  local max_path=()\n  local path_avg=0\n  local path_cost=0\n  local path_len=0\n  local -a path_stack\n  local -a path_stack_idx\n\n  # init dp\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      dp[$i,$j]=0\n    done\n  done\n\n  # init path\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      path[$i,$j]=0\n    done\n  done\n\n  # init dp\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if ((i == 0 && j == 0)); then\n        dp[$i,$j]=$(awk -v i=$i -v j=$j '{print $((i+1))}' <<< \"$matrix\")\n      elif ((i == 0)); then\n        dp[$i,$j]=$(awk -v i=$i -v j=$j '{print $((i+1))}' <<< \"$matrix\")\n        dp[$i,$j]=$((dp[$i,$j] + dp[$i,$((j-1))]))\n      elif ((j == 0)); then\n        dp[$i,$j]=$(awk -v i=$i -v j=$j '{print $((i+1))}' <<< \"$matrix\")\n        dp[$i,$j]=$((dp[$i,$j] + dp[$((i-1)),$j]))\n      else\n        dp[$i,$j]=$(awk",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $max / $max\")\"\n  local -r min_average_int=\"$(cut -d. -f1 <<< \"$min_average\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r min_average_dec=\"$(cut -d. -f2 <<< \"$min_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r min_average_dec_len=\"${#min_average_dec}\"\n  local -r max_average_dec_len_padded=\"$((max_average_dec_len + 1))\"\n  local -r min_average_dec_len_padded=\"$((min_average_dec_len + 1))\"\n  local -r max_average_padded=\"$(printf \"%0${max_average_dec_len_padded}d\" \"$max_average_dec\")\"\n  local -r min_average_padded=\"$(printf \"%0${min_average_dec_len_padded}d\" \"$min_average_dec\")\"\n  local -r max_average_padded_int=\"$((max_average_int * 10 ** max_average_dec_len_padded + max_average_padded))\"\n  local -r min_average_padded_int=\"$((min_average_int * 10 ** min_average_dec_len_padded + min_average_padded))\"\n  local -r max_average_padded_",
    "  local -n matrix=$1\n  local -a path\n  local -a bestPath\n  local -i bestAverage=0\n  local -i bestCost=0\n  local -i cost=0\n  local -i average=0\n  local -i i=0\n  local -i j=0\n  local -i n=${#matrix[@]}\n  local -i m=${#matrix[0]}\n  local -i k=0\n  local -i l=0\n  local -i cell=0\n  local -i nextCell=0\n  local -i nextCost=0\n  local -i nextAverage=0\n  local -i nextI=0\n  local -i nextJ=0\n  local -i nextK=0\n  local -i nextL=0\n  local -i nextN=0\n  local -i nextM=0\n  local -i nextPathLength=0\n  local -i pathLength=0\n  local -i nextPathLength=0\n  local -i nextBestCost=0\n  local -i nextBestAverage=0\n  local -i nextBestPathLength=0\n  local -i bestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBestPathLength=0\n  local -i nextBest",
    "  local -a matrix\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_n=0\n  local -i max_max_count=0\n  local -i max_max_sum=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_n=0\n  local -i max_max_max_count=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_count=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_count=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max_j",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max=0\n  local max_path=()\n  local path=()\n  local total=0\n  local average=0\n  local i=0\n  local j=0\n  local k=0\n  local cell=0\n\n  for ((i=0; i<rows; i++)); do\n    for ((j=0; j<cols; j++)); do\n      path=()\n      total=0\n      for ((k=0; k<=i; k++)); do\n        cell=$(echo \"$matrix\" | head -n $((k+1)) | tail -n 1 | awk -v j=$j '{print $j}')\n        path+=(\"$cell\")\n        total=$((total+cell))\n      done\n      for ((k=0; k<=j; k++)); do\n        cell=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk -v j=$k '{print $j}')\n        path+=(\"$cell\")\n        total=$((total+cell))\n      done\n      average=$((total/(i+j+2)))\n      if [[ $average -gt $max ]]; then\n        max=$average\n        max_path=(\"${path[@]}\")\n      fi\n    done\n  done\n\n  echo \"$max\"\n  echo \"${max_path[@]}\"",
    "  local matrix=\"$1\"\n  local -i rows=0 cols=0\n  local -i i j\n  local -i maxAverage=0\n  local -i maxAverageRow=0\n  local -i maxAverageCol=0\n  local -i maxAveragePathLength=0\n  local -i currentAverage=0\n  local -i currentAverageRow=0\n  local -i currentAverageCol=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength=0\n  local -i currentAveragePathLength",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -nr | head -n1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i a=${dp[j]}\n      local -i b=${dp[j+1]}\n      local -i c=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -nr | head -n1)\n      dp[j]=$((a>b?a:b))\n      dp[j]=$((dp[j]>c?dp[j]:c))\n    done\n  done\n  echo \"${dp[0]}\"",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\n  local -r max_sum=$((n*m*100))\n  local -r max_denom=$((n*m))\n  local -r max_gcd=$(gcd $max_sum $max_denom)\n  local -r max_num=$((max_sum/max_gcd))\n  local -r max_den=$((max_denom/max_gcd))\n  local -r max_frac=\"$max_num/$max_den\"\n  local -r max_frac_len=$(wc -c <<< \"$max_frac\")\n  local -r max_frac_len_plus_one=$((max_frac_len+1))\n  local -r max_frac_len_plus_two=$((max_frac_len+2))\n  local -r max_frac_len_plus_three=$((max_frac_len+3))\n  local -r max_frac_len_plus_four=$((max_frac_len+4))\n  local -r max_frac_len_plus_five=$((max_frac_len+5))\n  local -r max_frac_len_plus_six=$((max_frac_len+6))\n  local -r max_frac_len_plus_seven=$((max_frac_len+7))\n  local -r max_frac_len_plus_eight=$((max_frac_len+8))\n  local -r max_frac_len_plus_nine=$((max_frac_len+9))\n  local -r max_frac_len_plus_ten=$((max_frac_len+10))\n  local -r max_frac_len_plus_eleven=$((max_frac_len+11))\n  local -r max_frac_len_plus_twelve=$((max_frac_len+12))\n  local -r max_frac_len_plus_thirteen=$((max_frac_len+13))\n  local -r max_frac",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=${matrix[i]}\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n]))\n      else\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n        ((dp[j]>dp[j-1])) && dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\"\n  local -r max_cost=\"$((n * m * 100))\"\n\n  local -i i j\n  local -i cost\n  local -i max_cost_path=0\n  local -i max_cost_path_count=0\n  local -i max_cost_path_sum=0\n  local -i max_cost_path_avg=0\n\n  local -i cost_path=0\n  local -i cost_path_count=0\n  local -i cost_path_sum=0\n  local -i cost_path_avg=0\n\n  local -i cost_path_right=0\n  local -i cost_path_right_count=0\n  local -i cost_path_right_sum=0\n  local -i cost_path_right_avg=0\n\n  local -i cost_path_down=0\n  local -i cost_path_down_count=0\n  local -i cost_path_down_sum=0\n  local -i cost_path_down_avg=0\n\n  local -i cost_path_right_down=0\n  local -i cost_path_right_down_count=0\n  local -i cost_path_right_down_sum=0\n  local -i cost_path_right_down_avg=0\n\n  local -i cost_path_down_right=0\n  local -i cost_path_down_right_count=0\n  local -i cost_path_down_right_sum=0\n  local -i cost_path_down_right_avg=0\n\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      cost=\"$(awk -v i=\"$i\" -v j=\"$j\" '{print $((j + 1))}' <<< \"$(sed -n \"$((i + 1))p\" <<< \"$matrix",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local dp=()\n  local i=0\n  local j=0\n  local sum=0\n  local max=0\n  local max_i=0\n  local max_j=0\n\n  # initialize dp\n  for ((i=0; i<n; i++)); do\n    dp[$i]=()\n    for ((j=0; j<m; j++)); do\n      dp[$i][$j]=0\n    done\n  done\n\n  # fill dp\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if ((i == 0 && j == 0)); then\n        dp[$i][$j]=$(echo \"$matrix\" | head -n1 | awk '{print $1}')\n      elif ((i == 0)); then\n        dp[$i][$j]=$((dp[$i][$((j-1))]+$(echo \"$matrix\" | head -n1 | awk -v j=$((j+1)) '{print $j}')))\n      elif ((j == 0)); then\n        dp[$i][$j]=$((dp[$((i-1))][$j]+$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk '{print $1}')))\n      else\n        dp[$i][$j]=$((dp[$((i-1))][$j]+$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk -v j=$((j+1)) '{print $j}')))\n      fi\n    done\n  done\n\n  # find max average\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      sum=$((dp[$i][$j]/($i+",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_path_len=\"$((n * m))\"\n  local -r max_path_cost=\"$((max_cost * max_path_len))\"\n  local -r max_path_avg=\"$((max_path_cost / max_path_len))\"\n  local -r max_path_avg_len=\"${#max_path_avg}\"\n  local -r max_path_avg_len_plus_one=\"$((max_path_avg_len + 1))\"\n  local -r max_path_avg_len_plus_two=\"$((max_path_avg_len + 2))\"\n  local -r max_path_avg_len_plus_three=\"$((max_path_avg_len + 3))\"\n  local -r max_path_avg_len_plus_four=\"$((max_path_avg_len + 4))\"\n  local -r max_path_avg_len_plus_five=\"$((max_path_avg_len + 5))\"\n  local -r max_path_avg_len_plus_six=\"$((max_path_avg_len + 6))\"\n  local -r max_path_avg_len_plus_seven=\"$((max_path_avg_len + 7))\"\n  local -r max_path_avg_len_plus_eight=\"$((max_path_avg_len + 8))\"\n  local -r max_path_avg_len_plus_nine=\"$((max_path_avg_len + 9))\"\n  local -r max_path_avg_len_plus_ten=\"$((max_path_avg_len + 10))\"\n  local -r max_path_avg_len_plus_eleven=\"$((max_path_avg",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$((n * m * 9))\n  local -r max_paths=$((2 ** (n * m)))\n  local -r max_average=$((max_cost / n))\n  local -r max_average_int=$((max_average + 1))\n  local -r max_average_dec=$((max_average - max_average_int))\n  local -r max_average_dec_int=$((max_average_dec * 10))\n  local -r max_average_dec_int_len=$(wc -c <<< \"$max_average_dec_int\")\n  local -r max_average_dec_int_len=$((max_average_dec_int_len - 1))\n  local -r max_average_dec_int_len_max=$((max_average_dec_int_len + 1))\n  local -r max_average_dec_int_len_max_pow=$((10 ** max_average_dec_int_len_max))\n  local -r max_average_dec_int_len_max_pow_minus_one=$((max_average_dec_int_len_max_pow - 1))\n  local -r max_average_dec_int_len_max_pow_minus_one_len=$(wc -c <<< \"$max_average_dec_int_len_max_pow_minus_one\")\n  local -r max_average_dec_int_len_max_pow_minus_one_len=$((max_average_dec_int_len_max_pow_minus_one_len - 1))\n  local -r max_average_dec_int_len_max_pow_minus_one_len_max=$((max_average_dec_int_len_max_pow_minus_one_len + 1))\n  local -r max_average_dec_int_len_max_pow_minus_one_len_max_",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[$i,$j]=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i+1{print $j+1}')\n      if ((i>0)); then\n        local -i up=$(echo \"${dp[$((i-1)),$j]} + ${dp[$i,$j]}\" | bc)\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} > $up\" | bc)\n      fi\n      if ((j>0)); then\n        local -i left=$(echo \"${dp[$i,$((j-1))]} + ${dp[$i,$j]}\" | bc)\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} > $left\" | bc)\n      fi\n    done\n  done\n  echo \"${dp[$((n-1)),$((m-1))]}\"",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      if ((i>0)); then\n        dp[i,j]=$(echo \"scale=5; ${dp[i,j]} + ${dp[i-1,j]}\" | bc)\n      fi\n      if ((j>0)); then\n        dp[i,j]=$(echo \"scale=5; ${dp[i,j]} + ${dp[i,j-1]}\" | bc)\n      fi\n      if ((i>0 && j>0)); then\n        dp[i,j]=$(echo \"scale=5; ${dp[i,j]} - ${dp[i-1,j-1]}\" | bc)\n      fi\n    done\n  done\n  echo \"scale=5; ${dp[n-1,m-1]} / ($n + $m - 1)\" | bc",
    "  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp=(0)\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local v=$((dp[j]+matrix[i][j]))\n      if ((i==0&&j==0)); then\n        dp[j]=$v\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+v))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+v))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]+v:dp[j]+v))\n      fi\n    done\n  done\n  echo $((dp[n-1]/(n*n)))",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp=()\n  local -a path=()\n  local -a path_cost=()\n  local -a path_count=()\n  local -a path_avg=()\n  local i j k\n  local cost\n  local count\n  local avg\n  local max_avg=0\n  local max_avg_path=()\n  local max_avg_path_cost=0\n  local max_avg_path_count=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      dp[$i,$j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      path[$i,$j]=$(printf \"%s%s\" \"${path[$i,$((j-1))]}\" \"${path[$((i-1)),$j]}\")\n      path_cost[$i,$j]=$(echo \"${path_cost[$i,$((j-1))]} + ${path_cost[$((i-1)),$j]} + ${dp[$i,$j]}\" | bc)\n      path_count[$i,$j]=$(echo \"${path_count[$i,$((j-1))]} + ${path_count[$((i-1)),$j]} + 1\" | bc)\n      path_avg[$i,$j]=$(echo \"scale=2; ${path_cost[$i,$j]} / ${path_count[$i,$j]}\" | bc)\n      if ((i == 0 && j == 0)); then\n        path[$i,$j]=\"$i,$j\"\n        path_cost[$i,$j]=$(echo \"${dp[$i,$j]}\" | bc)\n        path_count[$i",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$(head -n1 <<< \"$matrix\")\")\"\n  local -r max_cost=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max_cost / $n\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_one=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_len_plus_one_padded=\"$(printf \"%0${max_average_dec_len_plus_one}d\" 0)\"\n  local -r max_average_dec_padded=\"$(printf \"%0${max_average_dec_len_plus_one}d\" \"$max_average_dec\")\"\n  local -r max_average_padded=\"$max_average_int.$max_average_dec_padded\"\n  local -r max_average_padded_len=\"${#max_average_padded}\"\n  local -r max_average_padded_len_plus_one=\"$((max_average_padded_len + 1))\"\n  local -r max_average_padded_len_plus_one_padded=\"$(printf \"%0${max_average_padded_len_plus_one}d\" 0)\"\n  local -r max_average_padded_padded=\"$(printf \"%0${max_average_padded_len_plus_one}d\" \"$max_average_padded\")\"\n  local -r max_average_padded_padded_len=\"${#max_average_padded_padded}\"\n  local -r max_average_padded_padded_",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r max_cost=\"$((n * m * 10))\"\n  local -r max_path=\"$(printf \"%0${n}d\" 1)\"\n  local -r max_path_cost=\"$(echo \"$matrix\" | awk -v max_cost=\"$max_cost\" -v max_path=\"$max_path\" -v n=\"$n\" -v m=\"$m\" '\n    BEGIN {\n      split(max_path, max_path_arr, \"\")\n    }\n    {\n      for (i = 1; i <= NF; i++) {\n        cost[NR, i] = $i\n        if (NR == 1) {\n          dp[NR, i] = $i\n        }\n      }\n    }\n    END {\n      for (i = 2; i <= n; i++) {\n        for (j = 1; j <= m; j++) {\n          if (j == 1) {\n            dp[i, j] = dp[i - 1, j] + cost[i, j]\n          } else {\n            dp[i, j] = cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n          }\n        }\n      }\n      print dp[n, m]\n    }\n    function max(a, b) {\n      return a > b ? a : b\n    }\n  ')\"\n  echo \"$max_path_cost\"",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r dp=\"$(mktemp)\"\n  local -r path=\"$(mktemp)\"\n  local -r cost=\"$(mktemp)\"\n  local -r avg=\"$(mktemp)\"\n  local -r result=\"$(mktemp)\"\n  local -r maxAvg=\"$(mktemp)\"\n  local -r maxPath=\"$(mktemp)\"\n  local -r maxCost=\"$(mktemp)\"\n  local -r maxAvgPath=\"$(mktemp)\"\n  local -r maxAvgCost=\"$(mktemp)\"\n  local -r maxAvgPathCost=\"$(mktemp)\"\n  local -r maxAvgPathCostAvg=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPath=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCost=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvg=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPath=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPathCost=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPathCostAvg=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPathCostAvgPath=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPathCostAvgPathCost=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPathCostAvgPathCostAvg=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPathCostAvgPathCostAvgPath=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPathCostAvgPathCostAvgPathCost=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPathCostAvgPathCostAvgPathCostAvg=\"$(mktemp)\"\n  local -r maxAvgPathCostAvgPathCostAvgPath",
    "  local -r matrix=\"$1\"\n  local -r rows=\"$(echo \"$matrix\" | wc -l)\"\n  local -r cols=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r last_row=\"$((rows - 1))\"\n  local -r last_col=\"$((cols - 1))\"\n  local -r last_cell=\"$((last_row * cols + last_col))\"\n  local -r max_paths=\"$((2 ** last_cell))\"\n  local -r max_path_length=\"$((last_row + last_col))\"\n  local -r max_path_cost=\"$((max_path_length * 9))\"\n  local -r max_path_average=\"$((max_path_cost / max_path_length))\"\n  local -r max_path_average_length=\"${#max_path_average}\"\n  local -r max_path_average_length_plus_one=\"$((max_path_average_length + 1))\"\n  local -r max_path_average_length_plus_two=\"$((max_path_average_length + 2))\"\n  local -r max_path_average_length_plus_three=\"$((max_path_average_length + 3))\"\n  local -r max_path_average_length_plus_four=\"$((max_path_average_length + 4))\"\n  local -r max_path_average_length_plus_five=\"$((max_path_average_length + 5))\"\n  local -r max_path_average_length_plus_six=\"$((max_path_average_length + 6))\"\n  local -r max_path_average_length_plus_seven=\"$((max_path_average_length + 7))\"\n  local -r max_path_average_length_plus_eight=\"$((max_path_average_length + 8))\"\n  local -r max_path_average_length_plus_nine=\"$((max_path_average_length + 9))\"\n  local -r max_path_average_length_plus_ten=\"$((max",
    "  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\n  local -a dp\n  local -a path\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=0\n      path[i,j]=0\n    done\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((i==0 && j==0)); then\n        dp[i,j]=$(awk '{print $1}' <<< \"$matrix\")\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1] + $(awk -v j=$((j+1)) '{print $j}' <<< \"$matrix\")))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j] + $(awk -v i=$((i+1)) '{print $1}' <<< \"$(sed -n \"${i}p\" <<< \"$matrix\")\")))\n      else\n        dp[i,j]=$((dp[i-1,j] + $(awk -v i=$((i+1)) '{print $1}' <<< \"$(sed -n \"${i}p\" <<< \"$matrix\")\")))\n        if ((dp[i,j-1] > dp[i,j])); then\n          dp[i,j]=$((dp[i,j-1] + $(awk -v j=$((j+1)) '{print $j}' <<< \"$matrix\")))\n          path[i,j]=1\n        fi\n      fi\n    done\n  done\n  echo \"Path:\"\n  i=$((n-1))\n  j=$((m-1))\n  while ((i>=0 && j>=0)); do\n    echo \"$",
    "  local -n matrix=$1\n  local -a path=()\n  local -a costs=()\n  local -a max_path=()\n  local -a max_costs=()\n  local max_cost=0\n  local max_average=0\n  local cost=0\n  local average=0\n  local i=0\n  local j=0\n  local n=${#matrix[@]}\n  local m=${#matrix[0]}\n  local -a visited=()\n  for ((i=0;i<n;i++)); do\n    visited[i]=0\n  done\n  for ((i=0;i<m;i++)); do\n    visited[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if [[ ${visited[i]} -eq 0 ]]; then\n        path[i]=$j\n        costs[i]=${matrix[i][j]}\n        visited[i]=1\n        visited[j]=1\n        cost=${matrix[i][j]}\n        average=$(echo \"$cost / 1\" | bc -l)\n        if [[ $(echo \"$average > $max_average\" | bc -l) -eq 1 ]]; then\n          max_average=$average\n          max_cost=$cost\n          max_path=(\"${path[@]}\")\n          max_costs=(\"${costs[@]}\")\n        fi\n        findMaxAverageOfPath \"$1\" \"$i\" \"$j\" \"$cost\" \"${path[@]}\" \"${costs[@]}\" \"${visited[@]}\"\n      fi\n    done\n  done\n  echo \"$max_average\"\n  echo \"$max_cost\"\n  echo \"${max_path[@]}\"\n  echo \"${max_costs[@]}\"",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_path=()\n  local max_path_length=0\n  local max_path_cost=0\n  local path=()\n  local path_length=0\n  local path_cost=0\n  local row=0\n  local col=0\n  local cell=0\n  local cell_cost=0\n  local cell_cost_sum=0\n  local cell_cost_average=0\n  local path_cost_average=0\n\n  # echo \"rows: $rows\"\n  # echo \"cols: $cols\"\n\n  # echo \"matrix: $matrix\"\n\n  # echo \"max_average: $max_average\"\n  # echo \"max_path: $max_path\"\n  # echo \"max_path_length: $max_path_length\"\n  # echo \"max_path_cost: $max_path_cost\"\n  # echo \"path: $path\"\n  # echo \"path_length: $path_length\"\n  # echo \"path_cost: $path_cost\"\n  # echo \"row: $row\"\n  # echo \"col: $col\"\n  # echo \"cell: $cell\"\n  # echo \"cell_cost: $cell_cost\"\n  # echo \"cell_cost_sum: $cell_cost_sum\"\n  # echo \"cell_cost_average: $cell_cost_average\"\n  # echo \"path_cost_average: $path_cost_average\"\n\n  # echo \"max_average: $max_average\"\n  # echo \"max_path: $max_path\"\n  # echo \"max_path_length: $max_path_length\"\n  # echo \"max_path_cost: $max_path_cost\"\n  # echo \"path: $path\"\n  # echo \"path_length: $path_length\"\n  # echo \"path_cost: $path_cost\"\n  # echo \"row: $row\"\n  # echo",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r max_cost=\"$(awk '{s+=$1} END {print s}' <<< \"$matrix\")\"\n  local -r max_path_len=\"$((n + m - 2))\"\n  local -r max_avg=\"$(bc -l <<< \"scale=2; $max_cost / $max_path_len\")\"\n  echo \"$max_avg\"",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r dp=\"$(mktemp)\"\n  local -r dp_new=\"$(mktemp)\"\n  local -r dp_old=\"$(mktemp)\"\n  local -r dp_old_new=\"$(mktemp)\"\n  local -r dp_new_old=\"$(mktemp)\"\n  local -r dp_old_new_old=\"$(mktemp)\"\n  local -r dp_new_old_new=\"$(mktemp)\"\n  local -r dp_old_new_old_new=\"$(mktemp)\"\n  local -r dp_new_old_new_old=\"$(mktemp)\"\n  local -r dp_old_new_old_new_old=\"$(mktemp)\"\n  local -r dp_new_old_new_old_new=\"$(mktemp)\"\n  local -r dp_old_new_old_new_old_new=\"$(mktemp)\"\n  local -r dp_new_old_new_old_new_old=\"$(mktemp)\"\n  local -r dp_old_new_old_new_old_new_old=\"$(mktemp)\"\n  local -r dp_new_old_new_old_new_old_new=\"$(mktemp)\"\n  local -r dp_old_new_old_new_old_new_old_new=\"$(mktemp)\"\n  local -r dp_new_old_new_old_new_old_new_old=\"$(mktemp)\"\n  local -r dp_old_new_old_new_old_new_old_new_old=\"$(mktemp)\"\n  local -r dp_new_old_new_old_new_old_new_old_new=\"$(mktemp)\"\n  local -r dp_old_new_old_new_old_new_old_new_old_new=\"$(",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n        if ((dp[j]<dp[j]+matrix[i*n+j])); then\n          dp[j]=$((dp[j]+matrix[i*n+j]))\n        fi\n      fi\n    done\n  done\n  echo $((dp[n-1]/(n*n)))",
    "  local -n matrix=$1\n  local rows=${#matrix[@]}\n  local cols=${#matrix[0]}\n  local -a dp\n  for ((i=0;i<rows;i++)); do\n    dp[i]=()\n    for ((j=0;j<cols;j++)); do\n      dp[i][j]=0\n    done\n  done\n  dp[0][0]=${matrix[0][0]}\n  for ((i=1;i<rows;i++)); do\n    dp[i][0]=$((dp[i-1][0]+matrix[i][0]))\n  done\n  for ((j=1;j<cols;j++)); do\n    dp[0][j]=$((dp[0][j-1]+matrix[0][j]))\n  done\n  for ((i=1;i<rows;i++)); do\n    for ((j=1;j<cols;j++)); do\n      dp[i][j]=$((dp[i-1][j]+matrix[i][j]))\n      if ((dp[i][j-1]+matrix[i][j]>dp[i][j])); then\n        dp[i][j]=$((dp[i][j-1]+matrix[i][j]))\n      fi\n    done\n  done\n  echo $((dp[rows-1][cols-1]/(rows+cols-1)))"
  ]
}