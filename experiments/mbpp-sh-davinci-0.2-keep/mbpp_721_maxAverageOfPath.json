{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a matrix=()\n  local -i i j n=0\n  local -i max_i max_j\n  local -i max_avg=0\n  local -i avg=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n\n  while read -r line; do\n    matrix+=(\"$line\")\n    ((n++))\n  done\n\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < n; j++)); do\n      if ((i == 0 && j == 0)); then\n        max_i=$i\n        max_j=$j\n        max_avg=${matrix[$i,$j]}\n        max_count=1\n      elif ((i == 0)); then\n        sum=${matrix[$i,$j-1]}\n        count=1\n      elif ((j == 0)); then\n        sum=${matrix[$i-1,$j]}\n        count=1\n      else\n        sum=${matrix[$i-1,$j]}+${matrix[$i,$j-1]}\n        count=2\n      fi\n\n      avg=$((sum / count))\n      matrix[$i,$j]=$avg\n\n      if ((avg > max_avg)); then\n        max_i=$i\n        max_j=$j\n        max_avg=$avg\n        max_count=$count\n      fi\n    done\n  done\n\n  echo \"$max_i $max_j $max_avg $max_count\"",
    "  local matrix=\"$1\"\n  local rows=$(wc -l <<< \"$matrix\")\n  local cols=$(wc -w <<< \"$matrix\")\n  local row=0\n  local col=0\n  local total=0\n  local max=0\n  local max_path=()\n  local path=()\n  local cell\n  local cell_cost\n  local path_cost\n  local path_length\n  local path_average\n  local path_average_max\n\n  while true; do\n    cell=$(awk -v row=$row -v col=$col '{print $col}' <<< \"$matrix\")\n    cell_cost=$(awk -v row=$row -v col=$col '{print $col}' <<< \"$matrix\")\n    path+=($cell)\n    total=$((total + cell_cost))\n    if [[ $row -eq $((rows - 1)) ]] && [[ $col -eq $((cols - 1)) ]]; then\n      path_cost=$total\n      path_length=${#path[@]}\n      path_average=$((path_cost / path_length))\n      if [[ $path_average -gt $max ]]; then\n        max=$path_average\n        max_path=(\"${path[@]}\")\n      fi\n      unset path\n      total=0\n      col=0\n      row=0\n      continue\n    fi\n    if [[ $col -eq $((cols - 1)) ]]; then\n      row=$((row + 1))\n      col=0\n      continue\n    fi\n    col=$((col + 1))\n  done\n  echo \"${max_path[@]}\"",
    "  local matrix=$1\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp=()\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      local -i val=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i+1{print $j+1}')\n      if ((i==0 && j==0)); then\n        dp[$i,$j]=$val\n      elif ((i==0)); then\n        dp[$i,$j]=$((dp[$i,$j-1]+val))\n      elif ((j==0)); then\n        dp[$i,$j]=$((dp[$i-1,$j]+val))\n      else\n        dp[$i,$j]=$((dp[$i-1,$j]+dp[$i,$j-1]-dp[$i-1,$j-1]+val))\n      fi\n    done\n  done\n  echo \"${dp[$((n-1)),$((m-1))]}\"",
    "  local matrix=\"$1\"\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i m=$(wc -w <<< \"$matrix\")\n  local -i i j k\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=0\n    done\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((i==0 && j==0)); then\n        dp[i,j]=$(cut -d' ' -f1 <<< \"$matrix\")\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1] + $(cut -d' ' -f$((j+1)) <<< \"$matrix\")))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j] + $(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n      else\n        dp[i,j]=$((dp[i-1,j] + dp[i,j-1] + $(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n      fi\n    done\n  done\n  echo \"scale=2; ${dp[n-1,m-1]}/($n+$m-1)\" | bc",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j])+${matrix[i]:j:1})\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp=(0)\n  local -a path=(0)\n  local -a cost=(0)\n  local -a count=(0)\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local cell=${matrix[$i]}\n      cell=${cell:$j:1}\n      local idx=$((i*n+j))\n      if ((i==0 && j==0)); then\n        dp[$idx]=$cell\n        path[$idx]=$cell\n        cost[$idx]=$cell\n        count[$idx]=1\n      elif ((i==0)); then\n        dp[$idx]=$((dp[$((idx-1))]+cell))\n        path[$idx]=$((path[$((idx-1))]+cell))\n        cost[$idx]=$((cost[$((idx-1))]+cell))\n        count[$idx]=$((count[$((idx-1))]+1))\n      elif ((j==0)); then\n        dp[$idx]=$((dp[$((idx-n))]+cell))\n        path[$idx]=$((path[$((idx-n))]+cell))\n        cost[$idx]=$((cost[$((idx-n))]+cell))\n        count[$idx]=$((count[$((idx-n))]+1))\n      else\n        local left=$((dp[$((idx-1))]*count[$((idx-1))]))\n        local up=$((dp[$((idx-n))]*count[$((idx-n))]))\n        if ((left>up)); then\n          dp[$idx]=$((left+cell))\n          path[$idx]=$((path[$((idx-1))]+cell))\n          cost[$idx]=$((cost[$((idx-1))]+cell))\n          count[$idx]=",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk \"{print \\$$((j+1))}\")\n      if ((i > 0)); then\n        dp[i,j]=$((dp[i,j] + dp[i-1,j]))\n      fi\n      if ((j > 0)); then\n        dp[i,j]=$((dp[i,j] + dp[i,j-1]))\n      fi\n      if ((i > 0 && j > 0)); then\n        dp[i,j]=$((dp[i,j] - dp[i-1,j-1]))\n      fi\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      for ((k=i;k<n;k++)); do\n        for ((l=j;l<m;l++)); do\n          local -i sum=dp[k,l]\n          if ((i > 0)); then\n            sum=$((sum - dp[i-1,l]))\n          fi\n          if ((j > 0)); then\n            sum=$((sum - dp[k,j-1]))\n          fi\n          if ((i > 0 && j > 0)); then\n            sum=$((sum + dp[i-1,j-1]))\n          fi\n          local -i area=$(((k-i+1)*(l-j+1)))\n          local -i avg=$((sum/area))\n          if ((avg > max)); then\n            max=$avg\n          fi\n        done\n      done\n   ",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i val=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n      if ((j>0)); then\n        val=$((val+dp[j-1]))\n      fi\n      dp[j]=$((val<dp[j]?dp[j]:val))\n    done\n  done\n  echo \"${dp[-1]}\"",
    "  local -n matrix=$1\n  local n=$(wc -l <<< \"$matrix\")\n  local -a dp\n  for ((i=0; i<n; i++)); do\n    dp[i]=0\n  done\n  for ((i=n-2; i>=0; i--)); do\n    dp[i]=$(bc <<< \"scale=6; (${dp[i+1]} + ${matrix[i+1]})/2\")\n  done\n  for ((i=n-2; i>=0; i--)); do\n    for ((j=n-2; j>=0; j--)); do\n      local -a row=(${matrix[i]})\n      local -a nextRow=(${matrix[i+1]})\n      dp[j]=$(bc <<< \"scale=6; (${dp[j]} + ${dp[j+1]} + ${row[j]} + ${nextRow[j]})/4\")\n    done\n  done\n  printf \"%.6f\\n\" \"${dp[0]}\"",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_cost_plus_one=\"$((max_cost + 1))\"\n  local -r max_cost_plus_two=\"$((max_cost + 2))\"\n  local -r max_cost_plus_three=\"$((max_cost + 3))\"\n  local -r max_cost_plus_four=\"$((max_cost + 4))\"\n  local -r max_cost_plus_five=\"$((max_cost + 5))\"\n  local -r max_cost_plus_six=\"$((max_cost + 6))\"\n  local -r max_cost_plus_seven=\"$((max_cost + 7))\"\n  local -r max_cost_plus_eight=\"$((max_cost + 8))\"\n  local -r max_cost_plus_nine=\"$((max_cost + 9))\"\n  local -r max_cost_plus_ten=\"$((max_cost + 10))\"\n  local -r max_cost_plus_eleven=\"$((max_cost + 11))\"\n  local -r max_cost_plus_twelve=\"$((max_cost + 12))\"\n  local -r max_cost_plus_thirteen=\"$((max_cost + 13))\"\n  local -r max_cost_plus_fourteen=\"$((max_cost + 14))\"\n  local -r max_cost_plus_fifteen=\"$((max_cost + 15))\"\n  local -r max_cost_plus_sixteen=\"$((max_cost + 16))\"\n  local -r max_cost_plus_seventeen=\"$((max_cost + 17))\"\n  local -r max_cost_plus_eighteen=\"$((max_cost + 18))\"\n  local -r max_cost_plus_nineteen=\"$((max_cost + 19))\"\n  local -r max_cost_plus_twenty=\"$((",
    "  local -a matrix\n  local -i i=0 j=0\n  local -i n=0\n  local -i max_avg=0\n  local -i avg=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max_avg=0\n  local -i max_avg=0\n  local -i max_sum",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r matrix=\"$(sed 's/ /,/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/^/[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/$/]/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/$/,/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/^/[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/,$/]/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\n//g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\[\\[/\\[\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\]/\\]\\]/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed 's/\\]\\[/\\],\\[/g' <<< \"$matrix\")\"\n  local -r matrix=\"$(sed",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_path_length=\"$((n + m - 2))\"\n  local -r max_average=\"$((max_cost / max_path_length))\"\n  local -r max_average_length=\"${#max_average}\"\n  local -r max_average_length_plus_one=\"$((max_average_length + 1))\"\n  local -r max_average_length_plus_two=\"$((max_average_length + 2))\"\n  local -r max_average_length_plus_three=\"$((max_average_length + 3))\"\n  local -r max_average_length_plus_four=\"$((max_average_length + 4))\"\n  local -r max_average_length_plus_five=\"$((max_average_length + 5))\"\n  local -r max_average_length_plus_six=\"$((max_average_length + 6))\"\n  local -r max_average_length_plus_seven=\"$((max_average_length + 7))\"\n  local -r max_average_length_plus_eight=\"$((max_average_length + 8))\"\n  local -r max_average_length_plus_nine=\"$((max_average_length + 9))\"\n  local -r max_average_length_plus_ten=\"$((max_average_length + 10))\"\n  local -r max_average_length_plus_eleven=\"$((max_average_length + 11))\"\n  local -r max_average_length_plus_twelve=\"$((max_average_length + 12))\"\n  local -r max_average_length_plus_thirteen=\"$((max_average_length + 13))\"\n  local -r max_average_length_plus_fourteen=\"$((max_average_length + 14))\"\n  local -r max_average_length_plus",
    "  local -a matrix\n  local -i i j n\n  local -i max_avg=0\n  local -i max_avg_i=0\n  local -i max_avg_j=0\n  local -i max_avg_n=0\n  local -i max_avg_sum=0\n  local -i sum=0\n  local -i avg=0\n  local -i cost=0\n\n  IFS=$'\\n' read -r -d '' -a matrix < <(echo \"$1\")\n  n=${#matrix[@]}\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      sum=0\n      for ((k=i; k<n; k++)); do\n        for ((l=j; l<n; l++)); do\n          cost=${matrix[k]:l:1}\n          sum=$((sum + cost))\n          avg=$((sum / ((k-i+1)*(l-j+1))))\n          if [[ $avg -gt $max_avg ]]; then\n            max_avg=$avg\n            max_avg_i=$i\n            max_avg_j=$j\n            max_avg_n=$((k-i+1))\n            max_avg_sum=$sum\n          fi\n        done\n      done\n    done\n  done\n\n  echo \"max_avg=$max_avg\"\n  echo \"max_avg_i=$max_avg_i\"\n  echo \"max_avg_j=$max_avg_j\"\n  echo \"max_avg_n=$max_avg_n\"\n  echo \"max_avg_sum=$max_avg_sum\"",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max_avg=0\n  local -i avg=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_sum=0\n  local -i max_max=0\n  local -i max_avg=0\n  local -i max_max_avg=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_l=0\n  local -i max_max_sum=0\n  local -i max_max_max=0\n  local -i max_max_avg=0\n  local -i max_max_max_avg=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_l=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_max=0\n  local -i max_max_max_avg=0\n  local -i max_max_max_max_avg=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_l=0\n  local -i max_max_max_max_sum=0\n  local -",
    "  local matrix=\"$1\"\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i j\n  local -a costs\n  local -i cost\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_cost=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n  local -i max_cost_cost=0\n  local -i max_cost_cost_i=0\n  local -i max_cost_cost_j=0\n  local -i max_cost_cost_cost=0\n  local -i max_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_j=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_cost=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_cost_i=0\n  local -i max_cost_cost_cost_cost_cost_cost_cost_cost_j=",
    "  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp=()\n  local -i i j\n  for ((i=0;i<rows;i++)); do\n    for ((j=0;j<cols;j++)); do\n      local -i cur=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      if ((i==0 && j==0)); then\n        dp[$((i*cols+j))]=$cur\n      elif ((i==0)); then\n        dp[$((i*cols+j))]=$((dp[$((i*cols+j-1))]+cur))\n      elif ((j==0)); then\n        dp[$((i*cols+j))]=$((dp[$(((i-1)*cols+j))]+cur))\n      else\n        dp[$((i*cols+j))]=$((dp[$((i*cols+j-1))]+cur))\n        if ((dp[$((i*cols+j))] < dp[$(((i-1)*cols+j))]+cur)); then\n          dp[$((i*cols+j))]=$((dp[$(((i-1)*cols+j))]+cur))\n        fi\n      fi\n    done\n  done\n  echo \"${dp[@]}\"\n  echo \"${dp[@]}\" | awk \"{print \\$$((rows*cols))/$((rows+cols-1))}\"",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  local max_avg=0\n  local max_path=()\n  local sum=0\n  local avg=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        dp[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n        path[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n      elif [[ $i -eq 0 ]]; then\n        dp[$i,$j]=$((${dp[$i,$((j-1))]} + $(echo \"$matrix\" | head -n 1 | awk -v j=$((j+1)) '{print $j}')))\n        path[$i,$j]=$((${path[$i,$((j-1))]} + $(echo \"$matrix\" | head -n 1 | awk -v j=$((j+1)) '{print $j}')))\n      elif [[ $j -eq 0 ]]; then\n        dp[$i,$j]=$((${dp[$((i-1)),$j]} + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')))\n        path[$i,$j]=$((${path[$((i-1)),$j]} + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')))\n      else\n        dp[$i,$j]=$((${dp[$i,$((j-1))]} + $(echo \"$matrix\" | head -n $",
    "  local -a matrix\n  local -i i j\n  local -i n\n  local -i max_avg\n  local -i max_avg_i max_avg_j\n  local -i sum\n  local -i sum_i sum_j\n  local -i sum_max\n  local -i sum_max_i sum_max_j\n  local -i sum_max_n\n  local -i sum_max_n_i sum_max_n_j\n  local -i sum_max_n_i_prev sum_max_n_j_prev\n  local -i sum_max_n_i_prev_prev sum_max_n_j_prev_prev\n  local -i sum_max_n_i_prev_prev_prev sum_max_n_j_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_max_n_i_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev sum_max_n_j_prev_prev_prev_prev",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp=()\n  local -a path=()\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      local cost=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i{print $j}')\n      if ((i==0 && j==0)); then\n        dp[i,j]=$cost\n        path[i,j]=$cost\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1]+cost))\n        path[i,j]=$((path[i,j-1]+cost))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j]+cost))\n        path[i,j]=$((path[i-1,j]+cost))\n      else\n        dp[i,j]=$((dp[i-1,j]+cost))\n        path[i,j]=$((path[i-1,j]+cost))\n        if ((dp[i,j-1]>dp[i,j])); then\n          dp[i,j]=$((dp[i,j-1]+cost))\n          path[i,j]=$((path[i,j-1]+cost))\n        fi\n      fi\n    done\n  done\n  echo \"${path[n-1,m-1]} $((n+m-1))\" | awk '{printf \"%.2f\\n\", $1/$2}'"
  ]
}