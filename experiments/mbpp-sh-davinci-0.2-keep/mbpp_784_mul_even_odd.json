{
  "name": "mbpp_784_mul_even_odd",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the product of first even and odd number of a given list.\n#\n# $1 is a space-separated list\nmul_even_odd() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    mul_even_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 4 1 6 8\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"1 5 7 9 10\") = \"10\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a arr=(\"$@\")\n  local even=0\n  local odd=0\n  local i=0\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ $((arr[$i] % 2)) -eq 0 ]; then\n      even=$((arr[$i]))\n      break\n    fi\n    i=$((i + 1))\n  done\n  i=0\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ $((arr[$i] % 2)) -ne 0 ]; then\n      odd=$((arr[$i]))\n      break\n    fi\n    i=$((i + 1))\n  done\n  echo $((even * odd))",
    "  local even=0\n  local odd=0\n  local i=0\n  for n in $1; do\n    if [ $((i % 2)) -eq 0 ]; then\n      even=$((even + n))\n    else\n      odd=$((odd + n))\n    fi\n    i=$((i + 1))\n  done\n  echo $((even * odd))",
    "    local list=$1\n    local even=$(echo $list | awk '{print $2}')\n    local odd=$(echo $list | awk '{print $1}')\n    echo $((even * odd))",
    "    local list=\"$1\"\n    local even_odd=($(echo \"$list\" | awk '{print $1, $2}'))\n    echo \"${even_odd[0]} * ${even_odd[1]} = $(( ${even_odd[0]} * ${even_odd[1]} ))\"",
    "    local list=$1\n    local even=$(echo $list | awk '{print $2}')\n    local odd=$(echo $list | awk '{print $1}')\n    echo $((even * odd))",
    "    local list=$1\n    local even=$(echo $list | awk '{print $2}')\n    local odd=$(echo $list | awk '{print $1}')\n    echo $((even * odd))",
    "  local list=$1\n  local even=1\n  local odd=1\n  for i in $list; do\n    if [ $((i%2)) -eq 0 ]; then\n      even=$((even*i))\n    else\n      odd=$((odd*i))\n    fi\n  done\n  echo $((even*odd))",
    "  local list=$1\n  local even=$(echo $list | awk '{print $2}')\n  local odd=$(echo $list | awk '{print $1}')\n  echo $((even * odd))",
    "  local list=\"$1\"\n  local even=$(echo \"$list\" | awk '{print $1}')\n  local odd=$(echo \"$list\" | awk '{print $2}')\n  echo \"$((even * odd))\"",
    "    local list=$1\n    local even=$(echo $list | cut -d' ' -f2)\n    local odd=$(echo $list | cut -d' ' -f1)\n    echo $((even * odd))",
    "  local even_num odd_num\n  for num in $1; do\n    if [[ $((num % 2)) -eq 0 ]]; then\n      even_num=$num\n      break\n    fi\n  done\n  for num in $1; do\n    if [[ $((num % 2)) -ne 0 ]]; then\n      odd_num=$num\n      break\n    fi\n  done\n  echo $((even_num * odd_num))",
    "    local list=\"$1\"\n    local even=$(echo \"$list\" | awk '{print $1}')\n    local odd=$(echo \"$list\" | awk '{print $2}')\n    echo $((even * odd))",
    "    local -a arr=(\"$@\")\n    local even=0\n    local odd=0\n    local i=0\n    local len=${#arr[@]}\n    while [[ $i -lt $len ]]; do\n        if [[ $((arr[$i] % 2)) -eq 0 ]]; then\n            even=${arr[$i]}\n            break\n        fi\n        i=$((i + 1))\n    done\n    i=0\n    while [[ $i -lt $len ]]; do\n        if [[ $((arr[$i] % 2)) -ne 0 ]]; then\n            odd=${arr[$i]}\n            break\n        fi\n        i=$((i + 1))\n    done\n    echo $((even * odd))",
    "    local list=$1\n    local even=$(echo $list | awk '{print $2}')\n    local odd=$(echo $list | awk '{print $1}')\n    echo $((even * odd))",
    "  local list=$1\n  local even_num=0\n  local odd_num=0\n  local num=0\n  for num in $list\n  do\n    if [ $((num % 2)) -eq 0 ]\n    then\n      even_num=$num\n      break\n    fi\n  done\n  for num in $list\n  do\n    if [ $((num % 2)) -ne 0 ]\n    then\n      odd_num=$num\n      break\n    fi\n  done\n  echo $((even_num * odd_num))",
    "    local list=$1\n    local even=$(echo $list | cut -d ' ' -f 2)\n    local odd=$(echo $list | cut -d ' ' -f 4)\n    echo $((even * odd))",
    "  local even_num=0\n  local odd_num=0\n  local even_found=0\n  local odd_found=0\n  for num in $1; do\n    if [ $((num % 2)) -eq 0 ]; then\n      if [ $even_found -eq 0 ]; then\n        even_num=$num\n        even_found=1\n      fi\n    else\n      if [ $odd_found -eq 0 ]; then\n        odd_num=$num\n        odd_found=1\n      fi\n    fi\n    if [ $even_found -eq 1 ] && [ $odd_found -eq 1 ]; then\n      break\n    fi\n  done\n  echo $((even_num * odd_num))",
    "  local list=\"$1\"\n  local even=0\n  local odd=0\n  local i=0\n  for n in $list; do\n    if [ $((i % 2)) -eq 0 ]; then\n      even=$((even + n))\n    else\n      odd=$((odd + n))\n    fi\n    i=$((i + 1))\n  done\n  echo $((even * odd))",
    "  local list=$1\n  local even=$(echo $list | cut -d' ' -f2)\n  local odd=$(echo $list | cut -d' ' -f3)\n  echo $((even * odd))",
    "  local list=\"$1\"\n  local even_num odd_num\n  for num in $list; do\n    if [ $((num % 2)) -eq 0 ]; then\n      even_num=$num\n      break\n    fi\n  done\n  for num in $list; do\n    if [ $((num % 2)) -eq 1 ]; then\n      odd_num=$num\n      break\n    fi\n  done\n  echo $((even_num * odd_num))"
  ]
}