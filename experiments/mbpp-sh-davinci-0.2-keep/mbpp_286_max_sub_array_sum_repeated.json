{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nmax_sub_array_sum_repeated() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    max_sub_array_sum_repeated \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 -30 -1\" \"4\" \"3\") = \"30\" ]]\n    [[ $(candidate \"-1 10 20\" \"3\" \"2\") = \"59\" ]]\n    [[ $(candidate \"-1 -2 -3\" \"3\" \"3\") = \"-1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local max_wrap=0\n    local i=0\n    local j=0\n    local l=0\n\n    for ((i=0; i<n; i++)); do\n        curr_sum+=${arr[$i]}\n    done\n    max_wrap=$curr_sum\n\n    for ((i=0; i<n; i++)); do\n        curr_sum=0\n        for ((j=i; j<n+i; j++)); do\n            l=$((j%n))\n            curr_sum+=${arr[$l]}\n            if [[ $curr_sum -gt $max_sum ]]; then\n                max_sum=$curr_sum\n            fi\n        done\n    done\n\n    if [[ $k -gt 2 ]]; then\n        max_wrap=$((max_wrap*(k-2)))\n        max_sum=$((max_sum+max_wrap))\n    fi\n\n    echo $max_sum",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local max_sum_so_far=0\n  local max_sum_ending_here=0\n  local i=0\n  local j=0\n\n  for ((i=0; i<n; i++)); do\n    max_sum_ending_here=$((max_sum_ending_here + arr[i]))\n    if ((max_sum_ending_here < 0)); then\n      max_sum_ending_here=0\n    fi\n    if ((max_sum_so_far < max_sum_ending_here)); then\n      max_sum_so_far=$max_sum_ending_here\n    fi\n  done\n\n  max_sum=$max_sum_so_far\n\n  for ((i=0; i<n; i++)); do\n    max_sum_ending_here=$((max_sum_ending_here + arr[i]))\n    if ((max_sum_ending_here < 0)); then\n      max_sum_ending_here=0\n    fi\n    if ((max_sum_so_far < max_sum_ending_here)); then\n      max_sum_so_far=$max_sum_ending_here\n    fi\n  done\n\n  max_sum=$((max_sum + max_sum_so_far * (k - 2)))\n\n  for ((i=0; i<n; i++)); do\n    max_sum_ending_here=$((max_sum_ending_here + arr[i]))\n    if ((max_sum_ending_here < 0)); then\n      max_sum_ending_here=0\n    fi\n    if ((max_sum_so_far < max_sum_ending_here)); then\n      max_sum_so_far=$max_sum_ending_here\n    fi\n  done\n\n  max_sum=$((max_sum + max_sum_so_far))\n\n  echo $max_sum",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n  local k_i=0\n  local k_j=0\n  local max_i=0\n  local max_j=0\n  local max_k_i=0\n  local max_k_j=0\n  local sum_i=0\n  local sum_j=0\n  local sum_k_i=0\n  local sum_k_j=0\n  local sum_max_i=0\n  local sum_max_j=0\n  local sum_max_k_i=0\n  local sum_max_k_j=0\n  local sum_curr_i=0\n  local sum_curr_j=0\n  local sum_curr_k_i=0\n  local sum_curr_k_j=0\n  local sum_curr_max_i=0\n  local sum_curr_max_j=0\n  local sum_curr_max_k_i=0\n  local sum_curr_max_k_j=0\n  local sum_curr_max_k_j_i=0\n  local sum_curr_max_k_j_j=0\n  local sum_curr_max_k_j_k_i=0\n  local sum_curr_max_k_j_k_j=0\n  local sum_curr_max_k_j_max_i=0\n  local sum_curr_max_k_j_max_j=0\n  local sum_curr_max_k_j_max_k_i=0\n  local sum_curr_max_k_j_max_k_j=0\n  local sum_curr_max_k_j_sum_i=0\n  local sum_curr_max_k_j_sum_j=0\n  local sum_curr_max_k_j_sum_k_i=0\n  local sum_curr_max_k_j_sum_",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local k_i=0\n    local k_j=0\n    local k_sum=0\n    local k_curr_sum=0\n    local k_max_sum=0\n\n    # Find the max sum of the array\n    while (( i < n )); do\n        curr_sum=$(( curr_sum + arr[i] ))\n        if (( curr_sum < 0 )); then\n            curr_sum=0\n        fi\n        if (( curr_sum > max_sum )); then\n            max_sum=$curr_sum\n        fi\n        (( i++ ))\n    done\n\n    # Find the max sum of the array repeated k times\n    if (( k > 1 )); then\n        k_sum=$(( k * (arr[0] + arr[n - 1]) ))\n        k_i=0\n        k_j=n - 1\n        while (( k_i < n )); do\n            k_curr_sum=$(( k_curr_sum + arr[k_i] ))\n            if (( k_curr_sum < 0 )); then\n                k_curr_sum=0\n            fi\n            if (( k_curr_sum > k_max_sum )); then\n                k_max_sum=$k_curr_sum\n            fi\n            (( k_i++ ))\n        done\n        while (( k_j > 0 )); do\n            k_curr_sum=$(( k_curr_sum + arr[k_j] ))\n            if (( k_curr_sum < 0 )); then\n                k_curr_sum=0\n            fi\n            if (( k_curr_sum > k_max_sum )); then\n                k_max_sum=$k_curr_sum\n            fi\n            (( k_j-- ))\n        done\n        k_max_sum=$(( k_max_sum * (k - 2) ))\n        k_max_sum=$(( k_max_sum + k_sum ))\n    fi\n\n    if",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local k_i=0\n    local k_j=0\n    local k_sum=0\n    local k_curr_sum=0\n    local k_max_sum=0\n\n    for ((i=0; i<n; i++)); do\n        curr_sum=0\n        for ((j=i; j<n; j++)); do\n            curr_sum=$((curr_sum + arr[j]))\n            if ((curr_sum > max_sum)); then\n                max_sum=$curr_sum\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        k_sum=$((k_sum + arr[i]))\n    done\n\n    for ((i=0; i<n; i++)); do\n        k_curr_sum=0\n        for ((j=i; j<n; j++)); do\n            k_curr_sum=$((k_curr_sum + arr[j]))\n            if ((k_curr_sum > k_max_sum)); then\n                k_max_sum=$k_curr_sum\n            fi\n        done\n    done\n\n    if ((k_max_sum > 0)); then\n        k_max_sum=$((k_max_sum * (k-2)))\n    fi\n\n    echo $((k_max_sum + max_sum))",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n  local l=0\n  local m=0\n  local sum=0\n  local max_sum_so_far=0\n  local max_sum_ending_here=0\n  local max_left=0\n  local max_right=0\n  local left=0\n  local right=0\n  local max_left_so_far=0\n  local max_right_so_far=0\n\n  for ((i=0; i<n; i++))\n  do\n    curr_sum=$((curr_sum + arr[i]))\n  done\n\n  max_sum=$curr_sum\n\n  for ((i=1; i<k; i++))\n  do\n    for ((j=0; j<n; j++))\n    do\n      arr[n*i+j]=arr[j]\n    done\n  done\n\n  for ((i=1; i<k; i++))\n  do\n    for ((j=0; j<n; j++))\n    do\n      curr_sum=$((curr_sum + arr[n*i+j]))\n    done\n    if ((curr_sum > max_sum))\n    then\n      max_sum=$curr_sum\n    fi\n  done\n\n  for ((i=0; i<k*n; i++))\n  do\n    sum=$((sum + arr[i]))\n  done\n\n  if ((sum > 0))\n  then\n    max_sum=$((max_sum + sum*(k-2)))\n  else\n    max_sum_so_far=arr[0]\n    max_left_so_far=0\n    max_right_so_far=0\n    for ((i=0; i<k; i++))\n    do\n      max_sum_ending_here=0\n      left=0\n      right=0\n      for ((j=0; j<n; j++))\n      do\n        max_sum_ending_here=$((",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n\n  while [ $i -lt $n ]; do\n    curr_sum=0\n    j=$i\n    while [ $j -lt $n ]; do\n      curr_sum=$((curr_sum + arr[j]))\n      max_sum=$((max_sum > curr_sum ? max_sum : curr_sum))\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n\n  echo $max_sum",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n  local l=0\n  local r=0\n  local max_l=0\n  local max_r=0\n\n  for ((i=0; i<n; i++)); do\n    curr_sum=0\n    for ((j=i; j<n; j++)); do\n      curr_sum=$((curr_sum + arr[j]))\n      if ((curr_sum > max_sum)); then\n        max_sum=$curr_sum\n        max_l=$i\n        max_r=$j\n      fi\n    done\n  done\n\n  for ((i=0; i<k-1; i++)); do\n    for ((j=max_l; j<=max_r; j++)); do\n      arr[n+j-max_l]=${arr[j]}\n    done\n    n=$((n + max_r - max_l + 1))\n  done\n\n  echo $max_sum",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n\n    for ((i=0; i<n; i++)); do\n        curr_sum=0\n        for ((j=i; j<n; j++)); do\n            curr_sum=$((curr_sum + arr[j]))\n            if ((curr_sum > max_sum)); then\n                max_sum=$curr_sum\n            fi\n        done\n    done\n\n    echo $((max_sum * k))",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n  local k_i=0\n  local k_j=0\n  local k_curr_sum=0\n  local k_max_sum=0\n  local k_max_i=0\n  local k_max_j=0\n  local k_max_k=0\n  local k_max_n=0\n  local k_max_arr=()\n  local k_max_arr_sum=0\n\n  for ((i=0; i<n; i++)); do\n    curr_sum=0\n    for ((j=i; j<n; j++)); do\n      curr_sum=$((curr_sum+arr[j]))\n      if ((curr_sum>max_sum)); then\n        max_sum=curr_sum\n      fi\n    done\n  done\n\n  for ((k_i=0; k_i<k; k_i++)); do\n    k_curr_sum=0\n    for ((k_j=0; k_j<n; k_j++)); do\n      k_curr_sum=$((k_curr_sum+arr[k_j]))\n      if ((k_curr_sum>k_max_sum)); then\n        k_max_sum=k_curr_sum\n        k_max_i=$k_i\n        k_max_j=$k_j\n        k_max_k=$k\n        k_max_n=$n\n        k_max_arr=(\"${arr[@]}\")\n        k_max_arr_sum=$((k_max_arr_sum+arr[k_j]))\n      fi\n    done\n  done\n\n  echo \"k_max_sum: $k_max_sum\"\n  echo \"k_max_i: $k_max_i\"\n  echo \"k_max_j: $k_max_j\"\n  echo \"k_max_k: $k_max_k\"\n  echo \"k",
    "  local -a array=(\"$@\")\n  local -i k=$2\n  local -i max_sum=$3\n  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i n=${#array[@]}\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_m=0\n  local -i max_n=0\n  local -i max_o=0\n  local -i max_p=0\n  local -i max_q=0\n  local -i max_r=0\n  local -i max_s=0\n  local -i max_t=0\n  local -i max_u=0\n  local -i max_v=0\n  local -i max_w=0\n  local -i max_x=0\n  local -i max_y=0\n  local -i max_z=0\n  local -i max_aa=0\n  local -i max_ab=0\n  local -i max_ac=0\n  local -i max_ad=0\n  local -i max_ae=0\n  local -i max_af=0\n  local -i max_ag=0\n  local -i max_ah=0\n  local -i max_ai=0\n  local -i max_aj=0\n  local -i max_ak=0\n  local -i max_al=0\n  local -i max_am=0\n  local -i max_an=0\n  local -i max_ao=0\n  local -i max_ap=0\n  local -i max_aq=0\n  local -i max_ar=0\n  local -i max_as=0\n  local -i max_at=0\n  local -i max_au=0\n  local -i max_av=0\n  local -i max_aw=0\n  local -i max_ax=0\n  local -i max_ay=0\n  local -i max_az=0\n  local -i max",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local l=0\n    local r=0\n    local max_l=0\n    local max_r=0\n    local max_i=0\n    local max_j=0\n    local max_k=0\n    local max_n=0\n    local max_arr=()\n    local curr_arr=()\n    local curr_k=0\n    local curr_n=0\n    local curr_i=0\n    local curr_j=0\n    local curr_l=0\n    local curr_r=0\n    local sum_arr=()\n    local sum_arr_len=0\n    local sum_arr_i=0\n    local sum_arr_j=0\n    local sum_arr_k=0\n    local sum_arr_n=0\n    local sum_arr_l=0\n    local sum_arr_r=0\n    local sum_arr_sum=0\n    local sum_arr_max_sum=0\n    local sum_arr_max_i=0\n    local sum_arr_max_j=0\n    local sum_arr_max_k=0\n    local sum_arr_max_n=0\n    local sum_arr_max_l=0\n    local sum_arr_max_r=0\n    local sum_arr_max_arr=()\n    local sum_arr_curr_arr=()\n    local sum_arr_curr_k=0\n    local sum_arr_curr_n=0\n    local sum_arr_curr_i=0\n    local sum_arr_curr_j=0\n    local sum_arr_curr_l=0\n    local sum_arr_curr_r=0\n    local sum_arr_curr_sum=0\n    local sum_arr_curr_max_sum=0\n    local sum_arr_curr_max_i=0\n    local sum_arr_curr_max_j=",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i\n    local j\n    local k_i\n\n    for ((i=0; i<n; i++))\n    do\n        curr_sum=0\n        for ((j=i; j<n; j++))\n        do\n            curr_sum=$((curr_sum+arr[j]))\n            if ((curr_sum>max_sum))\n            then\n                max_sum=$curr_sum\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++))\n    do\n        curr_sum=0\n        for ((k_i=1; k_i<k; k_i++))\n        do\n            for ((j=i; j<n; j++))\n            do\n                curr_sum=$((curr_sum+arr[j]))\n                if ((curr_sum>max_sum))\n                then\n                    max_sum=$curr_sum\n                fi\n            done\n        done\n    done\n\n    echo $max_sum",
    "  local -n arr=$1\n  local k=$2\n  local n=$3\n  local max_sum=0\n  local curr_sum=0\n  local i=0\n  local j=0\n  local max_i=0\n  local max_j=0\n  local max_i_tmp=0\n  local max_j_tmp=0\n  local curr_i=0\n  local curr_j=0\n  local curr_i_tmp=0\n  local curr_j_tmp=0\n  local sum_arr=()\n  local sum_arr_tmp=()\n  local sum_arr_size=0\n  local sum_arr_tmp_size=0\n  local sum_arr_size_tmp=0\n  local sum_arr_tmp_size_tmp=0\n  local sum_arr_size_max=0\n  local sum_arr_tmp_size_max=0\n  local sum_arr_size_max_tmp=0\n  local sum_arr_tmp_size_max_tmp=0\n  local sum_arr_size_max_tmp_tmp=0\n  local sum_arr_tmp_size_max_tmp_tmp=0\n  local max_sum_tmp=0\n  local curr_sum_tmp=0\n  local max_sum_tmp_tmp=0\n  local curr_sum_tmp_tmp=0\n  local max_sum_tmp_tmp_tmp=0\n  local curr_sum_tmp_tmp_tmp=0\n  local max_sum_tmp_tmp_tmp_tmp=0\n  local curr_sum_tmp_tmp_tmp_tmp=0\n  local max_sum_tmp_tmp_tmp_tmp_tmp=0\n  local curr_sum_tmp_tmp_tmp_tmp_tmp=0\n  local max_sum_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local curr_sum_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local max_sum_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local curr_sum_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local sum=0\n    local max_val=0\n    local min_val=0\n    local min_sum=0\n    local max_prefix_sum=0\n    local min_prefix_sum=0\n    local total_sum=0\n\n    for ((i=0; i<n; i++)); do\n        sum=$((sum + arr[i]))\n        max_val=$((max_val > arr[i] ? max_val : arr[i]))\n        min_val=$((min_val < arr[i] ? min_val : arr[i]))\n    done\n\n    if ((max_val <= 0)); then\n        echo $((max_val * k))\n        return\n    fi\n\n    max_sum=$sum\n    min_sum=$sum\n    max_prefix_sum=$sum\n    min_prefix_sum=$sum\n    total_sum=$((sum * k))\n\n    for ((i=0; i<n; i++)); do\n        curr_sum=$((curr_sum + arr[i]))\n        max_prefix_sum=$((max_prefix_sum > curr_sum ? max_prefix_sum : curr_sum))\n        min_prefix_sum=$((min_prefix_sum < curr_sum ? min_prefix_sum : curr_sum))\n        max_sum=$((max_sum > (curr_sum + (total_sum - sum)) ? max_sum : (curr_sum + (total_sum - sum))))\n        min_sum=$((min_sum < (curr_sum + (total_sum - sum)) ? min_sum : (curr_sum + (total_sum - sum))))\n    done\n\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            curr_sum=$((curr_sum + arr[j]))\n            max_prefix_sum=$((max_prefix_sum > curr_",
    "  local -a arr\n  local -i k\n  local -i n\n  local -i i\n  local -i j\n  local -i max_so_far\n  local -i max_ending_here\n  local -i curr_sum\n  local -i max_sum\n  local -i start\n  local -i end\n  local -i s\n  local -i e\n  local -i max_start\n  local -i max_end\n  local -i max_start_idx\n  local -i max_end_idx\n  local -i max_start_idx_tmp\n  local -i max_end_idx_tmp\n  local -i max_start_idx_tmp2\n  local -i max_end_idx_tmp2\n  local -i max_start_idx_tmp3\n  local -i max_end_idx_tmp3\n  local -i max_start_idx_tmp4\n  local -i max_end_idx_tmp4\n  local -i max_start_idx_tmp5\n  local -i max_end_idx_tmp5\n  local -i max_start_idx_tmp6\n  local -i max_end_idx_tmp6\n  local -i max_start_idx_tmp7\n  local -i max_end_idx_tmp7\n  local -i max_start_idx_tmp8\n  local -i max_end_idx_tmp8\n  local -i max_start_idx_tmp9\n  local -i max_end_idx_tmp9\n  local -i max_start_idx_tmp10\n  local -i max_end_idx_tmp10\n  local -i max_start_idx_tmp11\n  local -i max_end_idx_tmp11\n  local -i max_start_idx_tmp12\n  local -i max_end_idx_tmp12\n  local -i max_start_idx_tmp13\n  local -i max_end_idx_tmp13\n  local -i max_start_idx_tmp14\n  local -i max_",
    "    local -n arr=\"$1\"\n    local k=\"$2\"\n    local n=\"$3\"\n\n    local max_so_far=0\n    local max_ending_here=0\n    local i=0\n    local j=0\n    local sum=0\n\n    for ((i=0; i<n; i++)); do\n        sum=$((sum + arr[i]))\n    done\n\n    for ((i=0; i<n; i++)); do\n        max_ending_here=$((max_ending_here + arr[i]))\n        if ((max_ending_here < 0)); then\n            max_ending_here=0\n        fi\n        if ((max_so_far < max_ending_here)); then\n            max_so_far=\"$max_ending_here\"\n        fi\n    done\n\n    if ((sum > 0)); then\n        max_so_far=$((max_so_far * k))\n        local curr_prefix_sum=0\n        local curr_suffix_sum=0\n        for ((i=0; i<n; i++)); do\n            curr_prefix_sum=$((curr_prefix_sum + arr[i]))\n            if ((curr_prefix_sum < 0)); then\n                curr_prefix_sum=0\n            fi\n            if ((curr_prefix_sum > max_so_far)); then\n                max_so_far=\"$curr_prefix_sum\"\n            fi\n        done\n        for ((j=n-1; j>=0; j--)); do\n            curr_suffix_sum=$((curr_suffix_sum + arr[j]))\n            if ((curr_suffix_sum < 0)); then\n                curr_suffix_sum=0\n            fi\n            if ((curr_suffix_sum > max_so_far)); then\n                max_so_far=\"$curr_suffix_sum\"\n            fi\n        done\n    fi\n\n    echo \"$max_so_far\"",
    "    local -a arr=()\n    local -i k=$2\n    local -i n=$3\n    local -i i=0\n    local -i j=0\n    local -i max_sum=0\n    local -i curr_sum=0\n    local -i max_sum_so_far=0\n    local -i start=0\n    local -i end=0\n    local -i s=0\n    local -i e=0\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n\n    for ((i=0; i<k; i++)); do\n        for ((j=0; j<n; j++)); do\n            curr_sum+=${arr[j]}\n            if ((curr_sum > max_sum_so_far)); then\n                max_sum_so_far=curr_sum\n                start=s\n                end=e\n            fi\n            if ((curr_sum < 0)); then\n                curr_sum=0\n                s=j+1\n            fi\n            e=$j\n        done\n    done\n\n    for ((i=start; i<=end; i++)); do\n        max_sum+=${arr[i]}\n    done\n\n    echo $max_sum",
    "    local -a arr=($1)\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n\n    for i in $(seq 0 $((n-1))); do\n        sum=0\n        for j in $(seq 0 $((n-1))); do\n            sum=$((sum + arr[(($i + $j) % $n)]))\n        done\n        max_sum=$((max_sum + sum))\n    done\n\n    max_sum=$((max_sum * k))\n\n    for i in $(seq 0 $((n-1))); do\n        sum=0\n        for j in $(seq 0 $((n-1))); do\n            sum=$((sum + arr[(($i + $j) % $n)]))\n        done\n        max_sum=$((max_sum + sum))\n    done\n\n    echo $max_sum",
    "    local -n arr=$1\n    local k=$2\n    local n=$3\n    local max_sum=0\n    local curr_sum=0\n    local i=0\n    local j=0\n    local sum=0\n    local max_val=0\n    local min_val=0\n    local max_index=0\n    local min_index=0\n    local max_wrap=0\n    local min_wrap=0\n    local wrap_sum=0\n    local total_sum=0\n\n    for ((i=0; i<n; i++)); do\n        if ((arr[i] > max_val)); then\n            max_val=${arr[i]}\n            max_index=$i\n        fi\n        if ((arr[i] < min_val)); then\n            min_val=${arr[i]}\n            min_index=$i\n        fi\n        total_sum=$((total_sum + arr[i]))\n    done\n\n    if ((k == 1)); then\n        for ((i=0; i<n; i++)); do\n            curr_sum=$((curr_sum + arr[i]))\n            if ((curr_sum < 0)); then\n                curr_sum=0\n            fi\n            if ((curr_sum > max_sum)); then\n                max_sum=$curr_sum\n            fi\n        done\n        echo $max_sum\n        return\n    fi\n\n    for ((i=0; i<n; i++)); do\n        curr_sum=$((curr_sum + arr[i]))\n        if ((curr_sum < 0)); then\n            curr_sum=0\n        fi\n        if ((curr_sum > max_sum)); then\n            max_sum=$curr_sum\n        fi\n    done\n\n    if ((max_sum == 0)); then\n        echo $max_val\n        return\n    fi\n\n    if ((max_index == min_index)); then\n        echo $((max_sum + (k-2)*total_sum))\n        return\n    fi\n\n    for ((i=0; i<n; i++)); do\n        if ((i == max_index)); then\n            max_"
  ]
}