{
  "name": "mbpp_223_is_majority",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nis_majority() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    is_majority \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 3 3 3 10\" \"7\" \"3\") = \"true\" ]]\n    [[ $(candidate \"1 1 2 4 4 4 6 6\" \"8\" \"4\") = \"false\" ]]\n    [[ $(candidate \"1 1 1 2 2\" \"5\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1 1 2 2\" \"5\" \"1\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -n arr=$1\n    local n=$2\n    local x=$3\n    local i=0\n    local count=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq $x ]; then\n            ((count++))\n        fi\n        ((i++))\n    done\n    if [ $count -gt $((n/2)) ]; then\n        echo \"1\"\n    else\n        echo \"0\"\n    fi",
    "    local -a array=($1)\n    local n=$2\n    local element=$3\n    local i=0\n    local count=0\n    local half=$((n / 2))\n\n    while [[ $i -lt $n ]]; do\n        if [[ ${array[$i]} -eq $element ]]; then\n            count=$((count + 1))\n        fi\n\n        if [[ $count -gt $half ]]; then\n            echo 1\n            return\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo 0",
    "    local -a arr=(\"${!1}\")\n    local n=$2\n    local x=$3\n    local l=0\n    local r=$((n-1))\n    local mid\n    local count=0\n    while [[ $l -le $r ]]; do\n        mid=$(((l+r)/2))\n        if [[ ${arr[$mid]} -eq $x ]]; then\n            count=$((count+1))\n            if [[ $count -gt $((n/2)) ]]; then\n                echo \"true\"\n                return\n            fi\n            l=$((mid+1))\n        elif [[ ${arr[$mid]} -gt $x ]]; then\n            r=$((mid-1))\n        else\n            l=$((mid+1))\n        fi\n    done\n    echo \"false\"",
    "  local -n arr=$1\n  local n=$2\n  local x=$3\n  local count=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -eq $x ]]; then\n      ((count++))\n    fi\n  done\n  if [[ $count -gt $((n/2)) ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "    local -a array=($1)\n    local n=$2\n    local element=$3\n    local count=0\n    for i in ${array[@]}; do\n        if [ $i -eq $element ]; then\n            ((count++))\n        fi\n    done\n    if [ $count -gt $((n/2)) ]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local -n arr=$1\n    local n=$2\n    local x=$3\n    local -i i=0\n    local -i j=$((n-1))\n    local -i mid=0\n    local -i count=0\n    while ((i <= j))\n    do\n        mid=$(((i+j)/2))\n        if ((arr[mid] == x))\n        then\n            count=$((count+1))\n            break\n        elif ((arr[mid] < x))\n        then\n            i=$((mid+1))\n        else\n            j=$((mid-1))\n        fi\n    done\n    if ((count == 0))\n    then\n        return 1\n    fi\n    i=$((mid-1))\n    while ((i >= 0))\n    do\n        if ((arr[i] == x))\n        then\n            count=$((count+1))\n        else\n            break\n        fi\n        i=$((i-1))\n    done\n    j=$((mid+1))\n    while ((j < n))\n    do\n        if ((arr[j] == x))\n        then\n            count=$((count+1))\n        else\n            break\n        fi\n        j=$((j+1))\n    done\n    if ((count > n/2))\n    then\n        return 0\n    else\n        return 1\n    fi",
    "    local -n arr=$1\n    local n=$2\n    local x=$3\n    local count=0\n    for (( i=0; i<n; i++ )); do\n        if [[ ${arr[i]} -eq $x ]]; then\n            (( count++ ))\n        fi\n    done\n    if [[ $count -gt $(( n/2 )) ]]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local element=\"$3\"\n    local count=0\n    for i in $list; do\n        if [ \"$i\" -eq \"$element\" ]; then\n            ((count++))\n        fi\n    done\n    if [ \"$count\" -gt \"$((n/2))\" ]; then\n        echo \"1\"\n    else\n        echo \"0\"\n    fi",
    "    local -n arr=\"$1\"\n    local n=\"$2\"\n    local x=\"$3\"\n    local i=0\n    local j=0\n    local k=0\n    local mid=$((n/2))\n    while [ $i -lt $n ] && [ $arr[$i] -le $x ]; do\n        if [ $arr[$i] -eq $x ]; then\n            j=$((j+1))\n        fi\n        i=$((i+1))\n    done\n    if [ $j -gt $mid ]; then\n        k=1\n    fi\n    echo $k",
    "  local list=$1\n  local n=$2\n  local element=$3\n  local count=0\n  for i in $list; do\n    if [[ $i -eq $element ]]; then\n      (( count++ ))\n    fi\n  done\n  if [[ $count -gt $n/2 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "    local -a arr=(\"$@\")\n    local n=${arr[-1]}\n    local x=${arr[-2]}\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i mid=0\n    local -i count=0\n    local -i len=${#arr[@]}\n    local -i left=0\n    local -i right=0\n    local -i mid_index=0\n    local -i mid_index_left=0\n    local -i mid_index_right=0\n\n    for ((i=0; i<len-2; i++)); do\n        arr[i]=${arr[i]}\n    done\n\n    mid=$((n/2))\n    left=0\n    right=n-1\n\n    while ((left <= right)); do\n        mid_index=$(((left+right)/2))\n        mid_index_left=$((mid_index-1))\n        mid_index_right=$((mid_index+1))\n\n        if ((arr[mid_index] == x && arr[mid_index_left] != x)); then\n            count=1\n            for ((j=mid_index_right; j<n; j++)); do\n                if ((arr[j] == x)); then\n                    count=$((count+1))\n                fi\n            done\n            if ((count > mid)); then\n                echo \"1\"\n                return\n            else\n                echo \"0\"\n                return\n            fi\n        elif ((arr[mid_index] == x && arr[mid_index_left] == x)); then\n            right=$((mid_index_left))\n        elif ((arr[mid_index] < x)); then\n            left=$((mid_index_right))\n        else\n            right=$((mid_index_left))\n        fi\n    done\n\n    echo \"0\"",
    "  local array=($1)\n  local n=$2\n  local element=$3\n  local count=0\n  for i in ${array[@]}; do\n    if [ $i -eq $element ]; then\n      count=$((count+1))\n    fi\n  done\n  if [ $count -gt $((n/2)) ]; then\n    echo \"1\"\n  else\n    echo \"0\"\n  fi",
    "    local arr=($1)\n    local n=$2\n    local elem=$3\n    local count=0\n    for ((i=0; i<n; i++)); do\n        if [ ${arr[$i]} -eq $elem ]; then\n            ((count++))\n        fi\n    done\n    if [ $count -gt $((n/2)) ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    local -n arr=$1\n    local n=$2\n    local x=$3\n    local i=0\n    local count=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq $x ]\n        then\n            count=$((count+1))\n        fi\n        if [ $count -gt $((n/2)) ]\n        then\n            return 0\n        fi\n        i=$((i+1))\n    done\n    return 1",
    "  local -a array=($1)\n  local n=$2\n  local element=$3\n  local count=0\n  for i in ${array[@]}; do\n    if [[ $i -eq $element ]]; then\n      ((count++))\n    fi\n  done\n  if [[ $count -gt $n/2 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "  local arr=($1)\n  local n=$2\n  local x=$3\n  local count=0\n  for i in ${arr[@]}; do\n    if [ $i -eq $x ]; then\n      ((count++))\n    fi\n  done\n  if [ $count -gt $((n/2)) ]; then\n    echo 1\n  else\n    echo 0\n  fi",
    "  local -a arr=(\"${!1}\")\n  local n=$2\n  local x=$3\n  local i=0\n  local count=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq $x ]; then\n      count=$((count + 1))\n    fi\n    if [ $count -gt $((n / 2)) ]; then\n      echo \"1\"\n      return\n    fi\n    i=$((i + 1))\n  done\n  echo \"0\"",
    "    local -a arr\n    local -i n\n    local -i x\n    local -i i\n    local -i mid\n    local -i low\n    local -i high\n    local -i count\n    arr=($1)\n    n=$2\n    x=$3\n    low=0\n    high=$((n-1))\n    while [[ low -le high ]]; do\n        mid=$(((low+high)/2))\n        if [[ ${arr[mid]} -eq x ]]; then\n            count=0\n            for ((i=0; i<n; i++)); do\n                if [[ ${arr[i]} -eq x ]]; then\n                    count=$((count+1))\n                fi\n            done\n            if [[ count -gt n/2 ]]; then\n                echo 1\n                return\n            else\n                echo 0\n                return\n            fi\n        elif [[ ${arr[mid]} -lt x ]]; then\n            low=$((mid+1))\n        else\n            high=$((mid-1))\n        fi\n    done\n    echo 0",
    "    local -a array=(\"${!1}\")\n    local n=$2\n    local element=$3\n    local -i left=0\n    local -i right=n-1\n    local -i mid\n    local -i majority_index\n    while left <= right; do\n        mid=$(((left+right)/2))\n        if array[mid] == element; then\n            majority_index=$mid\n            break\n        elif array[mid] < element; then\n            left=$((mid+1))\n        else\n            right=$((mid-1))\n        fi\n    done\n    if (( majority_index == -1 )); then\n        return 1\n    fi\n    if (( majority_index < n/2 )); then\n        return 1\n    fi\n    if (( array[majority_index] != element )); then\n        return 1\n    fi\n    if (( majority_index > 0 && array[majority_index-1] == element )); then\n        return 1\n    fi\n    if (( majority_index < n-1 && array[majority_index+1] == element )); then\n        return 1\n    fi\n    return 0",
    "    local -a array\n    local -i i\n    local -i n\n    local -i x\n    local -i count\n\n    array=($1)\n    n=$2\n    x=$3\n\n    count=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${array[i]} -eq $x ]]; then\n            ((count++))\n        fi\n    done\n\n    if [[ $count -gt $n/2 ]]; then\n        echo \"1\"\n    else\n        echo \"0\"\n    fi"
  ]
}