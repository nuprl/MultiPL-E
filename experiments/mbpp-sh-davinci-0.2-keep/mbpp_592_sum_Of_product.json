{
  "name": "mbpp_592_sum_Of_product",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find the sum of the product of consecutive binomial co-efficients.\n#\n# $1 is an integer\nsum_Of_product() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    sum_Of_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"15\" ]]\n    [[ $(candidate \"4\") = \"56\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local binomial_coefficient=0\n    local product=1\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            binomial_coefficient=$(binomial_coefficient $i $j)\n            product=$((product * binomial_coefficient))\n        done\n        sum=$((sum + product))\n        product=1\n    done\n    echo $sum",
    "    n=$1\n    sum=0\n    for i in $(seq 1 $n); do\n        for j in $(seq 1 $i); do\n            sum=$((sum + $(binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    if [[ $1 -lt 0 ]]; then\n        echo \"Invalid input\"\n        exit 1\n    fi\n    sum=0\n    for (( i=0; i<=$1; i++ ))\n    do\n        for (( j=$i+1; j<=$1; j++ ))\n        do\n            sum=$(( $sum + $i*$j ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        local prod=1\n        for (( j=1; j<=$i; j++ ))\n        do\n            prod=$(( $prod * $(( $n - $j + 1 )) / $j ))\n        done\n        sum=$(( $sum + $prod ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i*j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*j))\n        done\n    done\n    echo $sum",
    "\tlocal n=$1\n\tlocal sum=0\n\tfor (( i=1; i<=$n; i++ ))\n\tdo\n\t\tfor (( j=1; j<=$n; j++ ))\n\t\tdo\n\t\t\tsum=$(( $sum + $i * $j ))\n\t\tdone\n\tdone\n\techo $sum",
    "    if [ $1 -lt 0 ]; then\n        echo \"Error: Input must be a positive integer\"\n        exit 1\n    fi\n    sum=0\n    for (( i=1; i<=$1; i++ )); do\n        for (( j=$i+1; j<=$1; j++ )); do\n            sum=$(( sum + i*j ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=0\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            for ((k=0; k<=j; k++))\n            do\n                product=$(( $product + $(binomial_coefficient $i $j) * $(binomial_coefficient $j $k) ))\n            done\n        done\n        sum=$(( $sum + $product ))\n        product=0\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=0\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            product=1\n            for ((k=0; k<=j; k++))\n            do\n                product=$((product*(i-k)/(k+1)))\n            done\n            sum=$((sum+product))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for i in $(seq 1 $n); do\n        for j in $(seq 1 $i); do\n            sum=$((sum + $(binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + (i*j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=$n; i++ ))\n    do\n        for (( j=0; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(binomial_coefficient $i $j) ))\n        done\n    done\n    echo $sum",
    "  local n=$1\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local product=1\n  local binomial=1\n  for ((i=1; i<=n; i++)); do\n    for ((j=1; j<=i; j++)); do\n      for ((k=1; k<=j; k++)); do\n        binomial=$(binomial $i $k)\n        product=$((product * binomial))\n      done\n      sum=$((sum + product))\n      product=1\n    done\n  done\n  echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    while [ $i -le $n ]\n    do\n        while [ $j -le $n ]\n        do\n            sum=$((sum+i*j))\n            j=$((j+1))\n        done\n        i=$((i+1))\n        j=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            sum=$((sum+$(binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    n=$1\n    sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=n; j++))\n        do\n            if [ $i -ne $j ]\n            then\n                sum=$((sum + (factorial $i) * (factorial $j)))\n            fi\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum+i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    # Write your code here\n    echo \"Not implemented\"",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + (i*j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i * j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            sum=$(($sum + $(bc <<< \"scale=2; $i / $j\")))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=$i+1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $i * $j ))\n        done\n    done\n    echo $sum",
    "    if [ $1 -lt 0 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 1 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 2 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 3 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 4 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 5 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 6 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 7 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 8 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 9 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 10 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 11 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 12 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 13 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 14 ]; then\n        echo \"Error: Input should be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 15 ]; then\n        echo \"Error",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i*j)))\n        done\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        for (( j=1; j<=$i; j++ ))\n        do\n            sum=$(( $sum + $(( $(( $(( $(( $i - $j + 1 )) * $i )) / $j )) * $(( $(( $(( $(( $i - $j + 1 )) * $i )) / $j )) - 1 )) )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + i*j ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        for ((j=1; j<=i; j++)); do\n            sum=$((sum + i * j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local prod=1\n    local binomial_coefficient=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$i; j++))\n        do\n            binomial_coefficient=$(binomial_coefficient $i $j)\n            prod=$((prod * binomial_coefficient))\n        done\n        sum=$((sum + prod))\n        prod=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=$i+1; j<=$n; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    if [[ $1 -lt 0 ]]; then\n        echo \"Error: Invalid input\"\n        return 1\n    fi\n\n    if [[ $1 -eq 0 ]]; then\n        echo \"0\"\n        return 0\n    fi\n\n    if [[ $1 -eq 1 ]]; then\n        echo \"1\"\n        return 0\n    fi\n\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=1\n    local binomial_coefficient=1\n    local factorial=1\n    local factorial_j=1\n    local factorial_k=1\n\n    for (( i=1; i<=$1; i++ ))\n    do\n        for (( j=0; j<=$i; j++ ))\n        do\n            factorial_j=1\n            factorial_k=1\n            for (( k=1; k<=$j; k++ ))\n            do\n                factorial_j=$(( factorial_j * k ))\n            done\n            for (( k=1; k<=$(( i - j )); k++ ))\n            do\n                factorial_k=$(( factorial_k * k ))\n            done\n            binomial_coefficient=$(( factorial_j / factorial_k ))\n            product=$(( product * binomial_coefficient ))\n        done\n        sum=$(( sum + product ))\n        product=1\n    done\n    echo \"$sum\"",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            sum=$((sum + (binomial_coefficient $i $j) * (binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=i+1; j<=n; j++))\n        do\n            local product=$((i*j))\n            sum=$((sum+product))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local product=1\n    while [ $i -le $n ]\n    do\n        j=1\n        product=1\n        while [ $j -le $i ]\n        do\n            product=$(( $product * $(( $n - $j + 1 )) / $j ))\n            j=$(( $j + 1 ))\n        done\n        sum=$(( $sum + $product ))\n        i=$(( $i + 1 ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        for (( j=1; j<=$1; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        for (( j=1; j<=$i; j++ ))\n        do\n            sum=$(( $sum + $(( $(( $(( $(( $(( $i - $j )) + 1 )) * $(( $i - $j )) )) / 2 )) + $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        local product=1\n        for ((j=1; j<=i; j++))\n        do\n            product=$((product*j))\n        done\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i = 1; i <= n; i++ )); do\n        for (( j = i + 1; j <= n; j++ )); do\n            sum=$(( sum + (i * j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=1\n    local binomial_coefficient=1\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            for ((k=0; k<=j; k++))\n            do\n                binomial_coefficient=$((binomial_coefficient * (i-k) / (k+1)))\n                product=$((product * binomial_coefficient))\n            done\n            sum=$((sum + product))\n            product=1\n            binomial_coefficient=1\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local k=1\n    local product=1\n    while [ $i -le $n ]\n    do\n        j=1\n        while [ $j -le $i ]\n        do\n            k=1\n            product=1\n            while [ $k -le $j ]\n            do\n                product=$(( $product * $(( $i - $k + 1 )) / $k ))\n                k=$(( $k + 1 ))\n            done\n            sum=$(( $sum + $product ))\n            j=$(( $j + 1 ))\n        done\n        i=$(( $i + 1 ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local product=1\n    for ((i=0;i<=n;i++))\n    do\n        for ((j=0;j<=i;j++))\n        do\n            for ((k=0;k<=j;k++))\n            do\n                for ((l=0;l<=k;l++))\n                do\n                    for ((m=0;m<=l;m++))\n                    do\n                        product=$((product*$((n-i))/$((i-j))/$((j-k))/$((k-l))/$((l-m))))\n                        sum=$((sum+product))\n                    done\n                done\n            done\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        local prod=1\n        for ((j=1; j<=i; j++))\n        do\n            prod=$((prod*j))\n        done\n        sum=$((sum+prod))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=n; i++ ))\n    do\n        for (( j=0; j<=i; j++ ))\n        do\n            sum=$(( sum + (factorial $i)/((factorial $j)*(factorial $((i-j)))) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        for ((j=1; j<=i; j++)); do\n            sum=$((sum + (i-j+1)*(j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local ncr=0\n    local ncr1=0\n    local ncr2=0\n    local ncr3=0\n    local ncr4=0\n    local ncr5=0\n    local ncr6=0\n    local ncr7=0\n    local ncr8=0\n    local ncr9=0\n    local ncr10=0\n    local ncr11=0\n    local ncr12=0\n    local ncr13=0\n    local ncr14=0\n    local ncr15=0\n    local ncr16=0\n    local ncr17=0\n    local ncr18=0\n    local ncr19=0\n    local ncr20=0\n    local ncr21=0\n    local ncr22=0\n    local ncr23=0\n    local ncr24=0\n    local ncr25=0\n    local ncr26=0\n    local ncr27=0\n    local ncr28=0\n    local ncr29=0\n    local ncr30=0\n    local ncr31=0\n    local ncr32=0\n    local ncr33=0\n    local ncr34=0\n    local ncr35=0\n    local ncr36=0\n    local ncr37=0\n    local ncr38=0\n    local ncr39=0\n    local ncr40=0\n    local ncr41=0\n    local ncr42=0\n    local ncr43=0\n    local ncr44=0\n    local ncr45=0\n    local ncr46=0\n    local ncr47=0\n    local ncr48=0\n    local ncr49=0\n    local ncr50=0\n    local ncr51=0\n    local ncr52=0\n    local ncr53=0\n    local ncr54=0\n    local ncr55=0\n    local ncr56=0\n    local ncr57=0\n    local ncr58=",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        for ((j=1; j<=i; j++)); do\n            sum=$((sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        local product=1\n        for (( j=1; j<=i; j++ ))\n        do\n            product=$(( product*j ))\n        done\n        sum=$(( sum+product ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++)); do\n        for ((j=$i+1; j<=$n; j++)); do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        local product=1\n        for (( j=1; j<=i; j++ ))\n        do\n            product=$(( product*j ))\n        done\n        sum=$(( sum+product ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1;i<=$n;i++))\n    do\n        for ((j=$i+1;j<=$n;j++))\n        do\n            sum=$((sum+i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        local product=1\n        for (( j=1; j<=$i; j++ ))\n        do\n            local product=$(( $product * $(( $n + 1 - $j )) / $j ))\n        done\n        local sum=$(( $sum + $product ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i * j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + $((i-j+1))*$((j))))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local product=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            for ((k=1; k<=j; k++))\n            do\n                for ((l=1; l<=k; l++))\n                do\n                    for ((m=1; m<=l; m++))\n                    do\n                        product=$((i*j*k*l*m))\n                        sum=$((sum+product))\n                    done\n                done\n            done\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        local prod=1\n        for (( j=1; j<=$i; j++ ))\n        do\n            prod=$(( $prod * $(( $n + 1 - $j )) / $j ))\n        done\n        sum=$(( $sum + $prod ))\n    done\n    echo $sum",
    "    if [ $1 -lt 2 ]; then\n        echo \"Invalid input\"\n        return\n    fi\n    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        for (( j=1; j<=$i; j++ ))\n        do\n            sum=$(( sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$(($sum + $(bc <<< \"scale=0; $i*$j\")))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=1\n    for ((i=1;i<=n;i++))\n    do\n        product=1\n        for ((j=1;j<=i;j++))\n        do\n            product=$((product*(i+j)/j))\n        done\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++)); do\n        for ((j=1; j<=$n; j++)); do\n            sum=$((sum + $i * $j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local k=1\n    local product=1\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$i; j++ ))\n        do\n            for (( k=1; k<=$j; k++ ))\n            do\n                product=$(( $product * $k ))\n            done\n            sum=$(( $sum + $product ))\n            product=1\n        done\n    done\n    echo $sum",
    "    n=$1\n    sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( $sum + $(( $(( $(( $(( $i - $j )) + 1 )) * $(( $i - $j )) )) / $(( $j * 2 )) )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=$n; i++ ))\n    do\n        for (( j=0; j<=$n; j++ ))\n        do\n            sum=$(( $sum
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( $sum
    "    local sum=0\n    local n=$1\n    for ((i=1;i<=$n;i++))\n    do\n        for ((j=1;j<=$n;j++))\n        do\n            sum=$(($sum+$(binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local ncr=0\n    local ncr_1=0\n    local ncr_2=0\n    local ncr_3=0\n    local ncr_4=0\n    local ncr_5=0\n    local ncr_6=0\n    local ncr_7=0\n    local ncr_8=0\n    local ncr_9=0\n    local ncr_10=0\n    local ncr_11=0\n    local ncr_12=0\n    local ncr_13=0\n    local ncr_14=0\n    local ncr_15=0\n    local ncr_16=0\n    local ncr_17=0\n    local ncr_18=0\n    local ncr_19=0\n    local ncr_20=0\n    local ncr_21=0\n    local ncr_22=0\n    local ncr_23=0\n    local ncr_24=0\n    local ncr_25=0\n    local ncr_26=0\n    local ncr_27=0\n    local ncr_28=0\n    local ncr_29=0\n    local ncr_30=0\n    local ncr_31=0\n    local ncr_32=0\n    local ncr_33=0\n    local ncr_34=0\n    local ncr_35=0\n    local ncr_36=0\n    local ncr_37=0\n    local ncr_38=0\n    local ncr_39=0\n    local ncr_40=0\n    local ncr_41=0\n    local ncr_42=0\n    local ncr_43=0\n    local ncr_44=0\n    local ncr_45=0\n    local ncr_46=0\n    local ncr_47=0\n    local ncr_48=0\n    local ncr_49=0\n    local ncr_50=0\n    local ncr_51=0\n    local n",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        local product=1\n        for ((j=1; j<=$i; j++))\n        do\n            product=$((product*j))\n        done\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    while [ $i -le $n ]\n    do\n        local j=0\n        while [ $j -le $i ]\n        do\n            local k=0\n            while [ $k -le $j ]\n            do\n                local l=0\n                while [ $l -le $k ]\n                do\n                    local a=$(bc <<< \"scale=2; $(binomial_coefficient $i $j) * $(binomial_coefficient $j $k) * $(binomial_coefficient $k $l)\")\n                    sum=$(bc <<< \"scale=2; $sum + $a\")\n                    ((l++))\n                done\n                ((k++))\n            done\n            ((j++))\n        done\n        ((i++))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i*j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*(j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=1\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            for ((k=0; k<=j; k++))\n            do\n                product=$((product*binomial_coefficient(i,j)*binomial_coefficient(j,k)))\n            done\n        done\n        sum=$((sum+product))\n        product=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local prod=1\n    for (( i=1; i<=$n; i++ ))\n    do\n        prod=$(( $prod * $i ))\n        sum=$(( $sum + $prod ))\n    done\n    echo $sum",
    "  local n=$1\n  local sum=0\n  for (( i=1; i<=$n; i++ ))\n  do\n    for (( j=1; j<=$n; j++ ))\n    do\n      sum=$(( $sum + $(( $i * $j )) ))\n    done\n  done\n  echo $sum",
    "    local n=$1\n    local sum=0\n    local product=1\n    for (( i=1; i<=n; i++ ))\n    do\n        product=$(( product * (n-i+1) / i ))\n        sum=$(( sum + product ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local product=1\n    while [ $i -le $n ]\n    do\n        while [ $j -le $i ]\n        do\n            product=$(( $product * $(( $i - $j + 1 )) / $j ))\n            j=$(( $j + 1 ))\n        done\n        sum=$(( $sum + $product ))\n        product=1\n        i=$(( $i + 1 ))\n        j=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=1\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            product=1\n            for ((k=0; k<=j; k++))\n            do\n                product=$((product*(i-k)/(k+1)))\n            done\n            sum=$((sum+product))\n        done\n    done\n    echo $sum",
    "    if [[ $1 -lt 1 ]]; then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n    sum=0\n    for (( i=1; i<=$1; i++ )); do\n        for (( j=1; j<=$i; j++ )); do\n            sum=$(( $sum + $(( $i - $j + 1 )) * $(( $j + 1 )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(( $(( $(( $i + $j )) * $(( $i + $j - 1 )) )) / 2 )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            product=1\n            for ((k=1; k<=j; k++))\n            do\n                product=$((product*(i-k+1)/k))\n            done\n            sum=$((sum+product))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=$i+1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $i * $j ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( $sum + $(( $(( $(( $i - $j + 1 )) * $i )) / $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local product=1\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            product=$((product*j))\n        done\n        sum=$((sum+product))\n        product=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local product=1\n    for ((i=1; i<=n; i++)); do\n        for ((j=1; j<=i; j++)); do\n            product=$((product * (i - j + 1) / j))\n        done\n        sum=$((sum + product))\n        product=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for i in $(seq $n); do\n        for j in $(seq $i); do\n            sum=$(($sum + $(binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            local product=$(bc <<< \"$i*$j\")\n            local binomial=$(bc <<< \"($n-$i+1)/$j\")\n            sum=$(bc <<< \"$sum+$product*$binomial\")\n        done\n    done\n    echo $sum",
    "    # Write your code here\n    if [ $1 -lt 0 ]; then\n        echo \"Invalid input\"\n    else\n        sum=0\n        for (( i=0; i<=$1; i++ ))\n        do\n            for (( j=0; j<=$1; j++ ))\n            do\n                sum=$(( $sum
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=n; i++ )); do\n        for (( j=0; j<=n; j++ )); do\n            sum=$(( sum
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        for ((j=1; j<=n; j++)); do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        local product=1\n        for ((j=1; j<=i; j++))\n        do\n            product=$((product*j))\n        done\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*(j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    while [ $i -le $n ]\n    do\n        local j=1\n        local product=1\n        while [ $j -le $i ]\n        do\n            product=$((product*$((n-j+1))/$j))\n            j=$((j+1))\n        done\n        sum=$((sum+product))\n        i=$((i+1))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1;i<=$n;i++))\n    do\n        local product=1\n        for ((j=1;j<=$i;j++))\n        do\n            product=$((product*$((n-$j+1))/$j))\n        done\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++)); do\n        for ((j=1; j<=$i; j++)); do\n            sum=$((sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + (i * j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum+i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        local product=1\n        for (( j=1; j<=i; j++ ))\n        do\n            product=$(( product * (n-j+1) / j ))\n        done\n        sum=$(( sum + product ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        local product=1\n        for ((j=1; j<=$i; j++))\n        do\n            product=$((product*j))\n        done\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum+i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=0;i<=n;i++))\n    do\n        for ((j=0;j<=n;j++))\n        do\n            if [ $i -ne $j ]\n            then\n                sum=$(($sum + $(binomial_coefficient $i $j)))\n            fi\n        done\n    done\n    echo $sum",
    "    sum=0\n    for ((i=1; i<=$1; i++))\n    do\n        for ((j=1; j<=$1; j++))\n        do\n            sum=$((sum + (i*j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local eeee=0\n    local ffff=",
    "    if [[ $1 -lt 1 ]]; then\n        echo \"Invalid input\"\n        exit 1\n    fi\n    sum=0\n    for ((i=1; i<=$1; i++)); do\n        for ((j=1; j<=$i; j++)); do\n            sum=$((sum + $i * $j))\n        done\n    done\n    echo $sum",
    "    if [ $1 -lt 0 ]; then\n        echo \"Error: $1 is less than 0\"\n        return\n    fi\n    if [ $1 -eq 0 ]; then\n        echo \"Error: $1 is equal to 0\"\n        return\n    fi\n    if [ $1 -eq 1 ]; then\n        echo \"Error: $1 is equal to 1\"\n        return\n    fi\n    if [ $1 -eq 2 ]; then\n        echo \"Error: $1 is equal to 2\"\n        return\n    fi\n    if [ $1 -eq 3 ]; then\n        echo \"Error: $1 is equal to 3\"\n        return\n    fi\n    if [ $1 -eq 4 ]; then\n        echo \"Error: $1 is equal to 4\"\n        return\n    fi\n    if [ $1 -eq 5 ]; then\n        echo \"Error: $1 is equal to 5\"\n        return\n    fi\n    if [ $1 -eq 6 ]; then\n        echo \"Error: $1 is equal to 6\"\n        return\n    fi\n    if [ $1 -eq 7 ]; then\n        echo \"Error: $1 is equal to 7\"\n        return\n    fi\n    if [ $1 -eq 8 ]; then\n        echo \"Error: $1 is equal to 8\"\n        return\n    fi\n    if [ $1 -eq 9 ]; then\n        echo \"Error: $1 is equal to 9\"\n        return\n    fi\n    if [ $1 -eq 10 ]; then\n        echo \"Error: $1 is equal to 10\"\n        return\n    fi\n    if [ $1 -eq 11 ]; then\n        echo \"Error: $1 is equal to 11\"\n        return\n    fi\n    if [ $1 -eq 12 ]; then\n        echo \"Error: $1 is equal to 12\"\n        return\n    fi\n    if [ $1 -eq 13 ]; then\n        echo \"Error: $1 is equal to 13\"\n        return\n    fi\n    if [ $1 -eq 14 ]; then\n        echo \"Error: $1 is equal to 14\"\n        return\n    fi\n    if [ $1 -eq 15 ]; then\n        echo \"Error: $1 is equal to 15\"\n        return\n    fi\n   ",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=1\n    local binomial_coefficient=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            product=1\n            for ((k=1; k<=j; k++))\n            do\n                product=$((product*(i-k+1)/k))\n            done\n            sum=$((sum+product))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for i in $(seq 1 $n); do\n        local product=1\n        for j in $(seq 1 $i); do\n            product=$((product * $((n - j + 1)) / j))\n        done\n        sum=$((sum + product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=n; i++ ))\n    do\n        for (( j=0; j<=n; j++ ))\n        do\n            sum=$(( $sum
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=n; j++ ))\n        do\n            sum=$(( sum + (i*j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( sum + $(binomial_coefficient $i $j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local k=1\n    local product=1\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            for ((k=1; k<=j; k++))\n            do\n                product=$((product*$((i-k+1))/$k))\n            done\n            sum=$((sum+product))\n            product=1\n        done\n    done\n    echo $sum",
    "    sum=0\n    for ((i=1; i<=$1; i++))\n    do\n        for ((j=1; j<=$1; j++))\n        do\n            sum=$((sum + $((i*j)) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$i; j++))\n        do\n            sum=$((sum + $((i-j+1))*$((i-j+2))/2))\n        done\n    done\n    echo $sum",
    "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i*j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local eeee=0\n    local ffff=0\n    local ggg",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=i+1; j<=n; j++ ))\n        do\n            sum=$(( $sum + $i * $j ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $i * $j ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            product=1\n            for ((k=1; k<=j; k++))\n            do\n                product=$((product*(i-k+1)/k))\n            done\n            sum=$((sum+product))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            sum=$((sum + $i * $j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local product=1\n    for ((i=1; i<=n; i++))\n    do\n        product=1\n        for ((j=1; j<=i; j++))\n        do\n            product=$((product*(n-j+1)/j))\n        done\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=1\n    for (( i=0; i<=$n; i++ ))\n    do\n        for (( j=0; j<=$i; j++ ))\n        do\n            for (( k=0; k<=$j; k++ ))\n            do\n                product=$(( $product * $(( $i - $k )) ))\n            done\n            sum=$(( $sum + $product ))\n            product=1\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        local prod=1\n        for (( j=1; j<=$i; j++ ))\n        do\n            prod=$(( $prod * $(( $n + 1 - $j )) / $j ))\n        done\n        sum=$(( $sum + $prod ))\n    done\n    echo $sum",
    "    local input=$1\n    local sum=0\n    local product=1\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    for (( i=1; i<=$input; i++ ))\n    do\n        for (( j=1; j<=$i; j++ ))\n        do\n            for (( k=1; k<=$j; k++ ))\n            do\n                temp=$(($i-$k+1))\n                product=$(($product*$temp))\n            done\n            sum=$(($sum+$product))\n            product=1\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "\tlocal n=$1\n\tlocal sum=0\n\tfor (( i=1; i<=$n; i++ ))\n\tdo\n\t\tfor (( j=1; j<=$n; j++ ))\n\t\tdo\n\t\t\tsum=$(( $sum + $(( $(( $i + $j )) * $(( $i - $j )) )) ))\n\t\tdone\n\tdone\n\techo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=$n; i++ ))\n    do\n        for (( j=0; j<=$n; j++ ))\n        do\n            sum=$(( sum + $(( nCr $n $i )) * $(( nCr $n $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++)); do\n        for ((j=1; j<=$n; j++)); do\n            sum=$((sum + bc -l <<< \"scale=0; ($i/$j)\"))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            product=1\n            for ((k=1; k<=j; k++))\n            do\n                product=$((product*(i-k+1)/k))\n            done\n            sum=$((sum+product))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=$n; i++ ))\n    do\n        for (( j=$i+1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $i * $j ))\n        done\n    done\n    echo $sum",
    "    sum=0\n    for (( i=0; i<$1; i++ ))\n    do\n        for (( j=0; j<$1; j++ ))\n        do\n            sum=$(( $sum
    "    local -i n=$1\n    local -i sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local -i ppp=0\n    local -i qqq=",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        for (( j=1; j<=$1; j++ ))\n        do\n            sum=$(( $sum + $i * $j ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    while [ $i -le $n ]\n    do\n        local j=0\n        while [ $j -le $i ]\n        do\n            local product=$(( $(( $(( $i - $j )) + 1 )) * $(( $(( $n - $i )) + 1 )) ))\n            sum=$(( $sum + $product ))\n            j=$(( $j + 1 ))\n        done\n        i=$(( $i + 1 ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$i; j++ ))\n        do\n            sum=$(( $sum + $(( $(( $(( $i - $j + 1 )) * $(( $i - $j + 1 )) )) / $(( $j * $(( $j - 1 )) )) )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    for ((i=1;i<=$1;i++))\n    do\n        for ((j=1;j<=$1;j++))\n        do\n            if [ $i -ne $j ]\n            then\n                echo $i $j\n            fi\n        done\n    done",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        local product=1\n        for (( j=1; j<=i; j++ ))\n        do\n            product=$(( product * (n-j+1) / j ))\n        done\n        sum=$(( sum + product ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++)); do\n        for ((j=1; j<=i; j++)); do\n            sum=$((sum + $((i-j+1)) * $((j+1))))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=n; i++ ))\n    do\n        for (( j=0; j<=n; j++ ))\n        do\n            sum=$(( sum
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<$n; i++ ))\n    do\n        for (( j=0; j<$n; j++ ))\n        do\n            sum=$(( $sum + $(binomial_coefficient $i $j) * $(binomial_coefficient $(( $n - $i - 1 )) $(( $n - $j - 1 ))) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=0; i<=$n; i++))\n    do\n        for ((j=0; j<=$n; j++))\n        do\n            sum=$((sum + i*j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=n; j++))\n        do\n            if [ $i -ne $j ]\n            then\n                sum=$((sum + $((binomial_coefficient $i $j)) * $((binomial_coefficient $j $i))))\n            fi\n        done\n    done\n    echo $sum",
    "    if [[ $1 -eq 0 ]]; then\n        echo \"0\"\n    else\n        echo \"`python -c \"print($1*($1+1)/2)\"`\"\n    fi",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            local product=$(( $i * $j ))\n            sum=$(( $sum + $product ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i = 1; i <= n; i++ )); do\n        for (( j = i + 1; j <= n; j++ )); do\n            sum=$(( sum + i * j ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*(j)))\n        done\n    done\n    echo $sum",
    "    if [ $# -ne 1 ]\n    then\n        echo \"Usage: $0 <integer>\"\n        exit 1\n    fi\n\n    if [ $1 -lt 0 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 0 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 1 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -gt 100 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 2 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 3 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 4 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 5 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 6 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 7 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 8 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 9 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 10 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 11 ]\n    then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $",
    "    local n=$1\n    local sum=0\n    for ((i=1;i<=n;i++))\n    do\n        for ((j=1;j<=i;j++))\n        do\n            sum=$((sum+i*j))\n        done\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        for (( j=1; j<=$1; j++ ))\n        do\n            sum=$(( $sum + $(( $i * $j )) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    while [ $i -le $n ]\n    do\n        j=1\n        while [ $j -le $i ]\n        do\n            sum=$(( $sum + $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $",
    "\tlocal n=$1\n\tlocal sum=0\n\tfor ((i=1;i<=n;i++))\n\tdo\n\t\tfor ((j=1;j<=i;j++))\n\t\tdo\n\t\t\tsum=$((sum+i*j))\n\t\tdone\n\tdone\n\techo $sum",
    "\tlocal n=$1\n\tlocal sum=0\n\tfor ((i=1;i<=n;i++))\n\tdo\n\t\tfor ((j=1;j<=i;j++))\n\t\tdo\n\t\t\tsum=$((sum+$(binomial_coefficient $i $j)))\n\t\tdone\n\tdone\n\techo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            sum=$((sum + $((i-j+1)) * $((j+1))))\n        done\n    done\n    echo $sum",
    "    n=$1\n    sum=0\n    for i in $(seq 1 $n); do\n        for j in $(seq 1 $i); do\n            sum=$((sum+$(binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=$n; i++ ))\n    do\n        for (( j=0; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(bc <<< \"scale=0; ($(binomial $i $j) * $(binomial $(( $n - $i )) $(( $n - $j ))))\" ) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local k=1\n    local product=1\n    while [ $i -le $n ]\n    do\n        j=1\n        while [ $j -le $i ]\n        do\n            k=1\n            product=1\n            while [ $k -le $j ]\n            do\n                product=$(( $product * $(( $i - $k + 1 )) / $k ))\n                k=$(( $k + 1 ))\n            done\n            sum=$(( $sum + $product ))\n            j=$(( $j + 1 ))\n        done\n        i=$(( $i + 1 ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            sum=$((sum + $i*$j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local product=0\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            for ((k=0; k<=j; k++))\n            do\n                for ((l=0; l<=k; l++))\n                do\n                    for ((m=0; m<=l; m++))\n                    do\n                        product=$(($(binomial_coefficient $i $j) * $(binomial_coefficient $j $k) * $(binomial_coefficient $k $l) * $(binomial_coefficient $l $m)))\n                        sum=$(($sum + $product))\n                    done\n                done\n            done\n        done\n    done\n    echo $sum",
    "    if [[ $1 -lt 0 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 0 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 1 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 2 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 3 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 4 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 5 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 6 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 7 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 8 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 9 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 10 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 11 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 12 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 13 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [[ $1 -eq 14 ]]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=n; j++))\n        do\n            sum=$((sum + (i*j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local product=1\n    while [ $i -le $n ]\n    do\n        while [ $j -le $i ]\n        do\n            product=$(( $product * $(( $i - $j + 1 )) ))\n            product=$(( $product / $j ))\n            j=$(( $j + 1 ))\n        done\n        sum=$(( $sum + $product ))\n        product=1\n        i=$(( $i + 1 ))\n        j=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local product=1\n    for ((i=1; i<=$n; i++))\n    do\n        product=$((product*i))\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum+j))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        local product=1\n        for (( j=1; j<=i; j++ ))\n        do\n            product=$(( product*j ))\n        done\n        sum=$(( sum+product ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(( $sum + $(bc <<< \"($i*$j)\") ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i * j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local k=1\n    local l=1\n    local m=1\n    local nCr=0\n    local nCr1=0\n    local nCr2=0\n    local nCr3=0\n    local nCr4=0\n    local nCr5=0\n    local nCr6=0\n    local nCr7=0\n    local nCr8=0\n    local nCr9=0\n    local nCr10=0\n    local nCr11=0\n    local nCr12=0\n    local nCr13=0\n    local nCr14=0\n    local nCr15=0\n    local nCr16=0\n    local nCr17=0\n    local nCr18=0\n    local nCr19=0\n    local nCr20=0\n    local nCr21=0\n    local nCr22=0\n    local nCr23=0\n    local nCr24=0\n    local nCr25=0\n    local nCr26=0\n    local nCr27=0\n    local nCr28=0\n    local nCr29=0\n    local nCr30=0\n    local nCr31=0\n    local nCr32=0\n    local nCr33=0\n    local nCr34=0\n    local nCr35=0\n    local nCr36=0\n    local nCr37=0\n    local nCr38=0\n    local nCr39=0\n    local nCr40=0\n    local nCr41=0\n    local nCr42=0\n    local nCr43=0\n    local nCr44=0\n    local nCr45=0\n    local nCr46=0\n    local nCr47=0\n    local nCr48=0\n    local nCr49=0\n    local nCr50=0\n    local nCr51=0\n    local nCr52=0\n    local nCr53=0\n    local nCr54=0\n    local nCr55=0\n    local nCr56=0\n    local nCr57=0\n    local nCr58=",
    "    local n=$1\n    local sum=0\n    local product=1\n    local i=0\n    local j=0\n    for ((i=0; i<=n; i++))\n    do\n        for ((j=0; j<=i; j++))\n        do\n            product=$((product*$((n-j))/$((i-j))))\n        done\n        sum=$((sum+product))\n        product=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1;i<=n;i++))\n    do\n        local product=1\n        for ((j=1;j<=i;j++))\n        do\n            product=$((product*j))\n        done\n        sum=$((sum+product))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=n; i++ ))\n    do\n        for (( j=1; j<=i; j++ ))\n        do\n            sum=$(( sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=0; i<=n; i++ ))\n    do\n        for (( j=0; j<=n; j++ ))\n        do\n            sum=$(( $sum
    "    for (( i=1; i<=$1; i++ ))\n    do\n        for (( j=1; j<=$1; j++ ))\n        do\n            if [ $i -ne $j ]\n            then\n                echo $i $j\n            fi\n        done\n    done",
    "    local n=$1\n    local sum=0\n    local i=1\n    local j=1\n    local product=1\n    while [ $i -le $n ]\n    do\n        while [ $j -le $i ]\n        do\n            product=$(( $product * $(( $i - $j + 1 )) / $j ))\n            j=$(( $j + 1 ))\n        done\n        sum=$(( $sum + $product ))\n        product=1\n        i=$(( $i + 1 ))\n        j=1\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=$n; i++))\n    do\n        for ((j=1; j<=$n; j++))\n        do\n            sum=$(($sum + $(binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local product=1\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            product=1\n            for ((k=1; k<=j; k++))\n            do\n                product=$((product*(i-k+1)/k))\n            done\n            sum=$((sum+product))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        for (( j=1; j<=$n; j++ ))\n        do\n            sum=$(($sum+$(binomial_coefficient $i $j)))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        for ((j=1; j<=i; j++))\n        do\n            sum=$((sum + (i-j+1)*(j) ))\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local eeee=0"
  ]
}