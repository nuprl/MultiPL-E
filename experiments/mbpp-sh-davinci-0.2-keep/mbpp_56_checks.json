{
  "name": "mbpp_56_checks",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to check if a given number is one less than twice its reverse.\n#\n# $1 is an integer\nchecks() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    checks \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"70\") = \"false\" ]]\n    [[ $(candidate \"23\") = \"false\" ]]\n    [[ $(candidate \"73\") = \"true\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  if [ $1 -lt 0 ]; then\n    echo \"False\"\n  else\n    # reverse the number\n    reverse=$(echo $1 | rev)\n    # check if the number is one less than twice its reverse\n    if [ $(( $1 + 1 )) -eq $(( $reverse * 2 )) ]; then\n      echo \"True\"\n    else\n      echo \"False\"\n    fi\n  fi",
    "  if [[ $1 =~ ^[0-9]+$ ]]; then\n    local reverse=$(echo $1 | rev)\n    if [[ $1 -eq $((2*$reverse-1)) ]]; then\n      echo \"True\"\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"Error: $1 is not an integer\"\n  fi",
    "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        if [[ $1 -eq $(($1/10)) ]]; then\n            echo \"True\"\n        else\n            if [[ $1 -eq $(($(rev <<< $1)/10)) ]]; then\n                echo \"True\"\n            else\n                echo \"False\"\n            fi\n        fi\n    else\n        echo \"False\"\n    fi",
    "    if [[ $1 -lt 0 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 0 ]]; then\n        echo \"True\"\n        return\n    fi\n    local num=$1\n    local rev=0\n    while [[ $num -gt 0 ]]; do\n        local digit=$((num % 10))\n        rev=$((rev * 10 + digit))\n        num=$((num / 10))\n    done\n    if [[ $((rev * 2 - 1)) -eq $1 ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "  if [ $# -ne 1 ]; then\n    echo \"Usage: $0 <integer>\"\n    exit 1\n  fi\n  if [ $1 -lt 0 ]; then\n    echo \"Usage: $0 <integer>\"\n    exit 1\n  fi\n  if [ $1 -eq 0 ]; then\n    echo \"True\"\n    exit 0\n  fi\n  reverse=0\n  n=$1\n  while [ $n -gt 0 ]; do\n    reverse=$((reverse * 10 + n % 10))\n    n=$((n / 10))\n  done\n  if [ $((reverse * 2 + 1)) -eq $1 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        reverse=$(echo $1 | rev)\n        if [[ $1 -eq $(($reverse * 2 - 1)) ]]; then\n            echo \"True\"\n        else\n            echo \"False\"\n        fi\n    else\n        echo \"Not a number\"\n    fi",
    "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        reverse=$(echo $1 | rev)\n        if [[ $(( $1 + 1 )) -eq $(( $reverse * 2 )) ]]; then\n            echo \"True\"\n        else\n            echo \"False\"\n        fi\n    else\n        echo \"Error: Invalid input\"\n    fi",
    "    local num=$1\n    local rev=$(rev $num)\n    local twice=$((2 * $rev))\n    local one_less=$((twice - 1))\n    if [ $num -eq $one_less ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "  if [ $1 -lt 10 ]; then\n    echo \"true\"\n    exit 0\n  fi\n  reverse=$(echo $1 | rev)\n  if [ $((reverse * 2 - 1)) -eq $1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "  if [[ $1 =~ ^[0-9]+$ ]]; then\n    if [[ $1 -eq $(($(rev <<< $1) - 1)) ]]; then\n      echo \"True\"\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"Error: $1 is not an integer\"\n  fi",
    "  if [[ $1 =~ ^[0-9]+$ ]]; then\n    reverse=$(echo $1 | rev)\n    if [[ $1 -eq $((2*$reverse-1)) ]]; then\n      echo \"True\"\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"False\"\n  fi",
    "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        if [[ $1 -eq $((2*$(rev <<< $1)-1)) ]]; then\n            echo \"True\"\n        else\n            echo \"False\"\n        fi\n    else\n        echo \"Not a number\"\n    fi",
    "  local num=$1\n  local rev=$(rev $num)\n  local twice=$((2 * $rev))\n  local one_less=$((twice - 1))\n  if [ $num -eq $one_less ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "  if [ $1 -lt 10 ]; then\n    echo \"true\"\n    exit 0\n  fi\n  reverse=$(echo $1 | rev)\n  if [ $((reverse + 1)) -eq $((1 * $1)) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
    "    if [ $# -ne 1 ]; then\n        echo \"Usage: $0 <integer>\"\n        exit 1\n    fi\n\n    if [ $1 -lt 0 ]; then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 0 ]; then\n        echo \"Error: $1 is not a positive integer\"\n        exit 1\n    fi\n\n    if [ $1 -eq 1 ]; then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $1 -eq 2 ]; then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 11 ]; then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $1 -eq 22 ]; then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 101 ]; then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $1 -eq 202 ]; then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 1001 ]; then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $1 -eq 2002 ]; then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 10001 ]; then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $1 -eq 20002 ]; then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 100001 ]; then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $1 -eq 200002 ]; then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 1000001 ]; then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $1 -eq 2000002 ]; then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 10000001 ]; then\n        echo \"True\"\n        exit 0\n    fi\n\n    if [ $1 -eq 20000002 ]; then\n        echo \"False\"\n        exit 0\n    fi\n\n    if [ $1 -eq 100000001 ]; then\n        echo \"True\"\n        exit 0\n",
    "    if [ $1 -lt 10 ]; then\n        echo \"true\"\n    else\n        reverse=$(echo $1 | rev)\n        if [ $((reverse+1)) -eq $((1*$1)) ]; then\n            echo \"true\"\n        else\n            echo \"false\"\n        fi\n    fi",
    "  if [[ $1 =~ ^[0-9]+$ ]]; then\n    reverse=$(echo $1 | rev)\n    if [ $1 -eq $((2*$reverse-1)) ]; then\n      echo \"True\"\n    else\n      echo \"False\"\n    fi\n  else\n    echo \"Please enter a valid integer\"\n  fi",
    "    if [[ $1 =~ ^-?[0-9]+$ ]]; then\n        reverse=$(echo $1 | rev)\n        if [ $(( $1 + 1 )) -eq $(( $reverse * 2 )) ]; then\n            echo \"True\"\n        else\n            echo \"False\"\n        fi\n    else\n        echo \"Invalid input\"\n    fi",
    "    if [ $# -ne 1 ]; then\n        echo \"Usage: $0 <number>\"\n        exit 1\n    fi\n    if [ $1 -lt 0 ]; then\n        echo \"Usage: $0 <number>\"\n        exit 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo \"true\"\n        exit 0\n    fi\n    reverse=$(echo $1 | rev)\n    if [ $1 -eq $(($reverse * 2 - 1)) ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    if [ $# -ne 1 ]; then\n        echo \"Usage: $0 <integer>\"\n        exit 1\n    fi\n    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: $0 <integer>\"\n        exit 1\n    fi\n    if [ $1 -lt 0 ]; then\n        echo \"Usage: $0 <integer>\"\n        exit 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo \"True\"\n        exit 0\n    fi\n    reverse=$(echo $1 | rev)\n    if [ $1 -eq $((2*$reverse-1)) ]; then\n        echo \"True\"\n        exit 0\n    else\n        echo \"False\"\n        exit 0\n    fi"
  ]
}