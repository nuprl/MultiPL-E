{
  "name": "mbpp_401_add_nested_tuples",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nadd_nested_tuples() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    add_nested_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"7 10\\n7 14\\n3 10\\n8 13\" ]]\n    [[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"9 12\\n9 16\\n5 12\\n10 15\" ]]\n    [[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"11 14\\n11 18\\n7 14\\n12 17\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a t1=($1)\n    local -a t2=($2)\n    local -a result=()\n    for ((i=0; i<${#t1[@]}; i++)); do\n        result[i]=$((t1[i] + t2[i]))\n    done\n    echo \"${result[@]}\"",
    "    local -a t1=($1)\n    local -a t2=($2)\n    local -a result=()\n    for ((i=0; i<${#t1[@]}; i++)); do\n        result[i]=$((t1[i] + t2[i]))\n    done\n    echo \"${result[@]}\"",
    "  local t1=\"$1\"\n  local t2=\"$2\"\n  local result=\"\"\n  local i=0\n  for v1 in $t1; do\n    local v2=$(echo \"$t2\" | cut -d' ' -f $((i+1)))\n    local sum=$((v1 + v2))\n    result=\"$result $sum\"\n    i=$((i+1))\n  done\n  echo \"$result\"",
    "    local -a a=($1)\n    local -a b=($2)\n    local -a c=()\n    for ((i=0; i<${#a[@]}; i++)); do\n        c[i]=$((a[i] + b[i]))\n    done\n    echo \"${c[@]}\"",
    "  local -a tuple1=($1)\n  local -a tuple2=($2)\n  local -a result=()\n  for ((i=0; i<${#tuple1[@]}; i++)); do\n    result[i]=$((tuple1[i] + tuple2[i]))\n  done\n  echo \"${result[@]}\"",
    "  local -a t1=($1)\n  local -a t2=($2)\n  local -a result=()\n  for ((i=0; i<${#t1[@]}; i++)); do\n    result[$i]=$((${t1[$i]} + ${t2[$i]}))\n  done\n  echo ${result[@]}",
    "  local tuple1=\"$1\"\n  local tuple2=\"$2\"\n  local result=\"\"\n\n  for i in $(seq 1 $(echo \"$tuple1\" | wc -w)); do\n    local element1=$(echo \"$tuple1\" | cut -d' ' -f$i)\n    local element2=$(echo \"$tuple2\" | cut -d' ' -f$i)\n    local sum=$(($element1 + $element2))\n    result=\"$result $sum\"\n  done\n\n  echo \"$result\"",
    "  local -n _tuple1=$1\n  local -n _tuple2=$2\n  local -a _result=()\n  for ((i=0; i<${#_tuple1[@]}; i++)); do\n    _result[i]=$((_tuple1[i] + _tuple2[i]))\n  done\n  echo \"${_result[@]}\"",
    "    local -a a\n    local -a b\n    local -a c\n    local -a d\n    local -a e\n    local -a f\n    local -a g\n    local -a h\n    local -a i\n    local -a j\n    local -a k\n    local -a l\n    local -a m\n    local -a n\n    local -a o\n    local -a p\n    local -a q\n    local -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a aa\n    local -a ab\n    local -a ac\n    local -a ad\n    local -a ae\n    local -a af\n    local -a ag\n    local -a ah\n    local -a ai\n    local -a aj\n    local -a ak\n    local -a al\n    local -a am\n    local -a an\n    local -a ao\n    local -a ap\n    local -a aq\n    local -a ar\n    local -a as\n    local -a at\n    local -a au\n    local -a av\n    local -a aw\n    local -a ax\n    local -a ay\n    local -a az\n    local -a ba\n    local -a bb\n    local -a bc\n    local -a bd\n    local -a be\n    local -a bf\n    local -a bg\n    local -a bh\n    local -a bi\n    local -a bj\n    local -a bk\n    local -a bl\n    local -a bm\n    local -a bn\n    local -a bo\n    local -a bp\n    local -a bq\n    local -a br\n    local -a bs\n    local -a bt\n    local -a bu\n    local -a bv\n    local -a bw\n    local -a bx\n    local -a by\n    local -a bz\n    local -a ca\n    local -a cb\n    local -a cc\n   ",
    "    local -a tuple1=($1)\n    local -a tuple2=($2)\n    local -a result=()\n    for ((i=0; i<${#tuple1[@]}; i++)); do\n        result[i]=$((${tuple1[i]} + ${tuple2[i]}))\n    done\n    echo \"${result[@]}\"",
    "    local t1=($1)\n    local t2=($2)\n    local len=${#t1[@]}\n    local i\n    local result\n    for ((i=0; i<len; i++)); do\n        result+=\"$((t1[i] + t2[i])) \"\n    done\n    echo \"$result\"",
    "    local -n t1=$1\n    local -n t2=$2\n    local -a res=()\n    for ((i = 0; i < ${#t1[@]}; i++)); do\n        res+=(\"$((t1[i] + t2[i]))\")\n    done\n    echo \"${res[@]}\"",
    "    local -n t1=$1\n    local -n t2=$2\n    local -a result=()\n    for ((i=0; i<${#t1[@]}; i++)); do\n        result+=($((${t1[$i]} + ${t2[$i]})))\n    done\n    echo \"${result[@]}\"",
    "    local -a t1=($1)\n    local -a t2=($2)\n    local -a result=()\n    for ((i=0; i<${#t1[@]}; i++)); do\n        result[i]=$((t1[i] + t2[i]))\n    done\n    echo \"${result[@]}\"",
    "  local -a t1=($1)\n  local -a t2=($2)\n  local -a result=()\n  for ((i=0; i<${#t1[@]}; i++)); do\n    result[i]=$((t1[i] + t2[i]))\n  done\n  echo \"${result[@]}\"",
    "    local -a t1=($1)\n    local -a t2=($2)\n    local -a result=()\n    for ((i=0; i<${#t1[@]}; i++)); do\n        result[$i]=$((${t1[$i]} + ${t2[$i]}))\n    done\n    echo ${result[@]}",
    "    local tuple1=\"$1\"\n    local tuple2=\"$2\"\n    local result=\"\"\n    local i=0\n\n    while [ $i -lt ${#tuple1[@]} ]; do\n        result+=\"$((${tuple1[$i]} + ${tuple2[$i]})) \"\n        i=$((i+1))\n    done\n\n    echo \"$result\"",
    "    local -a t1=($1)\n    local -a t2=($2)\n    local -a res=()\n    for ((i=0; i<${#t1[@]}; i++)); do\n        res[i]=$((${t1[i]} + ${t2[i]}))\n    done\n    echo \"${res[@]}\"",
    "  local -n t1=$1\n  local -n t2=$2\n  local result=()\n  for ((i=0; i<${#t1[@]}; i++)); do\n    result+=($((${t1[$i]} + ${t2[$i]})))\n  done\n  echo \"${result[@]}\"",
    "  local tuple1=\"$1\"\n  local tuple2=\"$2\"\n  local result=\"\"\n  local i=0\n  for element1 in $tuple1; do\n    local element2=$(echo $tuple2 | cut -d ' ' -f $((i+1)))\n    local sum=$((element1 + element2))\n    result=\"$result $sum\"\n    i=$((i+1))\n  done\n  echo $result"
  ]
}