{
  "name": "mbpp_167_next_power_of_2",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find the smallest power of 2 greater than or equal to n.\n#\n# $1 is an integer\nnext_power_of_2() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    next_power_of_2 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"5\") = \"8\" ]]\n    [[ $(candidate \"17\") = \"32\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p*2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p*2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $((2**(($(echo \"l($1)/l(2)\" | bc -l | cut -d'.' -f1)+1))))\n    fi",
    "    local n=$1\n    local i=1\n    while [ $((i*2)) -le $n ]; do\n        i=$((i*2))\n    done\n    echo $i",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p*2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]\n    do\n        p=$((p*2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local i=1\n    while [ $i -lt $n ]; do\n        i=$((i * 2))\n    done\n    echo $i",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local p=1\n    while [ $p -lt $n ]; do\n        p=$((p * 2))\n    done\n    echo $p",
    "    local n=$1\n    local i=1\n    while [ $i -lt $n ]; do\n        i=$((i*2))\n    done\n    echo $i",
    "    local n=$1\n    local i=1\n    while [ $i -lt $n ]; do\n        i=$((i*2))\n    done\n    echo $i",
    "    local n=$1\n    local power=1\n    while [ $power -lt $n ]; do\n        power=$((power * 2))\n    done\n    echo $power"
  ]
}