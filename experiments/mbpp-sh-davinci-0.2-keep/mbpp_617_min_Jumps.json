{
  "name": "mbpp_617_min_Jumps",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local -a jumps=($(for ((i=0; i<n; i++)); do echo 0; done))\n    local -a path=($(for ((i=0; i<n; i++)); do echo 0; done))\n    local -a result=($(for ((i=0; i<n; i++)); do echo 0; done))\n    local -a stack=($(for ((i=0; i<n; i++)); do echo 0; done))\n    local -a visited=($(for ((i=0; i<n; i++)); do echo 0; done))\n    local -a queue=($(for ((i=0; i<n; i++)); do echo 0; done))\n    local -a queue_index=($(for ((i=0; i<n; i++)); do echo 0; done))\n    local -a queue_front=0\n    local -a queue_rear=0\n    local -a stack_top=0\n    local -a stack_bottom=0\n    local -a stack_index=0\n    local -a stack_index_top=0\n    local -a stack_index_bottom=0\n    local -a stack_path_index=0\n    local -a stack_path_index_top=0\n    local -a stack_path_index_bottom=0\n    local -a stack_path_index_top_prev=0\n    local -a stack_path_index_bottom_prev=0\n    local -a stack_path_index_top_prev_prev=0\n    local -a stack_path_index_bottom_prev_prev=0\n    local -a stack_path_index_top_prev_prev_prev=0\n    local -a stack_path_index_bottom_prev_prev_prev=0\n    local -a stack_path_index_top_prev_prev_prev_prev=0\n    local -a stack_path_index_bottom_prev_prev_prev_prev=0\n    local -a stack_path_index_top_prev_prev_prev_prev_prev=0\n   ",
    "    # Write your code here\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    local max_reach=0\n    local steps=0\n    local flag=0\n    local temp=0\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -ge $n ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        j=$((i+1))\n        while [ $j -le $max_reach ]\n        do\n            if [ $j -eq $n ]\n            then\n                flag=1\n                break\n            fi\n            if [ $((arr[j]+j)) -gt $temp ]\n            then\n                temp=$((arr[j]+j))\n                steps=$j\n            fi\n            j=$((j+1))\n        done\n        if [ $flag -eq 1 ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        jumps=$((jumps+1))\n        i=$steps\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local d=$3\n    local i=0\n    local j=0\n    local jumps=0\n    local flag=0\n    local temp=0\n    local max=0\n    local max_index=0\n    local min_jumps=0\n\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        max=0\n        max_index=0\n        for (( j=i+1; j<=i+arr[i] && j<n; j++ ))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                flag=1\n                break\n            fi\n            if [ ${arr[j]} -gt $max ]\n            then\n                max=${arr[j]}\n                max_index=$j\n            fi\n        done\n        if [ $flag -eq 1 ]\n        then\n            break\n        fi\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "    local input=$1\n    local target=$2\n    local jumps=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n   ",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]\n        then\n            echo $((jumps+1))\n            return\n        fi\n        if [ ${arr[i+2]} -eq 0 ]\n        then\n            i=$((i+2))\n        else\n            i=$((i+1))\n        fi\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local d=$2\n    local n=${#arr[@]}\n    local dp=( $(for ((i=0; i<n; i++)); do echo 0; done) )\n    dp[0]=0\n    for ((i=1; i<n; i++)); do\n        dp[i]=$((2**31-1))\n        for ((j=0; j<i; j++)); do\n            if ((arr[j]+j>=i)); then\n                if ((dp[j]+1<dp[i])); then\n                    dp[i]=$((dp[j]+1))\n                fi\n            fi\n        done\n    done\n    if ((dp[n-1]==2**31-1)); then\n        echo -1\n    else\n        echo ${dp[n-1]}\n    fi",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    local max_reach=0\n    local steps=0\n    for ((i=0; i<n; i++)); do\n        max_reach=${arr[$i]}+$i\n        if ((max_reach>jumps)); then\n            jumps=$max_reach\n        fi\n        if ((i==steps)); then\n            ((j++))\n            steps=$jumps\n        fi\n    done\n    echo $j",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    local flag=0\n\n    while [ $max_reach -lt $n ]\n    do\n        jumps=$((jumps+1))\n        max_reach=$i\n        for ((i=0; i<=max_reach; i++))\n        do\n            steps=$((steps+arr[i]))\n            if [ $steps -eq $2 ]\n            then\n                flag=1\n                break\n            fi\n        done\n        if [ $flag -eq 1 ]\n        then\n            break\n        fi\n    done\n    echo $jumps",
    "  local list=($1)\n  local len=${#list[@]}\n  local d=$2\n  local jumps=0\n  local i=0\n  local x=0\n  local y=0\n  while [ $i -lt $len ]\n  do\n    x=$(($x + ${list[$i]}))\n    y=$(($y + ${list[$i+1]}))\n    if [ $x -eq $d ] && [ $y -eq 0 ]\n    then\n      echo $jumps\n      return\n    fi\n    i=$(($i + 2))\n    jumps=$(($jumps + 1))\n  done\n  echo -1",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local d=$((n-1))\n    local i=0\n    local j=0\n    local jumps=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $d ]\n        then\n            flag=1\n            break\n        fi\n        if [ $((i+arr[i])) -gt $d ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            i=$((i+arr[i]))\n            jumps=$((jumps+1))\n        fi\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo $jumps\n    else\n        echo -1\n    fi",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local target=$2\n    local count=0\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n    local max=0\n    local max_index=0\n    local temp=0\n    local temp_index=0\n    local temp_count=0\n    local temp_flag=0\n    local temp_max=0\n    local temp_max_index=0\n    local temp_i=0\n    local temp_j=0\n    local temp_k=0\n    local temp_arr=()\n    local temp_arr_index=0\n    local temp_arr_len=0\n    local temp_arr_flag=0\n    local temp_arr_max=0\n    local temp_arr_max_index=0\n    local temp_arr_i=0\n    local temp_arr_j=0\n    local temp_arr_k=0\n    local temp_arr_count=0\n    local temp_arr_flag=0\n    local temp_arr_temp=0\n    local temp_arr_temp_index=0\n    local temp_arr_temp_count=0\n    local temp_arr_temp_flag=0\n    local temp_arr_temp_max=0\n    local temp_arr_temp_max_index=0\n    local temp_arr_temp_i=0\n    local temp_arr_temp_j=0\n    local temp_arr_temp_k=0\n    local temp_arr_temp_arr=()\n    local temp_arr_temp_arr_index=0\n    local temp_arr_temp_arr_len=0\n    local temp_arr_temp_arr_flag=0\n    local temp_arr_temp_arr_max=0\n    local temp_arr_temp_arr_max_index=0\n    local temp_arr_temp_arr_i=0\n    local temp_arr_temp_arr_j=0\n    local temp_arr_temp_arr_k=0\n    local temp_arr_temp_arr_count=0\n    local temp_arr_temp_arr_",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local maxReach=0\n    local steps=0\n    while ((i < n))\n    do\n        if ((maxReach < i))\n        then\n            jumps=$((jumps + 1))\n            maxReach=$steps\n        fi\n        steps=$((steps + arr[i]))\n        ((i++))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local -a dp\n    for ((i=0; i<n; i++)); do\n        dp[i]=$((2**32-1))\n    done\n    dp[0]=0\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] + j >= i)); then\n                dp[i]=$((dp[i] < dp[j] + 1 ? dp[i] : dp[j] + 1))\n            fi\n        done\n    done\n    echo ${dp[n-1]}",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$steps\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    local x=$2\n    while ((i < n))\n    do\n        max_reach=$((i + arr[i]))\n        if ((max_reach >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach + 1))\n        while ((steps <= n - 1 && steps <= max_reach + arr[steps]))\n        do\n            steps=$((steps + 1))\n        done\n        jumps=$((jumps + 1))\n        i=$((steps - 1))\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local steps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        steps=$((arr[i]))\n        if [ $steps -eq 0 ]\n        then\n            echo \"Cannot reach the end\"\n            break\n        fi\n        local max_reach=$((i+steps))\n        local max_reach_index=$i\n        for ((j=$i+1; j<=$((i+steps)); j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                max_reach_index=$j\n                break\n            fi\n            if [ $((arr[j]+j)) -gt $max_reach ]\n            then\n                max_reach=$((arr[j]+j))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return 0\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return 0\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        for (( j=i+1; j<=max_reach && j<n; j++ ))\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local min=0\n  local jumps=0\n  local temp=0\n  local flag=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]\n    then\n      echo $jumps\n      return\n    fi\n    min=$((i+1))\n    for (( j=$((i+1)); j<=$((i+arr[i])); j++ ))\n    do\n      if [ $j -eq $((n-1)) ]\n      then\n        jumps=$((jumps+1))\n        flag=1\n        break\n      fi\n      if [ $((arr[j]+j)) -gt $((arr[min]+min)) ]\n      then\n        min=$j\n      fi\n    done\n    if [ $flag -eq 1 ]\n    then\n      echo $jumps\n      return\n    fi\n    jumps=$((jumps+1))\n    i=$min\n  done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo \"$jumps\"\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            i=$((i+arr[i]))\n            ((jumps++))\n        fi\n    done",
    "  local -n arr=$1\n  local -i n=$2\n  local -i i=0\n  local -i jumps=0\n  while ((i < n))\n  do\n    if ((arr[i] == 0))\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if ((i + arr[i] >= n))\n    then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local -i max_reach=0\n    local -i steps=0\n    local -i j=i+1\n    while ((j <= i + arr[i]))\n    do\n      if ((j == n))\n      then\n        jumps=$((jumps + 1))\n        return\n      fi\n      if ((j + arr[j] > max_reach))\n      then\n        max_reach=$((j + arr[j]))\n        steps=$((j - i))\n      fi\n      j=$((j + 1))\n    done\n    jumps=$((jumps + 1))\n    i=$((i + steps))\n  done\n  echo $jumps",
    "  local -n list=$1\n  local -i n=$2\n  local -i i=0\n  local -i jumps=0\n  local -i maxReach=0\n  local -i steps=0\n  local -i maxSteps=0\n  while (( i < n ))\n  do\n    maxSteps=$(( maxSteps + list[i] ))\n    if (( maxSteps == n-1 ))\n    then\n      (( jumps++ ))\n      break\n    fi\n    if (( maxSteps > n-1 ))\n    then\n      (( jumps++ ))\n      break\n    fi\n    if (( maxSteps > maxReach ))\n    then\n      maxReach=$maxSteps\n      (( jumps++ ))\n    fi\n    (( i++ ))\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local -i n=$2\n    local -i i j k\n    local -i dp=()\n    for ((i=0; i<n; i++)); do\n        dp[i]=${arr[i]}\n    done\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((dp[j] != -1 && j + dp[j] >= i)); then\n                if ((dp[i] == -1 || dp[i] > dp[j] + 1)); then\n                    dp[i]=$((dp[j] + 1))\n                fi\n            fi\n        done\n    done\n    echo ${dp[n-1]}",
    "    local -n arr=$1\n    local n=$2\n    local -a dp\n    dp[0]=0\n    for ((i = 1; i <= n; i++)); do\n        dp[i]=${arr[i]}\n        for ((j = 0; j < i; j++)); do\n            if [[ $((i - j)) -le ${arr[j]} ]]; then\n                dp[i]=$((${dp[j]} + 1))\n                break\n            fi\n        done\n    done\n    echo ${dp[n]}",
    "    local -n arr=$1\n    local n=$2\n    local -a dp\n    dp[0]=0\n    for ((i = 1; i <= n; i++)); do\n        dp[i]=${arr[i]}\n        for ((j = 0; j < i; j++)); do\n            if ((arr[j] >= i - j)); then\n                dp[i]=$((dp[j] + 1 < dp[i] ? dp[j] + 1 : dp[i]))\n            fi\n        done\n    done\n    echo ${dp[n]}",
    "    local -n arr=$1\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n    local -i maxReach=0\n    local -i steps=0\n    local -i flag=0\n    while [[ $i -lt $n ]]; do\n        maxReach=$((i + arr[i]))\n        if [[ $maxReach -eq $n ]]; then\n            jumps=$((jumps + 1))\n            flag=1\n            break\n        fi\n        steps=$((maxReach - i))\n        while [[ $steps -gt 0 ]]; do\n            if [[ $((i + steps)) -eq $n ]]; then\n                jumps=$((jumps + 1))\n                flag=1\n                break\n            fi\n            if [[ $((i + steps)) -gt $maxReach ]]; then\n                maxReach=$((i + steps))\n            fi\n            steps=$((steps - 1))\n        done\n        if [[ $flag -eq 1 ]]; then\n            break\n        fi\n        jumps=$((jumps + 1))\n        i=$maxReach\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            flag=1\n        fi\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -gt $((n-1)) ]\n        then\n            max_reach=$((n-1))\n        fi\n        steps=$((max_reach-i))\n        for ((j=$i+1; j<=$max_reach; j++))\n        do\n            if [ ${arr[j]} -gt $steps ]\n            then\n                steps=${arr[j]}\n                max_reach=$j\n            fi\n        done\n        i=$max_reach\n        jumps=$((jumps+1))\n        if [ $flag -eq 1 ]\n        then\n            break\n        fi\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            i=$((i+arr[i]))\n            jumps=$((jumps+1))\n        fi\n    done",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[$i]))\n        local steps=$arr[$i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[$i])) ]\n        do\n            if [ $((j+arr[$j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[$j]))\n                steps=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$steps\n    done",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo $1\n    echo $2",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] + i >= n-1 ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for (( j=i+1; j<=i+arr[i]; j++ ))\n        do\n            if (( arr[j] + j > max ))\n            then\n                max=$(( arr[j] + j ))\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$(( jumps + 1 ))\n    done\n    echo $jumps",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo $1\n    echo $2",
    "  local -n arr=$1\n  local n=$2\n  local jumps=0\n  local i=0\n  while [[ $i -lt $n ]]; do\n    if [[ ${arr[$i]} -eq 0 ]]; then\n      echo \"Invalid input\"\n      return\n    fi\n    if [[ $i -eq $((n-1)) ]]; then\n      jumps=$((jumps+1))\n      break\n    fi\n    if [[ $i -lt $((n-1)) && $i -eq $((n-2)) ]]; then\n      jumps=$((jumps+1))\n      break\n    fi\n    local max=${arr[$i]}\n    local max_index=$i\n    for ((j=$((i+1)); j<=$((i+arr[$i])); j++)); do\n      if [[ $j -lt $n && $max -lt ${arr[$j]} ]]; then\n        max=${arr[$j]}\n        max_index=$j\n      fi\n    done\n    jumps=$((jumps+1))\n    i=$max_index\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n - 1 ))\n        then\n            (( jumps++ ))\n            break\n        fi\n        local max=0\n        local max_i=0\n        local j=1\n        while (( j <= arr[i] ))\n        do\n            if (( arr[i + j] + j > max ))\n            then\n                max=$(( arr[i + j] + j ))\n                max_i=$(( i + j ))\n            fi\n            (( j++ ))\n        done\n        (( jumps++ ))\n        i=$max_i\n    done\n    echo $jumps",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"No jumps required\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        if [ $((i+arr[i])) -ge $((n-1)) ]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j=1; j<=arr[i]; j++)); do\n            if [ ${arr[$((i+j))]} -gt $max ]; then\n                max=${arr[$((i+j))]};\n                max_index=$((i+j));\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "  local -n arr=\"$1\"\n  local n=\"$2\"\n  local i=0\n  local j=0\n  local jumps=0\n  local min_jumps=0\n  local min_jumps_index=0\n  local min_jumps_value=0\n  local max_jumps=0\n  local max_jumps_index=0\n  local max_jumps_value=0\n  local max_jumps_value_index=0\n  local max_jumps_value_index_value=0\n  local max_jumps_value_index_value_index=0\n  local max_jumps_value_index_value_index_value=0\n  local max_jumps_value_index_value_index_value_index=0\n  local max_jumps_value_index_value_index_value_index_value=0\n  local max_jumps_value_index_value_index_value_index_value_index=0\n  local max_jumps_value_index_value_index_value_index_value_index_value=0\n  local max_jumps_value_index_value_index_value_index_value_index_value_index=0\n  local max_jumps_value_index_value_index_value_index_value_index_value_index_value=0\n  local max_jumps_value_index_value_index_value_index_value_index_value_index_value_index=0\n  local max_jumps_value_index_value_index_value_index_value_index_value_index_value_index_value=0\n  local max_jumps_value_index_value_index_value_index_value_index_value_index_value_index_value_index=0\n  local max_jumps_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value=0\n  local max_jumps_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index=0\n  local max_jumps_value",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Invalid input\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]; then\n      echo $jumps\n      return\n    fi\n    if [ $i -eq $((n-2)) ]; then\n      jumps=$((jumps+1))\n      echo $jumps\n      return\n    fi\n    local max=0\n    local max_i=0\n    for j in $(seq $((i+1)) $((i+arr[$i]))); do\n      if [ $j -gt $((n-1)) ]; then\n        break\n      fi\n      if [ ${arr[$j]} -gt $max ]; then\n        max=${arr[$j]}\n        max_i=$j\n      fi\n    done\n    i=$max_i\n    jumps=$((jumps+1))\n  done",
    "    local -n arr=$1\n    local n=$2\n    local i\n    local j\n    local min\n    local dp=()\n\n    for ((i=0; i<n; i++)); do\n        dp[i]=${arr[i]}\n    done\n\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] + j >= i)); then\n                if ((dp[i] > dp[j] + 1)); then\n                    dp[i]=$((dp[j] + 1))\n                fi\n            fi\n        done\n    done\n\n    echo ${dp[n-1]}",
    "    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((i+arr[$i])) ]; then\n            jumps=$((jumps+1))\n            i=$((i+arr[$i]))\n        else\n            local -i max=0\n            local -i max_index=0\n            for ((j=1; j<=${arr[$i]}; j++)); do\n                if [ $((i+j+arr[i+j])) -gt $max ]; then\n                    max=$((i+j+arr[i+j]))\n                    max_index=$((i+j))\n                fi\n            done\n            jumps=$((jumps+1))\n            i=$max_index\n        fi\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        local j=$((i+1))\n        while [ $j -le $max_reach ]\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$max_reach_index\n    done",
    "\t# Write your code here\n\tlocal -n arr=$1\n\tlocal n=$2\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal count=0\n\tlocal flag=0\n\tlocal jump=0\n\tlocal max=0\n\tlocal max_index=0\n\tlocal sum=0\n\tlocal sum_index=0\n\tlocal temp=0\n\tlocal temp_index=0\n\tlocal temp_sum=0\n\tlocal temp_sum_index=0\n\tlocal temp_max=0\n\tlocal temp_max_index=0\n\tlocal temp_flag=0\n\tlocal temp_jump=0\n\tlocal temp_count=0\n\tlocal temp_i=0\n\tlocal temp_j=0\n\tlocal temp_k=0\n\tlocal temp_arr=()\n\tlocal temp_arr_index=0\n\tlocal temp_arr_count=0\n\tlocal temp_arr_flag=0\n\tlocal temp_arr_jump=0\n\tlocal temp_arr_max=0\n\tlocal temp_arr_max_index=0\n\tlocal temp_arr_sum=0\n\tlocal temp_arr_sum_index=0\n\tlocal temp_arr_i=0\n\tlocal temp_arr_j=0\n\tlocal temp_arr_k=0\n\tlocal temp_arr_count=0\n\tlocal temp_arr_flag=0\n\tlocal temp_arr_jump=0\n\tlocal temp_arr_max=0\n\tlocal temp_arr_max_index=0\n\tlocal temp_arr_sum=0\n\tlocal temp_arr_sum_index=0\n\tlocal temp_arr_i=0\n\tlocal temp_arr_j=0\n\tlocal temp_arr_k=0\n\tlocal temp_arr_count=0\n\tlocal temp_arr_flag=0\n\tlocal temp_arr_jump=0\n\tlocal temp_arr_max=0\n\tlocal temp_arr_max_index=0\n\tlocal temp_arr_sum=0\n\tlocal temp_arr_sum_index=0\n\tlocal temp_arr_i=0\n\tlocal temp_arr_j=0\n\tlocal temp_arr_k=",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$i\n        local j=$((i+1))\n        while [ $j -le $((i+arr[$i])) ]\n        do\n            if [ $((j+arr[$j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[$j]))\n            fi\n            j=$((j+1))\n        done\n        i=$max_reach\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    local min_jumps=0\n    local min_jumps_index=0\n    local max_reach=0\n    local steps=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            flag=1\n            break\n        fi\n        max_reach=$((i+arr[i]))\n        min_jumps=$((arr[i]+i))\n        min_jumps_index=$i\n        for ((j=i+1; j<=max_reach; j++))\n        do\n            steps=$((arr[j]+j))\n            if [ $steps -gt $min_jumps ]\n            then\n                min_jumps=$steps\n                min_jumps_index=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$min_jumps_index\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo $jumps\n    else\n        echo -1\n    fi",
    "    local list=$1\n    local len=$2\n    local jumps=0\n    local i=0\n    local pos=0\n    while [ $i -lt $len ]; do\n        if [ $pos -eq $((len-1)) ]; then\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_pos=0\n        local j=$((pos+1))\n        while [ $j -le $((pos+${list:$i:1})) ] && [ $j -lt $len ]; do\n            if [ $((j+${list:$j:1})) -gt $max ]; then\n                max=$((j+${list:$j:1}))\n                max_pos=$j\n            fi\n            j=$((j+1))\n        done\n        if [ $max_pos -eq 0 ]; then\n            echo -1\n            return\n        fi\n        pos=$max_pos\n        jumps=$((jumps+1))\n        i=$((i+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        if [ $i -lt $((n-2)) ]\n        then\n            if [ ${arr[$i+2]} -eq 0 ]\n            then\n                i=$((i+1))\n            else\n                i=$((i+2))\n            fi\n        else\n            i=$((i+1))\n        fi\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local target=$2\n    local len=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    while ((i < len))\n    do\n        max_reach=$((i + arr[i]))\n        if ((max_reach >= target))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach))\n        for ((j = i + 1; j <= max_reach; j++))\n        do\n            if ((j + arr[j] > steps))\n            then\n                steps=$((j + arr[j]))\n                steps_index=$j\n            fi\n        done\n        i=$steps_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -a list=($1)\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n    while [ $i -lt $n ]; do\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $((i+list[i])) -gt $((n-1)) ]; then\n            ((jumps++))\n            ((i++))\n        else\n            local -i max=0\n            local -i max_i=0\n            for ((j=i+1; j<=i+list[i]; j++)); do\n                if [ $((j+list[j])) -gt $max ]; then\n                    max=$((j+list[j]))\n                    max_i=$j\n                fi\n            done\n            i=$max_i\n            ((jumps++))\n        fi\n    done",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo $1\n    echo $2",
    "    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    while (( i < n )); do\n        if (( arr[i] == 0 )); then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n - 1 )); then\n            (( jumps++ ))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for (( j = 1; j <= arr[i]; j++ )); do\n            if (( arr[i + j] + j > max )); then\n                max=${arr[i + j]}\n                max_i=$j\n            fi\n        done\n        (( i += max_i ))\n        (( jumps++ ))\n    done\n    echo \"$jumps\"",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j=$i+1; j<=$((i+arr[$i])); j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i\n    local j\n    local jumps\n    local min\n    local temp\n    for ((i=0; i<n; i++)); do\n        jumps[$i]=$((2**32-1))\n    done\n    jumps[0]=0\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j]+j>=i)); then\n                temp=$((jumps[j]+1))\n                if ((temp<jumps[i])); then\n                    jumps[i]=$temp\n                fi\n            fi\n        done\n    done\n    echo ${jumps[$((n-1))]}",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "\tlocal -n arr=$1\n\tlocal n=$2\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal min_jumps=0\n\tlocal jumps=0\n\tlocal flag=0\n\tlocal min_index=0\n\tlocal max_reach=0\n\tlocal steps=0\n\tlocal temp=0\n\n\twhile [ $i -lt $n ]\n\tdo\n\t\tmax_reach=$((i+arr[i]))\n\t\tif [ $max_reach -ge $n ]\n\t\tthen\n\t\t\tmin_jumps=$((min_jumps+1))\n\t\t\tbreak\n\t\tfi\n\t\tmin_index=$i\n\t\tfor j in $(seq $((i+1)) $((i+arr[i])))\n\t\tdo\n\t\t\tif [ $((arr[j]+j)) -gt $((arr[min_index]+min_index)) ]\n\t\t\tthen\n\t\t\t\tmin_index=$j\n\t\t\tfi\n\t\tdone\n\t\ti=$min_index\n\t\tmin_jumps=$((min_jumps+1))\n\tdone\n\techo $min_jumps",
    "    local -a arr=($1)\n    local n=$2\n    local -i i=0\n    local -i jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if ((i + arr[i] >= n - 1))\n        then\n            jumps+=1\n            break\n        fi\n        local -i max=0\n        local -i max_index=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=j+arr[j]\n                max_index=j\n            fi\n        done\n        jumps+=1\n        i=max_index\n    done\n    echo \"$jumps\"",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return 0\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return 0\n        fi\n        local max_reach=$i\n        local j=$((i+1))\n        while [ $j -le $((i+arr[$i])) ]\n        do\n            if [ $((j+arr[$j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[$j]))\n            fi\n            j=$((j+1))\n        done\n        i=$max_reach\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max_reach))\n            then\n                max_reach=$((j + arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$((arr[i]))\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $((i + arr[i])) -ge $((n - 1)) ]; then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local max=0\n    local max_i=0\n    for ((j = i + 1; j <= i + arr[i]; j++)); do\n      if [ $((arr[j] + j)) -gt $max ]; then\n        max=$((arr[j] + j))\n        max_i=$j\n      fi\n    done\n    i=$max_i\n    jumps=$((jumps + 1))\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Cannot reach the end\"\n            return\n        fi\n        if [[ $i -eq $((n - 1)) ]]; then\n            jumps=$((jumps + 1))\n            return\n        fi\n        local max_reach=$((i + arr[$i]))\n        local max_index=$i\n        for ((j = i + 1; j <= max_reach; j++)); do\n            if [[ $((j + arr[$j])) -gt $max_reach ]]; then\n                max_reach=$((j + arr[$j]))\n                max_index=$j\n            fi\n        done\n        jumps=$((jumps + 1))\n        i=$max_index\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local d=$3\n    local jumps=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n   ",
    "    local -n arr=$1\n    local n=$2\n    local d=$3\n    local i=0\n    local j=0\n    local jumps=0\n    local min_jumps=0\n    local min_jumps_index=0\n    local min_jumps_index_prev=0\n    local min_jumps_index_prev_prev=0\n    local min_jumps_index_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_jumps_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local min_j",
    "    local -n arr=$1\n    local n=$2\n    local -i i j k\n    local -i dp=()\n    for ((i=0; i<n; i++)); do\n        dp[i]=${arr[i]}\n    done\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((dp[j] != -1 && j + arr[j] >= i)); then\n                if ((dp[i] == -1 || dp[i] > dp[j] + 1)); then\n                    dp[i]=dp[j] + 1\n                fi\n            fi\n        done\n    done\n    echo ${dp[n-1]}",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Cannot reach the end\"\n            return\n        fi\n        if [[ $i -eq $((n - 1)) ]]; then\n            echo \"Reached the end\"\n            return\n        fi\n        local max=0\n        local max_i=0\n        for ((j = 1; j <= ${arr[$i]}; j++)); do\n            if [[ $((i + j)) -lt $n ]]; then\n                if [[ $((arr[$((i + j))] + j)) -gt $max ]]; then\n                    max=$((arr[$((i + j))] + j))\n                    max_i=$((i + j))\n                fi\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps + 1))\n    done\n    echo \"Minimum jumps: $jumps\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local step=0\n    local max_reach=0\n    local next_reach=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -gt $((n-1)) ]\n        then\n            max_reach=$((n-1))\n        fi\n        next_reach=$i\n        for (( step=i+1; step<=max_reach; step++ ))\n        do\n            if [ $((step+arr[step])) -gt $next_reach ]\n            then\n                next_reach=$((step+arr[step]))\n            fi\n        done\n        i=$((next_reach))\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i j=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n    local -i flag=0\n\n    while [[ $i -lt $n ]]; do\n        max_reach=$((i + arr[i]))\n        if [[ $max_reach -eq $n-1 ]]; then\n            jumps=$((jumps + 1))\n            flag=1\n            break\n        fi\n        steps=$((max_reach + 1))\n        while [[ $steps -le $n && $steps -le $max_reach ]]; do\n            if [[ $arr[$steps] -eq 0 ]]; then\n                steps=$((steps + 1))\n                continue\n            fi\n            if [[ $arr[$steps] -eq 1 ]]; then\n                jumps=$((jumps + 1))\n                flag=1\n                break\n            fi\n            if [[ $arr[$steps] -gt $arr[$max_reach] ]]; then\n                max_reach=$steps\n            fi\n            steps=$((steps + 1))\n        done\n        if [[ $flag -eq 1 ]]; then\n            break\n        fi\n        i=$((i + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max=0\n        local max_index=0\n        local j=$((i+1))\n        while [ $j -le $((i+arr[$i])) ]\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$max_index\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i\n    local j\n    local jumps\n    local min_jumps\n\n    # Create a table to store results of subproblems\n    declare -a table\n    for ((i=0; i<n; i++)); do\n        table[$i]=0\n    done\n\n    # Minimum number of jumps to reach arr[n-1] from arr[0] is always arr[0]\n    table[0]=0\n\n    # Fill the table\n    for ((i=1; i<n; i++)); do\n        min_jumps=INT_MAX\n        for ((j=0; j<i; j++)); do\n            if ((i <= j + arr[j])) && ((table[j] != INT_MAX)); then\n                jumps=table[j] + 1\n                if ((jumps < min_jumps)); then\n                    min_jumps=$jumps\n                fi\n            fi\n        done\n        table[$i]=$min_jumps\n    done\n\n    echo ${table[$n-1]}",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jump=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        if [ $max_reach -lt $i ]\n        then\n            jump=$((jump+1))\n            max_reach=$steps\n        fi\n        steps=$((steps+arr[i]))\n        if [ $steps -eq $2 ]\n        then\n            flag=1\n            break\n        fi\n        i=$((i+1))\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo $jump\n    else\n        echo -1\n    fi",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jump=0\n    local i=0\n    local maxReach=0\n    local steps=0\n    while [ $i -lt $n ]\n    do\n        maxReach=$((i+arr[i]))\n        if [ $maxReach -ge $((n-1)) ]\n        then\n            jump=$((jump+1))\n            break\n        fi\n        steps=$((maxReach+1))\n        for ((j=i+1; j<=steps; j++))\n        do\n            if [ $((j+arr[j])) -gt $maxReach ]\n            then\n                maxReach=$((j+arr[j]))\n                jump=$((jump+1))\n            fi\n        done\n        i=$((i+1))\n    done\n    echo $jump",
    "    local -n arr=$1\n    local n=$2\n    local i j\n    local dp=()\n    for ((i=0; i<=n; i++)); do\n        dp[i]=$((i))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] >= i-j)); then\n                dp[i]=$((dp[i] < dp[j]+1 ? dp[i] : dp[j]+1))\n            fi\n        done\n    done\n    echo ${dp[n]}",
    "  local -n arr=$1\n  local len=$2\n  local i=0\n  local j=0\n  local jumps=0\n  while [ $i -lt $len ]\n  do\n    if [ $i -eq $((len-1)) ]\n    then\n      echo $jumps\n      return\n    fi\n    j=$((i+arr[i]))\n    if [ $j -gt $((len-1)) ]\n    then\n      echo -1\n      return\n    fi\n    i=$j\n    jumps=$((jumps+1))\n  done",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"",
    "    local -n arr=$1\n    local d=$2\n    local n=${#arr[@]}\n    local dp=( $(for i in $(seq 0 $((n-1))); do echo 0; done) )\n    dp[0]=${arr[0]}\n    for i in $(seq 1 $((n-1))); do\n        for j in $(seq 0 $((i-1))); do\n            if [ ${dp[j]} -ne 0 ] && [ $((dp[j]+arr[i])) -ge $d ]; then\n                dp[i]=$((dp[j]+arr[i]))\n                break\n            fi\n        done\n    done\n    echo ${dp[@]}",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j=1; j<=${arr[$i]}; j++)); do\n            if [ $((i+j)) -eq $((n-1)) ]; then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ $((i+j+arr[i+j])) -gt $max ]; then\n                max=$((i+j+arr[i+j]))\n                max_index=$((i+j))\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done",
    "    local -i x y=$2\n    local -i jumps=0\n    for x in $1; do\n        if (( x > y )); then\n            (( jumps += x / y ))\n            (( x %= y ))\n        fi\n        (( y -= x ))\n    done\n    (( jumps += y / x ))\n    echo $jumps",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i=0\n    local -i jumps=0\n    local -i x=$2\n    local -i y=0\n    local -i max_reach=0\n    local -i steps=0\n    local -i jump=0\n    local -i flag=0\n\n    while [ $y -lt $x ]\n    do\n        max_reach=$(( $y + ${list[$i]} ))\n        jump=$(( $i + 1 ))\n        for (( steps=i+1; steps<=n-1; steps++ ))\n        do\n            if [ $(( $steps + ${list[$steps]} )) -gt $max_reach ]\n            then\n                max_reach=$(( $steps + ${list[$steps]} ))\n                jump=$steps\n            fi\n        done\n        jumps=$(( $jumps + 1 ))\n        y=$max_reach\n        i=$jump\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n-1 ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for (( j = i + 1; j <= i + arr[i]; j++ ))\n        do\n            if (( j + arr[j] > max_reach ))\n            then\n                max_reach=$(( j + arr[j] ))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$(( jumps + 1 ))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -le $max_reach ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local -i i=0 j=0\n    local -i max_reach=0 step=0\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i + arr[i]))\n        if [ $max_reach -ge $((n - 1)) ]; then\n            ((step++))\n            break\n        fi\n        j=$((i + 1))\n        while [ $j -le $max_reach ]\n        do\n            if [ $((arr[j] + j)) -gt $((arr[max_reach] + max_reach)) ]; then\n                max_reach=$j\n            fi\n            ((j++))\n        done\n        ((i = max_reach))\n        ((step++))\n    done\n    echo $step",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Infinite\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_idx=0\n        for ((j=i+1; j<=i+${arr[$i]}; j++)); do\n            if [[ $j -eq $((n-1)) ]]; then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [[ ${arr[$j]} -gt $max ]]; then\n                max=${arr[$j]}\n                max_idx=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_idx\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n ))\n        then\n            (( jumps++ ))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for (( j = i + 1; j <= i + arr[i]; j++ ))\n        do\n            if (( j + arr[j] > max ))\n            then\n                max=$(( j + arr[j] ))\n                max_i=$j\n            fi\n        done\n        (( jumps++ ))\n        i=$max_i\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i j=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n    local -i jump=0\n    local -i flag=0\n\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i + arr[i]))\n        if [ $max_reach -ge $n ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        jump=$((arr[i]))\n        for ((j=i+1; j<=max_reach; j++))\n        do\n            if [ $((arr[j] + j)) -gt $jump ]\n            then\n                jump=$((arr[j] + j))\n                steps=$j\n            fi\n        done\n        jumps=$((jumps + 1))\n        i=$steps\n    done\n    echo $jumps",
    "    # Write your code here\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local temp=0\n    local min=0\n    local flag=0\n    local flag2=0\n    local flag3=0\n    local flag4=0\n    local flag5=0\n    local flag6=0\n    local flag7=0\n    local flag8=0\n    local flag9=0\n    local flag10=0\n    local flag11=0\n    local flag12=0\n    local flag13=0\n    local flag14=0\n    local flag15=0\n    local flag16=0\n    local flag17=0\n    local flag18=0\n    local flag19=0\n    local flag20=0\n    local flag21=0\n    local flag22=0\n    local flag23=0\n    local flag24=0\n    local flag25=0\n    local flag26=0\n    local flag27=0\n    local flag28=0\n    local flag29=0\n    local flag30=0\n    local flag31=0\n    local flag32=0\n    local flag33=0\n    local flag34=0\n    local flag35=0\n    local flag36=0\n    local flag37=0\n    local flag38=0\n    local flag39=0\n    local flag40=0\n    local flag41=0\n    local flag42=0\n    local flag43=0\n    local flag44=0\n    local flag45=0\n    local flag46=0\n    local flag47=0\n    local flag48=0\n    local flag49=0\n    local flag50=0\n    local flag51=0\n    local flag52=0\n    local flag53=0\n    local flag54=0\n    local flag55=0\n    local flag56=0\n    local flag57=0\n    local flag58=0\n    local flag59=0\n    local flag60=0\n    local flag61=0\n    local flag62=0\n    local flag63=0\n    local flag64=0\n    local flag65=0\n",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        local max=0\n        local j=$((i+1))\n        local k=$((i+arr[i]))\n        while [ $j -le $k ]\n        do\n            if [ $((arr[j]+j)) -gt $max ]\n            then\n                max=$((arr[j]+j))\n            fi\n            j=$((j+1))\n        done\n        i=$max\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local len=$2\n    local -i jumps=0\n    local -i i=0\n    local -i max=0\n    local -i steps=0\n\n    while (( i < len )); do\n        if (( arr[i] == 0 )); then\n            echo \"Not possible\"\n            return\n        fi\n\n        if (( i == len - 1 )); then\n            (( jumps++ ))\n            break\n        fi\n\n        max=i+1\n        steps=arr[i]\n        while (( steps > 0 )); do\n            if (( i + steps >= len )); then\n                (( jumps++ ))\n                break 2\n            fi\n\n            if (( arr[i+steps] > arr[max] )); then\n                max=i+steps\n            fi\n\n            (( steps-- ))\n        done\n\n        (( jumps++ ))\n        i=max\n    done\n\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            local max=0\n            local max_index=0\n            for ((j=i+1; j<=i+arr[i]; j++))\n            do\n                if [ $((j+arr[j])) -gt $max ]\n                then\n                    max=$((j+arr[j]))\n                    max_index=$j\n                fi\n            done\n            i=$max_index\n            ((jumps++))\n        fi\n    done",
    "    local -n arr=$1\n    local n=$2\n    local -a dp\n    dp[0]=0\n    for ((i=1; i<=n; i++)); do\n        dp[i]=$((2**32-1))\n        for ((j=0; j<i; j++)); do\n            if [ ${arr[j]} -ge $((i-j)) ] && [ ${dp[j]} -ne $((2**32-1)) ]; then\n                dp[i]=$((dp[j]+1))\n                break\n            fi\n        done\n    done\n    echo ${dp[n]}",
    "    local -a arr=($1)\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n    local -i curr_max=0\n    local -i next_max=0\n    local -i len=${#arr[@]}\n    while i < len-1\n    do\n        if [ $i -le $curr_max ]\n        then\n            next_max=$((next_max > i+arr[i] ? next_max : i+arr[i]))\n            if [ $i -eq $curr_max ]\n            then\n                jumps=$((jumps+1))\n                curr_max=$next_max\n            fi\n        fi\n        i=$((i+1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local d=$2\n    local len=${#arr[@]}\n    local i=0\n    local jumps=0\n    while (( i < len ))\n    do\n        if (( arr[i] >= d ))\n        then\n            echo $jumps\n            return\n        fi\n        (( i += arr[i] ))\n        (( jumps += 1 ))\n    done\n    echo -1",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"",
    "    local -n list=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    local min_jumps=0\n    local min_jumps_index=0\n\n    while [ $i -lt $n ]; do\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return 0\n        fi\n\n        min_jumps=${list[$i]}\n        min_jumps_index=$i\n\n        for ((j=$i+1; j<=$((i+min_jumps)); j++)); do\n            if [ $j -eq $((n-1)) ]; then\n                echo $((jumps+1))\n                return 0\n            fi\n\n            if [ ${list[$j]} -gt $min_jumps ]; then\n                min_jumps=${list[$j]}\n                min_jumps_index=$j\n            fi\n        done\n\n        jumps=$((jumps+1))\n        i=$min_jumps_index\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return 0\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            return 1\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local -a dp\n    dp[0]=0\n    for ((i=1; i<=n; i++)); do\n        dp[i]=$((2**31-1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j]+j>=i)); then\n                if ((dp[i]>dp[j]+1)); then\n                    dp[i]=$((dp[j]+1))\n                fi\n            fi\n        done\n    done\n    echo ${dp[n]}",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    local max_reach=0\n    local steps=0\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i + arr[i]))\n        if [ $max_reach -gt $((n - 1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$max_reach\n        for ((j = i + 1; j <= max_reach; j++))\n        do\n            if [ $((j + arr[j])) -gt $steps ]\n            then\n                steps=$((j + arr[j]))\n                max_reach=$steps\n            fi\n        done\n        i=$((i + 1))\n        jumps=$((jumps + 1))\n    fi\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            local max=0\n            local max_index=0\n            for ((j=i+1;j<=i+arr[i];j++))\n            do\n                if [ $((arr[j]+j)) -gt $max ]\n                then\n                    max=$((arr[j]+j))\n                    max_index=$j\n                fi\n            done\n            i=$max_index\n            ((jumps++))\n        fi\n    done",
    "  local -a arr=($1)\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]\n  do\n    if [ $i -eq $((n-1)) ]\n    then\n      echo $jumps\n      return\n    fi\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo \"Not possible\"\n      return\n    fi\n    local max_reach=$((i+arr[i]))\n    local steps=$arr[i]\n    local j=$((i+1))\n    while [ $j -lt $((i+arr[i])) ]\n    do\n      if [ $((j+arr[j])) -gt $max_reach ]\n      then\n        max_reach=$((j+arr[j]))\n        steps=$j\n      fi\n      j=$((j+1))\n    done\n    i=$steps\n    jumps=$((jumps+1))\n  done",
    "    local -a arr=($1)\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max=0\n        local max_i=0\n        for ((j=$i+1; j<=$((i+arr[$i])); j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps+1))\n    done",
    "  local -a arr=($1)\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $((i + arr[i])) -eq $n ]\n    then\n      jumps=$((jumps + 1))\n      break\n    fi\n    if [ $((i + arr[i])) -gt $n ]\n    then\n      i=$((i + 1))\n    else\n      i=$((i + arr[i]))\n      jumps=$((jumps + 1))\n    fi\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if ((arr[j] + j > max))\n            then\n                max=$((arr[j] + j))\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Invalid Input\"\n            return\n        fi\n        if (( arr[i] + i >= n-1 ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        local max=0\n        local j=i+1\n        local max_index=i\n        while (( j <= i + arr[i] ))\n        do\n            if (( arr[j] + j > max ))\n            then\n                max=$(( arr[j] + j ))\n                max_index=$j\n            fi\n            j=$(( j + 1 ))\n        done\n        i=$max_index\n        jumps=$(( jumps + 1 ))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ] && [ $j -lt $n ]; do\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=${arr[$i]}\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "  local -a arr=($1)\n  local n=${#arr[@]}\n  local jumps=0\n  local i=0\n  local max_reach=0\n  local steps=0\n  local target=$2\n\n  while [ $i -lt $n ]\n  do\n    max_reach=$((i + arr[i]))\n    if [ $max_reach -gt $target ]\n    then\n      echo $jumps\n      return\n    fi\n    steps=$((max_reach - i))\n    for ((j=i+1; j<=max_reach; j++))\n    do\n      if [ $((j + arr[j])) -gt $steps ]\n      then\n        steps=$((j + arr[j]))\n        i=$j\n      fi\n    done\n    jumps=$((jumps + 1))\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        i=$((i+steps))\n        jumps=$((jumps+1))\n    done",
    "  local -a arr=($1)\n  local n=${#arr[@]}\n  local jumps=0\n  local i=0\n  local max_reach=0\n  local steps=0\n  local target=$2\n  while [ $i -lt $n ]\n  do\n    max_reach=$((i + arr[i]))\n    if [ $max_reach -gt $target ]\n    then\n      echo $jumps\n      return\n    fi\n    steps=$((max_reach - i))\n    for ((j=i+1; j<=max_reach; j++))\n    do\n      if [ $((j + arr[j])) -gt $steps ]\n      then\n        steps=$((j + arr[j]))\n        i=$j\n      fi\n    done\n    jumps=$((jumps + 1))\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i]+i >= n-1))\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if ((arr[j]+j > max))\n            then\n                max=$((arr[j]+j))\n                max_index=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_index\n    done\n    echo $jumps",
    "  local -n arr=$1\n  local n=$2\n  local jumps=0\n  local i=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $((i + arr[i])) -ge $((n - 1)) ]; then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local max=0\n    local max_i=0\n    for j in $(seq $((i + 1)) $((i + arr[i]))); do\n      if [ $((arr[j] + j)) -gt $max ]; then\n        max=$((arr[j] + j))\n        max_i=$j\n      fi\n    done\n    i=$max_i\n    jumps=$((jumps + 1))\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$j\n            fi\n            j=$((j+1))\n        done\n        i=$steps\n        jumps=$((jumps+1))\n    done",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i jumps=0\n    local -i curr_max=0\n    local -i next_max=0\n    local -i end=$2\n    while i < n-1\n    do\n        if i + arr[i] > curr_max\n        then\n            curr_max=i+arr[i]\n        fi\n        if i == next_max\n        then\n            jumps+=1\n            next_max=curr_max\n        fi\n        if next_max >= end\n        then\n            break\n        fi\n        ((i++))\n    done\n    if next_max < end\n    then\n        echo \"Not possible\"\n    else\n        echo $jumps\n    fi",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local jumps=0\n    local flag=0\n    local max_reach=0\n    local steps=0\n\n    while [ $i -lt $len ]\n    do\n        max_reach=$i\n        steps=${arr[$i]}\n        if [ $steps -eq 0 ]\n        then\n            echo \"Cannot reach\"\n            break\n        fi\n        if [ $i -eq $((len-1)) ]\n        then\n            flag=1\n            break\n        fi\n        for ((j=i+1; j<=i+steps; j++))\n        do\n            if [ $j -eq $((len-1)) ]\n            then\n                i=$j\n                flag=1\n                break\n            fi\n            if [ $((arr[$j]+j)) -gt $max_reach ]\n            then\n                max_reach=$((arr[$j]+j))\n                steps=${arr[$j]}\n            fi\n        done\n        i=$max_reach\n        jumps=$((jumps+1))\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo $jumps\n    fi",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Invalid Input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        if [ $((i+arr[i])) -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            return\n        fi\n        local max=0\n        local max_index=0\n        local j=$((i+1))\n        while [ $j -le $((i+arr[i])) ]\n        do\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$max_index\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local step=0\n\n    while [[ $i -lt $n ]]\n    do\n        if [[ ${arr[$i]} -eq 0 ]]\n        then\n            echo \"Not possible\"\n            return\n        fi\n\n        if [[ $i -eq $((n-1)) ]]\n        then\n            return\n        fi\n\n        step=$((i+arr[i]))\n        if [[ $step -ge $((n-1)) ]]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n\n        local max=0\n        local j=$((i+1))\n        while [[ $j -le $step ]]\n        do\n            if [[ ${arr[$j]} -gt $max ]]\n            then\n                max=${arr[$j]}\n                i=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $((i+arr[i])) -ge $n ]; then\n      jumps=$((jumps+1))\n      break\n    fi\n    local max=0\n    local max_index=0\n    for ((j=i+1; j<=i+arr[i]; j++)); do\n      if [ $((j+arr[j])) -gt $max ]; then\n        max=$((j+arr[j]))\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps+1))\n  done\n  echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jump=0\n    local i=0\n    local curr_max=0\n    local next_max=0\n    local steps=0\n    local d=$2\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jump\n            return\n        fi\n        if [ $i -le $curr_max ]\n        then\n            steps=$((steps+arr[i]))\n            if [ $steps -ge $d ]\n            then\n                echo $((jump+1))\n                return\n            fi\n            next_max=$((next_max>i+arr[i]?next_max:i+arr[i]))\n        else\n            curr_max=$next_max\n            jump=$((jump+1))\n            i=$((i-1))\n        fi\n        i=$((i+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo -1\n            return\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for ((j=$i+1; j<=$((i+arr[i])); j++)); do\n            if [ $j -eq $((n-1)) ]; then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local -n len=$2\n    local -n jumps=$3\n    local -n path=$4\n    local -n visited=$5\n    local -n queue=$6\n\n    local i=0\n    local j=0\n    local k=0\n    local x=0\n    local y=0\n    local z=0\n    local curr=0\n    local next=0\n    local jump=0\n    local flag=0\n\n    for ((i=0; i<len; i++))\n    do\n        jumps[i]=0\n        path[i]=0\n        visited[i]=0\n    done\n\n    queue[0]=0\n    visited[0]=1\n    jumps[0]=0\n    path[0]=0\n\n    while ((queue[0] != -1))\n    do\n        curr=queue[0]\n        queue[0]=-1\n        for ((i=0; i<len; i++))\n        do\n            if ((visited[i] == 0))\n            then\n                queue[i]=i\n                visited[i]=1\n                jumps[i]=jumps[curr]+1\n                path[i]=curr\n            fi\n        done\n        for ((i=0; i<len; i++))\n        do\n            if ((queue[i] != -1))\n            then\n                jump=arr[queue[i]]\n                x=queue[i]\n                y=x+jump\n                z=x-jump\n                if ((y >= 0 && y < len))\n                then\n                    if ((visited[y] == 0))\n                    then\n                        queue[i]=-1\n                        visited[y]=1\n                        jumps[y]=jumps[x]+1\n                        path[y]=x\n                    fi\n                fi\n                if ((z >= 0 && z < len))\n                then\n                    if ((visited[z] == 0))\n                    then\n                        queue[i]=-1\n                        visited[z]=1\n                        jumps[z]=jumps[x]+1\n                        path[z]=x\n                    fi\n                fi\n            fi\n        done\n    done",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local maxReach=0\n    local steps=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        maxReach=$((i+arr[i]))\n        if [ $maxReach -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        steps=$((maxReach+1))\n        for ((j=i+1; j<=steps; j++))\n        do\n            if [ $((j+arr[j])) -gt $maxReach ]\n            then\n                maxReach=$((j+arr[j]))\n                flag=$j\n            fi\n        done\n        i=$flag\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n\n    while ((i < n))\n    do\n        if ((max_reach < i))\n        then\n            return -1\n        fi\n\n        max_reach=$((i + arr[i]))\n        if ((max_reach >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n\n        steps=$((arr[i]))\n        for ((j = i + 1; j <= max_reach; j++))\n        do\n            if ((steps < arr[j] + j - i))\n            then\n                steps=$((arr[j] + j - i))\n                jumps=$((jumps + 1))\n            fi\n        done\n        i=$((j - 1))\n    done\n\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local step=0\n    local max=0\n    local x=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        max=$i\n        for ((j=$i+1; j<=$((i+arr[i])); j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ $((arr[j]+j)) -gt $((arr[max]+max)) ]\n            then\n                max=$j\n            fi\n        done\n        i=$max\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if (( arr[i] + i >= n ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for (( j=i+1; j<=i+arr[i]; j++ ))\n        do\n            if (( arr[j] + j > max ))\n            then\n                max=$(( arr[j] + j ))\n                max_index=$j\n            fi\n        done\n        jumps=$(( jumps + 1 ))\n        i=$max_index\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return 0\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            return -1\n        fi\n        local max=0\n        local max_index=0\n        for ((j=$i+1; j<=$((i+arr[$i])); j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                return 0\n            fi\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_index\n    done\n    return 0",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -le $max_reach ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$steps\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i j\n    local -a dp\n\n    for ((i=0; i<n; i++)); do\n        dp[i]=$((arr[i] + 1))\n    done\n\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] >= i-j)); then\n                if ((dp[i] > dp[j] + 1)); then\n                    dp[i]=$((dp[j] + 1))\n                fi\n            fi\n        done\n    done\n\n    echo ${dp[n-1]}",
    "    local -n arr=$1\n    local len=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $len ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid Input\"\n            return\n        fi\n        if [ $((i + arr[i])) -gt $((len - 1)) ]; then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++)); do\n            if [ $((j + arr[j])) -gt $max ]; then\n                max=$((j + arr[j]))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $((i+arr[i])) -ge $((n-1)) ]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for j in $(seq $((i+1)) $((i+arr[i]))); do\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            i=$((i+arr[i]))\n            ((jumps++))\n        fi\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid Input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -lt $((n-2)) ] && [ $((i+arr[i+2])) -lt $((n-1)) ]; then\n            i=$((i+2))\n        else\n            i=$((i+1))\n        fi\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i j=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n    local -i curr_reach=0\n\n    while i < n-1\n    do\n        max_reach=i+arr[i]\n        if max_reach >= n-1\n        then\n            jumps=1\n            break\n        fi\n        steps=arr[i]\n        while j <= steps\n        do\n            curr_reach=i+j+arr[i+j]\n            if curr_reach > max_reach\n            then\n                max_reach=curr_reach\n                jumps=$((jumps+1))\n            fi\n            ((j++))\n        done\n        ((i++))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local -a dp\n    dp[0]=0\n    for ((i=1; i<=n; i++)); do\n        dp[i]=${arr[i]}+dp[i-1]\n        for ((j=i-1; j>=1; j--)); do\n            if [[ ${arr[j]} -gt $((i-j)) ]]; then\n                dp[i]=$((dp[i]<dp[j-1]+1?dp[i]:dp[j-1]+1))\n            fi\n        done\n    done\n    echo ${dp[n]}",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local step=0\n    local max=0\n    local max_index=0\n    local max_step=0\n    local max_step_index=0\n\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n\n        if [ $i -eq $max_step_index ]\n        then\n            max_step=$((max_step+1))\n            max_step_index=$max_index\n        fi\n\n        if [ $((arr[i]+i)) -gt $max ]\n        then\n            max=$((arr[i]+i))\n            max_index=$i\n        fi\n\n        if [ $((i+arr[i])) -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            i=$max_index\n            jumps=$((jumps+1))\n        else\n            i=$((i+arr[i]))\n            jumps=$((jumps+1))\n        fi\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=${arr[$i]}\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]; do\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local step=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        step=$((i+arr[i]))\n        if [ $step -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max=${arr[$i]}\n        local j=$((i+1))\n        while [ $j -le $step ]\n        do\n            if [ $((arr[$j]+j)) -gt $max ]\n            then\n                max=$((arr[$j]+j))\n                i=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n    done",
    "\tlocal -n arr=$1\n\tlocal n=$2\n\tlocal i=0\n\tlocal j=0\n\tlocal min_jumps=0\n\tlocal min_jumps_arr=()\n\tlocal min_jumps_arr_index=0\n\tlocal min_jumps_arr_index_temp=0\n\tlocal min_jumps_arr_index_temp_2=0\n\tlocal min_jumps_arr_index_temp_3=0\n\tlocal min_jumps_arr_index_temp_4=0\n\tlocal min_jumps_arr_index_temp_5=0\n\tlocal min_jumps_arr_index_temp_6=0\n\tlocal min_jumps_arr_index_temp_7=0\n\tlocal min_jumps_arr_index_temp_8=0\n\tlocal min_jumps_arr_index_temp_9=0\n\tlocal min_jumps_arr_index_temp_10=0\n\tlocal min_jumps_arr_index_temp_11=0\n\tlocal min_jumps_arr_index_temp_12=0\n\tlocal min_jumps_arr_index_temp_13=0\n\tlocal min_jumps_arr_index_temp_14=0\n\tlocal min_jumps_arr_index_temp_15=0\n\tlocal min_jumps_arr_index_temp_16=0\n\tlocal min_jumps_arr_index_temp_17=0\n\tlocal min_jumps_arr_index_temp_18=0\n\tlocal min_jumps_arr_index_temp_19=0\n\tlocal min_jumps_arr_index_temp_20=0\n\tlocal min_jumps_arr_index_temp_21=0\n\tlocal min_jumps_arr_index_temp_22=0\n\tlocal min_jumps_arr_index_temp_23=0\n\tlocal min_jumps_arr_index_temp_24=0\n\tlocal min_jumps_arr_index_temp_25=0\n\tlocal min_jumps_arr_index_temp_26=0\n\tlocal min_jumps_arr_index_temp",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Invalid input\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]; then\n      return\n    fi\n    if [ $((i+arr[i])) -ge $((n-1)) ]; then\n      jumps=$((jumps+1))\n      return\n    fi\n    local max=0\n    local max_index=0\n    for j in $(seq $((i+1)) $((i+arr[i]))); do\n      if [ ${arr[$j]} -gt $max ]; then\n        max=${arr[$j]}\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps+1))\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            ((jumps++))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if ((arr[j] + j > max))\n            then\n                max=arr[j]\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        ((jumps++))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i\n    local j\n    local dp\n    local min\n    local temp\n\n    dp[0]=0\n    for ((i=1; i<=n; i++)); do\n        min=9999\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] + j >= i)); then\n                temp=$((dp[j] + 1))\n                if ((temp < min)); then\n                    min=$temp\n                fi\n            fi\n        done\n        dp[i]=$min\n    done\n    echo ${dp[n]}",
    "    local -a list=($1)\n    local n=${#list[@]}\n    local x=$2\n    local jumps=0\n    local i=0\n    while [[ $i -lt $n ]]; do\n        if [[ $x -eq 0 ]]; then\n            break\n        fi\n        if [[ $x -lt ${list[$i]} ]]; then\n            ((i++))\n            continue\n        fi\n        x=$((x - list[i]))\n        ((jumps++))\n    fi\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i\n    local j\n    local min_jumps\n    local jumps\n    local jumps_arr\n    local jumps_arr_len\n\n    # Initialize jumps_arr\n    for ((i=0; i<n; i++)); do\n        jumps_arr[$i]=0\n    done\n\n    # Calculate jumps_arr\n    for ((i=1; i<n; i++)); do\n        min_jumps=${jumps_arr[$((i-1))]}\n        for ((j=0; j<i; j++)); do\n            jumps=$((i-j))\n            if ((jumps <= arr[j])); then\n                jumps=$((jumps_arr[j]+1))\n                if ((jumps < min_jumps)); then\n                    min_jumps=$jumps\n                fi\n            fi\n        done\n        jumps_arr[$i]=$min_jumps\n    done\n\n    echo ${jumps_arr[$((n-1))]}",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            i=$((i+arr[i]))\n            ((jumps++))\n        fi\n    done",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $((i + arr[i])) -ge $((n - 1)) ]; then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local max=0\n    local max_index=0\n    for ((j = i + 1; j <= i + arr[i]; j++)); do\n      if [ $((arr[j] + j)) -gt $max ]; then\n        max=$((arr[j] + j))\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps + 1))\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for ((j = 1; j <= arr[i]; j++))\n        do\n            if ((i + j + arr[i + j] > max_reach))\n            then\n                max_reach=$((i + j + arr[i + j]))\n                max_reach_index=$((i + j))\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_i=$j\n            fi\n        done\n        jumps=$((jumps + 1))\n        i=$max_i\n    done\n    echo $jumps",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while ((i < n))\n  do\n    if ((arr[i] == 0))\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if ((i + arr[i] >= n))\n    then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local max_reach=0\n    local max_reach_index=0\n    local j=1\n    while ((j <= arr[i]))\n    do\n      if ((i + j + arr[i + j] > max_reach))\n      then\n        max_reach=$((i + j + arr[i + j]))\n        max_reach_index=$((i + j))\n      fi\n      j=$((j + 1))\n    done\n    i=$max_reach_index\n    jumps=$((jumps + 1))\n  done\n  echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Infinite\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=$2\n    local i=0\n    local jumps=0\n    local max_reach=0\n    local steps=0\n    while ((i < n))\n    do\n        max_reach=$((i + arr[i]))\n        if ((max_reach == n-1))\n        then\n            ((jumps++))\n            break\n        fi\n        steps=$((max_reach + 1))\n        for ((j = i+1; j <= max_reach; j++))\n        do\n            if ((j + arr[j] > steps))\n            then\n                steps=$((j + arr[j]))\n                i=$j\n            fi\n        done\n        ((jumps++))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local -i max=0\n        local -i max_index=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if [ $((arr[j]+j)) -gt $max ]\n            then\n                max=$((arr[j]+j))\n                max_index=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_index\n    done",
    "  local -n arr=$1\n  local n=$2\n  local -i i=0\n  local -i jumps=0\n  local -i maxReach=0\n  local -i steps=0\n  local -i flag=0\n\n  while [[ $i -lt $n ]]; do\n    maxReach=$((i + arr[i]))\n    if [[ $maxReach -gt $((n - 1)) ]]; then\n      jumps=$((jumps + 1))\n      break\n    fi\n    steps=$((maxReach + 1))\n    while [[ $steps -le $((n - 1)) && $((arr[steps] + steps)) -le $maxReach ]]; do\n      steps=$((steps + 1))\n    done\n    i=$steps\n    jumps=$((jumps + 1))\n  done\n  echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$i\n        local steps=$((arr[$i]))\n        local j=$((i+1))\n        while [ $j -le $((i+steps)) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[$j])) -gt $((max_reach+arr[$max_reach])) ]\n            then\n                max_reach=$j\n            fi\n            j=$((j+1))\n        done\n        i=$max_reach\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $((i + arr[i])) -ge $((n - 1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_reach=0\n        local steps=0\n        local j=$((i + 1))\n        while [ $j -le $((i + arr[i])) ]\n        do\n            if [ $((j + arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j + arr[j]))\n                steps=$j\n            fi\n            j=$((j + 1))\n        done\n        jumps=$((jumps + 1))\n        i=$steps\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if ((j + arr[j] > max_reach))\n            then\n                max_reach=$((j + arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for (( j = i + 1; j <= i + arr[i]; j++ ))\n        do\n            if (( j + arr[j] > max ))\n            then\n                max=$(( j + arr[j] ))\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$(( jumps + 1 ))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local -a dp\n    dp[0]=0\n    for ((i=1; i<=n; i++)); do\n        dp[i]=$((2**31-1))\n    done\n    for ((i=1; i<=n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j]+j>=i)); then\n                if ((dp[i]>dp[j]+1)); then\n                    dp[i]=$((dp[j]+1))\n                fi\n            fi\n        done\n    done\n    echo ${dp[n]}",
    "    local -n arr=$1\n    local d=$2\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n\n    while [[ $i -lt $n ]]; do\n        max_reach=$((i + arr[i]))\n        if [[ $max_reach -ge $n-1 ]]; then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach + 1))\n        for ((j = i + 1; j <= max_reach; j++)); do\n            if [[ $((j + arr[j])) -gt $steps ]]; then\n                steps=$((j + arr[j]))\n                i=$j\n            fi\n        done\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "\tlocal -n arr=$1\n\tlocal n=$2\n\tlocal i=0\n\tlocal j=0\n\tlocal min_jumps=0\n\tlocal jumps=0\n\tlocal min_jumps_arr=()\n\tlocal jumps_arr=()\n\tlocal min_jumps_arr_index=0\n\tlocal jumps_arr_index=0\n\n\tfor ((i=0; i<n; i++)); do\n\t\tif [[ ${arr[$i]} -eq 0 ]]; then\n\t\t\techo \"Invalid input\"\n\t\t\treturn 1\n\t\tfi\n\tdone\n\n\tfor ((i=0; i<n; i++)); do\n\t\tjumps=0\n\t\tj=i\n\t\twhile [[ $j -lt $n ]]; do\n\t\t\tj=$((j+arr[j]))\n\t\t\tjumps=$((jumps+1))\n\t\t\tif [[ $j -eq $n ]]; then\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif [[ $j -eq $n ]]; then\n\t\t\tjumps_arr[$jumps_arr_index]=$jumps\n\t\t\tjumps_arr_index=$((jumps_arr_index+1))\n\t\tfi\n\tdone\n\n\tif [[ ${#jumps_arr[@]} -eq 0 ]]; then\n\t\techo \"No solution\"\n\t\treturn 1\n\tfi\n\n\tmin_jumps=${jumps_arr[0]}\n\tfor ((i=1; i<${#jumps_arr[@]}; i++)); do\n\t\tif [[ ${jumps_arr[$i]} -lt $min_jumps ]]; then\n\t\t\tmin_jumps=${jumps_arr[$i]}\n\t\tfi\n\tdone\n\n\tfor ((i=0; i<${#jumps_arr[@]}; i++)); do\n\t\tif [[ ${jumps_arr[$i]} -eq $min_jumps ]]; then\n\t\t\tmin_jumps_arr[$min_jumps_arr_index]=${jumps_arr[$i]}\n\t\t\tmin_jumps_arr_",
    "\tlocal -n arr=$1\n\tlocal n=$2\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal min=0\n\tlocal temp=0\n\tlocal flag=0\n\tlocal -a jumps\n\tfor ((i=0;i<n;i++))\n\tdo\n\t\tjumps[i]=0\n\tdone\n\tfor ((i=1;i<n;i++))\n\tdo\n\t\tmin=jumps[0]+1\n\t\tfor ((j=0;j<i;j++))\n\t\tdo\n\t\t\tif ((arr[j]+j>=i))\n\t\t\tthen\n\t\t\t\ttemp=jumps[j]+1\n\t\t\t\tif ((temp<min))\n\t\t\t\tthen\n\t\t\t\t\tmin=temp\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\t\tjumps[i]=min\n\tdone\n\techo ${jumps[@]}",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    local flag=0\n    local max_steps=0\n    local steps_taken=0\n    local steps_left=0\n    local steps_taken_prev=0\n    local steps_left_prev=0\n    local steps_taken_prev_prev=0\n    local steps_left_prev_prev=0\n    local steps_taken_prev_prev_prev=0\n    local steps_left_prev_prev_prev=0\n    local steps_taken_prev_prev_prev_prev=0\n    local steps_left_prev_prev_prev_prev=0\n    local steps_taken_prev_prev_prev_prev_prev=0\n    local steps_left_prev_prev_prev_prev_prev=0\n    local steps_taken_prev_prev_prev_prev_prev_prev=0\n    local steps_left_prev_prev_prev_prev_prev_prev=0\n    local steps_taken_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_left_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_taken_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_left_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_taken_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_left_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_taken_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_left_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_taken_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local steps_left_prev_prev_prev_",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    local max_reach=0\n    local steps=0\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i + arr[i]))\n        if [ $max_reach -eq $n ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach + 1))\n        for ((j=i+1; j<steps; j++))\n        do\n            if [ $((j + arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j + arr[j]))\n                steps=$((max_reach + 1))\n            fi\n        done\n        i=$j\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=\"$1\"\n    local n=\"$2\"\n    local -i i=0\n    local -i jumps=0\n    local -i step=0\n    local -i max_reach=0\n    local -i curr_reach=0\n    while (( i < n ))\n    do\n        if (( i == n-1 ))\n        then\n            return 0\n        fi\n        max_reach=$(( i + arr[i] ))\n        if (( max_reach >= n-1 ))\n        then\n            (( jumps++ ))\n            return 0\n        fi\n        curr_reach=$(( i + 1 ))\n        step=$(( arr[i] ))\n        while (( curr_reach <= max_reach ))\n        do\n            if (( curr_reach + arr[curr_reach] > step ))\n            then\n                step=$(( curr_reach + arr[curr_reach] ))\n                i=$curr_reach\n            fi\n            (( curr_reach++ ))\n        done\n        (( jumps++ ))\n    done\n    return 1",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $((i + arr[i])) -ge $((n - 1)) ]; then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++)); do\n            if [ $((arr[j] + j)) -gt $max ]; then\n                max=$((arr[j] + j))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local step=${arr[$i]}\n        for ((j=i+1; j<=max_reach && j<n; j++)); do\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                step=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$step\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$((arr[i]))\n        while [ $steps -gt 0 ]\n        do\n            local temp=$((i+steps))\n            if [ $temp -eq $((n-1)) ]\n            then\n                echo $((jumps+1))\n                return\n            fi\n            if [ $temp -gt $max_reach ]\n            then\n                max_reach=$temp\n            fi\n            steps=$((steps-1))\n        done\n        jumps=$((jumps+1))\n        i=$((max_reach))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            ((jumps++))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        ((jumps++))\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=${arr[j]}\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        for ((j=$i+1; j<=$((i+arr[i])); j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ $max_reach -lt $((j+arr[j])) ]\n            then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_reach_index\n    done",
    "    local -n arr=$1\n    local n=$2\n    local d=$3\n    local jumps=0\n    local i=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq $d ]]; then\n            echo $jumps\n            return\n        fi\n        if [[ $i -eq $((n - 1)) ]]; then\n            echo -1\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j = 1; j <= ${arr[$i]}; j++)); do\n            if [[ $((i + j)) -lt $n ]]; then\n                if [[ ${arr[$((i + j))]} -gt $max ]]; then\n                    max=${arr[$((i + j))]}\n                    max_index=$((i + j))\n                fi\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done",
    "  local -n arr=$1\n  local n=$2\n  local -i i=0 j=0\n  local -i min_jumps=0\n  local -i jumps=0\n  local -i min_jumps_arr=()\n  local -i jumps_arr=()\n  local -i min_jumps_arr_len=0\n  local -i jumps_arr_len=0\n  local -i min_jumps_arr_idx=0\n  local -i jumps_arr_idx=0\n\n  for ((i=0; i<n; i++)); do\n    min_jumps_arr[$i]=0\n    jumps_arr[$i]=0\n  done\n\n  for ((i=1; i<n; i++)); do\n    min_jumps=${arr[$i]}\n    jumps=${arr[$i]}\n    min_jumps_arr_len=${#min_jumps_arr[@]}\n    jumps_arr_len=${#jumps_arr[@]}\n    min_jumps_arr_idx=0\n    jumps_arr_idx=0\n    for ((j=0; j<i; j++)); do\n      if ((jumps_arr[$j] > 0)); then\n        if ((jumps_arr[$j] + 1 < min_jumps)); then\n          min_jumps=jumps_arr[$j] + 1\n          min_jumps_arr_idx=$jumps_arr_idx\n        fi\n        if ((jumps_arr[$j] + 1 < jumps)); then\n          jumps=jumps_arr[$j] + 1\n          jumps_arr_idx=$jumps_arr_idx\n        fi\n      fi\n      ((jumps_arr_idx++))\n    done\n    if ((min_jumps_arr_idx < min_jumps_arr_len)); then\n      min_jumps_arr[$min_jumps_arr_idx]=$min_jumps\n    else\n      min_jumps_arr[$min_jumps_arr_len]=$min_jumps\n    fi\n    if ((jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] + i >= n-1))\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if ((arr[j] + j > max))\n            then\n                max=$((arr[j] + j))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]\n    then\n      echo $jumps\n      return\n    fi\n    local max_reach=$((i+arr[$i]))\n    local max_reach_index=$i\n    for ((j=$i+1; j<=$max_reach; j++))\n    do\n      if [ $j -eq $((n-1)) ]\n      then\n        jumps=$((jumps+1))\n        echo $jumps\n        return\n      fi\n      if [ $((j+arr[j])) -gt $max_reach ]\n      then\n        max_reach=$((j+arr[j]))\n        max_reach_index=$j\n      fi\n    done\n    i=$max_reach_index\n    jumps=$((jumps+1))\n  done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            i=$((i+arr[i]))\n            ((jumps++))\n        fi\n    done",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"",
    "\tlocal -n arr=$1\n\tlocal n=$2\n\tlocal i=0\n\tlocal j=0\n\tlocal jumps=0\n\tlocal min_jumps=0\n\tlocal min_i=0\n\tlocal min_j=0\n\tlocal flag=0\n\tlocal temp=0\n\n\tfor ((i=0; i<n; i++))\n\tdo\n\t\tfor ((j=0; j<n; j++))\n\t\tdo\n\t\t\tif [[ ${arr[$i,$j]} -eq 0 ]]\n\t\t\tthen\n\t\t\t\tcontinue\n\t\t\tfi\n\t\t\tjumps=$((i+j))\n\t\t\tif [[ $flag -eq 0 ]]\n\t\t\tthen\n\t\t\t\tmin_jumps=$jumps\n\t\t\t\tmin_i=$i\n\t\t\t\tmin_j=$j\n\t\t\t\tflag=1\n\t\t\telse\n\t\t\t\tif [[ $jumps -lt $min_jumps ]]\n\t\t\t\tthen\n\t\t\t\t\tmin_jumps=$jumps\n\t\t\t\t\tmin_i=$i\n\t\t\t\t\tmin_j=$j\n\t\t\t\telif [[ $jumps -eq $min_jumps ]]\n\t\t\t\tthen\n\t\t\t\t\tif [[ $i -lt $min_i ]]\n\t\t\t\t\tthen\n\t\t\t\t\t\tmin_jumps=$jumps\n\t\t\t\t\t\tmin_i=$i\n\t\t\t\t\t\tmin_j=$j\n\t\t\t\t\telif [[ $i -eq $min_i ]]\n\t\t\t\t\tthen\n\t\t\t\t\t\tif [[ $j -lt $min_j ]]\n\t\t\t\t\t\tthen\n\t\t\t\t\t\t\tmin_jumps=$jumps\n\t\t\t\t\t\t\tmin_i=$i\n\t\t\t\t\t\t\tmin_j=$j\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $min_jumps",
    "    local -n arr=$1\n    local d=$2\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local j=0\n    local k=0\n    local max_reach=0\n    local steps=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -ge $d ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        j=$i\n        k=$i\n        while [ $j -le $max_reach ]\n        do\n            if [ $j -eq $max_reach ]\n            then\n                flag=1\n                break\n            fi\n            if [ $((j+arr[j])) -gt $((k+arr[k])) ]\n            then\n                k=$j\n            fi\n            j=$((j+1))\n        done\n        if [ $flag -eq 1 ]\n        then\n            jumps=$((jumps+1))\n            i=$((k+1))\n        else\n            echo \"Not possible\"\n            break\n        fi\n    done\n    echo $jumps",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [[ $i -lt $n ]]; do\n    if [[ ${arr[$i]} -eq 0 ]]; then\n      echo \"Infinite\"\n      return\n    fi\n    if [[ $i -eq $((n - 1)) ]]; then\n      echo $jumps\n      return\n    fi\n    local max_reach=$((i + arr[i]))\n    local max_reach_index=$i\n    for ((j = i + 1; j <= max_reach && j < n; j++)); do\n      if [[ $((j + arr[j])) -gt $max_reach ]]; then\n        max_reach=$((j + arr[j]))\n        max_reach_index=$j\n      fi\n    done\n    jumps=$((jumps + 1))\n    i=$max_reach_index\n  done",
    "    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i j=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n    local -i max_steps=0\n    local -i flag=0\n\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i+arr[i]))\n        max_steps=$((arr[i]+i))\n        if [ $max_reach -gt $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        if [ $max_steps -gt $max_reach ]\n        then\n            max_reach=$max_steps\n        fi\n        j=$((j+1))\n        while [ $j -le $max_reach ]\n        do\n            steps=$((arr[j]+j))\n            if [ $steps -gt $max_reach ]\n            then\n                max_reach=$steps\n                flag=1\n            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n        jumps=$((jumps+1))\n        if [ $flag -eq 1 ]\n        then\n            i=$((i-1))\n            flag=0\n        fi\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local steps=0\n    local max_reach=0\n    local curr_reach=0\n    while [ $i -lt $n ]; do\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -gt $((n-1)) ]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        steps=$((max_reach+1))\n        while [ $steps -le $((n-1)) ]; do\n            if [ $((arr[steps]+steps)) -gt $curr_reach ]; then\n                curr_reach=$((arr[steps]+steps))\n            fi\n            steps=$((steps+1))\n        done\n        jumps=$((jumps+1))\n        i=$((curr_reach))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $((i+arr[i])) -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        local max_reach=0\n        local steps=0\n        for ((j=$((i+1)); j<=$((i+arr[i])); j++))\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$steps\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local len=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $len ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $((i + arr[i])) -ge $len ]; then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++)); do\n            if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jump=$2\n    local i=0\n    local count=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            flag=1\n            break\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $count\n            flag=1\n            break\n        fi\n        if [ $(($i+$jump)) -gt $((n-1)) ]\n        then\n            echo $((count+1))\n            flag=1\n            break\n        fi\n        local max=0\n        local j=$i\n        local k=$i\n        for ((j=$i+1; j<=$((i+jump)); j++))\n        do\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                k=$j\n            fi\n        done\n        i=$k\n        count=$((count+1))\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"Not possible\"\n    fi",
    "  local -n arr=$1\n  local -i n=$2\n  local -i i=0\n  local -i jumps=0\n  while [[ $i < $n ]]; do\n    if [[ ${arr[$i]} -eq 0 ]]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [[ $i + ${arr[$i]} -ge $n ]]; then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local -i max=0\n    local -i max_index=0\n    for ((j = i + 1; j <= i + ${arr[$i]}; j++)); do\n      if [[ $j -eq $n ]]; then\n        jumps=$((jumps + 1))\n        break\n      fi\n      if [[ $j + ${arr[$j]} -gt $max ]]; then\n        max=${arr[$j]}\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps + 1))\n  done\n  echo $jumps",
    "  local -n arr=$1\n  local n=$2\n  local jumps=0\n  local i=0\n  while [[ $i -lt $n ]]; do\n    if [[ ${arr[$i]} -eq 0 ]]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [[ $i -eq $((n - 1)) ]]; then\n      echo $jumps\n      return\n    fi\n    local max=0\n    local max_i=0\n    local j=$((i + 1))\n    while [[ $j -le $((i + arr[$i])) && $j -lt $n ]]; do\n      if [[ ${arr[$j]} -gt $max ]]; then\n        max=${arr[$j]}\n        max_i=$j\n      fi\n      j=$((j + 1))\n    done\n    jumps=$((jumps + 1))\n    i=$max_i\n  done",
    "    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Not possible\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        if [[ $i -eq $((n-2)) ]]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j=1; j<=${arr[$i]}; j++)); do\n            if [[ $((i+j)) -eq $((n-1)) ]]; then\n                jumps=$((jumps+1))\n                break 2\n            fi\n            if [[ $((i+j+arr[i+j])) -gt $max ]]; then\n                max=$((i+j+arr[i+j]))\n                max_index=$((i+j))\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            i=$((i+arr[i]))\n            jumps=$((jumps+1))\n        fi\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Cannot reach end\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo \"Reached end in $jumps jumps\"\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        for j in $(seq $((i+1)) $((i+arr[i]))); do\n            if [ $j -ge $n ]; then\n                break\n            fi\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $((i + arr[i])) -ge $((n - 1)) ]; then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j = i + 1; j <= i + arr[i]; j++)); do\n            if [ $((j + arr[j])) -gt $max ]; then\n                max=$((j + arr[j]))\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local maxReach=0\n    local steps=0\n    local jump=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        maxReach=$((i+arr[i]))\n        if [ $maxReach -ge $n ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        steps=$((maxReach+1))\n        jump=$((arr[maxReach]))\n        for (( j=$((i+1)); j<$steps; j++ ))\n        do\n            if [ $((arr[j]+j)) -gt $jump ]\n            then\n                jump=$((arr[j]+j))\n                maxReach=$j\n            fi\n        done\n        i=$maxReach\n        jumps=$((jumps+1))\n    done\n    echo $jumps",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local count=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $count\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            count=$((count+1))\n            echo $count\n            return\n        fi\n        local max=0\n        local max_index=0\n        for j in $(seq $((i+1)) $((i+arr[$i]))); do\n            if [ $j -ge $((n-1)) ]; then\n                max_index=$((n-1))\n                break\n            fi\n            if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        count=$((count+1))\n    done",
    "  local -n _arr=$1\n  local _n=$2\n  local _i _j _k _l _m _n _o _p _q _r _s _t _u _v _w _x _y _z\n  local _a _b _c _d _e _f _g _h _i _j _k _l _m _n _o _p _q _r _s _t _u _v _w _x _y _z\n  local _A _B _C _D _E _F _G _H _I _J _K _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z\n  local _aa _bb _cc _dd _ee _ff _gg _hh _ii _jj _kk _ll _mm _nn _oo _pp _qq _rr _ss _tt _uu _vv _ww _xx _yy _zz\n  local _AA _BB _CC _DD _EE _FF _GG _HH _II _JJ _KK _LL _MM _NN _OO _PP _QQ _RR _SS _TT _UU _VV _WW _XX _YY _ZZ\n  local _aaa _bbb _ccc _ddd _eee _fff _ggg _hhh _iii _jjj _kkk _lll _mmm _nnn _ooo _ppp _qqq _rrr _sss _ttt _uuu _vvv _www _xxx _yyy _zzz\n  local _AAA _BBB _CCC _DDD _EEE _FFF _GGG _HHH _III _JJJ _KKK _LLL _MMM _NNN _OOO _PPP _QQQ _RRR _SSS _TTT _UUU _VVV _WWW _XXX _YYY _ZZZ\n  local _aaaa _bbbb _cccc _dddd _eeee _ffff _gggg _hhhh _iiii _jjjj _kkkk _llll _mmmm _nnnn _oooo _pppp _qqqq _rrrr _ssss _tttt _uuuu _vvvv _wwww _xxxx _yyyy _zzzz\n  local _AAAA _BBBB _CC",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $((i + arr[i])) -ge $((n - 1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if [ $((j + arr[j])) -gt $max ]\n            then\n                max=$((j + arr[j]))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps",
    "\t# Write your code here\n\t# To print results to the standard output you can use echo\n\t# Example: echo \"Hello world\"\n\techo \"Hello world\"",
    "    local -n arr=$1\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n    local -i flag=0\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i + arr[i]))\n        if [ $max_reach -ge $((n-1)) ]\n        then\n            jumps=$((jumps + 1))\n            flag=1\n            break\n        fi\n        steps=$((max_reach + 1))\n        while [ $steps -le $((n-1)) ]\n        do\n            if [ $((arr[steps] + steps)) -gt $max_reach ]\n            then\n                max_reach=$((arr[steps] + steps))\n            fi\n            steps=$((steps + 1))\n        done\n        jumps=$((jumps + 1))\n        i=$((i + 1))\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"Not possible\"\n    else\n        echo $jumps\n    fi",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            echo $((jumps+1))\n            return\n        fi\n        local max=0\n        local max_i=0\n        for j in $(seq $((i+1)) $((i+arr[$i]))); do\n            if [ $j -gt $((n-1)) ]; then\n                break\n            fi\n            if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps+1))\n    done",
    "  local -n arr=$1\n  local n=$2\n  local -i i=0\n  local -i jumps=0\n  local -i maxReach=0\n  local -i steps=0\n\n  while (( i < n ))\n  do\n    maxReach=$(( i + arr[i] ))\n    if (( maxReach > steps ))\n    then\n      steps=$maxReach\n    fi\n    if (( steps >= n-1 ))\n    then\n      return 0\n    fi\n    (( i++ ))\n    if (( i == steps ))\n    then\n      (( jumps++ ))\n    fi\n  done\n  return 1"
  ]
}