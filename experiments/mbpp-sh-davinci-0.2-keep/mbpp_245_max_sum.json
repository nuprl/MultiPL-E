{
  "name": "mbpp_245_max_sum",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a arr=($1)\n  local -a inc_arr=(${arr[0]})\n  local -a dec_arr=(${arr[0]})\n  local -i max_sum=${arr[0]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_arr[i]=${arr[i]}\n    dec_arr[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        inc_arr[i]=$((inc_arr[i] + arr[j]))\n      fi\n      if ((arr[j] > arr[i])); then\n        dec_arr[i]=$((dec_arr[i] + arr[j]))\n      fi\n    done\n    if ((inc_arr[i] > max_sum)); then\n      max_sum=${inc_arr[i]}\n    fi\n    if ((dec_arr[i] > max_sum)); then\n      max_sum=${dec_arr[i]}\n    fi\n  done\n  echo $max_sum",
    "    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[0]})\n    local -i max=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i])); then\n                inc[i]=$((inc[j] + arr[i]))\n                break\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-2; i>=0; i--)); do\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((arr[j] < arr[i])); then\n                dec[i]=$((dec[j] + arr[i]))\n                break\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=0; j<i; j++)); do\n            for ((k=i+1; k<${#arr[@]}; k++)); do\n                for ((l=k+1; l<${#arr[@]}; l++)); do\n                    for ((m=0; m<j; m++)); do\n                        for ((n=j+1; n<i; n++)); do\n                            for ((o=k+1; o<l; o++)); do\n                                if ((inc[j] + dec[i] + inc[k] + dec[l] + inc[m] + dec[n] + inc[o] > max)); then\n                                    max=$((inc[j] + dec[i] + inc[k] + dec[l] + inc[m] + dec[n] + inc[o]))\n                                fi\n                            done\n                        done\n                    done\n                done\n",
    "  local -a arr=($1)\n  local -a inc_sum=(${arr[0]})\n  local -a dec_sum=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_sum=${arr[0]}\n\n  while (( i < ${#arr[@]} )); do\n    inc_sum[i]=$(( ${inc_sum[i-1]} > ${arr[i]} ? ${inc_sum[i-1]} : ${arr[i]} ))\n    dec_sum[j]=$(( ${dec_sum[j+1]} > ${arr[j]} ? ${dec_sum[j+1]} : ${arr[j]} ))\n    (( i++, j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    local -i sum=$(( ${inc_sum[i]} + ${dec_sum[i]} - ${arr[i]} ))\n    max_sum=$(( $sum > $max_sum ? $sum : $max_sum ))\n  done\n\n  echo $max_sum",
    "  local -a arr\n  local -i i j k\n  local -i max_sum=0\n  local -i max_sum_i=0\n  local -i max_sum_j=0\n  local -i max_sum_k=0\n  local -i sum=0\n  local -i sum_i=0\n  local -i sum_j=0\n  local -i sum_k=0\n  local -i sum_i_j=0\n  local -i sum_j_k=0\n  local -i sum_i_k=0\n  local -i sum_i_j_k=0\n  local -i sum_i_j_k_max=0\n  local -i sum_i_j_k_max_i=0\n  local -i sum_i_j_k_max_j=0\n  local -i sum_i_j_k_max_k=0\n  local -i sum_i_j_k_max_i_j=0\n  local -i sum_i_j_k_max_j_k=0\n  local -i sum_i_j_k_max_i_k=0\n  local -i sum_i_j_k_max_i_j_k=0\n  local -i sum_i_j_k_max_i_j_k_max=0\n  local -i sum_i_j_k_max_i_j_k_max_i=0\n  local -i sum_i_j_k_max_i_j_k_max_j=0\n  local -i sum_i_j_k_max_i_j_k_max_k=0\n  local -i sum_i_j_k_max_i_j_k_max_i_j=0\n  local -i sum_i_j_k_max_i_j_k_max_j_k=0\n  local -i sum_i_j_k_max_i_j_k_max_i_k=0\n  local -i sum_i_j_k_max_i_j_k_max_i_j",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i\n  local -i j\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[j] + arr[i] > inc[i])); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[j] + arr[i] > dec[i])); then\n        dec[i]=dec[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] - arr[i] > max)); then\n      max=inc[i]+dec[i]-arr[i]\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc_sum\n  local -a dec_sum\n  local -i max_sum=0\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n\n  inc_sum[0]=${arr[0]}\n  dec_sum[n-1]=${arr[n-1]}\n\n  for ((i=1; i<n; i++)); do\n    inc_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((${arr[j]} < ${arr[i]})); then\n        ((inc_sum[i] += inc_sum[j]))\n      fi\n    done\n  done\n\n  for ((i=n-2; i>=0; i--)); do\n    dec_sum[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if ((${arr[j]} < ${arr[i]})); then\n        ((dec_sum[i] += dec_sum[j]))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    ((max_sum = inc_sum[i] + dec_sum[i] > max_sum ? inc_sum[i] + dec_sum[i] : max_sum))\n  done\n\n  echo $max_sum",
    "  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  local -i sum=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > inc[-1] )); then\n      inc+=(${arr[i]})\n    else\n      inc[-1]=${arr[i]}\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > dec[-1] )); then\n      dec+=(${arr[j]})\n    else\n      dec[-1]=${arr[j]}\n    fi\n    (( j-- ))\n  done\n\n  for (( i = 0; i < ${#arr[@]}; i++ )); do\n    sum=${inc[i]}+${dec[i]}\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max",
    "    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i])) && ((inc[i] < inc[j] + arr[i])); then\n                inc[i]=inc[j]+arr[i]\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-2; i>=0; i--)); do\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((arr[j] < arr[i])) && ((dec[i] < dec[j] + arr[i])); then\n                dec[i]=dec[j]+arr[i]\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((max < inc[i] + dec[i] - arr[i])); then\n            max=inc[i]+dec[i]-arr[i]\n        fi\n    done\n\n    echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[j] + arr[i] > inc[i])); then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=len-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[j] + arr[i] > dec[i])); then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    if ((inc[i] + dec[i] - arr[i] > max)); then\n      max=$((inc[i] + dec[i] - arr[i]))\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc_sum=(${arr[0]})\n  local -a dec_sum=(${arr[0]})\n  local max_sum=${arr[0]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[i]=${arr[i]}\n    dec_sum[i]=${arr[i]}\n\n    for ((j=0; j<i; j++)); do\n      if (( arr[i] > arr[j] )); then\n        inc_sum[i]=$(( inc_sum[i] > inc_sum[j] + arr[i] ? inc_sum[i] : inc_sum[j] + arr[i] ))\n      fi\n      if (( arr[i] < arr[j] )); then\n        dec_sum[i]=$(( dec_sum[i] > dec_sum[j] + arr[i] ? dec_sum[i] : dec_sum[j] + arr[i] ))\n      fi\n    done\n\n    max_sum=${inc_sum[i]}\n    for ((j=0; j<i; j++)); do\n      max_sum=$(( max_sum > inc_sum[j] + dec_sum[i] - arr[i] ? max_sum : inc_sum[j] + dec_sum[i] - arr[i] ))\n    done\n  done\n\n  echo $max_sum",
    "  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local max_sum=${arr[0]}\n  local sum=0\n  local i=0\n  local j=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        if [[ ${inc[i]} -lt $((inc[j] + arr[i])) ]]; then\n          inc[i]=$((inc[j] + arr[i]))\n        fi\n      fi\n      if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n        if [[ ${dec[i]} -lt $((dec[j] + arr[i])) ]]; then\n          dec[i]=$((dec[j] + arr[i]))\n        fi\n      fi\n    done\n    if [[ ${inc[i]} -gt ${dec[i]} ]]; then\n      sum=${inc[i]}\n    else\n      sum=${dec[i]}\n    fi\n    if [[ $sum -gt $max_sum ]]; then\n      max_sum=$sum\n    fi\n  done\n\n  echo $max_sum",
    "  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -a d=($1)\n  local -a e=($1)\n  local -a f=($1)\n  local -a g=($1)\n  local -a h=($1)\n  local -a i=($1)\n  local -a j=($1)\n  local -a k=($1)\n  local -a l=($1)\n  local -a m=($1)\n  local -a n=($1)\n  local -a o=($1)\n  local -a p=($1)\n  local -a q=($1)\n  local -a r=($1)\n  local -a s=($1)\n  local -a t=($1)\n  local -a u=($1)\n  local -a v=($1)\n  local -a w=($1)\n  local -a x=($1)\n  local -a y=($1)\n  local -a z=($1)\n  local -a A=($1)\n  local -a B=($1)\n  local -a C=($1)\n  local -a D=($1)\n  local -a E=($1)\n  local -a F=($1)\n  local -a G=($1)\n  local -a H=($1)\n  local -a I=($1)\n  local -a J=($1)\n  local -a K=($1)\n  local -a L=($1)\n  local -a M=($1)\n  local -a N=($1)\n  local -a O=($1)\n  local -a P=($1)\n  local -a Q=($1)\n  local -a R=($1)\n  local -a S=($1)\n  local -a T=($1)\n  local -a U=($1)\n  local -a V=($1)\n  local -a W=($1)\n  local -a X=($1)\n  local -a Y=($1)\n ",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=dec[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=inc[i]+dec[i]-arr[i]\n    fi\n  done\n\n  echo $max",
    "  local -a arr=(\"$@\")\n  local -a inc_sum=()\n  local -a dec_sum=()\n  local max_sum=0\n\n  inc_sum[0]=${arr[0]}\n  for ((i = 1; i < ${#arr[@]}; i++)); do\n    inc_sum[$i]=${arr[$i]}\n    for ((j = 0; j < i; j++)); do\n      if ((${arr[$i]} > ${arr[$j]})) && ((${inc_sum[$i]} < ${inc_sum[$j]} + ${arr[$i]})); then\n        inc_sum[$i]=${inc_sum[$j]} + ${arr[$i]}\n      fi\n    done\n  done\n\n  dec_sum[${#arr[@]}-1]=${arr[${#arr[@]}-1]}\n  for ((i = ${#arr[@]} - 2; i >= 0; i--)); do\n    dec_sum[$i]=${arr[$i]}\n    for ((j = ${#arr[@]} - 1; j > i; j--)); do\n      if ((${arr[$i]} > ${arr[$j]})) && ((${dec_sum[$i]} < ${dec_sum[$j]} + ${arr[$i]})); then\n        dec_sum[$i]=${dec_sum[$j]} + ${arr[$i]}\n      fi\n    done\n  done\n\n  for ((i = 0; i < ${#arr[@]}; i++)); do\n    if ((${inc_sum[$i]} + ${dec_sum[$i]} - ${arr[$i]} > $max_sum)); then\n      max_sum=${inc_sum[$i]} + ${dec_sum[$i]} - ${arr[$i]}\n    fi\n  done\n\n  echo $max_sum",
    "  local -a a=($1)\n  local -a l=(0)\n  local -a r=(0)\n  local i j\n  for ((i=1; i<${#a[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((a[j] < a[i])) && ((l[i] < l[j] + a[i])); then\n        l[i]=${l[j]}+${a[i]}\n      fi\n    done\n  done\n  for ((i=${#a[@]}-2; i>=0; i--)); do\n    for ((j=${#a[@]}-1; j>i; j--)); do\n      if ((a[j] < a[i])) && ((r[i] < r[j] + a[i])); then\n        r[i]=${r[j]}+${a[i]}\n      fi\n    done\n  done\n  local max=0\n  for ((i=0; i<${#a[@]}; i++)); do\n    if ((max < l[i] + r[i] - a[i])); then\n      max=${l[i]}+${r[i]}-${a[i]}\n    fi\n  done\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[$i]=${arr[$i]}\n    dec[$i]=${arr[$i]}\n  done\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n        inc[$i]=$(( ${inc[$i]} > ${inc[$j]} + ${arr[$i]} ? ${inc[$i]} : ${inc[$j]} + ${arr[$i]} ))\n      fi\n    done\n  done\n\n  for ((i=$((${#arr[@]}-2)); i>=0; i--)); do\n    for ((j=$((${#arr[@]}-1)); j>i; j--)); do\n      if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n        dec[$i]=$(( ${dec[$i]} > ${dec[$j]} + ${arr[$i]} ? ${dec[$i]} : ${dec[$j]} + ${arr[$i]} ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    max=$(( ${inc[$i]} + ${dec[$i]} - ${arr[$i]} > $max ? ${inc[$i]} + ${dec[$i]} - ${arr[$i]} : $max ))\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[$i]=${arr[$i]}\n    dec[$i]=${arr[$i]}\n  done\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n        inc[$i]=$(( ${inc[$i]} > ${inc[$j]} + ${arr[$i]} ? ${inc[$i]} : ${inc[$j]} + ${arr[$i]} ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n        dec[$i]=$(( ${dec[$i]} > ${dec[$j]} + ${arr[$i]} ? ${dec[$i]} : ${dec[$j]} + ${arr[$i]} ))\n      fi\n    done\n  done\n\n  local max=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ $(( ${inc[$i]} + ${dec[$i]} - ${arr[$i]} )) -gt $max ]]; then\n      max=$(( ${inc[$i]} + ${dec[$i]} - ${arr[$i]} ))\n    fi\n  done\n\n  echo $max",
    "  local -a arr=(\"$@\")\n  local -a inc=()\n  local -a dec=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n\n  inc[0]=${arr[0]}\n  dec[0]=${arr[0]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n      if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$((inc[i] + dec[i] - arr[i]))\n    if [[ sum -gt max ]]; then\n      max=sum\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=${arr[0]}\n  local -i max_inc=${arr[0]}\n  local -i max_dec=${arr[-1]}\n  local -i max_sum=${arr[0]}\n\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt $max ]; then\n      max=${arr[$i]}\n    fi\n    if [ ${arr[$i]} -gt ${inc[-1]} ]; then\n      inc+=(${arr[$i]})\n    else\n      inc[-1]=${arr[$i]}\n    fi\n    if [ ${arr[$j]} -gt $max ]; then\n      max=${arr[$j]}\n    fi\n    if [ ${arr[$j]} -gt ${dec[-1]} ]; then\n      dec+=(${arr[$j]})\n    else\n      dec[-1]=${arr[$j]}\n    fi\n    ((i++))\n    ((j--))\n  done\n\n  for ((i=0; i<${#inc[@]}; i++)); do\n    if [ ${inc[$i]} -gt $max_inc ]; then\n      max_inc=${inc[$i]}\n    fi\n    if [ ${dec[$i]} -gt $max_dec ]; then\n      max_dec=${dec[$i]}\n    fi\n    if [ $max_inc -eq $max_dec ]; then\n      if [ $max_inc -gt $max_sum ]; then\n        max_sum=$max_inc\n      fi\n    fi\n  done\n\n  echo $max_sum"
  ]
}