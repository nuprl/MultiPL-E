{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n#\n# $1 is an integer\nis_Sum_Of_Powers_Of_Two() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    is_Sum_Of_Powers_Of_Two \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"7\") = \"false\" ]]\n    [[ $(candidate \"14\") = \"true\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "\tlocal num=$1\n\tlocal sum=0\n\tlocal pow=0\n\twhile [ $num -gt 0 ]; do\n\t\tpow=$(echo \"l($num)/l(2)\" | bc -l)\n\t\tpow=${pow%.*}\n\t\tnum=$((num - 2**pow))\n\t\tsum=$((sum + 2**pow))\n\tdone\n\tif [ $sum -eq $1 ]; then\n\t\techo \"True\"\n\telse\n\t\techo \"False\"\n\tfi",
    "  local n=$1\n  local sum=0\n  local i=0\n  while [ $n -gt 0 ]; do\n    if [ $((n%2)) -eq 1 ]; then\n      sum=$((sum+2**i))\n    fi\n    n=$((n/2))\n    i=$((i+1))\n  done\n  echo $sum",
    "    if [[ $1 -eq 0 ]]; then\n        echo \"0 is not a sum of powers of 2\"\n        return 1\n    fi\n    if [[ $1 -eq 1 ]]; then\n        echo \"1 is a sum of powers of 2\"\n        return 0\n    fi\n    if [[ $1 -lt 0 ]]; then\n        echo \"Negative numbers are not allowed\"\n        return 1\n    fi\n    local number=$1\n    local power=0\n    local sum=0\n    while [[ $number -gt 0 ]]; do\n        if [[ $((number % 2)) -eq 1 ]]; then\n            sum=$((sum + 2**power))\n        fi\n        number=$((number / 2))\n        power=$((power + 1))\n    done\n    if [[ $sum -eq $1 ]]; then\n        echo \"$1 is a sum of powers of 2\"\n        return 0\n    else\n        echo \"$1 is not a sum of powers of 2\"\n        return 1\n    fi",
    "  local num=$1\n  local sum=0\n  local i=0\n  while [ $sum -lt $num ]; do\n    sum=$((2**i))\n    if [ $sum -eq $num ]; then\n      echo \"True\"\n      return\n    fi\n    i=$((i+1))\n  done\n  echo \"False\"",
    "    local number=$1\n    local sum=0\n    local power=0\n    local i=0\n    for ((i=0; i<=number; i++)); do\n        power=$((2**i))\n        if [[ $power -gt $number ]]; then\n            break\n        fi\n        sum=$((sum+power))\n    done\n    if [[ $sum -eq $number ]]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "    local num=$1\n    local sum=0\n    local i=0\n    while [ $num -gt 0 ]; do\n        if [ $((num & 1)) -eq 1 ]; then\n            sum=$((sum + 2**i))\n        fi\n        num=$((num >> 1))\n        i=$((i + 1))\n    done\n    echo $sum",
    "    local -i n=$1\n    local -i i=0\n    local -i sum=0\n    while (( sum < n )); do\n        (( sum += 2**i ))\n        (( i++ ))\n    done\n    (( sum == n )) && echo \"True\" || echo \"False\"",
    "    local num=$1\n    local sum=0\n    local i=0\n    while [ $num -gt 0 ]; do\n        if [ $((num%2)) -eq 1 ]; then\n            sum=$((sum+2**i))\n        fi\n        num=$((num/2))\n        i=$((i+1))\n    done\n    echo $sum",
    "    local number=$1\n    local sum=0\n    local power=1\n    while [[ $number -gt 0 ]]; do\n        if [[ $((number % 2)) -eq 1 ]]; then\n            sum=$((sum + power))\n        fi\n        number=$((number / 2))\n        power=$((power * 2))\n    done\n    echo $sum",
    "    if [[ $1 -lt 0 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 0 ]]; then\n        echo \"True\"\n        return\n    fi\n    if [[ $1 -eq 1 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 2 ]]; then\n        echo \"True\"\n        return\n    fi\n    if [[ $1 -eq 3 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 4 ]]; then\n        echo \"True\"\n        return\n    fi\n    if [[ $1 -eq 5 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 6 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 7 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 8 ]]; then\n        echo \"True\"\n        return\n    fi\n    if [[ $1 -eq 9 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 10 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 11 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 12 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 13 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 14 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 15 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 16 ]]; then\n        echo \"True\"\n        return\n    fi\n    if [[ $1 -eq 17 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 18 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq 19 ]]; then\n        echo \"False\"\n        return\n    fi\n    if [[ $1 -eq",
    "  if [ $1 -eq 0 ]; then\n    echo \"0 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 1 ]; then\n    echo \"1 is a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 2 ]; then\n    echo \"2 is a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 3 ]; then\n    echo \"3 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 4 ]; then\n    echo \"4 is a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 5 ]; then\n    echo \"5 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 6 ]; then\n    echo \"6 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 7 ]; then\n    echo \"7 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 8 ]; then\n    echo \"8 is a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 9 ]; then\n    echo \"9 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 10 ]; then\n    echo \"10 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 11 ]; then\n    echo \"11 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 12 ]; then\n    echo \"12 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 13 ]; then\n    echo \"13 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 14 ]; then\n    echo \"14 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 15 ]; then\n    echo \"15 is not a sum of powers of 2\"\n    return\n  fi\n  if [ $1 -eq 16 ]; then\n    echo \"16 is a sum of",
    "    local number=$1\n    local sum=0\n    local power=0\n    while [ $number -gt 0 ]\n    do\n        power=$(( $number & -$number ))\n        sum=$(( $sum + $power ))\n        number=$(( $number - $power ))\n    done\n    if [ $sum -eq $1 ]\n    then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "    if [ $1 -lt 0 ]; then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi",
    "    local number=$1\n    local sum=0\n    local power=0\n    while [ $sum -lt $number ]\n    do\n        power=$(($power+1))\n        sum=$((2**$power))\n    done\n    if [ $sum -eq $number ]\n    then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi",
    "    local num=$1\n    local sum=0\n    local power=0\n    while [ $num -gt 0 ]; do\n        if [ $((num % 2)) -eq 1 ]; then\n            sum=$((sum + 2**power))\n        fi\n        num=$((num / 2))\n        power=$((power + 1))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local power=1\n    while [ $n -gt 0 ]; do\n        if [ $((n % 2)) -eq 1 ]; then\n            sum=$((sum + power))\n        fi\n        power=$((power * 2))\n        n=$((n / 2))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    local i=0\n    while (( $n > 0 )); do\n        if (( $n & 1 )); then\n            (( sum += 2 ** i ))\n        fi\n        (( n >>= 1 ))\n        (( i++ ))\n    done\n    echo $sum",
    "  local n=$1\n  local sum=0\n  local i=0\n  while [ $sum -lt $n ]\n  do\n    sum=$((2**i + sum))\n    i=$((i+1))\n  done\n  if [ $sum -eq $n ]\n  then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "    local n=$1\n    local sum=0\n    local i=0\n    while [ $n -gt 0 ]\n    do\n        if [ $((n%2)) -eq 1 ]\n        then\n            sum=$((sum+2**i))\n        fi\n        n=$((n/2))\n        i=$((i+1))\n    done\n    echo $sum",
    "    local number=$1\n    local sum=0\n    local power=0\n    while [ $number -gt 0 ]; do\n        if [ $((number % 2)) -eq 1 ]; then\n            sum=$((sum + 2**power))\n        fi\n        number=$((number / 2))\n        power=$((power + 1))\n    done\n    echo $sum"
  ]
}