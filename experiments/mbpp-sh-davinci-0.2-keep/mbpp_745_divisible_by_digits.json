{
  "name": "mbpp_745_divisible_by_digits",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n#\n# $1 is an integer\n# $2 is an integer\ndivisible_by_digits() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    divisible_by_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"22\") = \"1 2 3 4 5 6 7 8 9 11 12 15 22\" ]]\n    [[ $(candidate \"1\" \"15\") = \"1 2 3 4 5 6 7 8 9 11 12 15\" ]]\n    [[ $(candidate \"20\" \"25\") = \"22 24\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local number=$1\n    local divisor=$2\n    local remainder=$((number % divisor))\n    if [ $remainder -eq 0 ]\n    then\n        return 0\n    else\n        return 1\n    fi",
    "    local num=$1\n    local divisor=$2\n    local digit\n    local result=0\n    while [ $num -gt 0 ]; do\n        digit=$((num % 10))\n        if [ $digit -ne 0 ]; then\n            if [ $((divisor % digit)) -eq 0 ]; then\n                result=1\n            else\n                result=0\n                break\n            fi\n        fi\n        num=$((num / 10))\n    done\n    echo $result",
    "    local num=$1\n    local divisor=$2\n    local digit\n    for (( digit=0; digit<10; digit++ )); do\n        if (( num % digit == 0 )); then\n            (( divisor *= 10 ))\n        fi\n    done\n    echo $divisor",
    "    local num=$1\n    local divisor=$2\n    local remainder=$(($num % $divisor))\n    if [ $remainder -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local num=$1\n  local divisor=$2\n  local num_len=${#num}\n  local i\n  for ((i=0; i<num_len; i++)); do\n    local digit=${num:$i:1}\n    if [[ $digit -eq 0 ]]; then\n      continue\n    fi\n    if [[ $divisor -ne 0 ]] && [[ $((divisor % digit)) -ne 0 ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local num=$1\n    local divisor=$2\n    local digit\n    while [ $num -gt 0 ]; do\n        digit=$(( num % 10 ))\n        if [ $digit -eq 0 ] || [ $(( divisor % digit )) -ne 0 ]; then\n            return 1\n        fi\n        num=$(( num / 10 ))\n    done\n    return 0",
    "  local num=$1\n  local divisor=$2\n  local remainder=$(($num % $divisor))\n  if [ $remainder -eq 0 ]; then\n    echo \"True\"\n  else\n    echo \"False\"\n  fi",
    "    local num=$1\n    local divisor=$2\n    local remainder=$((num % divisor))\n    if [ $remainder -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local num=$1\n    local divisor=$2\n    local digit\n    while [ $num -gt 0 ]; do\n        digit=$(($num % 10))\n        if [ $digit -eq 0 ]; then\n            return 1\n        fi\n        if [ $(($divisor % $digit)) -ne 0 ]; then\n            return 1\n        fi\n        num=$(($num / 10))\n    done\n    return 0",
    "    local number=$1\n    local divisor=$2\n    local remainder=$((number % divisor))\n    if [ $remainder -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local num=$1\n  local divisor=$2\n  local remainder=$((num % divisor))\n  if [ $remainder -eq 0 ]; then\n    return 0\n  else\n    return 1\n  fi",
    "  local num=$1\n  local divisor=$2\n  local digit\n  local result=0\n  while [ $num -gt 0 ]; do\n    digit=$((num % 10))\n    if [ $digit -eq 0 ]; then\n      result=1\n      break\n    fi\n    if [ $((divisor % digit)) -ne 0 ]; then\n      result=1\n      break\n    fi\n    num=$((num / 10))\n  done\n  echo $result",
    "    local num=$1\n    local divisor=$2\n    local digit\n    while [ $num -gt 0 ]; do\n        digit=$(( $num % 10 ))\n        if [ $digit -eq 0 ]; then\n            return 1\n        fi\n        if [ $(( $divisor % $digit )) -ne 0 ]; then\n            return 1\n        fi\n        num=$(( $num / 10 ))\n    done\n    return 0",
    "    local num=$1\n    local divisor=$2\n    local remainder=$((num % divisor))\n    if [[ $remainder -eq 0 ]]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local num=$1\n    local divisor=$2\n    local digit\n    while [ $num -gt 0 ]; do\n        digit=$(( $num % 10 ))\n        if [ $digit -eq 0 ]; then\n            return 1\n        fi\n        if [ $(( $divisor % $digit )) -ne 0 ]; then\n            return 1\n        fi\n        num=$(( $num / 10 ))\n    done\n    return 0",
    "  local num=$1\n  local divisor=$2\n  local digit\n  while [ $num -gt 0 ]; do\n    digit=$((num % 10))\n    if [ $digit -eq 0 ]; then\n      return 1\n    fi\n    if [ $((num % digit)) -ne 0 ]; then\n      return 1\n    fi\n    num=$((num / 10))\n  done\n  return 0",
    "  local number=$1\n  local divisor=$2\n  local remainder=$((number % divisor))\n  if [ $remainder -eq 0 ]; then\n    return 0\n  else\n    return 1\n  fi",
    "    local number=$1\n    local divisor=$2\n    local remainder=$(($number % $divisor))\n    if [ $remainder -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local number=$1\n  local divisor=$2\n  local result=0\n  while [ $number -gt 0 ]; do\n    local digit=$((number % 10))\n    if [ $digit -eq 0 ]; then\n      return 1\n    fi\n    if [ $((divisor % digit)) -ne 0 ]; then\n      return 1\n    fi\n    number=$((number / 10))\n  done\n  return 0",
    "    local num=$1\n    local divisor=$2\n    local remainder=$((num % divisor))\n    if [[ $remainder -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi"
  ]
}