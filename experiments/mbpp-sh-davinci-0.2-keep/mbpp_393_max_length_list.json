{
  "name": "mbpp_393_max_length_list",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"",
    "    local max_length=0\n    local max_length_list=()\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"",
    "    local max_length=0\n    local max_list=\n    while read -r list; do\n        if [[ ${#list} -gt $max_length ]]; then\n            max_length=${#list}\n            max_list=$list\n        fi\n    done <<< \"$1\"\n    echo \"$max_list\"",
    "    local max_length=0\n    local max_list=\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if (( length > max_length )); then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo \"$max_list\"",
    "    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"",
    "    local max_length=0\n    local max_length_list=\"\"\n    local list=\"\"\n    local length=0\n    for list in $1; do\n        length=`echo $list | wc -w`\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list",
    "    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    for list in $1; do\n        length=${#list}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo ${max_length_list[@]}",
    "    local max_length=0\n    local max_length_list=''\n    local list=''\n    local length=0\n    for list in $1; do\n        length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo \"$max_length_list\"",
    "    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    for item in $1; do\n        if [[ $item == *\"\\n\"* ]]; then\n            list+=(\"$item\")\n            length=${#list[@]}\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n                max_length_list=(\"${list[@]}\")\n            fi\n            list=()\n        else\n            list+=(\"$item\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"",
    "    local max_length=0\n    local max_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_list[@]}\"",
    "    local max_length=0\n    local max_length_list\n    local list\n    for list in $1; do\n        local length=$(echo $list | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list",
    "    # We need to use a temporary file because we're going to be\n    # reading and writing to the same file.\n    tmp_file=$(mktemp)\n    echo \"$1\" > \"$tmp_file\"\n    while read -r line; do\n        # We need to use a temporary file because we're going to be\n        # reading and writing to the same file.\n        tmp_file2=$(mktemp)\n        echo \"$line\" > \"$tmp_file2\"\n        while read -r line2; do\n            # We need to use a temporary file because we're going to be\n            # reading and writing to the same file.\n            tmp_file3=$(mktemp)\n            echo \"$line2\" > \"$tmp_file3\"\n            while read -r line3; do\n                # We need to use a temporary file because we're going to be\n                # reading and writing to the same file.\n                tmp_file4=$(mktemp)\n                echo \"$line3\" > \"$tmp_file4\"\n                while read -r line4; do\n                    # We need to use a temporary file because we're going to be\n                    # reading and writing to the same file.\n                    tmp_file5=$(mktemp)\n                    echo \"$line4\" > \"$tmp_file5\"\n                    while read -r line5; do\n                        # We need to use a temporary file because we're going to be\n                        # reading and writing to the same file.\n                        tmp_file6=$(mktemp)\n                        echo \"$line5\" > \"$tmp_file6\"\n                        while read -r line6; do\n                            # We need to use a temporary file because we're going to be\n                            # reading and writing to the same file.\n                            tmp_file7=$(mktemp)\n                            echo \"$line6\" > \"$tmp_file7\"\n                            while read -r line7; do\n                                # We need to use a temporary file because we're going to be\n                                # reading and writing to the same file.\n                                tmp_file8=$(mktemp)\n                                echo \"$line7\" > \"$tmp_file8\"\n                                while read -r line8; do\n                                    # We need to use a temporary file",
    "    local max_length=0\n    local max_length_list=''\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo \"$max_length_list\"",
    "  local max_length=0\n  local max_length_list=''\n  local curr_length=0\n  local curr_list=''\n  while read -r curr_list; do\n    curr_length=$(echo \"$curr_list\" | wc -w)\n    if (( curr_length > max_length )); then\n      max_length=$curr_length\n      max_length_list=\"$curr_list\"\n    fi\n  done\n  echo \"$max_length_list\"",
    "    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    for list in $1; do\n        length=${#list}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"$list\")\n        elif (( length == max_length )); then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"",
    "    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"",
    "    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"",
    "    local max_length=0\n    local max_length_list=\"\"\n    local list=\"\"\n    local length=0\n    for list in $1; do\n        length=${#list}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list",
    "  local max_length=0\n  local max_length_list=()\n  local list=()\n  local list_length=0\n  while read -r line; do\n    list=($line)\n    list_length=${#list[@]}\n    if [[ $list_length -gt $max_length ]]; then\n      max_length=$list_length\n      max_length_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_length_list[@]}\"",
    "    local max_length=0\n    local max_length_list=()\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ \"$length\" -gt \"$max_length\" ]; then\n            max_length=\"$length\"\n            max_length_list=(\"$list\")\n        elif [ \"$length\" -eq \"$max_length\" ]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\""
  ]
}