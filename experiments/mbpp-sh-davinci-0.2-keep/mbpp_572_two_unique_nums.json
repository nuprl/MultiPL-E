{
  "name": "mbpp_572_two_unique_nums",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to remove duplicate numbers from a given number of lists.\n#\n# $1 is a space-separated list\ntwo_unique_nums() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    two_unique_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 2 3 4 5\") = \"1 4 5\" ]]\n    [[ $(candidate \"1 2 3 2 4 5\") = \"1 3 4 5\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 2 3 4 5\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    # $1 is a space-separated list\n    # $2 is a space-separated list\n    #\n    # return a space-separated list of unique numbers\n    #\n    # use a python script to do the work\n    #\n    # the python script will take two space-separated lists as input\n    # and return a space-separated list of unique numbers\n    #\n    # the python script will be called from this function\n    #\n    # the python script will be called with two space-separated lists as arguments\n    #\n    # the python script will return a space-separated list of unique numbers\n    #\n    # the python script will be called as follows:\n    #\n    #   python3 unique_nums.py \"$1\" \"$2\"\n    #\n    # the python script will be called from this function\n    #\n    # the python script will be called with two space-separated lists as arguments\n    #\n    # the python script will return a space-separated list of unique numbers\n    #\n    # the python script will be called as follows:\n    #\n    #   python3 unique_nums.py \"$1\" \"$2\"\n    #\n    # the python script will be called from this function\n    #\n    # the python script will be called with two space-separated lists as arguments\n    #\n    # the python script will return a space-separated list of unique numbers\n    #\n    # the python script will be called as follows:\n    #\n    #   python3 unique_nums.py \"$1\" \"$2\"\n    #\n    # the python script will be called from this function\n    #\n    # the python script will be called with two space-separated lists as arguments\n    #\n    # the python script will return a space-separated list of unique numbers\n    #\n    # the python script will be called as follows:\n    #\n    #   python3 unique_nums.py \"$1\" \"$2\"\n    #\n    # the python script will be called from this function\n    #\n    # the python script will be called with two space-separated lists as arguments\n    #\n    # the python script will return a space-separated list of unique numbers\n",
    "    local -a nums=($1)\n    local -a unique_nums=()\n    for num in \"${nums[@]}\"; do\n        if [[ ! \" ${unique_nums[@]} \" =~ \" ${num} \" ]]; then\n            unique_nums+=($num)\n        fi\n    done\n    echo \"${unique_nums[@]}\"",
    "    local nums=($1)\n    local unique_nums=()\n    local num\n    for num in ${nums[@]}; do\n        if [[ ! \" ${unique_nums[@]} \" =~ \" ${num} \" ]]; then\n            unique_nums+=($num)\n        fi\n    done\n    echo ${unique_nums[@]}",
    "    local nums=($1)\n    local nums_len=${#nums[@]}\n    local nums_set=($(echo \"${nums[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    local nums_set_len=${#nums_set[@]}\n\n    if [[ $nums_len -eq $nums_set_len ]]; then\n        echo \"No duplicates found\"\n    else\n        echo \"Duplicates found\"\n    fi",
    "    # Remove duplicates\n    local unique_nums=($(echo \"$1\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    # Check if there are more than 2 unique numbers\n    if [[ ${#unique_nums[@]} -gt 2 ]]; then\n        # If there are more than 2 unique numbers, return the first 2\n        echo \"${unique_nums[0]} ${unique_nums[1]}\"\n    else\n        # If there are 2 or less unique numbers, return them all\n        echo \"${unique_nums[@]}\"\n    fi",
    "    echo $1 | tr ' ' '\\n' | sort | uniq -u | tr '\\n' ' '",
    "    local nums=($1)\n    local nums_len=${#nums[@]}\n    local i=0\n    local j=0\n    local k=0\n    local unique_nums=()\n    local unique_nums_len=0\n\n    for ((i=0; i<nums_len; i++)); do\n        for ((j=i+1; j<nums_len; j++)); do\n            if [[ ${nums[$i]} -eq ${nums[$j]} ]]; then\n                unset nums[$j]\n            fi\n        done\n    done\n\n    unique_nums=(${nums[@]})\n    unique_nums_len=${#unique_nums[@]}\n\n    for ((k=0; k<unique_nums_len; k++)); do\n        echo ${unique_nums[$k]}\n    done",
    "    local nums=($1)\n    local unique_nums=()\n    local num_counts=()\n    local i=0\n    local j=0\n    for ((i=0; i<${#nums[@]}; i++)); do\n        local num=${nums[$i]}\n        local found=0\n        for ((j=0; j<${#unique_nums[@]}; j++)); do\n            if [ ${unique_nums[$j]} -eq $num ]; then\n                found=1\n                break\n            fi\n        done\n        if [ $found -eq 0 ]; then\n            unique_nums+=($num)\n            num_counts+=(1)\n        else\n            num_counts[$j]=$((num_counts[$j] + 1))\n        fi\n    done\n    for ((i=0; i<${#unique_nums[@]}; i++)); do\n        if [ ${num_counts[$i]} -eq 1 ]; then\n            echo ${unique_nums[$i]}\n        fi\n    done",
    "  local nums=($1)\n  local unique_nums=()\n  local i=0\n  local j=0\n  local k=0\n  local is_unique=true\n  for ((i=0; i<${#nums[@]}; i++))\n  do\n    is_unique=true\n    for ((j=0; j<${#unique_nums[@]}; j++))\n    do\n      if [ ${nums[$i]} -eq ${unique_nums[$j]} ]\n      then\n        is_unique=false\n        break\n      fi\n    done\n    if [ $is_unique = true ]\n    then\n      unique_nums[$k]=${nums[$i]}\n      ((k++))\n    fi\n  done\n  echo ${unique_nums[@]}",
    "    for i in $1; do\n        for j in $1; do\n            if [ $i -ne $j ]; then\n                echo \"$i $j\"\n            fi\n        done\n    done",
    "    local nums=\"$1\"\n    local num_list=($nums)\n    local unique_nums=()\n    local num_count=0\n    local num_index=0\n    local unique_count=0\n    local unique_index=0\n    local num_found=0\n\n    # Build a list of unique numbers\n    for num in \"${num_list[@]}\"; do\n        num_found=0\n        for unique_num in \"${unique_nums[@]}\"; do\n            if [ \"$num\" == \"$unique_num\" ]; then\n                num_found=1\n                break\n            fi\n        done\n        if [ \"$num_found\" -eq 0 ]; then\n            unique_nums[$unique_index]=\"$num\"\n            unique_index=$((unique_index + 1))\n        fi\n    done\n\n    # Print the unique numbers\n    for unique_num in \"${unique_nums[@]}\"; do\n        echo \"$unique_num\"\n    done",
    "    local nums=($1)\n    local unique_nums=()\n    local num\n    for num in ${nums[@]}; do\n        if [[ ! \" ${unique_nums[@]} \" =~ \" ${num} \" ]]; then\n            unique_nums+=($num)\n        fi\n    done\n    echo ${unique_nums[@]}",
    "    local nums=\"$1\"\n    local nums_array=($nums)\n    local nums_len=${#nums_array[@]}\n    local nums_set=()\n    local nums_set_len=0\n    local i=0\n    local j=0\n    local k=0\n\n    for ((i=0; i<nums_len; i++)); do\n        for ((j=0; j<nums_set_len; j++)); do\n            if [ ${nums_array[$i]} -eq ${nums_set[$j]} ]; then\n                break\n            fi\n        done\n        if [ $j -eq $nums_set_len ]; then\n            nums_set[$nums_set_len]=${nums_array[$i]}\n            nums_set_len=$((nums_set_len+1))\n        fi\n    done\n\n    for ((k=0; k<nums_set_len; k++)); do\n        echo -n \"${nums_set[$k]} \"\n    done\n    echo",
    "  echo \"$1\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '",
    "    # Convert the string to an array\n    local -a nums=($1)\n    # Sort the array\n    nums=($(printf '%s\\n' \"${nums[@]}\" | sort -n))\n    # Get the length of the array\n    local len=${#nums[@]}\n    # If the length is less than 2, return the string\n    if [[ $len -lt 2 ]]; then\n        echo \"$1\"\n    # Otherwise, return the first and last elements of the array\n    else\n        echo \"${nums[0]} ${nums[-1]}\"\n    fi",
    "    local nums=$1\n    local num_list=($nums)\n    local unique_nums=()\n    for num in ${num_list[@]}; do\n        if [[ ! \" ${unique_nums[@]} \" =~ \" ${num} \" ]]; then\n            unique_nums+=($num)\n        fi\n    done\n    echo ${unique_nums[@]}",
    "    local nums=\"$1\"\n    local num_list=($nums)\n    local num_list_len=${#num_list[@]}\n    local unique_nums=()\n    local unique_nums_len=0\n    local i=0\n    local j=0\n    local is_unique=1\n\n    for ((i=0; i<num_list_len; i++)); do\n        is_unique=1\n        for ((j=0; j<unique_nums_len; j++)); do\n            if [[ ${num_list[i]} -eq ${unique_nums[j]} ]]; then\n                is_unique=0\n                break\n            fi\n        done\n        if [[ $is_unique -eq 1 ]]; then\n            unique_nums[unique_nums_len]=${num_list[i]}\n            unique_nums_len=$((unique_nums_len+1))\n        fi\n    done\n\n    echo ${unique_nums[@]}",
    "    local nums=($1)\n    local unique_nums=($(echo \"${nums[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    echo \"${unique_nums[@]}\"",
    "    local nums=($1)\n    local unique_nums=()\n    for num in ${nums[@]}; do\n        if [[ ! \" ${unique_nums[@]} \" =~ \" ${num} \" ]]; then\n            unique_nums+=($num)\n        fi\n    done\n    echo ${unique_nums[@]}",
    "    local nums=($1)\n    local nums_len=${#nums[@]}\n    local i=0\n    local j=0\n    local k=0\n    local unique_nums=()\n    local unique_nums_len=0\n    local is_unique=1\n\n    for ((i=0; i<nums_len; i++)); do\n        is_unique=1\n        for ((j=0; j<unique_nums_len; j++)); do\n            if [[ ${nums[i]} -eq ${unique_nums[j]} ]]; then\n                is_unique=0\n                break\n            fi\n        done\n        if [[ $is_unique -eq 1 ]]; then\n            unique_nums[k]=${nums[i]}\n            ((k++))\n            ((unique_nums_len++))\n        fi\n    done\n\n    echo ${unique_nums[@]}"
  ]
}