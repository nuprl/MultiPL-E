{
  "name": "mbpp_389_find_lucas",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the n'th lucas number.\n#\n# $1 is an integer\nfind_lucas() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    find_lucas \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"9\") = \"76\" ]]\n    [[ $(candidate \"4\") = \"7\" ]]\n    [[ $(candidate \"3\") = \"4\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local n_1=2\n    local n_2=1\n    local i=2\n    if [ $n -eq 1 ]; then\n        echo $n_2\n    elif [ $n -eq 2 ]; then\n        echo $n_1\n    else\n        while [ $i -lt $n ]; do\n            local temp=$n_1\n            n_1=$((n_1+n_2))\n            n_2=$temp\n            i=$((i+1))\n        done\n        echo $n_1\n    fi",
    "    local n=$1\n    local lucas_0=2\n    local lucas_1=1\n    local lucas_n=0\n    local i=0\n\n    if [ $n -eq 0 ]; then\n        echo $lucas_0\n    elif [ $n -eq 1 ]; then\n        echo $lucas_1\n    else\n        while [ $i -lt $n ]; do\n            lucas_n=$((lucas_0 + lucas_1))\n            lucas_0=$lucas_1\n            lucas_1=$lucas_n\n            i=$((i + 1))\n        done\n        echo $lucas_n\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 2\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(($1 - 1))) + $(find_lucas $(($1 - 2))) ))\n    fi",
    "    local n=$1\n    local a=2\n    local b=1\n    local c\n    if [[ $n -eq 1 ]]; then\n        echo $a\n    elif [[ $n -eq 2 ]]; then\n        echo $b\n    else\n        for ((i=3; i<=n; i++)); do\n            c=$((a+b))\n            a=$b\n            b=$c\n        done\n        echo $c\n    fi",
    "    local n=$1\n    local a=2\n    local b=1\n    local c=0\n    local i=0\n    while [ $i -lt $n ]; do\n        c=$((a+b))\n        a=$b\n        b=$c\n        i=$((i+1))\n    done\n    echo $c",
    "  # If $1 is less than 1, return 2.\n  if [ $1 -lt 1 ]; then\n    echo 2\n  # If $1 is 1, return 1.\n  elif [ $1 -eq 1 ]; then\n    echo 1\n  # Otherwise, return the sum of the previous two lucas numbers.\n  else\n    echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n  fi",
    "    if [ $1 -eq 1 ]; then\n        echo 2\n    elif [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi",
    "\tif [ $1 -eq 1 ]; then\n\t\techo 2\n\telif [ $1 -eq 2 ]; then\n\t\techo 1\n\telse\n\t\techo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n\tfi",
    "  if [ $1 -eq 1 ]; then\n    echo 2\n  elif [ $1 -eq 2 ]; then\n    echo 1\n  else\n    echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n  fi",
    "    local n=$1\n    local lucas_0=2\n    local lucas_1=1\n    local lucas_n=0\n    local i=0\n    if [ $n -eq 0 ]; then\n        lucas_n=$lucas_0\n    elif [ $n -eq 1 ]; then\n        lucas_n=$lucas_1\n    else\n        while [ $i -lt $n ]; do\n            lucas_n=$((lucas_0 + lucas_1))\n            lucas_0=$lucas_1\n            lucas_1=$lucas_n\n            i=$((i + 1))\n        done\n    fi\n    echo $lucas_n",
    "    if [ $1 -eq 0 ]; then\n        echo 2\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 2\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 2\n    elif [[ $1 -eq 1 ]]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 2\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi",
    "    if [ $1 -eq 0 ]\n    then\n        echo 2\n    elif [ $1 -eq 1 ]\n    then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi",
    "  if [ $1 -eq 0 ]; then\n    echo 2\n  elif [ $1 -eq 1 ]; then\n    echo 1\n  else\n    echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n  fi",
    "    local n=$1\n    local a=2\n    local b=1\n    local i=0\n    while [ $i -lt $n ]; do\n        local c=$((a+b))\n        a=$b\n        b=$c\n        i=$((i+1))\n    done\n    echo $a",
    "    if [ $1 -eq 0 ]; then\n        echo 2\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 2\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 2\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(find_lucas $(( $1 - 1 ))) + $(find_lucas $(( $1 - 2 ))) ))\n    fi"
  ]
}