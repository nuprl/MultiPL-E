{
  "name": "mbpp_765_is_polite",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n#\n# $1 is an integer\nis_polite() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    is_polite \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"11\" ]]\n    [[ $(candidate \"4\") = \"7\" ]]\n    [[ $(candidate \"9\") = \"13\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local i=2\n    local sum=0\n    while [ $i -lt $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [ $sum -eq $n ]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local n=$1\n  local i=2\n  while [ $i -le $n ]; do\n    if [ $((n % i)) -eq 0 ]; then\n      echo $i\n      return\n    fi\n    i=$((i + 1))\n  done\n  echo $n",
    "    local n=$1\n    local i=2\n    local flag=0\n    while [ $i -le $n ]\n    do\n        if [ $((n%i)) -eq 0 ]\n        then\n            flag=1\n            break\n        fi\n        i=$((i+1))\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local num=$1\n    local sum=0\n    while [ $num -gt 0 ]; do\n        local digit=$((num % 10))\n        sum=$((sum + digit))\n        num=$((num / 10))\n    done\n    if [ $((sum % 2)) -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local i=2\n    local sum=0\n    while [[ $i -le $n ]]; do\n        if [[ $((n % i)) -eq 0 ]]; then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [[ $sum -eq $n ]]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local i=$1\n    local j=0\n    local sum=0\n    while [ $i -gt 0 ]; do\n        j=$((i%10))\n        sum=$((sum+j))\n        i=$((i/10))\n    done\n    if [ $((sum%2)) -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local i=2\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        if [ $((n%i)) -eq 0 ]\n        then\n            flag=1\n            break\n        fi\n        i=$((i+1))\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local n=$1\n    local i=2\n    while [ $i -lt $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ $i -lt $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [ $sum -eq $n ]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local i=2\n    local sum=0\n    while [ $i -le $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [ $sum -eq $n ]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local n=$1\n    local i=2\n    local sum=0\n    local divisor=0\n    while [ $i -lt $n ]\n    do\n        if [ $(($n % $i)) -eq 0 ]\n        then\n            sum=$(($sum + $i))\n            divisor=$(($divisor + 1))\n        fi\n        i=$(($i + 1))\n    done\n    if [ $divisor -eq 0 ]\n    then\n        return 1\n    fi\n    if [ $(($sum / $divisor)) -eq $n ]\n    then\n        return 0\n    fi\n    return 1",
    "    local n=$1\n    local i=2\n    while [ $i -lt $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "    local n=$1\n    local i=2\n    local sum=0\n    while [ $i -le $n ]\n    do\n        if [ $((n % i)) -eq 0 ]\n        then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [ $sum -eq $n ]\n    then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ $i -le $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [ $((sum % n)) -eq 0 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local n=$1\n  local i=1\n  local sum=0\n  while [ $i -le $n ]; do\n    if [ $((n % i)) -eq 0 ]; then\n      sum=$((sum + i))\n    fi\n    i=$((i + 1))\n  done\n  if [ $((sum % n)) -eq 0 ]; then\n    return 0\n  else\n    return 1\n  fi",
    "    local n=$1\n    local i=2\n    local sum=0\n    while [ $i -lt $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [ $sum -eq $n ]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local i=2\n    local sum=0\n    while [ $i -lt $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [ $sum -eq $n ]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local n=$1\n  local i=1\n  local sum=0\n  while [ $i -le $n ]; do\n    if [ $((n % i)) -eq 0 ]; then\n      sum=$((sum + i))\n    fi\n    i=$((i + 1))\n  done\n  if [ $((sum % n)) -eq 0 ]; then\n    return 0\n  else\n    return 1\n  fi",
    "    local n=$1\n    local i=1\n    local sum=0\n    while (( i <= n )); do\n        if (( n % i == 0 )); then\n            (( sum += i ))\n        fi\n        (( i++ ))\n    done\n    if (( sum == n )); then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ $i -le $n ]; do\n        if [ $((n % i)) -eq 0 ]; then\n            sum=$((sum + i))\n        fi\n        i=$((i + 1))\n    done\n    if [ $((sum / n)) -eq $n ]; then\n        return 0\n    else\n        return 1\n    fi"
  ]
}