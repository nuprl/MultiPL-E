{
  "name": "mbpp_752_jacobsthal_num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n#\n# $1 is an integer\njacobsthal_num() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    jacobsthal_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"11\" ]]\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"4\") = \"5\" ]]\n    [[ $(candidate \"13\") = \"2731\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    for ((i=0; i<n; i++)); do\n        c=$((a+2*b))\n        a=$b\n        b=$c\n    done\n    echo $a",
    "    if [ $1 -eq 0 ]\n    then\n        echo 0\n    elif [ $1 -eq 1 ]\n    then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 )) ) + 2 * $(jacobsthal_num $(( $1 - 2 )) ) ))\n    fi",
    "    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    for ((i=2; i<=n; i++)); do\n        c=$((a+2*b))\n        a=$b\n        b=$c\n    done\n    echo $c",
    "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n    fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n    fi",
    "  local n=$1\n  local a=0\n  local b=1\n  local c=0\n  for ((i=2; i<=n; i++)); do\n    c=$((a+2*b))\n    a=$b\n    b=$c\n  done\n  echo $c",
    "    local n=$1\n    local a=0\n    local b=1\n    local i=0\n    while [ $i -lt $n ]; do\n        local c=$((a + 2*b))\n        a=$b\n        b=$c\n        i=$((i+1))\n    done\n    echo $a",
    "    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    for ((i=0; i<n; i++)); do\n        c=$((a+2*b))\n        a=$b\n        b=$c\n    done\n    echo $a",
    "  local n=$1\n  local a=0\n  local b=1\n  local c=1\n  for (( i=2; i<=n; i++ )); do\n    c=$(( a + 2*b ))\n    a=$b\n    b=$c\n  done\n  echo $c",
    "    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    local i=0\n    while [ $i -lt $n ]; do\n        c=$((a+2*b))\n        a=$b\n        b=$c\n        i=$((i+1))\n    done\n    echo $a",
    "    if (( $1 < 0 )); then\n        echo \"Error: Argument to jacobsthal_num must be a non-negative integer\" >&2\n        return 1\n    fi\n\n    if (( $1 == 0 )); then\n        echo 0\n        return 0\n    fi\n\n    if (( $1 == 1 )); then\n        echo 1\n        return 0\n    fi\n\n    # Use a recursive function to find the nth jacobsthal number.\n    #\n    # $1 is an integer\n    _jacobsthal_num() {\n        if (( $1 == 0 )); then\n            echo 0\n            return 0\n        fi\n\n        if (( $1 == 1 )); then\n            echo 1\n            return 0\n        fi\n\n        local prev_prev_num=$(_jacobsthal_num $(( $1 - 2 )))\n        local prev_num=$(_jacobsthal_num $(( $1 - 1 )))\n\n        echo $(( $prev_prev_num + (2 * $prev_num) ))\n    }\n\n    _jacobsthal_num $1",
    "    local n=$1\n    local a=0\n    local b=1\n    local i=0\n    while [ $i -lt $n ]; do\n        local c=$((a + 2 * b))\n        a=$b\n        b=$c\n        i=$((i + 1))\n    done\n    echo $a",
    "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n    fi",
    "    if [ $1 -lt 0 ]; then\n        echo \"Error: argument must be a positive integer\"\n        return 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 1 ]; then\n        echo 1\n        return 0\n    fi\n    # j(n) = j(n-1) + 2*j(n-2)\n    jacobsthal_num $(( $1 - 1 ))\n    jacobsthal_num $(( $1 - 2 ))\n    echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))",
    "  local n=$1\n  local a=0\n  local b=1\n  local c=1\n  local i=2\n  while [[ $i -le $n ]]; do\n    c=$((a+2*b))\n    a=$b\n    b=$c\n    ((i++))\n  done\n  echo $c",
    "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 1\n  else\n    echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n  fi",
    "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n    fi",
    "    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    for ((i=0; i<n; i++)); do\n        c=$((a+2*b))\n        a=$b\n        b=$c\n    done\n    echo $a",
    "  local n=$1\n  local a=0\n  local b=1\n  local c=0\n  for ((i=2; i<=n; i++)); do\n    c=$((a+2*b))\n    a=$b\n    b=$c\n  done\n  echo $c",
    "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 )) ) + 2 * $(jacobsthal_num $(( $1 - 2 )) ) ))\n    fi"
  ]
}