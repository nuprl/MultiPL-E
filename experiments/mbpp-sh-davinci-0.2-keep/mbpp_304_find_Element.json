{
  "name": "mbpp_304_find_Element",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a python function to find element at a given index after number of rotations.\n#\n# $1 is a space-separated list\n# $2 is a newline-separated, space-separated list\n# $3 is an integer\n# $4 is an integer\nfind_Element() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    find_Element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"0 2\\n0 3\" \"2\" \"1\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4\" \"0 1\\n0 2\" \"1\" \"2\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"0 1\\n0 2\" \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    list=$1\n    list_rotated=$2\n    index=$3\n    rotations=$4\n    list_array=($list)\n    list_rotated_array=($list_rotated)\n    for ((i=0; i<$rotations; i++))\n    do\n        temp=${list_rotated_array[0]}\n        for ((j=0; j<${#list_rotated_array[@]}-1; j++))\n        do\n            list_rotated_array[$j]=${list_rotated_array[$j+1]}\n        done\n        list_rotated_array[${#list_rotated_array[@]}-1]=$temp\n    done\n    for ((i=0; i<${#list_array[@]}; i++))\n    do\n        if [ ${list_array[$i]} != ${list_rotated_array[$i]} ]\n        then\n            echo \"Not a rotation\"\n            return\n        fi\n    done\n    echo ${list_rotated_array[$index]}",
    "    local -n list=$1\n    local -n rotations=$2\n    local index=$3\n    local n=$4\n    local i=0\n    local j=0\n    local temp\n    local r\n    while [ $i -lt $n ]; do\n        r=${rotations[$i]}\n        while [ $j -lt $r ]; do\n            temp=${list[0]}\n            list=(\"${list[@]:1}\" \"$temp\")\n            j=$((j+1))\n        done\n        j=0\n        i=$((i+1))\n    done\n    echo ${list[$index]}",
    "    local -n arr=$1\n    local -n arr2=$2\n    local n=$3\n    local k=$4\n    local i\n    local j\n    local temp\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]; then\n                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n            fi\n        done\n    done\n    echo ${arr[k]}",
    "    local -n arr=$1\n    local -n arr2=$2\n    local index=$3\n    local rotations=$4\n    local -a new_arr\n    local -a new_arr2\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n    local -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -",
    "    local -n arr=$1\n    local -n rot=$2\n    local index=$3\n    local rotations=$4\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local temp_index=0\n    local temp_rot=0\n    local temp_rot_index=0\n    local temp_rot_index_value=0\n    local temp_rot_index_value_index=0\n    local temp_rot_index_value_index_value=0\n    local temp_rot_index_value_index_value_index=0\n    local temp_rot_index_value_index_value_index_value=0\n    local temp_rot_index_value_index_value_index_value_index=0\n    local temp_rot_index_value_index_value_index_value_index_value=0\n    local temp_rot_index_value_index_value_index_value_index_value_index=0\n    local temp_rot_index_value_index_value_index_value_index_value_index_value=0\n    local temp_rot_index_value_index_value_index_value_index_value_index_value_index=0\n    local temp_rot_index_value_index_value_index_value_index_value_index_value_index_value=0\n    local temp_rot_index_value_index_value_index_value_index_value_index_value_index_value_index=0\n    local temp_rot_index_value_index_value_index_value_index_value_index_value_index_value_index_value=0\n    local temp_rot_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index=0\n    local temp_rot_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value=0\n    local temp_rot_index_value_index_value_index_value_index_value_index_value_index_value_index",
    "    local -n arr=$1\n    local -n rotations=$2\n    local index=$3\n    local num_rotations=$4\n    local num_rotations_index=$((num_rotations % ${#rotations[@]}))\n    local index_after_rotation=$((index - num_rotations_index))\n    if [[ $index_after_rotation -lt 0 ]]; then\n        index_after_rotation=$((index_after_rotation + ${#rotations[@]}))\n    fi\n    echo ${arr[$index_after_rotation]}",
    "    local -n arr=$1\n    local -n arr2=$2\n    local index=$3\n    local rotations=$4\n    local new_index=$(((index + rotations) % ${#arr[@]}))\n    echo ${arr2[$new_index]}",
    "    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    arr=($1)\n    rot=($2)\n    index=$3\n    num_rot=$4\n    for ((i=0; i<num_rot; i++))\n    do\n        temp=${arr[0]}\n        for ((j=0; j<${#arr[@]}-1; j++))\n        do\n            arr[$j]=${arr[$j+1]}\n        done\n        arr[${#arr[@]}-1]=$temp\n    done\n    echo ${arr[$index]}",
    "    local -n arr=$1\n    local -n rotations=$2\n    local index=$3\n    local n=$4\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local temp2=0\n    local temp3=0\n    local temp4=0\n    local temp5=0\n    local temp6=0\n    local temp7=0\n    local temp8=0\n    local temp9=0\n    local temp10=0\n    local temp11=0\n    local temp12=0\n    local temp13=0\n    local temp14=0\n    local temp15=0\n    local temp16=0\n    local temp17=0\n    local temp18=0\n    local temp19=0\n    local temp20=0\n    local temp21=0\n    local temp22=0\n    local temp23=0\n    local temp24=0\n    local temp25=0\n    local temp26=0\n    local temp27=0\n    local temp28=0\n    local temp29=0\n    local temp30=0\n    local temp31=0\n    local temp32=0\n    local temp33=0\n    local temp34=0\n    local temp35=0\n    local temp36=0\n    local temp37=0\n    local temp38=0\n    local temp39=0\n    local temp40=0\n    local temp41=0\n    local temp42=0\n    local temp43=0\n    local temp44=0\n    local temp45=0\n    local temp46=0\n    local temp47=0\n    local temp48=0\n    local temp49=0\n    local temp50=0\n    local temp51=0\n    local temp52=0\n    local temp53=0\n    local temp54=0\n    local temp55=0\n    local temp56=0\n    local temp57=0\n    local temp58=0\n    local temp59=0\n    local temp60=0\n    local temp61=0\n    local temp62=0\n    local temp63=0\n    local temp64=0\n    local temp65=0\n    local temp66=0\n    local temp",
    "    local -n arr=$1\n    local -n arr2=$2\n    local n=$3\n    local index=$4\n    local i=0\n    local j=0\n    local temp=0\n    local temp2=0\n    local len=${#arr[@]}\n    local len2=${#arr2[@]}\n    local arr3=()\n    local arr4=()\n    local arr5=()\n    local arr6=()\n    local arr7=()\n    local arr8=()\n    local arr9=()\n    local arr10=()\n    local arr11=()\n    local arr12=()\n    local arr13=()\n    local arr14=()\n    local arr15=()\n    local arr16=()\n    local arr17=()\n    local arr18=()\n    local arr19=()\n    local arr20=()\n    local arr21=()\n    local arr22=()\n    local arr23=()\n    local arr24=()\n    local arr25=()\n    local arr26=()\n    local arr27=()\n    local arr28=()\n    local arr29=()\n    local arr30=()\n    local arr31=()\n    local arr32=()\n    local arr33=()\n    local arr34=()\n    local arr35=()\n    local arr36=()\n    local arr37=()\n    local arr38=()\n    local arr39=()\n    local arr40=()\n    local arr41=()\n    local arr42=()\n    local arr43=()\n    local arr44=()\n    local arr45=()\n    local arr46=()\n    local arr47=()\n    local arr48=()\n    local arr49=()\n    local arr50=()\n    local arr51=()\n    local arr52=()\n    local arr53=()\n    local arr54=()\n    local arr55=()\n    local arr56=()\n    local arr57=()\n    local arr58=()\n    local arr59=()\n    local arr60=()\n    local arr61=()\n    local arr62=()\n    local arr63=()\n    local arr64=()",
    "    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    arr=($1)\n    rot=($2)\n    for i in ${rot[@]}; do\n        arr=(${arr[@]:$i} ${arr[@]:0:$i})\n    done\n    echo ${arr[$3]}",
    "    local -n arr=$1\n    local -n arr2=$2\n    local index=$3\n    local rotations=$4\n    local len=${#arr[@]}\n    local len2=${#arr2[@]}\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n   ",
    "  local -n list=$1\n  local -n rotations=$2\n  local index=$3\n  local length=$4\n  local i=0\n  local j=0\n  local temp=0\n  local new_index=0\n  local new_index_list=()\n  local new_index_list_length=0\n  local new_index_list_index=0\n  local new_index_list_value=0\n  local new_index_list_rotation=0\n  local new_index_list_rotation_index=0\n  local new_index_list_rotation_value=0\n  local new_index_list_rotation_rotation=0\n  local new_index_list_rotation_rotation_index=0\n  local new_index_list_rotation_rotation_value=0\n  local new_index_list_rotation_rotation_rotation=0\n  local new_index_list_rotation_rotation_rotation_index=0\n  local new_index_list_rotation_rotation_rotation_value=0\n  local new_index_list_rotation_rotation_rotation_rotation=0\n  local new_index_list_rotation_rotation_rotation_rotation_index=0\n  local new_index_list_rotation_rotation_rotation_rotation_value=0\n  local new_index_list_rotation_rotation_rotation_rotation_rotation=0\n  local new_index_list_rotation_rotation_rotation_rotation_rotation_index=0\n  local new_index_list_rotation_rotation_rotation_rotation_rotation_value=0\n  local new_index_list_rotation_rotation_rotation_rotation_rotation_rotation=0\n  local new_index_list_rotation_rotation_rotation_rotation_rotation_rotation_index=0\n  local new_index_list_rotation_rotation_rotation_rotation_rotation_rotation_value=0\n  local new_index_list_rotation_rotation_rotation_",
    "    local -n _list=$1\n    local -n _rotations=$2\n    local _index=$3\n    local _length=${#_list[@]}\n    local _rotation\n    for _rotation in $_rotations; do\n        _index=$(( (_index + _rotation) % _length ))\n    done\n    echo ${_list[$_index]}",
    "    local -n list=$1\n    local -n rotations=$2\n    local index=$3\n    local length=${#list[@]}\n    for rotation in $rotations; do\n        if (( rotation > length )); then\n            rotation=$(( rotation % length ))\n        fi\n        for (( i = 0; i < rotation; i++ )); do\n            list=( \"${list[@]:1}\" \"${list[0]}\" )\n        done\n    done\n    echo ${list[$index]}",
    "    local -n list=$1\n    local -n rotations=$2\n    local index=$3\n    local length=$4\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm",
    "  local -n arr=$1\n  local -n arr2=$2\n  local index=$3\n  local rotations=$4\n  local length=${#arr[@]}\n  local new_index=$(((index+rotations)%length))\n  echo \"${arr2[$new_index]}\"",
    "  local -n arr=$1\n  local -n rotations=$2\n  local index=$3\n  local n=$4\n\n  for ((i=0; i<n; i++)); do\n    local rotation=${rotations[i]}\n    local rotation_arr=($rotation)\n    local d=${rotation_arr[0]}\n    local r=${rotation_arr[1]}\n\n    if [ $d == 0 ]; then\n      for ((j=0; j<r; j++)); do\n        local temp=${arr[0]}\n        for ((k=0; k<n-1; k++)); do\n          arr[$k]=${arr[$((k+1))]}\n        done\n        arr[$((n-1))]=$temp\n      done\n    else\n      for ((j=0; j<r; j++)); do\n        local temp=${arr[$((n-1))]}\n        for ((k=n-1; k>0; k--)); do\n          arr[$k]=${arr[$((k-1))]}\n        done\n        arr[0]=$temp\n      done\n    fi\n  done\n\n  echo ${arr[$index]}",
    "    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    IFS=' ' read -r -a array <<< \"$1\"\n    IFS=$'\\n' read -r -a rotations <<< \"$2\"\n    for i in \"${rotations[@]}\"; do\n        array=( \"${array[@]:$i}\" \"${array[@]:0:$i}\" )\n    done\n    echo ${array[$3]}",
    "  local -n arr=$1\n  local -n rotations=$2\n  local index=$3\n  local n=$4\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local temp_index=0\n  local temp_rotation=0\n  local temp_arr=()\n  local temp_rotations=()\n  local result=0\n  while [ $i -lt $n ]; do\n    temp_rotation=$(echo ${rotations[$i]} | cut -d ' ' -f 1)\n    temp_index=$(echo ${rotations[$i]} | cut -d ' ' -f 2)\n    if [ $temp_rotation -eq 0 ]; then\n      temp_arr=(\"${arr[@]}\")\n      j=$temp_index\n      while [ $j -lt $n ]; do\n        temp_arr[$j]=${arr[$j-1]}\n        j=$((j+1))\n      done\n      temp_arr[0]=${arr[$n-1]}\n    else\n      temp_arr=(\"${arr[@]}\")\n      j=$((n-1))\n      while [ $j -gt $temp_index ]; do\n        temp_arr[$j]=${arr[$j-1]}\n        j=$((j-1))\n      done\n      temp_arr[$temp_index]=${arr[$n-1]}\n    fi\n    arr=(\"${temp_arr[@]}\")\n    i=$((i+1))\n  done\n  echo ${arr[$index]}"
  ]
}