{
  "name": "mbpp_160_find_solution",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nfind_solution() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    find_solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"7\") = \"2 1\" ]]\n    [[ $(candidate \"4\" \"2\" \"7\") = \"None\" ]]\n    [[ $(candidate \"1\" \"13\" \"17\") = \"4 1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local found=false\n\n    while [ $x -le $n ]; do\n        y=$((n - a * x))\n        if [ $((y % b)) -eq 0 ]; then\n            found=true\n            break\n        fi\n        x=$((x + 1))\n    done\n\n    if [ $found = true ]; then\n        echo \"($x, $y)\"\n    else\n        echo \"None\"\n    fi",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local r=0\n    local q=0\n    local r_prev=0\n    local x_prev=0\n    local y_prev=0\n    local q_prev=0\n    local x_prev_prev=0\n    local y_prev_prev=0\n    local r_prev_prev=0\n    local q_prev_prev=0\n    local x_prev_prev_prev=0\n    local y_prev_prev_prev=0\n    local r_prev_prev_prev=0\n    local q_prev_prev_prev=0\n    local x_prev_prev_prev_prev=0\n    local y_prev_prev_prev_prev=0\n    local r_prev_prev_prev_prev=0\n    local q_prev_prev_prev_prev=0\n    local x_prev_prev_prev_prev_prev=0\n    local y_prev_prev_prev_prev_prev=0\n    local r_prev_prev_prev_prev_prev=0\n    local q_prev_prev_prev_prev_prev=0\n    local x_prev_prev_prev_prev_prev_prev=0\n    local y_prev_prev_prev_prev_prev_prev=0\n    local r_prev_prev_prev_prev_prev_prev=0\n    local q_prev_prev_prev_prev_prev_prev=0\n    local x_prev_prev_prev_prev_prev_prev_prev=0\n    local y_prev_prev_prev_prev_prev_prev_prev=0\n    local r_prev_prev_prev_prev_prev_prev_prev=0\n    local q_prev_prev_prev_prev_prev_prev_prev=0\n    local x_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local y_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local r_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local q_prev_prev_prev_prev",
    "  local a=$1\n  local b=$2\n  local n=$3\n  local x=0\n  local y=0\n  local found=0\n  while [ $x -le $n ]\n  do\n    y=$((n - a * x))\n    if [ $((y % b)) -eq 0 ]\n    then\n      found=1\n      break\n    fi\n    x=$((x + 1))\n  done\n  if [ $found -eq 1 ]\n  then\n    echo \"$x $y\"\n  else\n    echo \"None\"\n  fi",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local d=0\n    local x1=0\n    local x2=0\n    local y1=0\n    local y2=0\n    local q=0\n    local r=0\n    local x_out=0\n    local y_out=0\n\n    if [ $a -eq 0 ] && [ $b -eq 0 ]; then\n        if [ $n -eq 0 ]; then\n            echo \"0,0\"\n        else\n            echo \"None\"\n        fi\n        return\n    fi\n\n    if [ $a -eq 0 ]; then\n        if [ $n -eq 0 ]; then\n            echo \"0,0\"\n        else\n            if [ $n -eq $b ]; then\n                echo \"1,0\"\n            else\n                echo \"None\"\n            fi\n        fi\n        return\n    fi\n\n    if [ $b -eq 0 ]; then\n        if [ $n -eq 0 ]; then\n            echo \"0,0\"\n        else\n            if [ $n -eq $a ]; then\n                echo \"0,1\"\n            else\n                echo \"None\"\n            fi\n        fi\n        return\n    fi\n\n    if [ $n -eq 0 ]; then\n        echo \"0,0\"\n        return\n    fi\n\n    if [ $n -eq $a ]; then\n        echo \"0,1\"\n        return\n    fi\n\n    if [ $n -eq $b ]; then\n        echo \"1,0\"\n        return\n    fi\n\n    if [ $n -gt $a ]; then\n        if [ $n -gt $b ]; then\n            echo \"None\"\n            return\n        fi\n    fi\n\n    if [ $n -lt $a ]; then\n        if [ $n -lt $b ]; then\n            echo \"None\"\n            return\n        fi\n    fi\n\n    if [ $a -eq $b ]; then\n        if [ $n -eq $a ]; then\n            echo \"1,1\"\n            return\n        else\n            echo \"None\"\n            return\n        fi\n    fi\n\n    if [ $a -lt",
    "  local x=0\n  local y=0\n  local a=$1\n  local b=$2\n  local n=$3\n  local r=1\n  local q=0\n  local x1=1\n  local x2=0\n  local y1=0\n  local y2=1\n  while [ $r -ne 0 ]; do\n    q=$(( $n / $b ))\n    r=$(( $n % $b ))\n    x=$(( $x2 - $q * $x1 ))\n    y=$(( $y2 - $q * $y1 ))\n    n=$b\n    b=$r\n    x2=$x1\n    x1=$x\n    y2=$y1\n    y1=$y\n  done\n  if [ $n -ne 1 ]; then\n    echo \"None\"\n  else\n    echo \"($x2, $y2)\"\n  fi",
    "    local x=0\n    local y=0\n    local a=$1\n    local b=$2\n    local n=$3\n    local r=1\n    local q=0\n    local x1=1\n    local x2=0\n    local y1=0\n    local y2=1\n    local temp=0\n    while [ $r -ne 0 ]; do\n        q=$(( $n / $b ))\n        r=$(( $n % $b ))\n        temp=$(( $x2 - $q * $x1 ))\n        x2=$x1\n        x1=$temp\n        temp=$(( $y2 - $q * $y1 ))\n        y2=$y1\n        y1=$temp\n        n=$b\n        b=$r\n    done\n    if [ $n -ne 1 ]; then\n        echo \"None\"\n    else\n        x=$x2\n        y=$y2\n        echo \"($x, $y)\"\n    fi",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_max=$((n/a))\n    local y_max=$((n/b))\n    local x_min=0\n    local y_min=0\n    local x_mid=0\n    local y_mid=0\n    local x_mid_prev=0\n    local y_mid_prev=0\n    local x_mid_prev_prev=0\n    local y_mid_prev_prev=0\n    local x_mid_prev_prev_prev=0\n    local y_mid_prev_prev_prev=0\n    local x_mid_prev_prev_prev_prev=0\n    local y_mid_prev_prev_prev_prev=0\n    local x_mid_prev_prev_prev_prev_prev=0\n    local y_mid_prev_prev_prev_prev_prev=0\n    local x_mid_prev_prev_prev_prev_prev_prev=0\n    local y_mid_prev_prev_prev_prev_prev_prev=0\n    local x_mid_prev_prev_prev_prev_prev_prev_prev=0\n    local y_mid_prev_prev_prev_prev_prev_prev_prev=0\n    local x_mid_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local y_mid_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local x_mid_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local y_mid_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local x_mid_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local y_mid_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local x_mid_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local y_mid_prev_prev_prev_prev_prev",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    while [ $((a*x)) -lt $n ]; do\n        y=$(((n-a*x)/b))\n        if [ $((a*x+b*y)) -eq $n ]; then\n            echo \"$x $y\"\n            return 0\n        fi\n        x=$((x+1))\n    done\n    return 1",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_incr=1\n    local y_incr=0\n    local temp=0\n    while [ $((a*x)) -lt $n ]; do\n        x=$((x+x_incr))\n        y=$((y+y_incr))\n        if [ $((a*x)) -eq $n ]; then\n            echo $x $y\n            return\n        fi\n        if [ $((a*x)) -gt $n ]; then\n            temp=$x_incr\n            x_incr=$y_incr\n            y_incr=$((-temp))\n        fi\n    done\n    echo \"None\"",
    "    local n=$1\n    local a=$2\n    local b=$3\n    local x=0\n    local y=0\n    local x_found=false\n    local y_found=false\n    while true; do\n        if (( $((a*x)) == $((n)) )); then\n            x_found=true\n            break\n        fi\n        if (( $((a*x)) > $((n)) )); then\n            break\n        fi\n        (( x++ ))\n    done\n    while true; do\n        if (( $((b*y)) == $((n)) )); then\n            y_found=true\n            break\n        fi\n        if (( $((b*y)) > $((n)) )); then\n            break\n        fi\n        (( y++ ))\n    done\n    if [[ \"$x_found\" == true && \"$y_found\" == true ]]; then\n        echo \"($x, $y)\"\n    else\n        echo \"None\"\n    fi",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_incr=1\n    local y_incr=0\n    local temp=0\n    while [ $((a*x)) -le $n ]; do\n        if [ $((a*x + b*y)) -eq $n ]; then\n            echo \"$x $y\"\n            return 0\n        fi\n        temp=$x_incr\n        x_incr=$((x_incr - y_incr))\n        y_incr=$temp\n        x=$((x + x_incr))\n        y=$((y - y_incr))\n    done\n    echo \"None\"\n    return 1",
    "  local a=$1\n  local b=$2\n  local n=$3\n  local x=0\n  local y=0\n  local r=0\n  local q=0\n  local r_prev=0\n  local x_prev=0\n  local y_prev=0\n  local q_prev=0\n  local x_prev_prev=0\n  local y_prev_prev=0\n  local r_prev_prev=0\n  local q_prev_prev=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_max=$((n/a))\n    local y_max=$((n/b))\n    for ((x=0; x<=x_max; x++)); do\n        for ((y=0; y<=y_max; y++)); do\n            if [ $((a*x + b*y)) -eq $n ]; then\n                echo \"$x $y\"\n                return 0\n            fi\n        done\n    done\n    echo \"None\"\n    return 1",
    "  local n=$1\n  local a=$2\n  local b=$3\n  local x=0\n  local y=0\n  local result=\"\"\n  local found=0\n  while [ $x -le $n ]\n  do\n    y=$((n - a * x))\n    if [ $((y % b)) -eq 0 ]\n    then\n      result=\"$x $y\"\n      found=1\n      break\n    fi\n    x=$((x + 1))\n  done\n  if [ $found -eq 1 ]\n  then\n    echo \"$result\"\n  else\n    echo \"None\"\n  fi",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_max=$((n / a))\n    local y_max=$((n / b))\n    local x_min=$((-n / a))\n    local y_min=$((-n / b))\n    local x_step=$((a / gcd(a, b)))\n    local y_step=$((b / gcd(a, b)))\n    local x_start=$((-x_step))\n    local y_start=$((-y_step))\n    local x_end=$((x_step))\n    local y_end=$((y_step))\n    local x_range=$((x_step * 2))\n    local y_range=$((y_step * 2))\n    local x_count=0\n    local y_count=0\n    local x_found=0\n    local y_found=0\n    local x_solution=0\n    local y_solution=0\n    local x_solutions=()\n    local y_solutions=()\n    local solutions=()\n    local solution=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0",
    "  local a=$1\n  local b=$2\n  local n=$3\n  local x=0\n  local y=0\n  local found=0\n  while [ $x -le $n ]; do\n    y=$(( ($n - $a * $x) / $b ))\n    if [ $(( $a * $x + $b * $y )) -eq $n ]; then\n      found=1\n      break\n    fi\n    x=$(( $x + 1 ))\n  done\n  if [ $found -eq 1 ]; then\n    echo \"$x $y\"\n  else\n    echo \"None\"\n  fi",
    "    for (( x=0; x<=$1; x++ )); do\n        for (( y=0; y<=$2; y++ )); do\n            if [ $(( $x * $1 + $y * $2 )) -eq $3 ]; then\n                echo \"$x $y\"\n                return\n            fi\n        done\n    done\n    echo \"No solution\"",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local found=0\n    while [ $x -le $n ]; do\n        y=$((n - a * x))\n        if [ $((y % b)) -eq 0 ]; then\n            found=1\n            break\n        fi\n        x=$((x + 1))\n    done\n    if [ $found -eq 1 ]; then\n        echo \"($x, $y)\"\n    else\n        echo \"None\"\n    fi",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_incr=1\n    local y_incr=0\n    local temp=0\n    while (( n > 0 )); do\n        if (( n >= a )); then\n            n=$(( n - a ))\n            x=$(( x + x_incr ))\n        else\n            temp=$x_incr\n            x_incr=$y_incr\n            y_incr=$temp\n            temp=$a\n            a=$b\n            b=$temp\n        fi\n    done\n    if (( n == 0 )); then\n        echo \"$x $y\"\n    else\n        echo \"None\"\n    fi",
    "  local a=$1\n  local b=$2\n  local n=$3\n  local x=0\n  local y=0\n  local found=false\n  while [ $x -le $n ]; do\n    y=$((n - a * x))\n    if [ $((y % b)) -eq 0 ]; then\n      found=true\n      break\n    fi\n    x=$((x + 1))\n  done\n  if [ $found = true ]; then\n    echo \"$x $y\"\n  else\n    echo \"None\"\n  fi"
  ]
}