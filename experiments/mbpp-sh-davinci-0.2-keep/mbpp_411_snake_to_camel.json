{
  "name": "mbpp_411_snake_to_camel",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert the given snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"android_tv\") = \"AndroidTv\" ]]\n    [[ $(candidate \"google_pixel\") = \"GooglePixel\" ]]\n    [[ $(candidate \"apple_watch\") = \"AppleWatch\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "    local snake_case=$1\n    local camel_case=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest=\"\"\n\n    for word in $(echo $snake_case | tr '_' ' '); do\n        first_char=$(echo $word | cut -c1 | tr '[:lower:]' '[:upper:]')\n        rest=$(echo $word | cut -c2-)\n        camel_case=\"$camel_case$first_char$rest\"\n    done\n\n    echo $camel_case",
    "    echo $1 | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n  local char\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    if [[ \"$char\" == \"_\" ]]; then\n      first_char=true\n    else\n      if $first_char; then\n        char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n        first_char=false\n      fi\n      result+=\"$char\"\n    fi\n  done\n  echo \"$result\"",
    "  local input=$1\n  local output=''\n  local first_char=true\n  for word in $(echo \"$input\" | sed 's/_/ /g'); do\n    if $first_char; then\n      output+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n      first_char=false\n    else\n      output+=\"$(tr '[:upper:]' '[:lower:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n  echo \"$output\"",
    "    local word\n    for word in $(echo $1 | tr '_' ' '); do\n        echo -n ${word^}\n    done",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  # Split the string on underscores\n  local words=(${1//_/ })\n  local result=\"\"\n  # Capitalize the first letter of each word\n  for word in \"${words[@]}\"; do\n    result+=\"${word^}\"\n  done\n  echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'"
  ]
}