{
  "name": "mbpp_411_snake_to_camel",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert the given snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"android_tv\") = \"AndroidTv\" ]]\n    [[ $(candidate \"google_pixel\") = \"GooglePixel\" ]]\n    [[ $(candidate \"apple_watch\") = \"AppleWatch\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "    local snake_case=$1\n    local camel_case=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest=\"\"\n\n    for word in $(echo $snake_case | tr '_' ' '); do\n        first_char=$(echo $word | cut -c1 | tr '[:lower:]' '[:upper:]')\n        rest=$(echo $word | cut -c2-)\n        camel_case=\"$camel_case$first_char$rest\"\n    done\n\n    echo $camel_case",
    "    echo $1 | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n  local char\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    if [[ \"$char\" == \"_\" ]]; then\n      first_char=true\n    else\n      if $first_char; then\n        char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n        first_char=false\n      fi\n      result+=\"$char\"\n    fi\n  done\n  echo \"$result\"",
    "  local input=$1\n  local output=''\n  local first_char=true\n  for word in $(echo \"$input\" | sed 's/_/ /g'); do\n    if $first_char; then\n      output+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n      first_char=false\n    else\n      output+=\"$(tr '[:upper:]' '[:lower:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n  echo \"$output\"",
    "    local word\n    for word in $(echo $1 | tr '_' ' '); do\n        echo -n ${word^}\n    done",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  # Split the string on underscores\n  local words=(${1//_/ })\n  local result=\"\"\n  # Capitalize the first letter of each word\n  for word in \"${words[@]}\"; do\n    result+=\"${word^}\"\n  done\n  echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    # Convert all _ to space\n    local snake_case=$(echo \"$1\" | sed 's/_/ /g')\n    # Convert all words to Title Case\n    local camel_case=$(echo \"$snake_case\" | sed 's/.*/\\L&/; s/[a-z]*/\\u&/g')\n    # Remove all spaces\n    echo \"$camel_case\" | tr -d ' '",
    "    echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_letter=true\n  local next_upper=false\n\n  for (( i=0; i<${#str}; i++ )); do\n    local char=${str:$i:1}\n\n    if [[ $char == \"_\" ]]; then\n      next_upper=true\n      continue\n    fi\n\n    if [[ $next_upper == true ]]; then\n      char=$(echo $char | tr '[:lower:]' '[:upper:]')\n      next_upper=false\n    fi\n\n    if [[ $first_letter == true ]]; then\n      char=$(echo $char | tr '[:upper:]' '[:lower:]')\n      first_letter=false\n    fi\n\n    result+=$char\n  done\n\n  echo $result",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_char=\"\"\n    for word in $(echo $str | tr '_' ' '); do\n        first_char=$(echo $word | cut -c1 | tr '[:lower:]' '[:upper:]')\n        rest_char=$(echo $word | cut -c2-)\n        result+=$first_char$rest_char\n    done\n    echo $result",
    "  echo \"$1\" | sed -e 's/^\\([a-z]\\)/\\U\\1/g' -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if $first_char; then\n            result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n            first_char=false\n        else\n            result+=\"$(tr '[:upper:]' '[:lower:]' <<< ${word:0:1})${word:1}\"\n        fi\n    done\n\n    echo \"$result\"",
    "  # Split the string into words\n  words=($(echo $1 | tr '_' ' '))\n  # Capitalize the first letter of each word\n  for i in \"${!words[@]}\"; do\n    words[$i]=$(echo ${words[$i]} | sed -r 's/^./\\U&/')\n  done\n  # Join the words back into a string\n  echo \"${words[@]}\" | tr ' ' ''",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"${1//_/}\" | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    while [[ -n \"$str\" ]]; do\n        local char=\"${str:0:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        elif $first_char; then\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n            first_char=false\n        fi\n        result+=\"$char\"\n        str=\"${str:1}\"\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$i+1:1}\"\n\n    if [ \"$char\" = \"_\" ]; then\n      char=\"${next_char^^}\"\n      i=$((i+1))\n    fi\n\n    result=\"$result$char\"\n    i=$((i+1))\n  done\n\n  echo \"$result\"",
    "  local str=$1\n  local result=\"\"\n  local first_char=true\n  for word in $(echo \"${str}\" | tr '_' ' '); do\n    if [ \"${first_char}\" = true ]; then\n      result+=\"${word}\"\n      first_char=false\n    else\n      result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n  echo \"${result}\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_letter=true\n    local word=\"\"\n    local letter=\"\"\n\n    for ((i=0; i<${#str}; i++)); do\n        letter=${str:$i:1}\n        if [[ $letter == \"_\" ]]; then\n            if [[ $first_letter == true ]]; then\n                result+=$word\n            else\n                result+=\"${word^}\"\n            fi\n            first_letter=true\n            word=\"\"\n        else\n            word+=$letter\n            first_letter=false\n        fi\n    done\n    if [[ $first_letter == true ]]; then\n        result+=$word\n    else\n        result+=\"${word^}\"\n    fi\n    echo $result",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "    local snake_case=$1\n    local camel_case=${snake_case//_/}\n    echo \"${camel_case^}\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  local upper_case=\"\"\n  local lower_case=\"\"\n  local first_char=\"\"\n  local rest_str=\"\"\n\n  # Split the string into two parts: first character and the rest of the string\n  first_char=\"${str:0:1}\"\n  rest_str=\"${str:1}\"\n\n  # Convert the first character to upper case\n  upper_case=\"$(echo \"$first_char\" | tr '[:lower:]' '[:upper:]')\"\n\n  # Convert the rest of the string to lower case\n  lower_case=\"$(echo \"$rest_str\" | tr '[:upper:]' '[:lower:]')\"\n\n  # Concatenate the two parts\n  new_str=\"$upper_case$lower_case\"\n\n  # Replace the underscores with empty string\n  new_str=\"${new_str//_/}\"\n\n  echo \"$new_str\"",
    "    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local char\n    for ((i=0; i<${#str}; i++)); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                first_char=false\n            fi\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_letter=true\n    local next_letter_upper=false\n    for (( i=0; i<${#str}; i++ )); do\n        local letter=\"${str:$i:1}\"\n        if [[ $letter == \"_\" ]]; then\n            next_letter_upper=true\n        else\n            if [[ $first_letter == true ]]; then\n                result+=\"$(tr '[:lower:]' '[:upper:]' <<< \"$letter\")\"\n                first_letter=false\n            elif [[ $next_letter_upper == true ]]; then\n                result+=\"$(tr '[:lower:]' '[:upper:]' <<< \"$letter\")\"\n                next_letter_upper=false\n            else\n                result+=\"$letter\"\n            fi\n        fi\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local snake_string=\"$1\"\n  local camel_string=\"\"\n  local word=\"\"\n\n  for word in $(echo \"$snake_string\" | tr '_' ' '); do\n    camel_string=\"${camel_string}$(echo \"${word:0:1}\" | tr '[:lower:]' '[:upper:]')${word:1}\"\n  done\n\n  echo \"$camel_string\"",
    "    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local snake_case=$1\n    local camel_case=\"\"\n    local word=\"\"\n    local first_word=true\n\n    for word in $(echo $snake_case | tr '_' ' '); do\n        if $first_word; then\n            camel_case=$word\n            first_word=false\n        else\n            camel_case=$camel_case$(echo $word | sed 's/^./\\U&/')\n        fi\n    done\n\n    echo $camel_case",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if $first_char; then\n            result=\"$word\"\n            first_char=false\n        else\n            result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        fi\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local string=\"$1\"\n  local result=\"\"\n  local first_char=true\n\n  for word in $(echo \"$string\" | tr '_' ' '); do\n    if $first_char; then\n      first_char=false\n      result=\"$(echo \"$word\" | tr '[:lower:]' '[:upper:]')\"\n    else\n      result=\"$result$(echo \"$word\" | tr '[:upper:]' '[:lower:]')\"\n    fi\n  done\n\n  echo \"$result\"",
    "  echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local next_upper=false\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ $char == \"_\" ]]; then\n            next_upper=true\n        elif $next_upper; then\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n            next_upper=false\n        fi\n        if $first_char; then\n            char=\"$(tr '[:upper:]' '[:lower:]' <<< \"$char\")\"\n            first_char=false\n        fi\n        result+=\"$char\"\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/([_])([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "  local str=$1\n  local result=\"\"\n  local first_char=true\n  for word in $(echo \"${str}\" | tr '_' ' '); do\n    if [ \"${first_char}\" = true ]; then\n      first_char=false\n      result=\"${word}\"\n    else\n      result=\"${result}$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n  echo \"${result}\"",
    "    echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  local next_upper=false\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" == \"_\" ]]; then\n      next_upper=true\n    elif [[ \"$next_upper\" == true ]]; then\n      new_str+=\"${char^^}\"\n      next_upper=false\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local first_char=1\n    local char=\"\"\n    local next_upper=0\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            next_upper=1\n        else\n            if [[ $next_upper -eq 1 ]]; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                next_upper=0\n            fi\n            new_str+=\"$char\"\n        fi\n    done\n    echo \"$new_str\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n  local char\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=${str:$i:1}\n    if [[ $char == \"_\" ]]; then\n      first_char=true\n    elif $first_char; then\n      result+=\"${char^^}\"\n      first_char=false\n    else\n      result+=\"$char\"\n    fi\n  done\n\n  echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_letter=\"\"\n    local rest_of_word=\"\"\n\n    while [ -n \"$str\" ]; do\n        word=\"${str%%_*}\"\n        result=\"$result${word:0:1}${word:1,,}\"\n        str=\"${str#*_}\"\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n\n    for word in $(echo $str | tr '_' ' '); do\n        first_char=$(echo $word | cut -c1 | tr '[:lower:]' '[:upper:]')\n        rest_of_word=$(echo $word | cut -c2-)\n        result+=\"$first_char$rest_of_word\"\n    done\n\n    echo $result",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=$1\n    local result=\"\"\n    local first_char=true\n\n    for word in $(echo $str | sed -r 's/(.)([A-Z])/\\1 \\2/g' | tr ' ' '\\n'); do\n        if $first_char; then\n            result=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n            first_char=false\n        else\n            result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        fi\n    done\n\n    echo $result",
    "    echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n\n  while [ $i -lt $len ]; do\n    local c=\"${str:$i:1}\"\n    if [ \"$c\" == \"_\" ]; then\n      let i++\n      c=\"${str:$i:1}\"\n      c=\"$(echo \"$c\" | tr '[:lower:]' '[:upper:]')\"\n    fi\n    result=\"$result$c\"\n    let i++\n  done\n\n  echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local word=\"\"\n    local char=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n        if [ \"$char\" = \"_\" ]; then\n            if [ \"$first_char\" = true ]; then\n                result=\"$result$word\"\n            else\n                result=\"$result${word^}\"\n            fi\n            first_char=true\n            word=\"\"\n        else\n            word=\"$word$char\"\n            first_char=false\n        fi\n        i=$((i + 1))\n    done\n    if [ \"$first_char\" = true ]; then\n        result=\"$result$word\"\n    else\n        result=\"$result${word^}\"\n    fi\n    echo \"$result\"",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g' -e 's/^\\([^_]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$i+1:1}\"\n\n    if [ \"$char\" = \"_\" ]; then\n      ((i++))\n      char=\"${str:$i:1}\"\n      char=$(echo \"$char\" | tr '[a-z]' '[A-Z]')\n    fi\n\n    result+=\"$char\"\n    ((i++))\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    # Split the string into an array\n    local arr=(${1//_/ })\n    # Capitalize the first letter of each word\n    for i in \"${!arr[@]}\"; do\n        arr[$i]=$(tr '[:lower:]' '[:upper:]' <<< ${arr[$i]:0:1})${arr[$i]:1}\n    done\n    # Join the array into a string\n    echo \"${arr[@]}\"",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n  local char\n  local prev_char\n  local next_char\n  local i=0\n  local len=${#str}\n  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n    prev_char=${str:$((i-1)):1}\n    next_char=${str:$((i+1)):1}\n    if [ \"$char\" = \"_\" ]; then\n      if [ \"$prev_char\" = \"_\" ]; then\n        result=\"${result}_\"\n      else\n        result=\"${result}${next_char^^}\"\n      fi\n      i=$((i+1))\n    else\n      if [ \"$first_char\" = true ]; then\n        result=\"${result}${char^^}\"\n        first_char=false\n      else\n        result=\"${result}${char,,}\"\n      fi\n    fi\n    i=$((i+1))\n  done\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\n    while [ $i -lt $len ]; do\n        local char=${str:$i:1}\n        if [ \"$char\" == \"_\" ]; then\n            let i++\n            char=${str:$i:1}\n            char=${char^^}\n        fi\n        result+=\"$char\"\n        let i++\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$i+1:1}\"\n\n    if [ \"$char\" == \"_\" ]; then\n      ((i++))\n      char=\"${str:$i:1}\"\n      char=$(echo \"$char\" | tr '[a-z]' '[A-Z]')\n    fi\n\n    result+=\"$char\"\n    ((i++))\n  done\n\n  echo \"$result\"",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if $first_char; then\n      result=\"$word\"\n      first_char=false\n    else\n      result=\"${result}$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/^\\([a-z]\\)/\\U\\1/g' -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=1\n\n  for word in $(echo \"$str\" | tr \"_\" \" \"); do\n    if [ $first_char -eq 1 ]; then\n      result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n      first_char=0\n    else\n      result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n\n  echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if $first_char; then\n            result=\"$word\"\n            first_char=false\n        else\n            result=\"$result$(echo \"$word\" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')\"\n        fi\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n\n    while [ -n \"$str\" ]; do\n        word=\"${str%%_*}\"\n        result=\"$result$word\"\n        str=\"${str#*_}\"\n        if [ -n \"$str\" ]; then\n            first_char=\"${word:0:1}\"\n            rest_of_word=\"${word:1}\"\n            result=\"$result${first_char^^}$rest_of_word\"\n        fi\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=$1\n    local result=\"\"\n\n    while [[ $str =~ ([^_]*)_([^_]*) ]]; do\n        result=\"$result${BASH_REMATCH[1]}${BASH_REMATCH[2]^}\"\n        str=${str#${BASH_REMATCH[0]}}\n    done\n    echo \"$result$str\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        next_char=\"${str:$i+1:1}\"\n        if [ \"$char\" == \"_\" ]; then\n            char=\"${next_char^}\"\n            i=$((i+1))\n        fi\n        result+=\"$char\"\n        i=$((i+1))\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#str}\n    local char=\"\"\n    local next_char=\"\"\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        if [ \"$char\" == \"_\" ]; then\n            ((i++))\n            next_char=\"${str:$i:1}\"\n            char=$(echo \"$next_char\" | tr a-z A-Z)\n        fi\n        result=\"$result$char\"\n        ((i++))\n    done\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  for (( i=0; i<len; i++ )); do\n    char=\"${str:i:1}\"\n    next_char=\"${str:i+1:1}\"\n\n    if [[ \"$char\" == \"_\" ]]; then\n      char=\"${next_char^^}\"\n      ((i++))\n    fi\n\n    result+=\"$char\"\n  done\n\n  echo \"$result\"",
    "    # Split the string into words\n    IFS='_' read -r -a words <<< \"$1\"\n    # Capitalize the first letter of each word\n    for word in \"${words[@]}\"; do\n        # Capitalize the first letter of the word\n        word=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n        # Append the word to the result\n        result+=\"$word\"\n    done\n    # Print the result\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/([^_]+)_?/\\U\\1/g'",
    "    local string=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n\n    while [[ -n \"$string\" ]]; do\n        word=\"${string%%_*}\"\n        first_char=\"${word:0:1}\"\n        rest_of_word=\"${word:1}\"\n        result=\"$result${first_char^^}$rest_of_word\"\n        string=\"${string#*_}\"\n    done\n\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\(.\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local input=\"$1\"\n    local output=\"\"\n    local first_char=1\n    local next_char_upper=0\n    local i=0\n\n    for (( i=0; i<${#input}; i++ )); do\n        if [[ \"${input:$i:1}\" == \"_\" ]]; then\n            next_char_upper=1\n        else\n            if [[ $first_char -eq 1 ]]; then\n                output+=\"${input:$i:1}\"\n                first_char=0\n            elif [[ $next_char_upper -eq 1 ]]; then\n                output+=\"$(tr '[:lower:]' '[:upper:]' <<< \"${input:$i:1}\")\"\n                next_char_upper=0\n            else\n                output+=\"${input:$i:1}\"\n            fi\n        fi\n    done\n\n    echo \"$output\"",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n\n    while [[ -n \"$str\" ]]; do\n        word=\"${str%%_*}\"\n        str=\"${str#*_}\"\n        first_char=\"${word:0:1}\"\n        result=\"$result${first_char^^}${word:1}\"\n    done\n\n    echo \"$result\"",
    "  echo \"$1\" | sed -E 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo $1 | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local input=$1\n  local output=\"\"\n  local first_char=true\n\n  for word in $(echo $input | tr \"_\" \" \"); do\n    if [ \"$first_char\" = true ]; then\n      output=\"$output$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n      first_char=false\n    else\n      output=\"$output${word:0:1}$(tr '[:upper:]' '[:lower:]' <<< ${word:1})\"\n    fi\n  done\n\n  echo $output",
    "  echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n    local first_char_upper=\"\"\n    local rest_of_word_lower=\"\"\n\n    while [[ -n \"$str\" ]]; do\n        word=\"${str%%_*}\"\n        str=\"${str#*_}\"\n        first_char=\"${word:0:1}\"\n        rest_of_word=\"${word:1}\"\n        first_char_upper=\"$(echo \"$first_char\" | tr '[:lower:]' '[:upper:]')\"\n        rest_of_word_lower=\"$(echo \"$rest_of_word\" | tr '[:upper:]' '[:lower:]')\"\n        result=\"${result}${first_char_upper}${rest_of_word_lower}\"\n    done\n\n    echo \"$result\"",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  # Convert the string to lower case\n  local lower_case=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n\n  # Replace the underscore with space\n  local with_space=$(echo \"$lower_case\" | sed 's/_/ /g')\n\n  # Convert the first letter of each word to upper case\n  local with_upper_case=$(echo \"$with_space\" | sed 's/\\b\\(.\\)/\\u\\1/g')\n\n  # Remove the spaces\n  echo \"$with_upper_case\" | sed 's/ //g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local char\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=\"${char^}\"\n                first_char=false\n            fi\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'"
  ]
}