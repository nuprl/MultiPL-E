{
  "name": "mbpp_4_heap_queue_largest",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n#\n# $1 is a space-separated list\n# $2 is an integer\nheap_queue_largest() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    heap_queue_largest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"3\") = \"85 75 65\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"2\") = \"85 75\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"5\") = \"85 75 65 58 35\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n    local size=${#list[@]}\n\n    # build max heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        # heapify\n        j=$i\n        while ((2 * j + 1 < size)); do\n            # left child\n            k=2 * j + 1\n            # right child\n            if ((2 * j + 2 < size && list[k] < list[2 * j + 2])); then\n                k=2 * j + 2\n            fi\n            if ((list[j] < list[k])); then\n                # swap\n                temp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$temp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # extract max\n    for ((i = size - 1; i >= size - n; i--)); do\n        # swap\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        # heapify\n        j=0\n        while ((2 * j + 1 < i)); do\n            # left child\n            k=2 * j + 1\n            # right child\n            if ((2 * j + 2 < i && list[k] < list[2 * j + 2])); then\n                k=2 * j + 2\n            fi\n            if ((list[j] < list[k])); then\n                # swap\n                temp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$temp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]:size - n:n}",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local arr=()\n    local i=0\n    local len=0\n    local max=0\n    local max_index=0\n    local temp=0\n    local temp_index=0\n    local temp_index_left=0\n    local temp_index_right=0\n    local temp_index_max=0\n    local temp_index_max_left=0\n    local temp_index_max_right=0\n    local temp_index_max_left_right=0\n    local temp_index_max_right_left=0\n\n    # Convert string to array\n    IFS=' ' read -r -a arr <<< \"$list\"\n\n    # Get the length of the array\n    len=${#arr[@]}\n\n    # Initialize the heap\n    for ((i = 0; i < n; i++)); do\n        arr[$i]=$((arr[$i] * -1))\n    done\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        temp_index=$i\n        temp=${arr[$temp_index]}\n\n        while true; do\n            temp_index_left=$((2 * temp_index + 1))\n            temp_index_right=$((2 * temp_index + 2))\n\n            if [ $temp_index_left -lt $n ] && [ ${arr[$temp_index_left]} -lt $temp ]; then\n                temp_index_max=$temp_index_left\n            else\n                temp_index_max=$temp_index\n            fi\n\n            if [ $temp_index_right -lt $n ] && [ ${arr[$temp_index_right]} -lt ${arr[$temp_index_max]} ]; then\n                temp_index_max=$temp_index_right\n            fi\n\n            if [ $temp_index -ne $temp_index_max ]; then\n                temp_index_max_left=${arr[$temp_index_max]}\n                arr[$temp_index_max]=$temp\n                arr[$temp_index]=$temp_index_max_left\n                temp_index=$temp_",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_idx=$((len-1))\n    local -i last_parent_idx=$(((len-2)/2))\n    local -i parent_idx\n    local -i left_child_idx\n    local -i right_child_idx\n    local -i largest_child_idx\n    local -i tmp\n    local -i largest_idx\n\n    # Initialize the heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1[i]}\n    done\n\n    # Heapify\n    for ((i=last_parent_idx; i>=0; i--)); do\n        parent_idx=$i\n        left_child_idx=$((2*parent_idx+1))\n        right_child_idx=$((2*parent_idx+2))\n        largest_child_idx=$left_child_idx\n        if [[ $right_child_idx -le $last_idx ]]; then\n            if [[ ${heap[right_child_idx]} -gt ${heap[left_child_idx]} ]]; then\n                largest_child_idx=$right_child_idx\n            fi\n        fi\n        if [[ ${heap[largest_child_idx]} -gt ${heap[parent_idx]} ]]; then\n            tmp=${heap[largest_child_idx]}\n            heap[largest_child_idx]=${heap[parent_idx]}\n            heap[parent_idx]=$tmp\n        fi\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        largest_idx=$last_idx\n        echo ${heap[largest_idx]}\n        heap[largest_idx]=${heap[0]}\n        heap[0]=$((2**31-1))\n        last_idx=$((last_idx-1))\n        last_parent_idx=$(((last_idx-2)/",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local -a result=()\n    local i\n    local j\n    local tmp\n\n    # build a max heap\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j > 0)); do\n            if ((heap[j] > heap[(j-1)/2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[(j-1)/2]}\n                heap[(j-1)/2]=$tmp\n                j=(j-1)/2\n            else\n                break\n            fi\n        done\n    done\n\n    # extract the max n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        heap=(\"${heap[@]:0:${#heap[@]}-1}\")\n        j=0\n        while ((2*j+1 < ${#heap[@]})); do\n            if ((2*j+2 < ${#heap[@]})); then\n                if ((heap[j] < heap[2*j+1] || heap[j] < heap[2*j+2])); then\n                    if ((heap[2*j+1] > heap[2*j+2])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+1]}\n                        heap[2*j+1]=$tmp\n                        j=2*j+1\n                    else\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+2]}\n                        heap[2*j+2]=$tmp\n                        j=2*j+2\n                    fi\n                else\n                    break\n                fi\n            else\n                if ((heap[j] < heap[2*j+1])); then\n                    tmp=${heap[j]}\n                    heap[j]=${",
    "  local -a heap=($1)\n  local n=$2\n  local i=0\n  local j=0\n  local tmp=0\n  local heap_size=${#heap[@]}\n  local last_index=$((heap_size - 1))\n  local parent_index=0\n  local child_index=0\n\n  # Build max heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    j=$i\n    while true; do\n      parent_index=$j\n      child_index=$((2 * parent_index + 1))\n      if [[ $child_index -lt $heap_size ]]; then\n        if [[ $((child_index + 1)) -lt $heap_size ]]; then\n          if [[ ${heap[$child_index]} -lt ${heap[$((child_index + 1))]} ]]; then\n            child_index=$((child_index + 1))\n          fi\n        fi\n        if [[ ${heap[$parent_index]} -lt ${heap[$child_index]} ]]; then\n          tmp=${heap[$parent_index]}\n          heap[$parent_index]=${heap[$child_index]}\n          heap[$child_index]=$tmp\n          j=$child_index\n        else\n          break\n        fi\n      else\n        break\n      fi\n    done\n  done\n\n  # Extract max\n  for ((i = 0; i < n; i++)); do\n    echo ${heap[0]}\n    heap[0]=${heap[$last_index]}\n    heap[$last_index]=0\n    last_index=$((last_index - 1))\n    j=0\n    while true; do\n      parent_index=$j\n      child_index=$((2 * parent_index + 1))\n      if [[ $child_index -lt $last_index ]]; then\n        if [[ $((child_index + 1)) -lt $last_index ]]; then\n          if [[ ${heap[$child_index]} -lt ${heap[$((child_index + 1))]} ]]; then\n            child_index=$((child_index + 1",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -a result\n    local i\n    local j\n    local temp\n    local left\n    local right\n    local largest\n\n    # Build the heap\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while [ $j -gt 0 ]; do\n            left=$(( (j-1) / 2 ))\n            if [ ${heap[j]} -gt ${heap[left]} ]; then\n                temp=${heap[j]}\n                heap[j]=${heap[left]}\n                heap[left]=$temp\n            fi\n            j=$left\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while [ $j -lt ${#heap[@]} ]; do\n            left=$(( 2*j+1 ))\n            right=$(( 2*j+2 ))\n            largest=$j\n            if [ $left -lt ${#heap[@]} ] && [ ${heap[left]} -gt ${heap[largest]} ]; then\n                largest=$left\n            fi\n            if [ $right -lt ${#heap[@]} ] && [ ${heap[right]} -gt ${heap[largest]} ]; then\n                largest=$right\n            fi\n            if [ $largest -ne $j ]; then\n                temp=${heap[j]}\n                heap[j]=${heap[largest]}\n                heap[largest]=$temp\n                j=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${result[@]}",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -a result\n\n  # Build a heap queue\n  for item in $list; do\n    heap_queue_insert heap \"$item\"\n  done\n\n  # Extract the largest n items\n  for ((i=0; i<n; i++)); do\n    result[i]=$(heap_queue_extract heap)\n  done\n\n  # Print the result in descending order\n  for ((i=n-1; i>=0; i--)); do\n    echo ${result[i]}\n  done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i left\n    local -i right\n    local -i largest\n    local -i temp\n    local -i index\n    local -i parent\n\n    for i in $1; do\n        heap[size]=$i\n        index=$size\n        parent=$(( (size - 1) / 2 ))\n        while [ $index -gt 0 ] && [ ${heap[parent]} -lt ${heap[index]} ]; do\n            temp=${heap[parent]}\n            heap[parent]=${heap[index]}\n            heap[index]=$temp\n            index=$parent\n            parent=$(( (index - 1) / 2 ))\n        done\n        (( size++ ))\n    done\n\n    for (( i = 0; i < n; i++ )); do\n        echo ${heap[0]}\n        heap[0]=${heap[size-1]}\n        (( size-- ))\n        index=0\n        while true; do\n            left=$(( 2 * index + 1 ))\n            right=$(( 2 * index + 2 ))\n            largest=$index\n            if [ $left -lt $size ] && [ ${heap[left]} -gt ${heap[largest]} ]; then\n                largest=$left\n            fi\n            if [ $right -lt $size ] && [ ${heap[right]} -gt ${heap[largest]} ]; then\n                largest=$right\n            fi\n            if [ $largest -eq $index ]; then\n                break\n            fi\n            temp=${heap[largest]}\n            heap[largest]=${heap[index]}\n            heap[index]=$temp\n            index=$largest\n        done\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n    local len\n\n    # initialize the heap\n    for i in $list; do\n        heap[${#heap[@]}]=\"$i\"\n    done\n\n    # heapify\n    len=${#heap[@]}\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        k=\"$i\"\n        tmp=\"${heap[$k]}\"\n        while ((2 * k + 1 < len)); do\n            j=2 * k + 1\n            if ((j < len - 1)) && ((heap[j] < heap[j + 1])); then\n                j=$j + 1\n            fi\n            if ((tmp >= heap[j])); then\n                break\n            fi\n            heap[k]=\"${heap[j]}\"\n            k=\"$j\"\n        done\n        heap[k]=\"$tmp\"\n    done\n\n    # extract the n largest\n    for ((i = 0; i < n; i++)); do\n        result[$i]=\"${heap[0]}\"\n        heap[0]=\"${heap[len - i - 1]}\"\n        len=$len - 1\n        k=0\n        tmp=\"${heap[$k]}\"\n        while ((2 * k + 1 < len)); do\n            j=2 * k + 1\n            if ((j < len - 1)) && ((heap[j] < heap[j + 1])); then\n                j=$j + 1\n            fi\n            if ((tmp >= heap[j])); then\n                break\n            fi\n            heap[k]=\"${heap[j]}\"\n            k=\"$j\"\n        done\n        heap[k]=\"$tmp\"\n    done\n\n    # print the result\n    for ((i = n - 1; i >= 0; i--)); do\n        echo \"${result[$i]}\"\n    done",
    "    local -a heap\n    local -i i\n    local -i n=${2:-1}\n    local -i len=${#1}\n    local -i last=$((len-1))\n    local -i parent\n    local -i child\n    local -i tmp\n    local -i max_index\n    local -i max_value\n\n    # build the heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1[i]}\n        parent=$((i/2))\n        child=$i\n        while ((parent >= 0 && heap[parent] < heap[child])); do\n            tmp=${heap[parent]}\n            heap[parent]=${heap[child]}\n            heap[child]=$tmp\n            child=$parent\n            parent=$((child/2))\n        done\n    done\n\n    # extract the max\n    for ((i=0; i<n; i++)); do\n        max_index=$last\n        max_value=${heap[max_index]}\n        heap[max_index]=${heap[0]}\n        heap[0]=$max_value\n        parent=0\n        while ((1)); do\n            child=$((parent*2+1))\n            if ((child > last)); then\n                break\n            fi\n            if ((child < last && heap[child] < heap[child+1])); then\n                child=$((child+1))\n            fi\n            if ((heap[parent] < heap[child])); then\n                tmp=${heap[parent]}\n                heap[parent]=${heap[child]}\n                heap[child]=$tmp\n                parent=$child\n            else\n                break\n            fi\n        done\n        echo $max_value\n        ((last--))\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=$(echo \"$list\" | wc -w)\n    local -i n_largest=0\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_parent=0\n    local -i temp_left=0\n    local -i temp_right=0\n    local -i temp_n_heap=0\n    local -i temp_n_largest=0\n    local -i temp_n_list=0\n    local -i temp_parent_index=0\n    local -i temp_left_index=0\n    local -i temp_right_index=0\n    local -i temp_n_heap_index=0\n    local -i temp_n_largest_index=0\n    local -i temp_n_list_index=0\n    local -i temp_i=0\n    local -i temp_j=0\n    local -i temp_k=0\n    local -i temp_l=0\n    local -i temp_m=0\n    local -i temp_parent_index_index=0\n    local -i temp_left_index_index=0\n    local -i temp_right_index_index=0\n    local -i temp_n_heap_index_index=0\n    local -i temp_n_largest_index_index=0\n    local -i temp_n_list_index_index=0\n    local -i temp_i_index=0\n    local -i temp_j_index=0\n    local -i temp_k_index=0\n    local -i temp_l_index=0\n    local -i temp_m_index=0\n    local -i temp_parent_index_index_index=0\n    local -",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$((j-1))/2\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((2*j+1<${#heap[@]})); do\n            k=$((2*j+1))\n            if ((2*j+2<${#heap[@]})); then\n                if ((heap[2*j+2]>heap[k])); then\n                    k=$((2*j+2))\n                fi\n            fi\n            if ((heap[j]<heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i max_i\n    local -i max_val\n    local -i tmp\n    local -i tmp_i\n\n    # heapify\n    for ((i=0; i<n; i++)); do\n        heap[i]=${1%% *}\n        shift\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        max_i=$i\n        max_val=${heap[i]}\n        tmp_i=$((2*i+1))\n        if ((tmp_i < n && heap[tmp_i] > max_val)); then\n            max_i=$tmp_i\n            max_val=${heap[tmp_i]}\n        fi\n        tmp_i=$((2*i+2))\n        if ((tmp_i < n && heap[tmp_i] > max_val)); then\n            max_i=$tmp_i\n            max_val=${heap[tmp_i]}\n        fi\n        if ((max_i != i)); then\n            tmp=${heap[i]}\n            heap[i]=${heap[max_i]}\n            heap[max_i]=$tmp\n        fi\n    done\n\n    # pop\n    for ((i=n; i<$#; i++)); do\n        if (($1 > heap[0])); then\n            heap[0]=$1\n            max_i=0\n            max_val=${heap[0]}\n            tmp_i=1\n            if ((tmp_i < n && heap[tmp_i] > max_val)); then\n                max_i=$tmp_i\n                max_val=${heap[tmp_i]}\n            fi\n            tmp_i=2\n            if ((tmp_i < n && heap[tmp_i] > max_val)); then\n                max_i=$tmp_i\n                max_val=${heap[tmp_i]}\n            fi\n            if ((max_i != 0)); then\n                tmp=${heap[0]}\n                heap[0]=${heap[max_i]}\n                heap[max",
    "    local list=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local len=${#list[@]}\n\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        tmp=${list[$i]}\n        while ((2*k+1<len)); do\n            j=$((2*k+1))\n            if ((j<len-1)) && ((list[$j]<list[$((j+1))])); then\n                j=$((j+1))\n            fi\n            if ((tmp>=list[$j])); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$tmp\n    done\n\n    for ((i=0; i<n; i++)); do\n        tmp=${list[$len-1]}\n        list[$len-1]=${list[0]}\n        list[0]=$tmp\n        len=$((len-1))\n        k=0\n        while ((2*k+1<len)); do\n            j=$((2*k+1))\n            if ((j<len-1)) && ((list[$j]<list[$((j+1))])); then\n                j=$((j+1))\n            fi\n            if ((tmp>=list[$j])); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$tmp\n    done\n\n    echo ${list[@]}",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local temp\n\n    # Build a max heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        j=$(( ${#heap[@]} - 1 ))\n        while [ $j -gt 0 ]; do\n            k=$(( (j - 1) / 2 ))\n            if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract the largest n elements\n    for (( i = 0; i < n; i++ )); do\n        result[$i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]} - 1]}\n        heap=(\"${heap[@]:0:${#heap[@]} - 1}\")\n        j=0\n        while [ $j -lt ${#heap[@]} ]; do\n            k=$(( 2 * j + 1 ))\n            if [ $k -ge ${#heap[@]} ]; then\n                break\n            fi\n            if [ $(( k + 1 )) -lt ${#heap[@]} ] && [ ${heap[$(( k + 1 ))]} -gt ${heap[$k]} ]; then\n                k=$(( k + 1 ))\n            fi\n            if [ ${heap[$j]} -lt ${heap[$k]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Print the result in descending order\n    for (( i = ${#result[@]} - 1; i >= 0; i-- )); do\n        echo ${result[$i]}\n    done",
    "  local -a nums=($1)\n  local n=$2\n  local -i i\n  local -i j\n  local -i k\n  local -i tmp\n  local -i len=${#nums[@]}\n  local -i last_parent=$((len / 2 - 1))\n\n  # build heap\n  for ((i = last_parent; i >= 0; i--)); do\n    k=$i\n    while ((2 * k + 1 < len)); do\n      j=$((2 * k + 1))\n      if ((j + 1 < len && nums[j] < nums[j + 1])); then\n        j=$((j + 1))\n      fi\n      if ((nums[k] < nums[j])); then\n        tmp=${nums[k]}\n        nums[k]=${nums[j]}\n        nums[j]=$tmp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  # extract largest n numbers\n  for ((i = 0; i < n; i++)); do\n    tmp=${nums[0]}\n    nums[0]=${nums[len - 1]}\n    nums[len - 1]=$tmp\n    len=$((len - 1))\n    k=0\n    while ((2 * k + 1 < len)); do\n      j=$((2 * k + 1))\n      if ((j + 1 < len && nums[j] < nums[j + 1])); then\n        j=$((j + 1))\n      fi\n      if ((nums[k] < nums[j])); then\n        tmp=${nums[k]}\n        nums[k]=${nums[j]}\n        nums[j]=$tmp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  # print result\n  for ((i = 0; i < n; i++)); do\n    echo ${nums[len + i]}\n  done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i t=0\n\n  # Build the heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n    k=i\n    while ((k>0)); do\n      j=$(((k-1)/2))\n      if ((heap[k]>heap[j])); then\n        t=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$t\n      fi\n      k=$j\n    done\n  done\n\n  # Add the rest of the list\n  for ((i=n; i<${#list[@]}; i++)); do\n    if ((list[i]>heap[0])); then\n      heap[0]=${list[i]}\n      k=0\n      while ((k<n)); do\n        j=$((2*k+1))\n        if ((j>=n)); then\n          break\n        fi\n        if ((j+1<n && heap[j+1]>heap[j])); then\n          j=$((j+1))\n        fi\n        if ((heap[k]>heap[j])); then\n          break\n        fi\n        t=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$t\n        k=$j\n      done\n    fi\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    t=${heap[i]}\n    heap[i]=${heap[0]}\n    heap[0]=$t\n    k=0\n    while ((k<i)); do\n      j=$((2*k+1))\n      if ((j>=i)); then\n        break\n      fi\n      if ((j+1<i && heap[j+1]>heap[j])); then\n        j=$((j+1",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local i\n    for i in $list; do\n        heap_queue_insert heap $i\n    done\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap_queue_extract heap\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local tmp\n    local len\n\n    # build heap\n    heap=($list)\n    len=${#heap[@]}\n    for ((i = len/2-1; i >= 0; i--)); do\n        j=$i\n        while ((2*j+1 < len)); do\n            if ((2*j+2 < len)); then\n                if ((heap[2*j+1] > heap[2*j+2])); then\n                    tmp=${heap[2*j+1]}\n                    heap[2*j+1]=${heap[j]}\n                    heap[j]=$tmp\n                    j=2*j+1\n                else\n                    tmp=${heap[2*j+2]}\n                    heap[2*j+2]=${heap[j]}\n                    heap[j]=$tmp\n                    j=2*j+2\n                fi\n            else\n                tmp=${heap[2*j+1]}\n                heap[2*j+1]=${heap[j]}\n                heap[j]=$tmp\n                j=2*j+1\n            fi\n        done\n    done\n\n    # extract n largest\n    for ((i = 0; i < n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[len-1]}\n        len=$((len-1))\n        j=0\n        while ((2*j+1 < len)); do\n            if ((2*j+2 < len)); then\n                if ((heap[2*j+1] > heap[2*j+2])); then\n                    tmp=${heap[2*j+1]}\n                    heap[2*j+1]=${heap[j]}\n                    heap[j]=$tmp\n                    j=2*j+1\n                else\n                    tmp=${heap[2*j+2]}\n                    heap[2*j+2]=${heap[j]}\n                    heap[j]=$tmp\n                    j=2*j+2\n               ",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local size=${#list[@]}\n\n    for ((i=size/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1 < size)); do\n            if ((2*j+2 < size)); then\n                if ((list[2*j+1] < list[2*j+2])); then\n                    tmp=${list[2*j+2]}\n                    list[2*j+2]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+2\n                else\n                    tmp=${list[2*j+1]}\n                    list[2*j+1]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+1\n                fi\n            else\n                tmp=${list[2*j+1]}\n                list[2*j+1]=${list[j]}\n                list[j]=$tmp\n                j=2*j+1\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${list[0]}\n        list[0]=${list[size-1-i]}\n        j=0\n        while ((2*j+1 < size-1-i)); do\n            if ((2*j+2 < size-1-i)); then\n                if ((list[2*j+1] < list[2*j+2])); then\n                    tmp=${list[2*j+2]}\n                    list[2*j+2]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+2\n                else\n                    tmp=${list[2*j+1]}\n                    list[2*j+1]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+1\n                fi\n            else\n                tmp=${list[2*j+1]}\n                list[2*j+1]=${list[j]}\n                list[j]=$tmp\n                j=2*j+1\n           ",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i len=${#1}\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i temp=0\n    local -i t=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i l=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i l=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=",
    "    local -a heap=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n\n    # build heap\n    for ((i=${#heap[@]}/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1 < ${#heap[@]})); do\n            if ((2*j+2 < ${#heap[@]})); then\n                if ((heap[2*j+1] < heap[2*j+2])); then\n                    ((j = 2*j+2))\n                else\n                    ((j = 2*j+1))\n                fi\n            else\n                ((j = 2*j+1))\n            fi\n            if ((heap[j] > heap[i])); then\n                tmp=${heap[i]}\n                heap[i]=${heap[j]}\n                heap[j]=$tmp\n            fi\n        done\n    done\n\n    # extract n largest\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((2*j+1 < ${#heap[@]})); do\n            if ((2*j+2 < ${#heap[@]})); then\n                if ((heap[2*j+1] < heap[2*j+2])); then\n                    ((j = 2*j+2))\n                else\n                    ((j = 2*j+1))\n                fi\n            else\n                ((j = 2*j+1))\n            fi\n            if ((heap[j] > heap[i])); then\n                tmp=${heap[i]}\n                heap[i]=${heap[j]}\n                heap[j]=$tmp\n            fi\n        done\n    done",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i parent=0\n    local -i child=0\n    local -i temp=0\n    local -i max=0\n\n    arr=($1)\n    n=$2\n    len=${#arr[@]}\n\n    # Build the heap\n    for ((i=1; i<len; i++)); do\n        child=$i\n        while ((child > 0)); do\n            parent=$((child-1))/2\n            if ((arr[child] > arr[parent])); then\n                temp=${arr[child]}\n                arr[child]=${arr[parent]}\n                arr[parent]=$temp\n            fi\n            child=$parent\n        done\n    done\n\n    # Extract the largest elements\n    for ((i=0; i<n; i++)); do\n        max=${arr[0]}\n        arr[0]=${arr[len-1]}\n        arr[len-1]=$max\n        len=$((len-1))\n        parent=0\n        while ((2*parent+1 < len)); do\n            child=$((2*parent+1))\n            if ((2*parent+2 < len && arr[2*parent+2] > arr[child])); then\n                child=$((2*parent+2))\n            fi\n            if ((arr[parent] < arr[child])); then\n                temp=${arr[parent]}\n                arr[parent]=${arr[child]}\n                arr[child]=$temp\n            fi\n            parent=$child\n        done\n    done\n\n    echo ${arr[@]}",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_l=0\n    local -i tmp_m=0\n    local -i tmp_n=0\n    local -i tmp_o=0\n    local -i tmp_p=0\n    local -i tmp_q=0\n    local -i tmp_r=0\n    local -i tmp_s=0\n    local -i tmp_t=0\n    local -i tmp_u=0\n    local -i tmp_v=0\n    local -i tmp_w=0\n    local -i tmp_x=0\n    local -i tmp_y=0\n    local -i tmp_z=0\n    local -i tmp_aa=0\n    local -i tmp_bb=0\n    local -i tmp_cc=0\n    local -i tmp_dd=0\n    local -i tmp_ee=0\n    local -i tmp_ff=0\n    local -i tmp_gg=0\n    local -i tmp_hh=0\n    local -i tmp_ii=0\n    local -i tmp_jj=0\n    local -i tmp_kk=0\n    local -i tmp_ll=0\n    local -i tmp_mm=0\n    local -i tmp_nn=0\n    local -i tmp_oo=0\n    local -i tmp_pp=0\n    local -i tmp_qq=0\n    local -i tmp_rr=0\n    local -i tmp_ss=0\n    local -i tmp_tt=0\n    local -i tmp_uu=0\n    local -i tmp_vv=0\n    local -i tmp_ww=0\n    local -i tmp_xx=0\n    local -i tmp_yy=0\n    local -i tmp_zz=0\n    local -i tmp_aaa=0\n    local -",
    "  local -a heap\n  local -i i\n  local -i n\n  local -i size\n  local -i tmp\n  local -i x\n  local -i y\n  n=$2\n  size=0\n  for i in $1; do\n    heap[size]=$i\n    x=size\n    while (( x > 0 )); do\n      y=$(( (x-1)/2 ))\n      if (( heap[y] < heap[x] )); then\n        tmp=${heap[y]}\n        heap[y]=${heap[x]}\n        heap[x]=$tmp\n        x=$y\n      else\n        break\n      fi\n    done\n    (( size++ ))\n  done\n  for (( i=0; i<n; i++ )); do\n    echo ${heap[0]}\n    heap[0]=${heap[size-1]}\n    (( size-- ))\n    x=0\n    while (( x < size )); do\n      y=$(( 2*x+1 ))\n      if (( y >= size )); then\n        break\n      fi\n      if (( y+1 < size && heap[y+1] > heap[y] )); then\n        (( y++ ))\n      fi\n      if (( heap[x] < heap[y] )); then\n        tmp=${heap[y]}\n        heap[y]=${heap[x]}\n        heap[x]=$tmp\n        x=$y\n      else\n        break\n      fi\n    done\n  done",
    "    local -a heap=()\n    local -i i=0\n    local -i n=$2\n    local -i len=${#1}\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i min=0\n    local -i min_index=0\n    local -i max=0\n    local -i max_index=0\n    local -i parent=0\n    local -i child=0\n    local -i child_index=0\n    local -i child_index_1=0\n    local -i child_index_2=0\n    local -i child_index_3=0\n    local -i child_index_4=0\n    local -i child_index_5=0\n    local -i child_index_6=0\n    local -i child_index_7=0\n    local -i child_index_8=0\n    local -i child_index_9=0\n    local -i child_index_10=0\n    local -i child_index_11=0\n    local -i child_index_12=0\n    local -i child_index_13=0\n    local -i child_index_14=0\n    local -i child_index_15=0\n    local -i child_index_16=0\n    local -i child_index_17=0\n    local -i child_index_18=0\n    local -i child_index_19=0\n    local -i child_index_20=0\n    local -i child_index_21=0\n    local -i child_index_22=0\n    local -i child_index_23=0\n    local -i child_index_24=0\n    local -i child_index_25=0\n    local -i child_index_26=0\n    local -i child_index_27=0\n    local -i child_index_28=0\n    local -i child_index_29=0\n    local -i child_index_30=0\n    local -i child_index_31=0\n    local -i child_index_32=0\n    local -i child_",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=$(echo $1 | wc -w)\n    local -i mid=$((len/2))\n    local -i last=$((len-1))\n    local -i parent\n    local -i child\n    local -i tmp\n    local -i tmp_index\n    local -i tmp_index_child\n    local -i tmp_index_parent\n\n    # Create a heap from the list\n    for i in $(seq 0 $last); do\n        heap[i]=$(echo $1 | cut -d' ' -f$((i+1)))\n    done\n\n    # Heapify the heap\n    for i in $(seq $mid -1 0); do\n        parent=$i\n        child=$((parent*2+1))\n        while [ $child -le $last ]; do\n            if [ $child -lt $last ] && [ ${heap[$child]} -lt ${heap[$((child+1))]} ]; then\n                child=$((child+1))\n            fi\n            if [ ${heap[$parent]} -lt ${heap[$child]} ]; then\n                tmp=${heap[$parent]}\n                heap[$parent]=${heap[$child]}\n                heap[$child]=$tmp\n                parent=$child\n                child=$((parent*2+1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the n largest elements\n    for i in $(seq 1 $n); do\n        echo ${heap[0]}\n        tmp_index=$((len-i))\n        tmp_index_parent=0\n        tmp_index_child=1\n        heap[0]=${heap[$tmp_index]}\n        while [ $tmp_index_child -lt $tmp_index ]; do\n            if [ $tmp_index_child -lt $((tmp_index-1)) ] && [ ${heap[$tmp_index_child]} -lt ${heap[$((tmp_index_child+1))]} ]; then\n                tmp_index_child=$((tmp_index_child+1))\n            fi\n            if [ ${heap[",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n\n    # Initialize the heap\n    for i in $list; do\n        heap[${#heap[@]}]=\"$i\"\n    done\n\n    # Heapify\n    for i in $(seq 0 $(( ${#heap[@]} / 2 - 1 ))); do\n        j=$(( 2 * i + 1 ))\n        k=$(( 2 * i + 2 ))\n        if [[ $j -lt ${#heap[@]} && $k -lt ${#heap[@]} ]]; then\n            if [[ ${heap[$j]} -lt ${heap[$k]} ]]; then\n                tmp=${heap[$i]}\n                heap[$i]=${heap[$k]}\n                heap[$k]=$tmp\n            fi\n        elif [[ $j -lt ${#heap[@]} ]]; then\n            tmp=${heap[$i]}\n            heap[$i]=${heap[$j]}\n            heap[$j]=$tmp\n        fi\n    done\n\n    # Extract the n largest integers\n    for i in $(seq 1 $n); do\n        result[$(( $n - $i ))]=${heap[0]}\n        heap[0]=${heap[${#heap[@]} - 1]}\n        unset heap[${#heap[@]} - 1]\n        j=0\n        k=$(( 2 * j + 1 ))\n        while [[ $k -lt ${#heap[@]} ]]; do\n            if [[ $(( 2 * j + 2 )) -lt ${#heap[@]} && ${heap[$k]} -lt ${heap[$(( 2 * j + 2 ))]} ]]; then\n                k=$(( 2 * j + 2 ))\n            fi\n            if [[ ${heap[$j]} -lt ${heap[$k]} ]]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$tmp\n                j=$k",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i len=${#1}\n    local -i max_i=0\n    local -i max_val=0\n    local -i left_i=0\n    local -i right_i=0\n    local -i swap_i=0\n    local -i swap_val=0\n    local -i temp_i=0\n    local -i temp_val=0\n    local -i temp_max_i=0\n    local -i temp_max_val=0\n    local -i temp_swap_i=0\n    local -i temp_swap_val=0\n    local -i temp_left_i=0\n    local -i temp_right_i=0\n    local -i temp_left_val=0\n    local -i temp_right_val=0\n    local -i temp_max_val=0\n    local -i temp_max_i=0\n    local -i temp_swap_val=0\n    local -i temp_swap_i=0\n    local -i temp_left_val=0\n    local -i temp_left_i=0\n    local -i temp_right_val=0\n    local -i temp_right_i=0\n    local -i temp_left_val=0\n    local -i temp_left_i=0\n    local -i temp_right_val=0\n    local -i temp_right_i=0\n    local -i temp_left_val=0\n    local -i temp_left_i=0\n    local -i temp_right_val=0\n    local -i temp_right_i=0\n    local -i temp_left_val=0\n    local -i temp_left_i=0\n    local -i temp_right_val=0\n    local -i temp_right_i=0\n    local -i temp_left_val=0\n    local -i temp_left_i=0\n    local -i temp_right_val=0\n    local -i temp_right_i=0\n    local -i temp_left_val=",
    "    local -a list=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local size=${#list[@]}\n    local -a heap=()\n    local -a result=()\n\n    # build heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        heap_queue_heapify \"${heap[@]}\" $i $n\n    done\n\n    # heap sort\n    for ((i=n; i<size; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_queue_heapify \"${heap[@]}\" 0 $n\n        fi\n    done\n\n    # print result\n    for ((i=n-1; i>=0; i--)); do\n        result[$i]=${heap[0]}\n        heap[0]=${heap[$i]}\n        heap_queue_heapify \"${heap[@]}\" 0 $i\n    done\n    echo \"${result[@]}\"",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n\n    # convert string to array\n    for i in $1; do\n        arr[len]=$i\n        len=$len+1\n    done\n\n    # build max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        max=$i\n        tmp_i=$i\n        tmp_j=$2*i+1\n        if [ $tmp_j -lt $len ] && [ ${arr[tmp_j]} -gt ${arr[max]} ]; then\n            max=$tmp_j\n        fi\n        tmp_j=$2*i+2\n        if [ $tmp_j -lt $len ] && [ ${arr[tmp_j]} -gt ${arr[max]} ]; then\n            max=$tmp_j\n        fi\n        if [ $max -ne $tmp_i ]; then\n            tmp=${arr[tmp_i]}\n            arr[tmp_i]=${arr[max]}\n            arr[max]=$tmp\n        fi\n    done\n\n    # extract max\n    for ((i=len-1; i>=len-n; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        max_i=0\n        tmp_i=0\n        tmp_j=1\n        if [ $tmp_j -lt $i ] && [ ${arr[tmp_j]} -gt ${arr[max_i]} ]; then\n            max_i=$tmp_j\n        fi\n        tmp_j=2\n        if [ $tmp_j -lt $i ] && [ ${arr[tmp_j]} -gt ${arr[max_i]} ]; then\n            max_i=$tmp_j\n        fi\n        if [ $max_i -ne $tmp_i ]; then\n            tmp=${arr[tmp_i]}\n            arr[tmp_",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_list\n    local -i n_heap\n    local -i tmp\n    local -i tmp_i\n    local -i tmp_j\n    local -i tmp_k\n    local -i tmp_l\n    local -i tmp_m\n    local -i tmp_n_list\n    local -i tmp_n_heap\n\n    n_list=${#list[@]}\n    n_heap=0\n\n    for ((i=0; i<n_list; i++)); do\n        if ((n_heap < n)); then\n            # heap is not full, so add the element to the end\n            heap[n_heap]=${list[i]}\n            ((n_heap++))\n        else\n            # heap is full, so compare the element to the root\n            if ((list[i] > heap[0])); then\n                # element is larger than the root, so replace the root\n                heap[0]=${list[i]}\n            fi\n        fi\n\n        # heapify\n        j=0\n        while ((j < n_heap)); do\n            k=$((2*j+1))\n            l=$((2*j+2))\n            m=$j\n            if ((k < n_heap && heap[k] > heap[m])); then\n                m=$k\n            fi\n            if ((l < n_heap && heap[l] > heap[m])); then\n                m=$l\n            fi\n            if ((m != j)); then\n                tmp=${heap[j]}\n                heap[j]=${heap[m]}\n                heap[m]=$tmp\n                j=$m\n            else\n                break\n            fi\n        done\n    done\n\n    # sort the heap in descending order\n    for ((i=0; i<n_heap; i++)); do\n        for ((j=i+1; j<n_heap; j++)); do\n            if ((heap[i",
    "    local -a heap\n    local -i heap_size=0\n    local -i i\n    local -i n=$2\n    local -i tmp\n    local -i tmp_i\n    local -i tmp_j\n\n    for i in $1; do\n        heap[heap_size++]=$i\n        tmp_i=heap_size-1\n        while (( tmp_i > 0 )); do\n            tmp_j=$(( (tmp_i-1)/2 ))\n            if (( heap[tmp_i] > heap[tmp_j] )); then\n                tmp=heap[tmp_i]\n                heap[tmp_i]=heap[tmp_j]\n                heap[tmp_j]=$tmp\n                tmp_i=$tmp_j\n            else\n                break\n            fi\n        done\n    done\n\n    for (( i=0; i<n; i++ )); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[--heap_size]}\n        tmp_i=0\n        while (( tmp_i < heap_size )); do\n            tmp_j=$(( tmp_i*2+1 ))\n            if (( tmp_j >= heap_size )); then\n                break\n            fi\n            if (( tmp_j+1 < heap_size && heap[tmp_j+1] > heap[tmp_j] )); then\n                tmp_j=$(( tmp_j+1 ))\n            fi\n            if (( heap[tmp_i] < heap[tmp_j] )); then\n                tmp=heap[tmp_i]\n                heap[tmp_i]=heap[tmp_j]\n                heap[tmp_j]=$tmp\n                tmp_i=$tmp_j\n            else\n                break\n            fi\n        done\n    done\n    echo",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n    local -i m\n    local -i len\n    local -i max\n    local -i max_idx\n    local -i tmp\n\n    # Build a max heap\n    len=0\n    for i in $list; do\n        heap[len++]=\"$i\"\n    done\n    for ((i=len/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1 < len)); do\n            j=2*k+1\n            if ((j+1 < len && heap[j] < heap[j+1])) ; then\n                j+=1\n            fi\n            if ((heap[k] < heap[j])) ; then\n                t=heap[k]\n                heap[k]=heap[j]\n                heap[j]=$t\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the max element from the heap\n    for ((i=0; i<n; i++)); do\n        max=heap[0]\n        max_idx=0\n        for ((j=1; j<len; j++)); do\n            if ((heap[j] > max)); then\n                max=heap[j]\n                max_idx=j\n            fi\n        done\n        if ((i < n-1)); then\n            heap[max_idx]=${heap[len-1]}\n            len-=1\n            k=max_idx\n            while ((2*k+1 < len)); do\n                j=2*k+1\n                if ((j+1 < len && heap[j] < heap[j+1])) ; then\n                    j+=1\n                fi\n                if ((heap[k] < heap[j])) ; then\n                    t=heap[k]\n                    heap[k]=heap[j]\n                    heap[j]=$t\n                    k=j\n                else\n                    break\n                fi\n            done",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local heap_size=0\n\n    # Build a heap from the list\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap_insert ${list[$i]}\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap_extract_max\n    done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n    local len=${#list[@]}\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        j=$((2*i+1))\n        while ((j<n)); do\n            if ((j+1<n && heap[j+1]>heap[j])); then\n                j=$((j+1))\n            fi\n            if ((heap[j]<=tmp)); then\n                break\n            fi\n            heap[$((j/2))]=${heap[j]}\n            j=$((2*j+1))\n        done\n        heap[$((j/2))]=$tmp\n    done\n    for ((i=n; i<len; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            tmp=${heap[0]}\n            j=0\n            while ((j<n)); do\n                if ((j+1<n && heap[j+1]>heap[j])); then\n                    j=$((j+1))\n                fi\n                if ((heap[j]<=tmp)); then\n                    break\n                fi\n                heap[$((j/2))]=${heap[j]}\n                j=$((2*j+1))\n            done\n            heap[$((j/2))]=$tmp\n        fi\n    done\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        j=0\n        while ((j<i)); do\n            if ((j+1<i && heap[j+1]>heap[j])); then\n                j=$((j+1))\n            fi\n            if ((heap[j]<=tmp)); then\n                break\n           ",
    "    local list=($1)\n    local n=$2\n    local heap_size=${#list[@]}\n    local i\n    local j\n    local temp\n    # Build a max heap\n    for ((i=heap_size/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1 < heap_size)); do\n            if ((2*j+2 < heap_size)) && ((list[2*j+2] > list[2*j+1])); then\n                ((temp=2*j+2))\n            else\n                ((temp=2*j+1))\n            fi\n            if ((list[temp] > list[j])); then\n                ((list[temp], list[j] = list[j], list[temp]))\n                ((j=temp))\n            else\n                break\n            fi\n        done\n    done\n    # Extract the max element n times\n    for ((i=0; i<n; i++)); do\n        echo ${list[0]}\n        ((list[0]=list[heap_size-1]))\n        ((heap_size--))\n        j=0\n        while ((2*j+1 < heap_size)); do\n            if ((2*j+2 < heap_size)) && ((list[2*j+2] > list[2*j+1])); then\n                ((temp=2*j+2))\n            else\n                ((temp=2*j+1))\n            fi\n            if ((list[temp] > list[j])); then\n                ((list[temp], list[j] = list[j], list[temp]))\n                ((j=temp))\n            else\n                break\n            fi\n        done\n    done",
    "  local list=($1)\n  local n=$2\n  local heap=()\n  local i\n  local j\n  local tmp\n\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n  done\n\n  for ((i=n; i<${#list[@]}; i++)); do\n    if [[ ${list[i]} -gt ${heap[0]} ]]; then\n      heap[0]=${list[i]}\n      j=0\n      while true; do\n        if [[ $((2*j+1)) -lt $n ]]; then\n          if [[ $((2*j+2)) -lt $n ]]; then\n            if [[ ${heap[$((2*j+1))]} -gt ${heap[$((2*j+2))]} ]]; then\n              if [[ ${heap[$((2*j+1))]} -gt ${heap[$j]} ]]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$((2*j+1))]}\n                heap[$((2*j+1))]=$tmp\n                j=$((2*j+1))\n              else\n                break\n              fi\n            else\n              if [[ ${heap[$((2*j+2))]} -gt ${heap[$j]} ]]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$((2*j+2))]}\n                heap[$((2*j+2))]=$tmp\n                j=$((2*j+2))\n              else\n                break\n              fi\n            fi\n          else\n            if [[ ${heap[$((2*j+1))]} -gt ${heap[$j]} ]]; then\n              tmp=${heap[$j]}\n              heap[$j]=${heap[$((2*j+1))]}\n              heap[$((2*j+1))]=$tmp\n              j=$((2*j+1))\n            else\n              break\n            fi\n          fi\n        else\n          break\n        fi\n      done\n    fi\n ",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    for i in $1; do\n        arr+=($i)\n    done\n    heap_queue_largest_arr arr[@] $n",
    "    local -a queue=()\n    local -a result=()\n    local -i i=0\n    local -i n=$2\n    local -i size=0\n    local -i index=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_size=0\n    local -i temp_left=0\n    local -i temp_right=0\n    local -i temp_largest=0\n\n    for i in $1; do\n        queue[size]=$i\n        size=$size+1\n    done\n\n    for ((i=size/2-1; i>=0; i--)); do\n        index=$i\n        temp=${queue[index]}\n        temp_size=$size\n        temp_left=$((2*index+1))\n        temp_right=$((2*index+2))\n        while ((temp_left<temp_size)); do\n            temp_largest=$temp_left\n            if ((temp_right<temp_size && queue[temp_right]>queue[temp_left])); then\n                temp_largest=$temp_right\n            fi\n            if ((queue[temp_largest]>temp)); then\n                queue[index]=${queue[temp_largest]}\n                index=$temp_largest\n            else\n                break\n            fi\n            temp_left=$((2*index+1))\n            temp_right=$((2*index+2))\n        done\n        queue[index]=$temp\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[i]=${queue[0]}\n        queue[0]=${queue[size-1]}\n        size=$size-1\n        index=0\n        temp=${queue[index]}\n        temp_size=$size\n        temp_left=$((2*index+1))\n        temp_right=$((2*index+2))\n        while ((temp_left<temp_size)); do\n            temp_largest=$temp_left\n            if ((temp_right<temp_size && queue[temp_right]>queue[temp_left])); then",
    "    if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n        echo \"Usage: $0 <space-separated list> <integer>\"\n        return 1\n    fi\n\n    local list=($1)\n    local n=$2\n\n    if [ ${#list[@]} -lt $n ]; then\n        echo \"Error: list length is less than n\"\n        return 1\n    fi\n\n    # Build a max heap\n    local i\n    for ((i=${#list[@]}/2-1; i>=0; i--)); do\n        heapify $i ${#list[@]}\n    done\n\n    # Extract the top n elements\n    local j\n    for ((j=0; j<n; j++)); do\n        echo ${list[0]}\n        list[0]=${list[${#list[@]}-1-$j]}\n        heapify 0 ${#list[@]}-$j-1\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i n_largest=0\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i swap=0\n    local -i tmp=0\n    local -i value=0\n\n    # Initialize heap\n    for i in $list; do\n        heap[$n_heap]=$i\n        n_heap=$((n_heap+1))\n    done\n    n_list=$n_heap\n\n    # Build heap\n    for ((i=n_heap-1; i>=0; i--)); do\n        parent=$((i/2))\n        value=${heap[$i]}\n        while ((i>0 && value>heap[$parent])); do\n            heap[$i]=${heap[$parent]}\n            i=$parent\n            parent=$((i/2))\n        done\n        heap[$i]=$value\n    done\n\n    # Extract n largest integers\n    n_largest=$((n_heap-n))\n    for ((i=0; i<n_largest; i++)); do\n        value=${heap[0]}\n        heap[0]=${heap[$n_heap-1]}\n        n_heap=$((n_heap-1))\n        parent=0\n        while ((1)); do\n            left=$((2*parent+1))\n            right=$((2*parent+2))\n            if ((left>=n_heap)); then\n                break\n            elif ((right>=n_heap)); then\n                if ((heap[$left]>heap[$parent])); then\n                    tmp=${heap[$parent]}\n                    heap[$parent]=${heap[$left]}\n                    heap[$left]=$tmp\n                fi\n                break\n",
    "  local -a arr=()\n  local -i i=0\n  local -i n=0\n  local -i len=0\n  local -i max=0\n  local -i max_i=0\n  local -i tmp=0\n  local -i tmp_i=0\n  local -i tmp_j=0\n  local -i tmp_k=0\n\n  arr=($1)\n  n=$2\n  len=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    max=${arr[i]}\n    max_i=$i\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j] > max)); then\n        max=${arr[j]}\n        max_i=$j\n      fi\n    done\n    tmp=${arr[i]}\n    arr[i]=${arr[max_i]}\n    arr[max_i]=$tmp\n  done\n\n  for ((i=0; i<n; i++)); do\n    echo ${arr[i]}\n  done",
    "    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n    local -i m\n    local -i t\n    local -i x\n    local -i y\n    local -i z\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i u\n    local -i v\n    local -i w\n    local -i h\n    local -i l\n    local -i e\n    local -i f\n    local -i g\n    local -i d\n    local -i c\n    local -i b\n    local -i a\n    local -i N\n    local -i M\n    local -i T\n    local -i X\n    local -i Y\n    local -i Z\n    local -i P\n    local -i Q\n    local -i R\n    local -i S\n    local -i U\n    local -i V\n    local -i W\n    local -i H\n    local -i L\n    local -i E\n    local -i F\n    local -i G\n    local -i D\n    local -i C\n    local -i B\n    local -i A\n    local -i n_largest\n    local -i n_largest_index\n    local -i n_largest_value\n    local -i n_largest_value_index\n    local -i n_largest_value_index_tmp\n    local -i n_largest_value_tmp\n    local -i n_largest_tmp\n    local -i n_largest_index_tmp\n    local -i n_largest_value_index_tmp2\n    local -i n_largest_value_tmp2\n    local -i n_largest_tmp2\n    local -i n_largest_index_tmp2\n    local -i n_largest_value_index_tmp3\n    local -i n_largest_value_tmp3\n    local -i n_largest_tmp3\n    local -i n_largest_index_tmp3\n    local -i n_largest_value_index_tmp4\n    local -i n_largest_value_tmp4\n    local -",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local i\n  local j\n  local k\n  local tmp\n  local -a result\n\n  # Build a max-heap\n  for i in $list; do\n    heap[${#heap[@]}]=$i\n    j=$(( ${#heap[@]} - 1 ))\n    while [ $j -gt 0 ]; do\n      k=$(( (j - 1) / 2 ))\n      if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n        tmp=${heap[$j]}\n        heap[$j]=${heap[$k]}\n        heap[$k]=$tmp\n      fi\n      j=$k\n    done\n  done\n\n  # Extract the largest n elements\n  for (( i=0; i<n; i++ )); do\n    result[$i]=${heap[0]}\n    heap[0]=${heap[${#heap[@]}-1]}\n    heap=(\"${heap[@]:0:${#heap[@]}-1}\")\n    j=0\n    while [ $j -lt ${#heap[@]} ]; do\n      k=$(( 2 * j + 1 ))\n      if [ $k -ge ${#heap[@]} ]; then\n        break\n      fi\n      if [ $(( k + 1 )) -lt ${#heap[@]} ] && [ ${heap[$k]} -lt ${heap[$(( k + 1 ))]} ]; then\n        k=$(( k + 1 ))\n      fi\n      if [ ${heap[$j]} -lt ${heap[$k]} ]; then\n        tmp=${heap[$j]}\n        heap[$j]=${heap[$k]}\n        heap[$k]=$tmp\n      fi\n      j=$k\n    done\n  done\n\n  # Print the result in descending order\n  for (( i=${#result[@]}-1; i>=0; i-- )); do\n    echo ${result[$i]}\n  done",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n    for ((i=n/2-1; i>=0; i--)); do\n        tmp=${arr[i]}\n        j=$((2*i+1))\n        while ((j<n)); do\n            if ((j+1<n && arr[j+1]>arr[j])); then\n                j=$((j+1))\n            fi\n            if ((tmp>arr[j])); then\n                break\n            fi\n            arr[$((j/2))]=${arr[j]}\n            j=$((2*j+1))\n        done\n        arr[$((j/2))]=$tmp\n    done\n    for ((i=n; i<len; i++)); do\n        if ((arr[i]>arr[0])); then\n            arr[0]=${arr[i]}\n            tmp=${arr[0]}\n            j=1\n            while ((j<n)); do\n                if ((j+1<n && arr[j+1]>arr[j])); then\n                    j=$((j+1))\n                fi\n                if ((tmp>arr[j])); then\n                    break\n                fi\n                arr[$((j/2))]=${arr[j]}\n                j=$((2*j+1))\n            done\n            arr[$((j/2))]=$tmp\n        fi\n    done\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${arr[i]}\n        arr[i]=${arr[0]}\n        arr[0]=$tmp\n        j=1\n        while ((j<i)); do\n            if ((j+1<i && arr[j+1]>arr[j])); then\n                j=$((j+1))\n            fi\n            if ((tmp>arr[j])); then\n                break\n            fi\n            arr[$((j/2))]=${arr[j]}\n            j=$((2*j+1))\n        done\n        arr[$((j/2))]=$tmp",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_list=${#list[@]}\n    local -i n_heap=0\n    local -i n_heap_max=$((n_list - n))\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i heap_size=0\n    local -i heap_capacity=${#1}\n    local -i parent\n    local -i child\n    local -i tmp\n\n    # Initialize the heap\n    for ((i=0; i<heap_capacity; i++)); do\n        heap[i]=${1[i]}\n    done\n\n    # Build the heap\n    for ((i=heap_capacity/2-1; i>=0; i--)); do\n        parent=$i\n        while true; do\n            child=$((2*parent+1))\n            if ((child>=heap_capacity)); then\n                break\n            fi\n            if ((child+1<heap_capacity)) && ((heap[child+1]>heap[child])); then\n                child=$((child+1))\n            fi\n            if ((heap[parent]>=heap[child])); then\n                break\n            fi\n            tmp=${heap[parent]}\n            heap[parent]=${heap[child]}\n            heap[child]=$tmp\n            parent=$child\n        done\n    done\n\n    # Extract the largest elements\n    for ((i=0; i<n; i++)); do\n        if ((heap_size==0)); then\n            break\n        fi\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[heap_size-1]}\n        heap_size=$((heap_size-1))\n        parent=0\n        while true; do\n            child=$((2*parent+1))\n            if ((child>=heap_size)); then\n                break\n            fi\n            if ((child+1<heap_size)) && ((heap[child+1]>heap[child])); then\n                child=$((child+1))\n            fi\n            if ((heap[parent]>=heap[child])); then\n                break\n            fi\n            tmp=${heap[parent]}\n            heap[parent]=${heap[child]}\n            heap[child]=$tmp\n            parent=$child\n        done\n    done",
    "    local list=$1\n    local n=$2\n    local -a arr=($list)\n    local -a heap=()\n    local -a result=()\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n    local len_heap=0\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n\n    for ((i=n; i<len; i++)); do\n        if [[ ${arr[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${arr[i]}\n            len_heap=${#heap[@]}\n            for ((j=0; j<len_heap; j++)); do\n                if [[ ${heap[j]} -gt ${heap[2*j+1]} ]]; then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[2*j+1]}\n                    heap[2*j+1]=$tmp\n                fi\n                if [[ ${heap[j]} -gt ${heap[2*j+2]} ]]; then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[2*j+2]}\n                    heap[2*j+2]=$tmp\n                fi\n            done\n        fi\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[i]}\n    done\n\n    echo ${result[@]}",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local tmp=0\n    local len=${#list[@]}\n\n    # Build a heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[len-i-1]}\n        j=0\n        while ((j<len-i-1)); do\n            k=$((2*j+1))\n            l=$((2*j+2))\n            m=$j\n            if ((k<len-i-1 && heap[k]>heap[m])); then\n                m=$k\n            fi\n            if ((l<len-i-1 && heap[l]>heap[m])); then\n                m=$l\n            fi\n            if ((m!=j)); then\n                tmp=${heap[j]}\n                heap[j]=${heap[m]}\n                heap[m]=$tmp\n                j=$m\n            else\n                break\n            fi\n        done\n    done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap=()\n  local -i i=0\n\n  while (( i < n )); do\n    heap[i]=${list[i]}\n    (( i++ ))\n  done\n\n  heap_sort heap\n\n  while (( i < ${#list[@]} )); do\n    if (( list[i] > heap[0] )); then\n      heap[0]=${list[i]}\n      heap_sort heap\n    fi\n    (( i++ ))\n  done\n\n  echo \"${heap[@]}\"",
    "    local -a arr=()\n    local -i len=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i tmp=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_n=0\n    local -i max_tmp=0\n    local -i max_len=0\n    local -i max_arr=0\n\n    arr=($1)\n    len=${#arr[@]}\n    n=$2\n\n    for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n        max_i=$i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n                max_i=$j\n            fi\n        done\n        tmp=${arr[i]}\n        arr[i]=$max\n        arr[max_i]=$tmp\n    done\n\n    if [[ $n -gt $len ]]; then\n        n=$len\n    fi\n\n    for ((i=0; i<n; i++)); do\n        max_arr[i]=${arr[i]}\n    done\n\n    max_len=${#max_arr[@]}\n    for ((i=0; i<max_len; i++)); do\n        max=${max_arr[i]}\n        max_i=$i\n        for ((j=i+1; j<max_len; j++)); do\n            if [[ ${max_arr[j]} -gt $max ]]; then\n                max=${max_arr[j]}\n                max_i=$j\n            fi\n        done\n        tmp=${max_arr[i]}\n        max_arr[i]=$max\n        max_arr[max_i]=$tmp\n    done\n\n    echo ${max_arr[@]}",
    "    local -a list=($1)\n    local n=$2\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i t\n    local -i len=${#list[@]}\n\n    for ((i=n-1; i>=0; i--)); do\n        for ((j=i; j<len; j++)); do\n            k=$((j*2+1))\n            l=$((j*2+2))\n            m=$j\n            if ((k<len && list[k]>list[m])); then\n                m=$k\n            fi\n            if ((l<len && list[l]>list[m])); then\n                m=$l\n            fi\n            if ((m!=j)); then\n                t=${list[j]}\n                list[j]=${list[m]}\n                list[m]=$t\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${list[i]}\n    done",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i tmp=0\n    local -i len=0\n    local -i len_half=0\n    local -i len_minus_one=0\n    local -i len_minus_two=0\n    local -i len_minus_three=0\n    local -i len_minus_four=0\n    local -i len_minus_five=0\n    local -i len_minus_six=0\n    local -i len_minus_seven=0\n    local -i len_minus_eight=0\n    local -i len_minus_nine=0\n    local -i len_minus_ten=0\n    local -i len_minus_eleven=0\n    local -i len_minus_twelve=0\n    local -i len_minus_thirteen=0\n    local -i len_minus_fourteen=0\n    local -i len_minus_fifteen=0\n    local -i len_minus_sixteen=0\n    local -i len_minus_seventeen=0\n    local -i len_minus_eighteen=0\n    local -i len_minus_nineteen=0\n    local -i len_minus_twenty=0\n    local -i len_minus_twenty_one=0\n    local -i len_minus_twenty_two=0\n    local -i len_minus_twenty_three=0\n    local -i len_minus_twenty_four=0\n    local -i len_minus_twenty_five=0\n    local -i len_minus_twenty_six=0\n    local -i len_minus_twenty_seven=0\n    local -i len_minus_twenty_eight=0\n    local -i len_minus_twenty_nine=0\n    local -i len_minus_thirty=0\n    local -i len_minus_thirty_one=0\n    local -i len_minus_thirty_two=0\n",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n\n    for i in ${list[@]}; do\n        if [[ ${#heap[@]} -lt $n ]]; then\n            heap_queue_insert heap[@] $i\n        elif [[ $i -gt ${heap[0]} ]]; then\n            heap_queue_pop heap[@]\n            heap_queue_insert heap[@] $i\n        fi\n    done\n\n    while [[ ${#heap[@]} -gt 0 ]]; do\n        heap_queue_pop heap[@]\n    done",
    "  local -a heap\n  local -i i j k n\n  n=0\n  for i in $1; do\n    heap[n++]=$i\n    j=n-1\n    while [ $j -gt 0 ]; do\n      k=$(( (j-1)/2 ))\n      if [ ${heap[j]} -gt ${heap[k]} ]; then\n        tmp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$tmp\n      fi\n      j=$k\n    done\n  done\n  for ((i=0; i<$2; i++)); do\n    echo ${heap[0]}\n    heap[0]=${heap[--n]}\n    j=0\n    while [ $j -lt $n ]; do\n      k=$(( 2*j+1 ))\n      if [ $k -ge $n ]; then\n        break\n      fi\n      if [ $(( k+1 )) -lt $n ] && [ ${heap[k+1]} -gt ${heap[k]} ]; then\n        k=$(( k+1 ))\n      fi\n      if [ ${heap[j]} -lt ${heap[k]} ]; then\n        tmp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$tmp\n      fi\n      j=$k\n    done\n  done",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i t=0\n    local -i len=0\n    local -i max=0\n    local -i tmp=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i heap_size=0\n    local -i index=0\n\n    arr=($1)\n    len=${#arr[@]}\n    heap_size=$len\n\n    for ((i=len/2-1; i>=0; i--)); do\n        max=$i\n        left=$((2*i+1))\n        right=$((2*i+2))\n\n        if [[ $left -lt $heap_size && ${arr[$left]} -gt ${arr[$max]} ]]; then\n            max=$left\n        fi\n\n        if [[ $right -lt $heap_size && ${arr[$right]} -gt ${arr[$max]} ]]; then\n            max=$right\n        fi\n\n        if [[ $max -ne $i ]]; then\n            tmp=${arr[$i]}\n            arr[$i]=${arr[$max]}\n            arr[$max]=$tmp\n        fi\n    done\n\n    for ((i=len-1; i>=len-n; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[$i]}\n        arr[$i]=$tmp\n        heap_size=$((heap_size-1))\n        max=0\n        left=1\n        right=2\n\n        while [[ $left -lt $heap_size ]]; do\n            if [[ ${arr[$left]} -gt ${arr[$max]} ]]; then\n                max=$left\n            fi\n\n            if [[ $right -lt $heap_size && ${arr[$right]} -gt ${arr[$max]} ]]; then\n                max=$right\n            fi\n\n            if [[ $max -eq $i ]]; then\n                break\n            fi\n\n            tmp=${arr[$i]}\n            arr[",
    "  local -a list=($1)\n  local n=$2\n  local -a result=()\n  local i\n  local j\n  local temp\n  local len=${#list[@]}\n\n  # Build heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    while ((2 * i + 1 < len)); do\n      j = 2 * i + 1\n      if ((j < len - 1 && list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[i] < list[j])); then\n        temp = list[i]\n        list[i] = list[j]\n        list[j] = temp\n      fi\n      i = j\n    done\n  done\n\n  # Extract n largest elements\n  for ((i = 0; i < n; i++)); do\n    result[i] = list[0]\n    list[0] = list[len - 1]\n    len--\n    j = 0\n    while ((2 * j + 1 < len)); do\n      k = 2 * j + 1\n      if ((k < len - 1 && list[k] < list[k + 1])); then\n        k++\n      fi\n      if ((list[j] < list[k])); then\n        temp = list[j]\n        list[j] = list[k]\n        list[k] = temp\n      fi\n      j = k\n    done\n  done\n\n  # Print result\n  for ((i = n - 1; i >= 0; i--)); do\n    echo ${result[i]}\n  done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local i\n    for ((i=0; i<n; i++)); do\n        heap_queue_push heap \"${list[i]}\"\n    done\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ \"${list[i]}\" -gt \"${heap[0]}\" ]]; then\n            heap_queue_pop heap\n            heap_queue_push heap \"${list[i]}\"\n        fi\n    done\n    echo \"${heap[@]}\" | tr ' ' '\\n' | sort -nr",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=$(echo \"$1\" | wc -w)\n    local -i largest\n    local -i largest_i\n    local -i tmp\n    local -i tmp_i\n    local -i tmp_j\n\n    if (( n > len )); then\n        echo \"Error: n is greater than the length of the list\"\n        return 1\n    fi\n\n    # Initialize the heap\n    for (( i = 0; i < n; i++ )); do\n        heap[i]=$(echo \"$1\" | cut -d' ' -f$((i+1)))\n    done\n\n    # Heapify\n    for (( i = n/2 - 1; i >= 0; i-- )); do\n        largest=$(echo \"${heap[i]}\" | cut -d' ' -f1)\n        largest_i=$i\n        tmp_i=$i\n        while (( tmp_i < n )); do\n            tmp_j=$((2 * tmp_i + 1))\n            if (( tmp_j < n )); then\n                tmp=$(echo \"${heap[tmp_j]}\" | cut -d' ' -f1)\n                if (( tmp > largest )); then\n                    largest=$tmp\n                    largest_i=$tmp_j\n                fi\n            fi\n            tmp_j=$((2 * tmp_i + 2))\n            if (( tmp_j < n )); then\n                tmp=$(echo \"${heap[tmp_j]}\" | cut -d' ' -f1)\n                if (( tmp > largest )); then\n                    largest=$tmp\n                    largest_i=$tmp_j\n                fi\n            fi\n            if (( largest_i == tmp_i )); then\n                break\n            fi\n            tmp=${heap[tmp_i]}\n            heap[tmp_i]=${heap[largest_i]}\n            heap[largest_i]=$tmp\n            tmp_i=$largest_i\n        done\n    done\n\n    # Replace the root with the next element in the list\n    for (( i = n; i < len; i++ )); do\n        tmp=$(echo \"$1\" | cut -d' ' -",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap=()\n    local -a result=()\n\n    for i in $list; do\n        heap_queue_insert heap \"$i\"\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[$i]=$(heap_queue_pop heap)\n    done\n\n    echo \"${result[@]}\"",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    local",
    "    local -a heap\n    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    local size=${#list[@]}\n\n    # build the heap\n    for ((i=0; i<size; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$((j-1))/2\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[size-i-1]}\n        j=0\n        while ((j<size-i-1)); do\n            k=$((j*2+1))\n            if ((k+1<size-i-1 && heap[k]<heap[k+1])); then\n                k=$k+1\n            fi\n            if ((k<size-i-1 && heap[j]<heap[k])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$k\n        done\n    done",
    "  local -a heap\n  local -i i\n  local -i n=$2\n  local -i size=0\n  local -i tmp\n  local -i parent\n  local -i child\n\n  for i in $1; do\n    heap[size++]=$i\n    child=$size-1\n    parent=$((child-1)/2))\n    while (( child > 0 && heap[parent] < heap[child] )); do\n      tmp=heap[parent]\n      heap[parent]=heap[child]\n      heap[child]=$tmp\n      child=$parent\n      parent=$((child-1)/2))\n    done\n  done\n\n  while (( size > 0 )); do\n    echo ${heap[0]}\n    heap[0]=${heap[--size]}\n    parent=0\n    while (( parent < size )); do\n      child=$((parent*2+1))\n      if (( child >= size )); then\n        break\n      fi\n      if (( child+1 < size && heap[child+1] > heap[child] )); then\n        child++\n      fi\n      if (( heap[parent] >= heap[child] )); then\n        break\n      fi\n      tmp=heap[parent]\n      heap[parent]=heap[child]\n      heap[child]=$tmp\n      parent=$child\n    done\n  done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_value=0\n    local -i value=0\n\n    # Convert list to array\n    read -r -a list <<< \"$list\"\n    n_list=${#list[@]}\n\n    # Create heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    n_heap=${#heap[@]}\n    for ((i=n_heap/2-1; i>=0; i--)); do\n        temp=${heap[i]}\n        temp_index=i\n        while ((temp_index<n_heap/2)); do\n            j=2*temp_index+1\n            k=j+1\n            if ((k<n_heap && heap[k]>heap[j])); then\n                j=k\n            fi\n            if ((heap[j]>temp)); then\n                heap[temp_index]=${heap[j]}\n                temp_index=j\n            else\n                break\n            fi\n        done\n        heap[temp_index]=$temp\n    done\n\n    # Insert remaining elements\n    for ((i=n; i<n_list; i++)); do\n        value=${list[i]}\n        if ((value>heap[0])); then\n            heap[0]=$value\n            temp_index=0\n            while ((temp_index<n_heap/2)); do\n                j=2*temp_index+1\n                k=j+1\n                if ((k<n_heap && heap[k]>heap[j])); then\n                    j=k\n                fi\n                if ((heap[j]>heap[temp_index])); then\n                    temp_value=${heap[",
    "    local -a array\n    local -i i\n    local -i n\n    local -i size\n    local -i temp\n    local -i largest\n    local -i left\n    local -i right\n    local -i largest_index\n\n    array=($1)\n    n=${#array[@]}\n    size=$((n - 1))\n    largest=$2\n\n    # Build max heap\n    for ((i = size / 2; i >= 0; i--)); do\n        while ((2 * i + 1 <= size)); do\n            left=2 * i + 1\n            right=2 * i + 2\n            largest_index=$i\n            if ((array[left] > array[largest_index])); then\n                largest_index=$left\n            fi\n            if ((right <= size && array[right] > array[largest_index])); then\n                largest_index=$right\n            fi\n            if ((largest_index != i)); then\n                temp=${array[i]}\n                array[i]=${array[largest_index]}\n                array[largest_index]=$temp\n                i=$largest_index\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract max heap\n    for ((i = size; i > size - largest; i--)); do\n        temp=${array[0]}\n        array[0]=${array[i]}\n        array[i]=$temp\n        size=$((size - 1))\n        largest_index=0\n        while ((2 * largest_index + 1 <= size)); do\n            left=2 * largest_index + 1\n            right=2 * largest_index + 2\n            largest_index=0\n            if ((array[left] > array[largest_index])); then\n                largest_index=$left\n            fi\n            if ((right <= size && array[right] > array[largest_index])); then\n                largest_index=$right\n            fi\n            if ((largest_index != i)); then\n                temp=${array[i]}\n                array[i]=${array[largest_index]}\n                array[largest_index]=$temp\n                i=$largest_index\n            else\n                break\n            fi\n        done\n    done\n\n    # Print result",
    "  local -a arr=(\"$@\")\n  local n=${#arr[@]}\n  local -i i\n  local -i j\n  local -i k\n  local -i t\n  for ((i=n/2-1; i>=0; i--)); do\n    k=i\n    while ((2*k+1<n)); do\n      j=2*k+1\n      if ((j<n-1)) && ((arr[j]<arr[j+1])); then\n        ((j++))\n      fi\n      if ((arr[k]<arr[j])); then\n        t=arr[k]\n        arr[k]=arr[j]\n        arr[j]=t\n        ((k=j))\n      else\n        break\n      fi\n    done\n  done\n  for ((i=n-1; i>0; i--)); do\n    t=arr[0]\n    arr[0]=arr[i]\n    arr[i]=t\n    k=0\n    while ((2*k+1<i)); do\n      j=2*k+1\n      if ((j<i-1)) && ((arr[j]<arr[j+1])); then\n        ((j++))\n      fi\n      if ((arr[k]<arr[j])); then\n        t=arr[k]\n        arr[k]=arr[j]\n        arr[j]=t\n        ((k=j))\n      else\n        break\n      fi\n    done\n  done\n  for ((i=0; i<$2; i++)); do\n    echo -n \"${arr[i]} \"\n  done\n  echo",
    "    local -a heap=()\n    local -a list=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local parent=0\n    local child=0\n\n    if [[ $n -gt ${#list[@]} ]]; then\n        n=${#list[@]}\n    fi\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n        parent=$((i/2))\n        child=$i\n        while [[ $parent -ge 0 ]]; do\n            if [[ ${heap[$parent]} -lt ${heap[$child]} ]]; then\n                tmp=${heap[$parent]}\n                heap[$parent]=${heap[$child]}\n                heap[$child]=$tmp\n                child=$parent\n                parent=$((parent/2))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            parent=0\n            child=1\n            while [[ $child -lt $n ]]; do\n                if [[ $child -lt $((n-1)) ]] && [[ ${heap[$child]} -lt ${heap[$((child+1))]} ]]; then\n                    child=$((child+1))\n                fi\n                if [[ ${heap[$parent]} -lt ${heap[$child]} ]]; then\n                    tmp=${heap[$parent]}\n                    heap[$parent]=${heap[$child]}\n                    heap[$child]=$tmp\n                    parent=$child\n                    child=$((child*2))\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${heap[$i]} -lt ${heap[$j]} ]]; then\n                tmp=${heap[$",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n_heap\n  local -i n_list\n  local -i tmp\n  local -i tmp_i\n  local -i tmp_j\n  local -i tmp_k\n  local -i tmp_l\n  local -i tmp_m\n  local -i tmp_n\n  local -i tmp_n_heap\n  local -i tmp_n_list\n  local -i tmp_tmp\n  local -i tmp_tmp_i\n  local -i tmp_tmp_j\n  local -i tmp_tmp_k\n  local -i tmp_tmp_l\n  local -i tmp_tmp_m\n  local -i tmp_tmp_n\n  local -i tmp_tmp_n_heap\n  local -i tmp_tmp_n_list\n  local -i tmp_tmp_tmp\n  local -i tmp_tmp_tmp_i\n  local -i tmp_tmp_tmp_j\n  local -i tmp_tmp_tmp_k\n  local -i tmp_tmp_tmp_l\n  local -i tmp_tmp_tmp_m\n  local -i tmp_tmp_tmp_n\n  local -i tmp_tmp_tmp_n_heap\n  local -i tmp_tmp_tmp_n_list\n  local -i tmp_tmp_tmp_tmp\n  local -i tmp_tmp_tmp_tmp_i\n  local -i tmp_tmp_tmp_tmp_j\n  local -i tmp_tmp_tmp_tmp_k\n  local -i tmp_tmp_tmp_tmp_l\n  local -i tmp_tmp_tmp_tmp_m\n  local -i tmp_tmp_tmp_tmp_n\n  local -i tmp_tmp_tmp_tmp_n_heap\n  local -i tmp_tmp_tmp_tmp_n_list\n  local -i tmp_tmp_tmp_tmp_tmp\n  local -i tmp_tmp_tmp_tmp_tmp_i\n  local -i",
    "    local -a heap\n    local -i i\n    local -i n\n    local -i size\n    local -i tmp\n    local -i x\n    local -i y\n    local -i z\n\n    # Initialize the heap with the first n elements of the list.\n    n=\"$2\"\n    heap=(${1:0:n})\n    size=\"$n\"\n\n    # Sift down the first element to its proper place.\n    i=0\n    while true; do\n        x=\"$i\"\n        y=\"$((2 * x + 1))\"\n        z=\"$((2 * x + 2))\"\n        if [ \"$y\" -lt \"$size\" ] && [ \"${heap[y]}\" -gt \"${heap[x]}\" ]; then\n            i=\"$y\"\n        fi\n        if [ \"$z\" -lt \"$size\" ] && [ \"${heap[z]}\" -gt \"${heap[i]}\" ]; then\n            i=\"$z\"\n        fi\n        if [ \"$i\" -eq \"$x\" ]; then\n            break\n        fi\n        tmp=\"${heap[x]}\"\n        heap[x]=\"${heap[i]}\"\n        heap[i]=\"$tmp\"\n    done\n\n    # Process the remaining elements of the list.\n    for i in \"${!1}\"; do\n        if [ \"$i\" -ge \"$n\" ]; then\n            if [ \"${1[i]}\" -gt \"${heap[0]}\" ]; then\n                heap[0]=\"${1[i]}\"\n                x=0\n                while true; do\n                    y=\"$((2 * x + 1))\"\n                    z=\"$((2 * x + 2))\"\n                    if [ \"$y\" -lt \"$size\" ] && [ \"${heap[y]}\" -gt \"${heap[x]}\" ]; then\n                        i=\"$y\"\n                    fi\n                    if [ \"$z\" -lt \"$size\" ] && [ \"${heap[z]}\" -gt \"${heap[i]}\" ]; then\n                        i=\"$z\"\n                    fi\n                    if [ \"$i\" -eq \"$x\" ]; then\n                        break",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n\n    # build a max heap\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # extract the top n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((j<${#heap[@]})); do\n            k=$((2*j+1))\n            if ((k>=${#heap[@]})); then\n                break\n            fi\n            if ((k+1<${#heap[@]})) && ((heap[k+1]>heap[k])); then\n                k=$((k+1))\n            fi\n            if ((heap[j]<heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done",
    "    local -a heap\n    local -i i\n    local -i n=${2:-1}\n    local -i heap_size=0\n    local -i heap_max_size=n\n    local -i heap_last_index=0\n    local -i heap_last_parent_index=0\n    local -i heap_last_parent_left_child_index=0\n    local -i heap_last_parent_right_child_index=0\n    local -i heap_last_parent_value=0\n    local -i heap_last_parent_left_child_value=0\n    local -i heap_last_parent_right_child_value=0\n    local -i heap_last_parent_max_child_index=0\n    local -i heap_last_parent_max_child_value=0\n    local -i heap_last_parent_max_child_parent_index=0\n    local -i heap_last_parent_max_child_parent_value=0\n    local -i heap_last_parent_max_child_parent_left_child_index=0\n    local -i heap_last_parent_max_child_parent_left_child_value=0\n    local -i heap_last_parent_max_child_parent_right_child_index=0\n    local -i heap_last_parent_max_child_parent_right_child_value=0\n    local -i heap_last_parent_max_child_parent_max_child_index=0\n    local -i heap_last_parent_max_child_parent_max_child_value=0\n    local -i heap_last_parent_max_child_parent_max_child_parent_index=0\n    local -i heap_last_parent_max_child_parent_max_child_parent_value=0\n    local -i heap_last_parent_max_child_parent_max_child_parent_left_child_index=0\n    local -i heap_last_parent_max_child_parent_max_child_parent_left_child_value=0\n    local -i heap_last_parent_max_child_parent_max_child_parent",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i\n    for ((i=0; i<n; i++)); do\n        heap_queue_insert heap \"${list[i]}\"\n    done\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ \"${list[i]}\" -gt \"${heap[0]}\" ]]; then\n            heap_queue_pop heap\n            heap_queue_insert heap \"${list[i]}\"\n        fi\n    done\n    echo \"${heap[@]}\"",
    "    local -a heap=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local size=${#heap[@]}\n\n    for ((i=size/2-1; i>=0; i--))\n    do\n        k=$i\n        while ((2*k+1<size))\n        do\n            j=2*k+1\n            if ((j+1<size && heap[j]<heap[j+1]))\n            then\n                ((j++))\n            fi\n            if ((heap[k]<heap[j]))\n            then\n                temp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$temp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++))\n    do\n        temp=${heap[0]}\n        heap[0]=${heap[size-1-i]}\n        heap[size-1-i]=$temp\n        k=0\n        while ((2*k+1<size-i-1))\n        do\n            j=2*k+1\n            if ((j+1<size-i-1 && heap[j]<heap[j+1]))\n            then\n                ((j++))\n            fi\n            if ((heap[k]<heap[j]))\n            then\n                temp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$temp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${heap[@]:0:n}",
    "  local list=($1)\n  local n=$2\n  local heap=()\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n\n  # Build heap\n  for ((i=0; i<${#list[@]}; i++)); do\n    heap[i]=${list[i]}\n    j=$((i-1))\n    while [ $j -ge 0 ]; do\n      k=$(((j-1)/2))\n      if [ ${heap[j]} -lt ${heap[i]} ]; then\n        temp=${heap[j]}\n        heap[j]=${heap[i]}\n        heap[i]=$temp\n      fi\n      j=$k\n    done\n  done\n\n  # Extract n largest elements\n  for ((i=0; i<n; i++)); do\n    echo ${heap[0]}\n    heap[0]=${heap[${#heap[@]}-1]}\n    heap=(${heap[@]:0:${#heap[@]}-1})\n    j=0\n    while [ $j -lt ${#heap[@]} ]; do\n      k=$((2*j+1))\n      if [ $k -ge ${#heap[@]} ]; then\n        break\n      fi\n      if [ $((k+1)) -lt ${#heap[@]} ] && [ ${heap[k]} -lt ${heap[k+1]} ]; then\n        k=$((k+1))\n      fi\n      if [ ${heap[j]} -lt ${heap[k]} ]; then\n        temp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$temp\n      fi\n      j=$k\n    done\n  done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i k=0\n    for i in $1; do\n        if [ $k -lt $n ]; then\n            heap[$k]=$i\n            k+=1\n        else\n            heap[0]=$i\n        fi\n        heap_queue_heapify 0\n    done\n    for ((i=n-1; i>=0; i--)); do\n        echo ${heap[$i]}\n        heap[$i]=${heap[0]}\n        heap_queue_heapify 0\n    done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n; i<${#list[@]}; i++)); do\n        if ((list[i] > heap[0])); then\n            heap[0]=${list[i]}\n            j=0\n            while true; do\n                if ((2*j+1 < n)); then\n                    if ((2*j+2 < n)); then\n                        if ((heap[2*j+1] > heap[2*j+2])); then\n                            if ((heap[2*j+1] > heap[j])); then\n                                tmp=${heap[j]}\n                                heap[j]=${heap[2*j+1]}\n                                heap[2*j+1]=$tmp\n                                j=2*j+1\n                            else\n                                break\n                            fi\n                        else\n                            if ((heap[2*j+2] > heap[j])); then\n                                tmp=${heap[j]}\n                                heap[j]=${heap[2*j+2]}\n                                heap[2*j+2]=$tmp\n                                j=2*j+2\n                            else\n                                break\n                            fi\n                        fi\n                    else\n                        if ((heap[2*j+1] > heap[j])); then\n                            tmp=${heap[j]}\n                            heap[j]=${heap[2*j+1]}\n                            heap[2*j+1]=$tmp\n                            j=2*j+1\n                        else\n                            break\n                        fi\n                    fi\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        echo ${heap[i]}\n    done",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i tmp=0\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i last=0\n    local -i swap=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n",
    "    local -a heap\n    local -i i j k n\n    local -i heap_size=0\n    local -i heap_max_size=$2\n    local -i tmp\n\n    # Build heap\n    for i in $1; do\n        heap[heap_size++]=$i\n        j=$((heap_size-1))\n        while (( j > 0 )); do\n            k=$((j-1))\n            k=$((k/2))\n            if (( heap[j] > heap[k] )); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract max\n    for (( n=heap_size-1; n>=heap_max_size; n-- )); do\n        tmp=${heap[0]}\n        heap[0]=${heap[n]}\n        heap[n]=$tmp\n        heap_size--\n        j=0\n        while (( 2*j+1 < heap_size )); do\n            k=2*j+1\n            if (( 2*j+2 < heap_size )) && (( heap[2*j+2] > heap[k] )); then\n                k=2*j+2\n            fi\n            if (( heap[j] >= heap[k] )); then\n                break\n            fi\n            tmp=${heap[j]}\n            heap[j]=${heap[k]}\n            heap[k]=$tmp\n            j=$k\n        done\n    done\n\n    # Sort remaining\n    for (( i=0; i<heap_max_size-1; i++ )); do\n        for (( j=i+1; j<heap_max_size; j++ )); do\n            if (( heap[i] < heap[j] )); then\n                tmp=${heap[i]}\n                heap[i]=${heap[j]}\n                heap[j]=$tmp\n            fi\n        done\n    done\n\n    echo \"${heap[@]}\"",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local i=0\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    heap_sort_descending heap\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_sort_descending heap\n        fi\n    done\n    echo ${heap[@]}",
    "  local -a heap\n  local -i i\n  local -i n=$2\n  local -i size=0\n  local -i parent\n  local -i child\n  local -i tmp\n  local -i max\n  local -i max_index\n  local -i last_index\n\n  # build the heap\n  for i in $1; do\n    heap[size++]=$i\n    parent=$((size/2-1))\n    child=$((size-1))\n    while ((parent >= 0)); do\n      if ((heap[parent] < heap[child])); then\n        tmp=${heap[parent]}\n        heap[parent]=${heap[child]}\n        heap[child]=$tmp\n        child=$parent\n        parent=$((child/2-1))\n      else\n        break\n      fi\n    done\n  done\n\n  # extract the largest n elements\n  for ((i=0; i<n; i++)); do\n    max=${heap[0]}\n    max_index=0\n    last_index=$((size-1))\n    heap[0]=${heap[last_index]}\n    unset heap[last_index]\n    size--\n    parent=0\n    child=1\n    while ((child < size)); do\n      if ((child+1 < size && heap[child+1] > heap[child])); then\n        child++\n      fi\n      if ((heap[parent] < heap[child])); then\n        tmp=${heap[parent]}\n        heap[parent]=${heap[child]}\n        heap[child]=$tmp\n        parent=$child\n        child=$((parent*2+1))\n      else\n        break\n      fi\n    done\n    echo $max\n  done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a arr\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local -i tmp49=0\n    local -i tmp50=0\n    local -i tmp51=0",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i heap_size=0\n    local -i heap_max_size=n\n    local -i left\n    local -i right\n    local -i largest\n    local -i temp\n\n    # Build the heap\n    for i in $1; do\n        heap[heap_size++]=$i\n        # Trickle up\n        local -i child=$((heap_size-1))\n        local -i parent=$(((child-1)/2))\n        while (( child > 0 && heap[parent] < heap[child] )); do\n            temp=heap[parent]\n            heap[parent]=heap[child]\n            heap[child]=$temp\n            child=$parent\n            parent=$(((child-1)/2))\n        done\n    done\n\n    # Extract the largest elements\n    for (( i=0; i<n; i++ )); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[--heap_size]}\n        # Trickle down\n        local -i parent=0\n        while (( 1 )); do\n            left=$((2*parent+1))\n            right=$((2*parent+2))\n            if (( left < heap_size && heap[left] > heap[parent] )); then\n                largest=$left\n            else\n                largest=$parent\n            fi\n            if (( right < heap_size && heap[right] > heap[largest] )); then\n                largest=$right\n            fi\n            if (( largest != parent )); then\n                temp=heap[parent]\n                heap[parent]=heap[largest]\n                heap[largest]=$temp\n                parent=$largest\n            else\n                break\n            fi\n        done\n    done\n    echo",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n\n    if ((n > len)); then\n        n=$len\n    fi\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        tmp=${heap[k]}\n        while ((k<n/2)); do\n            j=$((2*k+1))\n            if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n                j=$((j+1))\n            fi\n            if ((tmp>=heap[j])); then\n                break\n            fi\n            heap[k]=${heap[j]}\n            k=$j\n        done\n        heap[k]=$tmp\n    done\n\n    for ((i=n; i<len; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            k=0\n            tmp=${heap[k]}\n            while ((k<n/2)); do\n                j=$((2*k+1))\n                if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n                    j=$((j+1))\n                fi\n                if ((tmp>=heap[j])); then\n                    break\n                fi\n                heap[k]=${heap[j]}\n                k=$j\n            done\n            heap[k]=$tmp\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        k=0\n        while ((k<i/2)); do\n            j=$((2*k+1))\n            if ((j<i-1)) && ((heap[j]<heap[j+1])); then",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i parent\n    local -i child\n    local -i tmp\n\n    # Build a heap from the list\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        len=${#heap[@]}\n        j=$len-1\n        while [ $j -gt 0 ]; do\n            parent=$((j-1))/2\n            if [ ${heap[$j]} -gt ${heap[$parent]} ]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$parent]}\n                heap[$parent]=$tmp\n            fi\n            j=$parent\n        done\n    done\n\n    # Extract the n largest elements\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[-1]}\n        unset heap[-1]\n        len=${#heap[@]}\n        j=0\n        while [ $j -lt $len ]; do\n            child=$((j*2+1))\n            if [ $child -ge $len ]; then\n                break\n            fi\n            if [ $child -eq $((len-1)) ]; then\n                if [ ${heap[$j]} -lt ${heap[$child]} ]; then\n                    tmp=${heap[$j]}\n                    heap[$j]=${heap[$child]}\n                    heap[$child]=$tmp\n                fi\n                break\n            fi\n            if [ ${heap[$child]} -gt ${heap[$((child+1))]} ]; then\n                k=$child\n            else\n                k=$((child+1))\n            fi\n            if [ ${heap[$j]} -lt ${heap[$k]} ]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$tmp\n            fi\n            j=$",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i len=${#1}\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i max=0\n    local -i max_index=0\n    local -i last_index=0\n    local -i parent_index=0\n    local -i left_child_index=0\n    local -i right_child_index=0\n\n    for i in $(seq 0 $((n-1))); do\n        heap[$i]=${1[$i]}\n    done\n\n    for i in $(seq $((n/2)) -1 0); do\n        j=$i\n        while true; do\n            k=$j\n            left_child_index=$((2*k+1))\n            right_child_index=$((2*k+2))\n            if [ $left_child_index -lt $n ] && [ ${heap[$left_child_index]} -gt ${heap[$k]} ]; then\n                k=$left_child_index\n            fi\n            if [ $right_child_index -lt $n ] && [ ${heap[$right_child_index]} -gt ${heap[$k]} ]; then\n                k=$right_child_index\n            fi\n            if [ $k -eq $j ]; then\n                break\n            fi\n            tmp=${heap[$j]}\n            heap[$j]=${heap[$k]}\n            heap[$k]=$tmp\n            j=$k\n        done\n    done\n\n    for i in $(seq $n $((len-1))); do\n        if [ ${1[$i]} -gt ${heap[0]} ]; then\n            heap[0]=${1[$i]}\n            j=0\n            while true; do\n                k=$j\n                left_child_index=$((2*k+1))\n                right_child_index=$((2*k+2))\n                if [ $left_child_index -lt $n ] && [ ${heap[$left_child_index]} -gt ${heap[$k]}",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i len=${#1}\n    local -i j\n    local -i k\n    local -i tmp\n    local -i min\n    local -i min_index\n    local -i max\n    local -i max_index\n    local -i min_index_left\n    local -i min_index_right\n    local -i max_index_left\n    local -i max_index_right\n    local -i min_left\n    local -i min_right\n    local -i max_left\n    local -i max_right\n    local -i min_index_left_left\n    local -i min_index_left_right\n    local -i min_index_right_left\n    local -i min_index_right_right\n    local -i max_index_left_left\n    local -i max_index_left_right\n    local -i max_index_right_left\n    local -i max_index_right_right\n    local -i min_left_left\n    local -i min_left_right\n    local -i min_right_left\n    local -i min_right_right\n    local -i max_left_left\n    local -i max_left_right\n    local -i max_right_left\n    local -i max_right_right\n    local -i min_index_left_left_left\n    local -i min_index_left_left_right\n    local -i min_index_left_right_left\n    local -i min_index_left_right_right\n    local -i min_index_right_left_left\n    local -i min_index_right_left_right\n    local -i min_index_right_right_left\n    local -i min_index_right_right_right\n    local -i max_index_left_left_left\n    local -i max_index_left_left_right\n    local -i max_index_left_right_left\n    local -i max_index_left_right_right\n    local -i max_index_right_left_left\n    local",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i t=0\n    local -i tmp=0\n\n    # Convert space-separated list to array\n    while read -r tmp; do\n        arr[i++]=$tmp\n    done < <(echo \"$1\")\n\n    # Heapify\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        t=${arr[k]}\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j<n-1)) && ((arr[j]<arr[j+1])); then\n                j++\n            fi\n            if ((t>=arr[j])); then\n                break\n            fi\n            arr[k]=${arr[j]}\n            k=j\n        done\n        arr[k]=$t\n    done\n\n    # Sort\n    for ((i=n-1; i>0; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        k=0\n        t=${arr[k]}\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j<i-1)) && ((arr[j]<arr[j+1])); then\n                j++\n            fi\n            if ((t>=arr[j])); then\n                break\n            fi\n            arr[k]=${arr[j]}\n            k=j\n        done\n        arr[k]=$t\n    done\n\n    # Print\n    for ((i=0; i<n; i++)); do\n        echo ${arr[i]}\n    done",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n    local -i tmp=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i last=0\n\n    # Convert space-separated list to array\n    arr=($1)\n    len=${#arr[@]}\n\n    # Build heap\n    for ((i=len/2-1; i>=0; i--)); do\n        tmp=${arr[i]}\n        j=i\n        while ((j<len/2)); do\n            left=2*j+1\n            right=2*j+2\n            largest=$left\n            if ((right<len && arr[right]>arr[left])) ; then\n                largest=$right\n            fi\n            if ((tmp>=arr[largest])) ; then\n                break\n            fi\n            arr[j]=${arr[largest]}\n            j=$largest\n        done\n        arr[j]=$tmp\n    done\n\n    # Extract n largest elements\n    for ((i=len-1; i>=len-n; i--)); do\n        tmp=${arr[i]}\n        arr[i]=${arr[0]}\n        arr[0]=$tmp\n        j=0\n        while ((j<i/2)); do\n            left=2*j+1\n            right=2*j+2\n            largest=$left\n            if ((right<i && arr[right]>arr[left])) ; then\n                largest=$right\n            fi\n            if ((tmp>=arr[largest])) ; then\n                break\n            fi\n            arr[j]=${arr[largest]}\n            j=$largest\n        done\n        arr[j]=$tmp\n    done\n\n    # Print n largest elements\n    for ((i=len-1; i>=len-n; i--)); do\n        echo ${arr[i]}\n    done",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -a result\n  local i\n  local j\n  local k\n  local tmp\n\n  # Initialize heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list%% *}\n    list=${list#* }\n  done\n\n  # Build heap\n  for ((i=n/2-1; i>=0; i--)); do\n    tmp=${heap[i]}\n    j=$((i*2+1))\n    while ((j<n)); do\n      k=$((j+1))\n      if ((k<n && heap[k]>heap[j])); then\n        j=$k\n      fi\n      if ((heap[j]<=tmp)); then\n        break\n      fi\n      heap[$((j/2))]=${heap[j]}\n      j=$((j*2+1))\n    done\n    heap[$((j/2))]=$tmp\n  done\n\n  # Extract elements from heap\n  for ((i=n-1; i>=0; i--)); do\n    result[i]=${heap[0]}\n    tmp=${heap[i]}\n    heap[i]=\n    j=0\n    while ((j<i)); do\n      k=$((j*2+1))\n      if ((k+1<i && heap[k+1]>heap[k])); then\n        k=$((k+1))\n      fi\n      if ((k>=i || heap[k]<=tmp)); then\n        break\n      fi\n      heap[j]=${heap[k]}\n      j=$k\n    done\n    heap[j]=$tmp\n  done\n\n  echo \"${result[*]}\"",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ppp=",
    "    local n=$2\n    local arr=($1)\n    local len=${#arr[@]}\n    local i\n    local j\n    local tmp\n    local parent\n    local child\n\n    # Build a heap\n    for ((i = 1; i < len; i++)); do\n        j=$i\n        while ((j > 0)); do\n            parent=$(((j - 1) / 2))\n            if ((arr[parent] < arr[j])); then\n                tmp=${arr[parent]}\n                arr[parent]=${arr[j]}\n                arr[j]=$tmp\n            fi\n            j=$parent\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i = 0; i < n; i++)); do\n        echo ${arr[0]}\n        arr[0]=${arr[len - 1 - i]}\n        len=$((len - 1))\n        j=0\n        while ((1)); do\n            child=$((2 * j + 1))\n            if ((child >= len)); then\n                break\n            fi\n            if ((child + 1 < len)) && ((arr[child] < arr[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((arr[j] < arr[child])); then\n                tmp=${arr[j]}\n                arr[j]=${arr[child]}\n                arr[child]=$tmp\n            else\n                break\n            fi\n            j=$child\n        done\n    done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap\n  local i\n  local j\n  local k\n  local tmp\n\n  # Build the heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n  done\n  for ((i=n/2-1; i>=0; i--)); do\n    j=$i\n    while ((2*j+1 < n)); do\n      k=2*j+1\n      if ((k+1 < n && heap[k+1] > heap[k])); then\n        k+=1\n      fi\n      if ((heap[j] < heap[k])); then\n        tmp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$tmp\n        j=$k\n      else\n        break\n      fi\n    done\n  done\n\n  # Replace the root with the last element and heapify\n  for ((i=n; i<${#list[@]}; i++)); do\n    if ((list[i] > heap[0])); then\n      heap[0]=${list[i]}\n      j=0\n      while ((2*j+1 < n)); do\n        k=2*j+1\n        if ((k+1 < n && heap[k+1] > heap[k])); then\n          k+=1\n        fi\n        if ((heap[j] < heap[k])); then\n          tmp=${heap[j]}\n          heap[j]=${heap[k]}\n          heap[k]=$tmp\n          j=$k\n        else\n          break\n        fi\n      done\n    fi\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    tmp=${heap[i]}\n    heap[i]=${heap[0]}\n    heap[0]=$tmp\n    j=0\n    while ((2*j+1 < i)); do\n      k=2*j+1\n      if ((k+1 < i && heap[k+1] > heap[k])); then\n       ",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i index\n    local -i left\n    local -i right\n    local -i largest\n    local -i temp\n\n    for i in $1; do\n        heap[size++]=$i\n        index=$((size-1))\n        while (( index > 0 )); do\n            parent=$(((index-1)/2))\n            if (( heap[index] > heap[parent] )); then\n                temp=${heap[index]}\n                heap[index]=${heap[parent]}\n                heap[parent]=$temp\n            fi\n            index=$parent\n        done\n    done\n\n    for (( i=0; i<n; i++ )); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[--size]}\n        index=0\n        while (( index < size )); do\n            left=$((2*index+1))\n            right=$((2*index+2))\n            largest=$index\n            if (( left < size && heap[left] > heap[largest] )); then\n                largest=$left\n            fi\n            if (( right < size && heap[right] > heap[largest] )); then\n                largest=$right\n            fi\n            if (( largest != index )); then\n                temp=${heap[index]}\n                heap[index]=${heap[largest]}\n                heap[largest]=$temp\n                index=$largest\n            else\n                break\n            fi\n        done\n    done\n    echo",
    "    local -a heap\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i t=0\n\n    for i in $1; do\n        heap[$j]=$i\n        ((j++))\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        t=${heap[$k]}\n        while ((2*k+1<n)); do\n            m=2*k+1\n            if ((m+1<n && heap[m]<heap[m+1])); then\n                ((m++))\n            fi\n            if ((t>=heap[m])); then\n                break\n            fi\n            heap[k]=${heap[m]}\n            ((k=m))\n        done\n        heap[k]=$t\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        t=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$t\n        k=0\n        while ((2*k+1<i)); do\n            m=2*k+1\n            if ((m+1<i && heap[m]<heap[m+1])); then\n                ((m++))\n            fi\n            if ((heap[k]>=heap[m])); then\n                break\n            fi\n            t=${heap[k]}\n            heap[k]=${heap[m]}\n            heap[m]=$t\n            ((k=m))\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${heap[i]}\n    done",
    "    local -a list=( $1 )\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n    local size=${#list[@]}\n    local parent\n    local child\n\n    for (( i=0; i<n; i++ )); do\n        heap[i]=${list[i]}\n    done\n\n    for (( i=n/2-1; i>=0; i-- )); do\n        parent=$i\n        tmp=${heap[parent]}\n        while (( 2*parent+1 < n )); do\n            child=$(( 2*parent+1 ))\n            if (( child+1 < n && heap[child] < heap[child+1] )); then\n                child=$(( child+1 ))\n            fi\n            if (( tmp >= heap[child] )); then\n                break\n            fi\n            heap[parent]=${heap[child]}\n            parent=child\n        done\n        heap[parent]=$tmp\n    done\n\n    for (( i=n; i<size; i++ )); do\n        if (( list[i] > heap[0] )); then\n            heap[0]=${list[i]}\n            parent=0\n            tmp=${heap[parent]}\n            while (( 2*parent+1 < n )); do\n                child=$(( 2*parent+1 ))\n                if (( child+1 < n && heap[child] < heap[child+1] )); then\n                    child=$(( child+1 ))\n                fi\n                if (( tmp >= heap[child] )); then\n                    break\n                fi\n                heap[parent]=${heap[child]}\n                parent=child\n            done\n            heap[parent]=$tmp\n        fi\n    done\n\n    for (( i=n-1; i>=0; i-- )); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        parent=0\n        while (( 2*parent+1 < i )); do\n            child=$(( 2*parent+1 ))\n            if (( child+1 < i && heap[child] < heap[child+1] )); then\n                child=$(( child+1 ))\n            fi\n            if (( tmp >= heap[child] )); then",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i heap_size=0\n    local -i heap_max_size=$n\n    local -i heap_max_size_minus_1=$((heap_max_size-1))\n    local -i heap_max_size_minus_2=$((heap_max_size-2))\n    local -i heap_max_size_minus_3=$((heap_max_size-3))\n    local -i heap_max_size_minus_4=$((heap_max_size-4))\n    local -i heap_max_size_minus_5=$((heap_max_size-5))\n    local -i heap_max_size_minus_6=$((heap_max_size-6))\n    local -i heap_max_size_minus_7=$((heap_max_size-7))\n    local -i heap_max_size_minus_8=$((heap_max_size-8))\n    local -i heap_max_size_minus_9=$((heap_max_size-9))\n    local -i heap_max_size_minus_10=$((heap_max_size-10))\n    local -i heap_max_size_minus_11=$((heap_max_size-11))\n    local -i heap_max_size_minus_12=$((heap_max_size-12))\n    local -i heap_max_size_minus_13=$((heap_max_size-13))\n    local -i heap_max_size_minus_14=$((heap_max_size-14))\n    local -i heap_max_size_minus_15=$((heap_max_size-15))\n    local -i heap_max_size_minus_16=$((heap_max_size-16))\n    local -i heap_max_size_minus_17=$((heap_max_size-17))\n    local -i heap_max_size_minus_18=$((heap_max_size-18))\n    local -i heap_max_size_minus_19=$((heap",
    "    # Convert the list to an array\n    local -a arr=($1)\n    # Create a heap queue\n    local -a heap=()\n    # Add the first n elements to the heap\n    for ((i=0; i<$2; i++)); do\n        heap_queue_insert heap \"${arr[i]}\"\n    done\n    # For the remaining elements, if the element is greater than the root of the heap, replace the root with the element\n    for ((i=$2; i<${#arr[@]}; i++)); do\n        if [[ \"${arr[i]}\" -gt \"${heap[0]}\" ]]; then\n            heap_queue_replace heap \"${arr[i]}\"\n        fi\n    done\n    # Return the heap in descending order\n    heap_queue_descending heap",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local tmp\n    local len\n    local index\n    local parent\n    local left\n    local right\n    local min\n\n    # build the heap\n    heap=($list)\n    len=${#heap[@]}\n    for ((i=0; i<len; i++)); do\n        index=$i\n        parent=$(((index-1)/2))\n        while ((index > 0 && heap[index] > heap[parent])); do\n            tmp=${heap[index]}\n            heap[index]=${heap[parent]}\n            heap[parent]=$tmp\n            index=$parent\n            parent=$(((index-1)/2))\n        done\n    done\n\n    # extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[len-i-1]}\n        index=0\n        left=1\n        right=2\n        while ((left < len-i-1)); do\n            min=$index\n            if ((heap[left] > heap[min])); then\n                min=$left\n            fi\n            if ((right < len-i-1 && heap[right] > heap[min])); then\n                min=$right\n            fi\n            if ((min == index)); then\n                break\n            fi\n            tmp=${heap[index]}\n            heap[index]=${heap[min]}\n            heap[min]=$tmp\n            index=$min\n            left=$((2*index+1))\n            right=$((2*index+2))\n        done\n    done\n\n    # print the result\n    for ((i=0; i<n; i++)); do\n        echo -n \"${result[i]} \"\n    done\n    echo",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n    local len=${#list[@]}\n\n    # build heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$((i-1))\n        while ((j>=0)); do\n            if ((heap[j]<heap[i])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[i]}\n                heap[i]=$tmp\n            fi\n            j=$((j-1))\n        done\n    done\n\n    # pop n largest\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[len-i-1]}\n        j=0\n        while ((j<len-i-1)); do\n            if ((heap[j]<heap[j+1])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[j+1]}\n                heap[j+1]=$tmp\n            fi\n            j=$((j+1))\n        done\n    done",
    "  local list=$1\n  local n=$2\n  local -a heap\n  local -a result\n  local i\n  local j\n  local k\n  local tmp\n\n  # Build the heap\n  for i in $list; do\n    heap[${#heap[@]}]=$i\n    j=${#heap[@]}\n    while [ $j -gt 0 ]; do\n      k=$((j - 1))\n      k=$((k / 2))\n      if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n        tmp=${heap[$j]}\n        heap[$j]=${heap[$k]}\n        heap[$k]=$tmp\n      fi\n      j=$k\n    done\n  done\n\n  # Pop the heap\n  for ((i = 0; i < n; i++)); do\n    result[$i]=${heap[0]}\n    heap[0]=${heap[${#heap[@]} - 1]}\n    heap=(${heap[@]:0:${#heap[@]} - 1})\n    j=0\n    while [ $j -lt ${#heap[@]} ]; do\n      k=$((j * 2 + 1))\n      if [ $k -ge ${#heap[@]} ]; then\n        break\n      fi\n      if [ $((k + 1)) -lt ${#heap[@]} ]; then\n        if [ ${heap[$k]} -lt ${heap[$((k + 1))]} ]; then\n          k=$((k + 1))\n        fi\n      fi\n      if [ ${heap[$j]} -lt ${heap[$k]} ]; then\n        tmp=${heap[$j]}\n        heap[$j]=${heap[$k]}\n        heap[$k]=$tmp\n      fi\n      j=$k\n    done\n  done\n\n  echo ${result[@]}",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n\n    # build heap\n    for ((i=0; i<${#arr[@]}; i++)); do\n        heap_queue_insert heap ${arr[i]}\n    done\n\n    # pop n items\n    for ((i=0; i<n; i++)); do\n        heap_queue_pop heap\n    done\n\n    # print heap\n    for ((i=0; i<${#heap[@]}; i++)); do\n        echo ${heap[i]}\n    done",
    "    local -a heap\n    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            for ((j=0; j<n; j++)); do\n                k=$((2*j+1))\n                if [[ $k -lt n && ${heap[k]} -lt ${heap[$((k+1))]} ]]; then\n                    k=$((k+1))\n                fi\n                if [[ $k -lt n && ${heap[j]} -lt ${heap[k]} ]]; then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[k]}\n                    heap[k]=$tmp\n                fi\n            done\n        fi\n    done\n    for ((i=n-1; i>0; i--)); do\n        tmp=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$tmp\n        for ((j=0; j<i; j++)); do\n            k=$((2*j+1))\n            if [[ $k -lt i && ${heap[k]} -lt ${heap[$((k+1))]} ]]; then\n                k=$((k+1))\n            fi\n            if [[ $k -lt i && ${heap[j]} -lt ${heap[k]} ]]; then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n        done\n    done\n    echo \"${heap[@]}\"",
    "  local list=$1\n  local n=$2\n  local -a heap\n  local -a result\n  local i\n  local j\n  local tmp\n  local len=${#list}\n  local len_heap=0\n\n  # build heap\n  for i in $list; do\n    heap[$len_heap]=$i\n    ((len_heap++))\n    j=$len_heap\n    while ((j > 0)); do\n      ((j = (j - 1) / 2))\n      if ((heap[j] < heap[len_heap - 1])); then\n        tmp=${heap[j]}\n        heap[j]=${heap[len_heap - 1]}\n        heap[len_heap - 1]=$tmp\n      else\n        break\n      fi\n    done\n  done\n\n  # extract n largest\n  for ((i = 0; i < n; i++)); do\n    result[$i]=${heap[0]}\n    ((len_heap--))\n    heap[0]=${heap[len_heap]}\n    j=0\n    while ((j < len_heap)); do\n      ((j = j * 2 + 1))\n      if ((j >= len_heap)); then\n        break\n      fi\n      if ((j + 1 < len_heap)) && ((heap[j] < heap[j + 1])); then\n        ((j++))\n      fi\n      if ((heap[j] > heap[(j - 1) / 2])); then\n        tmp=${heap[j]}\n        heap[j]=${heap[(j - 1) / 2]}\n        heap[(j - 1) / 2]=$tmp\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${result[@]}",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i max_i\n    local -i max_v\n    local -i tmp\n    local -i tmp_i\n    local -i tmp_v\n    local -i tmp_i2\n    local -i tmp_v2\n    local -i tmp_i3\n    local -i tmp_v3\n    local -i tmp_i4\n    local -i tmp_v4\n    local -i tmp_i5\n    local -i tmp_v5\n    local -i tmp_i6\n    local -i tmp_v6\n    local -i tmp_i7\n    local -i tmp_v7\n    local -i tmp_i8\n    local -i tmp_v8\n    local -i tmp_i9\n    local -i tmp_v9\n    local -i tmp_i10\n    local -i tmp_v10\n    local -i tmp_i11\n    local -i tmp_v11\n    local -i tmp_i12\n    local -i tmp_v12\n    local -i tmp_i13\n    local -i tmp_v13\n    local -i tmp_i14\n    local -i tmp_v14\n    local -i tmp_i15\n    local -i tmp_v15\n    local -i tmp_i16\n    local -i tmp_v16\n    local -i tmp_i17\n    local -i tmp_v17\n    local -i tmp_i18\n    local -i tmp_v18\n    local -i tmp_i19\n    local -i tmp_v19\n    local -i tmp_i20\n    local -i tmp_v20\n    local -i tmp_i21\n    local -i tmp_v21\n    local -i tmp_i22\n    local -i tmp_v22\n    local -i tmp_i23\n    local -i tmp_v23\n    local -i tmp_i24\n    local -i tmp_v24\n    local -i tmp_i25\n    local -i tmp_v25\n    local -i tmp_i26\n   ",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_heap\n    local -i n_result\n    local -i n_list\n    local -i tmp\n    local -i tmp2\n    local -i tmp3\n    local -i tmp4\n    local -i tmp5\n    local -i tmp6\n    local -i tmp7\n    local -i tmp8\n    local -i tmp9\n    local -i tmp10\n    local -i tmp11\n    local -i tmp12\n    local -i tmp13\n    local -i tmp14\n    local -i tmp15\n    local -i tmp16\n    local -i tmp17\n    local -i tmp18\n    local -i tmp19\n    local -i tmp20\n    local -i tmp21\n    local -i tmp22\n    local -i tmp23\n    local -i tmp24\n    local -i tmp25\n    local -i tmp26\n    local -i tmp27\n    local -i tmp28\n    local -i tmp29\n    local -i tmp30\n    local -i tmp31\n    local -i tmp32\n    local -i tmp33\n    local -i tmp34\n    local -i tmp35\n    local -i tmp36\n    local -i tmp37\n    local -i tmp38\n    local -i tmp39\n    local -i tmp40\n    local -i tmp41\n    local -i tmp42\n    local -i tmp43\n    local -i tmp44\n    local -i tmp45\n    local -i tmp46\n    local -i tmp47\n    local -i tmp48\n    local -i tmp49\n    local -i tmp50\n    local -i tmp51\n    local -i tmp52\n    local -i tmp53\n    local -i tmp54\n    local -i tmp55\n    local -i tmp56\n    local -i tmp57\n    local -i tmp58\n    local -i tmp59\n    local -i tmp60\n    local -i tmp61\n    local",
    "    local list=$1\n    local n=$2\n    local -a heap=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i n_largest=0\n    local -i parent=0\n    local -i child=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_index_parent=0\n    local -i temp_index_child=0\n    local -i temp_index_child_left=0\n    local -i temp_index_child_right=0\n    local -i temp_index_child_max=0\n    local -i temp_index_child_max_value=0\n    local -i temp_index_child_max_value_left=0\n    local -i temp_index_child_max_value_right=0\n    local -i temp_index_child_max_value_parent=0\n    local -i temp_index_child_max_value_parent_left=0\n    local -i temp_index_child_max_value_parent_right=0\n    local -i temp_index_child_max_value_parent_max=0\n    local -i temp_index_child_max_value_parent_max_value=0\n    local -i temp_index_child_max_value_parent_max_value_left=0\n    local -i temp_index_child_max_value_parent_max_value_right=0\n    local -i temp_index_child_max_value_parent_max_value_parent=0\n    local -i temp_index_child_max_value_parent_max_value_parent_left=0\n    local -i temp_index_child_max_value_parent_max_value_parent_right=0\n    local -i temp_index_child_max_value_parent_max_value_parent_max=0\n    local -i temp_index_child_max_value_parent_max_",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n    local len=${#list[@]}\n\n    # build the heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((2 * j + 1 < len)); do\n            if ((2 * j + 2 < len)); then\n                if ((list[2 * j + 1] > list[2 * j + 2])); then\n                    if ((list[j] < list[2 * j + 1])); then\n                        temp=${list[j]}\n                        list[j]=${list[2 * j + 1]}\n                        list[2 * j + 1]=$temp\n                        j=2 * j + 1\n                    else\n                        break\n                    fi\n                else\n                    if ((list[j] < list[2 * j + 2])); then\n                        temp=${list[j]}\n                        list[j]=${list[2 * j + 2]}\n                        list[2 * j + 2]=$temp\n                        j=2 * j + 2\n                    else\n                        break\n                    fi\n                fi\n            else\n                if ((list[j] < list[2 * j + 1])); then\n                    temp=${list[j]}\n                    list[j]=${list[2 * j + 1]}\n                    list[2 * j + 1]=$temp\n                    j=2 * j + 1\n                else\n                    break\n                fi\n            fi\n        done\n    done\n\n    # extract the n largest integers\n    for ((i = 0; i < n; i++)); do\n        temp=${list[0]}\n        list[0]=${list[len - 1 - i]}\n        list[len - 1 - i]=$temp\n        j=0\n        while ((2 * j + 1 < len - 1 - i)); do\n            if ((2 * j + 2 < len - 1 - i)); then\n                if ((list[2 * j + 1] > list[2 * j + 2])); then\n                    if ((list[j] < list[2 * j + 1])); then\n                        temp=${list[j]}\n                        list[j]=${list",
    "    local list=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local len=${#list[@]}\n    local heap_queue=()\n    local result=()\n\n    # build a heap queue\n    for ((i=0; i<n; i++)); do\n        heap_queue[i]=${list[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        heap_queue_adjust ${heap_queue[@]} $i $n\n    done\n\n    # adjust the heap queue\n    for ((i=n; i<len; i++)); do\n        if [[ ${list[i]} -gt ${heap_queue[0]} ]]; then\n            heap_queue[0]=${list[i]}\n            heap_queue_adjust ${heap_queue[@]} 0 $n\n        fi\n    done\n\n    # sort the heap queue\n    for ((i=n-1; i>0; i--)); do\n        temp=${heap_queue[0]}\n        heap_queue[0]=${heap_queue[i]}\n        heap_queue[i]=$temp\n        heap_queue_adjust ${heap_queue[@]} 0 $i\n    done\n\n    # return the result\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap_queue[i]}\n    done\n    echo ${result[@]}",
    "  local -a heap\n  local -i i j k n=0\n  for i in $1; do\n    heap[n++]=$i\n    j=$n\n    while (( j > 0 )); do\n      k=$(( (j - 1) / 2 ))\n      if (( heap[k] < heap[j] )); then\n        t=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$t\n      fi\n      j=$k\n    done\n  done\n  for (( i = 0; i < $2; i++ )); do\n    echo ${heap[0]}\n    heap[0]=${heap[--n]}\n    j=0\n    while (( 2 * j + 1 < n )); do\n      k=$(( 2 * j + 1 ))\n      if (( k + 1 < n && heap[k] < heap[k + 1] )); then\n        (( k++ ))\n      fi\n      if (( heap[j] < heap[k] )); then\n        t=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$t\n      fi\n      j=$k\n    done\n  done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n\n    # Create a heap from the list\n    for i in $list; do\n        heap_push heap \"$i\"\n    done\n\n    # Pop the largest n elements from the heap\n    for ((i=0; i<n; i++)); do\n        result[i]=$(heap_pop heap)\n    done\n\n    # Return the result in descending order\n    for ((i=n-1; i>=0; i--)); do\n        echo \"${result[i]}\"\n    done",
    "  local -a arr=()\n  local -i i=0\n  local -i n=$2\n  local -i len=0\n  local -i j=0\n  local -i k=0\n  local -i tmp=0\n  local -i parent=0\n  local -i child=0\n  local -i child2=0\n  local -i len_half=0\n  local -i len_half_plus=0\n  local -i len_half_minus=0\n  local -i len_half_minus_plus=0\n  local -i len_half_minus_minus=0\n  local -i len_half_minus_minus_plus=0\n  local -i len_half_minus_minus_minus=0\n  local -i len_half_minus_minus_minus_plus=0\n  local -i len_half_minus_minus_minus_minus=0\n  local -i len_half_minus_minus_minus_minus_plus=0\n  local -i len_half_minus_minus_minus_minus_minus=0\n  local -i len_half_minus_minus_minus_minus_minus_plus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus_plus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus_minus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus_minus_plus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus_minus_minus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus_minus_minus_plus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus_minus_minus_minus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus_minus_minus_minus_plus=0\n  local -i len_half_minus_minus_minus_minus_minus_minus_minus_minus_minus_minus=0\n",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i len=${#1}\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i t=0\n    local -i x=0\n\n    for ((i=0; i<len; i++)); do\n        if ((i < n)); then\n            heap[i]=${1:i:1}\n        else\n            heap[0]=${1:i:1}\n            j=0\n            while ((2*j+1 < n)); do\n                k=2*j+1\n                if ((k+1 < n && heap[k] < heap[k+1])); then\n                    ((k++))\n                fi\n                if ((heap[j] >= heap[k])); then\n                    break\n                fi\n                ((t=heap[j], heap[j]=heap[k], heap[k]=t))\n                ((j=k))\n            done\n        fi\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        ((t=heap[0], heap[0]=heap[i], heap[i]=t))\n        j=0\n        while ((2*j+1 < i)); do\n            k=2*j+1\n            if ((k+1 < i && heap[k] < heap[k+1])); then\n                ((k++))\n            fi\n            if ((heap[j] >= heap[k])); then\n                break\n            fi\n            ((t=heap[j], heap[j]=heap[k], heap[k]=t))\n            ((j=k))\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[i]} \"\n    done\n    echo",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i parent\n    local -i child\n    local -i temp\n    local -i largest\n    local -i last\n    local -i last_parent\n    local -i last_child\n\n    for i in $1; do\n        heap[size++]=$i\n        parent=$((size/2-1))\n        child=$((size-1))\n        while (( parent >= 0 )); do\n            if (( heap[parent] < heap[child] )); then\n                temp=heap[parent]\n                heap[parent]=heap[child]\n                heap[child]=$temp\n                child=$parent\n                parent=$((child/2-1))\n            else\n                break\n            fi\n        done\n    done\n\n    for (( i=0; i<n; i++ )); do\n        largest=heap[0]\n        last=$((size-1))\n        heap[0]=heap[last]\n        size=$last\n        parent=0\n        last_parent=$((last/2-1))\n        last_child=$((last-1))\n        while (( parent <= last_parent )); do\n            child=$((parent*2+1))\n            if (( child < last )); then\n                if (( heap[child] < heap[child+1] )); then\n                    child=$((child+1))\n                fi\n            fi\n            if (( heap[parent] < heap[child] )); then\n                temp=heap[parent]\n                heap[parent]=heap[child]\n                heap[child]=$temp\n                parent=$child\n            else\n                break\n            fi\n        done\n        echo $largest\n    done",
    "    local -a arr\n    local -i i\n    local -i n\n    local -i len\n    local -i max\n    local -i max_index\n    local -i tmp\n\n    arr=($1)\n    n=$2\n    len=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n                max_index=$j\n            fi\n        done\n        tmp=${arr[i]}\n        arr[i]=${arr[max_index]}\n        arr[max_index]=$tmp\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${arr[i]}\n    done",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i size=0\n    local -i tmp=0\n    local -i largest=0\n    local -i left=0\n    local -i right=0\n    local -i largest_index=0\n    local -i swap=0\n    local -i heap_size=0\n    local -i parent=0\n    local -i child=0\n    local -i child_index=0\n    local -i parent_index=0\n    local -i heap_size=0\n    local -i swap=0\n    local -i largest_index=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i tmp=0\n    local -i size=0\n    local -i n=0\n    local -i i=0\n    local -a arr=()\n    local -i heap_size=0\n    local -i parent_index=0\n    local -i child_index=0\n    local -i child=0\n    local -i parent=0\n    local -i swap=0\n    local -i largest_index=0\n    local -i right=0\n    local -i left=0\n    local -i largest=0\n    local -i tmp=0\n    local -i size=0\n    local -i n=0\n    local -i i=0\n    local -a arr=()\n    local -i heap_size=0\n    local -i swap=0\n    local -i largest_index=0\n    local -i right=0\n    local -i left=0\n    local -i largest=0\n    local -i tmp=0\n    local -i size=0\n    local -i n=0\n    local -i i=0\n    local -a arr=()\n    local -i heap_size=0\n    local -i swap=0\n    local -i largest_index=0\n    local -i right=0\n    local -i left=0\n    local -i largest=0\n    local -i tmp=0\n    local -i size=0\n    local -",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i tmp=0\n\n    # build the array\n    for i in $1; do\n        arr[$n]=$i\n        n=$((n+1))\n    done\n\n    # build the max heap\n    len=$((n/2-1))\n    for ((i=len; i>=0; i--)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        largest=$i\n        if [[ ${arr[$left]} -gt ${arr[$largest]} ]]; then\n            largest=$left\n        fi\n        if [[ ${arr[$right]} -gt ${arr[$largest]} ]]; then\n            largest=$right\n        fi\n        if [[ $largest -ne $i ]]; then\n            tmp=${arr[$i]}\n            arr[$i]=${arr[$largest]}\n            arr[$largest]=$tmp\n        fi\n    done\n\n    # extract the n largest numbers\n    for ((i=0; i<$2; i++)); do\n        echo ${arr[0]}\n        arr[0]=${arr[$((n-1))]}\n        n=$((n-1))\n        len=$((n/2-1))\n        for ((i=len; i>=0; i--)); do\n            left=$((2*i+1))\n            right=$((2*i+2))\n            largest=$i\n            if [[ ${arr[$left]} -gt ${arr[$largest]} ]]; then\n                largest=$left\n            fi\n            if [[ ${arr[$right]} -gt ${arr[$largest]} ]]; then\n                largest=$right\n            fi\n            if [[ $largest -ne $i ]]; then\n                tmp=${arr[$i]}\n                arr[$i]=${arr[$largest]}\n                arr[$largest]=$tmp\n            fi\n        done\n    done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n\n    # create a heap queue\n    for ((i = 0; i < n; i++)); do\n        heap[i]=\"${list[i]}\"\n    done\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((2 * j + 1 < n)); do\n            k=2 * j + 1\n            if ((k + 1 < n && heap[k] < heap[k + 1])); then\n                k++\n            fi\n            if ((heap[j] < heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                j=k\n            else\n                break\n            fi\n        done\n    done\n\n    # find the n largest integers\n    for ((i = n; i < ${#list[@]}; i++)); do\n        if ((list[i] > heap[0])); then\n            heap[0]=${list[i]}\n            j=0\n            while ((2 * j + 1 < n)); do\n                k=2 * j + 1\n                if ((k + 1 < n && heap[k] < heap[k + 1])); then\n                    k++\n                fi\n                if ((heap[j] < heap[k])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[k]}\n                    heap[k]=$tmp\n                    j=k\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    # sort the heap queue\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$tmp\n        j=0\n        while ((2 * j + 1 < i)); do\n            k=2 * j + 1\n            if ((k + 1 < i && heap[k] < heap[k +",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i heap_size=0\n    local -i heap_capacity=${#1}\n    local -i parent\n    local -i child\n    local -i tmp\n\n    # initialize heap\n    for ((i=0; i<heap_capacity; i++)); do\n        heap[i]=${1[i]}\n    done\n\n    # build heap\n    for ((i=heap_capacity/2-1; i>=0; i--)); do\n        parent=$i\n        while true; do\n            child=$((parent*2+1))\n            if [[ $child -ge $heap_capacity ]]; then\n                break\n            fi\n            if [[ $child -lt $((heap_capacity-1)) && ${heap[child]} -lt ${heap[child+1]} ]]; then\n                child=$((child+1))\n            fi\n            if [[ ${heap[parent]} -ge ${heap[child]} ]]; then\n                break\n            fi\n            tmp=${heap[parent]}\n            heap[parent]=${heap[child]}\n            heap[child]=$tmp\n            parent=$child\n        done\n    done\n\n    # extract n largest integers\n    for ((i=0; i<n; i++)); do\n        if [[ $heap_size -eq 0 ]]; then\n            break\n        fi\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[heap_size-1]}\n        heap_size=$((heap_size-1))\n        parent=0\n        while true; do\n            child=$((parent*2+1))\n            if [[ $child -ge $heap_size ]]; then\n                break\n            fi\n            if [[ $child -lt $((heap_size-1)) && ${heap[child]} -lt ${heap[child+1]} ]]; then\n                child=$((child+1))\n            fi\n            if [[ ${heap[parent]} -ge ${heap[child]} ]]; then\n                break\n            fi\n            tmp=${heap[parent]}\n            heap[parent",
    "    local -a array=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_heap\n    local -i n_array\n    local -i temp\n\n    n_array=${#array[@]}\n    n_heap=$((n_array < n ? n_array : n))\n    for ((i=0; i<n_heap; i++)); do\n        heap[i]=${array[i]}\n    done\n    for ((i=n_heap/2; i>=0; i--)); do\n        j=$i\n        while ((j<n_heap)); do\n            k=$((j*2+1))\n            if ((k+1<n_heap && heap[k+1]>heap[k])); then\n                k=$((k+1))\n            fi\n            if ((k<n_heap && heap[k]>heap[j])); then\n                temp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$temp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n    for ((i=n_heap; i<n_array; i++)); do\n        if ((array[i]>heap[0])); then\n            heap[0]=${array[i]}\n            j=0\n            while ((j<n_heap)); do\n                k=$((j*2+1))\n                if ((k+1<n_heap && heap[k+1]>heap[k])); then\n                    k=$((k+1))\n                fi\n                if ((k<n_heap && heap[k]>heap[j])); then\n                    temp=${heap[j]}\n                    heap[j]=${heap[k]}\n                    heap[k]=$temp\n                    j=$k\n                else\n                    break\n                fi\n            done\n        fi\n    done\n    for ((i=n_heap-1; i>=0; i",
    "    local -a arr=()\n    local -i n=$2\n    local -i i\n    local -i j\n    local -i tmp\n    local -i len=0\n    local -i max_len=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_tmp=0\n    local -i max_len_i=0\n    local -i max_len_j=0\n    local -i max_len_tmp=0\n    local -i max_len_len=0\n    local -i max_len_max_len=0\n    local -i max_len_max_i=0\n    local -i max_len_max_j=0\n    local -i max_len_max_tmp=0\n    local -i max_len_max_len_i=0\n    local -i max_len_max_len_j=0\n    local -i max_len_max_len_tmp=0\n    local -i max_len_max_len_len=0\n    local -i max_len_max_len_max_len=0\n    local -i max_len_max_len_max_i=0\n    local -i max_len_max_len_max_j=0\n    local -i max_len_max_len_max_tmp=0\n    local -i max_len_max_len_max_len_i=0\n    local -i max_len_max_len_max_len_j=0\n    local -i max_len_max_len_max_len_tmp=0\n    local -i max_len_max_len_max_len_len=0\n    local -i max_len_max_len_max_len_max_len=0\n    local -i max_len_max_len_max_len_max_i=0\n    local -i max_len_max_len_max_len_max_j=0\n    local -i max_len_max_len_max_len_max_tmp=0\n    local -i max_len_max_len_max_len_max_len_i",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while [[ 2*k+1 -lt n ]]; do\n            j=2*k+1\n            if [[ j+1 -lt n && heap[j] -lt heap[j+1] ]]; then\n                j=$j+1\n            fi\n            if [[ heap[k] -lt heap[j] ]]; then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n    for ((i=n; i<len; i++)); do\n        if [[ arr[i] -gt heap[0] ]]; then\n            heap[0]=${arr[i]}\n            k=0\n            while [[ 2*k+1 -lt n ]]; do\n                j=2*k+1\n                if [[ j+1 -lt n && heap[j] -lt heap[j+1] ]]; then\n                    j=$j+1\n                fi\n                if [[ heap[k] -lt heap[j] ]]; then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                    k=$j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        heap[0]=$tmp\n        k=0\n        while [[ 2*k+1 -lt i ]]; do\n            j=2*k+1\n            if [[ j+1 -lt i && heap[j] -lt heap[j+1]",
    "  local list=($1)\n  local n=$2\n  local heap=()\n  local i\n  for ((i = 0; i < n; i++)); do\n    heap[i]=\"${list[i]}\"\n  done\n  heap_queue_build_max_heap heap\n  for ((i = n; i < ${#list[@]}; i++)); do\n    if [[ \"${list[i]}\" -gt \"${heap[0]}\" ]]; then\n      heap[0]=\"${list[i]}\"\n      heap_queue_max_heapify heap 0\n    fi\n  done\n  echo \"${heap[@]}\"",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i t=0\n    local -i len=0\n    local -i len_half=0\n    local -i len_half_minus_1=0\n    local -i len_minus_1=0\n    local -i len_minus_n=0\n    local -i len_minus_n_minus_1=0\n    local -i len_minus_n_minus_2=0\n    local -i len_minus_n_minus_3=0\n    local -i len_minus_n_minus_4=0\n    local -i len_minus_n_minus_5=0\n    local -i len_minus_n_minus_6=0\n    local -i len_minus_n_minus_7=0\n    local -i len_minus_n_minus_8=0\n    local -i len_minus_n_minus_9=0\n    local -i len_minus_n_minus_10=0\n    local -i len_minus_n_minus_11=0\n    local -i len_minus_n_minus_12=0\n    local -i len_minus_n_minus_13=0\n    local -i len_minus_n_minus_14=0\n    local -i len_minus_n_minus_15=0\n    local -i len_minus_n_minus_16=0\n    local -i len_minus_n_minus_17=0\n    local -i len_minus_n_minus_18=0\n    local -i len_minus_n_minus_19=0\n    local -i len_minus_n_minus_20=0\n    local -i len_minus_n_minus_21=0\n    local -i len_minus_n_minus_22=0\n    local -i len_minus_n_minus_23=0\n    local -i len_minus_n_minus_24=0\n    local -i len_minus",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_list=${#list[@]}\n    local -i n_heap=0\n    local -i n_largest=0\n    local -i n_largest_max=0\n    local -i n_largest_min=0\n    local -i n_largest_min_index=0\n    local -i n_largest_min_index_parent=0\n    local -i n_largest_min_index_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent_parent=0\n    local -i n_largest_min_index_parent_parent_parent_parent_parent",
    "    local -a heap\n    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n\n    # Build a heap\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j > 0)); do\n            if ((heap[j] > heap[(j-1)/2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[(j-1)/2]}\n                heap[(j-1)/2]=$tmp\n                j=(j-1)/2\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((j < ${#heap[@]})); do\n            if ((j*2+1 < ${#heap[@]})); then\n                if ((j*2+2 < ${#heap[@]})); then\n                    if ((heap[j*2+1] > heap[j*2+2])); then\n                        if ((heap[j] < heap[j*2+1])); then\n                            tmp=${heap[j]}\n                            heap[j]=${heap[j*2+1]}\n                            heap[j*2+1]=$tmp\n                            j=j*2+1\n                        else\n                            break\n                        fi\n                    else\n                        if ((heap[j] < heap[j*2+2])); then\n                            tmp=${heap[j]}\n                            heap[j]=${heap[j*2+2]}\n                            heap[j*2+2]=$tmp\n                            j=j*2+2\n                        else\n                            break\n                        fi\n                    fi\n                else\n                    if ((heap[j] < heap[j*2+1]));",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_heap\n    local -i n_list\n    local -i t\n    local -i u\n    local -i v\n\n    n_list=$(echo \"$list\" | wc -w)\n    if [[ $n_list -lt $n ]]; then\n        echo \"Error: n ($n) is greater than the number of elements in the list ($n_list).\" >&2\n        return 1\n    fi\n\n    # Initialize the heap.\n    n_heap=0\n    for i in $list; do\n        if [[ $n_heap -lt $n ]]; then\n            heap[$n_heap]=$i\n            n_heap+=1\n        else\n            # If the heap is full, then compare the new element to the root of the heap.\n            if [[ $i -gt ${heap[0]} ]]; then\n                # If the new element is greater than the root of the heap, then replace the root with the new element.\n                heap[0]=$i\n            else\n                # If the new element is less than or equal to the root of the heap, then ignore the new element.\n                continue\n            fi\n        fi\n\n        # Re-heapify the heap.\n        #\n        # The heap is an array of integers, where the root of the heap is at index 0.\n        # The left child of the node at index k is at index 2k+1.\n        # The right child of the node at index k is at index 2k+2.\n        # The parent of the node at index k is at index floor((k-1)/2).\n        #\n        # The heap is a max-heap, where the value of each node is greater than or equal to the values of its children.\n        #\n        # The heap is stored in the array in level-order.\n        #\n        # The heap is re-heapified by starting at the root of the heap and moving down the heap, comparing the value of\n        # each node",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_l=0\n    local -i tmp_m=0\n    local -i tmp_n=0\n    local -i tmp_o=0\n    local -i tmp_p=0\n    local -i tmp_q=0\n    local -i tmp_r=0\n    local -i tmp_s=0\n    local -i tmp_t=0\n    local -i tmp_u=0\n    local -i tmp_v=0\n    local -i tmp_w=0\n    local -i tmp_x=0\n    local -i tmp_y=0\n    local -i tmp_z=0\n    local -i tmp_aa=0\n    local -i tmp_bb=0\n    local -i tmp_cc=0\n    local -i tmp_dd=0\n    local -i tmp_ee=0\n    local -i tmp_ff=0\n    local -i tmp_gg=0\n    local -i tmp_hh=0\n    local -i tmp_ii=0\n    local -i tmp_jj=0\n    local -i tmp_kk=0\n    local -i tmp_ll=0\n    local -i tmp_mm=0\n    local -i tmp_nn=0\n    local -i tmp_oo=0\n    local -i tmp_pp=0\n    local -i tmp_qq=0\n    local -i tmp_rr=0\n    local -i tmp_ss=0\n    local -i tmp_tt=0\n    local -i tmp_uu=0\n    local -i tmp_vv=0\n    local -i tmp_ww=0\n    local -i tmp_xx=0\n    local -i tmp_yy=0\n    local -i tmp_zz=0\n    local -i tmp_aaa=0\n    local -",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n    local len=${#arr[@]}\n    for ((i=n/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<n)); do\n            if ((2*j+2<n && arr[2*j+2]>arr[2*j+1])) ; then\n                ((temp=2*j+2))\n            else\n                ((temp=2*j+1))\n            fi\n            if ((arr[temp]>arr[j])) ; then\n                ((arr[temp],arr[j]=arr[j],arr[temp]))\n                ((j=temp))\n            else\n                break\n            fi\n        done\n    done\n    for ((i=n; i<len; i++)); do\n        if ((arr[i]>arr[0])) ; then\n            ((arr[0]=arr[i]))\n            j=0\n            while ((2*j+1<n)); do\n                if ((2*j+2<n && arr[2*j+2]>arr[2*j+1])) ; then\n                    ((temp=2*j+2))\n                else\n                    ((temp=2*j+1))\n                fi\n                if ((arr[temp]>arr[j])) ; then\n                    ((arr[temp],arr[j]=arr[j],arr[temp]))\n                    ((j=temp))\n                else\n                    break\n                fi\n            done\n        fi\n    done\n    for ((i=n-1; i>0; i--)); do\n        ((arr[0],arr[i]=arr[i],arr[0]))\n        j=0\n        while ((2*j+1<i)); do\n            if ((2*j+2<i && arr[2*j+2]>arr[2*j+1])) ; then\n                ((temp=2*j+2))\n            else\n                ((temp=2*j+1))\n            fi\n            if ((arr[temp]>arr[j])) ; then\n",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i min=0\n    local -i max=0\n    local -i mid=0\n    local -i mid_val=0\n    local -i mid_val_next=0\n    local -i mid_val_prev=0\n    local -i mid_val_prev_prev=0\n    local -i mid_val_next_next=0\n    local -i mid_val_prev_prev_prev=0\n    local -i mid_val_next_next_next=0\n    local -i mid_val_prev_prev_prev_prev=0\n    local -i mid_val_next_next_next_next=0\n    local -i mid_val_prev_prev_prev_prev_prev=0\n    local -i mid_val_next_next_next_next_next=0\n    local -i mid_val_prev_prev_prev_prev_prev_prev=0\n    local -i mid_val_next_next_next_next_next_next=0\n    local -i mid_val_prev_prev_prev_prev_prev_prev_prev=0\n    local -i mid_val_next_next_next_next_next_next_next=0\n    local -i mid_val_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i mid_val_next_next_next_next_next_next_next_next=0\n    local -i mid_val_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i mid_val_next_next_next_next_next_next_next_next_next=0\n    local -i mid_val_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i mid_val_next_next_next_next_next_next_next_next_next_next=0\n   ",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_idx=$((len-1))\n    local -i parent_idx\n    local -i left_child_idx\n    local -i right_child_idx\n    local -i largest_idx\n    local -i tmp\n    local -i heap_size=0\n\n    # Build a max heap from the input array\n    for ((i=0; i<len; i++)); do\n        heap[heap_size++]=${1[i]}\n        parent_idx=$(((heap_size-2)/2))\n        while ((parent_idx>=0 && heap[parent_idx]<heap[heap_size-1])); do\n            tmp=${heap[parent_idx]}\n            heap[parent_idx]=${heap[heap_size-1]}\n            heap[heap_size-1]=$tmp\n            parent_idx=$(((parent_idx-1)/2))\n        done\n    done\n\n    # Extract the largest n elements from the heap\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[--heap_size]}\n        largest_idx=0\n        while true; do\n            left_child_idx=$((2*largest_idx+1))\n            right_child_idx=$((2*largest_idx+2))\n            if ((left_child_idx<heap_size && heap[left_child_idx]>heap[largest_idx])); then\n                largest_idx=$left_child_idx\n            fi\n            if ((right_child_idx<heap_size && heap[right_child_idx]>heap[largest_idx])); then\n                largest_idx=$right_child_idx\n            fi\n            if ((largest_idx==left_child_idx || largest_idx==right_child_idx)); then\n                tmp=${heap[largest_id",
    "    local -a a=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j<n-1)) && ((a[j]<a[j+1])); then\n                ((j++))\n            fi\n            if ((a[k]<a[j])); then\n                tmp=${a[k]}\n                a[k]=${a[j]}\n                a[j]=$tmp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        tmp=${a[0]}\n        a[0]=${a[i]}\n        a[i]=$tmp\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j<i-1)) && ((a[j]<a[j+1])); then\n                ((j++))\n            fi\n            if ((a[k]<a[j])); then\n                tmp=${a[k]}\n                a[k]=${a[j]}\n                a[j]=$tmp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${a[@]:0:n}",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=$(echo \"$1\" | wc -w)\n    local -i max=0\n    local -i max_i=0\n    local -i tmp=0\n\n    for i in $1; do\n        arr[$i]=$i\n    done\n\n    for ((i=0; i<n; i++)); do\n        max=0\n        max_i=0\n        for ((j=0; j<len; j++)); do\n            if [[ ${arr[$j]} -gt $max ]]; then\n                max=${arr[$j]}\n                max_i=$j\n            fi\n        done\n        arr[$max_i]=0\n        echo $max\n    done",
    "    local n=$2\n    local list=($1)\n    local heap=()\n    local heap_size=0\n    local i\n    local j\n    local tmp\n    for ((i=0; i<${#list[@]}; i++)); do\n        if ((heap_size < n)); then\n            heap[heap_size]=${list[i]}\n            ((heap_size++))\n            for ((j=heap_size-1; j>0; j--)); do\n                if ((heap[j] > heap[j/2])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[j/2]}\n                    heap[j/2]=$tmp\n                fi\n            done\n        else\n            if ((list[i] > heap[0])); then\n                heap[0]=${list[i]}\n                for ((j=0; j<heap_size; j++)); do\n                    if ((2*j+1 < heap_size && heap[j] < heap[2*j+1])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+1]}\n                        heap[2*j+1]=$tmp\n                    fi\n                    if ((2*j+2 < heap_size && heap[j] < heap[2*j+2])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+2]}\n                        heap[2*j+2]=$tmp\n                    fi\n                done\n            fi\n        fi\n    done\n    for ((i=heap_size-1; i>=0; i--)); do\n        echo ${heap[i]}\n    done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i tmp\n    local -i tmp2\n    local -i tmp3\n    local -i tmp4\n    local -i tmp5\n    local -i tmp6\n    local -i tmp7\n    local -i tmp8\n    local -i tmp9\n    local -i tmp10\n    local -i tmp11\n    local -i tmp12\n    local -i tmp13\n    local -i tmp14\n    local -i tmp15\n    local -i tmp16\n    local -i tmp17\n    local -i tmp18\n    local -i tmp19\n    local -i tmp20\n    local -i tmp21\n    local -i tmp22\n    local -i tmp23\n    local -i tmp24\n    local -i tmp25\n    local -i tmp26\n    local -i tmp27\n    local -i tmp28\n    local -i tmp29\n    local -i tmp30\n    local -i tmp31\n    local -i tmp32\n    local -i tmp33\n    local -i tmp34\n    local -i tmp35\n    local -i tmp36\n    local -i tmp37\n    local -i tmp38\n    local -i tmp39\n    local -i tmp40\n    local -i tmp41\n    local -i tmp42\n    local -i tmp43\n    local -i tmp44\n    local -i tmp45\n    local -i tmp46\n    local -i tmp47\n    local -i tmp48\n    local -i tmp49\n    local -i tmp50\n    local -i tmp51\n    local -i tmp52\n    local -i tmp53\n    local -i tmp54\n    local -i tmp55\n    local -i tmp56\n    local -i tmp57\n    local -i tmp58\n    local -i tmp59\n    local -i tmp60\n    local -i tmp61\n    local -i tmp62\n    local -i tmp63\n    local -i tmp64\n    local -i tmp65\n    local -i tmp66\n    local -i tmp67\n    local -i tmp68\n    local -i tmp69\n   ",
    "    local -a heap\n    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j+1<n && heap[j+1]>heap[j])); then\n                j+=1\n            fi\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n; i<len; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            k=0\n            while ((2*k+1<n)); do\n                j=2*k+1\n                if ((j+1<n && heap[j+1]>heap[j])); then\n                    j+=1\n                fi\n                if ((heap[k]<heap[j])); then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                    k=j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        heap[0]=$tmp\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j+1<i && heap[j+1]>heap[j])); then\n                j+=1\n            fi\n            if ((heap",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i largest=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local -i tmp49=0\n    local -i tmp50=0\n    local -i tmp51=0\n    local -i tmp52=0\n    local -i",
    "  local list=$1\n  local n=$2\n  local -a heap\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n_heap\n  local -i n_list\n  local -i temp\n  local -i temp_index\n  local -i temp_value\n  local -i value\n  local -i value_index\n  local -i value_value\n  local -i x\n  local -i y\n  local -i z\n\n  n_list=$(echo \"$list\" | wc -w)\n  if (( n > n_list )); then\n    n=$n_list\n  fi\n\n  n_heap=0\n  for i in $list; do\n    if (( n_heap < n )); then\n      heap[n_heap]=$i\n      (( n_heap++ ))\n    else\n      if (( i > heap[0] )); then\n        heap[0]=$i\n      fi\n    fi\n  done\n\n  if (( n_heap < n )); then\n    n=$n_heap\n  fi\n\n  for (( i = n / 2 - 1; i >= 0; i-- )); do\n    temp_index=$i\n    temp_value=${heap[temp_index]}\n    while (( temp_index < n )); do\n      j=2 * temp_index + 1\n      k=2 * temp_index + 2\n      if (( j < n )); then\n        value_index=$j\n        value_value=${heap[value_index]}\n        if (( k < n )); then\n          if (( value_value < ${heap[k]} )); then\n            value_index=$k\n            value_value=${heap[value_index]}\n          fi\n        fi\n        if (( temp_value < value_value )); then\n          heap[temp_index]=$value_value\n          temp_index=$value_index\n          temp_value=$value_value\n        else\n          break\n        fi\n      else\n        break\n      fi\n    done\n    heap[temp_index]=$temp_value\n  done\n\n  for (( i = n -",
    "    local -a list=($1)\n    local n=$2\n    local -a heap_queue\n    local -a result\n    local i\n    local j\n\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap_queue[i]=${list[i]}\n    done\n\n    for ((i=${#heap_queue[@]}-1; i>=0; i--)); do\n        for ((j=i; j>=0; j--)); do\n            if [[ ${heap_queue[j]} -lt ${heap_queue[$((j/2))]} ]]; then\n                local tmp=${heap_queue[j]}\n                heap_queue[j]=${heap_queue[$((j/2))]}\n                heap_queue[$((j/2))]=$tmp\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap_queue[0]}\n        heap_queue[0]=${heap_queue[$((--${#heap_queue[@]}))]}\n        for ((j=0; j<${#heap_queue[@]}; j++)); do\n            if [[ ${heap_queue[$((j*2+1))]} -lt ${heap_queue[$((j*2+2))]} ]]; then\n                if [[ ${heap_queue[j]} -gt ${heap_queue[$((j*2+1))]} ]]; then\n                    local tmp=${heap_queue[j]}\n                    heap_queue[j]=${heap_queue[$((j*2+1))]}\n                    heap_queue[$((j*2+1))]=$tmp\n                fi\n            else\n                if [[ ${heap_queue[j]} -gt ${heap_queue[$((j*2+2))]} ]]; then\n                    local tmp=${heap_queue[j]}\n                    heap_queue[j]=${heap_queue[$((j*2+2))]}\n                    heap_queue[$((j*2+2))]=$tmp\n                fi\n            fi\n       ",
    "  local -a heap\n  local -i n=$2\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i t=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i l=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i l=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i l=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n ",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i\n    local j\n    local tmp\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2; i>=0; i--)); do\n        tmp=${heap[i]}\n        j=$((i*2))\n        while ((j<n)); do\n            if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n                j=$((j+1))\n            fi\n            if ((tmp>=heap[j])); then\n                break\n            fi\n            heap[$((j/2))]=${heap[j]}\n            j=$((j*2))\n        done\n        heap[$((j/2))]=$tmp\n    done\n\n    for ((i=n; i<${#list[@]}; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            tmp=${heap[0]}\n            j=1\n            while ((j<n)); do\n                if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n                    j=$((j+1))\n                fi\n                if ((tmp>=heap[j])); then\n                    break\n                fi\n                heap[$((j/2))]=${heap[j]}\n                j=$((j*2))\n            done\n            heap[$((j/2))]=$tmp\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        j=1\n        while ((j<i)); do\n            if ((j<i-1)) && ((heap[j]<heap[j+1])); then\n                j=$((j+1))\n            fi\n            if ((tmp>=heap[j])); then\n                break\n            fi\n            heap[$((",
    "    local list=\"$1\"\n    local n=\"$2\"\n\n    local -a heap\n    local -a result\n\n    local i\n    local j\n    local k\n    local l\n    local m\n    local tmp\n\n    # Build a heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        k=${#heap[@]}\n        while [ $k -gt 1 ]; do\n            j=$((k / 2))\n            if [ ${heap[$((j - 1))]} -lt ${heap[$((k - 1))]} ]; then\n                tmp=${heap[$((j - 1))]}\n                heap[$((j - 1))]=${heap[$((k - 1))]}\n                heap[$((k - 1))]=$tmp\n            fi\n            k=$j\n        done\n    done\n\n    # Extract the n largest integers\n    for ((i = 0; i < n; i++)); do\n        result[$i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]} - 1]}\n        unset heap[${#heap[@]} - 1]\n        k=1\n        while [ $k -lt ${#heap[@]} ]; do\n            j=$((k * 2))\n            if [ $j -lt ${#heap[@]} ]; then\n                if [ $((j + 1)) -lt ${#heap[@]} ]; then\n                    if [ ${heap[$((j - 1))]} -lt ${heap[$((j))]} ]; then\n                        l=$j\n                    else\n                        l=$((j + 1))\n                    fi\n                else\n                    l=$j\n                fi\n                if [ ${heap[$((k - 1))]} -lt ${heap[$((l - 1))]} ]; then\n                    tmp=${heap[$((k - 1))]}\n                    heap[$((k - 1))]=${heap[$((l - 1))]}\n                    heap[$((l - 1))]=$tmp\n                fi\n            fi\n            k=$j\n        done\n    done\n\n    # Print the result\n   ",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i size=0\n    local -i index=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i temp=0\n\n    for i in $1; do\n        heap[size]=$i\n        size+=1\n        index=$((size-1))\n        while [ $index -gt 0 ]; do\n            parent=$(((index-1)/2))\n            if [ ${heap[$index]} -gt ${heap[$parent]} ]; then\n                temp=${heap[$index]}\n                heap[$index]=${heap[$parent]}\n                heap[$parent]=$temp\n            fi\n            index=$parent\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[size-1]}\n        size-=1\n        index=0\n        while [ $index -lt $size ]; do\n            left=$((2*index+1))\n            right=$((2*index+2))\n            if [ $left -lt $size ]; then\n                if [ $right -lt $size ]; then\n                    largest=$((left))\n                    if [ ${heap[$right]} -gt ${heap[$left]} ]; then\n                        largest=$((right))\n                    fi\n                else\n                    largest=$((left))\n                fi\n                if [ ${heap[$largest]} -gt ${heap[$index]} ]; then\n                    temp=${heap[$largest]}\n                    heap[$largest]=${heap[$index]}\n                    heap[$index]=$temp\n                    index=$largest\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n    done\n    echo",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a array\n    local -a heap\n    local i\n    local j\n    local temp\n\n    # Convert list to array\n    IFS=' ' read -r -a array <<< \"$list\"\n\n    # Build heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${array[i]}\n        j=$i\n        while ((j>0)); do\n            if ((heap[j]>heap[(j-1)/2])); then\n                temp=${heap[j]}\n                heap[j]=${heap[(j-1)/2]}\n                heap[(j-1)/2]=$temp\n                j=(j-1)/2\n            else\n                break\n            fi\n        done\n    done\n\n    # Insert remaining elements\n    for ((i=n; i<${#array[@]}; i++)); do\n        if ((array[i]>heap[0])); then\n            heap[0]=${array[i]}\n            j=0\n            while ((2*j+1<n)); do\n                if ((2*j+2<n)); then\n                    if ((heap[2*j+1]>heap[2*j+2])); then\n                        if ((heap[2*j+1]>heap[j])); then\n                            temp=${heap[j]}\n                            heap[j]=${heap[2*j+1]}\n                            heap[2*j+1]=$temp\n                            j=2*j+1\n                        else\n                            break\n                        fi\n                    else\n                        if ((heap[2*j+2]>heap[j])); then\n                            temp=${heap[j]}\n                            heap[j]=${heap[2*j+2]}\n                            heap[2*j+2]=$temp\n                            j=2*j+2\n                        else\n                            break\n                        fi\n                    fi\n                else\n                    if ((heap[2*j+1]>heap[j])); then\n                        temp=${heap[j]}\n                       ",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i heap_size=0\n    local -i heap_max_size=$n\n\n    for i in $1; do\n        if [[ $heap_size -lt $heap_max_size ]]; then\n            heap[$heap_size]=$i\n            ((heap_size++))\n            heap_sift_up $heap_size\n        elif [[ $i -gt ${heap[0]} ]]; then\n            heap[0]=$i\n            heap_sift_down\n        fi\n    done\n\n    for ((i=heap_size-1; i>=0; i--)); do\n        echo ${heap[0]}\n        heap[0]=${heap[i]}\n        ((heap_size--))\n        heap_sift_down\n    done",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_l=0\n    local -i tmp_m=0\n    local -i tmp_n=0\n    local -i tmp_o=0\n    local -i tmp_p=0\n    local -i tmp_q=0\n    local -i tmp_r=0\n    local -i tmp_s=0\n    local -i tmp_t=0\n    local -i tmp_u=0\n    local -i tmp_v=0\n    local -i tmp_w=0\n    local -i tmp_x=0\n    local -i tmp_y=0\n    local -i tmp_z=0\n    local -i tmp_aa=0\n    local -i tmp_bb=0\n    local -i tmp_cc=0\n    local -i tmp_dd=0\n    local -i tmp_ee=0\n    local -i tmp_ff=0\n    local -i tmp_gg=0\n    local -i tmp_hh=0\n    local -i tmp_ii=0\n    local -i tmp_jj=0\n    local -i tmp_kk=0\n    local -i tmp_ll=0\n    local -i tmp_mm=0\n    local -i tmp_nn=0\n    local -i tmp_oo=0\n    local -i tmp_pp=0\n    local -i tmp_qq=0\n    local -i tmp_rr=0\n    local -i tmp_ss=0\n    local -i tmp_tt=0\n    local -i tmp_uu=0\n    local -i tmp_vv=0\n    local -i tmp_ww=0\n    local -i tmp_xx=0\n    local -i tmp_yy=0\n    local -i tmp_zz=0\n    local -i tmp_aaa=0\n    local -",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    heap_sort_descending heap[@]\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_sort_descending heap[@]\n        fi\n    done\n    echo \"${heap[@]}\"",
    "  local -a list=($1)\n  local n=$2\n  local -a heap=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n_list=${#list[@]}\n  local -i n_heap=0\n  local -i n_largest=0\n  local -i tmp=0\n  local -i tmp_i=0\n  local -i tmp_j=0\n  local -i tmp_k=0\n  local -i tmp_l=0\n  local -i tmp_m=0\n  local -i tmp_n=0\n  local -i tmp_n_list=0\n  local -i tmp_n_heap=0\n  local -i tmp_n_largest=0\n  local -i tmp_tmp=0\n  local -i tmp_tmp_i=0\n  local -i tmp_tmp_j=0\n  local -i tmp_tmp_k=0\n  local -i tmp_tmp_l=0\n  local -i tmp_tmp_m=0\n  local -i tmp_tmp_n=0\n  local -i tmp_tmp_n_list=0\n  local -i tmp_tmp_n_heap=0\n  local -i tmp_tmp_n_largest=0\n  local -i tmp_tmp_tmp=0\n  local -i tmp_tmp_tmp_i=0\n  local -i tmp_tmp_tmp_j=0\n  local -i tmp_tmp_tmp_k=0\n  local -i tmp_tmp_tmp_l=0\n  local -i tmp_tmp_tmp_m=0\n  local -i tmp_tmp_tmp_n=0\n  local -i tmp_tmp_tmp_n_list=0\n  local -i tmp_tmp_tmp_n_heap=0\n  local -i tmp_tmp_tmp_n_largest=0\n  local -i tmp_tmp_tmp_tmp=0\n  local -i tmp_tmp_tmp_tmp_i=0\n  local -i tmp_",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i temp=0\n    local -i temp2=0\n    local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n    local -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n    local -i temp41=0\n    local -i temp42=0\n    local -i temp43=0\n    local -i temp44=0\n    local -i temp45=0\n    local -i temp46=0\n    local -i temp47=0\n    local -i temp48=0\n   ",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i nl\n    local -i nr\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i nl_\n    local -i nr_\n    local -i p_\n    local -i q_\n    local -i r_\n    local -i s_\n    local -i t_\n    local -i u_\n    local -i v_\n    local -i w_\n    local -i x_\n    local -i y_\n    local -i z_\n    local -i nl__\n    local -i nr__\n    local -i p__\n    local -i q__\n    local -i r__\n    local -i s__\n    local -i t__\n    local -i u__\n    local -i v__\n    local -i w__\n    local -i x__\n    local -i y__\n    local -i z__\n    local -i nl___\n    local -i nr___\n    local -i p___\n    local -i q___\n    local -i r___\n    local -i s___\n    local -i t___\n    local -i u___\n    local -i v___\n    local -i w___\n    local -i x___\n    local -i y___\n    local -i z___\n    local -i nl____\n    local -i nr____\n    local -i p____\n    local -i q____\n    local -i r____\n    local -i s____\n    local -i t____\n    local -i u____\n    local -i v____\n    local -i w____\n    local -i x____\n    local -i y____\n    local -i z____\n    local -i nl_____",
    "    local -a heap\n    local -i heap_size=0\n    local -i i\n    local -i n=$2\n    local -i tmp\n    local -i tmp_index\n    local -i tmp_index_child1\n    local -i tmp_index_child2\n    local -i tmp_index_parent\n    local -i tmp_index_parent_child1\n    local -i tmp_index_parent_child2\n    local -i tmp_index_parent_child3\n    local -i tmp_index_parent_child4\n    local -i tmp_index_parent_child5\n    local -i tmp_index_parent_child6\n    local -i tmp_index_parent_child7\n    local -i tmp_index_parent_child8\n    local -i tmp_index_parent_child9\n    local -i tmp_index_parent_child10\n    local -i tmp_index_parent_child11\n    local -i tmp_index_parent_child12\n    local -i tmp_index_parent_child13\n    local -i tmp_index_parent_child14\n    local -i tmp_index_parent_child15\n    local -i tmp_index_parent_child16\n    local -i tmp_index_parent_child17\n    local -i tmp_index_parent_child18\n    local -i tmp_index_parent_child19\n    local -i tmp_index_parent_child20\n    local -i tmp_index_parent_child21\n    local -i tmp_index_parent_child22\n    local -i tmp_index_parent_child23\n    local -i tmp_index_parent_child24\n    local -i tmp_index_parent_child25\n    local -i tmp_index_parent_child26\n    local -i tmp_index_parent_child27\n    local -i tmp_index_parent_child28\n    local -i tmp_index_parent_child29\n    local -i tmp_index_parent_child30\n    local -i tmp_index_parent_child31\n    local -i tmp_index_parent_child32\n    local -i tmp_index_parent_child33\n    local -i tmp_",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i t=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\n  for i in $list; do\n    heap[$j]=$i\n    j=$j+1\n  done\n\n  for ((i=j/2-1; i>=0; i--)); do\n    k=$i\n    x=${heap[$k]}\n    while ((k<j/2)); do\n      y=2*k+1\n      if ((y<j-1)) && ((${heap[$y]}<${heap[$y+1]})); then\n        y=$y+1\n      fi\n      if ((x>=${heap[$y]})); then\n        break\n      fi\n      heap[$k]=${heap[$y]}\n      k=$y\n    done\n    heap[$k]=$x\n  done\n\n  for ((i=j-1; i>=0; i--)); do\n    t=${heap[$i]}\n    heap[$i]=${heap[0]}\n    k=0\n    while ((k<i)); do\n      y=2*k+1\n      if ((y<i-1)) && ((${heap[$y]}<${heap[$y+1]})); then\n        y=$y+1\n      fi\n      if ((${heap[$k]}>=${heap[$y]})); then\n        break\n      fi\n      heap[$k]=${heap[$y]}\n      k=$y\n    done\n    heap[$k]=$t\n  done\n\n  for ((i=0; i<n; i++)); do\n    echo -n \"${heap[$i]} \"\n  done\n  echo",
    "  local -a heap\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i t=0\n\n  for i in $1; do\n    heap[n++]=$i\n  done\n\n  for ((i=n/2-1; i>=0; i--)); do\n    k=$i\n    t=${heap[k]}\n    while ((2*k+1<n)); do\n      j=2*k+1\n      if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n        ((j++))\n      fi\n      if ((t>=heap[j])); then\n        break\n      fi\n      heap[k]=${heap[j]}\n      ((k=j))\n    done\n    heap[k]=$t\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    t=${heap[i]}\n    heap[i]=${heap[0]}\n    k=0\n    while ((2*k+1<i)); do\n      j=2*k+1\n      if ((j<i-1)) && ((heap[j]<heap[j+1])); then\n        ((j++))\n      fi\n      if ((t>=heap[j])); then\n        break\n      fi\n      heap[k]=${heap[j]}\n      ((k=j))\n    done\n    heap[k]=$t\n  done\n\n  for ((i=0; i<$2; i++)); do\n    echo ${heap[i]}\n  done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i index\n    local -i parent\n    local -i child1\n    local -i child2\n    local -i largest\n    local -i temp\n    local -i temp2\n    local -i temp3\n    local -i temp4\n    local -i temp5\n    local -i temp6\n    local -i temp7\n    local -i temp8\n    local -i temp9\n    local -i temp10\n    local -i temp11\n    local -i temp12\n    local -i temp13\n    local -i temp14\n    local -i temp15\n    local -i temp16\n    local -i temp17\n    local -i temp18\n    local -i temp19\n    local -i temp20\n    local -i temp21\n    local -i temp22\n    local -i temp23\n    local -i temp24\n    local -i temp25\n    local -i temp26\n    local -i temp27\n    local -i temp28\n    local -i temp29\n    local -i temp30\n    local -i temp31\n    local -i temp32\n    local -i temp33\n    local -i temp34\n    local -i temp35\n    local -i temp36\n    local -i temp37\n    local -i temp38\n    local -i temp39\n    local -i temp40\n    local -i temp41\n    local -i temp42\n    local -i temp43\n    local -i temp44\n    local -i temp45\n    local -i temp46\n    local -i temp47\n    local -i temp48\n    local -i temp49\n    local -i temp50\n    local -i temp51\n    local -i temp52\n    local -i temp53\n    local -i temp54\n    local -i temp55\n    local -i temp56\n    local -i temp57\n    local -i temp58\n    local -i temp59\n    local -i temp60\n    local -i temp61\n    local -i temp62\n    local -i temp63\n    local -i temp64\n    local -i",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local tmp\n    local len\n\n    # init heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n    done\n\n    # build heap\n    len=${#heap[@]}\n    for ((i=len/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<len)); do\n            if ((2*j+2<len)); then\n                if ((heap[2*j+1]<heap[2*j+2])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[2*j+2]}\n                    heap[2*j+2]=$tmp\n                    j=2*j+2\n                else\n                    tmp=${heap[j]}\n                    heap[j]=${heap[2*j+1]}\n                    heap[2*j+1]=$tmp\n                    j=2*j+1\n                fi\n            else\n                tmp=${heap[j]}\n                heap[j]=${heap[2*j+1]}\n                heap[2*j+1]=$tmp\n                j=2*j+1\n            fi\n        done\n    done\n\n    # get largest n numbers\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[len-i-1]}\n        len=${#heap[@]}\n        j=0\n        while ((2*j+1<len)); do\n            if ((2*j+2<len)); then\n                if ((heap[2*j+1]<heap[2*j+2])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[2*j+2]}\n                    heap[2*j+2]=$tmp\n                    j=2*j+2\n                else\n                    tmp=${heap[j]}\n                    heap[j]=${",
    "    local -a array=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n    local size=${#array[@]}\n\n    # build max heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        # heapify\n        j=$i\n        while ((2 * j + 1 < size)); do\n            if ((2 * j + 2 < size)); then\n                if ((array[2 * j + 1] > array[2 * j + 2])); then\n                    if ((array[j] < array[2 * j + 1])); then\n                        temp=${array[j]}\n                        array[j]=${array[2 * j + 1]}\n                        array[2 * j + 1]=$temp\n                        j=2 * j + 1\n                    else\n                        break\n                    fi\n                else\n                    if ((array[j] < array[2 * j + 2])); then\n                        temp=${array[j]}\n                        array[j]=${array[2 * j + 2]}\n                        array[2 * j + 2]=$temp\n                        j=2 * j + 2\n                    else\n                        break\n                    fi\n                fi\n            else\n                if ((array[j] < array[2 * j + 1])); then\n                    temp=${array[j]}\n                    array[j]=${array[2 * j + 1]}\n                    array[2 * j + 1]=$temp\n                    j=2 * j + 1\n                else\n                    break\n                fi\n            fi\n        done\n    done\n\n    # extract max\n    for ((i = 0; i < n; i++)); do\n        echo ${array[0]}\n        array[0]=${array[size - 1 - i]}\n        size=$((size - 1))\n        j=0\n        while ((2 * j + 1 < size)); do\n            if ((2 * j + 2 < size)); then\n                if ((array[2 * j + 1] > array[2 * j + 2])); then\n                    if ((array[j] < array[2 * j + 1])); then\n                        temp=${array[j]}\n                        array[j]=${array[2 * j + 1]}\n",
    "    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j<n-1)) && ((arr[j]<arr[j+1])); then\n                ((j++))\n            fi\n            if ((arr[k]<arr[j])); then\n                t=arr[k]\n                arr[k]=arr[j]\n                arr[j]=t\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        t=arr[0]\n        arr[0]=arr[i]\n        arr[i]=t\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j<i-1)) && ((arr[j]<arr[j+1])); then\n                ((j++))\n            fi\n            if ((arr[k]<arr[j])); then\n                t=arr[k]\n                arr[k]=arr[j]\n                arr[j]=t\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=0; i<$2; i++)); do\n        echo ${arr[i]}\n    done",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_idx=$((len - 1))\n    local -i parent_idx\n    local -i child_idx\n    local -i tmp\n\n    for ((i = 0; i < len; i++)); do\n        heap[i]=${1:i:1}\n        parent_idx=$(((i - 1) / 2))\n        child_idx=$i\n        while ((parent_idx >= 0)); do\n            if ((heap[parent_idx] < heap[child_idx])); then\n                tmp=${heap[parent_idx]}\n                heap[parent_idx]=${heap[child_idx]}\n                heap[child_idx]=$tmp\n            fi\n            child_idx=$parent_idx\n            parent_idx=$(((child_idx - 1) / 2))\n        done\n    done\n\n    for ((i = 0; i < n; i++)); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[last_idx]}\n        heap[last_idx]=0\n        last_idx=$((last_idx - 1))\n        parent_idx=0\n        child_idx=1\n        while ((child_idx <= last_idx)); do\n            if ((child_idx < last_idx)) && ((heap[child_idx] < heap[child_idx + 1])); then\n                child_idx=$((child_idx + 1))\n            fi\n            if ((heap[parent_idx] < heap[child_idx])); then\n                tmp=${heap[parent_idx]}\n                heap[parent_idx]=${heap[child_idx]}\n                heap[child_idx]=$tmp\n            fi\n            parent_idx=$child_idx\n            child_idx=$((child_idx * 2 + 1))\n        done\n    done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local -a result=()\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n\n    # build heap\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # extract max\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((2*j+1<${#heap[@]})); do\n            k=2*j+1\n            if ((2*j+2<${#heap[@]})); then\n                if ((heap[2*j+2]>heap[k])); then\n                    k=2*j+2\n                fi\n            fi\n            if ((heap[k]>heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    echo \"${result[@]}\"",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n    local last_parent=$((len/2-1))\n    for ((i=last_parent; i>=0; i--)); do\n        for ((j=i; j*2+1<len; j=2*j+1)); do\n            if ((j*2+2<len && arr[j*2+2]>arr[j*2+1])); then\n                ((arr[j*2+2]>arr[j])) && { tmp=arr[j]; arr[j]=arr[j*2+2]; arr[j*2+2]=tmp; }\n            else\n                ((arr[j*2+1]>arr[j])) && { tmp=arr[j]; arr[j]=arr[j*2+1]; arr[j*2+1]=tmp; }\n            fi\n        done\n    done\n    for ((i=0; i<n; i++)); do\n        echo ${arr[0]}\n        arr[0]=${arr[len-i-1]}\n        for ((j=0; j*2+1<len-i-1; j=2*j+1)); do\n            if ((j*2+2<len-i-1 && arr[j*2+2]>arr[j*2+1])); then\n                ((arr[j*2+2]>arr[j])) && { tmp=arr[j]; arr[j]=arr[j*2+2]; arr[j*2+2]=tmp; }\n            else\n                ((arr[j*2+1]>arr[j])) && { tmp=arr[j]; arr[j]=arr[j*2+1]; arr[j*2+1]=tmp; }\n            fi\n        done\n    done",
    "    if [ $# -lt 2 ]; then\n        echo \"Usage: $0 <list> <n>\"\n        return 1\n    fi\n\n    local list=$1\n    local n=$2\n\n    local -a heap\n    local -a heap_index\n    local -a heap_size\n    local -a heap_max_size\n\n    local -a array\n    local -a array_size\n\n    local i\n    local j\n    local k\n\n    # Initialize heap\n    heap_size=0\n    heap_max_size=$n\n    for ((i=0; i<heap_max_size; i++)); do\n        heap[i]=0\n        heap_index[i]=0\n    done\n\n    # Initialize array\n    array=($list)\n    array_size=${#array[@]}\n\n    # Build heap\n    for ((i=0; i<array_size; i++)); do\n        if [ $heap_size -lt $heap_max_size ]; then\n            heap_size=$((heap_size+1))\n            heap[$((heap_size-1))]=${array[i]}\n            heap_index[$((heap_size-1))]=$i\n            k=$((heap_size-1))\n            while [ $k -gt 0 ]; do\n                j=$(((k-1)/2))\n                if [ ${heap[k]} -gt ${heap[j]} ]; then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                    tmp=${heap_index[k]}\n                    heap_index[k]=${heap_index[j]}\n                    heap_index[j]=$tmp\n                    k=$j\n                else\n                    break\n                fi\n            done\n        else\n            if [ ${array[i]} -gt ${heap[0]} ]; then\n                heap[0]=${array[i]}\n                heap_index[0]=$i\n                k=0\n                while [ $k -lt $((heap_size/2)) ]; do\n                    j=$((2*k+1))\n                    if [ $j -lt $((he",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n\n    # Build a min-heap\n    for i in $list; do\n        heap_queue_insert heap \"$i\"\n    done\n\n    # Extract the top n elements\n    for ((i = 0; i < n; i++)); do\n        result[i]=\"$(heap_queue_extract heap)\"\n    done\n\n    # Reverse the result\n    for ((i = 0; i < n / 2; i++)); do\n        local tmp=\"${result[i]}\"\n        result[i]=\"${result[n - i - 1]}\"\n        result[n - i - 1]=\"$tmp\"\n    done\n\n    echo \"${result[*]}\"",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i len=0\n    local -i index=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i heap_size=0\n\n    arr=($1)\n    len=${#arr[@]}\n    heap_size=$len\n\n    # Build heap\n    for ((i=len/2-1; i>=0; i--)); do\n        index=$i\n        tmp=${arr[$index]}\n        while true; do\n            left=$((2*index+1))\n            right=$((2*index+2))\n            largest=$index\n            if ((left<heap_size && arr[left]>arr[largest])); then\n                largest=$left\n            fi\n            if ((right<heap_size && arr[right]>arr[largest])); then\n                largest=$right\n            fi\n            if ((largest==index)); then\n                break\n            fi\n            arr[index]=${arr[largest]}\n            arr[largest]=$tmp\n            index=$largest\n        done\n    done\n\n    # Extract max\n    for ((i=len-1; i>=len-n; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        heap_size=$((heap_size-1))\n        index=0\n        while true; do\n            left=$((2*index+1))\n            right=$((2*index+2))\n            largest=$index\n            if ((left<heap_size && arr[left]>arr[largest])); then\n                largest=$left\n            fi\n            if ((right<heap_size && arr[right]>arr[largest])); then\n                largest=$right\n            fi\n            if ((largest==index)); then\n                break\n            fi\n            tmp=${arr[index]}\n            arr[index]=${arr[largest]}\n            arr[largest]=$tmp\n           ",
    "    local -a nums=($1)\n    local n=$2\n    local -a result=()\n    local i\n    local j\n    local temp\n    local length=${#nums[@]}\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((2 * j + 1 < length)); do\n            if ((2 * j + 2 < length && nums[2 * j + 2] > nums[2 * j + 1])); then\n                ((temp = 2 * j + 2))\n            else\n                ((temp = 2 * j + 1))\n            fi\n            if ((nums[temp] > nums[j])); then\n                ((nums[temp], nums[j] = nums[j], nums[temp]))\n                ((j = temp))\n            else\n                break\n            fi\n        done\n    done\n\n    # Pop the largest element\n    for ((i = 0; i < n; i++)); do\n        result[i]=${nums[0]}\n        ((nums[0] = nums[length - 1]))\n        ((length--))\n        j=0\n        while ((2 * j + 1 < length)); do\n            if ((2 * j + 2 < length && nums[2 * j + 2] > nums[2 * j + 1])); then\n                ((temp = 2 * j + 2))\n            else\n                ((temp = 2 * j + 1))\n            fi\n            if ((nums[temp] > nums[j])); then\n                ((nums[temp], nums[j] = nums[j], nums[temp]))\n                ((j = temp))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${result[@]}",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a array\n  local i\n  local j\n  local temp\n  local size\n\n  # Convert list to array\n  array=($list)\n\n  # Build max heap\n  size=${#array[@]}\n  for ((i = size/2-1; i >= 0; i--)); do\n    j=$i\n    while ((2*j+1 < size)); do\n      k=$((2*j+1))\n      if ((k+1 < size && array[k] < array[k+1])) ; then\n        k=$((k+1))\n      fi\n      if ((array[j] < array[k])) ; then\n        temp=${array[j]}\n        array[j]=${array[k]}\n        array[k]=$temp\n        j=$k\n      else\n        break\n      fi\n    done\n  done\n\n  # Extract max n times\n  for ((i = 0; i < n; i++)); do\n    echo -n \"${array[0]} \"\n    array[0]=${array[size-1]}\n    ((size--))\n    j=0\n    while ((2*j+1 < size)); do\n      k=$((2*j+1))\n      if ((k+1 < size && array[k] < array[k+1])) ; then\n        k=$((k+1))\n      fi\n      if ((array[j] < array[k])) ; then\n        temp=${array[j]}\n        array[j]=${array[k]}\n        array[k]=$temp\n        j=$k\n      else\n        break\n      fi\n    done\n  done\n  echo",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i t\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j+1<n && heap[j]<heap[j+1])); then\n                j+=1\n            fi\n            if ((heap[k]<heap[j])); then\n                t=heap[k]\n                heap[k]=heap[j]\n                heap[j]=t\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n; i<${#arr[@]}; i++)); do\n        if ((arr[i]>heap[0])); then\n            heap[0]=${arr[i]}\n            k=0\n            while ((2*k+1<n)); do\n                j=2*k+1\n                if ((j+1<n && heap[j]<heap[j+1])); then\n                    j+=1\n                fi\n                if ((heap[k]<heap[j])); then\n                    t=heap[k]\n                    heap[k]=heap[j]\n                    heap[j]=t\n                    k=j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        t=heap[i]\n        heap[i]=heap[0]\n        heap[0]=t\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j+1<i && heap[j]<heap[j+1])); then\n                j+=1\n            fi\n",
    "    local -a arr=(\"$@\")\n    local n=${arr[-1]}\n    unset arr[-1]\n\n    local -a heap\n    local -i i=0\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n    heap_build_max_heap heap\n\n    for ((i=n; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${arr[i]}\n            heap_max_heapify heap 0\n        fi\n    done\n\n    echo \"${heap[@]}\"",
    "    local list=$1\n    local n=$2\n    local -a heap=()\n    local -a result=()\n    local i\n    local j\n    local tmp\n\n    for i in $list; do\n        heap_queue_insert heap $i\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[$i]=$(heap_queue_extract heap)\n    done\n\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${result[$i]} -lt ${result[$j]} ]]; then\n                tmp=${result[$i]}\n                result[$i]=${result[$j]}\n                result[$j]=$tmp\n            fi\n        done\n    done\n\n    echo ${result[@]}",
    "    local -a array=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local size=${#array[@]}\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${array[i]}\n    done\n\n    for ((i=n; i<size; i++)); do\n        if [[ ${array[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${array[i]}\n            k=0\n            while true; do\n                j=$((2*k+1))\n                if [[ $j -ge $n ]]; then\n                    break\n                fi\n                if [[ $j -eq $((n-1)) ]]; then\n                    if [[ ${heap[j]} -gt ${heap[k]} ]]; then\n                        tmp=${heap[k]}\n                        heap[k]=${heap[j]}\n                        heap[j]=$tmp\n                    fi\n                    break\n                fi\n                if [[ ${heap[j]} -gt ${heap[k]} ]]; then\n                    if [[ ${heap[j]} -gt ${heap[j+1]} ]]; then\n                        tmp=${heap[k]}\n                        heap[k]=${heap[j]}\n                        heap[j]=$tmp\n                        k=$j\n                    else\n                        tmp=${heap[k]}\n                        heap[k]=${heap[j+1]}\n                        heap[j+1]=$tmp\n                        k=$((j+1))\n                    fi\n                else\n                    if [[ ${heap[j+1]} -gt ${heap[k]} ]]; then\n                        tmp=${heap[k]}\n                        heap[k]=${heap[j+1]}\n                        heap[j+1]=$tmp\n                        k=$((j+1))\n                    else\n                        break\n                    fi\n                fi\n            done\n        fi\n    done\n\n    echo ${heap[@]}",
    "  local -a list=($1)\n  local n=$2\n  local -a heap=()\n  local i\n  local j\n  local k\n  local tmp\n  local size=${#list[@]}\n\n  # build a heap of the first n elements\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n    k=$i\n    while ((k > 0)); do\n      j=$(((k-1)/2))\n      if ((heap[k] > heap[j])); then\n        tmp=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$tmp\n      fi\n      k=$j\n    done\n  done\n\n  # add the remaining elements to the heap\n  for ((i=n; i<size; i++)); do\n    if ((list[i] > heap[0])); then\n      heap[0]=${list[i]}\n      k=0\n      while ((k < n)); do\n        j=$((2*k+1))\n        if ((j >= n)); then\n          break\n        fi\n        if ((j+1 < n && heap[j+1] > heap[j])); then\n          j=$((j+1))\n        fi\n        if ((heap[k] < heap[j])); then\n          tmp=${heap[k]}\n          heap[k]=${heap[j]}\n          heap[j]=$tmp\n        fi\n        k=$j\n      done\n    fi\n  done\n\n  # sort the heap\n  for ((i=n-1; i>0; i--)); do\n    tmp=${heap[0]}\n    heap[0]=${heap[i]}\n    heap[i]=$tmp\n    k=0\n    while ((k < i)); do\n      j=$((2*k+1))\n      if ((j >= i)); then\n        break\n      fi\n      if ((j+1 < i && heap[j+1] > heap[j])); then\n        j=$((j+1))\n      fi\n      if ((heap[k] < heap[j])); then\n       ",
    "    local -a heap\n    local -i i j k n\n    local -r n=$2\n    local -r arr=($1)\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j+1<n && heap[j+1]>heap[j])); then\n                j+=1\n            fi\n            if ((heap[j]>heap[k])); then\n                ((heap[j], heap[k] = heap[k], heap[j]))\n            fi\n            k=j\n        done\n    done\n\n    for ((i=n; i<${#arr[@]}; i++)); do\n        if ((arr[i]>heap[0])); then\n            heap[0]=${arr[i]}\n            k=0\n            while ((2*k+1<n)); do\n                j=2*k+1\n                if ((j+1<n && heap[j+1]>heap[j])); then\n                    j+=1\n                fi\n                if ((heap[j]>heap[k])); then\n                    ((heap[j], heap[k] = heap[k], heap[j]))\n                fi\n                k=j\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        ((heap[0], heap[i] = heap[i], heap[0]))\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j+1<i && heap[j+1]>heap[j])); then\n                j+=1\n            fi\n            if ((heap[j]>heap[k])); then\n                ((heap[j], heap[k] = heap[k], heap[j]))\n            fi\n            k=j\n        done\n    done",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=$(echo \"$list\" | wc -w)\n    local -i parent=0\n    local -i child=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_index_parent=0\n    local -i temp_index_child=0\n    local -i temp_index_child_left=0\n    local -i temp_index_child_right=0\n    local -i temp_index_child_max=0\n    local -i temp_index_child_max_value=0\n    local -i temp_index_child_max_value_left=0\n    local -i temp_index_child_max_value_right=0\n    local -i temp_index_child_max_value_max=0\n    local -i temp_index_child_max_value_max_left=0\n    local -i temp_index_child_max_value_max_right=0\n    local -i temp_index_child_max_value_max_max=0\n    local -i temp_index_child_max_value_max_max_left=0\n    local -i temp_index_child_max_value_max_max_right=0\n    local -i temp_index_child_max_value_max_max_max=0\n    local -i temp_index_child_max_value_max_max_max_left=0\n    local -i temp_index_child_max_value_max_max_max_right=0\n    local -i temp_index_child_max_value_max_max_max_max=0\n    local -i temp_index_child_max_value_max_max_max_max_left=0\n    local -i temp_index_child_max_value_max_max_max_max_right=0\n    local",
    "    local -a arr=()\n    local -a heap=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i t=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\n    # Convert the space-separated list into an array\n    arr=($1)\n\n    # Build a heap queue from the array\n    for ((i=0; i<${#arr[@]}; i++)); do\n        heap[i]=${arr[i]}\n        j=i\n        while ((j>0)); do\n            k=$((j-1))\n            l=$((k/2))\n            if ((heap[j]>heap[l])); then\n                t=${heap[j]}\n                heap[j]=${heap[l]}\n                heap[l]=$t\n            fi\n            j=$l\n        done\n    done\n\n    # Extract the n largest integers from the heap queue\n    for ((i=0; i<n; i++)); do\n        arr[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        heap=(${heap[@]:0:${#heap[@]}-1})\n        j=0\n        while ((j<${#heap[@]})); do\n            k=$((j*2+1))\n            l=$((j*2+2))\n            m=$j\n            if ((k<${#heap[@]})); then\n                if ((heap[k]>heap[m])); then\n                    m=$k\n                fi\n            fi\n            if ((l<${#heap[@]})); then\n                if ((heap[l]>heap[m])); then\n                    m=$l\n                fi\n            fi\n            if ((m!=j)); then\n                x=${heap[j]}\n                y=${heap[m]}\n                heap[j]=$y\n                heap[m]=$x",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -a result\n    local i\n\n    for i in $list; do\n        heap_queue_insert heap $i\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[$i]=$(heap_queue_extract heap)\n    done\n\n    echo ${result[*]}",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local tmp=0\n    local len=${#list[@]}\n    local parent=0\n    local child=0\n    local result=()\n\n    # build heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            parent=$(((j-1)/2))\n            if ((heap[j]>heap[parent])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[parent]}\n                heap[parent]=$tmp\n            fi\n            j=$parent\n        done\n    done\n\n    # extract n largest\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[len-1]}\n        heap[len-1]=0\n        len=$((len-1))\n        j=0\n        while ((j<len)); do\n            k=$((2*j+1))\n            l=$((2*j+2))\n            m=$j\n            if ((k<len && heap[k]>heap[m])); then\n                m=$k\n            fi\n            if ((l<len && heap[l]>heap[m])); then\n                m=$l\n            fi\n            if ((m!=j)); then\n                tmp=${heap[j]}\n                heap[j]=${heap[m]}\n                heap[m]=$tmp\n                j=$m\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${result[@]}",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i\n    for ((i=0; i<${#list[@]}; i++)); do\n        if ((i < n)); then\n            heap_push heap \"${list[i]}\"\n        elif ((list[i] > heap[0])); then\n            heap_pop heap\n            heap_push heap \"${list[i]}\"\n        fi\n    done\n    heap_print heap",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a arr=()\n  local -a heap=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i nn=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n ",
    "    local -a array=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local temp=0\n    local len=${#array[@]}\n    local -a heap_queue=()\n\n    for ((i=0; i<n; i++)); do\n        heap_queue[i]=${array[i]}\n    done\n\n    for ((i=n/2; i>=0; i--)); do\n        heap_queue_heapify ${heap_queue[@]} $i $n\n    done\n\n    for ((i=n; i<len; i++)); do\n        if [[ ${array[i]} -gt ${heap_queue[0]} ]]; then\n            heap_queue[0]=${array[i]}\n            heap_queue_heapify ${heap_queue[@]} 0 $n\n        fi\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        temp=${heap_queue[i]}\n        heap_queue[i]=${heap_queue[0]}\n        heap_queue[0]=$temp\n        heap_queue_heapify ${heap_queue[@]} 0 $i\n    done\n\n    echo ${heap_queue[@]}",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap=()\n  local -a result=()\n\n  # Build a max-heap\n  for i in $list; do\n    heap_queue_push heap \"$i\"\n  done\n\n  # Extract the largest n elements\n  for ((i=0; i<n; i++)); do\n    result[$i]=$(heap_queue_pop heap)\n  done\n\n  # Print the result in reverse order\n  for ((i=n-1; i>=0; i--)); do\n    echo \"${result[$i]}\"\n  done",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local array=($list)\n  local heap=()\n  local heap_size=0\n\n  # Build a min-heap of size n.\n  for ((i = 0; i < ${#array[@]}; i++)); do\n    if ((heap_size < n)); then\n      # Insert into heap.\n      heap[heap_size]=\"${array[i]}\"\n      ((heap_size++))\n      # Sift up.\n      local j=$((heap_size - 1))\n      while ((j > 0)); do\n        local parent=$(((j - 1) / 2))\n        if ((heap[j] < heap[parent])); then\n          local tmp=${heap[j]}\n          heap[j]=${heap[parent]}\n          heap[parent]=$tmp\n        fi\n        ((j = parent))\n      done\n    else\n      # Replace root with new element if it's larger.\n      if ((array[i] > heap[0])); then\n        heap[0]=\"${array[i]}\"\n        # Sift down.\n        local j=0\n        while ((j < heap_size)); do\n          local left=$((2 * j + 1))\n          local right=$((2 * j + 2))\n          local min_child=$left\n          if ((right < heap_size && heap[right] < heap[left])); then\n            min_child=$right\n          fi\n          if ((min_child < heap_size && heap[j] > heap[min_child])); then\n            local tmp=${heap[j]}\n            heap[j]=${heap[min_child]}\n            heap[min_child]=$tmp\n            ((j = min_child))\n          else\n            break\n          fi\n        done\n      fi\n    fi\n  done\n\n  # Print heap in descending order.\n  while ((heap_size > 0)); do\n    echo -n \"${heap[0]} \"\n    heap[0]=${heap[heap_size - 1]}\n    ((heap_size--))\n    # Sift down.\n    local j=",
    "  local -a list=($1)\n  local n=$2\n  local -a heap\n  local -a result\n  local i\n  local j\n\n  for ((i = 0; i < ${#list[@]}; i++)); do\n    heap[i]=\"${list[i]}\"\n  done\n\n  for ((i = ${#heap[@]} - 1; i >= 0; i--)); do\n    for ((j = i; j < ${#heap[@]}; j++)); do\n      if [[ ${heap[j]} -gt ${heap[i]} ]]; then\n        local tmp=${heap[i]}\n        heap[i]=${heap[j]}\n        heap[j]=$tmp\n      fi\n    done\n  done\n\n  for ((i = 0; i < n; i++)); do\n    result[i]=${heap[i]}\n  done\n\n  echo ${result[@]}",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local i=0\n\n    for i in \"${list[@]}\"; do\n        if [[ ${#heap[@]} -lt $n ]]; then\n            heap_push heap \"$i\"\n        elif [[ $i -gt ${heap[0]} ]]; then\n            heap_pop heap\n            heap_push heap \"$i\"\n        fi\n    done\n\n    heap_sort heap\n    echo \"${heap[@]}\"",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_heap\n    local -i tmp\n    local -i n_arr=${#arr[@]}\n\n    if [[ $n_arr -lt $n ]]; then\n        echo \"Error: n is larger than the size of the array.\" >&2\n        return 1\n    fi\n\n    # Initialize the heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n    n_heap=$n\n\n    # Build the heap\n    for ((i=$n_heap/2-1; i>=0; i--)); do\n        k=$i\n        while [[ $k -lt $n_heap ]]; do\n            j=2*k+1\n            if [[ $j -lt $n_heap ]]; then\n                if [[ ${heap[j]} -lt ${heap[j+1]} ]]; then\n                    j=$j+1\n                fi\n            fi\n            if [[ $j -ge $n_heap ]]; then\n                break\n            fi\n            if [[ ${heap[k]} -lt ${heap[j]} ]]; then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            k=$j\n        done\n    done\n\n    # Insert the remaining elements into the heap\n    for ((i=n; i<n_arr; i++)); do\n        if [[ ${arr[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${arr[i]}\n            k=0\n            while [[ $k -lt $n_heap ]]; do\n                j=2*k+1\n                if [[ $j -lt $n_heap ]]; then\n                    if [[ ${heap[j]} -lt ${heap[j+1]} ]]; then\n                        j=$j+1\n                    fi\n                fi\n                if [[",
    "    local -a heap\n    local -i heap_size=0\n    local -i i\n    local -i n=$2\n    local -i tmp\n    local -i x\n    local -i y\n\n    for i in $1; do\n        heap[heap_size++]=$i\n        x=$heap_size-1\n        while (( x > 0 )); do\n            y=$(( (x-1)/2 ))\n            if (( heap[x] > heap[y] )); then\n                tmp=${heap[x]}\n                heap[x]=${heap[y]}\n                heap[y]=$tmp\n            fi\n            x=$y\n        done\n    done\n\n    for (( i=0; i<n; i++ )); do\n        echo ${heap[0]}\n        heap[0]=${heap[--heap_size]}\n        x=0\n        while (( x < heap_size )); do\n            y=$(( 2*x+1 ))\n            if (( y >= heap_size )); then\n                break\n            fi\n            if (( y+1 < heap_size && heap[y+1] > heap[y] )); then\n                y=$(( y+1 ))\n            fi\n            if (( heap[x] < heap[y] )); then\n                tmp=${heap[x]}\n                heap[x]=${heap[y]}\n                heap[y]=$tmp\n            fi\n            x=$y\n        done\n    done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap=()\n  local -a result=()\n\n  for i in \"${list[@]}\"; do\n    heap_queue_insert heap \"$i\"\n  done\n\n  for ((i=0; i<n; i++)); do\n    result[$i]=$(heap_queue_pop heap)\n  done\n\n  echo \"${result[@]}\"",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local size=${#arr[@]}\n\n    # build max heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((2 * j + 1 < size)); do\n            if ((2 * j + 2 < size && arr[2 * j + 2] > arr[2 * j + 1])) ; then\n                tmp=${arr[j]}\n                arr[j]=${arr[2 * j + 2]}\n                arr[2 * j + 2]=$tmp\n                j=2 * j + 2\n            else\n                tmp=${arr[j]}\n                arr[j]=${arr[2 * j + 1]}\n                arr[2 * j + 1]=$tmp\n                j=2 * j + 1\n            fi\n        done\n    done\n\n    # extract max\n    for ((i = 0; i < n; i++)); do\n        echo ${arr[0]}\n        arr[0]=${arr[size - i - 1]}\n        j=0\n        while ((2 * j + 1 < size - i - 1)); do\n            if ((2 * j + 2 < size - i - 1 && arr[2 * j + 2] > arr[2 * j + 1])) ; then\n                tmp=${arr[j]}\n                arr[j]=${arr[2 * j + 2]}\n                arr[2 * j + 2]=$tmp\n                j=2 * j + 2\n            else\n                tmp=${arr[j]}\n                arr[j]=${arr[2 * j + 1]}\n                arr[2 * j + 1]=$tmp\n                j=2 * j + 1\n            fi\n        done\n    done",
    "  local list=$1\n  local n=$2\n  local -a heap\n  local -a result\n  local i\n  local j\n  local k\n  local tmp\n\n  # initialize the heap\n  for i in $list; do\n    heap[${#heap[@]}]=$i\n  done\n\n  # heapify\n  for ((i=${#heap[@]}/2-1; i>=0; i--)); do\n    j=$i\n    while ((2*j+1 < ${#heap[@]})); do\n      k=2*j+1\n      if ((k+1 < ${#heap[@]})); then\n        if ((heap[k+1] > heap[k])); then\n          k=$k+1\n        fi\n      fi\n      if ((heap[j] < heap[k])); then\n        tmp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$tmp\n        j=$k\n      else\n        break\n      fi\n    done\n  done\n\n  # extract the top n elements\n  for ((i=0; i<n; i++)); do\n    result[i]=${heap[0]}\n    heap[0]=${heap[${#heap[@]}-1]}\n    heap=(\"${heap[@]:0:${#heap[@]}-1}\")\n    j=0\n    while ((2*j+1 < ${#heap[@]})); do\n      k=2*j+1\n      if ((k+1 < ${#heap[@]})); then\n        if ((heap[k+1] > heap[k])); then\n          k=$k+1\n        fi\n      fi\n      if ((heap[j] < heap[k])); then\n        tmp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$tmp\n        j=$k\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${result[@]}",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n    local len\n\n    # Initialize the heap\n    for i in $list; do\n        heap[${#heap[@]}]=\"$i\"\n    done\n\n    # Heapify the heap\n    len=${#heap[@]}\n    for ((i = len / 2; i >= 0; i--)); do\n        for ((j = i; j < len;)); do\n            k=$((2 * j + 1))\n            if ((k >= len)); then\n                break\n            fi\n            if ((k + 1 < len && heap[k] < heap[k + 1])); then\n                k=$((k + 1))\n            fi\n            if ((heap[j] < heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i = 0; i < n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[len - 1]}\n        len=$((len - 1))\n        for ((j = 0; j < len;)); do\n            k=$((2 * j + 1))\n            if ((k >= len)); then\n                break\n            fi\n            if ((k + 1 < len && heap[k] < heap[k + 1])); then\n                k=$((k + 1))\n            fi\n            if ((heap[j] < heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the result\n    for ((i = 0; i < n; i++)); do\n        echo -n \"${result[i]} \"\n    done\n    echo",
    "  local list=($1)\n  local n=$2\n  local i\n  local j\n  local tmp\n  local len=${#list[@]}\n\n  # build heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    for ((j = i; j * 2 + 1 < len; j = j * 2 + 1)); do\n      if [[ ${list[j * 2 + 1]} -gt ${list[j]} ]]; then\n        tmp=${list[j]}\n        list[j]=${list[j * 2 + 1]}\n        list[j * 2 + 1]=$tmp\n      fi\n      if [[ ${list[j * 2 + 2]} -gt ${list[j]} ]]; then\n        tmp=${list[j]}\n        list[j]=${list[j * 2 + 2]}\n        list[j * 2 + 2]=$tmp\n      fi\n    done\n  done\n\n  # get n largest\n  for ((i = 0; i < n; i++)); do\n    echo ${list[0]}\n    list[0]=${list[len - i - 1]}\n    for ((j = 0; j * 2 + 1 < len - i - 1; j = j * 2 + 1)); do\n      if [[ ${list[j * 2 + 1]} -gt ${list[j]} ]]; then\n        tmp=${list[j]}\n        list[j]=${list[j * 2 + 1]}\n        list[j * 2 + 1]=$tmp\n      fi\n      if [[ ${list[j * 2 + 2]} -gt ${list[j]} ]]; then\n        tmp=${list[j]}\n        list[j]=${list[j * 2 + 2]}\n        list[j * 2 + 2]=$tmp\n      fi\n    done\n  done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_heap\n    local -i n_list\n    local -i tmp\n    local -i tmp1\n    local -i tmp2\n    local -i tmp3\n    local -i tmp4\n    local -i tmp5\n    local -i tmp6\n    local -i tmp7\n    local -i tmp8\n    local -i tmp9\n    local -i tmp10\n    local -i tmp11\n    local -i tmp12\n    local -i tmp13\n    local -i tmp14\n    local -i tmp15\n    local -i tmp16\n    local -i tmp17\n    local -i tmp18\n    local -i tmp19\n    local -i tmp20\n    local -i tmp21\n    local -i tmp22\n    local -i tmp23\n    local -i tmp24\n    local -i tmp25\n    local -i tmp26\n    local -i tmp27\n    local -i tmp28\n    local -i tmp29\n    local -i tmp30\n    local -i tmp31\n    local -i tmp32\n    local -i tmp33\n    local -i tmp34\n    local -i tmp35\n    local -i tmp36\n    local -i tmp37\n    local -i tmp38\n    local -i tmp39\n    local -i tmp40\n    local -i tmp41\n    local -i tmp42\n    local -i tmp43\n    local -i tmp44\n    local -i tmp45\n    local -i tmp46\n    local -i tmp47\n    local -i tmp48\n    local -i tmp49\n    local -i tmp50\n    local -i tmp51\n    local -i tmp52\n    local -i tmp53\n    local -i tmp54\n    local -i tmp55\n    local -i tmp56\n    local -i tmp57\n    local -i tmp58\n    local -i tmp59\n    local -i tmp60\n    local -i tmp61\n    local -i tmp62\n    local",
    "    local list=$1\n    local n=$2\n    local -a array=($list)\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_heap\n    local -i n_array\n    local -i temp\n    local -i result\n    local -i result_i\n\n    n_array=${#array[@]}\n    n_heap=$n\n    if [[ $n_heap -gt $n_array ]]; then\n        n_heap=$n_array\n    fi\n\n    for ((i=0; i<n_heap; i++)); do\n        heap[i]=${array[i]}\n    done\n\n    for ((i=n_heap/2-1; i>=0; i--)); do\n        j=$i\n        while ((j<n_heap)); do\n            k=$j\n            l=$k*2+1\n            if ((l<n_heap && heap[l]>heap[k])); then\n                k=$l\n            fi\n            m=$k*2+2\n            if ((m<n_heap && heap[m]>heap[k])); then\n                k=$m\n            fi\n            if ((k==j)); then\n                break\n            fi\n            temp=${heap[j]}\n            heap[j]=${heap[k]}\n            heap[k]=$temp\n            j=$k\n        done\n    done\n\n    for ((i=n_heap; i<n_array; i++)); do\n        if [[ ${array[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${array[i]}\n            j=0\n            while ((j<n_heap)); do\n                k=$j\n                l=$k*2+1\n                if ((l<n_heap && heap[l]>heap[k])); then\n                    k=$l\n                fi\n                m=$k*2+2\n                if ((m<n_heap && heap[m]>heap[k])); then\n                    k=$m",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <space-separated list> <integer>\"\n        return 1\n    fi\n\n    local list=\"$1\"\n    local n=\"$2\"\n\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=$(echo \"$list\" | wc -w)\n    local -i n_largest=0\n    local -i parent=0\n    local -i child=0\n    local -i temp=0\n    local -i temp2=0\n    local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n    local -i temp38=0\n    local -i temp39=0\n    local -i temp40",
    "  local -a heap\n  local -i i=0\n  local -i n=$2\n  local -i c=0\n  local -i p=0\n  local -i t=0\n  local -i s=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\n  for i in $1; do\n    heap[c++]=$i\n    p=$((c/2-1))\n    t=$c\n    while [ $p -ge 0 ] && [ ${heap[p]} -lt ${heap[t]} ]; do\n      x=${heap[p]}\n      heap[p]=${heap[t]}\n      heap[t]=$x\n      t=$p\n      p=$((p/2-1))\n    done\n  done\n\n  for (( i=0; i<n; i++ )); do\n    echo -n \"${heap[0]} \"\n    heap[0]=${heap[--c]}\n    p=0\n    while true; do\n      x=$((2*p+1))\n      y=$((2*p+2))\n      if [ $x -ge $c ]; then\n        break\n      elif [ $y -ge $c ]; then\n        z=$x\n      else\n        z=$((heap[x]>heap[y]?x:y))\n      fi\n      if [ ${heap[p]} -lt ${heap[z]} ]; then\n        s=${heap[p]}\n        heap[p]=${heap[z]}\n        heap[z]=$s\n        p=$z\n      else\n        break\n      fi\n    done\n  done\n  echo",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local temp\n    local temp2\n    local temp3\n\n    # Build a heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        j=$(( ${#heap[@]} - 1 ))\n        while [ $j -gt 0 ]; do\n            k=$(( (j - 1) / 2 ))\n            if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract the largest n elements\n    for (( i = 0; i < n; i++ )); do\n        result[$i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]} - 1]}\n        unset heap[${#heap[@]} - 1]\n        j=0\n        while true; do\n            k=$(( 2 * j + 1 ))\n            if [ $k -ge ${#heap[@]} ]; then\n                break\n            fi\n            if [ $(( k + 1 )) -lt ${#heap[@]} ] && [ ${heap[$(( k + 1 ))]} -gt ${heap[$k]} ]; then\n                k=$(( k + 1 ))\n            fi\n            if [ ${heap[$j]} -lt ${heap[$k]} ]; then\n                temp2=${heap[$j]}\n                temp3=${heap[$k]}\n                heap[$j]=$temp3\n                heap[$k]=$temp2\n            else\n                break\n            fi\n            j=$k\n        done\n    done\n\n    # Print the result\n    for (( i = ${#result[@]} - 1; i >= 0; i-- )); do\n        echo ${result[$i]}\n    done",
    "    local -a arr=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i tmp=0\n    local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_n=0\n    local -i max_len=0\n    local -i max_tmp=0\n    local -i max_arr=0\n    local -i max_arr_i=0\n    local -i max_arr_j=0\n    local -i max_arr_k=0\n    local -i max_arr_n=0\n    local -i max_arr_len=0\n    local -i max_arr_tmp=0\n    local -i max_arr_arr=0\n    local -i max_arr_arr_i=0\n    local -i max_arr_arr_j=0\n    local -i max_arr_arr_k=0\n    local -i max_arr_arr_n=0\n    local -i max_arr_arr_len=0\n    local -i max_arr_arr_tmp=0\n    local -i max_arr_arr_arr=0\n    local -i max_arr_arr_arr_i=0\n    local -i max_arr_arr_arr_j=0\n    local -i max_arr_arr_arr_k=0\n    local -i max_arr_arr_arr_n=0\n    local -i max_arr_arr_arr_len=0\n    local -i max_arr_arr_arr_tmp=0\n    local -i max_arr_arr_arr_arr=0\n    local -i max_arr_arr_arr_arr_i=0\n    local -i max_arr_arr_arr_arr_j=0\n    local -i max_arr_arr_arr_arr_k=0\n    local -i max_arr_arr_arr_arr_n=0\n    local -i max_arr_arr_arr",
    "  local -a heap\n  local i\n  local j\n  local k\n  local n\n  local -i heap_size\n  local -i heap_capacity\n  local -i n_largest\n  local -i n_largest_found\n  local -i n_largest_found_prev\n  local -i n_largest_found_prev_prev\n  local -i n_largest_found_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i n_largest_found_prev_prev_prev_prev_prev_prev_prev",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    heap_sort heap\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_sort heap\n        fi\n    done\n    echo ${heap[@]}",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_index=$((len - 1))\n    local -i last_parent_index=$(((len - 2) / 2))\n    local -i parent_index\n    local -i left_child_index\n    local -i right_child_index\n    local -i largest_child_index\n    local -i tmp\n\n    # Initialize the heap\n    for ((i = 0; i < len; i++)); do\n        heap[i]=${1[i]}\n    done\n\n    # Heapify\n    for ((i = last_parent_index; i >= 0; i--)); do\n        parent_index=$i\n        left_child_index=$((2 * parent_index + 1))\n        right_child_index=$((2 * parent_index + 2))\n        while true; do\n            if [[ $left_child_index -le $last_index ]]; then\n                largest_child_index=$left_child_index\n                if [[ $right_child_index -le $last_index ]] && [[ ${heap[right_child_index]} -gt ${heap[largest_child_index]} ]]; then\n                    largest_child_index=$right_child_index\n                fi\n                if [[ ${heap[parent_index]} -lt ${heap[largest_child_index]} ]]; then\n                    tmp=${heap[parent_index]}\n                    heap[parent_index]=${heap[largest_child_index]}\n                    heap[largest_child_index]=$tmp\n                    parent_index=$largest_child_index\n                    left_child_index=$((2 * parent_index + 1))\n                    right_child_index=$((2 * parent_index + 2))\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the n largest integers\n    for ((i = 0; i < n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[last_index - i]}\n        parent_index=0\n        left_child_",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n\n    n_list=$(echo \"$list\" | wc -w)\n    if [[ $n_list -lt $n ]]; then\n        echo \"Error: n is larger than the number of elements in the list\" >&2\n        return 1\n    fi\n\n    # Initialize heap\n    for i in $list; do\n        if [[ $n_heap -lt $n ]]; then\n            heap[$n_heap]=$i\n            ((n_heap++))\n        else\n            break\n        fi\n    done\n\n    # Heapify\n    for ((i = n_heap/2 - 1; i >= 0; i--)); do\n        tmp=$i\n        while [[ $tmp -lt $n_heap ]]; do\n            j=$tmp\n            k=$tmp\n            l=$((2 * tmp + 1))\n            m=$((2 * tmp + 2))\n            if [[ $l -lt $n_heap && ${heap[$l]} -gt ${heap[$j]} ]]; then\n                j=$l\n            fi\n            if [[ $m -lt $n_heap && ${heap[$m]} -gt ${heap[$j]} ]]; then\n                j=$m\n            fi\n            if [[ $j -eq $k ]]; then\n                break\n            fi\n            tmp2=${heap[$k]}\n            tmp3=${heap[$j]}\n            heap[$k]=$tmp3\n            heap[$j]=$tmp2\n            tmp=$j\n        done\n    done\n\n    # Insert remaining elements\n    for ((i = n_heap; i < n_list; i++)); do\n        tmp=${list[$i]}\n        if [["
  ]
}