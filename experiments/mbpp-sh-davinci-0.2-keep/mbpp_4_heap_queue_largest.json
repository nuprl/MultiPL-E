{
  "name": "mbpp_4_heap_queue_largest",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n#\n# $1 is a space-separated list\n# $2 is an integer\nheap_queue_largest() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    heap_queue_largest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"3\") = \"85 75 65\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"2\") = \"85 75\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"5\") = \"85 75 65 58 35\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n    local size=${#list[@]}\n\n    # build max heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        # heapify\n        j=$i\n        while ((2 * j + 1 < size)); do\n            # left child\n            k=2 * j + 1\n            # right child\n            if ((2 * j + 2 < size && list[k] < list[2 * j + 2])); then\n                k=2 * j + 2\n            fi\n            if ((list[j] < list[k])); then\n                # swap\n                temp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$temp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # extract max\n    for ((i = size - 1; i >= size - n; i--)); do\n        # swap\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        # heapify\n        j=0\n        while ((2 * j + 1 < i)); do\n            # left child\n            k=2 * j + 1\n            # right child\n            if ((2 * j + 2 < i && list[k] < list[2 * j + 2])); then\n                k=2 * j + 2\n            fi\n            if ((list[j] < list[k])); then\n                # swap\n                temp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$temp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]:size - n:n}",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local arr=()\n    local i=0\n    local len=0\n    local max=0\n    local max_index=0\n    local temp=0\n    local temp_index=0\n    local temp_index_left=0\n    local temp_index_right=0\n    local temp_index_max=0\n    local temp_index_max_left=0\n    local temp_index_max_right=0\n    local temp_index_max_left_right=0\n    local temp_index_max_right_left=0\n\n    # Convert string to array\n    IFS=' ' read -r -a arr <<< \"$list\"\n\n    # Get the length of the array\n    len=${#arr[@]}\n\n    # Initialize the heap\n    for ((i = 0; i < n; i++)); do\n        arr[$i]=$((arr[$i] * -1))\n    done\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        temp_index=$i\n        temp=${arr[$temp_index]}\n\n        while true; do\n            temp_index_left=$((2 * temp_index + 1))\n            temp_index_right=$((2 * temp_index + 2))\n\n            if [ $temp_index_left -lt $n ] && [ ${arr[$temp_index_left]} -lt $temp ]; then\n                temp_index_max=$temp_index_left\n            else\n                temp_index_max=$temp_index\n            fi\n\n            if [ $temp_index_right -lt $n ] && [ ${arr[$temp_index_right]} -lt ${arr[$temp_index_max]} ]; then\n                temp_index_max=$temp_index_right\n            fi\n\n            if [ $temp_index -ne $temp_index_max ]; then\n                temp_index_max_left=${arr[$temp_index_max]}\n                arr[$temp_index_max]=$temp\n                arr[$temp_index]=$temp_index_max_left\n                temp_index=$temp_",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_idx=$((len-1))\n    local -i last_parent_idx=$(((len-2)/2))\n    local -i parent_idx\n    local -i left_child_idx\n    local -i right_child_idx\n    local -i largest_child_idx\n    local -i tmp\n    local -i largest_idx\n\n    # Initialize the heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1[i]}\n    done\n\n    # Heapify\n    for ((i=last_parent_idx; i>=0; i--)); do\n        parent_idx=$i\n        left_child_idx=$((2*parent_idx+1))\n        right_child_idx=$((2*parent_idx+2))\n        largest_child_idx=$left_child_idx\n        if [[ $right_child_idx -le $last_idx ]]; then\n            if [[ ${heap[right_child_idx]} -gt ${heap[left_child_idx]} ]]; then\n                largest_child_idx=$right_child_idx\n            fi\n        fi\n        if [[ ${heap[largest_child_idx]} -gt ${heap[parent_idx]} ]]; then\n            tmp=${heap[largest_child_idx]}\n            heap[largest_child_idx]=${heap[parent_idx]}\n            heap[parent_idx]=$tmp\n        fi\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        largest_idx=$last_idx\n        echo ${heap[largest_idx]}\n        heap[largest_idx]=${heap[0]}\n        heap[0]=$((2**31-1))\n        last_idx=$((last_idx-1))\n        last_parent_idx=$(((last_idx-2)/",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local -a result=()\n    local i\n    local j\n    local tmp\n\n    # build a max heap\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j > 0)); do\n            if ((heap[j] > heap[(j-1)/2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[(j-1)/2]}\n                heap[(j-1)/2]=$tmp\n                j=(j-1)/2\n            else\n                break\n            fi\n        done\n    done\n\n    # extract the max n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        heap=(\"${heap[@]:0:${#heap[@]}-1}\")\n        j=0\n        while ((2*j+1 < ${#heap[@]})); do\n            if ((2*j+2 < ${#heap[@]})); then\n                if ((heap[j] < heap[2*j+1] || heap[j] < heap[2*j+2])); then\n                    if ((heap[2*j+1] > heap[2*j+2])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+1]}\n                        heap[2*j+1]=$tmp\n                        j=2*j+1\n                    else\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+2]}\n                        heap[2*j+2]=$tmp\n                        j=2*j+2\n                    fi\n                else\n                    break\n                fi\n            else\n                if ((heap[j] < heap[2*j+1])); then\n                    tmp=${heap[j]}\n                    heap[j]=${",
    "  local -a heap=($1)\n  local n=$2\n  local i=0\n  local j=0\n  local tmp=0\n  local heap_size=${#heap[@]}\n  local last_index=$((heap_size - 1))\n  local parent_index=0\n  local child_index=0\n\n  # Build max heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    j=$i\n    while true; do\n      parent_index=$j\n      child_index=$((2 * parent_index + 1))\n      if [[ $child_index -lt $heap_size ]]; then\n        if [[ $((child_index + 1)) -lt $heap_size ]]; then\n          if [[ ${heap[$child_index]} -lt ${heap[$((child_index + 1))]} ]]; then\n            child_index=$((child_index + 1))\n          fi\n        fi\n        if [[ ${heap[$parent_index]} -lt ${heap[$child_index]} ]]; then\n          tmp=${heap[$parent_index]}\n          heap[$parent_index]=${heap[$child_index]}\n          heap[$child_index]=$tmp\n          j=$child_index\n        else\n          break\n        fi\n      else\n        break\n      fi\n    done\n  done\n\n  # Extract max\n  for ((i = 0; i < n; i++)); do\n    echo ${heap[0]}\n    heap[0]=${heap[$last_index]}\n    heap[$last_index]=0\n    last_index=$((last_index - 1))\n    j=0\n    while true; do\n      parent_index=$j\n      child_index=$((2 * parent_index + 1))\n      if [[ $child_index -lt $last_index ]]; then\n        if [[ $((child_index + 1)) -lt $last_index ]]; then\n          if [[ ${heap[$child_index]} -lt ${heap[$((child_index + 1))]} ]]; then\n            child_index=$((child_index + 1",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -a result\n    local i\n    local j\n    local temp\n    local left\n    local right\n    local largest\n\n    # Build the heap\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while [ $j -gt 0 ]; do\n            left=$(( (j-1) / 2 ))\n            if [ ${heap[j]} -gt ${heap[left]} ]; then\n                temp=${heap[j]}\n                heap[j]=${heap[left]}\n                heap[left]=$temp\n            fi\n            j=$left\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while [ $j -lt ${#heap[@]} ]; do\n            left=$(( 2*j+1 ))\n            right=$(( 2*j+2 ))\n            largest=$j\n            if [ $left -lt ${#heap[@]} ] && [ ${heap[left]} -gt ${heap[largest]} ]; then\n                largest=$left\n            fi\n            if [ $right -lt ${#heap[@]} ] && [ ${heap[right]} -gt ${heap[largest]} ]; then\n                largest=$right\n            fi\n            if [ $largest -ne $j ]; then\n                temp=${heap[j]}\n                heap[j]=${heap[largest]}\n                heap[largest]=$temp\n                j=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${result[@]}",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -a result\n\n  # Build a heap queue\n  for item in $list; do\n    heap_queue_insert heap \"$item\"\n  done\n\n  # Extract the largest n items\n  for ((i=0; i<n; i++)); do\n    result[i]=$(heap_queue_extract heap)\n  done\n\n  # Print the result in descending order\n  for ((i=n-1; i>=0; i--)); do\n    echo ${result[i]}\n  done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i left\n    local -i right\n    local -i largest\n    local -i temp\n    local -i index\n    local -i parent\n\n    for i in $1; do\n        heap[size]=$i\n        index=$size\n        parent=$(( (size - 1) / 2 ))\n        while [ $index -gt 0 ] && [ ${heap[parent]} -lt ${heap[index]} ]; do\n            temp=${heap[parent]}\n            heap[parent]=${heap[index]}\n            heap[index]=$temp\n            index=$parent\n            parent=$(( (index - 1) / 2 ))\n        done\n        (( size++ ))\n    done\n\n    for (( i = 0; i < n; i++ )); do\n        echo ${heap[0]}\n        heap[0]=${heap[size-1]}\n        (( size-- ))\n        index=0\n        while true; do\n            left=$(( 2 * index + 1 ))\n            right=$(( 2 * index + 2 ))\n            largest=$index\n            if [ $left -lt $size ] && [ ${heap[left]} -gt ${heap[largest]} ]; then\n                largest=$left\n            fi\n            if [ $right -lt $size ] && [ ${heap[right]} -gt ${heap[largest]} ]; then\n                largest=$right\n            fi\n            if [ $largest -eq $index ]; then\n                break\n            fi\n            temp=${heap[largest]}\n            heap[largest]=${heap[index]}\n            heap[index]=$temp\n            index=$largest\n        done\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n    local len\n\n    # initialize the heap\n    for i in $list; do\n        heap[${#heap[@]}]=\"$i\"\n    done\n\n    # heapify\n    len=${#heap[@]}\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        k=\"$i\"\n        tmp=\"${heap[$k]}\"\n        while ((2 * k + 1 < len)); do\n            j=2 * k + 1\n            if ((j < len - 1)) && ((heap[j] < heap[j + 1])); then\n                j=$j + 1\n            fi\n            if ((tmp >= heap[j])); then\n                break\n            fi\n            heap[k]=\"${heap[j]}\"\n            k=\"$j\"\n        done\n        heap[k]=\"$tmp\"\n    done\n\n    # extract the n largest\n    for ((i = 0; i < n; i++)); do\n        result[$i]=\"${heap[0]}\"\n        heap[0]=\"${heap[len - i - 1]}\"\n        len=$len - 1\n        k=0\n        tmp=\"${heap[$k]}\"\n        while ((2 * k + 1 < len)); do\n            j=2 * k + 1\n            if ((j < len - 1)) && ((heap[j] < heap[j + 1])); then\n                j=$j + 1\n            fi\n            if ((tmp >= heap[j])); then\n                break\n            fi\n            heap[k]=\"${heap[j]}\"\n            k=\"$j\"\n        done\n        heap[k]=\"$tmp\"\n    done\n\n    # print the result\n    for ((i = n - 1; i >= 0; i--)); do\n        echo \"${result[$i]}\"\n    done",
    "    local -a heap\n    local -i i\n    local -i n=${2:-1}\n    local -i len=${#1}\n    local -i last=$((len-1))\n    local -i parent\n    local -i child\n    local -i tmp\n    local -i max_index\n    local -i max_value\n\n    # build the heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1[i]}\n        parent=$((i/2))\n        child=$i\n        while ((parent >= 0 && heap[parent] < heap[child])); do\n            tmp=${heap[parent]}\n            heap[parent]=${heap[child]}\n            heap[child]=$tmp\n            child=$parent\n            parent=$((child/2))\n        done\n    done\n\n    # extract the max\n    for ((i=0; i<n; i++)); do\n        max_index=$last\n        max_value=${heap[max_index]}\n        heap[max_index]=${heap[0]}\n        heap[0]=$max_value\n        parent=0\n        while ((1)); do\n            child=$((parent*2+1))\n            if ((child > last)); then\n                break\n            fi\n            if ((child < last && heap[child] < heap[child+1])); then\n                child=$((child+1))\n            fi\n            if ((heap[parent] < heap[child])); then\n                tmp=${heap[parent]}\n                heap[parent]=${heap[child]}\n                heap[child]=$tmp\n                parent=$child\n            else\n                break\n            fi\n        done\n        echo $max_value\n        ((last--))\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=$(echo \"$list\" | wc -w)\n    local -i n_largest=0\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_parent=0\n    local -i temp_left=0\n    local -i temp_right=0\n    local -i temp_n_heap=0\n    local -i temp_n_largest=0\n    local -i temp_n_list=0\n    local -i temp_parent_index=0\n    local -i temp_left_index=0\n    local -i temp_right_index=0\n    local -i temp_n_heap_index=0\n    local -i temp_n_largest_index=0\n    local -i temp_n_list_index=0\n    local -i temp_i=0\n    local -i temp_j=0\n    local -i temp_k=0\n    local -i temp_l=0\n    local -i temp_m=0\n    local -i temp_parent_index_index=0\n    local -i temp_left_index_index=0\n    local -i temp_right_index_index=0\n    local -i temp_n_heap_index_index=0\n    local -i temp_n_largest_index_index=0\n    local -i temp_n_list_index_index=0\n    local -i temp_i_index=0\n    local -i temp_j_index=0\n    local -i temp_k_index=0\n    local -i temp_l_index=0\n    local -i temp_m_index=0\n    local -i temp_parent_index_index_index=0\n    local -",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$((j-1))/2\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((2*j+1<${#heap[@]})); do\n            k=$((2*j+1))\n            if ((2*j+2<${#heap[@]})); then\n                if ((heap[2*j+2]>heap[k])); then\n                    k=$((2*j+2))\n                fi\n            fi\n            if ((heap[j]<heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i max_i\n    local -i max_val\n    local -i tmp\n    local -i tmp_i\n\n    # heapify\n    for ((i=0; i<n; i++)); do\n        heap[i]=${1%% *}\n        shift\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        max_i=$i\n        max_val=${heap[i]}\n        tmp_i=$((2*i+1))\n        if ((tmp_i < n && heap[tmp_i] > max_val)); then\n            max_i=$tmp_i\n            max_val=${heap[tmp_i]}\n        fi\n        tmp_i=$((2*i+2))\n        if ((tmp_i < n && heap[tmp_i] > max_val)); then\n            max_i=$tmp_i\n            max_val=${heap[tmp_i]}\n        fi\n        if ((max_i != i)); then\n            tmp=${heap[i]}\n            heap[i]=${heap[max_i]}\n            heap[max_i]=$tmp\n        fi\n    done\n\n    # pop\n    for ((i=n; i<$#; i++)); do\n        if (($1 > heap[0])); then\n            heap[0]=$1\n            max_i=0\n            max_val=${heap[0]}\n            tmp_i=1\n            if ((tmp_i < n && heap[tmp_i] > max_val)); then\n                max_i=$tmp_i\n                max_val=${heap[tmp_i]}\n            fi\n            tmp_i=2\n            if ((tmp_i < n && heap[tmp_i] > max_val)); then\n                max_i=$tmp_i\n                max_val=${heap[tmp_i]}\n            fi\n            if ((max_i != 0)); then\n                tmp=${heap[0]}\n                heap[0]=${heap[max_i]}\n                heap[max",
    "    local list=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local len=${#list[@]}\n\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        tmp=${list[$i]}\n        while ((2*k+1<len)); do\n            j=$((2*k+1))\n            if ((j<len-1)) && ((list[$j]<list[$((j+1))])); then\n                j=$((j+1))\n            fi\n            if ((tmp>=list[$j])); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$tmp\n    done\n\n    for ((i=0; i<n; i++)); do\n        tmp=${list[$len-1]}\n        list[$len-1]=${list[0]}\n        list[0]=$tmp\n        len=$((len-1))\n        k=0\n        while ((2*k+1<len)); do\n            j=$((2*k+1))\n            if ((j<len-1)) && ((list[$j]<list[$((j+1))])); then\n                j=$((j+1))\n            fi\n            if ((tmp>=list[$j])); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$tmp\n    done\n\n    echo ${list[@]}",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local temp\n\n    # Build a max heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        j=$(( ${#heap[@]} - 1 ))\n        while [ $j -gt 0 ]; do\n            k=$(( (j - 1) / 2 ))\n            if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract the largest n elements\n    for (( i = 0; i < n; i++ )); do\n        result[$i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]} - 1]}\n        heap=(\"${heap[@]:0:${#heap[@]} - 1}\")\n        j=0\n        while [ $j -lt ${#heap[@]} ]; do\n            k=$(( 2 * j + 1 ))\n            if [ $k -ge ${#heap[@]} ]; then\n                break\n            fi\n            if [ $(( k + 1 )) -lt ${#heap[@]} ] && [ ${heap[$(( k + 1 ))]} -gt ${heap[$k]} ]; then\n                k=$(( k + 1 ))\n            fi\n            if [ ${heap[$j]} -lt ${heap[$k]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Print the result in descending order\n    for (( i = ${#result[@]} - 1; i >= 0; i-- )); do\n        echo ${result[$i]}\n    done",
    "  local -a nums=($1)\n  local n=$2\n  local -i i\n  local -i j\n  local -i k\n  local -i tmp\n  local -i len=${#nums[@]}\n  local -i last_parent=$((len / 2 - 1))\n\n  # build heap\n  for ((i = last_parent; i >= 0; i--)); do\n    k=$i\n    while ((2 * k + 1 < len)); do\n      j=$((2 * k + 1))\n      if ((j + 1 < len && nums[j] < nums[j + 1])); then\n        j=$((j + 1))\n      fi\n      if ((nums[k] < nums[j])); then\n        tmp=${nums[k]}\n        nums[k]=${nums[j]}\n        nums[j]=$tmp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  # extract largest n numbers\n  for ((i = 0; i < n; i++)); do\n    tmp=${nums[0]}\n    nums[0]=${nums[len - 1]}\n    nums[len - 1]=$tmp\n    len=$((len - 1))\n    k=0\n    while ((2 * k + 1 < len)); do\n      j=$((2 * k + 1))\n      if ((j + 1 < len && nums[j] < nums[j + 1])); then\n        j=$((j + 1))\n      fi\n      if ((nums[k] < nums[j])); then\n        tmp=${nums[k]}\n        nums[k]=${nums[j]}\n        nums[j]=$tmp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  # print result\n  for ((i = 0; i < n; i++)); do\n    echo ${nums[len + i]}\n  done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i t=0\n\n  # Build the heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n    k=i\n    while ((k>0)); do\n      j=$(((k-1)/2))\n      if ((heap[k]>heap[j])); then\n        t=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$t\n      fi\n      k=$j\n    done\n  done\n\n  # Add the rest of the list\n  for ((i=n; i<${#list[@]}; i++)); do\n    if ((list[i]>heap[0])); then\n      heap[0]=${list[i]}\n      k=0\n      while ((k<n)); do\n        j=$((2*k+1))\n        if ((j>=n)); then\n          break\n        fi\n        if ((j+1<n && heap[j+1]>heap[j])); then\n          j=$((j+1))\n        fi\n        if ((heap[k]>heap[j])); then\n          break\n        fi\n        t=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$t\n        k=$j\n      done\n    fi\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    t=${heap[i]}\n    heap[i]=${heap[0]}\n    heap[0]=$t\n    k=0\n    while ((k<i)); do\n      j=$((2*k+1))\n      if ((j>=i)); then\n        break\n      fi\n      if ((j+1<i && heap[j+1]>heap[j])); then\n        j=$((j+1",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local i\n    for i in $list; do\n        heap_queue_insert heap $i\n    done\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap_queue_extract heap\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local tmp\n    local len\n\n    # build heap\n    heap=($list)\n    len=${#heap[@]}\n    for ((i = len/2-1; i >= 0; i--)); do\n        j=$i\n        while ((2*j+1 < len)); do\n            if ((2*j+2 < len)); then\n                if ((heap[2*j+1] > heap[2*j+2])); then\n                    tmp=${heap[2*j+1]}\n                    heap[2*j+1]=${heap[j]}\n                    heap[j]=$tmp\n                    j=2*j+1\n                else\n                    tmp=${heap[2*j+2]}\n                    heap[2*j+2]=${heap[j]}\n                    heap[j]=$tmp\n                    j=2*j+2\n                fi\n            else\n                tmp=${heap[2*j+1]}\n                heap[2*j+1]=${heap[j]}\n                heap[j]=$tmp\n                j=2*j+1\n            fi\n        done\n    done\n\n    # extract n largest\n    for ((i = 0; i < n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[len-1]}\n        len=$((len-1))\n        j=0\n        while ((2*j+1 < len)); do\n            if ((2*j+2 < len)); then\n                if ((heap[2*j+1] > heap[2*j+2])); then\n                    tmp=${heap[2*j+1]}\n                    heap[2*j+1]=${heap[j]}\n                    heap[j]=$tmp\n                    j=2*j+1\n                else\n                    tmp=${heap[2*j+2]}\n                    heap[2*j+2]=${heap[j]}\n                    heap[j]=$tmp\n                    j=2*j+2\n               ",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local size=${#list[@]}\n\n    for ((i=size/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1 < size)); do\n            if ((2*j+2 < size)); then\n                if ((list[2*j+1] < list[2*j+2])); then\n                    tmp=${list[2*j+2]}\n                    list[2*j+2]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+2\n                else\n                    tmp=${list[2*j+1]}\n                    list[2*j+1]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+1\n                fi\n            else\n                tmp=${list[2*j+1]}\n                list[2*j+1]=${list[j]}\n                list[j]=$tmp\n                j=2*j+1\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${list[0]}\n        list[0]=${list[size-1-i]}\n        j=0\n        while ((2*j+1 < size-1-i)); do\n            if ((2*j+2 < size-1-i)); then\n                if ((list[2*j+1] < list[2*j+2])); then\n                    tmp=${list[2*j+2]}\n                    list[2*j+2]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+2\n                else\n                    tmp=${list[2*j+1]}\n                    list[2*j+1]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+1\n                fi\n            else\n                tmp=${list[2*j+1]}\n                list[2*j+1]=${list[j]}\n                list[j]=$tmp\n                j=2*j+1\n           "
  ]
}