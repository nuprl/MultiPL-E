{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sums\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$((a[i] + b[j]))\")\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    local min=999999\n    local min_index=-1\n    for ((j=0; j<${#sums[@]}; j++)); do\n      if [[ ${sums[j]} -lt $min ]]; then\n        min=${sums[j]}\n        min_index=$j\n      fi\n    done\n    echo \"${pairs[min_index]}\"\n    sums[min_index]=999999\n  done",
    "  local -a a=(\"$@\")\n  local -a b=(\"${a[@]:2}\")\n  local -a c=(\"${a[@]:3}\")\n  local -a d=(\"${a[@]:4}\")\n  local -a e=(\"${a[@]:5}\")\n  local -a f=(\"${a[@]:6}\")\n  local -a g=(\"${a[@]:7}\")\n  local -a h=(\"${a[@]:8}\")\n  local -a i=(\"${a[@]:9}\")\n  local -a j=(\"${a[@]:10}\")\n  local -a k=(\"${a[@]:11}\")\n  local -a l=(\"${a[@]:12}\")\n  local -a m=(\"${a[@]:13}\")\n  local -a n=(\"${a[@]:14}\")\n  local -a o=(\"${a[@]:15}\")\n  local -a p=(\"${a[@]:16}\")\n  local -a q=(\"${a[@]:17}\")\n  local -a r=(\"${a[@]:18}\")\n  local -a s=(\"${a[@]:19}\")\n  local -a t=(\"${a[@]:20}\")\n  local -a u=(\"${a[@]:21}\")\n  local -a v=(\"${a[@]:22}\")\n  local -a w=(\"${a[@]:23}\")\n  local -a x=(\"${a[@]:24}\")\n  local -a y=(\"${a[@]:25}\")\n  local -a z=(\"${a[@]:26}\")\n  local -a aa=(\"${a[@]:27}\")\n  local -a bb=(\"${a[@]:28}\")\n  local -a cc=(\"${a[@]:29}\")\n  local -a dd=(\"${a[@]:30}\")\n  local -a ee=(\"${a[@]:31}\")\n  local -a ff=(\"${a[@]:32}\")\n ",
    "  local -a a1=($1)\n  local -a a2=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -i i=0\n  local -i j=0\n  local -i sum\n  local -i min_sum\n  local -i min_i\n  local -i min_j\n\n  while (( i < ${#a1[@]} && j < ${#a2[@]} && k > 0 )); do\n    min_sum=${a1[0]}+${a2[0]}\n    min_i=0\n    min_j=0\n    for (( i=0; i < ${#a1[@]}; i++ )); do\n      for (( j=0; j < ${#a2[@]}; j++ )); do\n        sum=${a1[i]}+${a2[j]}\n        if (( sum < min_sum )); then\n          min_sum=$sum\n          min_i=$i\n          min_j=$j\n        fi\n      done\n    done\n    pair=(${a1[min_i]} ${a2[min_j]})\n    pairs+=(${pair[@]})\n    unset a1[min_i]\n    unset a2[min_j]\n    a1=(${a1[@]})\n    a2=(${a2[@]})\n    (( k-- ))\n  done\n  echo ${pairs[@]}",
    "  local -a array1=($1)\n  local -a array2=($2)\n  local -a pairs\n  local -a result\n  local i j k\n\n  for ((i=0; i<${#array1[@]}; i++)); do\n    for ((j=0; j<${#array2[@]}; j++)); do\n      pairs+=(\"${array1[i]} ${array2[j]}\")\n    done\n  done\n\n  for ((i=0; i<$3; i++)); do\n    result+=(\"${pairs[i]}\")\n  done\n\n  echo \"${result[@]}\"",
    "  local -a arr1=($1)\n  local -a arr2=($2)\n  local -a pairs\n  local -a result\n  local k=$3\n  local i j\n  for ((i=0; i<${#arr1[@]}; i++)); do\n    for ((j=0; j<${#arr2[@]}; j++)); do\n      pairs+=(\"${arr1[i]} ${arr2[j]}\")\n    done\n  done\n  pairs=($(echo \"${pairs[*]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  for ((i=0; i<k; i++)); do\n    result+=(\"${pairs[i]}\")\n  done\n  echo \"${result[*]}\"",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sum=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[$i]} ${b[$j]}\")\n      sum+=(\"$((a[i]+b[j]))\")\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    local min=${sum[0]}\n    local min_index=0\n    for ((j=1; j<${#sum[@]}; j++)); do\n      if [[ ${sum[j]} -lt $min ]]; then\n        min=${sum[j]}\n        min_index=$j\n      fi\n    done\n    echo \"${pairs[$min_index]}\"\n    unset sum[$min_index]\n    unset pairs[$min_index]\n  done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i\n  local j\n  local sum\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n  local -i max_sum=$((a[n-1]+b[m-1]))\n  local -i min_sum=$((a[0]+b[0]))\n  local -i max_i=$((n-1))\n  local -i max_j=$((m-1))\n  local -i min_i=0\n  local -i min_j=0\n  local -i min_i_sum\n  local -i min_j_sum\n  local -i min_i_j_sum\n  local -i min_i_j_k_sum\n  local -i min_i_k_sum\n  local -i min_j_k_sum\n  local -i min_i_j_k_index\n  local -i min_i_k_index\n  local -i min_j_k_index\n  local -i min_i_j_index\n  local -i min_i_index\n  local -i min_j_index\n  local -i min_i_j_k_sum_index\n  local -i min_i_k_sum_index\n  local -i min_j_k_sum_index\n  local -i min_i_j_sum_index\n  local -i min_i_sum_index\n  local -i min_j_sum_index\n  local -i min_i_j_k_sum_index\n  local -i min_i_k_sum_index\n  local -i min_j_k_sum_index\n  local -i min_i_j_sum_index\n  local -i min_i_sum_index\n  local -i min_j_sum_index\n  local -i min_i_j_k_sum_index\n  local -i min_i_k_sum_index\n  local -i min_j_k_sum",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a pair\n    local i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            pair=(${a[i]} ${b[j]})\n            pairs+=(${pair[@]})\n        done\n    done\n    local -a sorted_pairs=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n))\n    local -a k_smallest_pairs\n    for ((i=0; i<k; i++)); do\n        k_smallest_pairs+=(${sorted_pairs[i]})\n    done\n    echo ${k_smallest_pairs[@]}",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -i i=0\n  local -i j=0\n  local -i m=${#a[@]}\n  local -i n=${#b[@]}\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n  local -i J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n  local -i O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local -i Y=0\n  local -i Z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c=()\n    local -i i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c+=(${a[i]} ${b[j]})\n        done\n    done\n    local -a d=()\n    for ((i=0; i<${#c[@]}; i+=2)); do\n        d+=(${c[i]} ${c[i+1]} $((${c[i]}+${c[i+1]})))\n    done\n    local -a e=()\n    for ((i=0; i<${#d[@]}; i+=3)); do\n        e+=(${d[i]} ${d[i+1]} ${d[i+2]})\n    done\n    local -a f=()\n    for ((i=0; i<${#e[@]}; i+=3)); do\n        f+=(${e[i]} ${e[i+1]} ${e[i+2]})\n    done\n    local -a g=()\n    for ((i=0; i<${#f[@]}; i+=3)); do\n        g+=(${f[i]} ${f[i+1]} ${f[i+2]})\n    done\n    local -a h=()\n    for ((i=0; i<${#g[@]}; i+=3)); do\n        h+=(${g[i]} ${g[i+1]} ${g[i+2]})\n    done\n    local -a j=()\n    for ((i=0; i<${#h[@]}; i+=3)); do\n        j+=(${h[i]} ${h[i+1]} ${h[i+2]})\n    done\n    local -a l=()\n    for ((i=0; i<${#j[@]}; i+=3)); do\n        l+=(${j[i]} ${j[i+1]} ${j[i",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a result=()\n  local i j\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      result+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n\n  echo \"${result[@]}\" | sort -n | head -n $k",
    "  local -a arr1=($1)\n  local -a arr2=($2)\n  local k=$3\n  local -a result\n  local -a tmp\n  local i j\n  local len1=${#arr1[@]}\n  local len2=${#arr2[@]}\n  local sum\n  local min_sum\n  local min_i\n  local min_j\n  local min_index\n\n  for ((i=0; i<len1; i++)); do\n    for ((j=0; j<len2; j++)); do\n      sum=$((arr1[i] + arr2[j]))\n      tmp+=($sum)\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    min_sum=${tmp[0]}\n    min_index=0\n    for ((j=1; j<${#tmp[@]}; j++)); do\n      if [[ ${tmp[j]} -lt $min_sum ]]; then\n        min_sum=${tmp[j]}\n        min_index=$j\n      fi\n    done\n    unset tmp[$min_index]\n    tmp=(${tmp[@]})\n    min_i=$((min_index / len2))\n    min_j=$((min_index % len2))\n    result+=(${arr1[min_i]} ${arr2[min_j]})\n  done\n\n  echo ${result[@]}",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a sums_sorted=()\n  local -a pairs_sorted=()\n  local -a pairs_sorted_k=()\n  local -a pairs_sorted_k_str=()\n  local i=0\n  local j=0\n  local k_index=0\n  local sum=0\n  local pair=0\n  local pair_str=0\n  local index=0\n  local index_str=0\n  local temp=0\n  local temp_str=0\n  local temp_index=0\n  local temp_index_str=0\n  local len_a=${#a[@]}\n  local len_b=${#b[@]}\n  local len_pairs=0\n  local len_pairs_sorted=0\n  local len_pairs_sorted_k=0\n  local len_indices=0\n  local len_indices_sorted=0\n  local len_sums=0\n  local len_sums_sorted=0\n  local len_pairs_sorted_k_str=0\n  local len_indices_sorted_str=0\n  local len_sums_sorted_str=0\n\n  for ((i=0; i<len_a; i++)); do\n    for ((j=0; j<len_b; j++)); do\n      sum=$((a[i]+b[j]))\n      pair=\"${a[i]},${b[j]}\"\n      pairs+=($pair)\n      sums+=($sum)\n      indices+=($i)\n    done\n  done\n\n  len_pairs=${#pairs[@]}\n  len_sums=${#sums[@]}\n  len_indices=${#indices[@]}\n\n  for ((i=0; i<len_pairs; i++)); do\n    for ((j=i+1; j",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local i j sum\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$sum\")\n      indices+=(\"$i $j\")\n    done\n  done\n\n  for ((i=0; i<${#sums[@]}; i++)); do\n    for ((j=i+1; j<${#sums[@]}; j++)); do\n      if [[ ${sums[i]} -gt ${sums[j]} ]]; then\n        sum=${sums[i]}\n        sums[i]=${sums[j]}\n        sums[j]=$sum\n\n        pair=${pairs[i]}\n        pairs[i]=${pairs[j]}\n        pairs[j]=$pair\n\n        index=${indices[i]}\n        indices[i]=${indices[j]}\n        indices[j]=$index\n      fi\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    echo \"${pairs[i]}\"\n  done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local i=0\n  local j=0\n  local sum=0\n  local index=0\n  local -a result=()\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((${a[$i]} + ${b[$j]}))\n      index=$(($i * ${#b[@]} + $j))\n      pairs[$index]=$sum\n      indices[$index]=$index\n    done\n  done\n\n  for ((i=0; i<${#pairs[@]}; i++)); do\n    for ((j=i+1; j<${#pairs[@]}; j++)); do\n      if [[ ${pairs[$i]} -gt ${pairs[$j]} ]]; then\n        temp=${pairs[$i]}\n        pairs[$i]=${pairs[$j]}\n        pairs[$j]=$temp\n        temp=${indices[$i]}\n        indices[$i]=${indices[$j]}\n        indices[$j]=$temp\n      fi\n    done\n  done\n\n  for ((i=0; i<$k; i++)); do\n    if [[ $i -lt ${#pairs[@]} ]]; then\n      result[$i]=${indices[$i]}\n    fi\n  done\n\n  echo ${result[@]}",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sums\n  local i j sum\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i]+b[j]))\n      pairs[$sum]=\"${a[i]} ${b[j]}\"\n      sums[$sum]=$sum\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    echo \"${pairs[${sums[$i]}]}\"\n  done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n  printf '%s\\n' \"${pairs[@]}\" | sort -n | head -n $k",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[$i]} ${b[$j]})\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '"
  ]
}