{
  "name": "mbpp_771_check_expression",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n#\n# $1 is a string\ncheck_expression() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    check_expression \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"{()}[{}]\") = \"true\" ]]\n    [[ $(candidate \"{()}[{]\") = \"false\" ]]\n    [[ $(candidate \"{()}[{}][]({})\") = \"true\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local expression=$1\n    local stack=()\n    local stack_index=0\n    local length=${#expression}\n    local i=0\n    local current_char\n    local top_char\n\n    while [ $i -lt $length ]; do\n        current_char=${expression:$i:1}\n        if [ \"$current_char\" == \"(\" ] || [ \"$current_char\" == \"[\" ] || [ \"$current_char\" == \"{\" ]; then\n            stack[$stack_index]=$current_char\n            stack_index=$((stack_index + 1))\n        elif [ \"$current_char\" == \")\" ] || [ \"$current_char\" == \"]\" ] || [ \"$current_char\" == \"}\" ]; then\n            if [ $stack_index -eq 0 ]; then\n                echo \"Unbalanced\"\n                return\n            fi\n            stack_index=$((stack_index - 1))\n            top_char=${stack[$stack_index]}\n            if [ \"$current_char\" == \")\" ] && [ \"$top_char\" != \"(\" ]; then\n                echo \"Unbalanced\"\n                return\n            elif [ \"$current_char\" == \"]\" ] && [ \"$top_char\" != \"[\" ]; then\n                echo \"Unbalanced\"\n                return\n            elif [ \"$current_char\" == \"}\" ] && [ \"$top_char\" != \"{\" ]; then\n                echo \"Unbalanced\"\n                return\n            fi\n        fi\n        i=$((i + 1))\n    done\n    if [ $stack_index -eq 0 ]; then\n        echo \"Balanced\"\n    else\n        echo \"Unbalanced\"\n    fi",
    "    local expression=\"$1\"\n    local stack=()\n    local top=0\n    local i=0\n    local length=${#expression}\n    local char\n    local open_bracket\n    local close_bracket\n    local balanced=true\n\n    while [ $i -lt $length ] && $balanced; do\n        char=${expression:$i:1}\n        case \"$char\" in\n            '('|'['|'{')\n                stack[$top]=$char\n                top=$((top + 1))\n                ;;\n            ')'|']'|'}')\n                if [ $top -eq 0 ]; then\n                    balanced=false\n                else\n                    top=$((top - 1))\n                    open_bracket=${stack[$top]}\n                    case \"$char\" in\n                        ')')\n                            close_bracket='('\n                            ;;\n                        ']')\n                            close_bracket='['\n                            ;;\n                        '}')\n                            close_bracket='{'\n                            ;;\n                    esac\n                    if [ \"$open_bracket\" != \"$close_bracket\" ]; then\n                        balanced=false\n                    fi\n                fi\n                ;;\n        esac\n        i=$((i + 1))\n    done\n\n    if [ $top -ne 0 ]; then\n        balanced=false\n    fi\n\n    echo $balanced",
    "    local expression=$1\n    local stack=()\n    local top=0\n    local i=0\n    local len=${#expression}\n    local char=''\n    local char_top=''\n    local flag=0\n\n    for ((i=0; i<len; i++)); do\n        char=${expression:$i:1}\n        if [[ \"$char\" == \"(\" || \"$char\" == \"[\" || \"$char\" == \"{\" ]]; then\n            stack[top++]=$char\n        elif [[ \"$char\" == \")\" || \"$char\" == \"]\" || \"$char\" == \"}\" ]]; then\n            if [[ $top -eq 0 ]]; then\n                flag=1\n                break\n            fi\n            char_top=${stack[--top]}\n            if [[ \"$char\" == \")\" && \"$char_top\" != \"(\" ]]; then\n                flag=1\n                break\n            elif [[ \"$char\" == \"]\" && \"$char_top\" != \"[\" ]]; then\n                flag=1\n                break\n            elif [[ \"$char\" == \"}\" && \"$char_top\" != \"{\" ]]; then\n                flag=1\n                break\n            fi\n        fi\n    done\n\n    if [[ $flag -eq 0 && $top -eq 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Not Balanced\"\n    fi",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local i\n    local char\n    local top_char\n    local is_balanced=true\n    local opening_brackets=( '(' '{' '[' )\n    local closing_brackets=( ')' '}' ']' )\n\n    for (( i=0; i<${#expression}; i++ )); do\n        char=\"${expression:$i:1}\"\n        if [[ \" ${opening_brackets[*]} \" == *\"$char\"* ]]; then\n            stack[stack_index++]=\"$char\"\n        elif [[ \" ${closing_brackets[*]} \" == *\"$char\"* ]]; then\n            if [[ $stack_index -eq 0 ]]; then\n                is_balanced=false\n                break\n            fi\n            top_char=\"${stack[stack_index-1]}\"\n            if [[ \"$top_char\" == \"${opening_brackets[$((${#opening_brackets[@]} - ${#closing_brackets[@]}))]}\" ]]; then\n                unset stack[stack_index-1]\n                stack_index=$((stack_index-1))\n            else\n                is_balanced=false\n                break\n            fi\n        fi\n    done\n\n    if [[ $stack_index -ne 0 ]]; then\n        is_balanced=false\n    fi\n\n    echo \"$is_balanced\"",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local char\n    local open_char\n    local close_char\n\n    for (( i=0; i<${#expression}; i++ )); do\n        char=\"${expression:$i:1}\"\n        if [[ \"$char\" == \"(\" || \"$char\" == \"[\" || \"$char\" == \"{\" ]]; then\n            stack[$stack_index]=\"$char\"\n            stack_index=$(( stack_index + 1 ))\n        elif [[ \"$char\" == \")\" || \"$char\" == \"]\" || \"$char\" == \"}\" ]]; then\n            if [[ $stack_index -eq 0 ]]; then\n                echo \"Unbalanced\"\n                return\n            fi\n            open_char=\"${stack[$(( stack_index - 1 ))]}\"\n            close_char=\"$char\"\n            if [[ \"$open_char\" == \"(\" && \"$close_char\" == \")\" ]] ||\n               [[ \"$open_char\" == \"[\" && \"$close_char\" == \"]\" ]] ||\n               [[ \"$open_char\" == \"{\" && \"$close_char\" == \"}\" ]]; then\n                stack_index=$(( stack_index - 1 ))\n            else\n                echo \"Unbalanced\"\n                return\n            fi\n        fi\n    done\n\n    if [[ $stack_index -eq 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Unbalanced\"\n    fi",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local i\n    local char\n    local top\n    local is_balanced=true\n\n    for ((i=0; i<${#expression}; i++)); do\n        char=\"${expression:$i:1}\"\n        if [[ \"$char\" == \"(\" || \"$char\" == \"{\" || \"$char\" == \"[\" ]]; then\n            stack[$stack_index]=\"$char\"\n            ((stack_index++))\n        elif [[ \"$char\" == \")\" || \"$char\" == \"}\" || \"$char\" == \"]\" ]]; then\n            top=\"${stack[$((stack_index-1))]}\"\n            if [[ \"$top\" == \"(\" && \"$char\" == \")\" ]] || [[ \"$top\" == \"{\" && \"$char\" == \"}\" ]] || [[ \"$top\" == \"[\" && \"$char\" == \"]\" ]]; then\n                unset stack[$((stack_index-1))]\n                ((stack_index--))\n            else\n                is_balanced=false\n                break\n            fi\n        fi\n    done\n\n    if [[ $stack_index -ne 0 ]]; then\n        is_balanced=false\n    fi\n\n    if [[ \"$is_balanced\" == true ]]; then\n        echo \"The expression is balanced.\"\n    else\n        echo \"The expression is not balanced.\"\n    fi",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n\n    for ((i=0; i<${#expression}; i++)); do\n        local char=\"${expression:$i:1}\"\n\n        if [[ \"$char\" == \"(\" || \"$char\" == \"{\" || \"$char\" == \"[\" ]]; then\n            stack[$stack_index]=\"$char\"\n            ((stack_index++))\n        elif [[ \"$char\" == \")\" || \"$char\" == \"}\" || \"$char\" == \"]\" ]]; then\n            if [[ \"$stack_index\" -eq 0 ]]; then\n                echo \"Unbalanced\"\n                return 1\n            fi\n\n            local last_char=\"${stack[$((stack_index - 1))]}\"\n            if [[ \"$char\" == \")\" && \"$last_char\" == \"(\" ||\n                  \"$char\" == \"}\" && \"$last_char\" == \"{\" ||\n                  \"$char\" == \"]\" && \"$last_char\" == \"[\" ]]; then\n                unset stack[$((stack_index - 1))]\n                ((stack_index--))\n            else\n                echo \"Unbalanced\"\n                return 1\n            fi\n        fi\n    done\n\n    if [[ \"$stack_index\" -eq 0 ]]; then\n        echo \"Balanced\"\n        return 0\n    else\n        echo \"Unbalanced\"\n        return 1\n    fi",
    "    local expression=$1\n    local stack=()\n    local top=0\n    local i=0\n    local len=${#expression}\n    local c\n    local is_balanced=0\n\n    while [ $i -lt $len ]; do\n        c=${expression:$i:1}\n        if [[ $c == '(' || $c == '{' || $c == '[' ]]; then\n            stack[$top]=$c\n            top=$((top+1))\n        elif [[ $c == ')' || $c == '}' || $c == ']' ]]; then\n            if [[ $top -eq 0 ]]; then\n                break\n            fi\n            top=$((top-1))\n            if [[ ${stack[$top]} == '(' && $c != ')' ]]; then\n                break\n            elif [[ ${stack[$top]} == '{' && $c != '}' ]]; then\n                break\n            elif [[ ${stack[$top]} == '[' && $c != ']' ]]; then\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [[ $top -eq 0 && $i -eq $len ]]; then\n        is_balanced=1\n    fi\n\n    echo $is_balanced",
    "    local expression=$1\n    local stack=()\n    local char\n    local top\n    local balanced=true\n\n    for ((i=0; i<${#expression}; i++)); do\n        char=${expression:$i:1}\n\n        if [[ \"$char\" == \"(\" || \"$char\" == \"[\" || \"$char\" == \"{\" ]]; then\n            stack+=(\"$char\")\n        elif [[ \"$char\" == \")\" || \"$char\" == \"]\" || \"$char\" == \"}\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                balanced=false\n                break\n            fi\n\n            top=${stack[-1]}\n            if [[ \"$char\" == \")\" && \"$top\" == \"(\" || \"$char\" == \"]\" && \"$top\" == \"[\" || \"$char\" == \"}\" && \"$top\" == \"{\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            else\n                balanced=false\n                break\n            fi\n        fi\n    done\n\n    if [[ ${#stack[@]} -ne 0 ]]; then\n        balanced=false\n    fi\n\n    echo \"$balanced\"",
    "    local stack=()\n    local top=0\n    local i=0\n    local len=${#1}\n    local c\n    local is_balanced=true\n\n    while [ $i -lt $len ]; do\n        c=${1:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n            stack[$top]=$c\n            top=$((top+1))\n        elif [ \"$c\" == \")\" ]; then\n            if [ $top -eq 0 ]; then\n                is_balanced=false\n                break\n            fi\n            top=$((top-1))\n        fi\n        i=$((i+1))\n    done\n\n    if [ $top -ne 0 ]; then\n        is_balanced=false\n    fi\n\n    echo $is_balanced",
    "  local expression=\"$1\"\n  local stack=()\n  local top=0\n  local i=0\n  local length=${#expression}\n  local char=''\n  local open_brackets=('(' '{' '[')\n  local close_brackets=(')' '}' ']')\n\n  while [[ $i -lt $length ]]; do\n    char=${expression:$i:1}\n    if [[ \" ${open_brackets[@]} \" =~ \" ${char} \" ]]; then\n      stack[$top]=$char\n      top=$((top + 1))\n    elif [[ \" ${close_brackets[@]} \" =~ \" ${char} \" ]]; then\n      if [[ $top -eq 0 ]]; then\n        echo \"Unbalanced\"\n        return\n      fi\n      top=$((top - 1))\n      if [[ ${open_brackets[$top]} != ${stack[$top]} ]]; then\n        echo \"Unbalanced\"\n        return\n      fi\n    fi\n    i=$((i + 1))\n  done\n\n  if [[ $top -eq 0 ]]; then\n    echo \"Balanced\"\n  else\n    echo \"Unbalanced\"\n  fi",
    "    local stack=()\n    local stack_top=0\n    local char\n    local i\n    local len=${#1}\n    local is_balanced=1\n    for ((i=0; i<len; i++)); do\n        char=${1:i:1}\n        if [[ \"$char\" == \"(\" || \"$char\" == \"[\" || \"$char\" == \"{\" ]]; then\n            stack[stack_top++]=$char\n        elif [[ \"$char\" == \")\" || \"$char\" == \"]\" || \"$char\" == \"}\" ]]; then\n            if [[ \"${stack[stack_top-1]}\" == \"(\" && \"$char\" == \")\" ]]; then\n                unset stack[stack_top-1]\n                stack_top=$((stack_top-1))\n            elif [[ \"${stack[stack_top-1]}\" == \"[\" && \"$char\" == \"]\" ]]; then\n                unset stack[stack_top-1]\n                stack_top=$((stack_top-1))\n            elif [[ \"${stack[stack_top-1]}\" == \"{\" && \"$char\" == \"}\" ]]; then\n                unset stack[stack_top-1]\n                stack_top=$((stack_top-1))\n            else\n                is_balanced=0\n                break\n            fi\n        fi\n    done\n    if [[ $is_balanced -eq 1 && $stack_top -eq 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Not Balanced\"\n    fi",
    "    local expression=$1\n    local stack=()\n    local stack_index=0\n    local char\n    local top_char\n    local balanced=true\n\n    for ((i=0; i<${#expression}; i++)); do\n        char=${expression:$i:1}\n        if [[ \"$char\" == \"(\" || \"$char\" == \"{\" || \"$char\" == \"[\" ]]; then\n            stack[$stack_index]=$char\n            ((stack_index++))\n        elif [[ \"$char\" == \")\" || \"$char\" == \"}\" || \"$char\" == \"]\" ]]; then\n            if [[ $stack_index -eq 0 ]]; then\n                balanced=false\n                break\n            fi\n            ((stack_index--))\n            top_char=${stack[$stack_index]}\n            if [[ \"$char\" == \")\" && \"$top_char\" != \"(\" ]]; then\n                balanced=false\n                break\n            elif [[ \"$char\" == \"}\" && \"$top_char\" != \"{\" ]]; then\n                balanced=false\n                break\n            elif [[ \"$char\" == \"]\" && \"$top_char\" != \"[\" ]]; then\n                balanced=false\n                break\n            fi\n        fi\n    done\n\n    if [[ $stack_index -ne 0 ]]; then\n        balanced=false\n    fi\n\n    echo $balanced",
    "    local expression=$1\n    local stack=()\n    local stack_index=0\n    local char\n    local top_char\n    local match\n    local balanced=true\n\n    for ((i=0; i<${#expression}; i++)); do\n        char=${expression:$i:1}\n        if [[ $char == \"(\" || $char == \"{\" || $char == \"[\" ]]; then\n            stack[$stack_index]=$char\n            stack_index=$((stack_index + 1))\n        elif [[ $char == \")\" || $char == \"}\" || $char == \"]\" ]]; then\n            top_char=${stack[$((stack_index - 1))]}\n            if [[ $char == \")\" && $top_char == \"(\" ]]; then\n                match=true\n            elif [[ $char == \"}\" && $top_char == \"{\" ]]; then\n                match=true\n            elif [[ $char == \"]\" && $top_char == \"[\" ]]; then\n                match=true\n            else\n                match=false\n            fi\n            if [[ $match == true ]]; then\n                stack_index=$((stack_index - 1))\n            else\n                balanced=false\n                break\n            fi\n        fi\n    done\n\n    if [[ $balanced == true && $stack_index -eq 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Not balanced\"\n    fi",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_size=0\n    local is_balanced=true\n\n    for (( i = 0; i < ${#expression}; i++ )); do\n        local char=\"${expression:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack[$stack_size]=\"$char\"\n            stack_size=$((stack_size + 1))\n        elif [[ \"$char\" == \")\" ]]; then\n            if [[ $stack_size -eq 0 ]]; then\n                is_balanced=false\n                break\n            fi\n            stack_size=$((stack_size - 1))\n        fi\n    done\n\n    if [[ $stack_size -ne 0 ]]; then\n        is_balanced=false\n    fi\n\n    echo \"$is_balanced\"",
    "  local expression=\"$1\"\n  local stack=()\n  local stack_top=0\n  local is_balanced=true\n  local char\n\n  for (( i=0; i<${#expression}; i++ )); do\n    char=\"${expression:$i:1}\"\n    if [[ \"$char\" == \"(\" || \"$char\" == \"{\" || \"$char\" == \"[\" ]]; then\n      stack[$stack_top]=\"$char\"\n      (( stack_top++ ))\n    elif [[ \"$char\" == \")\" || \"$char\" == \"}\" || \"$char\" == \"]\" ]]; then\n      if [[ \"${stack[$((stack_top-1))]}\" == \"(\" && \"$char\" == \")\" ]] ||\n         [[ \"${stack[$((stack_top-1))]}\" == \"{\" && \"$char\" == \"}\" ]] ||\n         [[ \"${stack[$((stack_top-1))]}\" == \"[\" && \"$char\" == \"]\" ]]; then\n        (( stack_top-- ))\n      else\n        is_balanced=false\n        break\n      fi\n    fi\n  done\n\n  if [[ $stack_top -ne 0 ]]; then\n    is_balanced=false\n  fi\n\n  echo \"$is_balanced\"",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_size=0\n    local i=0\n    local c=''\n    local top=''\n\n    for (( i=0; i<${#expression}; i++ )); do\n        c=\"${expression:$i:1}\"\n        if [[ \"$c\" == '(' || \"$c\" == '[' || \"$c\" == '{' ]]; then\n            stack[$stack_size]=\"$c\"\n            (( stack_size++ ))\n        elif [[ \"$c\" == ')' || \"$c\" == ']' || \"$c\" == '}' ]]; then\n            if [[ $stack_size -eq 0 ]]; then\n                echo \"Unbalanced expression\"\n                return 1\n            fi\n            top=\"${stack[$((stack_size-1))]}\"\n            if [[ \"$c\" == ')' && \"$top\" == '(' ]] || \\\n               [[ \"$c\" == ']' && \"$top\" == '[' ]] || \\\n               [[ \"$c\" == '}' && \"$top\" == '{' ]]; then\n                unset stack[$((stack_size-1))]\n                (( stack_size-- ))\n            else\n                echo \"Unbalanced expression\"\n                return 1\n            fi\n        fi\n    done\n\n    if [[ $stack_size -ne 0 ]]; then\n        echo \"Unbalanced expression\"\n        return 1\n    fi\n\n    echo \"Balanced expression\"\n    return 0",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local char\n    local char_index\n    local char_count=${#expression}\n    local top_of_stack\n    local balanced=true\n\n    for (( char_index=0; char_index<char_count; char_index++ )); do\n        char=\"${expression:$char_index:1}\"\n        case \"$char\" in\n            '(' | '[' | '{' )\n                stack[stack_index]=\"$char\"\n                (( stack_index++ ))\n                ;;\n            ')' | ']' | '}' )\n                if (( stack_index == 0 )); then\n                    balanced=false\n                    break\n                fi\n                top_of_stack=\"${stack[stack_index-1]}\"\n                case \"$char\" in\n                    ')' )\n                        if [[ \"$top_of_stack\" != '(' ]]; then\n                            balanced=false\n                            break\n                        fi\n                        ;;\n                    ']' )\n                        if [[ \"$top_of_stack\" != '[' ]]; then\n                            balanced=false\n                            break\n                        fi\n                        ;;\n                    '}' )\n                        if [[ \"$top_of_stack\" != '{' ]]; then\n                            balanced=false\n                            break\n                        fi\n                        ;;\n                esac\n                (( stack_index-- ))\n                ;;\n        esac\n    done\n\n    if (( stack_index > 0 )); then\n        balanced=false\n    fi\n\n    echo \"$balanced\"",
    "    local expression=$1\n    local stack=()\n    local stack_top=0\n    local balanced=true\n    local i=0\n    local len=${#expression}\n    local c\n\n    while [ $i -lt $len ]; do\n        c=${expression:$i:1}\n        case $c in\n            '(')\n                stack[$stack_top]=$c\n                stack_top=$((stack_top+1))\n                ;;\n            ')')\n                if [ $stack_top -eq 0 ]; then\n                    balanced=false\n                    break\n                fi\n                stack_top=$((stack_top-1))\n                ;;\n            *)\n                ;;\n        esac\n        i=$((i+1))\n    done\n\n    if [ $stack_top -ne 0 ]; then\n        balanced=false\n    fi\n\n    if $balanced; then\n        echo \"Balanced\"\n    else\n        echo \"Not Balanced\"\n    fi",
    "    local expression=$1\n    local stack=()\n    local top=0\n    local i=0\n    local len=${#expression}\n    local char=''\n    local opening_brackets='{[('\n    local closing_brackets='}])'\n    local opening_bracket=''\n    local closing_bracket=''\n\n    while [[ $i -lt $len ]]; do\n        char=${expression:$i:1}\n        if [[ $opening_brackets =~ $char ]]; then\n            stack[$top]=$char\n            top=$((top+1))\n        elif [[ $closing_brackets =~ $char ]]; then\n            if [[ $top -eq 0 ]]; then\n                echo \"Unbalanced\"\n                return\n            fi\n            top=$((top-1))\n            opening_bracket=${stack[$top]}\n            closing_bracket=$char\n            if [[ $opening_bracket == '{' && $closing_bracket != '}' ]]; then\n                echo \"Unbalanced\"\n                return\n            elif [[ $opening_bracket == '[' && $closing_bracket != ']' ]]; then\n                echo \"Unbalanced\"\n                return\n            elif [[ $opening_bracket == '(' && $closing_bracket != ')' ]]; then\n                echo \"Unbalanced\"\n                return\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [[ $top -eq 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Unbalanced\"\n    fi"
  ]
}