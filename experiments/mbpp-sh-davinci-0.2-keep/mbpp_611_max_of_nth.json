{
  "name": "mbpp_611_max_of_nth",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_of_nth() {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\ncandidate() {\n    max_of_nth \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7\\n1 3 5\\n8 9 19\" \"2\") = \"19\" ]]\n    [[ $(candidate \"6 7 8\\n2 4 6\\n9 10 20\" \"1\") = \"10\" ]]\n    [[ $(candidate \"7 8 9\\n3 5 7\\n10 11 21\" \"1\") = \"11\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$2\n    local max=0\n    local line\n    while read line; do\n        local num=$(echo \"$line\" | cut -d ' ' -f $n)\n        if (( num > max )); then\n            max=$num\n        fi\n    done\n    echo $max",
    "    local n=$2\n    local max=0\n    local line\n    for line in $1; do\n        local num=${line%% *}\n        for i in $(seq 2 $n); do\n            num=${line#* }\n            line=$num\n        done\n        if [ $num -gt $max ]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "    local -a matrix\n    local -i i j\n    local -i n=$2\n    local -i max\n    IFS=$'\\n' read -r -d '' -a matrix <<< \"$1\"\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        IFS=' ' read -r -a row <<< \"${matrix[$i]}\"\n        for ((j=0; j<${#row[@]}; j++)); do\n            if ((j == n)); then\n                if ((i == 0)); then\n                    max=${row[$j]}\n                else\n                    if ((max < ${row[$j]})); then\n                        max=${row[$j]}\n                    fi\n                fi\n            fi\n        done\n    done\n    echo \"$max\"",
    "  local matrix=\"$1\"\n  local n=\"$2\"\n  local max=0\n  local row\n  for row in $matrix; do\n    local col\n    for col in $row; do\n      if [[ $((n--)) -eq 0 ]]; then\n        if [[ $col -gt $max ]]; then\n          max=$col\n        fi\n        break\n      fi\n    done\n    n=$2\n  done\n  echo $max",
    "    # TODO: implement this function\n    echo \"Not implemented\"",
    "    local n=$2\n    local max=0\n    local line\n    while read line; do\n        local num=$(echo $line | cut -d' ' -f$n)\n        if [ $num -gt $max ]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "  local n=$2\n  local max=0\n  while read line; do\n    local value=$(echo $line | cut -d ' ' -f $n)\n    if (( value > max )); then\n      max=$value\n    fi\n  done <<< \"$1\"\n  echo $max",
    "  local matrix=$1\n  local n=$2\n\n  local max=0\n  local row\n  for row in $matrix; do\n    local num=$(echo $row | cut -d ' ' -f $n)\n    if [ $num -gt $max ]; then\n      max=$num\n    fi\n  done\n\n  echo $max",
    "  local -a matrix\n  local -i n=$2\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n\n  # Convert the input into an array of arrays\n  while read line; do\n    matrix[$i]=$line\n    ((i++))\n  done <<< \"$1\"\n\n  # Find the max of the n'th column\n  for ((i=0; i<${#matrix[@]}; i++)); do\n    for ((j=0; j<${#matrix[$i]}; j++)); do\n      if [[ $j -eq $n ]]; then\n        max_n=${matrix[$i]:$j:1}\n        if [[ $max_n -gt $max ]]; then\n          max=$max_n\n          max_i=$i\n          max_j=$j\n        fi\n      fi\n    done\n  done\n\n  echo \"$max_i $max_j $max\"",
    "  local -a matrix\n  local -i i j n\n  local -i max\n\n  # Read the matrix into an array\n  IFS=$'\\n' read -d '' -r -a matrix < <(printf '%s\\0' \"$1\")\n\n  # Get the column number\n  n=$2\n\n  # Get the number of rows\n  i=${#matrix[@]}\n\n  # Get the number of columns\n  j=${#matrix[0]// /$'\\n'}\n\n  # Check that the column number is valid\n  if (( n < 0 || n >= j )); then\n    echo \"Invalid column number\" >&2\n    return 1\n  fi\n\n  # Get the max of the n'th column\n  max=${matrix[0]%% *}\n  for (( i = 1; i < ${#matrix[@]}; i++ )); do\n    local -i num\n    num=${matrix[i]%% *}\n    for (( j = 1; j < n; j++ )); do\n      num=${matrix[i]#* }\n    done\n    num=${matrix[i]#* }\n    if (( num > max )); then\n      max=$num\n    fi\n  done\n\n  echo $max",
    "    local -a matrix\n    local -i n\n    local -i i\n    local -i j\n    local -i max\n    local -i max_i\n    local -i max_j\n\n    # Read the matrix\n    i=0\n    while read line; do\n        matrix[i++]=$line\n    done <<< \"$1\"\n\n    # Get the column number\n    n=$2\n\n    # Find the max\n    max=0\n    max_i=0\n    max_j=0\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        for ((j=0; j<${#matrix[i]}; j++)); do\n            if ((j == n)); then\n                if ((max < ${matrix[i]:j:1})); then\n                    max=${matrix[i]:j:1}\n                    max_i=$i\n                    max_j=$j\n                fi\n            fi\n        done\n    done\n\n    echo \"$max\"",
    "    local -a matrix\n    local -i n\n    local -i i\n    local -i j\n    local -i max\n    local -i max_i\n    local -i max_j\n\n    matrix=( $(echo \"$1\" | tr ' ' '\\n') )\n    n=$2\n\n    max=${matrix[0]}\n    max_i=0\n    max_j=0\n\n    for ((i = 0; i < ${#matrix[@]}; i++)); do\n        for ((j = 0; j < ${#matrix[@]}; j++)); do\n            if ((i % n == 0 && j % n == 0)); then\n                if ((matrix[i + j] > max)); then\n                    max=${matrix[i + j]}\n                    max_i=$i\n                    max_j=$j\n                fi\n            fi\n        done\n    done\n\n    echo \"$max_i $max_j\"",
    "    local n=$2\n    local max=0\n    local line\n    while read line; do\n        local num=$(echo $line | cut -d ' ' -f $n)\n        if (( num > max )); then\n            max=$num\n        fi\n    done\n    echo $max",
    "  local n=$2\n  local max=0\n  local line\n  while read line; do\n    local num=$(echo $line | cut -d' ' -f$n)\n    if (( num > max )); then\n      max=$num\n    fi\n  done\n  echo $max",
    "  local n=$2\n  local max=0\n  local line\n  while read line; do\n    local num=$(echo $line | cut -d' ' -f$n)\n    if (( num > max )); then\n      max=$num\n    fi\n  done\n  echo $max",
    "  local max=0\n  local n=$2\n  local line\n  while read line; do\n    local num=$(echo $line | awk \"{print \\$$n}\")\n    if [[ $num -gt $max ]]; then\n      max=$num\n    fi\n  done <<< \"$1\"\n  echo $max",
    "    local n=$2\n    local max=0\n    local line\n    while read line; do\n        local num=$(echo \"$line\" | cut -d ' ' -f $n)\n        if (( num > max )); then\n            max=$num\n        fi\n    done\n    echo $max",
    "  local -a matrix\n  local -i n=$2\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i row_len=0\n  local -i col_len=0\n  local -i max_col_len=0\n  local -i max_row_len=0\n  local -i max_col_len_i=0\n  local -i max_col_len_j=0\n  local -i max_row_len_i=0\n  local -i max_row_len_j=0\n  local -i max_col_len_i_j=0\n  local -i max_row_len_i_j=0\n  local -i max_col_len_i_j_n=0\n  local -i max_row_len_i_j_n=0\n  local -i max_col_len_i_j_n_1=0\n  local -i max_row_len_i_j_n_1=0\n  local -i max_col_len_i_j_n_1_2=0\n  local -i max_row_len_i_j_n_1_2=0\n  local -i max_col_len_i_j_n_1_2_3=0\n  local -i max_row_len_i_j_n_1_2_3=0\n  local -i max_col_len_i_j_n_1_2_3_4=0\n  local -i max_row_len_i_j_n_1_2_3_4=0\n  local -i max_col_len_i_j_n_1_2_3_4_5=0\n  local -i max_row_len_i_j_n_1_2_3_4_5=0\n  local -i max_col_len_i_j_n_1_2_3_4_5_6=0\n  local -i max_row_len_i_j_n",
    "    local -a matrix\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    while read -r line; do\n        matrix[i++]=$line\n    done <<< \"$1\"\n\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        local -a row=(${matrix[i]})\n        if ((row[n] > max)); then\n            max=${row[n]}\n        fi\n    done\n\n    echo $max",
    "    local matrix=\"$1\"\n    local n=\"$2\"\n    local max=0\n    local row\n    for row in $matrix; do\n        local value=$(echo $row | cut -d' ' -f$n)\n        if [ $value -gt $max ]; then\n            max=$value\n        fi\n    done\n    echo $max"
  ]
}