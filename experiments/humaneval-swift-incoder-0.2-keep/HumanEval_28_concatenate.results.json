{
  "language": "swift",
  "name": "HumanEval_28_concatenate",
  "results": [
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": -4,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result = s + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "Exception",
      "stderr": "tmps05t0uvj/tmps05t0uvj.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba629023c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba628d1ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba628d1a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba628d197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps05t0uvj                        0x00005582a64cf780 <unavailable> + 6016\n5    libc.so.6                          0x00002ba62920f460 __libc_start_main + 245\n6    tmps05t0uvj                        0x00005582a64cf249 <unavailable> + 4681\n",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result = result + s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": -4,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result = s + result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "Exception",
      "stderr": "tmps05t0uvj/tmps05t0uvj.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba629023c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba628d1ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba628d1a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba628d197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps05t0uvj                        0x00005582a64cf780 <unavailable> + 6016\n5    libc.so.6                          0x00002ba62920f460 __libc_start_main + 245\n6    tmps05t0uvj                        0x00005582a64cf249 <unavailable> + 4681\n",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result = result + s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result = result + s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result = result + s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result = result + s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for s in strings {\n        result += s\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013580
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\") { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    },
    {
      "exit_code": 0,
      "program": "\n/// Concatenate list of strings into a single string\n/// >>> concatenate([])\n/// ''\n/// >>> concatenate(['a', 'b', 'c'])\n/// 'abc'\nfunc concatenate(strings: [String]) -> String {\n    return strings.reduce(\"\", { $0 + $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(concatenate(strings: [] as [String]) == \"\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\"]) == \"xyz\")\nassert(concatenate(strings: [\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\")",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660013691
    }
  ]
}