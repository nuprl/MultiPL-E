language: rs
name: HumanEval_47_median
results:
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        panic!(\"median:\
    \ list is empty\");\n    }\n    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) as f64 / 2.0\n\
    \    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut copy_l = l.clone();\n    copy_l.sort();\n\
    \    let n = copy_l.len();\n    if n % 2 == 0 {\n        let val1 = *copy_l.get(n\
    \ / 2).unwrap() as f64;\n        let val2 = *copy_l.get(n / 2 - 1).unwrap() as\
    \ f64;\n        (val1 + val2) / 2.0\n    } else {\n        *copy_l.get(n / 2).unwrap()\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        median_even(l)\n\
    \    } else {\n        median_odd(l)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `median_even` in this scope\n --> /tmp/tmpe5fpig42.rs:8:9\n\
    \  |\n8 |         median_even(l)\n  |         ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `median_odd` in this scope\n  --> /tmp/tmpe5fpig42.rs:10:9\n\
    \   |\n10 |         median_odd(l)\n   |         ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Sort the vector to have elements in\
    \ ascending order.\n    let mut sorted = l.clone();\n    sorted.sort();\n\n  \
    \  // Get the index of the median.\n    let n = sorted.len();\n    let m = (n\
    \ - 1) / 2;\n\n    // When the length of the vector is odd, the median is the\
    \ middle element.\n    if n % 2 == 1 {\n        sorted[m] as f64\n    }\n    //\
    \ When the length of the vector is even, the median is the mean of the two\n \
    \   // elements in the middle.\n    else {\n        (sorted[m] + sorted[m + 1])\
    \ as f64 / 2.0\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let median = v.len() / 2;\n    if v.len() % 2 == 0 {\n        ((v[median\
    \ - 1] + v[median]) as f64) / 2.0\n    } else {\n        v[median] as f64\n  \
    \  }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted_l = l.clone();\n    sorted_l.sort();\n\
    \    let mut len = sorted_l.len();\n    if len % 2 == 0 {\n        return ((sorted_l[len\
    \ / 2] + sorted_l[len / 2 - 1]) as f64) / 2.0;\n    } else {\n        return sorted_l[len\
    \ / 2] as f64;\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let length = l.len();\n    if length ==\
    \ 0 {\n        return 0 as f64;\n    }\n    if length % 2 == 0 {\n        let\
    \ a = l[length / 2];\n        let b = l[length / 2 - 1];\n        (a + b) as f64\
    \ / 2.0\n    } else {\n        l[length / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp5ztuhwla.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Assert that the list is not empty and\
    \ get the middle of the list\n    let l_len = l.len();\n    let mid = l_len /\
    \ 2;\n\n    // The median of a list with an even number of elements is the mean\
    \ of the two middle elements\n    if l_len % 2 == 0 {\n        let left = l[mid\
    \ - 1];\n        let right = l[mid];\n        (left + right) as f64 / 2.0\n  \
    \  } else {\n        // The median of a list with an odd number of elements is\
    \ the middle element\n        l[mid] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpwizu5yi7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.0;\n\
    \    }\n    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if\
    \ l.len() % 2 == 0 {\n        let a = l[mid] as f64;\n        let b = l[mid -\
    \ 1] as f64;\n        (a + b) / 2.0\n    } else {\n        l[mid] as f64\n   \
    \ }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let sorted = l.clone();\n\
    \    let sort = sorted.sort();\n    let mut vec = vec![];\n    for i in 0..sort.len()\
    \ {\n        let a = sort[i];\n        vec.push(a);\n    }\n    if len % 2 ==\
    \ 0 {\n        let med = len / 2;\n        let a = vec[med];\n        let b =\
    \ vec[med - 1];\n        return ((a + b) as f64) / 2.0;\n    } else {\n      \
    \  let median = len / 2;\n        return vec[median] as f64;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpmvfg7h8n.rs:11:22\n   |\n11 |     for i in 0..sort.len()\
    \ {\n   |                      ^^^ method not found in `()`\n\nerror[E0608]: cannot\
    \ index into a value of type `()`\n  --> /tmp/tmpmvfg7h8n.rs:12:17\n   |\n12 |\
    \         let a = sort[i];\n   |                 ^^^^^^^\n   |\n   = help: to\
    \ access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut new_l = l.clone();\n    new_l.sort();\n\
    \    if new_l.len() % 2 == 0 {\n        (new_l[new_l.len() / 2] + new_l[new_l.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        new_l[new_l.len() / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // write your code here\n    let mut l\
    \ = l;\n    l.sort();\n    let length = l.len();\n    if length % 2 == 0 {\n \
    \       (l[length / 2] + l[length / 2 - 1]) as f64 / 2.0\n    } else {\n     \
    \   l[length / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let mut k = (l.len()\
    \ as f64 / 2.0).ceil() as usize;\n    if l.len() % 2 == 0 {\n        k -= 1;\n\
    \    }\n    loop {\n        let _pivot = partition(&mut l, 0, l.len() - 1);\n\
    \        if _pivot == k {\n            break;\n        } else if _pivot > k {\n\
    \            l = l[.._pivot].to_vec();\n        } else {\n            l = l[_pivot\
    \ + 1..].to_vec();\n            k -= _pivot + 1;\n        }\n    }\n    return\
    \ (l[k] as f64 + l[k + 1] as f64) / 2.0;\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `partition` in this scope\n  --> /tmp/tmp4br84f8j.rs:13:22\n\
    \   |\n13 |         let _pivot = partition(&mut l, 0, l.len() - 1);\n   |    \
    \                  ^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut l = l;\n\
    \    l.sort();\n    if n % 2 == 0 {\n        (l[n / 2 - 1] + l[n / 2]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sort_l = l.clone();\n    sort_l.sort();\n\
    \    // Don't do ceil on length, since length can be odd or even\n    let mid_i\
    \ = sort_l.len() / 2;\n    if sort_l.len() % 2 == 0 {\n        let avg = (sort_l[mid_i\
    \ - 1] + sort_l[mid_i]) as f64 / 2.0;\n        avg\n    } else {\n        sort_l[mid_i]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.clone();\n    m.sort();\n\
    \    let len = m.len();\n    let mid = len / 2;\n    if len % 2 == 0 {\n     \
    \   let mut val = m[mid].clone() as f64;\n        val += m[mid - 1].clone() as\
    \ f64;\n        val /= 2.0;\n        val\n    } else {\n        m[mid].clone()\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut l = l;\n\
    \    l.sort();\n    if len % 2 == 0 {\n        let n = len / 2;\n        (l[n\
    \ - 1] + l[n]) as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] +\
    \ v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Your code here\n    let mut ret = l.clone();\n\
    \    ret.sort();\n    if ret.len() % 2 == 0 {\n        (ret[ret.len() / 2] + ret[ret.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        ret[ret.len() / 2] as f64\n  \
    \  }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpv9z2a_sw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
