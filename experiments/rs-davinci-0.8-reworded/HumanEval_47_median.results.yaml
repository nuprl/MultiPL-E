language: rs
name: HumanEval_47_median
results:
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        panic!(\"median:\
    \ list is empty\");\n    }\n    let mut l = l;\n    l.sort();\n    let mid = l.len()\
    \ / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1]) as f64 / 2.0\n\
    \    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut copy_l = l.clone();\n    copy_l.sort();\n\
    \    let n = copy_l.len();\n    if n % 2 == 0 {\n        let val1 = *copy_l.get(n\
    \ / 2).unwrap() as f64;\n        let val2 = *copy_l.get(n / 2 - 1).unwrap() as\
    \ f64;\n        (val1 + val2) / 2.0\n    } else {\n        *copy_l.get(n / 2).unwrap()\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        median_even(l)\n\
    \    } else {\n        median_odd(l)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `median_even` in this scope\n --> /tmp/tmpe5fpig42.rs:8:9\n\
    \  |\n8 |         median_even(l)\n  |         ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `median_odd` in this scope\n  --> /tmp/tmpe5fpig42.rs:10:9\n\
    \   |\n10 |         median_odd(l)\n   |         ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Sort the vector to have elements in\
    \ ascending order.\n    let mut sorted = l.clone();\n    sorted.sort();\n\n  \
    \  // Get the index of the median.\n    let n = sorted.len();\n    let m = (n\
    \ - 1) / 2;\n\n    // When the length of the vector is odd, the median is the\
    \ middle element.\n    if n % 2 == 1 {\n        sorted[m] as f64\n    }\n    //\
    \ When the length of the vector is even, the median is the mean of the two\n \
    \   // elements in the middle.\n    else {\n        (sorted[m] + sorted[m + 1])\
    \ as f64 / 2.0\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let median = v.len() / 2;\n    if v.len() % 2 == 0 {\n        ((v[median\
    \ - 1] + v[median]) as f64) / 2.0\n    } else {\n        v[median] as f64\n  \
    \  }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted_l = l.clone();\n    sorted_l.sort();\n\
    \    let mut len = sorted_l.len();\n    if len % 2 == 0 {\n        return ((sorted_l[len\
    \ / 2] + sorted_l[len / 2 - 1]) as f64) / 2.0;\n    } else {\n        return sorted_l[len\
    \ / 2] as f64;\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let length = l.len();\n    if length ==\
    \ 0 {\n        return 0 as f64;\n    }\n    if length % 2 == 0 {\n        let\
    \ a = l[length / 2];\n        let b = l[length / 2 - 1];\n        (a + b) as f64\
    \ / 2.0\n    } else {\n        l[length / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp5ztuhwla.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Assert that the list is not empty and\
    \ get the middle of the list\n    let l_len = l.len();\n    let mid = l_len /\
    \ 2;\n\n    // The median of a list with an even number of elements is the mean\
    \ of the two middle elements\n    if l_len % 2 == 0 {\n        let left = l[mid\
    \ - 1];\n        let right = l[mid];\n        (left + right) as f64 / 2.0\n  \
    \  } else {\n        // The median of a list with an odd number of elements is\
    \ the middle element\n        l[mid] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpwizu5yi7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.0;\n\
    \    }\n    let mut l = l;\n    l.sort();\n    let mid = l.len() / 2;\n    if\
    \ l.len() % 2 == 0 {\n        let a = l[mid] as f64;\n        let b = l[mid -\
    \ 1] as f64;\n        (a + b) / 2.0\n    } else {\n        l[mid] as f64\n   \
    \ }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let sorted = l.clone();\n\
    \    let sort = sorted.sort();\n    let mut vec = vec![];\n    for i in 0..sort.len()\
    \ {\n        let a = sort[i];\n        vec.push(a);\n    }\n    if len % 2 ==\
    \ 0 {\n        let med = len / 2;\n        let a = vec[med];\n        let b =\
    \ vec[med - 1];\n        return ((a + b) as f64) / 2.0;\n    } else {\n      \
    \  let median = len / 2;\n        return vec[median] as f64;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpmvfg7h8n.rs:11:22\n   |\n11 |     for i in 0..sort.len()\
    \ {\n   |                      ^^^ method not found in `()`\n\nerror[E0608]: cannot\
    \ index into a value of type `()`\n  --> /tmp/tmpmvfg7h8n.rs:12:17\n   |\n12 |\
    \         let a = sort[i];\n   |                 ^^^^^^^\n   |\n   = help: to\
    \ access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut new_l = l.clone();\n    new_l.sort();\n\
    \    if new_l.len() % 2 == 0 {\n        (new_l[new_l.len() / 2] + new_l[new_l.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        new_l[new_l.len() / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // write your code here\n    let mut l\
    \ = l;\n    l.sort();\n    let length = l.len();\n    if length % 2 == 0 {\n \
    \       (l[length / 2] + l[length / 2 - 1]) as f64 / 2.0\n    } else {\n     \
    \   l[length / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let mut k = (l.len()\
    \ as f64 / 2.0).ceil() as usize;\n    if l.len() % 2 == 0 {\n        k -= 1;\n\
    \    }\n    loop {\n        let _pivot = partition(&mut l, 0, l.len() - 1);\n\
    \        if _pivot == k {\n            break;\n        } else if _pivot > k {\n\
    \            l = l[.._pivot].to_vec();\n        } else {\n            l = l[_pivot\
    \ + 1..].to_vec();\n            k -= _pivot + 1;\n        }\n    }\n    return\
    \ (l[k] as f64 + l[k + 1] as f64) / 2.0;\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `partition` in this scope\n  --> /tmp/tmp4br84f8j.rs:13:22\n\
    \   |\n13 |         let _pivot = partition(&mut l, 0, l.len() - 1);\n   |    \
    \                  ^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut l = l;\n\
    \    l.sort();\n    if n % 2 == 0 {\n        (l[n / 2 - 1] + l[n / 2]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sort_l = l.clone();\n    sort_l.sort();\n\
    \    // Don't do ceil on length, since length can be odd or even\n    let mid_i\
    \ = sort_l.len() / 2;\n    if sort_l.len() % 2 == 0 {\n        let avg = (sort_l[mid_i\
    \ - 1] + sort_l[mid_i]) as f64 / 2.0;\n        avg\n    } else {\n        sort_l[mid_i]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.clone();\n    m.sort();\n\
    \    let len = m.len();\n    let mid = len / 2;\n    if len % 2 == 0 {\n     \
    \   let mut val = m[mid].clone() as f64;\n        val += m[mid - 1].clone() as\
    \ f64;\n        val /= 2.0;\n        val\n    } else {\n        m[mid].clone()\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut l = l;\n\
    \    l.sort();\n    if len % 2 == 0 {\n        let n = len / 2;\n        (l[n\
    \ - 1] + l[n]) as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] +\
    \ v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Your code here\n    let mut ret = l.clone();\n\
    \    ret.sort();\n    if ret.len() % 2 == 0 {\n        (ret[ret.len() / 2] + ret[ret.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        ret[ret.len() / 2] as f64\n  \
    \  }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpv9z2a_sw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.clone();\n    let mut l = l.clone();\n\
    \    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        let first\
    \ = len / 2 - 1;\n        let second = len / 2;\n        let average = (l[first]\
    \ + l[second]) as f64 / 2.0;\n        average\n    } else {\n        let index\
    \ = len / 2;\n        l[index] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.clone();\n    m.sort();\n\
    \    let median_index = (m.len() as f64 / 2f64).ceil() as usize;\n    if m.len()\
    \ % 2 == 0 {\n        let median = (m[median_index] + m[median_index - 1]) as\
    \ f64 / 2f64;\n        median\n    } else {\n        m[median_index] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4.0`,\n right: `3.0`', /tmp/tmp5fp_8xqf.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len == 0 {\n\
    \        return 0.0;\n    }\n    let mut l = l;\n    l.sort();\n    if len % 2\
    \ == 0 {\n        (l[len / 2] + l[len / 2 - 1]) as f64 / 2.0\n    } else {\n \
    \       l[len / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l: Vec<isize> = l;\n    l.sort();\n\
    \    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] +\
    \ l[mid]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let length = l.len();\n\
    \    l.sort();\n    if length % 2 == 0 {\n        (l[length / 2] + l[length /\
    \ 2 - 1]) as f64 / 2.0\n    } else {\n        l[length / 2] as f64\n    }\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mid = l.len() / 2;\n    if l.len()\
    \ % 2 == 0 {\n        (l[mid] + l[mid - 1]) as f64 / 2.0\n    } else {\n     \
    \   l[mid] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpv5syreka.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    if sorted.len() % 2 == 0 {\n        // even\n        let l = sorted.len()\
    \ / 2 - 1;\n        let r = sorted.len() / 2;\n        let left = sorted[l] as\
    \ f64;\n        let right = sorted[r] as f64;\n        (left + right) / 2.0\n\
    \    } else {\n        // odd\n        let mid = sorted.len() / 2;\n        sorted[mid]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    let mid = n / 2;\n    if n % 2 == 0 {\n        (l[mid - 1]\
    \ + l[mid]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // compute median here\n    let len = l.len();\n\
    \    let mut nums = l.clone();\n    nums.sort();\n    if len % 2 == 0 {\n    \
    \    (nums[len / 2 - 1] + nums[len / 2]) as f64 / 2.0\n    } else {\n        nums[len\
    \ / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ middle = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[middle] + l[middle\
    \ - 1]) as f64 / 2.0\n    } else {\n        l[middle] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.clone();\n    m.sort();\n\
    \    if m.len() % 2 == 0 {\n        ((m[m.len() / 2] + m[m.len() / 2 - 1]) as\
    \ f64) / 2.0\n    } else {\n        m[m.len() / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    if sorted.len() % 2 == 0 {\n        (sorted[sorted.len() / 2] + sorted[sorted.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[sorted.len() / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let len = l.len();\n\
    \    l.sort();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1]) as\
    \ f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let count = l.len();\n    if count == 0\
    \ {\n        return 0.0;\n    }\n    let mut sorted_list = l.clone();\n    sorted_list.sort();\n\
    \    let middle = count / 2;\n    if count % 2 == 0 {\n        let left = sorted_list[middle\
    \ - 1];\n        let right = sorted_list[middle];\n        return f64::from(left\
    \ + right) / 2.0;\n    } else {\n        return f64::from(sorted_list[middle]);\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmp4arhe7hs.rs:17:16\n   |\n17 |         return f64::from(left + right)\
    \ / 2.0;\n   |                ^^^^^^^^^ the trait `From<isize>` is not implemented\
    \ for `f64`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <f32 as From<i16>>\n             <f32 as From<i8>>\n           \
    \  <f32 as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror[E0277]: the trait bound\
    \ `f64: From<isize>` is not satisfied\n  --> /tmp/tmp4arhe7hs.rs:19:16\n   |\n\
    19 |         return f64::from(sorted_list[middle]);\n   |                ^^^^^^^^^\
    \ the trait `From<isize>` is not implemented for `f64`\n   |\n   = help: the following\
    \ other types implement trait `From<T>`:\n             <f32 as From<i16>>\n  \
    \           <f32 as From<i8>>\n             <f32 as From<u16>>\n             <f32\
    \ as From<u8>>\n             <f64 as From<f32>>\n             <f64 as From<i16>>\n\
    \             <f64 as From<i32>>\n             <f64 as From<i8>>\n           and\
    \ 67 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut l = l;\n\
    \    l.sort();\n    let mid = n / 2;\n    let mut med = 0.0;\n    if n % 2 ==\
    \ 0 {\n        med = (l[mid] + l[mid - 1]) as f64 / 2.0;\n    } else {\n     \
    \   med = l[mid] as f64;\n    }\n    med\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Make a copy of the list\n    let mut\
    \ vec = l.clone();\n    // Since we are sorting, we don't care about the values,\
    \ just the order\n    // TODO: Shouldn't this be stable_sort?\n    vec.sort();\n\
    \    let size = vec.len();\n    if size % 2 == 0 {\n        // If even number\
    \ of elements, we return average of the middle two elements\n        (vec[size\
    \ / 2] + vec[size / 2 - 1]) as f64 / 2.0\n    } else {\n        // Otherwise just\
    \ return the middle value\n        vec[size / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.clone();\n    let mut l = l.clone();\n\
    \    l.sort();\n    let mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n      \
    \  (l[mid - 1] + l[mid]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n \
    \   }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut list = l;\n    list.sort();\n \
    \   let mid = list.len() / 2;\n    if list.len() % 2 == 0 {\n        (list[mid]\
    \ + list[mid - 1]) as f64 / 2.0\n    } else {\n        list[mid] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l_len = l.len();\n    let sorted_l\
    \ = l.iter().cloned().collect::<Vec<isize>>();\n    let sorted_l = sorted_l.into_iter().sorted().collect::<Vec<isize>>();\n\
    \    let mid_index = l_len / 2;\n    let mid_value = sorted_l[mid_index];\n  \
    \  let median = if l_len % 2 == 0 {\n        (mid_value + sorted_l[mid_index -\
    \ 1]) as f64 / 2.0\n    } else {\n        mid_value as f64\n    };\n    median\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpipvu8bez.rs:9:41\n  |\n9 |     let sorted_l\
    \ = sorted_l.into_iter().sorted().collect::<Vec<isize>>();\n  |              \
    \                           ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // assume the list is sorted in ascending\
    \ order\n    let mut newl = l.clone();\n    newl.sort();\n    let len = newl.len();\n\
    \    if len % 2 == 0 {\n        let mid = len / 2;\n        let val1 = newl[mid];\n\
    \        let val2 = newl[mid-1];\n        (val1 + val2) as f64 / 2.0\n    } else\
    \ {\n        let mid = len / 2;\n        newl[mid] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut res = l.clone();\n    res.sort();\n\
    \    let n = res.len();\n    if n % 2 == 0 {\n        (res[n / 2] + res[n / 2\
    \ - 1]) as f64 / 2.0\n    } else {\n        res[n / 2] as f64\n    }\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let half = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[half - 1]\
    \ + v[half]) as f64 / 2.0\n    } else {\n        v[half] as f64\n    }\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    if v.len() % 2 == 0 {\n        let i = v.len() / 2;\n        (v[i] + v[i-1])\
    \ as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut list = l.clone();\n\
    \    list.sort();\n    if n % 2 == 0 {\n        let mut i = n / 2;\n        let\
    \ sum = list[i - 1] + list[i];\n        sum as f64 / 2.0\n    } else {\n     \
    \   list[n / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    if n % 2 == 0 {\n\
    \        (l[n / 2 - 1] + l[n / 2]) as f64 / 2.0\n    } else {\n        l[n / 2]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp9ihin_sj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let s = l.len();\n    match s {\n     \
    \   0 => 0.0,\n        1 => l[0] as f64,\n        _ => {\n            let mid\
    \ = s / 2;\n            let v = l.clone();\n            let mut v = v.into_iter().enumerate().map(|(i,\
    \ v)| (i, v)).collect::<Vec<(usize, isize)>>();\n            v.sort_by(|a, b|\
    \ b.1.cmp(&a.1));\n            let v = v.into_iter().map(|(_, v)| v).collect::<Vec<isize>>();\n\
    \            if s % 2 == 0 {\n                (v[mid] + v[mid - 1]) as f64 / 2.0\n\
    \            } else {\n                v[mid] as f64\n            }\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let (mut m0, mut m1) = (l[0], l[0]);\n\
    \    let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        m0 =\
    \ min(m0, l[i]);\n        m1 = max(m1, l[i]);\n        i += 1;\n    }\n    let\
    \ d: f64 = (m1 - m0) as f64;\n    if d == 0.0 {\n        return d;\n    }\n  \
    \  l.sort();\n    if l.len() % 2 == 0 {\n        let i = l.len() / 2;\n      \
    \  (l[i - 1] + l[i]) as f64 / 2.0\n    } else {\n        l[l.len() / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpar1gm0_v.rs:11:14\n\
    \   |\n11 |         m0 = min(m0, l[i]);\n   |              ^^^\n...\n28 | fn main()\
    \ {\n   | --------- similarly named function `main` defined here\n   |\nhelp:\
    \ a function with a similar name exists\n   |\n11 |         m0 = main(m0, l[i]);\n\
    \   |              ~~~~\nhelp: consider importing this function\n   |\n1  | use\
    \ std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n\
    \  --> /tmp/tmpar1gm0_v.rs:12:14\n   |\n12 |         m1 = max(m1, l[i]);\n   |\
    \              ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut tmp = l.clone();\n    tmp.sort();\n\
    \    let mut median = 0.0;\n    let length = tmp.len();\n    if length % 2 ==\
    \ 0 {\n        median = (tmp[length / 2] + tmp[length / 2 - 1]) as f64 / 2.0;\n\
    \    } else {\n        median = tmp[length / 2] as f64;\n    }\n    median\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let n = sorted.len();\n    if n % 2 == 0 {\n        // Even number of elements.\n\
    \        let a = sorted[n / 2 - 1] as f64;\n        let b = sorted[n / 2] as f64;\n\
    \        (a + b) / 2.0\n    } else {\n        // Odd number of elements.\n   \
    \     let a = sorted[n / 2] as f64;\n        a\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        ((l[len / 2] + l[len / 2 - 1])\
    \ as f64) / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.clone();\n    let sorted = l.clone();\n\
    \    let len = l.len();\n    let mut l = l;\n    l.sort();\n    let half = len\
    \ / 2;\n    if len % 2 == 0 {\n        let mid = (l[half] + l[half - 1]) as f64\
    \ / 2.0;\n        println!(\"median: {}\", mid);\n        mid\n    } else {\n\
    \        let mid = l[half] as f64;\n        println!(\"median: {}\", mid);\n \
    \       mid\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: 'median: 3

    median: 8

    median: 5

    median: 5.5

    median: 7

    '
  timestamp: 1659977699
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // This can be done with a generic, but\
    \ is a bit trickier.\n    let is_even = l.len() % 2 == 0;\n    let mid_idx = (l.len()\
    \ - 1) / 2;\n    match (is_even, l.get(mid_idx), l.get(mid_idx + 1)) {\n     \
    \   (true, Some(n), Some(n2)) => (n + n2) as f64 / 2.0,\n        (_, Some(n),\
    \ _) => *n as f64,\n        _ => panic!(\"Expected list size >= 1!\"),\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp7o4px79p.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut l = l;\n\
    \    l.sort();\n    if len % 2 == 0 {\n        return (l[len / 2] + l[len / 2\
    \ - 1]) as f64 / 2.0;\n    }\n    l[len / 2] as f64\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let mut n = l.len();\n\
    \    l.sort();\n    n /= 2;\n    if n % 2 == 0 {\n        return l[n].to_string().parse::<f64>().unwrap();\n\
    \    }\n    let m = l[n];\n    let n = l[n + 1];\n    (m + n) as f64 / 2.0\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15.0`,\n right: `8.0`', /tmp/tmps9q78m7a.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let n = l.len();\n\
    \    let h = (n - 1) / 2;\n    l.sort();\n    if n % 2 == 0 {\n        (l[h] +\
    \ l[h + 1]) as f64 / 2.0\n    } else {\n        l[h] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let len = sorted.len();\n    if len % 2 == 0 {\n        (sorted[len / 2]\
    \ + sorted[len / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[len / 2] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        return 0.0;\n\
    \    }\n    let mut l = l;\n    let l = l.sort();\n    let l = l.dedup();\n  \
    \  let len = l.len();\n    if len % 2 == 0 {\n        let mid = len / 2;\n   \
    \     return (l[mid] + l[mid - 1]) as f64 / 2.0;\n    } else {\n        let mid\
    \ = len / 2;\n        return l[mid] as f64;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `dedup` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmptgqy344e.rs:12:15\n   |\n12 |     let l = l.dedup();\n\
    \   |               ^^^^^ method not found in `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let sorted = l.iter().cloned().collect::<Vec<isize>>();\n\
    \    sorted.sort();\n    let size = sorted.len();\n    let half = size / 2;\n\
    \    if size % 2 == 0 {\n        ((sorted[half] + sorted[half - 1]) as f64) /\
    \ 2.0\n    } else {\n        sorted[half] as f64\n    }\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `sorted` as mutable, as it is not declared\
    \ as mutable\n --> /tmp/tmp1bkhbqky.rs:8:5\n  |\n7 |     let sorted = l.iter().cloned().collect::<Vec<isize>>();\n\
    \  |         ------ help: consider changing this to be mutable: `mut sorted`\n\
    8 |     sorted.sort();\n  |     ^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted_list = l.clone();\n    sorted_list.sort();\n\
    \    let len = sorted_list.len();\n    if len % 2 == 0 {\n        (sorted_list[len\
    \ / 2] + sorted_list[len / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted_list[len\
    \ / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.clone();\n    s.sort();\n\
    \    let n = s.len();\n    if n % 2 == 0 {\n        return ((s[n / 2] as f64)\
    \ + (s[n / 2 - 1] as f64)) / 2.0;\n    } else {\n        return s[n / 2] as f64;\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut ll = l.clone();\n    ll.sort();\n\
    \    let len = ll.len();\n    if len % 2 == 0 {\n        (ll[len / 2] + ll[len\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        ll[len / 2] as f64\n    }\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let n = sorted.len();\n    if n % 2 == 0 {\n        (sorted[n / 2] + sorted[n\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[n / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut temp = l.clone();\n    temp.sort();\n\
    \    let len = temp.len();\n    if len % 2 == 0 {\n        return ((temp[len /\
    \ 2] + temp[len / 2 - 1]) as f64) / 2f64;\n    } else {\n        return temp[len\
    \ / 2] as f64;\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l_copy = l.clone();\n    let l_copy2\
    \ = l.clone();\n    let l_copy3 = l.clone();\n    let l_copy4 = l.clone();\n \
    \   let l_copy5 = l.clone();\n    let sorted = insertion_sort(&l_copy);\n    let\
    \ list_len = sorted.len();\n    let middle = list_len / 2;\n    let first = sorted[middle\
    \ - 1];\n    let second = sorted[middle];\n    let first2 = l_copy2[middle - 1];\n\
    \    let second2 = l_copy2[middle];\n    let first3 = l_copy3[middle - 1];\n \
    \   let second3 = l_copy3[middle];\n    let first4 = l_copy4[middle - 1];\n  \
    \  let second4 = l_copy4[middle];\n    let first5 = l_copy5[middle - 1];\n   \
    \ let second5 = l_copy5[middle];\n    assert_eq!(1, first);\n    assert_eq!(2,\
    \ second);\n    assert_eq!(1, first2);\n    assert_eq!(2, second2);\n    assert_eq!(1,\
    \ first3);\n    assert_eq!(2, second3);\n    assert_eq!(1, first4);\n    assert_eq!(2,\
    \ second4);\n    assert_eq!(1, first5);\n    assert_eq!(2, second5);\n    if list_len\
    \ % 2 == 0 {\n        (first as f64 + second as f64) / 2.0\n    } else {\n   \
    \     second as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `insertion_sort` in this scope\n  -->\
    \ /tmp/tmp3_91oren.rs:12:18\n   |\n12 |     let sorted = insertion_sort(&l_copy);\n\
    \   |                  ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted_l = l.clone();\n    sorted_l.sort();\n\
    \    let n = sorted_l.len();\n    if n % 2 == 0 {\n        (sorted_l[n / 2 - 1]\
    \ + sorted_l[n / 2]) as f64 / 2.0\n    } else {\n        sorted_l[n / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    if n == 0 {\n   \
    \     panic!(\"error: empty vector\");\n    } else if n % 2 == 0 {\n        let\
    \ s = n / 2;\n        let d = l[s] as f64 - l[s - 1] as f64;\n        l[s - 1]\
    \ as f64 + d / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmprmqhdc5i.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l_sort = l.clone();\n    let mut l_sort\
    \ = l_sort.into_iter().collect::<Vec<isize>>();\n    l_sort.sort();\n    let i\
    \ = l_sort.len() / 2;\n    if l_sort.len() % 2 == 0 {\n        let x = l_sort[i];\n\
    \        let y = l_sort[i - 1];\n        (x + y) as f64 / 2.0\n    } else {\n\
    \        l_sort[i] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut n = l.clone();\n    n.sort();\n\
    \    let len = n.len();\n    if len % 2 == 0 {\n        (n[len / 2] + n[len /\
    \ 2 - 1]) as f64 / 2.0\n    } else {\n        n[len / 2] as f64\n    }\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    // Sort the vector\n\
    \    l.sort();\n    // Get length of the vector\n    let l_len = l.len();\n  \
    \  if l_len % 2 == 0 {\n        // If length is even, return mean of two middle\
    \ elements\n        (l[l_len / 2] + l[l_len / 2 - 1]) as f64 / 2.0\n    } else\
    \ {\n        // If length is odd, return middle element\n        l[l_len / 2]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mid = l.len() / 2;\n    let mut l =\
    \ l;\n    l.sort();\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut l = l;\n\
    \    l.sort();\n    if n % 2 == 0 {\n        ((l[n / 2 - 1] + l[n / 2]) as f64)\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut x = l.clone();\n    x.sort();\n\
    \    let xlen = x.len();\n    let mid = xlen / 2;\n    if xlen % 2 == 0 {\n  \
    \      (x[mid] + x[mid - 1]) as f64 / 2.0\n    } else {\n        x[mid] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // TODO: Implement median here\n    let\
    \ s = l.len();\n    if (s % 2) == 0 {\n        let mut m = s / 2;\n        let\
    \ k = m - 1;\n        let n = (l[k] + l[m]) as f64;\n        n / 2.0\n    } else\
    \ {\n        let i = (s - 1) / 2;\n        l[i] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmprjmulmn3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    //sort the list\n \
    \   l.sort();\n    let length = l.len();\n    if length % 2 == 0 {\n        (l[length\
    \ / 2] + l[length / 2 - 1]) as f64 / 2.0\n    } else {\n        l[length / 2]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mid = l.len() / 2;\n    let mut l =\
    \ l;\n    l.sort();\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.clone();\n    let mut l = l.clone();\n\
    \    l.sort();\n    let l_len = l.len();\n    if l_len % 2 == 0 {\n        (l[l_len\
    \ / 2] + l[l_len / 2 - 1]) as f64 / 2.0\n    } else {\n        l[l_len / 2] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        panic!(\"median:\
    \ empty list\")\n    }\n    let mut l = l;\n    l.sort();\n    if l.len() % 2\
    \ == 0 {\n        (l[l.len() / 2] + l[l.len() / 2 - 1]) as f64 / 2.0\n    } else\
    \ {\n        l[l.len() / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    if sorted.len() % 2 == 0 {\n        let a = sorted[sorted.len() / 2 - 1]\
    \ as f64;\n        let b = sorted[sorted.len() / 2] as f64;\n        return (a\
    \ + b) / 2.0;\n    } else {\n        return sorted[sorted.len() / 2] as f64;\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let len = sorted.len();\n    if len % 2 == 0 {\n        (sorted[len / 2]\
    \ + sorted[len / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[len / 2] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ med = l.len() as f64 / 2.0;\n    if l.len() % 2 == 0 {\n        (l[med as usize\
    \ - 1] + l[med as usize]) as f64 / 2.0\n    } else {\n        l[med as usize]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mid = len /\
    \ 2;\n    let mut l = l;\n    l.sort();\n    let median = if len % 2 == 0 {\n\
    \        (l[mid] + l[mid - 1]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n\
    \    };\n    median\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut temp = l.clone();\n    temp.sort();\n\
    \    let n = temp.len();\n    if n % 2 == 0 {\n        (temp[n / 2] + temp[n /\
    \ 2 - 1]) as f64 / 2.0\n    } else {\n        temp[n / 2] as f64\n    }\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l2 = l.clone();\n    let mut l3 = l.clone();\n\
    \    l3.sort();\n    let mut l4 = l2.clone();\n    l4.sort_by(|a, b| b.cmp(a));\n\
    \    let (long, short) = if l3.len() % 2 == 0 {\n        (l3, l4)\n    } else\
    \ {\n        (l4, l3)\n    };\n    let sum: isize = short.iter().sum();\n    let\
    \ sum: f64 = long.iter().sum::<isize>() as f64;\n    sum / 2.0 + (sum / 2.0).fract()\
    \ + sum.fract()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8.0`,\n right: `3.0`', /tmp/tmpeavt9gda.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        (l[l.len()\
    \ / 2] + l[l.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        l[l.len() / 2]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp3ghaebam.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // type inference lets us omit an explicit\
    \ type signature (which\n    // would be `sort: fn(&Vec<i32>) -> Vec<i32>` in\
    \ this instance)\n    let mut sorted = sort(l);\n    let len = sorted.len();\n\
    \    let even = len % 2 == 0;\n    let mid = len / 2;\n    if even {\n       \
    \ let sum = sorted[mid - 1] + sorted[mid];\n        sum as f64 / 2.0\n    } else\
    \ {\n        sorted[mid] as f64\n    }\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sort` in this scope\n --> /tmp/tmpr4rdkilk.rs:9:22\n\
    \  |\n9 |     let mut sorted = sort(l);\n  |                      ^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted_list = l.clone();\n    sorted_list.sort();\n\
    \    let ln = sorted_list.len();\n    if ln % 2 == 0 {\n        return (sorted_list[ln\
    \ / 2] + sorted_list[ln / 2 - 1]) as f64 / 2.0;\n    } else {\n        return\
    \ sorted_list[ln / 2] as f64;\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.clone().into_iter().sort();\n    let\
    \ len = l.len();\n    match len {\n        0 => 0 as f64,\n        1 => l[0] as\
    \ f64,\n        _ => {\n            if len % 2 == 0 {\n                (l[len\
    \ / 2] + l[len / 2 - 1]) as f64 / 2.0\n            } else {\n                l[len\
    \ / 2] as f64\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmputzz4x6w.rs:7:27\n  |\n7 |     l.clone().into_iter().sort();\n\
    \  |                           ^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    assert!(l.len() >= 1);\n    let mut l =\
    \ l;\n    l.sort();\n    let len = l.len();\n    if len % 2 == 0 {\n        let\
    \ val = (l[len / 2] + l[len / 2 - 1]) as f64;\n        val / 2.0\n    } else {\n\
    \        l[len / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let mut m = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[m - 1] +\
    \ v[m]) as f64 / 2.0\n    } else {\n        v[m] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    unimplemented!()\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpv9z2a_sw.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut list = l;\n    list.sort();\n \
    \   let n = list.len();\n    if n == 0 {\n        0.0\n    } else if n % 2 ==\
    \ 0 {\n        (list[n / 2] + list[n / 2 - 1]) as f64 / 2.0\n    } else {\n  \
    \      list[n / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l_len = l.len();\n    if l_len % 2\
    \ == 0 {\n        (l[l_len / 2 - 1] + l[l_len / 2]) as f64 / 2.0\n    } else {\n\
    \        l[l_len / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpt_b6jgtb.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    assert!(len > 0);\n\
    \    let middle = len / 2;\n    if len % 2 == 0 {\n        (l[middle] + l[middle\
    \ - 1]) as f64 / 2.0\n    } else {\n        l[middle] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp8aksxmm7.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l_sorted = l.clone();\n    l_sorted.sort();\n\
    \    if l_sorted.len() % 2 == 0 {\n        return (l_sorted[l_sorted.len() / 2]\
    \ + l_sorted[l_sorted.len() / 2 - 1]) as f64 / 2.0;\n    } else {\n        return\
    \ l_sorted[l_sorted.len() / 2] as f64;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        panic!(\"Cannot\
    \ compute median of an empty vector!\");\n    }\n\n    let mut l = l;\n    let\
    \ n = l.len();\n    l.sort();\n    if n % 2 == 0 {\n        (l[n / 2 - 1] + l[n\
    \ / 2]) as f64 / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Use Vec::sort_by and Vec::dedup to eliminate\
    \ duplicates in the vector and\n    // then get the middle element.\n    let mut\
    \ vec = l;\n    vec.sort_by(|a, b| a.cmp(b));\n    vec.dedup();\n    match vec.len()\
    \ {\n        0 => 0 as f64,\n        1 => vec[0] as f64,\n        2 => ((vec[0]\
    \ + vec[1]) as f64) / 2.0,\n        _ => {\n            if vec.len() % 2 == 0\
    \ {\n                ((vec[vec.len() / 2] + vec[vec.len() / 2 - 1]) as f64) /\
    \ 2.0\n            } else {\n                vec[vec.len() / 2] as f64\n     \
    \       }\n        }\n    }\n}\n\nfn main() {\n    let candidate = median;\n \
    \   assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5.0`,\n right: `7.0`', /tmp/tmppjywz4_t.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        ((l[n / 2] as f64) + (l[n / 2 - 1]\
    \ as f64)) / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mid = n / 2;\n\
    \    if n % 2 == 0 {\n        // Even number of elements in the vector, average\
    \ between two middle elements.\n        (l[mid - 1] + l[mid]) as f64 / 2.0\n \
    \   } else {\n        // Odd number of elements in the vector, return middle element.\n\
    \        l[mid] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp33kkm4t8.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l_len = l.len();\n    let mut l_copy\
    \ = l.clone();\n    l_copy.sort();\n    if l_len % 2 == 0 {\n        let a = l_copy[l_len\
    \ / 2];\n        let b = l_copy[l_len / 2 - 1];\n        (a + b) as f64 / 2.0\n\
    \    } else {\n        l_copy[l_len / 2] as f64\n    }\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut sorted\
    \ = l.clone();\n    sorted.sort();\n    match len % 2 {\n        0 => {\n    \
    \        let x = (sorted[len / 2 - 1] + sorted[len / 2]) as f64;\n           \
    \ x / 2.0\n        }\n        _ => sorted[len / 2] as f64,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut copy = l.clone();\n    copy.sort();\n\
    \    let middle = copy.len() / 2;\n    if copy.len() % 2 == 0 {\n        return\
    \ (copy[middle - 1] + copy[middle]) as f64 / 2.0;\n    }\n    copy[middle] as\
    \ f64\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    assert!(l.len() > 0);\n    let mut m =\
    \ Vec::from_iter(l.iter().cloned());\n    m.sort();\n    let n = m.len();\n  \
    \  if n % 2 == 0 {\n        let x = n / 2;\n        let y = x - 1;\n        (m[x]\
    \ + m[y]) as f64 / 2.0\n    } else {\n        m[n / 2] as f64\n    }\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `Vec<_, _>` in the current scope\n --> /tmp/tmp7kn3e6jj.rs:8:22\n  |\n\
    8 |     let mut m = Vec::from_iter(l.iter().cloned());\n  |                  \
    \    ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n  |\n  =\
    \ help: items from traits can only be used if the trait is in scope\nhelp: the\
    \ following trait is implemented but not in scope; perhaps add a `use` for it:\n\
    \  |\n1 | use std::iter::FromIterator;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    if sorted.len() % 2 == 0 {\n        (sorted[sorted.len() / 2] + sorted[sorted.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[sorted.len() / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    if l.len()\
    \ % 2 == 0 {\n        (l[l.len() / 2] + l[l.len() / 2 - 1]) as f64 / 2.0\n   \
    \ } else {\n        l[l.len() / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    if l.len()\
    \ % 2 == 0 {\n        return (l[l.len() / 2] + l[l.len() / 2 - 1]) as f64 / 2.0;\n\
    \    }\n    return l[l.len() / 2] as f64;\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let m = v.len() as f64 / 2.0;\n    if v.len() % 2 == 0 {\n        let res\
    \ = m + 0.5;\n        let fl = v[res as usize];\n        let fr = v[(res as usize)\
    \ - 1];\n        (fl + fr) as f64 / 2.0\n    } else {\n        v[m as usize] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    return sorted[(sorted.len()-1)/2] as f64;\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6.0`,\n right: `8.0`', /tmp/tmptjm1bbif.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // TODO\n    let mut len: usize = l.len();\n\
    \    let mut my_vec: Vec<isize> = l;\n    my_vec.sort();\n    let mid: usize =\
    \ len / 2;\n    if len % 2 == 0 {\n        (my_vec[mid] + my_vec[mid - 1]) as\
    \ f64 / 2.0\n    } else {\n        my_vec[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let len = l.len();\n\
    \    if len % 2 == 0 {\n        let mid = len / 2;\n        (median_helper(l,\
    \ mid) + median_helper(l, mid + 1)) / 2.0\n    } else {\n        median_helper(l,\
    \ len / 2 + 1) as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `median_helper` in this scope\n  -->\
    \ /tmp/tmpmx46fyy7.rs:11:10\n   |\n11 |         (median_helper(l, mid) + median_helper(l,\
    \ mid + 1)) / 2.0\n   |          ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `median_helper` in this scope\n  --> /tmp/tmpmx46fyy7.rs:11:34\n\
    \   |\n11 |         (median_helper(l, mid) + median_helper(l, mid + 1)) / 2.0\n\
    \   |                                  ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `median_helper` in this scope\n  --> /tmp/tmpmx46fyy7.rs:13:9\n\
    \   |\n13 |         median_helper(l, len / 2 + 1) as f64\n   |         ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let n = v.len();\n    if n % 2 == 0 {\n        (v[n / 2] + v[n / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        v[n / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        // Even\n        (l[mid]\
    \ + l[mid - 1]) as f64 / 2.0\n    } else {\n        // Odd\n        l[mid] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let is_even = n %\
    \ 2 == 0;\n    let n = n as f64;\n    let m = n / 2.0;\n    let m = if is_even\
    \ { m - 0.5 } else { m };\n    let m = m as usize;\n    let res = l[m];\n    if\
    \ is_even {\n        let res2 = l[m + 1];\n        (res + res2) as f64 / 2.0\n\
    \    } else {\n        res as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpyy09dk_5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut copy = l.clone();\n    copy.sort();\n\
    \    if copy.len() % 2 == 0 {\n        let a = copy[copy.len() / 2];\n       \
    \ let b = copy[copy.len() / 2 - 1];\n        ((a + b) as f64) / 2.0\n    } else\
    \ {\n        copy[copy.len() / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut tmp = l.clone();\n    tmp.sort();\n\
    \    let lsize = tmp.len();\n    if lsize == 0 {\n        panic!(\"median: Empty\
    \ vector\");\n    }\n    let lsize = lsize as f64;\n    if lsize % 2.0 == 0.0\
    \ {\n        (tmp[(lsize / 2.0) as usize - 1] + tmp[(lsize / 2.0) as usize]) as\
    \ f64 / 2.0\n    } else {\n        tmp[(lsize / 2.0) as usize] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    let mid_even = mid - 1;\n    if l.len() % 2 == 0 {\n\
    \        return (l[mid] + l[mid_even]) as f64 / 2.0;\n    }\n    l[mid] as f64\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpxu7c77hk.rs:10:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut l = l;\n\
    \    l.sort();\n    let middle = len / 2;\n    if len % 2 == 0 {\n        let\
    \ left = l[middle - 1];\n        let right = l[middle];\n        (left + right)\
    \ as f64 / 2.0\n    } else {\n        let middle = l[middle];\n        middle\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let n = v.len();\n    match n % 2 {\n        0 => (v[n / 2 - 1] + v[n / 2])\
    \ as f64 / 2.0,\n        _ => v[n / 2] as f64,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let n = v.len();\n    if n % 2 == 0 {\n        (v[n / 2] + v[n / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        v[n / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    if n == 0 {\n   \
    \     return 0.0;\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) as f64 / 2.0;\n    }\n    return l[n / 2] as f64;\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpjtivzu65.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len == 0 {\n\
    \        return 0.0;\n    }\n    let mut l2 = l.clone();\n    l2.sort();\n   \
    \ if len % 2 == 0 {\n        (l2[len / 2 - 1] + l2[len / 2]) as f64 / 2.0\n  \
    \  } else {\n        l2[len / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let len = sorted.len();\n    if len % 2 == 0 {\n        (sorted[len / 2]\
    \ + sorted[len / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[len / 2] as\
    \ f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    assert!(l.len() > 0);\n    let mut my_vec\
    \ = l.clone();\n    my_vec.sort();\n    let length = my_vec.len();\n    if length\
    \ % 2 == 0 {\n        let a = my_vec[length / 2 - 1] as f64;\n        let b =\
    \ my_vec[length / 2] as f64;\n        (a + b) / 2.0\n    } else {\n        my_vec[length\
    \ / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mid = len /\
    \ 2;\n    let mut nl = l.clone();\n    nl.sort();\n    if len % 2 == 0 {\n   \
    \     let sum = nl[mid] + nl[mid - 1];\n        return sum as f64 / 2.0;\n   \
    \ }\n    nl[mid] as f64\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut n = l.clone();\n    n.sort();\n\
    \    let mid = n.len() / 2;\n    let mut med = n[mid];\n    if n.len() % 2 ==\
    \ 0 {\n        med = (med + n[mid - 1]) as f64 / 2.0;\n    }\n    med as f64\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp17feuhgf.rs:12:15\n   |\n\
    10 |     let mut med = n[mid];\n   |                   ------ expected due to\
    \ this value\n11 |     if n.len() % 2 == 0 {\n12 |         med = (med + n[mid\
    \ - 1]) as f64 / 2.0;\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    if n == 0 {\n   \
    \     0.0\n    } else {\n        let even = n % 2 == 0;\n        let m = n / 2;\n\
    \        if even {\n            let a = l[m - 1] as f64;\n            let b =\
    \ l[m] as f64;\n            (a + b) / 2.0\n        } else {\n            l[m]\
    \ as f64\n        }\n    }\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmprnyeqsnq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let middle = sorted.len() / 2;\n    match sorted.len() % 2 {\n        0 =>\
    \ (sorted[middle - 1] + sorted[middle]) as f64 / 2.0,\n        _ => sorted[middle]\
    \ as f64,\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut res = l.clone();\n    res.sort();\n\
    \    if res.len() % 2 == 0 {\n        (res[res.len() / 2] + res[res.len() / 2\
    \ - 1]) as f64 / 2.0\n    } else {\n        res[res.len() / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        let a = l[len / 2 - 1];\n        let b = l[len / 2];\n        let\
    \ res = (a + b) as f64 / 2.0;\n        return res;\n    } else {\n        let\
    \ res = l[len / 2] as f64;\n        return res;\n    }\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpyo0qigww.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    if sorted.len() % 2 == 0 {\n        (sorted[sorted.len() / 2] + sorted[sorted.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[sorted.len() / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977698
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid] + l[mid - 1])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ half = l.len() / 2;\n    let m = half as f64;\n    if l.len() % 2 == 0 {\n \
    \       (l[half] as f64 + l[half - 1] as f64) / 2.0\n    } else {\n        l[half]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ len = l.len();\n    if len % 2 == 0 {\n        (l[len / 2] + l[len / 2 - 1])\
    \ as f64 / 2.0\n    } else {\n        l[len / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ index = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[index - 1] + l[index])\
    \ as f64 / 2.0\n    } else {\n        l[index] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mut m: Vec<isize>\
    \ = l.clone();\n    m.sort();\n    if n % 2 == 0 {\n        (m[n / 2 - 1] + m[n\
    \ / 2]) as f64 / 2.0\n    } else {\n        m[n / 2] as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Median of a sorted list is the element\
    \ in the middle\n    let sorted = insertion_sort(l);\n    let len = sorted.len();\n\
    \    if len % 2 == 0 {\n        // Take the average of the middle two elements\n\
    \        (sorted[len / 2] + sorted[len / 2 - 1]) as f64 / 2.0\n    } else {\n\
    \        // Take the element in the middle\n        sorted[len / 2] as f64\n \
    \   }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `insertion_sort` in this scope\n -->\
    \ /tmp/tmpgpa9ytan.rs:8:18\n  |\n8 |     let sorted = insertion_sort(l);\n  |\
    \                  ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let l = l.into_iter().map(|x|\
    \ x as f64).collect::<Vec<f64>>();\n    if n == 0 {\n        return 0.0;\n   \
    \ } else if n % 2 == 1 {\n        return l[n / 2];\n    } else {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpf1lfq9c6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    let a = l[mid];\n    let b = if l.len() % 2 == 0 { l[mid\
    \ - 1] } else { a };\n    (a + b) as f64 / 2.0\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mid_val = len\
    \ / 2;\n    let mut sorted_l = l.clone();\n    sorted_l.sort();\n    if len %\
    \ 2 == 0 {\n        ((sorted_l[mid_val - 1] + sorted_l[mid_val]) as f64) / 2.0\n\
    \    } else {\n        sorted_l[mid_val] as f64\n    }\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut list = l;\n    list.sort();\n \
    \   if list.len() % 2 == 0 {\n        (list[list.len() / 2] + list[list.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        list[list.len() / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let (mut l, mut r)\
    \ = (l, Vec::new());\n    let mut m = partition(l, &mut r);\n    while m != n\
    \ / 2 {\n        if m > n / 2 {\n            l = Vec::new();\n            m =\
    \ partition(m, &mut l);\n        } else {\n            r = Vec::new();\n     \
    \       m = partition(r, &mut m);\n        }\n    }\n    if n % 2 == 0 {\n   \
    \     return (m + r) as f64 / 2 as f64;\n    }\n    m as f64\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `partition` in this scope\n --> /tmp/tmp4fhvqi9z.rs:9:17\n\
    \  |\n9 |     let mut m = partition(l, &mut r);\n  |                 ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `partition` in\
    \ this scope\n  --> /tmp/tmp4fhvqi9z.rs:13:17\n   |\n13 |             m = partition(m,\
    \ &mut l);\n   |                 ^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `partition` in this scope\n  --> /tmp/tmp4fhvqi9z.rs:16:17\n\
    \   |\n16 |             m = partition(r, &mut m);\n   |                 ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Calculate median of l\n    let l = l.iter().map(|&x|\
    \ x as f64).collect::<Vec<f64>>();\n    let n = l.len();\n    if n % 2 == 0 {\n\
    \        (l[n / 2 - 1] + l[n / 2]) / 2.0\n    } else {\n        l[n / 2]\n   \
    \ }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpd4nsbmy9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let mut ret = l;\n\
    \    let mid = len / 2;\n    ret.sort();\n    if len % 2 == 0 {\n        (ret[mid\
    \ - 1] + ret[mid]) as f64 / 2.0\n    } else {\n        ret[mid] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let mid = (n / 2)\
    \ as usize;\n    let mut sorted = l.clone();\n    sorted.sort();\n    if n % 2\
    \ == 0 {\n        (sorted[mid] + sorted[mid - 1]) as f64 / 2.0\n    } else {\n\
    \        sorted[mid] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let v_len = l.len();\n    if v_len % 2\
    \ == 0 {\n        let sum = l[v_len / 2 - 1] + l[v_len / 2];\n        return sum\
    \ as f64 / 2.0;\n    } else {\n        return l[v_len / 2] as f64;\n    }\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpg300161y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut ll = l.clone();\n    ll.sort();\n\
    \    if ll.len() % 2 == 0 {\n        let a = ll[ll.len() / 2];\n        let b\
    \ = ll[ll.len() / 2 - 1];\n        (a + b) as f64 / 2.0\n    } else {\n      \
    \  ll[ll.len() / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut temp = l.clone();\n    let mut\
    \ sum = 0;\n    let mut average = 0;\n    for n in temp.iter() {\n        sum\
    \ += n;\n    }\n    average = sum / temp.len() as isize;\n    let mut new_l: Vec<isize>\
    \ = Vec::new();\n    for n in temp.iter() {\n        if n < &average {\n     \
    \       new_l.push(*n);\n        }\n    }\n    if new_l.len() > temp.len() - new_l.len()\
    \ {\n        median(new_l)\n    } else {\n        let mut new_2_l: Vec<isize>\
    \ = Vec::new();\n        for n in temp.iter() {\n            if n > &average {\n\
    \                new_2_l.push(*n);\n            }\n        }\n        median(new_2_l)\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to divide by zero'', /tmp/tmpiybckmvf.rs:13:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        let m1 = l[len / 2 - 1];\n        let m2 = l[len / 2];\n        return\
    \ (m1 + m2) as f64 / 2.0;\n    }\n    return l[len / 2] as f64;\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp727tn3sz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        0 as f64\n \
    \   } else {\n        let sorted = l.clone();\n        let _sorted = sorted.sort();\n\
    \        let len = l.len();\n        if len % 2 == 0 {\n            (l[len / 2]\
    \ + l[len / 2 - 1]) as f64 / 2 as f64\n        } else {\n            l[len / 2]\
    \ as f64\n        }\n    }\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `sorted` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpa1ymdvr4.rs:11:23\n   |\n10 |         let sorted =\
    \ l.clone();\n   |             ------ help: consider changing this to be mutable:\
    \ `mut sorted`\n11 |         let _sorted = sorted.sort();\n   |              \
    \         ^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut vec = l.clone();\n    vec.sort();\n\
    \    let len = vec.len();\n    let center = len / 2;\n    if len % 2 == 0 {\n\
    \        (vec[center - 1] + vec[center]) as f64 / 2.0\n    } else {\n        vec[center]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.clone();\n    m.sort();\n\
    \    let i = m.len() / 2;\n    if m.len() % 2 == 0 {\n        ((m[i] + m[i - 1])\
    \ as f64) / 2.0\n    } else {\n        m[i] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let s = l.len();\n    if s % 2 == 0 {\n\
    \        (l[s / 2 - 1] + l[s / 2]) as f64 / 2.0\n    } else {\n        l[s / 2]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp5nh73di4.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        panic!(\"Empty\
    \ list\");\n    }\n    let n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2\
    \ - 1] + l[n / 2]) as f64 / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp62eiabr0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.clone();\n    s.sort();\n\
    \    let mid = (s.len() as f64) / 2.0;\n    if mid % 1.0 == 0.0 {\n        (s[mid\
    \ as usize] + s[(mid + 1.0) as usize]) as f64 / 2.0\n    } else {\n        s[mid\
    \ as usize] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15.0`,\n right: `8.0`', /tmp/tmpb4actb9w.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ i = l.len() / 2;\n    let m = l[i];\n    if l.len() % 2 == 0 {\n        (m +\
    \ l[i - 1]) as f64 / 2.0\n    } else {\n        m as f64\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let (mut l, is_odd) = l.clone().into_iter().rev().partition_at(l.len()\
    \ / 2);\n    l.reverse();\n    if is_odd {\n        l[l.len() / 2] as f64\n  \
    \  } else {\n        (l[l.len() / 2 - 1] + l[l.len() / 2]) as f64 / 2.0\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `partition_at` found for struct `Rev` in\
    \ the current scope\n --> /tmp/tmp1r9my6hk.rs:7:55\n  |\n7 |     let (mut l, is_odd)\
    \ = l.clone().into_iter().rev().partition_at(l.len() / 2);\n  |              \
    \                                         ^^^^^^^^^^^^ method not found in `Rev<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut list = l;\n    list.sort();\n \
    \   let len = list.len();\n    if len % 2 == 0 {\n        ((list[len / 2] + list[len\
    \ / 2 - 1]) as f64) / 2.0\n    } else {\n        list[len / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut ll = l.clone();\n    ll.sort();\n\
    \    let i = ll.len() / 2;\n    if ll.len() % 2 == 0 {\n        (ll[i - 1] + ll[i])\
    \ as f64 / 2.0\n    } else {\n        ll[i] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let sz = l.len();\n    if sz % 2 == 0 {\n\
    \        let mid = sz / 2;\n        (l[mid - 1] + l[mid]) as f64 / 2.0\n    }\
    \ else {\n        l[sz / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp3z25o109.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    if l.len()\
    \ % 2 == 0 {\n        let mid = l.len() / 2;\n        let a = l[mid] as f64;\n\
    \        let b = l[mid - 1] as f64;\n        (a + b) / 2.0\n    } else {\n   \
    \     l[l.len() / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    let n = sorted.len();\n    if n % 2 == 0 {\n        (sorted[n / 2] + sorted[n\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        sorted[n / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977699
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut middle = l.len() / 2;\n    let\
    \ mut r = l;\n    r.sort();\n    if l.len() % 2 == 0 {\n        return (r[middle]\
    \ + r[middle - 1]) as f64 / 2 as f64;\n    }\n    return r[middle] as f64;\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpbrqzuqi6.rs:7:9\n\
    \  |\n7 |     let mut middle = l.len() / 2;\n  |         ----^^^^^^\n  |     \
    \    |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `l`\n  --> /tmp/tmpbrqzuqi6.rs:10:8\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |           - move occurs because\
    \ `l` has type `Vec<isize>`, which does not implement the `Copy` trait\n7  | \
    \    let mut middle = l.len() / 2;\n8  |     let mut r = l;\n   |            \
    \     - value moved here\n9  |     r.sort();\n10 |     if l.len() % 2 == 0 {\n\
    \   |        ^^^^^^^ value borrowed here after move\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut m = l.clone();\n    m.sort();\n\
    \    let l = m.len();\n    let (lower, upper) = m.split_at(l / 2);\n    if l %\
    \ 2 == 0 {\n        (lower.last().unwrap() + upper.first().unwrap()) as f64 /\
    \ 2 as f64\n    } else {\n        *upper.first().unwrap() as f64\n    }\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let n = l.len();\n\
    \    let mid = n / 2;\n    l.sort();\n    if n % 2 == 0 {\n        (l[mid - 1]\
    \ + l[mid]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let len = l.len();\n\
    \    if len == 0 {\n        return 0.0;\n    }\n    l.sort();\n    let mid = (len\
    \ - 1) / 2;\n    if len % 2 == 0 {\n        return ((l[mid] + l[mid + 1]) as f64)\
    \ / 2.0;\n    }\n    return l[mid] as f64;\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let n = l.len();\n\
    \    if n % 2 == 0 {\n        let m1 = l[n / 2 - 1];\n        let m2 = l[n / 2];\n\
    \        (m1 + m2) as f64 / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp_6uxvp60.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() == 0 {\n        panic!(\"Cannot\
    \ calculate median of empty vector.\");\n    }\n    let mut l_ = l.clone();\n\
    \    l_.sort();\n    let i = l_.len() / 2;\n    if l_.len() % 2 == 0 {\n     \
    \   (l_[i - 1] + l_[i]) as f64 / 2.0\n    } else {\n        l_[i] as f64\n   \
    \ }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().cloned().collect::<Vec<isize>>().sort();\n\
    \    if l.len() % 2 == 0 {\n        let n = l.len() / 2;\n        (l[n - 1] +\
    \ l[n]) as f64 / 2.0\n    } else {\n        l[l.len() / 2] as f64\n    }\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp69_uaml8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    if len % 2 == 0\
    \ {\n        let left = l[len / 2 - 1];\n        let right = l[len / 2];\n   \
    \     ((left + right) as f64) / 2.0\n    } else {\n        l[len / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp4cd931ci.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        (l[l.len()\
    \ / 2] + l[l.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        l[l.len() / 2]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp3ghaebam.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.clone();\n    v.sort();\n\
    \    let n = v.len();\n    if n % 2 == 0 {\n        let a = v[n / 2 - 1];\n  \
    \      let b = v[n / 2];\n        ((a + b) as f64) / 2.0\n    } else {\n     \
    \   v[n / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let s = l.len();\n    if s == 0 {\n   \
    \     panic!(\"can't get median of an empty list\");\n    }\n    let x = s / 2;\n\
    \    if s % 2 == 0 {\n        (l[x] + l[x - 1]) as f64 / 2.0\n    } else {\n \
    \       l[x] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpp4__t3yz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let half = len\
    \ / 2;\n    if len % 2 == 0 {\n        (l[half] + l[half - 1]) as f64 / 2.0\n\
    \    } else {\n        l[half] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmppj77qe4g.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted = l.clone();\n    sorted.sort();\n\
    \    if sorted.len() % 2 == 0 {\n        // avg of the middle 2\n        (sorted[sorted.len()\
    \ / 2] + sorted[sorted.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        //\
    \ middle 1\n        sorted[sorted.len() / 2] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let l = l.clone();\n    let len = l.len();\n\
    \    let mut l = l;\n    l.sort();\n    let mid = len / 2;\n    if len % 2 ==\
    \ 0 {\n        let a = l[mid];\n        let b = l[mid - 1];\n        ((a + b)\
    \ as f64) / 2.0\n    } else {\n        (l[mid] as f64)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        (l[l.len()\
    \ / 2] + l[l.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        l[l.len() / 2]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmp3ghaebam.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    // Sort vector l.\n    let mut vec: Vec<isize>\
    \ = l.clone();\n    vec.sort();\n\n    // Find middle of the vector.\n    let\
    \ mid = vec.len() / 2;\n\n    // Return median.\n    if vec.len() % 2 == 0 {\n\
    \        (vec[mid - 1] + vec[mid]) as f64 / 2.0\n    } else {\n        vec[mid]\
    \ as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut new_l = l.clone();\n    new_l.sort();\n\
    \    let len = new_l.len();\n    if len % 2 == 0 {\n        (new_l[len / 2] +\
    \ new_l[len / 2 - 1]) as f64 / 2.0\n    } else {\n        new_l[len / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted_l = l.clone();\n    sorted_l.sort();\n\
    \    match sorted_l.len() % 2 {\n        0 => ((sorted_l[sorted_l.len() / 2 -\
    \ 1] + sorted_l[sorted_l.len() / 2]) as f64) / 2.0,\n        _ => sorted_l[sorted_l.len()\
    \ / 2] as f64,\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        let m1 =\
    \ l.len() / 2;\n        let m2 = m1 - 1;\n        (l[m1] + l[m2]) as f64 / 2.0\n\
    \    } else {\n        let m = l.len() / 2;\n        l[m] as f64\n    }\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpzc_xhik0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut vec = l.clone();\n    vec.sort();\n\
    \    let mid = vec.len() / 2;\n    if vec.len() % 2 == 0 {\n        (vec[mid]\
    \ + vec[mid - 1]) as f64 / 2.0\n    } else {\n        vec[mid] as f64\n    }\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    if n % 2 == 0 {\n\
    \        // If there are an even number of elements in l, return mean of the two\
    \ middle elements.\n        let m = n / 2;\n        let a = l[m];\n        let\
    \ b = l[m - 1];\n        (a + b) as f64 / 2.0\n    } else {\n        // If there\
    \ are an odd number of elements in l, return the middle element.\n        let\
    \ m = n / 2;\n        l[m] as f64\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpwrbjzkfu.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ mid = l.len() / 2;\n    if l.len() % 2 == 0 {\n        (l[mid - 1] + l[mid])\
    \ as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut new = l.clone();\n    new.sort();\n\
    \    if new.len() % 2 == 0 {\n        let mid = new.len() / 2;\n        return\
    \ (new[mid] + new[mid - 1]) as f64 / 2.0;\n    } else {\n        let mid = new.len()\
    \ / 2;\n        return new[mid] as f64;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let l: Vec<_> = l.iter().map(|&x|\
    \ x as f64).collect();\n    if n % 2 == 0 {\n        // even\n        let a =\
    \ l[n / 2 - 1];\n        let b = l[n / 2];\n        (a + b) / 2.0\n    } else\
    \ {\n        // odd\n        l[n / 2]\n    }\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpmn43w_n5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut list = l;\n    list.sort();\n \
    \   if list.len() % 2 == 0 {\n        (list[list.len() / 2] + list[list.len()\
    \ / 2 - 1]) as f64 / 2.0\n    } else {\n        list[list.len() / 2] as f64\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let n = l.len();\n    let l = l.clone();\n\
    \    l.sort();\n    let m = n / 2;\n    if n % 2 == 0 {\n        (l[m] + l[m -\
    \ 1]) as f64 / 2.0\n    } else {\n        l[m] as f64\n    }\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmpzkmdpv2f.rs:9:5\n  |\n8 |     let l = l.clone();\n  |         -\
    \ help: consider changing this to be mutable: `mut l`\n9 |     l.sort();\n  |\
    \     ^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    l.sort();\n    let\
    \ n = l.len();\n    if n % 2 == 0 {\n        (l[n / 2] + l[n / 2 - 1]) as f64\
    \ / 2.0\n    } else {\n        l[n / 2] as f64\n    }\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977700
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut sorted_list = l.clone();\n    sorted_list.sort();\n\
    \    let l_len = sorted_list.len();\n    if l_len % 2 == 0 {\n        return (sorted_list[l_len\
    \ / 2] + sorted_list[l_len / 2 - 1]) as f64 / 2.0;\n    } else {\n        return\
    \ sorted_list[l_len / 2] as f64;\n    }\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    if l.len() % 2 == 0 {\n        return (l[l.len()\
    \ / 2] + l[l.len() / 2 - 1]) as f64 / 2.0;\n    } else {\n        return l[l.len()\
    \ / 2] as f64;\n    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.0`,\n right: `3.0`', /tmp/tmpo3tnc34q.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut ll = l.clone();\n    ll.sort();\n\
    \    let n = ll.len();\n    if n == 0 {\n        0.0\n    } else if n % 2 == 0\
    \ {\n        ((ll[n / 2 - 1] + ll[n / 2]) as f64) / 2.0\n    } else {\n      \
    \  ll[n / 2] as f64\n    }\n}\n\nfn main() {\n    let candidate = median;\n  \
    \  assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 101
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let len = l.len();\n    let sum: isize\
    \ = l.iter().sum();\n    let avg: f64 = (sum as f64) / (len as f64);\n    avg\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `171.66666666666666`,\n right: `8.0`', /tmp/tmp6hoq3b52.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977701
- exit_code: 0
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l;\n    let len = l.len();\n\
    \    let mid = len / 2;\n    l.sort();\n    if len % 2 == 0 {\n        (l[mid\
    \ - 1] + l[mid]) as f64 / 2.0\n    } else {\n        l[mid] as f64\n    }\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977701
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut xs = l.clone();\n    xs.sort();\n\
    \    let mid = xs.len() / 2;\n    if xs.len() % 2 == 0 {\n        // Even number\
    \ of elements\n        let sum = xs[mid] + xs[mid - 1];\n        f64::from(sum)\
    \ / 2.0\n    } else {\n        // Odd number of elements\n        f64::from(xs[mid])\n\
    \    }\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmpqdyzzetm.rs:13:9\n   |\n13 |         f64::from(sum) / 2.0\n   |    \
    \     ^^^^^^^^^ the trait `From<isize>` is not implemented for `f64`\n   |\n \
    \  = help: the following other types implement trait `From<T>`:\n            \
    \ <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32 as From<u16>>\n\
    \             <f32 as From<u8>>\n             <f64 as From<f32>>\n           \
    \  <f64 as From<i16>>\n             <f64 as From<i32>>\n             <f64 as From<i8>>\n\
    \           and 67 others\n\nerror[E0277]: the trait bound `f64: From<isize>`\
    \ is not satisfied\n  --> /tmp/tmpqdyzzetm.rs:16:9\n   |\n16 |         f64::from(xs[mid])\n\
    \   |         ^^^^^^^^^ the trait `From<isize>` is not implemented for `f64`\n\
    \   |\n   = help: the following other types implement trait `From<T>`:\n     \
    \        <f32 as From<i16>>\n             <f32 as From<i8>>\n             <f32\
    \ as From<u16>>\n             <f32 as From<u8>>\n             <f64 as From<f32>>\n\
    \             <f64 as From<i16>>\n             <f64 as From<i32>>\n          \
    \   <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977701
