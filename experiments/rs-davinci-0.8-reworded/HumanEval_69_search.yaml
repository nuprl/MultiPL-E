name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty vector of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the vector.\n/// If no such a value exist, return -1.\n\
  /// Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\n\
  fn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5,\
  \ 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n   \
  \ assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8,\
  \ 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n   \
  \ assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1,\
  \ 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3,\
  \ 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8,\
  \ 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1,\
  \ 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]),\
  \ -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),\
  \ 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n\
  \    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n\
  }\n"
completions: ["    let mut hash: HashMap<isize, isize> = HashMap::new();\n    for\
    \ i in lst {\n        let count = hash.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut freq = 0;\n    let mut val = 0;\n    for (&key, &value)\
    \ in &hash {\n        if key == value && key > freq {\n            freq = key;\n\
    \            val = key;\n        }\n    }\n    if freq == 0 {\n        return\
    \ -1;\n    }\n    return val;", "    let mut counter = collections::HashMap::new();\n\
    \    let mut max = -1;\n    for el in lst {\n        *counter.entry(el).or_insert(0)\
    \ += 1;\n        if max < el && el <= *counter.get(&el).unwrap() {\n         \
    \   max = el;\n        }\n    }\n    max", "  let mut max = 0;\n  let mut counts\
    \ = HashMap::new();\n  for item in lst {\n    *counts.entry(item).or_insert(0)\
    \ += 1;\n    if item > 0 && item <= *counts.get(&item).unwrap() && item > max\
    \ {\n      max = item;\n    }\n  }\n  max", "  let mut counts = HashMap::new();\n\
    \  for num in lst {\n    *counts.entry(num).or_insert(0) += 1;\n  }\n  let max_val\
    \ = counts.keys().max().unwrap();\n  for num in 1..max_val + 1 {\n    if counts.get(&num).unwrap()\
    \ >= &num {\n      return num;\n    }\n  }\n  -1", "    let mut counter = HashMap::new();\n\
    \    for item in lst {\n        *counter.entry(item).or_insert(0) += 1;\n    }\n\
    \    let mut result = -1;\n    for (key, value) in counter {\n        if key <=\
    \ value && key > result {\n            result = key;\n        }\n    }\n    result",
  "    // Your code here!\n    let mut x = 0;\n    let mut re = -1;\n    for i in\
    \ 1..lst.len() {\n        let mut count = 0;\n        for j in 0..lst.len() {\n\
    \            if lst[j] == lst[i] {\n                count += 1;\n            }\n\
    \        }\n        if count >= lst[i] {\n            if lst[i] > x {\n      \
    \          x = lst[i];\n                re = x;\n            }\n        }\n  \
    \  }\n    re", "    let mut max = 0;\n    let mut map = HashMap::new();\n    for\
    \ n in lst {\n        map.entry(n).and_modify(|x| { *x += 1 }).or_insert(1);\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    for n in 1..max\
    \ + 1 {\n        if let Some(count) = map.get(&n) {\n            if *count >=\
    \ n {\n                return n;\n            }\n        }\n    }\n    -1", " \
    \   let mut map = HashMap::new();\n    let mut max = 0;\n    for i in lst {\n\
    \        *map.entry(i).or_insert(0) += 1;\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    let mut res = -1;\n    for i in 1..=max {\n    \
    \    match map.get(&i) {\n            Some(x) => {\n                if i <= *x\
    \ {\n                    res = i;\n                }\n            }\n        \
    \    None => {}\n        }\n    }\n    res", "    let mut hash_map = HashMap::new();\n\
    \    for x in lst {\n        let count = hash_map.entry(x).or_insert(0);\n   \
    \     *count += 1;\n    }\n    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n\
    \    for x in lst {\n        if let Some(count) = hash_map.get(&x) {\n       \
    \     if *count >= x {\n                return x;\n            }\n        }\n\
    \    }\n    -1", "    let mut counts = HashMap::new();\n    for num in lst {\n\
    \        *counts.entry(num).or_insert(0) += 1;\n    }\n    let mut max_num = -1;\n\
    \    for num in counts.keys() {\n        if num <= &counts[num] && num > &max_num\
    \ {\n            max_num = *num;\n        }\n    }\n    max_num", "    let mut\
    \ t_map: HashMap<isize, usize> = HashMap::new();\n    let mut max_value = -1;\n\
    \    let mut max_value_key = -1;\n    for value in lst {\n        if let Some(count)\
    \ = t_map.get_mut(&value) {\n            *count += 1;\n        } else {\n    \
    \        t_map.insert(value, 1);\n        }\n    }\n    for (key, value) in t_map\
    \ {\n        if key <= value && key > max_value {\n            max_value = key;\n\
    \            max_value_key = key;\n        }\n    }\n    max_value_key", "   \
    \ let mut counts = HashMap::new();\n    for num in lst {\n        let count =\
    \ counts.entry(num).or_insert(0);\n        *count += 1;\n    }\n    let mut result\
    \ = -1;\n    for (k, v) in counts {\n        if k <= v && k > result {\n     \
    \       result = k;\n        }\n    }\n    result", "    let mut hm = HashMap::new();\n\
    \    let mut max = 0;\n    for i in lst {\n        if i > max {\n            max\
    \ = i;\n        }\n        hm.entry(i).and_modify(|e| *e += 1).or_insert(1);\n\
    \    }\n    let mut ans = -1;\n    for (k, v) in hm {\n        if k <= v && k\
    \ > ans {\n            ans = k;\n        }\n    }\n    ans", "    let mut freq\
    \ = HashMap::new();\n    for elem in lst {\n        *freq.entry(elem).or_insert(0)\
    \ += 1;\n    }\n    let mut ans = None;\n    for (key, value) in freq {\n    \
    \    if value >= key && (ans.is_none() || value > freq[&ans.unwrap()]) {\n   \
    \         ans = Some(key);\n        }\n    }\n    ans.unwrap_or(-1)", "    if\
    \ lst.len() == 0 {\n        return -1;\n    }\n    let mut freq: Vec<usize> =\
    \ vec![0; lst.len()];\n    let mut i = 0;\n    while i < lst.len() {\n       \
    \ freq[lst[i] as usize] += 1;\n        i += 1;\n    }\n    i = freq.len() - 1;\n\
    \    while i > 0 {\n        if freq[i] >= i as usize {\n            return i as\
    \ isize;\n        }\n        i -= 1;\n    }\n    -1", "    let mut map = std::collections::HashMap::new();\n\
    \    for i in &lst {\n        if let Some(v) = map.get_mut(i) {\n            *v\
    \ += 1;\n        } else {\n            map.insert(*i, 1);\n        }\n    }\n\
    \    let mut ans = -1;\n    for (k, v) in &map {\n        if v >= k && ans < *k\
    \ {\n            ans = *k;\n        }\n    }\n    ans", "    let mut counts =\
    \ [0; 100];\n    for x in lst {\n        counts[x as usize] += 1;\n    }\n   \
    \ for x in (1..counts.len()).rev() {\n        if counts[x] >= x as isize {\n \
    \           return x as isize;\n        }\n    }\n    -1", "    let mut counter\
    \ = HashMap::new();\n    for i in lst {\n        *counter.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max_key = 0;\n    let mut max_count = 0;\n    for\
    \ (key, value) in counter {\n        if key >= value && value > max_count {\n\
    \            max_key = key;\n            max_count = value;\n        }\n    }\n\
    \    if max_count == 0 {\n        -1\n    } else {\n        max_key\n    }", " \
    \   // Implement your solution here\n    unimplemented!()", "  // set up a vector\
    \ to store the number of times each element is in the vector\n  let max = lst.iter().max().unwrap();\n\
    \  let mut count = vec![0; max as usize + 1];\n  // count the number of times\
    \ each element is in the vector\n  for e in lst {\n    let e = e as usize;\n \
    \   count[e] += 1;\n  }\n  // search for the element that has the number of occurences\
    \ at least as\n  // large as its value\n  for (i, c) in count.iter().enumerate()\
    \ {\n    if i == 0 {\n      continue;\n    }\n    if i >= *c {\n      return i\
    \ as isize;\n    }\n  }\n  // in the case that no such element exists, return\
    \ -1\n  -1"]
stop_tokens:
- "\n}"
