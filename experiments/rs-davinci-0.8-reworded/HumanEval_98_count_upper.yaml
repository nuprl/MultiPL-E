name: HumanEval_98_count_upper
language: rs
prompt: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
  \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
  dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
  aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
  dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
  U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
  EEEE\")), 2);\n}\n"
completions: ["    let mut counter = 0;\n    let uppercase_vowels = vec!['A', 'E',\
    \ 'I', 'O', 'U'];\n    let s_chars: Vec<char> = s.chars().collect();\n    for\
    \ i in 0..s_chars.len() {\n        if uppercase_vowels.contains(&s_chars[i]) &&\
    \ i % 2 == 0 {\n            counter += 1;\n        }\n    }\n    counter", " \
    \   // Implement your solution here\n    0", '    return 0;', "    // REPLACE\
    \ VOWELS WITH *\n    let s = s.replace(|c: char| c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U', \"*\");\n    let mut n = 0;\n    let mut i = 0;\n\
    \    for c in s.chars() {\n        if i % 2 == 0 && c == '*' {\n            n\
    \ += 1;\n        }\n        i += 1;\n    }\n    n", '    unimplemented!()', " \
    \   let mut count = 0;\n    let mut up_vowel = 0;\n    let uppercase_vowels =\
    \ ['A', 'E', 'I', 'O', 'U'];\n    for c in s.chars() {\n        if up_vowel ==\
    \ 1 {\n            if uppercase_vowels.contains(&c) {\n                count +=\
    \ 1;\n            }\n        }\n        up_vowel += 1;\n        up_vowel %= 2;\n\
    \    }\n    count", "    // TODO\n    0", "    let mut count = 0;\n    for (i,\
    \ c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for (i,c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && is_upper_vowel(*c))\n\
    \        .count() as isize", "    let mut res = 0;\n    let vowels = String::from(\"\
    AEIOU\");\n    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(c)\
    \ && i % 2 == 0 {\n            res += 1;\n        }\n    }\n    res", '    return
    0;', "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| i % 2 == 0\
    \ && c.is_uppercase())\n        .count() as isize", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            count += 1;\n        }\n    }\n    count", "    //\
    \ Code here!\n    unimplemented!();", '    0', "    let s = s.into_bytes();\n\
    \    let mut count = 0;\n    for i in 0..s.len() {\n        if i % 2 == 0 {\n\
    \            let n = s[i] as char;\n            if n == 'A' || n == 'E' || n ==\
    \ 'I' || n == 'O' || n == 'U' {\n                count += 1;\n            }\n\
    \        }\n    }\n    count", "    // Type annotations are required for closures.\n\
    \    s.chars().filter(|x| x.is_uppercase()).fold(0, |acc, _| acc + 1)"]
stop_tokens:
- "\n}"
