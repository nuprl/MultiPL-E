name: HumanEval_98_count_upper
language: rs
prompt: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// >>> count_upper(String::from(\"aBCdEf\"))\n/// 1\n/// >>>\
  \ count_upper(String::from(\"abcdefg\"))\n/// 0\n/// >>> count_upper(String::from(\"\
  dBBE\"))\n/// 0\nfn count_upper(s: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
  aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
  dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
  U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
  EEEE\")), 2);\n}\n"
completions: ["    let mut counter = 0;\n    let uppercase_vowels = vec!['A', 'E',\
    \ 'I', 'O', 'U'];\n    let s_chars: Vec<char> = s.chars().collect();\n    for\
    \ i in 0..s_chars.len() {\n        if uppercase_vowels.contains(&s_chars[i]) &&\
    \ i % 2 == 0 {\n            counter += 1;\n        }\n    }\n    counter", " \
    \   // Implement your solution here\n    0", '    return 0;', "    // REPLACE\
    \ VOWELS WITH *\n    let s = s.replace(|c: char| c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U', \"*\");\n    let mut n = 0;\n    let mut i = 0;\n\
    \    for c in s.chars() {\n        if i % 2 == 0 && c == '*' {\n            n\
    \ += 1;\n        }\n        i += 1;\n    }\n    n", '    unimplemented!()', " \
    \   let mut count = 0;\n    let mut up_vowel = 0;\n    let uppercase_vowels =\
    \ ['A', 'E', 'I', 'O', 'U'];\n    for c in s.chars() {\n        if up_vowel ==\
    \ 1 {\n            if uppercase_vowels.contains(&c) {\n                count +=\
    \ 1;\n            }\n        }\n        up_vowel += 1;\n        up_vowel %= 2;\n\
    \    }\n    count", "    // TODO\n    0", "    let mut count = 0;\n    for (i,\
    \ c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for (i,c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && is_upper_vowel(*c))\n\
    \        .count() as isize", "    let mut res = 0;\n    let vowels = String::from(\"\
    AEIOU\");\n    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(c)\
    \ && i % 2 == 0 {\n            res += 1;\n        }\n    }\n    res", '    return
    0;', "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| i % 2 == 0\
    \ && c.is_uppercase())\n        .count() as isize", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            count += 1;\n        }\n    }\n    count", "    //\
    \ Code here!\n    unimplemented!();", '    0', "    let s = s.into_bytes();\n\
    \    let mut count = 0;\n    for i in 0..s.len() {\n        if i % 2 == 0 {\n\
    \            let n = s[i] as char;\n            if n == 'A' || n == 'E' || n ==\
    \ 'I' || n == 'O' || n == 'U' {\n                count += 1;\n            }\n\
    \        }\n    }\n    count", "    // Type annotations are required for closures.\n\
    \    s.chars().filter(|x| x.is_uppercase()).fold(0, |acc, _| acc + 1)", '    unimplemented!();',
  "    // TODO implement\n    0", "    let vowels = ['A', 'E', 'I', 'O', 'U'];\n \
    \   let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n        }\n  \
    \  }\n    count", "    // TODO: replace this with something meaningful\n    0",
  "    let mut count = 0;\n    let mut iter = s.chars();\n    loop {\n        let\
    \ c = iter.next();\n        if c.is_none() {\n            break;\n        }\n\
    \        if c.unwrap().is_uppercase() {\n            count += 1;\n        }\n\
    \        if iter.next().is_none() {\n            break;\n        }\n    }\n  \
    \  count", "    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    let mut counter =\
    \ 0;\n    for (i, ch) in s.chars().enumerate() {\n        if vowels.contains(&ch)\
    \ && i % 2 == 0 {\n            counter += 1;\n        }\n    }\n    counter",
  "    let mut count = 0;\n    let mut i = 0;\n    for c in s.chars() {\n        if\
    \ i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n     \
    \   i += 1;\n    }\n    count", '    return 0;', "    // TODO\n    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if is_upper_vowel(c)\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", "  \
    \  let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_ascii_uppercase()\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", "  \
    \  s.chars()\n        .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let mut sum = 0;\n    for (idx, c) in s.chars().enumerate()\
    \ {\n        if idx % 2 == 0 && c.is_uppercase() {\n            sum += 1;\n  \
    \      }\n    }\n    sum", "    let mut result = 0;\n    for i in 0..s.len() {\n\
    \        if i % 2 == 0 {\n            if s.chars().nth(i).unwrap().is_uppercase()\
    \ {\n                result += 1;\n            }\n        }\n    }\n    result",
  "    let mut iter = s.char_indices();\n    let mut count = 0;\n    while let Some((index,\
    \ c)) = iter.next() {\n        if index % 2 == 0 && c.is_uppercase() {\n     \
    \       count += 1;\n        }\n    }\n    count", "    // Initialize a counter.\n\
    \    let mut counter = 0;\n    // Iterate over the string, character by character.\n\
    \    for (i, c) in s.chars().enumerate() {\n        // If the character is an\
    \ uppercase vowel and the index is even, increase the counter.\n        if i %\
    \ 2 == 0 && c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n     \
    \       counter += 1;\n        }\n    }\n    // Return the counter.\n    counter",
  "    let mut result = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && c.is_uppercase() {\n            result += 1;\n        }\n    }\n\
    \    result", "    let mut count = 0;\n    for (index, character) in s.chars().enumerate()\
    \ {\n        if index % 2 == 0 && character.is_uppercase() {\n            count\
    \ += 1;\n        }\n    }\n    count", "    // TODO: Write your code here!\n \
    \   0", "    s.chars()\n        .enumerate()\n        .filter(|&(i, c)| i % 2\
    \ == 0 && c.is_uppercase())\n        .count() as isize", "    s.chars()\n    \
    \    .enumerate()\n        .filter(|(i, c)| *i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let vowels = &['A', 'E', 'I', 'O', 'U'];\n \
    \   let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n        }\n  \
    \  }\n    count", "    // count uppercase vowels in even indices (0, 2, 4, ...)\n\
    \    s.chars()\n        .enumerate()\n        .filter(|(i, c)| c.is_uppercase()\
    \ && i % 2 == 0)\n        .count() as isize", "    let mut count = 0;\n    let\
    \ chars: Vec<char> = s.chars().collect();\n    for i in 0..chars.len() {\n   \
    \     if (i % 2 == 0) && chars[i].is_uppercase() {\n            count += 1;\n\
    \        }\n    }\n    count", "    s.chars()\n        .filter(|&c| c.is_ascii_uppercase())\n\
    \        .filter(|_| {\n            static mut X: bool = true;\n            unsafe\
    \ {\n                let y = X;\n                X = !X;\n                y\n\
    \            }\n        })\n        .count() as isize", "    s.chars()\n     \
    \   .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let mut count = 0;\n    for (index, ch) in s.chars().enumerate()\
    \ {\n        if index % 2 == 0 && ch.is_uppercase() {\n            count += 1;\n\
    \        }\n    }\n    count", "    // TODO: Implement\n    0", "    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .zip(0..)\n        .map(|(c, i)| if i % 2 == 0 && c.is_uppercase() { 1\
    \ } else { 0 })\n        .sum()", "    // TODO: Implement this function.\n   \
    \ // Uncomment this macro to use the given test cases.\n    test_case!(count_upper,\
    \ [(\"aBCdEf\", 1), (\"abcdefg\", 0), (\"dBBE\", 0)]);\n    unimplemented!()",
  "    // TODO: Implement me\n    0", "    // BEGIN_CODE\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase() && i %\
    \ 2 == 0 {\n            count += 1;\n        }\n    }\n    count\n    // END_CODE",
  "    let mut count = 0;\n    for (i, letter) in s.chars().enumerate() {\n      \
    \  if letter.is_uppercase() && i % 2 == 0 {\n            count += 1;\n       \
    \ }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|&(i,\
    \ c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    s.chars()\n\
    \        .filter(|c| c.is_uppercase())\n        .filter(|c| is_vowel(*c))\n  \
    \      .filter(|c| s.find(*c).unwrap() % 2 == 0)\n        .count() as isize",
  '    0', "    let mut acc = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n  \
    \  for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            acc += 1;\n        }\n    }\n    acc", "    // TODO: implement\
    \ this function, then call it with a string literal.\n    unimplemented!();",
  "    s.chars()\n        .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n\
    \    let mut vowel_count = 0;\n    for (idx, ch) in s.chars().enumerate() {\n\
    \        if idx % 2 == 0 && vowels.contains(&ch) {\n            vowel_count +=\
    \ 1;\n        }\n    }\n    vowel_count", "    let mut cnt = 0;\n    for (i, ch)\
    \ in s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase() {\n \
    \           cnt += 1;\n        }\n    }\n    cnt", "    let mut count = 0;\n \
    \   for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!();',
  "    // TODO\n    0", "    s.chars()\n        .enumerate()\n        .map(|(i, c)|\
    \ if i % 2 == 0 && c.is_uppercase() { 1 } else { 0 })\n        .sum()", "    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let mut n = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_uppercase() && i % 2 == 0 {\n            n += 1;\n      \
    \  }\n    }\n    n", "    // TODO: return the number of uppercase vowels in even\
    \ index\n    let mut count = 0;\n    for i in 0..s.len() {\n        if i % 2 ==\
    \ 0 {\n            if &s[i..i+1] == \"A\" || &s[i..i+1] == \"E\" || &s[i..i+1]\
    \ == \"I\" || &s[i..i+1] == \"O\" || &s[i..i+1] == \"U\" {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count", "    let mut i = 0;\n  \
    \  let mut count = 0;\n    for c in s.chars() {\n        if c.is_uppercase() &&\
    \ i % 2 == 0 {\n            count += 1;\n        }\n        i += 1;\n    }\n \
    \   count", "    let vowels = \"AEIOU\";\n    let mut count = 0;\n    for (i,\
    \ ch) in s.chars().enumerate() {\n        if vowels.contains(ch) && i % 2 == 0\
    \ {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!();',
  "    let mut i = 0;\n    let mut count = 0;\n    let vowels = \"AEIOU\";\n    for\
    \ c in s.chars() {\n        if vowels.contains(c) && i % 2 == 0 {\n          \
    \  count += 1;\n        }\n        i += 1;\n    }\n    count", "    let v = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut i = 0;\n    let mut count = 0;\n    for c\
    \ in s.chars() {\n        if i % 2 == 0 && v.contains(&c) {\n            count\
    \ += 1;\n        }\n        i += 1;\n    }\n    count", "    let mut count = 0;\n\
    \    for (i, ch) in s.chars().enumerate() {\n        if (i % 2 == 0) && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    return (0..s.len())\n\
    \        .filter(|&i| i % 2 == 0)\n        .map(|i| s.chars().nth(i).unwrap())\n\
    \        .filter(|ch| ch.is_uppercase())\n        .filter(|ch| ch.is_vowel())\n\
    \        .count() as isize;", "    // TODO\n    unimplemented!()", "    // TODO\n\
    \    0", "    let mut count = 0;\n    for (i, ch) in s.chars().enumerate() {\n\
    \        if i % 2 == 0 && ch.is_uppercase() {\n            count += 1;\n     \
    \   }\n    }\n    count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut counter = 0;\n    for (i, c) in s.chars().enumerate() {\n        if (i %\
    \ 2 == 0) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n  \
    \          counter += 1;\n        }\n    }\n    counter", "    let mut count =\
    \ 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    // TODO: Fix\
    \ this\n    s.chars().filter(|c| c.is_uppercase()).count() as isize", "    //\
    \ your code here\n    0", "    let chars: Vec<char> = s.chars().collect();\n \
    \   let mut counter = 0;\n    for (i, c) in chars.iter().enumerate() {\n     \
    \   if i % 2 == 0 && c.is_uppercase() {\n            counter += 1;\n        }\n\
    \    }\n    counter", '    unimplemented!();', "    let mut count = 0;\n    let\
    \ uppercase_vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (index, c) in s.chars().enumerate()\
    \ {\n        if index % 2 == 0 && uppercase_vowels.contains(&c) {\n          \
    \  count += 1;\n        }\n    }\n    count", "    s.chars()\n        .enumerate()\n\
    \        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n        .count() as\
    \ isize", "    // TODO: Convert s to a Vec<char> and use a for loop to count the\n\
    \    // number of uppercase vowels in even indices.\n    //\n    // Note: isize\
    \ is the type used to represent index values.\n    //\n    // Hint: Use the is_ascii_uppercase\
    \ function to determine if a\n    // character is uppercase.\n    //\n    // Exercise:\
    \ Add a bonus feature to only count vowels. You'll\n    // need to first make\
    \ a set containing the vowels.\n    0", "    let mut count = 0;\n    for (i, c)\
    \ in s.chars().enumerate() {\n        if c.is_uppercase() && i % 2 == 0 {\n  \
    \          count += 1;\n        }\n    }\n    count", "    let upper = \"AEIOU\"\
    ;\n    let lower = \"aeiou\";\n    let mut count = 0;\n    for (i, x) in s.chars().enumerate()\
    \ {\n        if (i % 2 == 0) && (upper.contains(x)) {\n            count += 1;\n\
    \        }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .map(|(index,\
    \ c)| {\n            if index % 2 == 0 && c.is_ascii_uppercase() {\n         \
    \       1\n            } else {\n                0\n            }\n        })\n\
    \        .sum()", "    // TODO: Your code here\n    s.chars().enumerate().filter(|&(idx,\
    \ c)| idx % 2 == 0 && c.is_uppercase()).count() as isize", "    // TODO - implement\
    \ the body of this function\n    // return 0\n    let mut count = 0;\n    for\
    \ (i, v) in s.chars().enumerate() {\n        if i % 2 == 0 && v.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!()',
  "    // TODO\n    0", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", '    0', "    // unimplemented!()\n    let chars:\
    \ Vec<char> = s.chars().collect();\n    let mut count = 0;\n    for (index, char)\
    \ in chars.iter().enumerate() {\n        if index % 2 == 0 && char.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count as isize", "    s.chars()\n\
    \        .filter(|c| c.is_uppercase())\n        .filter(|c| c.is_ascii_vowel())\n\
    \        .filter(|c| (c.len_utf8() % 2) == 0)\n        .count() as isize", " \
    \   let vowels = ['A', 'E', 'I', 'O', 'U'];\n    s.chars()\n        .enumerate()\n\
    \        .filter(|(i, ch)| vowels.contains(ch) && *i % 2 == 0)\n        .count()\
    \ as isize", "    // This is a little wonky.\n    // String.chars() is an iterator\
    \ of chars in the string.\n    // .enumerate() also returns an iterator, but this\
    \ one is\n    // a tuple of the index, and the value.\n    // .filter() is a method\
    \ that returns an iterator.\n    // It filters the data based on a function, which\
    \ is given\n    // the value (and index) as the first argument.\n    // In this\
    \ case we are filtering for the index being even\n    // (divisible by 2), and\
    \ the value being uppercase.\n    // We then use the .count() method to count\
    \ how many tuples\n    // there are matching the filter.\n    s.chars().enumerate().filter(|(i,\
    \ c)| i % 2 == 0 && c.is_uppercase()).count() as isize", "    // TODO\n    unimplemented!();",
  "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if vowels.contains(&c) && i % 2 ==\
    \ 0 {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .filter(|(i, ch)| i % 2 == 0 && ch.is_uppercase())\n\
    \        .count() as isize", "    let mut count = 0;\n    let mut iter = s.chars();\n\
    \    while let Some(c) = iter.next() {\n        match c {\n            'A' | 'E'\
    \ | 'I' | 'O' | 'U' => count += 1,\n            _ => (),\n        }\n        match\
    \ iter.next() {\n            None => break,\n            Some(_) => (),\n    \
    \    }\n    }\n    count", "    let mut n: isize = 0;\n    let n = s.as_bytes().iter().enumerate().filter(|&(i,\
    \ &c)| {\n        (c == b'A' || c == b'E' || c == b'I' || c == b'O' || c == b'U')\
    \ && (i % 2 == 0)\n    }).count();\n    return n as isize;", "    let mut count\
    \ = 0;\n    for (index, character) in s.chars().enumerate() {\n        if character.is_uppercase()\
    \ && index % 2 == 0 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    // TODO\n   \
    \ 0", "    let mut count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n \
    \   for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .map(|(idx, c)| (idx, c))\n        .filter(|&(idx,\
    \ c)| idx % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    s.as_bytes()\n\
    \        .iter()\n        .filter(|&c| is_vowel(c))\n        .filter(|&c| is_even_index(&s,\
    \ c))\n        .filter(|&c| is_uppercase(c))\n        .count() as isize", "  \
    \  s.chars()\n        .enumerate()\n        .filter(|(index, value)| index % 2\
    \ == 0 && value.is_uppercase())\n        .count() as isize", "    // I'm just\
    \ guessing on `VOWELS` here\n    let VOWELS = ['A', 'E', 'I', 'O', 'U'];\n   \
    \ let mut count = 0;\n    for (index, letter) in s.chars().enumerate() {\n   \
    \     if VOWELS.contains(&letter) && index % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    // Your code here!\n    0", "    let chars:\
    \ Vec<char> = s.chars().collect();\n    let num_chars = chars.len();\n    let\
    \ mut count = 0;\n    for i in 0..num_chars {\n        if i % 2 == 0 {\n     \
    \       continue;\n        }\n        if is_upper_vowel(chars[i]) {\n        \
    \    count += 1;\n        }\n    }\n    count", "    s.chars()\n        .enumerate()\n\
    \        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n        .count() as\
    \ isize", "    // Your code here\n    0", "    let mut count = 0;\n    for (idx,\
    \ ch) in s.chars().enumerate() {\n        if idx % 2 == 0 && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut cnt =\
    \ 0;\n    for (i, c) in s.chars().enumerate() {\n        if (i % 2 == 0) && is_upper(c)\
    \ {\n            cnt += 1;\n        }\n    }\n    cnt", "    let mut c = 0;\n\
    \    for (i, a) in s.chars().enumerate() {\n        if i % 2 == 0 && a.is_uppercase()\
    \ {\n            c += 1;\n        }\n    }\n    c", "    // Write the function\
    \ body here\n    unimplemented!()", "    s.chars()\n        .enumerate()\n   \
    \     .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize",
  "    // TODO: Implement your solution here\n    unimplemented!()", "    s.bytes()\n\
    \        .enumerate()\n        .filter(|&(i, b)| i % 2 == 0 && b.is_ascii_uppercase())\n\
    \        .count() as isize", "    // YOUR CODE HERE\n    0", "    let mut count\
    \ = 0;\n    let v: Vec<char> = s.chars().collect();\n    for i in 0..v.len() {\n\
    \        let ch: char = v[i];\n        if (ch == 'A' || ch == 'E' || ch == 'I'\
    \ || ch == 'O' || ch == 'U') && i % 2 == 0 {\n            count += 1;\n      \
    \  }\n    }\n    count", "    let mut result = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            result += 1;\n \
    \       }\n    }\n    result", "    let mut result = 0;\n    for (idx, ch) in\
    \ s.chars().enumerate() {\n        if idx % 2 == 0 && ch.is_uppercase() {\n  \
    \          result += 1;\n        }\n    }\n    result", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let mut count = 0;\n    let mut upper = String::from(\"\
    AEIOU\");\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 &&\
    \ upper.contains(c) {\n            count += 1;\n        }\n    }\n    count",
  "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n\
    \        }\n    }\n    count", "    // YOUR CODE HERE\n    unimplemented!()",
  '    unimplemented!();', "    // TODO\n    let mut count: isize = 0;\n    for (i,\
    \ c) in s.chars().enumerate() {\n        if (i % 2 == 0) && c.is_uppercase() {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let count: isize\
    \ = s.chars()\n        .enumerate()\n        .filter(|(idx, ch)| idx % 2 == 0\
    \ && ch.is_uppercase())\n        .count() as isize;\n    count", "    let mut\
    \ count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0\
    \ && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  '    0', "    let mut res = 0;\n    let vowels = [\"A\", \"E\", \"I\", \"O\", \"\
    U\"];\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c.to_string().as_str())\
    \ {\n            res += 1;\n        }\n    }\n    res", "    s.chars()\n     \
    \   .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n \
    \       .count() as isize", "    s.chars()\n        .filter(|c| c.is_uppercase())\n\
    \        .zip(0..)\n        .filter(|(_, i)| i % 2 == 0)\n        .count() as\
    \ isize", "    let mut count = 0;\n    let mut index = 0;\n    for ch in s.chars()\
    \ {\n        if index % 2 == 0 && ch.is_uppercase() {\n            count += 1;\n\
    \        }\n        index += 1;\n    }\n    count", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .filter(|(i, c)| c.is_uppercase() && i % 2 == 0)\n\
    \        .count() as isize", "    let mut count = 0;\n    let mut n = 0;\n   \
    \ for c in s.chars() {\n        if n % 2 == 0 && is_vowel(c) && is_upper(c) {\n\
    \            count += 1;\n        }\n        n += 1;\n    }\n    count", "   \
    \ // YOUR CODE HERE\n    0", "    let mut count = 0;\n    let mut iter = s.chars();\n\
    \    while let Some(c) = iter.next() {\n        if is_upper_vowel(c) {\n     \
    \       count += 1;\n        }\n        iter.next();\n    }\n    count", "   \
    \ let mut i = 0;\n    let mut count = 0;\n    for c in s.chars() {\n        if\
    \ i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n     \
    \   i += 1;\n    }\n    count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_uppercase() && i % 2 == 0 {\n            count += 1;\n  \
    \      }\n    }\n    count", "    let mut num = 0;\n    let up_vowels = ['A',\
    \ 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ up_vowels.contains(&c) && i % 2 == 0 {\n            num += 1;\n        }\n \
    \   }\n    num", "    s.chars()\n        .enumerate()\n        .filter(|(i, c)|\
    \ *i % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    let vowels\
    \ = \"AEIOU\";\n    let mut count = 0;\n    for (i, letter) in s.chars().enumerate()\
    \ {\n        if vowels.contains(letter) && i % 2 == 0 {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    let mut upper = 0;\n    for (i, c) in\
    \ s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase() {\n     \
    \       upper += 1;\n        }\n    }\n    upper", "    s.chars()\n        .enumerate()\n\
    \        .filter(|(i, c)| c.is_uppercase() && i % 2 == 0)\n        .count() as\
    \ isize", "    let mut count = 0;\n    for (index, letter) in s.chars().enumerate()\
    \ {\n        if letter.is_uppercase() && index % 2 == 0 {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    s.chars()\n        .enumerate()\n   \
    \     .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize",
  '    0', '    0', "    s.chars()\n        .enumerate()\n        .filter(|&(i, _)|\
    \ i % 2 == 0)\n        .map(|(_, c)| c)\n        .filter(|c| c.is_uppercase())\n\
    \        .count() as isize", "    // TODO: Complete me\n    0", "    let mut count\
    \ = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for (i, letter) in\
    \ s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&letter) {\n\
    \            count += 1;\n        }\n    }\n    count", "    // Write the code\
    \ that goes here.\n    // Do not write anything else.\n    let mut count: isize\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", '    0', "    let\
    \ mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2\
    \ == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  "    let mut res = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i %\
    \ 2 == 0 && c.is_uppercase() {\n            res += 1;\n        }\n    }\n    res",
  '    unimplemented!()', '    unimplemented!()', "    let mut c = 0;\n    for (i,\
    \ ch) in s.chars().enumerate() {\n        if (i % 2 == 0) && ch.is_uppercase()\
    \ {\n            c += 1;\n        }\n    }\n    c", '    unimplemented!()', " \
    \   let mut cnt = 0;\n    for i in s.bytes().enumerate() {\n        if i.0 % 2\
    \ == 0 && i.1.is_ascii_uppercase() {\n            cnt += 1;\n        }\n    }\n\
    \    cnt", '    unimplemented!();', '    unimplemented!()', "    let vowels =\
    \ vec!['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count", '    unimplemented!()', "    let vowels = \"AEIOU\"\
    ;\n    let mut count = 0;\n    for (i, ch) in s.chars().enumerate() {\n      \
    \  if i % 2 == 0 && vowels.contains(ch) {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut c = 0;\n    for (i, ch) in s.chars().enumerate()\
    \ {\n        if (i % 2 == 0) && ch.is_uppercase() {\n            c += 1;\n   \
    \     }\n    }\n    c", '    0', "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n\
    \    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n        }\n  \
    \  }\n    count", "    s.bytes()\n        .enumerate()\n        .filter(|&(i,\
    \ c)| {\n            if i % 2 == 0 {\n                match c {\n            \
    \        b'A' | b'E' | b'I' | b'O' | b'U' => true,\n                    _ => false,\n\
    \                }\n            } else {\n                false\n            }\n\
    \        })\n        .count() as isize", "    // TODO\n    0", "    let mut s\
    \ = s.chars();\n    let mut count = 0;\n    while let Some(c) = s.next() {\n \
    \       if c.is_uppercase() && c.is_vowel() {\n            count += 1;\n     \
    \   }\n        s.next();\n    }\n    count", "    if s.len() == 0 {\n        return\
    \ 0;\n    }\n    let mut sum = 0;\n    for (i, c) in s.chars().enumerate() {\n\
    \        let x = i as isize % 2;\n        if x == 0 && c.is_uppercase() {\n  \
    \          sum += 1;\n        }\n    }\n    sum", "    // TODO: Implement solution\
    \ here\n    unimplemented!();", "    let mut count = 0;\n    for (i, v) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && v.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", '    unimplemented!()', "    let mut count = 0;\n\
    \    let s = s.chars();\n    for (i, c) in s.enumerate() {\n        if i % 2 ==\
    \ 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  "    s.chars()\n        .filter(|&c| c.is_alphabetic())\n        .enumerate()\n\
    \        .map(|(i, c)| if i % 2 == 0 && c.is_uppercase() { 1 } else { 0 })\n \
    \       .sum()", "    let mut count = 0;\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for (i, c) in chars.iter().enumerate() {\n        if i % 2 == 0 && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .map(|(i, c)| if i % 2 == 0 && c.is_uppercase()\
    \ { 1 } else { 0 })\n        .sum()", "    let mut n = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if (i % 2 == 0) && c.is_uppercase() {\n            n += 1;\n    \
    \    }\n    }\n    n", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    let mut counter = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if (i % 2 == 0) && is_upper_vowel(c) {\n            counter += 1;\n\
    \        }\n    }\n    counter", "    let mut count = 0;\n    let mut i = 0;\n\
    \    for c in s.chars() {\n        if i % 2 == 0 && c.is_uppercase() {\n     \
    \       count += 1;\n        }\n        i += 1;\n    }\n    count", "    let v:\
    \ Vec<char> = s.chars().collect();\n    let mut i = 0;\n    let mut count = 0;\n\
    \    while i < v.len() {\n        if v[i].is_uppercase() && i % 2 == 0 {\n   \
    \         count += 1;\n        }\n        i += 1;\n    }\n    count", '    unimplemented!()']
stop_tokens:
- "\n}"
