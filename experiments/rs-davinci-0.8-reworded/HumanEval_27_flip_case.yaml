name: HumanEval_27_flip_case
language: rs
prompt: "/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n/// >>> flip_case(String::from(\"Hello\"))\n/// String::from(\"\
  hELLO\")\nfn flip_case(string: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
  \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
  \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\"));\n}\n"
completions: ["    string.chars().map(|c| match c {\n        'a'..='z' => c.to_ascii_uppercase(),\n\
    \        'A'..='Z' => c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()",
  "    string.chars().map(|ch| {\n        if ch.is_uppercase() {\n            ch.to_lowercase().next().unwrap()\n\
    \        } else {\n            ch.to_uppercase().next().unwrap()\n        }\n\
    \    }).collect()", "    string.chars().map(|c| if c.is_ascii_lowercase() {\n\
    \        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n\
    \    }).collect()", "    string.chars().map(|c| match c {\n        x if x.is_ascii_lowercase()\
    \ => x.to_ascii_uppercase(),\n        x if x.is_ascii_uppercase() => x.to_ascii_lowercase(),\n\
    \        _ => c,\n    }).collect()", "    // TODO\n    String::new()", "    let\
    \ mut flipped_string = String::new();\n    for c in string.chars() {\n       \
    \ let up_case = c.to_uppercase().to_string();\n        let lo_case = c.to_lowercase().to_string();\n\
    \        if c == up_case.chars().next().unwrap() {\n            flipped_string.push(lo_case.chars().next().unwrap());\n\
    \        } else {\n            flipped_string.push(up_case.chars().next().unwrap());\n\
    \        }\n    }\n    flipped_string", "    string.chars().map(|x| {\n      \
    \  if x.is_ascii_uppercase() {\n            x.to_ascii_lowercase()\n        }\
    \ else {\n            x.to_ascii_uppercase()\n        }\n    }).collect()", " \
    \   string.chars().map(|x| {\n        if x.is_ascii_uppercase() {\n          \
    \  x.to_ascii_lowercase()\n        } else {\n            x.to_ascii_uppercase()\n\
    \        }\n    }).collect()", "    string.chars().map(|c| match c {\n       \
    \ 'a' ... 'z' => c.to_ascii_uppercase(),\n        'A' ... 'Z' => c.to_ascii_lowercase(),\n\
    \        _ => c\n    }).collect()", "    let mut new_string = String::new();\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            new_string.push(c.to_uppercase().nth(0).unwrap());\n\
    \        } else if c.is_uppercase() {\n            new_string.push(c.to_lowercase().nth(0).unwrap());\n\
    \        } else {\n            new_string.push(c);\n        }\n    }\n    new_string",
  "    string.chars().map(|x| {\n        if x.is_uppercase() {\n            x.to_lowercase().next().unwrap()\n\
    \        } else {\n            x.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()", "    let mut flipped = String::new();\n    for ch in string.chars()\
    \ {\n        if ch.is_lowercase() {\n            flipped.push(ch.to_uppercase().next().unwrap());\n\
    \        } else if ch.is_uppercase() {\n            flipped.push(ch.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(ch);\n        }\n    }\n    flipped",
  "    let mut result = String::new();\n    for c in string.chars() {\n        if\
    \ c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n\
    \        } else {\n            result.push(c.to_ascii_uppercase());\n        }\n\
    \    }\n    result", '    unimplemented!()', "    let mut new_string = String::new();\n\
    \    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n        \
    \    new_string.push(c.to_ascii_uppercase());\n        } else {\n            new_string.push(c.to_ascii_lowercase());\n\
    \        }\n    }\n    new_string", '    unimplemented!()', '    unimplemented!()',
  "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().collect::<String>()\n\
    \        } else {\n            c.to_lowercase().collect::<String>()\n        }\n\
    \    }).collect::<String>()", "    // TODO: Implement\n    string", '    unimplemented!()']
stop_tokens:
- "\n}"
