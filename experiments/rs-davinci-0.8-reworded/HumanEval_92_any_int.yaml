name: HumanEval_92_any_int
language: rs
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
  /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n/// true\n\
  /// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z: f64) ->\
  \ bool {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
  \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
  \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
  \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
  \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
  \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
completions: ["    (x.is_integer() && y.is_integer() && z.is_integer()) &&\n     \
    \   ((x == y + z) || (y == x + z) || (z == x + y))", "    if x.is_integer() &&\
    \ y.is_integer() && z.is_integer() {\n        if x == y + z || y == x + z || z\
    \ == x + y {\n            return true;\n        }\n    }\n    false", '    x.is_integer()
    && y.is_integer() && z.is_integer() && (x + y == z || x + z == y || y + z == x)',
  '    false', "    (x + y == z || x + z == y || y + z == x) &&\n    (x.fract() ==\
    \ 0.0 && y.fract() == 0.0 && z.fract() == 0.0)", "    let mut numbers = [x, y,\
    \ z];\n    numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    numbers[0]\
    \ + numbers[1] == numbers[2] && numbers.iter().all(|x| x.fract() == 0.0)", " \
    \   x.is_integer() && y.is_integer() && z.is_integer() &&\n        ((x + y ==\
    \ z) || (x + z == y) || (y + z == x))", '    x.is_integer() && y.is_integer()
    && z.is_integer() && (x == y + z || x == y - z || x == z - y)', "    let x_int\
    \ = x.trunc() == x;\n    let y_int = y.trunc() == y;\n    let z_int = z.trunc()\
    \ == z;\n    let sum_xyz = x + y + z;\n    let x_y_sum = x + y;\n    let x_z_sum\
    \ = x + z;\n    let y_z_sum = y + z;\n    if (x_int && y_int && z_int) &&\n  \
    \      (sum_xyz == x_y_sum || sum_xyz == x_z_sum || sum_xyz == y_z_sum) {\n  \
    \      true\n    } else {\n        false\n    }", "    let xi = x.round() as i64;\n\
    \    let yi = y.round() as i64;\n    let zi = z.round() as i64;\n    xi == yi\
    \ + zi || yi == xi + zi || zi == xi + yi", "    let sum: f64 = (x + y + z) - x\
    \ - y;\n    if x.is_integer() == true && y.is_integer() == true && z.is_integer()\
    \ == true {\n        if x == sum || y == sum || z == sum {\n            return\
    \ true;\n        }\n    }\n    return false;", '    x.is_integer() && y.is_integer()
    && z.is_integer() && (x + y == z || x + z == y || y + z == x)', "    if x.is_integer()\
    \ && y.is_integer() && z.is_integer() {\n        if x.abs() < std::f64::EPSILON\
    \ {\n            return (y + z).abs() < std::f64::EPSILON;\n        } else if\
    \ y.abs() < std::f64::EPSILON {\n            return (x + z).abs() < std::f64::EPSILON;\n\
    \        } else if z.abs() < std::f64::EPSILON {\n            return (x + y).abs()\
    \ < std::f64::EPSILON;\n        } else {\n            return (x + y - z).abs()\
    \ < std::f64::EPSILON || (x + z - y).abs() < std::f64::EPSILON || (y + z - x).abs()\
    \ < std::f64::EPSILON;\n        }\n    } else {\n        return false;\n    }",
  "    // TODO\n    false", "    if x == y + z || y == x + z || z == x + y {\n   \
    \     return true;\n    } else {\n        return false;\n    }", "    // x + y\
    \ == z || x + z == y || y + z == x\n    let x_int = x.floor() == x;\n    let y_int\
    \ = y.floor() == y;\n    let z_int = z.floor() == z;\n    if x_int && y_int &&\
    \ z_int {\n        x + y == z || x + z == y || y + z == x\n    } else {\n    \
    \    false\n    }", "    if x.is_i64() && y.is_i64() && z.is_i64() {\n       \
    \ return x == y + z || y == x + z || z == x + y;\n    } else {\n        return\
    \ false;\n    }", '    x == y + z || x == y - z || x == z - y', "    if x.is_finite()\
    \ && y.is_finite() && z.is_finite() {\n        x.round() == y.round() + z.round()\
    \ || y.round() == x.round() + z.round() || z.round() == x.round() + y.round()\n\
    \    } else {\n        false\n    }", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && (x + y == z || x + z == y || y + z == x)']
stop_tokens:
- "\n}"
