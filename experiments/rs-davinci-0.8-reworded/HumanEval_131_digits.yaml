name: HumanEval_131_digits
language: rs
prompt: "/// Given a positive integer n, return the product of the odd digits.\n///\
  \ Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n/// 1\n\
  /// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
  \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n \
  \   assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n  \
  \  assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
  }\n"
completions: ["    let mut num = n;\n    let mut result = 1;\n    while num > 0 {\n\
    \        let digit = num % 10;\n        if digit % 2 != 0 {\n            result\
    \ *= digit;\n        }\n        num /= 10;\n    }\n    result", "    let mut ret\
    \ = 1;\n    let mut t = n;\n    while t > 0 {\n        let c = t % 10;\n     \
    \   if c % 2 == 1 {\n            ret *= c;\n        }\n        t /= 10;\n    }\n\
    \    ret", "    if n == 0 {\n        return 0;\n    }\n    if n % 2 == 0 {\n \
    \       return digits(n / 10);\n    }\n    let last_digit = n % 10;\n    let rest\
    \ = digits(n / 10);\n    if rest == 0 {\n        return last_digit;\n    }\n \
    \   return last_digit * rest;", "    let n = n.to_string();\n    n.chars().filter(|&c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 1)\n        .map(|d| d.to_digit(10).unwrap()\
    \ as isize)\n        .product()", "    n.to_string()\n        .chars()\n     \
    \   .map(|d| d.to_digit(10).unwrap() as isize)\n        .filter(|x| x % 2 == 1)\n\
    \        .product()", "    let mut p = 1;\n    let mut n = n;\n    while n > 0\
    \ {\n        let d = n % 10;\n        if d % 2 == 1 {\n            p *= d;\n \
    \       }\n        n /= 10;\n    }\n    p", "    n.to_string()\n        .chars()\n\
    \        .map(|c| c.to_digit(10).unwrap() as isize)\n        .filter(|&d| d %\
    \ 2 == 1)\n        .product()", "  let mut n = n;\n  let mut product = 1;\n  while\
    \ n > 0 {\n    let last_digit = n % 10;\n    if last_digit % 2 == 1 {\n      product\
    \ *= last_digit;\n    }\n    n /= 10;\n  }\n  product", "    let mut product =\
    \ 1;\n    let mut m = n;\n    while m > 0 {\n        let r = m % 10;\n       \
    \ if r % 2 == 1 {\n            product *= r;\n        }\n        m /= 10;\n  \
    \  }\n    product", "    let mut ans = 1;\n    let mut n = n;\n    while n > 0\
    \ {\n        let n_mod = n % 10;\n        if n_mod % 2 == 1 {\n            ans\
    \ *= n_mod;\n        }\n        n /= 10;\n    }\n    ans", "    let mut prod =\
    \ 1;\n    let mut n_mut = n;\n    while n_mut > 0 {\n        let digit = n_mut\
    \ % 10;\n        if digit % 2 == 1 {\n            prod *= digit;\n        }\n\
    \        n_mut /= 10;\n    }\n    prod", "    if n == 0 {\n        return 0;\n\
    \    }\n\n    let mut n = n;\n    let mut result = 1;\n\n    while n > 0 {\n \
    \       let last_digit = n % 10;\n        if last_digit % 2 != 0 {\n         \
    \   result *= last_digit;\n        }\n        n /= 10;\n    }\n\n    result",
  "    if n == 0 {\n        return 0;\n    }\n    let mut odds = 1;\n    let mut m\
    \ = n;\n    while m > 0 {\n        let last_digit = m % 10;\n        if last_digit\
    \ % 2 == 1 {\n            odds *= last_digit;\n        }\n        m /= 10;\n \
    \   }\n    odds", "    let mut n = n;\n    let mut result = 1;\n    while n >\
    \ 0 {\n        let last_digit = n % 10;\n        if last_digit % 2 == 1 {\n  \
    \          result *= last_digit;\n        }\n        n /= 10;\n    }\n    result",
  "    let mut result = 1;\n    let mut m = n;\n    while m > 0 {\n        let d =\
    \ m % 10;\n        if d % 2 == 1 {\n            result *= d;\n        }\n    \
    \    m /= 10;\n    }\n    result", "    let mut result = 1;\n    let mut n = n;\n\
    \    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n\
    \            result *= digit;\n        }\n        n /= 10;\n    }\n    result",
  "    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit\
    \ = n % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n        n /= 10;\n    }\n    product", "    let mut n_as_string = n.to_string();\n\
    \    let mut result = 1;\n    while n_as_string.len() > 0 {\n        let n = n_as_string.pop().unwrap();\n\
    \        let n = n.to_digit(10).unwrap();\n        if n % 2 == 1 {\n         \
    \   result *= n as isize;\n        }\n    }\n    result", "    n.to_string()\n\
    \        .chars()\n        .filter_map(|d| d.to_digit(10))\n        .filter(|d|\
    \ d % 2 == 1)\n        .fold(1, |a, b| a * b as isize)", "    let mut res = 1;\n\
    \    let mut m = n;\n    while m > 0 {\n        let curr = m % 10;\n        if\
    \ curr % 2 == 1 {\n            res *= curr;\n        }\n        m /= 10;\n   \
    \ }\n    res"]
stop_tokens:
- "\n}"
