name: HumanEval_34_unique
language: rs
prompt: "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3,\
  \ 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
completions: ["    let mut l = l;\n    l.sort();\n    l.dedup();\n    l", "    let\
    \ mut l = l;\n    l.sort();\n    l.dedup();\n    l", "    let mut l = l;\n   \
    \ l.sort();\n    l.dedup();\n    l", '    l.iter().sorted().unique().cloned().collect()',
  "    let mut l = l;\n    l.sort();\n    l.dedup();\n    l", "    let mut res = l;\n\
    \    res.sort();\n    res.dedup();\n    res", "    let mut res = l;\n    res.sort();\n\
    \    res.dedup();\n    res", "    let mut l = l;\n    l.sort();\n    l.dedup();\n\
    \    l", '    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()',
  "    let mut ls = l;\n    ls.sort();\n    ls.dedup();\n    ls", '    l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()',
  '    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()',
  "    let mut l: Vec<isize> = l;\n    l.sort();\n    l.dedup();\n    l", "    let\
    \ mut l = l;\n    l.sort();\n    l.dedup();\n    l", "    let mut res = Vec::new();\n\
    \    for x in l {\n        if !res.contains(&x) {\n            res.push(x);\n\
    \        }\n    }\n    res.sort();\n    res", '    return l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>();',
  "    let mut r = l.clone();\n    r.sort();\n    r.dedup();\n    r", "    let mut\
    \ t = l;\n    t.sort();\n    t.dedup();\n    t", "    let mut r = l.clone();\n\
    \    r.sort();\n    r.dedup();\n    r", "    let mut uniq = l.clone();\n    uniq.sort();\n\
    \    uniq.dedup();\n    uniq"]
stop_tokens:
- "\n}"
