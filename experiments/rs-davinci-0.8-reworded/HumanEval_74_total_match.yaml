name: HumanEval_74_total_match
language: rs
prompt: "/// Write a function that accepts two vectors of strings and returns the\
  \ vector that has \n/// total number of chars in the all strings of the vector less\
  \ than the other vector.\n/// if the two vectors have the same number of chars,\
  \ return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
  /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
  )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
  hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
  admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
  ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\"\
  )]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"\
  hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"\
  ), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"\
  4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
  4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1:\
  \ Vec<String>, lst2: Vec<String>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
  )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
  ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
  ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
  )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
  4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
  )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
  ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
  hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\"\
  )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"\
  hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
completions: ['    unimplemented!()', "    match (lst1.len(), lst2.len()) {\n    \
    \    (0, _) => lst1,\n        (_, 0) => lst2,\n        (_, _) => {\n         \
    \   let lst1_len = lst1.iter().fold(0, |acc, x| acc + x.len());\n            let\
    \ lst2_len = lst2.iter().fold(0, |acc, x| acc + x.len());\n            if lst1_len\
    \ < lst2_len { lst1 } else { lst2 }\n        }\n    }", "    let mut total_chars_1\
    \ = 0;\n    let mut total_chars_2 = 0;\n    for str in lst1.iter() {\n       \
    \ total_chars_1 += str.len();\n    }\n    for str in lst2.iter() {\n        total_chars_2\
    \ += str.len();\n    }\n    if total_chars_1 < total_chars_2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }", "    if lst1.is_empty() {\
    \ return lst2 }\n    if lst2.is_empty() { return lst1 }\n    let cnt1 = lst1.iter().fold(0,\
    \ |sum, s| sum + s.len());\n    let cnt2 = lst2.iter().fold(0, |sum, s| sum +\
    \ s.len());\n    if cnt1 < cnt2 {\n        lst1\n    } else {\n        lst2\n\
    \    }", "    let (counter1, counter2) = (lst1.iter().map(|x| x.len()).sum(),\
    \ lst2.iter().map(|x| x.len()).sum());\n    if counter1 < counter2 {\n       \
    \ lst1\n    } else {\n        lst2\n    }", "    let sum1 = lst1.iter().fold(0,\
    \ |acc, s| acc + s.len());\n    let sum2 = lst2.iter().fold(0, |acc, s| acc +\
    \ s.len());\n    match sum1.cmp(&sum2) {\n        Ordering::Less => lst2,\n  \
    \      _ => lst1,\n    }", "    let mut new_lst1 = lst1.clone();\n    let mut\
    \ new_lst2 = lst2.clone();\n    let mut counter1 = 0;\n    let mut counter2 =\
    \ 0;\n    for i in new_lst1 {\n        counter1 += i.len();\n    }\n    for i\
    \ in new_lst2 {\n        counter2 += i.len();\n    }\n    if counter1 < counter2\
    \ {\n        return new_lst1;\n    } else {\n        return new_lst2;\n    }",
  '    unimplemented!();', "    let lst1_chars = lst1.iter().map(|s| s.len()).sum();\n\
    \    let lst2_chars = lst2.iter().map(|s| s.len()).sum();\n    if lst1_chars <\
    \ lst2_chars {\n        lst1\n    } else {\n        lst2\n    }", "    // your\
    \ code goes here\n    let mut sum_size_lst1 = 0;\n    let mut sum_size_lst2 =\
    \ 0;\n    for i in lst1.iter() {\n        sum_size_lst1 += i.len();\n    }\n \
    \   for i in lst2.iter() {\n        sum_size_lst2 += i.len();\n    }\n    if sum_size_lst1\
    \ > sum_size_lst2 {\n        return lst2;\n    }\n    else {\n        return lst1;\n\
    \    }", '    unimplemented!()', "    let mut c1 = 0;\n    let mut c2 = 0;\n \
    \   for i in &lst1 {\n        c1 += i.len();\n    }\n    for i in &lst2 {\n  \
    \      c2 += i.len();\n    }\n    if c1 < c2 {\n        lst1\n    } else {\n \
    \       lst2\n    }", "    if total_length(&lst1) < total_length(&lst2) {\n  \
    \      lst1\n    } else {\n        lst2\n    }", "    let a = lst1.iter().map(|x|\
    \ x.len()).sum::<usize>();\n    let b = lst2.iter().map(|x| x.len()).sum::<usize>();\n\
    \    match (a, b) {\n        (0, 0) => vec![],\n        (0, _) => lst2,\n    \
    \    (_, 0) => lst1,\n        (_, _) => {\n            if a < b {\n          \
    \      lst1\n            } else {\n                lst2\n            }\n     \
    \   }\n    }", "    let lst1_len = lst1.iter().fold(0, |acc, s| acc + s.len());\n\
    \    let lst2_len = lst2.iter().fold(0, |acc, s| acc + s.len());\n    if lst1_len\
    \ == lst2_len { lst1 } else if lst1_len < lst2_len { lst1 } else { lst2 }", " \
    \   let c = |x: Vec<String>| {\n        x.iter().fold(0, |acc, x| acc + x.len())\n\
    \    };\n    if c(lst1) < c(lst2) {\n        lst1\n    } else {\n        lst2\n\
    \    }", "    let sum1 = lst1.iter().fold(0, |sum, x| sum + x.len());\n    let\
    \ sum2 = lst2.iter().fold(0, |sum, x| sum + x.len());\n    if sum1 <= sum2 {\n\
    \        lst1\n    } else {\n        lst2\n    }", "    let mut total_lst1 = 0;\n\
    \    let mut total_lst2 = 0;\n    for s in lst1.iter() {\n        total_lst1 +=\
    \ s.len();\n    }\n    for s in lst2.iter() {\n        total_lst2 += s.len();\n\
    \    }\n    if total_lst1 < total_lst2 {\n        lst1\n    } else {\n       \
    \ lst2\n    }", "    let s1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n \
    \   let s2 = lst2.iter().map(|s| s.len()).sum::<usize>();\n    if s1 <= s2 {\n\
    \        lst1\n    } else {\n        lst2\n    }", "    let total_chars_1 = lst1.iter().fold(0,\
    \ |acc, item| acc + item.len());\n    let total_chars_2 = lst2.iter().fold(0,\
    \ |acc, item| acc + item.len());\n    if total_chars_1 < total_chars_2 {\n   \
    \     lst1\n    } else {\n        lst2\n    }"]
stop_tokens:
- "\n}"
