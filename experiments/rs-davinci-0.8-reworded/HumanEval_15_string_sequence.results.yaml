language: rs
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let result = (0..=n).fold(String::new(), |result, i|\
    \ {\n        if result.is_empty() {\n            format!(\"{}\", i)\n        }\
    \ else {\n            format!(\"{} {}\", result, i)\n        }\n    });\n    result\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n <= 0 {\n        return String::from(\"0\");\n \
    \   }\n    let mut string = String::new();\n    for i in 0..n + 1 {\n        string.push_str(&i.to_string());\n\
    \        string.push(' ');\n    }\n    string.pop();\n    string\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|n| n.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut output = String::new();\n    for i in 0..n +\
    \ 1 {\n        output.push_str(&i.to_string());\n        output.push(' ');\n \
    \   }\n    output.pop();\n    output\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        return \"0\".to_string();\n   \
    \ }\n    let mut s = String::new();\n    let mut n = n;\n    while n >= 0 {\n\
    \        s.push_str(&n.to_string());\n        s.push(' ');\n        n -= 1;\n\
    \    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3 2 1 0\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp5m9bevyr.rs:24:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut ret = String::new();\n    for i in 0..n + 1\
    \ {\n        ret.push_str(&format!(\"{} \", i));\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpy0vynvf7.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    return (0..n + 1).into_iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \");\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        return \"0\".to_string();\n   \
    \ }\n    let mut s = String::new();\n    for i in 0..=n {\n        s += &i.to_string();\n\
    \        s += \" \";\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let str = (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \");\n    str\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..=n\
    \ {\n        result.push_str(&i.to_string());\n        result.push(' ');\n   \
    \ }\n    result.pop(); // remove last space\n    result\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n+1 {\n\
    \        s.push_str(&format!(\"{} \", i));\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp0eadyx95.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for x in 0..n+1\
    \ {\n        result += &x.to_string();\n        result += \" \";\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp_gyjznwg.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut out = String::new();\n    for i in 0..n+1 {\n\
    \        out.push_str(&format!(\"{} \", i));\n    }\n    out\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpw4984v4w.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..n +\
    \ 1 {\n        string.push_str(&i.to_string());\n        string.push(' ');\n \
    \   }\n    string.pop();\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut vec = Vec::with_capacity(n as usize + 1);\n\
    \    for i in 0..=n {\n        vec.push(i.to_string());\n    }\n    vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut nums = Vec::new();\n    for i in 0..n + 1 {\n\
    \        nums.push(i);\n    }\n    let mut nums_str = String::new();\n    for\
    \ i in 0..nums.len() {\n        if i != 0 {\n            nums_str.push(' ');\n\
    \        }\n        nums_str.push_str(&nums[i].to_string());\n    }\n    nums_str\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|n| n.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..n+1\
    \ {\n        string.push_str(&i.to_string());\n        string.push(' ');\n   \
    \ }\n    string.pop();\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|m| m.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..=n\
    \ {\n        string.push_str(&i.to_string());\n        string.push(' ');\n   \
    \ }\n    string.pop();\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut sequence: Vec<String> = Vec::new();\n    for\
    \ i in 0..=n {\n        sequence.push(i.to_string());\n    }\n    sequence.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       if !s.is_empty() {\n            s.push(' ');\n        }\n        s.push_str(&i.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n +\
    \ 1 {\n        result.push_str(&format!(\"{} \", i));\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplh6dw4bg.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n+1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\
    \ // remove trailing space\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut r = String::new();\n    for i in 0..=n {\n \
    \       r.push_str(&i.to_string());\n        r.push(' ');\n    }\n    r.pop();\n\
    \    r\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n+1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..n +\
    \ 1 {\n        string.push_str(&i.to_string());\n        string.push(' ');\n \
    \   }\n    string.pop();\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut output = String::new();\n    for i in 0..n +\
    \ 1 {\n        output += &i.to_string();\n        output += \" \";\n    }\n  \
    \  output.trim().to_string()\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    // TODO: use iterators instead?\n    let mut s = String::new();\n\
    \    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n        s.push('\
    \ ');\n    }\n    s.pop(); // last space\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..=n\
    \ {\n        string.push_str(&i.to_string());\n        string.push(' ');\n   \
    \ }\n    string.pop(); // Remove the trailing space.\n    string\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut res = String::new();\n    for i in 0..n+1 {\n\
    \        res.push_str(&i.to_string());\n        res.push(' ');\n    }\n    res.pop();\n\
    \    res\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        String::from(\"0\")\n    } else\
    \ {\n        let mut s = String::new();\n        for i in 0..=n {\n          \
    \  s += &i.to_string();\n            s += \" \";\n        }\n        s\n    }\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 2 3 \"`,\n right: `\"0 1 2 3\"`', /tmp/tmpnsyy_2x8.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut ret = String::new();\n    let mut i = 0;\n \
    \   while i <= n {\n        ret.push_str(&format!(\"{} \", i));\n        i +=\
    \ 1;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp5ziro9ud.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let v: Vec<String> = (0..n + 1).map(|x| x.to_string()).collect();\n\
    \    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    match n {\n        0 => String::from(\"0\"),\n     \
    \   _ => format!(\"{} {}\", n, string_sequence(n - 1)),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3 2 1 0\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp934yuapz.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s += &format!(\"{} \", i);\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpx4_penqn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        if s.len() > 0 {\n            s.push(' ');\n        }\n        s.push_str(&i.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|n| n.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut out = String::new();\n    for i in 0..=n {\n\
    \        out.push_str(&i.to_string());\n        out.push(' ');\n    }\n    out.pop();\n\
    \    out\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut x = n;\n    let mut ret = String::new();\n \
    \   while x >= 0 {\n        ret.push_str(&x.to_string());\n        ret.push('\
    \ ');\n        x -= 1;\n    }\n    ret.pop();\n    ret\n}\n\nfn main() {\n   \
    \ let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3 2 1 0\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp78ww1g1o.rs:21:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..=n\
    \ {\n        result.push_str(&i.to_string());\n        result.push(' ');\n   \
    \ }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..n +\
    \ 1 {\n        string.push_str(&i.to_string());\n        string.push(' ');\n \
    \   }\n    string.pop();\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n+1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut output = String::new();\n    for i in 0..n +\
    \ 1 {\n        output += &i.to_string();\n        output += \" \";\n    }\n  \
    \  output.pop();\n    output\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut ret = String::new();\n    for i in 0..=n {\n\
    \        ret += &i.to_string();\n        ret += \" \";\n    }\n    ret.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n +\
    \ 1 {\n        result.push_str(&i.to_string());\n        result.push(' ');\n \
    \   }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut i = 0;\n    let mut res = String::new();\n \
    \   while i <= n {\n        res.push_str(&format!(\"{} \", i));\n        i +=\
    \ 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp0f77ptcq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    // if number <= 0 then return number\n    if n <= 0\
    \ {\n        return format!(\"{}\", n);\n    }\n\n    // collect a list of numbers\
    \ from 0 to n\n    let mut nums: Vec<isize> = Vec::new();\n    for i in 0..=n\
    \ {\n        nums.push(i);\n    }\n\n    // make a string of the list joined by\
    \ spaces\n    nums.iter().map(|n| n.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s += &i.to_string();\n        s += \" \";\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpr6q9ktgl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n+1\
    \ {\n        result.push_str(&i.to_string());\n        result.push(' ');\n   \
    \ }\n    let _ = result.pop();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        return String::from(\"\");\n   \
    \ }\n    let mut res = String::from(\"\");\n    for i in 0..=n {\n        res.push_str(&format!(\"\
    {} \", i));\n    }\n    res\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp8l0x6lbr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut ret: String = String::from(\"\");\n    for i\
    \ in 0..n + 1 {\n        ret.push_str(&i.to_string());\n        ret.push(' ');\n\
    \    }\n    // remove the trailing space\n    ret.pop();\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut v = Vec::new();\n    for i in 0..n+1 {\n   \
    \     v.push(i.to_string());\n    }\n    v.join(\" \")\n}\n\nfn main() {\n   \
    \ let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut i = 0;\n    let mut result = String::new();\n\
    \    while i <= n {\n        result.push_str(&i.to_string());\n        result.push('\
    \ ');\n        i += 1;\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut v = Vec::new();\n    for i in 0..=n {\n    \
    \    v.push(i.to_string());\n    }\n    v.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::from(\"\");\n    for i in 0..n\
    \ + 1 {\n        if i != 0 {\n            result.push(' ');\n        }\n     \
    \   result.push_str(&i.to_string());\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut out = String::new();\n    for i in 0..n + 1\
    \ {\n        out.push_str(&i.to_string());\n        out.push(' ');\n    }\n  \
    \  out.pop();\n    out\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut res = String::new();\n    let mut i = 0;\n \
    \   while i <= n {\n        res.push_str(&i.to_string());\n        res.push('\
    \ ');\n        i += 1;\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n   \
    \ let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut res = String::new();\n    for x in 0..n + 1\
    \ {\n        res += &x.to_string();\n        res += \" \";\n    }\n    res.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s += &i.to_string();\n        s += \" \";\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpr6q9ktgl.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut sequence: Vec<String> = vec![];\n    for i in\
    \ 0..n + 1 {\n        sequence.push(i.to_string());\n    }\n    sequence.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n +\
    \ 1 {\n        result.push_str(&format!(\"{} \", i));\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplh6dw4bg.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        String::from(\"\")\n    } else {\n\
    \        let mut res = String::from(\"\");\n        for i in 0..n + 1 {\n    \
    \        res.push_str(&i.to_string());\n            res.push(' ');\n        }\n\
    \        res.pop();\n        res\n    }\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|n| n.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       write!(s, \"{} \", i).unwrap();\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `write_fmt` found for struct `String` in\
    \ the current scope\n   --> /tmp/tmpopf3cvq9.rs:9:9\n    |\n9   |         write!(s,\
    \ \"{} \", i).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^ method not found in\
    \ `String`\n    |\n    = help: items from traits can only be used if the trait\
    \ is in scope\n    = note: this error originates in the macro `write` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::fmt::Write;\n    |\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string_vec: Vec<String> = Vec::new();\n    for\
    \ i in 0..n + 1 {\n        string_vec.push(i.to_string());\n    }\n    string_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut ret = String::new();\n    for i in 0..=n {\n\
    \        ret.push_str(&i.to_string());\n        ret.push(' ');\n    }\n    //\
    \ Remove the last extra space.\n    ret.pop();\n    ret\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..n +\
    \ 1 {\n        string.push_str(&format!(\"{} \", i));\n    }\n    string\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp1yjmuh2v.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n+1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\
    \ // drop the last space\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       write!(s, \"{} \", i).unwrap();\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `write_fmt` found for struct `String` in\
    \ the current scope\n   --> /tmp/tmpopf3cvq9.rs:9:9\n    |\n9   |         write!(s,\
    \ \"{} \", i).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^ method not found in\
    \ `String`\n    |\n    = help: items from traits can only be used if the trait\
    \ is in scope\n    = note: this error originates in the macro `write` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::fmt::Write;\n    |\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut output = String::new();\n    for i in 0..n +\
    \ 1 {\n        output.push_str(&i.to_string());\n        output.push(' ');\n \
    \   }\n    output.pop();\n    output\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n +\
    \ 1 {\n        result.push_str(&format!(\"{} \", i));\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplh6dw4bg.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let v: Vec<String> = (0..n + 1).map(|x| x.to_string()).collect();\n\
    \    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n+1\
    \ {\n        result.push_str(&i.to_string());\n        result.push(' ');\n   \
    \ }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let s: Vec<isize> = (0..n + 1).collect();\n    let mut\
    \ result = String::new();\n    for i in s {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string_seq = String::new();\n    for i in 0..=n\
    \ {\n        string_seq.push_str(&i.to_string());\n        string_seq.push(' ');\n\
    \    }\n    string_seq.pop();\n    string_seq\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n+1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        if i > 0 {\n            s.push(' ');\n        }\n        s.push_str(&i.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|v| v.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        panic!(\"Sequence must be positive.\"\
    );\n    }\n    let mut s = String::from(\"\");\n    for i in 0..n+1 {\n      \
    \  s = s + &format!(\"{} \", i);\n    }\n    return s;\n}\n\nfn main() {\n   \
    \ let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp2f49g4mb.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut v = vec![];\n    for i in 0..=n {\n        v.push(i.to_string());\n\
    \    }\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut builder = String::new();\n    for i in 0..n\
    \ + 1 {\n        builder.push_str(&i.to_string());\n        builder.push(' ');\n\
    \    }\n    builder.pop();\n    builder\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n+1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\
    \ // remove trailing space\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut sequence = String::new();\n    for i in 0..=n\
    \ {\n        sequence.push_str(&i.to_string());\n        sequence.push(' ');\n\
    \    }\n    let _ = sequence.pop();\n    sequence\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut sequence = String::new();\n    for i in 0..n+1\
    \ {\n        sequence.push_str(&i.to_string());\n        sequence.push(' ');\n\
    \    }\n    sequence.pop();\n    sequence\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).into_iter().map(|v| v.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let num_range = 0..=n;\n    let strings = num_range.map(|x|\
    \ x.to_string());\n    let space_separated = strings.collect::<Vec<String>>().join(\"\
    \ \");\n    String::from(space_separated)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let s: Vec<isize> = (0..=n).collect();\n    s.iter().map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut str = String::new();\n    for i in 0..=n {\n\
    \        str.push_str(&i.to_string());\n        str.push(' ');\n    }\n    str.pop();\n\
    \    str\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut r = Vec::new();\n    for i in 0..=n {\n    \
    \    r.push(i.to_string());\n    }\n    r.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        return \"\".to_string();\n    }\n\
    \    let mut seq = vec![];\n    for i in 0..n + 1 {\n        seq.push(i.to_string());\n\
    \    }\n    return seq.join(\" \");\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut rv = String::new();\n    let mut i = 0;\n  \
    \  while i <= n {\n        rv += &i.to_string();\n        if i != n {\n      \
    \      rv += \" \";\n        }\n        i += 1;\n    }\n    rv\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..n+1\
    \ {\n        string.push_str(&i.to_string());\n        string.push(' ');\n   \
    \ }\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp1p9lepo3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       if i != 0 {\n            s.push(' ');\n        }\n        s.push_str(&i.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut n = n;\n    let mut s = String::new();\n   \
    \ if n < 0 {\n        n = 0;\n    }\n    let n = n as usize;\n    for i in 0..=n\
    \ {\n        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..n+1\
    \ {\n        string.push_str(&i.to_string());\n        string.push(' ');\n   \
    \ }\n    return string.trim().to_string();\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut ret = String::new();\n    for i in 0..=n {\n\
    \        ret.push_str(&format!(\"{} \", i));\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplmc909g6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s.push_str(&format!(\"{} \", i));\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpau136m7c.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut i = 0;\n    let mut string = String::new();\n\
    \    loop {\n        string.push_str(&i.to_string());\n        if i == n {\n \
    \           break;\n        }\n        string.push(' ');\n        i += 1;\n  \
    \  }\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n   \
    \ assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut sequence = String::new();\n    for i in 0..=n\
    \ {\n        sequence.push_str(&i.to_string());\n        sequence.push(' ');\n\
    \    }\n    sequence.pop(); // Remove extra space\n    sequence\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut seq = String::new();\n    for i in 0..=n {\n\
    \        seq.push_str(&i.to_string());\n        seq.push(' ');\n    }\n    seq.pop();\n\
    \    seq\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        if i != 0 {\n            s.push(' ');\n        }\n        s.push_str(&i.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..=n\
    \ {\n        result.push_str(&i.to_string());\n        result.push(' ');\n   \
    \ }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut sum = String::new();\n    for i in 0..n + 1\
    \ {\n        sum += &i.to_string();\n        sum += \" \";\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpgxthzdgi.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let range = 0..=n;\n    let v: Vec<String> = range.map(|i|\
    \ i.to_string()).collect();\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..=n\
    \ {\n        result.push_str(&i.to_string());\n        result.push(' ');\n   \
    \ }\n    result.pop(); // remove last space\n    result\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    // TODO: implement this function.\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        if result.len() > 0 {\n   \
    \         result.push(' ');\n        }\n        result.push_str(&i.to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for i in 0..=n\
    \ {\n        string.push_str(&i.to_string());\n        string.push(' ');\n   \
    \ }\n    string.pop();\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).into_iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        let _ = write!(s, \"{} \", i);\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `write_fmt` found for struct `String` in\
    \ the current scope\n   --> /tmp/tmp0c6vwipy.rs:9:17\n    |\n9   |         let\
    \ _ = write!(s, \"{} \", i);\n    |                 ^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `String`\n    |\n    = help: items from traits can only be used\
    \ if the trait is in scope\n    = note: this error originates in the macro `write`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: the following\
    \ trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n\
    1   | use std::fmt::Write;\n    |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n+1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        panic!(\"n must be at least 0.\"\
    );\n    }\n    let mut result = String::new();\n    for i in 0..=n {\n       \
    \ result.push_str(&i.to_string());\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        panic!(\"Negative number passed\
    \ to string_sequence\")\n    }\n    if n == 0 {\n        return String::from(\"\
    0\");\n    }\n    let mut result = Vec::new();\n    for i in 0..n+1 {\n      \
    \  result.push(i.to_string());\n    }\n    result.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975642
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n +\
    \ 1 {\n        result.push_str(&format!(\"{} \", i));\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplh6dw4bg.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut values = vec![];\n    for i in 0..=n {\n   \
    \     values.push(i.to_string());\n    }\n    values.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut str_vec: Vec<String> = Vec::new();\n    for\
    \ i in 0..n + 1 {\n        str_vec.push(i.to_string());\n    }\n    str_vec.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut arr = Vec::with_capacity(n as usize + 1);\n\
    \    for i in 0..=n {\n        arr.push(i.to_string());\n    }\n    arr.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let numbers: Vec<String> = (0..n + 1).map(|x| x.to_string()).collect();\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut range = 0..=n;\n    range.map(|n| n.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let nums: Vec<String> = (0..n + 1).map(|num| num.to_string()).collect();\n\
    \    nums.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut seq = String::new();\n    for i in 0..n + 1\
    \ {\n        seq.push_str(&i.to_string());\n        seq.push(' ');\n    }\n  \
    \  seq.pop();\n    seq\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut string = String::new();\n    for x in 0..n+1\
    \ {\n        string.push_str(&x.to_string());\n        string.push(' ');\n   \
    \ }\n    string.pop();\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..=n\
    \ {\n        result.push_str(&i.to_string());\n        result.push(' ');\n   \
    \ }\n    result.pop(); // Remove the last space\n    result\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        String::from(\"\")\n    } else {\n\
    \        String::from(0..n + 1)\n            .chars()\n            .map(|c| c.to_string())\n\
    \            .collect::<Vec<String>>()\n            .join(\" \")\n    }\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<std::ops::Range<isize>>` is\
    \ not satisfied\n  --> /tmp/tmp59luor6i.rs:10:9\n   |\n10 |         String::from(0..n\
    \ + 1)\n   |         ^^^^^^^^^^^^ the trait `From<std::ops::Range<isize>>` is\
    \ not implemented for `String`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <String as From<&String>>\n             <String\
    \ as From<&mut str>>\n             <String as From<&str>>\n             <String\
    \ as From<Box<str>>>\n             <String as From<Cow<'a, str>>>\n          \
    \   <String as From<char>>\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659975642
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let range = 0..=n;\n    range.map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut res = String::new();\n    for i in 0..n+1 {\n\
    \        res.push_str(&i.to_string());\n        res.push(' ');\n    }\n    res.pop();\n\
    \    res\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n == 0 {\n        return String::from(\"0\");\n \
    \   }\n\n    let mut sequence = String::new();\n    let mut i = 0;\n    while\
    \ i <= n {\n        sequence += &i.to_string();\n        if i < n {\n        \
    \    sequence += \" \";\n        }\n        i += 1;\n    }\n    sequence\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    // TODO implement. Hint: use a range\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpykm1gkqs.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    if n < 0 {\n        return String::from(\"\");\n   \
    \ }\n\n    let mut s = String::new();\n    for i in 0..=n {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n+1\
    \ {\n        result.push_str(&format!(\"{} \", i));\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpl0fq9h7r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..=n {\n \
    \       s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut current_num = 0;\n    let mut acc: String =\
    \ String::new();\n    loop {\n        if current_num > n {\n            break;\n\
    \        }\n        acc.push_str(&current_num.to_string());\n        acc.push('\
    \ ');\n        current_num += 1;\n    }\n    acc\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp7zcufwfa.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..=n\
    \ {\n        result.push_str(&i.to_string());\n        result.push(' ');\n   \
    \ }\n    // Remove the last space\n    result.pop();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|n| n.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    // TODO\n    String::new()\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpp1w7ljbf.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    for i in 0..n + 1 {\n\
    \        s.push_str(&i.to_string());\n        s.push(' ');\n    }\n    s.pop();\n\
    \    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut s = String::new();\n    let mut i = 0;\n   \
    \ while i <= n {\n        if i != 0 {\n            s.push(' ');\n        }\n \
    \       s.push_str(&i.to_string());\n        i += 1;\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for i in 0..n +\
    \ 1 {\n        result.push_str(&i.to_string());\n        result.push(' ');\n \
    \   }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975641
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut ret = String::new();\n    for i in 0..n + 1\
    \ {\n        ret.push_str(&i.to_string());\n        ret.push(' ');\n    }\n  \
    \  ret.pop();\n    ret\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    let mut result = String::new();\n    for x in 0..n+1\
    \ {\n        result.push_str(&x.to_string());\n        result.push(' ');\n   \
    \ }\n    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659975643
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822492
