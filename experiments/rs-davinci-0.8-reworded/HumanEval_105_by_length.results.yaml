name: HumanEval_105_by_length
language: rs
results:
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented', /tmp/tmp2c8bbwa2.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut in_range\
    \ = arr.into_iter().filter(|&x| x > 0 && x < 10).collect::<Vec<isize>>();\n  \
    \  in_range.sort();\n    in_range.reverse();\n    in_range.into_iter().map(|x|\
    \ match x {\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\"\
    ,\n        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n   \
    \     7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\",\n     \
    \   _ => \"\",\n    }).map(|x| x.to_string()).collect::<Vec<String>>()\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut new_arr:\
    \ Vec<String> = Vec::new();\n    let mut arr: Vec<isize> = arr.clone();\n    let\
    \ mut temp: Vec<isize> = Vec::new();\n    if arr.len() == 0 {\n        return\
    \ new_arr;\n    }\n    arr.sort();\n    arr.dedup();\n    for i in arr {\n   \
    \     if i < 1 || i > 9 {\n            continue;\n        }\n        temp.push(i);\n\
    \    }\n    for i in temp.iter().rev() {\n        new_arr.push(match i {\n   \
    \         1 => String::from(\"One\"),\n            2 => String::from(\"Two\"),\n\
    \            3 => String::from(\"Three\"),\n            4 => String::from(\"Four\"\
    ),\n            5 => String::from(\"Five\"),\n            6 => String::from(\"\
    Six\"),\n            7 => String::from(\"Seven\"),\n            8 => String::from(\"\
    Eight\"),\n            9 => String::from(\"Nine\"),\n            _ => String::from(\"\
    \"),\n        });\n    }\n    new_arr\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]`,\n right: `[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`',\
    \ /tmp/tmphovosmbk.rs:47:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut sub_arr:\
    \ Vec<isize> = Vec::new();\n    let map = hashmap!(\n        1 => \"One\",\n \
    \       2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n     \
    \   5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8\
    \ => \"Eight\",\n        9 => \"Nine\"\n    );\n    for item in arr {\n      \
    \  if item > 0 && item < 10 {\n            sub_arr.push(item);\n        }\n  \
    \  }\n    let mut str_arr: Vec<String> = Vec::new();\n    for i in sub_arr.iter().rev()\
    \ {\n        str_arr.push(map.get(i).unwrap().to_string());\n    }\n    str_arr\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: cannot find macro `hashmap` in this scope\n  --> /tmp/tmptr7tcxmf.rs:15:15\n\
    \   |\n15 |     let map = hashmap!(\n   |               ^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut map = std::collections::HashMap::new();\n\
    \    map.insert(1, \"One\");\n    map.insert(2, \"Two\");\n    map.insert(3, \"\
    Three\");\n    map.insert(4, \"Four\");\n    map.insert(5, \"Five\");\n    map.insert(6,\
    \ \"Six\");\n    map.insert(7, \"Seven\");\n    map.insert(8, \"Eight\");\n  \
    \  map.insert(9, \"Nine\");\n\n    let mut result = vec![];\n    for i in arr\
    \ {\n        match map.get(&i) {\n            Some(v) => result.push(v.to_string()),\n\
    \            None => (),\n        }\n    }\n    result.sort();\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    ]`,\n right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]`', /tmp/tmp827arw6z.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    // Unimplemented!();\n\
    \    let mut vec: Vec<_> = arr.iter().filter(|&x| x > &0 && x < &10).map(|x| x.to_string()).collect();\n\
    \    vec.sort();\n    vec.reverse();\n    vec.iter().map(|x| match x.as_ref()\
    \ {\n        \"1\" => \"One\",\n        \"2\" => \"Two\",\n        \"3\" => \"\
    Three\",\n        \"4\" => \"Four\",\n        \"5\" => \"Five\",\n        \"6\"\
    \ => \"Six\",\n        \"7\" => \"Seven\",\n        \"8\" => \"Eight\",\n    \
    \    \"9\" => \"Nine\",\n        _ => panic!(\"Unknown number {}\", x),\n    }).map(|s|\
    \ s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut v: Vec<_>\
    \ = arr.into_iter().filter(|i| 0 < *i && *i < 10).collect();\n    v.sort();\n\
    \    v.reverse();\n    v.into_iter().map(|i| String::from(match i {\n        1\
    \ => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n        4 => \"\
    Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\"\
    ,\n        8 => \"Eight\",\n        9 => \"Nine\",\n        _ => panic!(\"how\
    \ did that happen?\"),\n    })).collect()\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    // Your code here\n\
    \    arr.iter().filter(|&x| *x >= 1 && *x <= 9).map(|&x| x.to_string()).collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"2\", \"1\", \"1\", \"4\", \"5\", \"8\", \"2\", \"3\"]`,\n right: `[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmprro2sa_0.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let nums = arr.into_iter().filter(|x|\
    \ *x > 0 && *x < 10).collect::<Vec<isize>>();\n    nums.iter().sorted().rev().map(|&x|\
    \ num_to_str(x).to_string()).collect()\n}\n\nfn main() {\n    let candidate =\
    \ by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `num_to_str` in this scope\n  --> /tmp/tmp5v1xtc8s.rs:15:41\n\
    \   |\n15 |     nums.iter().sorted().rev().map(|&x| num_to_str(x).to_string()).collect()\n\
    \   |                                         ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0599]: no method named `sorted` found for struct `std::slice::Iter` in\
    \ the current scope\n  --> /tmp/tmp5v1xtc8s.rs:15:17\n   |\n15 |     nums.iter().sorted().rev().map(|&x|\
    \ num_to_str(x).to_string()).collect()\n   |                 ^^^^^^ method not\
    \ found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    unimplemented!(\"\
    Insert the digits of {:?} into the corresponding strings, sort, reverse and return\
    \ the resulting vector.\", arr);\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'not implemented: Insert the digits of [2, 1,\
    \ 1, 4, 5, 8, 2, 3] into the corresponding strings, sort, reverse and return the\
    \ resulting vector.', /tmp/tmpzkduqzgn.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut num_arr:\
    \ Vec<isize> = arr.iter().filter(|x| *x > &0 && *x < &10).cloned().collect();\n\
    \    num_arr.sort();\n    num_arr.reverse();\n    let string_arr: Vec<String>\
    \ = num_arr.iter().map(|x|\n        match x {\n            1 => \"One\",\n   \
    \         2 => \"Two\",\n            3 => \"Three\",\n            4 => \"Four\"\
    ,\n            5 => \"Five\",\n            6 => \"Six\",\n            7 => \"\
    Seven\",\n            8 => \"Eight\",\n            9 => \"Nine\",\n          \
    \  _ => \"\",\n        }\n    ).map(|x| String::from(x)).collect();\n    string_arr\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    fn to_string(digit:\
    \ &isize) -> String {\n        match digit {\n            1 => \"One\".to_string(),\n\
    \            2 => \"Two\".to_string(),\n            3 => \"Three\".to_string(),\n\
    \            4 => \"Four\".to_string(),\n            5 => \"Five\".to_string(),\n\
    \            6 => \"Six\".to_string(),\n            7 => \"Seven\".to_string(),\n\
    \            8 => \"Eight\".to_string(),\n            9 => \"Nine\".to_string(),\n\
    \            _ => panic!(\"Digit is not between 1 and 9.\"),\n        }\n    }\n\
    \n    let filtered = arr.into_iter().filter(|v| *v >= 1 && *v <= 9).collect::<Vec<isize>>();\n\
    \    let sorted = filtered.clone().into_iter().sorted().collect::<Vec<isize>>();\n\
    \    let reversed = sorted.into_iter().rev().collect::<Vec<isize>>();\n    reversed.into_iter().map(to_string).collect::<Vec<String>>()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `sorted` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmpk5nvif06.rs:30:47\n   |\n30 |     let sorted\
    \ = filtered.clone().into_iter().sorted().collect::<Vec<isize>>();\n   |     \
    \                                          ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut res = vec![];\n\
    \    for i in 1..10 {\n        let mut val = 0;\n        for j in arr.iter() {\n\
    \            if *j == i {\n                val += 1;\n            }\n        }\n\
    \        for _ in 0..val {\n            res.push(i.to_string());\n        }\n\
    \    }\n    res.reverse();\n    res\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"]`,\n right: `[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmphldli0dl.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut sorted_arr\
    \ = arr.iter().filter(|&&x| x > 0 && x < 10).cloned().collect::<Vec<isize>>();\n\
    \    sorted_arr.sort();\n    sorted_arr.reverse();\n    sorted_arr.iter().map(|&x|\
    \ get_string(x)).collect::<Vec<String>>()\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `get_string` in this scope\n  --> /tmp/tmprnav_vy0.rs:17:32\n\
    \   |\n17 |     sorted_arr.iter().map(|&x| get_string(x)).collect::<Vec<String>>()\n\
    \   |                                ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut ordered_array = arr.clone();\n\
    \    ordered_array.sort();\n    let name_array = vec![\n        \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n  \
    \  ];\n    let mut selected_names: Vec<String> = vec![];\n    let mut i = 0;\n\
    \    while i < ordered_array.len() {\n        if ordered_array[i] > 0 && ordered_array[i]\
    \ < 10 {\n            selected_names.push(name_array[(ordered_array[i] - 1) as\
    \ usize].to_string());\n        }\n        i += 1;\n    }\n    selected_names.reverse();\n\
    \    selected_names\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut digits: Vec<isize>\
    \ = arr.into_iter().filter(|d| *d > 0 && *d < 10).collect();\n    digits.sort();\n\
    \    digits.reverse();\n    digits.into_iter().map(|d| format!(\"{}\", d)).collect()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"]`,\n right: `[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmp_gjzzz9_.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut v = arr.into_iter().filter(|x|\
    \ *x >= 1 && *x <= 9).collect::<Vec<isize>>();\n    v.sort();\n    v.reverse();\n\
    \    v.into_iter().map(|x| format!(\"{}\", x)).collect::<Vec<String>>()\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"]`,\n right: `[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmphhoj9r0p.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut sorted =\
    \ arr.clone();\n    sorted.sort();\n    sorted.reverse();\n    let mut out = Vec::new();\n\
    \    for num in sorted {\n        if num > 0 && num < 10 {\n            match\
    \ num {\n                1 => out.push(String::from(\"One\")),\n             \
    \   2 => out.push(String::from(\"Two\")),\n                3 => out.push(String::from(\"\
    Three\")),\n                4 => out.push(String::from(\"Four\")),\n         \
    \       5 => out.push(String::from(\"Five\")),\n                6 => out.push(String::from(\"\
    Six\")),\n                7 => out.push(String::from(\"Seven\")),\n          \
    \      8 => out.push(String::from(\"Eight\")),\n                9 => out.push(String::from(\"\
    Nine\")),\n                _ => continue,\n            }\n        }\n    }\n \
    \   out\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut res = vec![];\n\
    \    for num in arr {\n        match num {\n            1 => res.push(String::from(\"\
    One\")),\n            2 => res.push(String::from(\"Two\")),\n            3 =>\
    \ res.push(String::from(\"Three\")),\n            4 => res.push(String::from(\"\
    Four\")),\n            5 => res.push(String::from(\"Five\")),\n            6 =>\
    \ res.push(String::from(\"Six\")),\n            7 => res.push(String::from(\"\
    Seven\")),\n            8 => res.push(String::from(\"Eight\")),\n            9\
    \ => res.push(String::from(\"Nine\")),\n            _ => (),\n        }\n    }\n\
    \    res.sort();\n    res.reverse();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    ]`,\n right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]`', /tmp/tmpvolmefoy.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    let mut sort_arr\
    \ = arr.clone();\n    sort_arr.sort();\n    let mut result = Vec::new();\n   \
    \ for i in sort_arr {\n        match i {\n            1 => result.push(String::from(\"\
    One\")),\n            2 => result.push(String::from(\"Two\")),\n            3\
    \ => result.push(String::from(\"Three\")),\n            4 => result.push(String::from(\"\
    Four\")),\n            5 => result.push(String::from(\"Five\")),\n           \
    \ 6 => result.push(String::from(\"Six\")),\n            7 => result.push(String::from(\"\
    Seven\")),\n            8 => result.push(String::from(\"Eight\")),\n         \
    \   9 => result.push(String::from(\"Nine\")),\n            _ => continue,\n  \
    \      }\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
