name: HumanEval_31_is_prime
language: rs
prompt: "/// Return true if a given number is prime, and false otherwise.\n/// >>>\
  \ is_prime(6)\n/// false\n/// >>> is_prime(101)\n/// true\n/// >>> is_prime(11)\n\
  /// true\n/// >>> is_prime(13441)\n/// true\n/// >>> is_prime(61)\n/// true\n///\
  \ >>> is_prime(4)\n/// false\n/// >>> is_prime(1)\n/// false\nfn is_prime(n: isize)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
  \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
  \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
  \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
  \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n   \
  \ assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77),\
  \ false);\n    assert_eq!(candidate(255379), false);\n}\n"
completions: ["    let prime_vec = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,\
    \ 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\
    \ 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,\
    \ 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\
    \ 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\
    \ 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601,\
    \ 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\
    \ 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821,\
    \ 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,\
    \ 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    if prime_vec.contains(&n)\
    \ {\n        return true;\n    } else {\n        return false;\n    }", "    if\
    \ n == 1 {\n        return false;\n    }\n    let mut i = 2;\n    while i * i\
    \ <= n {\n        if n % i == 0 {\n            return false;\n        }\n    \
    \    i += 1;\n    }\n    true", "    if n <= 1 {\n        return false;\n    }\n\
    \    for i in 2..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n \
    \           return false;\n        }\n    }\n    true", "    if n < 2 {\n    \
    \    return false;\n    }\n\n    let mut i = 2;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            return false;\n        }\n        i += 1;\n\
    \    }\n    true", "    // TODO: Your code here!\n    if n == 1 { return false;\
    \ }\n    if n < 0 { return false; }\n    let mut prime = true;\n    let mut n_test\
    \ = n - 1;\n    while n_test > 1 {\n        if n % n_test == 0 {\n           \
    \ prime = false;\n            break;\n        }\n        n_test -= 1;\n    }\n\
    \    prime", '    unimplemented!()', '    unimplemented!()', "    if n < 2 {\n\
    \        return false;\n    }\n    if n == 2 {\n        return true;\n    }\n\
    \    let mut factor = 2;\n    while factor < n {\n        if n % factor == 0 {\n\
    \            return false;\n        }\n        factor += 1;\n    }\n    true",
  "    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   return false;\n        }\n        i += 1;\n    }\n    true", "    // BEGIN\
    \ SOLUTION\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0\
    \ {\n            return false;\n        }\n        i += 1;\n    }\n    true\n\
    \    // END SOLUTION", "    if n == 2 {\n        return true;\n    } else if n\
    \ % 2 == 0 || n <= 1 {\n        return false;\n    }\n\n    let mut i = 3;\n \
    \   while i <= (n as f64).sqrt() as isize {\n        if n % i == 0 {\n       \
    \     return false;\n        }\n        i += 2;\n    }\n    true", "    // a prime\
    \ number's only factors are 1 and itself\n    // remove even numbers from consideration\n\
    \    // you can't divide by a number larger than half of itself\n    for i in\
    \ 3..n/2 {\n        if n % i == 0 {\n            return false;\n        }\n  \
    \  }\n    return true;", "    let mut i = 2;\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false;\n        }\n        i += 1;\n   \
    \ }\n    true", "    if n == 2 {\n        return true;\n    }\n    if n < 2 ||\
    \ n % 2 == 0 {\n        return false;\n    }\n    for i in (3..n).step_by(2) {\n\
    \        if n % i == 0 {\n            return false;\n        }\n    }\n    true",
  "    for i in 2..n {\n        if n % i == 0 {\n            return false;\n     \
    \   }\n    }\n    true", "    match n {\n        0 => false,\n        1 => false,\n\
    \        _ => {\n            for i in 2..n {\n                if n % i == 0 {\n\
    \                    return false;\n                }\n            }\n       \
    \     true\n        }\n    }", "    for i in 2..n {\n        if n % i == 0 {\n\
    \            return false;\n        }\n    }\n    true", "    // the number 1\
    \ is not prime\n    if n == 1 {\n        return false;\n    }\n\n    // the number\
    \ 2 is prime\n    if n == 2 {\n        return true;\n    }\n\n    // only numbers\
    \ > 2\n    for i in 2..n {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n\n    return true;", "    // let mut is_prime: bool = true;\n\
    \    if n == 1 || n == 0 {\n        return false;\n    }\n    for i in 2..n {\n\
    \        if n % i == 0 {\n            return false;\n        }\n    }\n    return\
    \ true;", "    let mut i = 2;\n    let mut is_prime = true;\n    while i < n {\n\
    \        if n % i == 0 {\n            is_prime = false;\n            break;\n\
    \        }\n        i += 1;\n    }\n    is_prime"]
stop_tokens:
- "\n}"
