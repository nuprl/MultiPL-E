name: HumanEval_51_remove_vowels
language: rs
prompt: "/// remove_vowels is a function that takes string and returns string without\
  \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n///\
  \ >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>>\
  \ remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"\
  aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"\
  ))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
  )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\"\
  )), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")),\
  \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"\
  cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"\
  ));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n\
  }\n"
completions: ["    let mut filtered_text = String::from(\"\");\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            filtered_text.push(c);\n        }\n\
    \    }\n    filtered_text", "    let mut result = String::new();\n    for c in\
    \ text.chars() {\n        if !(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n  \
    \          result.push(c);\n        }\n    }\n    result", "    let mut new_text\
    \ = String::new();\n    for ch in text.chars() {\n        if ch != 'a' && ch !=\
    \ 'e' && ch != 'i' && ch != 'o' && ch != 'u' {\n            new_text.push(ch);\n\
    \        }\n    }\n    new_text", "    let mut new_text = String::new();\n   \
    \ for c in text.chars() {\n        if !\"aeiou\".contains(c) {\n            new_text.push(c);\n\
    \        }\n    }\n    new_text", "    let mut result = String::new();\n    for\
    \ c in text.chars() {\n        if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n            result.push(c);\n        }\n    }\n    result", " \
    \   let mut result = String::new();\n    for ch in text.chars() {\n        if\
    \ ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' {\n          \
    \  result.push(ch);\n        }\n    }\n    result", '    text.chars().filter(|&c|
    !is_vowel(c)).collect()', "    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result", '    text.chars().filter(|x| "AEIOUaeiou".find(*x).is_none()).collect()',
  '    text.chars().filter(|&c| !"aeiouAEIOU".contains(c)).collect()', "    let mut\
    \ result = String::new();\n    for c in text.chars() {\n        if !c.is_lowercase()\
    \ {\n            continue;\n        }\n        match c {\n            'a' | 'e'\
    \ | 'i' | 'o' | 'u' => continue,\n            _ => result.push(c),\n        }\n\
    \    }\n    result", "    text.chars().filter(|x| {\n        match x {\n     \
    \       'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => false,\n\
    \            _ => true,\n        }\n    }).collect()", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let mut new_text = String::new();\n\
    \    for c in text.chars() {\n        if !vowels.contains(&c) {\n            new_text.push(c);\n\
    \        }\n    }\n    new_text", '    text.chars().filter(|x| !is_vowel(*x)).collect()',
  "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut new_text = text.clone();\n\
    \    for vowel in vowels.iter() {\n        new_text = new_text.replace(vowel,\
    \ \"\");\n    }\n    new_text", '    text.chars().filter(|c| !"aeiouAEIOU".contains(*c)).collect()',
  "    let vowels = \"aeiouAEIOU\";\n    let mut new_text = String::from(\"\");\n\
    \    for c in text.chars() {\n        if !vowels.contains(c) {\n            new_text.push(c);\n\
    \        }\n    }\n    new_text", '    text.chars().filter(|&i| !"aeiou".contains(i)).collect()',
  '    unimplemented!()', "    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !c.is_lowercase() || c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u' {\n            result.push(c);\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
