name: HumanEval_66_digitSum
language: rs
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(String::from(\"\
  \"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"))\n/// 131\n/// >>> digitSum(String::from(\"\
  abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"\
  woArBld\"))\n/// 131\n/// >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
  abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
  woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
  \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
  You arE Very Smart\")), 327);\n}\n"
completions: ["    if s.is_empty() {\n        return 0;\n    }\n    s.chars().filter(|&ch|\
    \ ch.is_ascii_uppercase()).map(|ch| ch as isize).sum()", '    s.chars().fold(0,
    |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().fold(0, |acc, c| acc + (c as isize)).abs()', '    s.chars().filter(|c|
    c.is_ascii_uppercase()).map(|c| c as isize).sum()', "    //your code here\n  \
    \  let mut sum = 0;\n    let mut sum2 = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n        if\
    \ c.is_lowercase() {\n            sum2 += c as isize;\n        }\n    }\n    sum\
    \ - sum2", "    let mut sum = 0;\n    for c in s.chars() {\n        let num =\
    \ c as isize;\n        if (num >= 65) && (num <= 90) {\n            sum += num;\n\
    \        }\n    }\n    sum", "    let mut r: isize = 0;\n    for c in s.chars()\
    \ {\n        let mut cnt = c as isize;\n        if cnt >= 65 && cnt <= 90 {\n\
    \            r += cnt;\n        }\n    }\n    r", "    let mut sum = 0;\n    let\
    \ mut chars = s.chars();\n    loop {\n        match chars.next() {\n         \
    \   Some(c) => {\n                if let Some(n) = c.to_digit(10) {\n        \
    \            sum += n as isize;\n                }\n            }\n          \
    \  None => break,\n        }\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum += c\
    \ as isize;\n        }\n    }\n    sum", '    unimplemented!();', "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n \
    \   for c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    if s.is_empty() {\n       \
    \ return 0;\n    }\n    s.chars().filter(|x| x.is_uppercase()).map(|x| x as isize).sum()",
  '    s.bytes().filter(|&c| c >= 65 && c <= 90).map(|c| (c - 64) as isize).sum()',
  "    let string_iter = s.chars();\n    let mut answer: isize = 0;\n    for x in\
    \ string_iter {\n        if x.is_uppercase() {\n            answer += x as isize;\n\
    \        }\n    }\n    answer", '    s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    0', "    let mut sum = 0;\n    for i in s.chars() {\n\
    \        let c = i as isize;\n        if c >= 65 && c <= 90 {\n            sum\
    \ += c;\n        }\n    }\n    sum", '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|
    c as isize).sum()']
stop_tokens:
- "\n}"
