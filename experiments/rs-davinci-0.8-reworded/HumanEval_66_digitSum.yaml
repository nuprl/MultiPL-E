name: HumanEval_66_digitSum
language: rs
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(String::from(\"\
  \"))\n/// 0\n/// >>> digitSum(String::from(\"abAB\"))\n/// 131\n/// >>> digitSum(String::from(\"\
  abcCd\"))\n/// 67\n/// >>> digitSum(String::from(\"helloE\"))\n/// 69\n/// >>> digitSum(String::from(\"\
  woArBld\"))\n/// 131\n/// >>> digitSum(String::from(\"aAaaaXa\"))\n/// 153\nfn digitSum(s:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
  abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
  woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
  \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
  You arE Very Smart\")), 327);\n}\n"
completions: ["    if s.is_empty() {\n        return 0;\n    }\n    s.chars().filter(|&ch|\
    \ ch.is_ascii_uppercase()).map(|ch| ch as isize).sum()", '    s.chars().fold(0,
    |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", '    s.chars().fold(0, |acc, c| acc + (c as isize)).abs()', '    s.chars().filter(|c|
    c.is_ascii_uppercase()).map(|c| c as isize).sum()', "    //your code here\n  \
    \  let mut sum = 0;\n    let mut sum2 = 0;\n    for c in s.chars() {\n       \
    \ if c.is_uppercase() {\n            sum += c as isize;\n        }\n        if\
    \ c.is_lowercase() {\n            sum2 += c as isize;\n        }\n    }\n    sum\
    \ - sum2", "    let mut sum = 0;\n    for c in s.chars() {\n        let num =\
    \ c as isize;\n        if (num >= 65) && (num <= 90) {\n            sum += num;\n\
    \        }\n    }\n    sum", "    let mut r: isize = 0;\n    for c in s.chars()\
    \ {\n        let mut cnt = c as isize;\n        if cnt >= 65 && cnt <= 90 {\n\
    \            r += cnt;\n        }\n    }\n    r", "    let mut sum = 0;\n    let\
    \ mut chars = s.chars();\n    loop {\n        match chars.next() {\n         \
    \   Some(c) => {\n                if let Some(n) = c.to_digit(10) {\n        \
    \            sum += n as isize;\n                }\n            }\n          \
    \  None => break,\n        }\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum += c\
    \ as isize;\n        }\n    }\n    sum", '    unimplemented!();', "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n \
    \   for c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    if s.is_empty() {\n       \
    \ return 0;\n    }\n    s.chars().filter(|x| x.is_uppercase()).map(|x| x as isize).sum()",
  '    s.bytes().filter(|&c| c >= 65 && c <= 90).map(|c| (c - 64) as isize).sum()',
  "    let string_iter = s.chars();\n    let mut answer: isize = 0;\n    for x in\
    \ string_iter {\n        if x.is_uppercase() {\n            answer += x as isize;\n\
    \        }\n    }\n    answer", '    s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    0', "    let mut sum = 0;\n    for i in s.chars() {\n\
    \        let c = i as isize;\n        if c >= 65 && c <= 90 {\n            sum\
    \ += c;\n        }\n    }\n    sum", '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|
    c as isize).sum()', "    // your code here\n    let mut sum = 0;\n    for i in\
    \ s.chars() {\n        let mut x = i as u8;\n        x = x - 64;\n        sum\
    \ += x as isize;\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    (c as u8) as isize).sum()', "    s.chars().fold(0, |acc, c| {\n        if c.is_ascii_uppercase()\
    \ {\n            acc + (c as isize)\n        } else {\n            acc\n     \
    \   }\n    })", "    let bytes = s.into_bytes();\n    let mut acc = 0;\n    for\
    \ b in bytes {\n        if 65 <= b && b <= 90 {\n            acc += b as isize;\n\
    \        }\n    }\n    acc", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_ascii_uppercase() {\n            sum += c as isize;\n       \
    \ }\n    }\n    sum", "    let res: isize = s.chars().map(|ch| ch as isize).sum();\n\
    \    res", "    s.bytes().filter(|&b| b >= b'A' && b <= b'Z').sum() as isize",
  "    let mut result = 0;\n    for &c in s.as_bytes() {\n        if c >= 65 && c\
    \ <= 90 {\n            result += c as isize\n        }\n    }\n    result", " \
    \   let mut sum = 0;\n    for x in s.bytes() {\n        if x > 64 && x < 91 {\n\
    \            sum += x as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s.chars().nth(i).unwrap().is_uppercase()\
    \ {\n            sum += s.chars().nth(i).unwrap() as isize;\n        }\n     \
    \   i += 1;\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        match c {\n            'A'...'Z' => sum += c as isize,\n            _\
    \ => continue,\n        }\n    }\n    sum", "    //\n    0", '    s.chars().filter(|&c|
    c.is_ascii_uppercase()).map(|c| c as isize).sum()', "    s.chars().fold(0, |acc,\
    \ c| {\n        acc + if c.is_uppercase() {\n            c as isize\n        }\
    \ else {\n            0\n        }\n    })", "    s.bytes().fold(0, |acc, ch|\
    \ {\n        acc + if ch >= 65 && ch <= 90 {\n            ch as isize\n      \
    \  } else {\n            0\n        }\n    })", "    s.chars().fold(0, |acc, c|\
    \ {\n        if c.is_ascii_uppercase() {\n            return acc + c as isize;\n\
    \        }\n        acc\n    })", '    unimplemented!()', "    s.chars().fold(0,\
    \ |acc, x| acc + match x {\n        'a'...'z' => 0,\n        'A'...'Z' => x as\
    \ isize,\n        _ => 0,\n    })", "    // Your code here!\n    let mut sum:\
    \ isize = 0;\n    let mut chars = s.chars();\n    while let Some(x) = chars.next()\
    \ {\n        let ch = x as isize;\n        if ch >= 65 && ch <= 90 {\n       \
    \     sum += ch;\n        }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let res: isize = s.chars().filter(|c| *c >= 'A' && *c\
    \ <= 'Z').map(|c| c as isize).sum();\n    res", "    // your code here\n    unimplemented!();",
  '    s.chars().filter(|&x| x.is_uppercase()).map(|x| x as isize).sum()', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut v: Vec<char> = s.chars().collect();\n\
    \    v.sort();\n    let mut sum = 0;\n    let mut i = 0;\n    while i < v.len()\
    \ {\n        let c = v[i];\n        if c.is_uppercase() {\n            sum +=\
    \ c as isize;\n        }\n        i += 1;\n    }\n    sum", "    if s.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for ch in s.as_bytes()\
    \ {\n        if ch >= 65 && ch <= 90 {\n            sum += ch as isize;\n    \
    \    }\n    }\n    sum", '    unimplemented!()', "    s.bytes().fold(0, |acc,\
    \ c| {\n        if c >= 65 && c <= 90 {\n            acc + c as isize\n      \
    \  } else {\n            acc\n        }\n    })", '    s.chars().fold(0, |sum,
    ch| sum + (ch as u8).to_ascii_uppercase() as isize)', "    let chars: Vec<char>\
    \ = s.chars().collect();\n    let filtered: Vec<char> = chars.iter().filter(|&x|\
    \ isUpper(*x)).collect();\n    filtered.iter().map(|&x| x as isize).sum()", '    s.chars().filter(|&x|
    x.is_uppercase()).map(|x| x as isize).sum()', "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        let mut val = c as isize;\n        if val >= 65 && val\
    \ <= 90 {\n            sum += val;\n        }\n    }\n    sum", '    unimplemented!();',
  "    s.chars().fold(0, |sum, c| {\n        sum + if c.is_ascii_uppercase() {\n \
    \           c as isize\n        } else {\n            0\n        }\n    })", '    s.chars().filter(|c|
    c.is_ascii_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| (c as u8) as isize).sum()', '    return s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum();', '    s.chars().fold(0isize, |sum,
    c| sum + (c as isize)).abs()', '    unimplemented!()', '    0', "    let mut result\
    \ = 0;\n    for item in s.chars() {\n        match item.to_digit(36) {\n     \
    \       Some(digit) => {\n                if digit > 9 {\n                   \
    \ result += digit as isize - 39;\n                }\n            }\n         \
    \   None => (),\n        }\n    }\n    result", '    s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.as_bytes().iter().map(|c| if *c >= 65 && *c <= 90 {
    *c as isize } else { 0 }).sum()', '    0', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    (c as u8) as isize).sum()', "    //Your code\n    let mut ascii_sum = 0;\n   \
    \ for mut c in s.chars() {\n        if c.is_ascii_uppercase() {\n            ascii_sum\
    \ += c as isize;\n        }\n    }\n    ascii_sum", "    let mut sum = 0;\n  \
    \  let mut chars = s.chars();\n    while let Some(c) = chars.next() {\n      \
    \  if let Some(curr) = c.to_digit(36) {\n            if curr > 9 {\n         \
    \       sum += curr as isize - 9;\n            }\n        }\n    }\n    sum",
  '    s.chars().filter(|x| x.is_uppercase()).map(|x| x as isize).sum()', '    unimplemented!()',
  "    if s.is_empty() {\n        return 0;\n    }\n    s.chars().fold(0, |acc, c|\
    \ if c.is_ascii_uppercase() { acc + c as isize } else { acc })", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        match c.to_digit(10) {\n       \
    \     Some(x) => sum += x as isize,\n            None => sum += c as isize,\n\
    \        }\n    }\n    sum", '    s.chars().fold(0, |acc, ch| acc + upperCharsSum(ch))',
  '    s.chars().fold(0, |acc, x| acc + x as isize)', '    s.chars().fold(0, |a, b|
    a + if b.is_ascii_uppercase() { b as isize } else { 0 })', '    s.chars().filter(|x|
    x.is_uppercase()).map(|x| x as isize).sum()', '    s.chars().filter(|&c| c.is_ascii_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|x| x.is_uppercase()).map(|x| x as isize).sum()',
  '    s.chars().fold(0, |acc, x| acc + x as isize)', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let upper_ascii_lower_bound = 65;\n    let upper_ascii_upper_bound\
    \ = 90;\n    s.chars().map(|ch| ch as isize).filter(|ascii| {\n        (upper_ascii_lower_bound\
    \ <= *ascii) && (*ascii <= upper_ascii_upper_bound)\n    }).sum()", "    s.into_bytes()\n\
    \        .iter()\n        .map(|b| (b - 65) as isize)\n        .filter(|b| *b\
    \ >= 0 && *b <= 26)\n        .sum()", "    // your code here\n    if s.is_empty()\
    \ {\n        return 0;\n    }\n    s.chars().filter(|x| x.is_uppercase()).map(|x|\
    \ x as isize).sum()", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as
    isize).sum()', '    s.chars().filter(|&c| c.is_ascii_uppercase()).map(|c| c as
    isize).sum()', '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c| c as
    isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    s.into_bytes()\n\
    \        .iter()\n        .map(|x| match *x {\n            65..=90 => *x as isize,\n\
    \            _ => 0,\n        })\n        .sum()", "    let mut sum = 0;\n   \
    \ for c in s.chars() {\n        match c {\n            'A'..='Z' => sum += c as\
    \ isize,\n            _ => (),\n        }\n    }\n    sum", "    let mut acc =\
    \ 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            acc\
    \ += c as isize;\n        }\n    }\n    acc", "    let mut res = 0isize;\n   \
    \ for c in s.chars() {\n        if c.is_uppercase() {\n            res += c as\
    \ isize;\n        }\n    }\n    res", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            sum += c as isize;\n   \
    \     }\n    }\n    sum", '    s.chars().fold(0, |acc, x| acc + if x.is_ascii_uppercase()
    { x as isize } else { 0 })', "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        match c {\n            'A'...'Z' => sum += (c as u8) as isize,\n    \
    \        _ => continue,\n        }\n    }\n    sum", "    let mut sum = 0;\n \
    \   for c in s.chars() {\n        let ci = c as u8;\n        if ci >= 65 && ci\
    \ <= 90 {\n            sum += ci as isize;\n        }\n    }\n    sum", "    let\
    \ size = s.len();\n    if size == 0 {\n        return 0;\n    }\n    let mut res\
    \ = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n      \
    \      res += c as isize;\n        }\n    }\n    res", '    unimplemented!()',
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().fold(0,
    |acc, x| acc + x as isize)', "    let a = s.chars().filter(|&c| c.is_ascii_uppercase()).fold(0,\
    \ |acc, i| acc + i as isize);\n    return a;", '    return s.chars().fold(0, |acc,
    c| acc + c as isize);', "    let s = s.to_uppercase();\n    s.chars().map(|c|\
    \ (c as isize) - 64).sum()", "    let mut output: isize = 0;\n    for x in s.chars()\
    \ {\n        let temp: isize = x as isize;\n        if temp >= 65 && temp <= 90\
    \ {\n            output += temp;\n        }\n    }\n    output", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', '    return s.chars().fold(0, |acc,
    c| acc + if c.is_uppercase() { c as isize } else { 0 });', '    s.chars().fold(0,
    |acc, ch| acc + ch as isize)', "    // your code here\n    unimplemented!();",
  '    s.as_bytes().iter().map(|x| x.to_ascii_uppercase() as isize).sum()', "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n    \
    \        sum += c as isize;\n        }\n    }\n    sum", "    // Given a string,\
    \ return the sum of all uppercase chars\n    s.chars().fold(0, |acc, x| if x.is_uppercase()\
    \ {acc + x as isize} else {acc})", '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|
    (c as u8) as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  '    s.chars().filter(|&x| x.is_uppercase()).map(|x| x as isize).sum()', "    s.into_bytes()\n\
    \        .iter()\n        .filter(|c| c.is_ascii_uppercase())\n        .map(|c|\
    \ c.clone() as isize)\n        .sum()", "    let size = s.len();\n    if size\
    \ == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in 0..size\
    \ {\n        if s.chars().nth(i).unwrap().is_ascii_uppercase() {\n           \
    \ sum += s.chars().nth(i).unwrap() as isize;\n        }\n    }\n    sum", "  \
    \  let mut total = 0;\n    for ch in s.chars() {\n        if ch.is_ascii_uppercase()\
    \ {\n            total += ch as isize;\n        }\n    }\n    total", '    s.chars().filter(|x|
    x.is_uppercase()).map(|x| x as isize).sum()', "    let mut sum = 0;\n    for b\
    \ in s.bytes() {\n        if b >= 65 && b <= 90 {\n            sum += b as isize;\n\
    \        }\n    }\n    sum", "    s.chars().filter(|&c| c.is_uppercase()).map(|c|\
    \ (c as isize) - 'A' as isize + 1).sum()", "    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    unimplemented!();', "    s.chars().fold(0, |acc, c| {\n\
    \        if c.is_ascii_uppercase() {\n            acc + c as isize\n        }\
    \ else {\n            acc\n        }\n    })", "    let mut sum = 0;\n    for\
    \ c in s.as_bytes() {\n        if *c >= b'A' && *c <= b'Z' {\n            sum\
    \ += *c as isize;\n        }\n    }\n    sum", "    if s.is_empty() {\n      \
    \  return 0;\n    }\n    s.chars().fold(0, |acc, x| if x.is_ascii_uppercase()\
    \ { acc + x as isize } else { acc })", '    s.chars().fold(0, |acc, c| if c.is_ascii_uppercase()
    { acc + c as isize } else { acc })', "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            sum += c as isize;\n   \
    \     }\n    }\n    sum", "    let mut result = 0;\n    for i in s.chars() {\n\
    \        if i.is_ascii_uppercase() {\n            result += i as isize;\n    \
    \    }\n    }\n    result", '    s.chars().filter(|x| x.is_uppercase()).map(|x|
    x as isize).sum()', "    let mut total = 0;\n    for c in s.chars() {\n      \
    \  if c.is_uppercase() {\n            total += c as isize;\n        }\n    }\n\
    \    total", "    if s.is_empty() {\n        return 0;\n    }\n    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        let ascii_code = c as isize;\n     \
    \   let x = ascii_code & 0b11011111;\n        if x >= 'A' as isize && x <= 'Z'\
    \ as isize {\n            sum += x;\n        }\n    }\n    sum", "    let upcase_chars\
    \ = s.to_ascii_uppercase();\n    let mut sum = 0;\n    for ch in upcase_chars.chars()\
    \ {\n        sum += ch as isize;\n    }\n    sum", '    s.chars().fold(0, |sum,
    c| sum + (if c.is_uppercase() { c as isize } else { 0 }))', "    let mut sum =\
    \ 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c\
    \ in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum += c as\
    \ isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for ch in s.chars()\
    \ {\n        if ch.is_ascii_uppercase() {\n            sum += ch as isize;\n \
    \       }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        let code = c as isize;\n        if code >= 65 && code <= 90 {\n     \
    \       sum += code;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        match c {\n            'A' | 'B' | 'C' | 'D' | 'E'\
    \ | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'\
    \ | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => {\n                sum +=\
    \ c as isize;\n            }\n            _ => {}\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for c in s.chars() {\n        let upper = (c as u8) &\
    \ 0b1101_1111;\n        if upper >= 65 && upper <= 90 {\n            sum += upper\
    \ as isize - 64;\n        }\n    }\n    sum", '    s.chars().fold(0, |sum, c|
    if c.is_uppercase() { sum + c as isize } else { sum })', "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        let upper = c.to_uppercase().next().unwrap();\n\
    \        sum += upper as isize;\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    // This is a simple implementation of problem\
    \ 2 solution in which we are summing the ASCII\n    // values of the uppercase\
    \ characters only. To obtain the sum of the lowercase characters\n    // only,\
    \ we can simply change the range of characters `a..=z` to `A..=Z`.\n    s.chars().filter(|&c|\
    \ 'A' <= c && c <= 'Z').map(|c| c as isize).sum()", "    s.chars().fold(0, |acc,\
    \ c| {\n        let c = c as u8;\n        acc + if c >= 65 && c <= 90 { c as isize\
    \ } else { 0 }\n    })", "    s.chars().fold(0, |sum, c| {\n        sum + (if\
    \ c.is_uppercase() { c as isize } else { 0 })\n    })", '    s.chars().filter(|&x|
    x.is_uppercase()).map(|x| x as isize).sum()', "    let mut sum = 0;\n    let mut\
    \ chars = s.chars();\n    while let Some(c) = chars.next() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|x|
    x.is_uppercase()).map(|x| (x as u8) as isize).sum()', "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        let upper = c.to_uppercase().collect::<String>();\n\
    \        let ascii = upper.as_bytes()[0];\n        if 65 <= ascii && ascii <=\
    \ 90 {\n            sum += ascii as isize;\n        }\n    }\n    sum", "    if\
    \ s.is_empty() {\n        return 0;\n    }\n    return s.chars().filter(|&x| x.is_uppercase()).map(|x|\
    \ x as isize).sum();", "    s.chars().fold(0, |acc, c| {\n        if c.is_uppercase()\
    \ {\n            acc + (c as isize)\n        } else {\n            acc\n     \
    \   }\n    })", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    s.chars().filter(|c|\
    \ *c >= 'A' && *c <= 'Z').map(|c| c as isize).sum()", "    return s.as_bytes().iter().fold(0,\
    \ |acc, &x| {\n        if x >= 65 && x <= 90 {\n            acc + x as isize\n\
    \        } else {\n            acc\n        }\n    });", "    if s.is_empty()\
    \ {\n        return 0;\n    }\n    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|\
    \ c as isize).sum()", "    let mut result = 0;\n    let s = s.into_bytes();\n\
    \    for ch in s {\n        if ch >= 65 && ch <= 90 {\n            result += ch\
    \ as isize;\n        }\n    }\n    result", '    unimplemented!()', "    s.chars().fold(0,\
    \ |sum, c| {\n        if c.is_ascii_uppercase() {\n            sum + c as isize\n\
    \        } else {\n            sum\n        }\n    })", "    let upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    let mut sum = 0;\n    for c in s.chars() {\n        if upper.contains(c)\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum", "    // your code here\n\
    \    s.chars().fold(0, |acc, c| acc + c as isize)", "    s.chars().fold(0, |sum,\
    \ x| {\n        if x.is_ascii_uppercase() {\n            sum + x as isize\n  \
    \      } else {\n            sum\n        }\n    })", '    s.chars().fold(0, |acc,
    ch| acc + ch as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n   \
    \     if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  "    s.chars().fold(0, |acc, ch| {\n        match ch {\n            'A'...'Z' =>\
    \ acc + ch as isize,\n            _ => acc,\n        }\n    })", '    s.as_bytes().iter().map(|&c|
    isize::from(c)).sum()', '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n    }\n\
    \    sum", '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c| (c as isize) - ('A' as\
    \ isize) + 1).sum()", '    s.chars().fold(0, |acc, x| acc + (x as u8).wrapping_sub(64))',
  '    return s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum();',
  '    s.chars().filter(|&c| c.is_ascii_uppercase()).map(|c| (c as isize)).sum()',
  "    let mut result = 0;\n    for ch in s.chars() {\n        if ch.is_uppercase()\
    \ {\n            result += ch as isize;\n        }\n    }\n    result", "    let\
    \ mut result = 0;\n    for char in s.chars() {\n        let c = char as u8;\n\
    \        if c >= 65 && c <= 90 {\n            result += c as isize;\n        }\n\
    \    }\n    result", "    s.chars().fold(0, |sum, c| sum + match c {\n       \
    \ c if c.is_uppercase() => c as isize,\n        _ => 0,\n    })", "    let mut\
    \ sum = 0;\n    let mut it = s.chars();\n    while let Some(c) = it.next() {\n\
    \        if c.is_uppercase() {\n            let code = c as isize;\n         \
    \   sum += code;\n        }\n    }\n    sum", "    s.bytes().filter(|&b| b >=\
    \ b'A' && b <= b'Z').sum() as isize", "    s.bytes().fold(0, |acc, c| acc + if\
    \ c >= b'A' && c <= b'Z' {\n        c as isize\n    } else {\n        0\n    })",
  "    let v: Vec<char> = s.chars().collect();\n    let mut sum = 0;\n    for c in\
    \ v {\n        let ci = c as isize;\n        if ci >= 65 && ci <= 90 {\n     \
    \       sum += ci;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for\
    \ b in s.bytes() {\n        if b >= 65 && b <= 90 {\n            sum += b as isize;\n\
    \        }\n    }\n    sum", "    s.chars().fold(0, |acc, x| {\n        acc +\
    \ if x.is_ascii_uppercase() {\n            x as isize\n        } else {\n    \
    \        0\n        }\n    })", "    let mut v = vec![];\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            v.push(c.to_ascii_uppercase());\n\
    \        }\n    }\n    let mut s = String::from(\"\");\n    for c in v {\n   \
    \     s.push(c);\n    }\n    let v: Vec<isize> = s.bytes().map(|x| x as isize).collect();\n\
    \    v.iter().sum()", '    unimplemented!();', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as
    isize).sum()', "    // your code here\n    0", "    let mut sum = 0;\n    for\
    \ i in s.chars() {\n        if i.is_uppercase() {\n            sum += i as isize;\n\
    \        }\n    }\n    sum", "    let mut result = 0;\n    for c in s.chars()\
    \ {\n        if c.is_ascii_uppercase() {\n            result += c as isize;\n\
    \        }\n    }\n    result", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  '    s.chars().fold(0, |sum, elem| sum + elem as isize)', "    let sum = s.chars().filter(|c|\
    \ c.is_uppercase()).map(|c| c as isize).sum();\n    sum", '    s.chars().fold(0,
    |sum, c| sum + if c.is_uppercase() { c as isize } else { 0 })', "    let mut sum\
    \ = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c|
    c as isize).sum()', "    let mut digits = 0;\n    for char in s.chars() {\n  \
    \      if char.is_ascii_uppercase() {\n            digits += char as isize;\n\
    \        }\n    }\n    digits"]
stop_tokens:
- "\n}"
