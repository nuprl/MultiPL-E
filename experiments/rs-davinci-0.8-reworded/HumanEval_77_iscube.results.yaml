language: rs
name: HumanEval_77_iscube
results:
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).powf(1.0/3.0).floor() == (a as f64).powf(1.0/3.0)\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjbmarwtg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let sqrt = ((a as f64).abs().sqrt() as i32) as isize;\n\
    \    sqrt * sqrt * sqrt == a\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8e8wemm6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // TODO\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpoj7axktb.rs:19:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut b = 1;\n    let mut c = 0;\n    while c < a {\n\
    \        c = b * b * b;\n        if c == a {\n            return true;\n     \
    \   }\n        b += 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn6m7buth.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.pow(3) % a == 0\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqnd3c924.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let a: f64 = a as f64;\n    let n: f64 = a.cbrt();\n \
    \   let n: isize = n as isize;\n    n*n*n == a as isize\n}\n\nfn main() {\n  \
    \  let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (0..100).map(|x| x*x*x).collect::<Vec<isize>>().contains(&a)\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp10cpttoe.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    match a {\n        x if x == 0 => true,\n        x if\
    \ x > 0 => {\n            let mut base = 0;\n            let mut cube = 0;\n \
    \           while cube < x {\n                base += 1;\n                cube\
    \ = base * base * base;\n            }\n            cube == x\n        },\n  \
    \      x if x < 0 => {\n            let mut base = 0;\n            let mut cube\
    \ = 0;\n            while cube > x {\n                base -= 1;\n           \
    \     cube = base * base * base;\n            }\n            cube == x\n     \
    \   },\n        _ => panic!(\"the param a should not be 0.\"),\n    }\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return false;\n    }\n    let mut\
    \ x = a as f64;\n    x = x.powf(1.0/3.0);\n    let y = x.round();\n    x - y ==\
    \ 0.0\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmswwdw05.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let a =\
    \ a.abs();\n    let mut cube = 1;\n    while cube * cube * cube < a {\n      \
    \  cube += 1;\n    }\n    cube * cube * cube == a\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.pow(3) == 0\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprvw4d42m.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a >= 0 && (a as f64).powf(1.0/3.0).fract() == 0.0\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsqf3s4wa.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1yr4caeb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut cube_root = (a as f64).abs().cbrt() as isize;\n\
    \    if cube_root * cube_root * cube_root == a {\n        return true;\n    }\n\
    \    if cube_root * cube_root * cube_root == -a {\n        return true;\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).powf(1.0/3.0).floor() == (a as f64).powf(1.0/3.0)\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjbmarwtg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        false\n    } else {\n        let b\
    \ = (a as f64).powf(1.0/3.0);\n        (b.round() as isize).pow(3) == a\n    }\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmd47tpxe.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for i in 0..a+1 {\n        if i*i*i == a {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1z3teai7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for i in 0..a {\n        if i*i*i == a {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1klzk_wj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut b = 0;\n    while b * b * b < a {\n        b +=\
    \ 1;\n    }\n    if b * b * b == a {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvhq_cp1t.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 1;\n    let mut x = i * i * i;\n    while\
    \ x < a {\n        i += 1;\n        x = i * i * i;\n    }\n    x == a\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk6jf3g2p.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 1;\n    while i*i*i < a {\n        i += 1;\n\
    \    }\n    i*i*i == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfa8yhz2j.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let sqrt = (a as f64).sqrt() as isize;\n    sqrt * sqrt\
    \ * sqrt == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp17d_3jtm.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // num * num * num == a\n    for num in 1..a {\n     \
    \   if num * num * num == a {\n            return true;\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprpmbn1uu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let b = (a as f64).powf(1.0/3.0);\n    b == b.round()\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphn1cch9h.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfh0i99oy.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // Write your code here\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmeb7cs4b.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a >= 0 && (a as f64).sqrt().powi(3) == a as f64\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqqqpi07f.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        -1*a as f64 == (1.0/3.0*(-1*a as f64)).powf(3.0)\n\
    \    } else {\n        a as f64 == (1.0/3.0*a as f64).powf(3.0)\n    }\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{integer}` by `f64`\n  --> /tmp/tmpzk4v3tnk.rs:19:11\n\
    \   |\n19 |         -1*a as f64 == (1.0/3.0*(-1*a as f64)).powf(3.0)\n   |   \
    \        ^ no implementation for `{integer} * f64`\n   |\n   = help: the trait\
    \ `Mul<f64>` is not implemented for `{integer}`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0277]: cannot multiply\
    \ `{integer}` by `f64`\n  --> /tmp/tmpzk4v3tnk.rs:19:36\n   |\n19 |         -1*a\
    \ as f64 == (1.0/3.0*(-1*a as f64)).powf(3.0)\n   |                          \
    \          ^ no implementation for `{integer} * f64`\n   |\n   = help: the trait\
    \ `Mul<f64>` is not implemented for `{integer}`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 0;\n    while i.pow(3) < a.abs() {\n     \
    \   i += 1;\n    }\n    i.pow(3) == a.abs()\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmphwc72eae.rs:19:13\n   |\n19 |     while i.pow(3) < a.abs() {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n18 |     let mut i: i32 = 0;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmphwc72eae.rs:22:7\n\
    \   |\n22 |     i.pow(3) == a.abs()\n   |       ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n18 |     let mut i: i32 = 0;\n  \
    \ |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0689`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for i in 0..100 {\n        if i * i * i == a {\n     \
    \       return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp17h06joh.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.pow(3) == a\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcb1qb_tl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // iscube(a) = sqrt(a) is integer\n    let sqrt = (a as\
    \ f64).sqrt() as isize;\n    sqrt * sqrt * sqrt == a\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptwrn0z9r.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\tlet mut i = 1;\n\twhile i * i * i < a {\n\t\ti += 1;\n\t\
    }\n\ti * i * i == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpssh6sju4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // ! Try to solve this task in constant time.\n    //\
    \ ! You may assume, that input is always valid.\n    if a < 0 {\n        a * -1\n\
    \    } else {\n        a\n    }\n    let mut power = 1;\n    while power * power\
    \ * power < a {\n        power += 1;\n    }\n    if power * power * power == a\
    \ {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpitr6y8op.rs:21:9\n   |\n\
    20 | /     if a < 0 {\n21 | |         a * -1\n   | |         ^^^^^^ expected `()`,\
    \ found `isize`\n22 | |     } else {\n23 | |         a\n24 | |     }\n   | | \
    \    -- help: consider using a semicolon here\n   | |_____|\n   |       expected\
    \ this to be `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpitr6y8op.rs:23:9\n\
    \   |\n20 | /     if a < 0 {\n21 | |         a * -1\n22 | |     } else {\n23 |\
    \ |         a\n   | |         ^ expected `()`, found `isize`\n24 | |     }\n \
    \  | |_____- expected this to be `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let x = a.abs();\n    let mut i = 1;\n    let mut result\
    \ = false;\n    while i <= x {\n        if i * i * i == x {\n            result\
    \ = true;\n            break;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm3mjf9hb.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let mut\
    \ l = 0;\n    let mut r = a;\n    while l < r {\n        let m = (l + r) / 2;\n\
    \        if m * m * m == a {\n            return true;\n        } else if m *\
    \ m * m < a {\n            l = m + 1;\n        } else {\n            r = m;\n\
    \        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0rcznwjq.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let cube = (a as f64).cbrt() as isize;\n    cube * cube\
    \ * cube == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 1;\n    while i * i * i <= a {\n        if\
    \ i * i * i == a {\n            return true;\n        }\n        i += 1;\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2b3516sl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for n in 0..a+1 {\n        if n*n*n == a {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgkb0vaw3.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let abs_a = a.abs();\n    if abs_a < 2 {\n        return\
    \ true;\n    }\n    let mut start = 2;\n    let mut end = a;\n    while start\
    \ <= end {\n        let mid = (start + end) / 2;\n        let cube = mid * mid\
    \ * mid;\n        if cube == abs_a {\n            return true;\n        } else\
    \ if cube < abs_a {\n            start = mid + 1;\n        } else {\n        \
    \    end = mid - 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let cube_root = a.abs().cbrt();\n    cube_root.fract()\
    \ == 0.0\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `cbrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpoml8t9la.rs:18:29\n   |\n18 |     let cube_root = a.abs().cbrt();\n\
    \   |                             ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).powf(1.0/3.0).fract() == 0.0\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphsc_p7eb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut x = a;\n    if x < 0 {\n        x = -x;\n    }\n\
    \    let mut y = 1;\n    while y < x {\n        y = y + 1;\n        if y * y *\
    \ y == x {\n            return true;\n        }\n    }\n    return false;\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpok7qvnqn.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    return a >= 0 && (a as f64).sqrt().powi(3) == a as f64;\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp5ue1c10.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.pow(1) == a.pow(3)\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp6hlbug8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a >= 0 {\n        for i in 0..a {\n            if i\
    \ * i * i == a {\n                return true;\n            }\n        }\n   \
    \ } else {\n        for i in (a..0).rev() {\n            if i * i * i == a {\n\
    \                return true;\n            }\n        }\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps4_xy78v.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let x = a.abs();\n    for i in 0..x {\n        if i *\
    \ i * i == x {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbvpnlxf1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a >= 0 {\n        let result = (a as f64).cbrt().floor();\n\
    \        (result * result * result) == a as f64\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8u1rpbu8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return iscube(-a);\n    }\n    let\
    \ mut x = 0;\n    while x * x * x < a {\n        x += 1;\n    }\n    x * x * x\
    \ == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let r = a.abs().sqrt().sqrt();\n    r * r * r == a\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpux8g23pq.rs:18:21\n   |\n18 |     let r = a.abs().sqrt().sqrt();\n\
    \   |                     ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let c = a.abs();\n    for i in 0..c {\n        if i *\
    \ i * i == c {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpeut3uuf9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let b = (a as f64).sqrt().powi(3);\n    b == a as f64\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa7y6slo8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for x in 0..a {\n        if x * x * x == a {\n       \
    \     return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5af06syv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let mut\
    \ b = 1;\n    while b * b * b < a.abs() {\n        b += 1;\n    }\n    if b *\
    \ b * b == a.abs() {\n        return true;\n    }\n    return false;\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    return a >= 0 && (a as f64).powf(1.0/3.0).floor() == (a\
    \ as f64).powf(1.0/3.0);\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaljzejec.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let a_sqrt = (a as f64).sqrt();\n    a_sqrt == a_sqrt.floor()\
    \ && a_sqrt == a_sqrt.ceil()\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsg7if0l2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\tmatch a {\n\t\t0 => true,\n\t\t_ => {\n\t\t\tlet mut start:\
    \ isize = 0;\n\t\t\tlet mut end: isize = a;\n\t\t\twhile start <= end {\n\t\t\t\
    \tlet mid = (start + end) / 2;\n\t\t\t\tlet cur = mid * mid * mid;\n\t\t\t\tif\
    \ cur == a {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if cur < a {\n\t\t\t\t\t\
    start = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tend = mid - 1;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t\tfalse\n\t\t}\n\t}\n}\n\nfn main() {\n    let candidate = iscube;\n  \
    \  assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n   \
    \ assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n   \
    \ assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuy97rdhk.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return true;\n    }\n\n    for i in\
    \ 0..a {\n        if i * i * i == a {\n            return true;\n        }\n \
    \   }\n\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_nrxwymc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    true\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp86jalxby.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let a = a.abs();\n    let mut left = 0;\n    let mut right\
    \ = a;\n    while left < right {\n        let mid = (left + right) / 2;\n    \
    \    let mut t = mid * mid * mid;\n        if t == a {\n            return true;\n\
    \        } else if t < a {\n            left = mid + 1;\n        } else {\n  \
    \          right = mid;\n        }\n    }\n    if left * left * left == a {\n\
    \        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n\
    \    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n\
    \    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1yr4caeb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return iscube(-a);\n    }\n    if\
    \ a < 2 {\n        return true;\n    }\n    let mut l = 1;\n    let mut r = a;\n\
    \    while l < r {\n        let m = (l + r) / 2;\n        let v = m * m * m;\n\
    \        if v == a {\n            return true;\n        } else if v < a {\n  \
    \          l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let r = a.abs().pow(1.0/3.0);\n    r == r.round()\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp31j05tz3.rs:18:25\n   |\n\
    18 |     let r = a.abs().pow(1.0/3.0);\n   |                         ^^^^^^^ expected\
    \ `u32`, found floating-point number\n\nerror[E0599]: no method named `round`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp31j05tz3.rs:19:12\n\
    \   |\n19 |     r == r.round()\n   |            ^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a > 0 {\n        (a as f64).sqrt().sqrt() == ((a as\
    \ f64).sqrt().sqrt() as isize) as f64\n    } else {\n        (a as f64).sqrt().sqrt()\
    \ == ((a as f64).sqrt().sqrt() as isize) as f64\n    }\n}\n\nfn main() {\n   \
    \ let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvo2sbn2r.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut b = 0;\n    while b*b*b < a {\n        b += 1;\n\
    \    }\n    if b*b*b == a {\n        return true;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_dzup_0b.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == 0 || (a > 0 && (a as f64).sqrt().powi(3) == a as\
    \ f64)\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr3pedhcz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    if a < 0\
    \ {\n        a = -a;\n    }\n    let mut b = a;\n    while b * b * b > a {\n \
    \       b = (2 * b + a / (b * b)) / 3;\n    }\n    return b * b * b == a;\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpizuji5wi.rs:22:9\n\
    \   |\n17 | fn iscube(a: isize) -> bool {\n   |           - help: consider making\
    \ this binding mutable: `mut a`\n...\n22 |         a = -a;\n   |         ^^^^^^\
    \ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let end:\
    \ isize = (a / 2).abs();\n    let mut low: isize = 1;\n    let mut high: isize\
    \ = end;\n    while low <= high {\n        let mid: isize = (low + high) / 2;\n\
    \        let c: isize = mid * mid * mid;\n        if c == a {\n            return\
    \ true;\n        } else if c < a {\n            low = mid + 1;\n        } else\
    \ {\n            high = mid - 1;\n        }\n    }\n    return false;\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_5qtw_33.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).sqrt().fract() == 0.0\n}\n\nfn main() {\n \
    \   let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjabfl2a9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).sqrt().log2() % 1.0 == 0.0\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9trud9ij.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\tlet mut i = 0;\n\twhile i.pow(3) < a.abs() {\n\t\ti += 1;\n\
    \t}\n\ti.pow(3) == a.abs()\n}\n\nfn main() {\n    let candidate = iscube;\n  \
    \  assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n   \
    \ assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n   \
    \ assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmp6psh3t3g.rs:19:10\n   |\n19 |     while i.pow(3) < a.abs() {\n\
    \   |             ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n18 |     let mut i: i32 = 0;\n   |         ~~~~~~~~~~\n\nerror[E0689]:\
    \ can't call method `pow` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp6psh3t3g.rs:22:4\n\
    \   |\n22 |     i.pow(3) == a.abs()\n   |       ^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `i32`\n   |\n18 |     let mut i: i32 = 0;\n  \
    \ |         ~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0689`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1yr4caeb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // if a < 0 {\n    //     a = -a;\n    // }\n    let mut\
    \ a = a;\n    a = a.abs();\n    // a = a.abs();\n    let mut i = 0;\n    while\
    \ i * i * i <= a {\n        if i * i * i == a {\n            return true;\n  \
    \      }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return a.pow(3) == (-a);\n    }\n\
    \    let mut i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n\
    \            return true;\n        }\n        i += 1;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjco4jkx7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a > 0 && a == a.pow(1.0/3.0) as isize\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp55kt2nek.rs:18:25\n   |\n\
    18 |     a > 0 && a == a.pow(1.0/3.0) as isize\n   |                         ^^^^^^^\
    \ expected `u32`, found floating-point number\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\tlet result = ((a as f64).abs().cbrt()) as isize;\n\treturn\
    \ a == result * result * result;\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp02g5ky4c.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 0;\n    let mut cube = i.pow(3);\n    while\
    \ cube < a.abs() {\n        i += 1;\n        cube = i.pow(3);\n    }\n    cube\
    \ == a.abs()\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpnsmhyirh.rs:19:22\n   |\n19 |     let mut cube = i.pow(3);\n  \
    \ |                      ^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `i32`\n   |\n18 |     let mut i: i32 = 0;\n   |         ~~~~~~~~~~\n\n\
    error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpnsmhyirh.rs:22:18\n   |\n22 |         cube = i.pow(3);\n   |  \
    \                ^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n18 |     let mut i: i32 = 0;\n   |         ~~~~~~~~~~\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0689`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let c = a.abs();\n    let d = (c as f64).cbrt();\n   \
    \ d == d.floor()\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.abs().sqrt().powi(3) == a.abs()\n}\n\nfn main() {\n\
    \    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpljjnbfli.rs:18:13\n   |\n18 |     a.abs().sqrt().powi(3)\
    \ == a.abs()\n   |             ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1yr4caeb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    if a > 0\
    \ {\n        let mut x = a;\n        while x > 1 {\n            x = x / 3;\n \
    \       }\n        if x == 1 {\n            return true;\n        }\n    } else\
    \ {\n        let mut x = -a;\n        while x > 1 {\n            x = x / 3;\n\
    \        }\n        if x == 1 {\n            return true;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc02hue9t.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\t(a as f64).powf(1.0/3.0).fract() == 0.0\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpze1qi3xq.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        a = -a;\n    }\n    if a == 0 {\n\
    \        return true;\n    }\n    let b = (a as f64).powf(1.0 / 3.0);\n    ((b\
    \ * b * b) - (a as f64)).abs() < 0.000001\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpilwzcu_c.rs:19:9\n\
    \   |\n17 | fn iscube(a: isize) -> bool {\n   |           - help: consider making\
    \ this binding mutable: `mut a`\n18 |     if a < 0 {\n19 |         a = -a;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return iscube(-a);\n    }\n    let\
    \ mut lo = 0;\n    let mut hi = a + 1;\n    while lo < hi {\n        let mid =\
    \ (lo + hi) / 2;\n        let mid_cubed = mid * mid * mid;\n        if mid_cubed\
    \ == a {\n            return true;\n        } else if mid_cubed < a {\n      \
    \      lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp242qbno0.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let x = a.abs() as f64;\n    let x = (x as f64).cbrt();\n\
    \    x.fract() == 0.0\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == 1 ||\n    a == 8 ||\n    a == 27 ||\n    a == 64\
    \ ||\n    a == 125 ||\n    a == 216 ||\n    a == 343 ||\n    a == 512 ||\n   \
    \ a == 729 ||\n    a == 1000 ||\n    a == 1331 ||\n    a == 1728 ||\n    a ==\
    \ 2197 ||\n    a == 2744 ||\n    a == 3375 ||\n    a == 4096 ||\n    a == 4913\
    \ ||\n    a == 5832 ||\n    a == 6859 ||\n    a == 8000 ||\n    a == 9261 ||\n\
    \    a == 10648 ||\n    a == 12167 ||\n    a == 13824 ||\n    a == 15625 ||\n\
    \    a == 17576 ||\n    a == 19683 ||\n    a == 21952 ||\n    a == 24389 ||\n\
    \    a == 27000 ||\n    a == 29791 ||\n    a == 32768 ||\n    a == 35937 ||\n\
    \    a == 39304 ||\n    a == 42875 ||\n    a == 46656 ||\n    a == 50653 ||\n\
    \    a == 54872 ||\n    a == 59319 ||\n    a == 64000 ||\n    a == 68921 ||\n\
    \    a == 74088 ||\n    a == 79507 ||\n    a == 85184 ||\n    a == 91125 ||\n\
    \    a == 97336 ||\n    a == 103823 ||\n    a == 110592 ||\n    a == 117649 ||\n\
    \    a == 125000 ||\n    a == 132651 ||\n    a == 140608 ||\n    a == 148877 ||\n\
    \    a == 157464 ||\n    a == 166375 ||\n    a == 175616 ||\n    a == 185193 ||\n\
    \    a == 195112 ||\n    a == 205379 ||\n    a == 216000 ||\n    a == 226981 ||\n\
    \    a == 238328 ||\n    a == 250047 ||\n    a == 262144 ||\n    a == 274625 ||\n\
    \    a == 287496 ||\n    a == 300763 ||\n    a == 314432 ||\n    a == 328509 ||\n\
    \    a == 343000 ||\n    a == 357911 ||\n    a == 373248 ||\n   \n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpe7fgufhb.rs:91:1\n\
    \   |\n91 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return false;\n    }\n    let mut\
    \ x = a as f64;\n    x = (x.abs()).cbrt();\n    if x == x.round() {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp459lrlk1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut x = 1;\n    while x*x*x < a {\n        x += 1;\n\
    \    }\n    return x*x*x == a;\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1al4r0sp.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a > 0 && ((a as f64).sqrt().powi(3) as isize) == a\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpuhkvjp_1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\tlet mut n = 0;\n\tloop {\n\t\tlet cube = n * n * n;\n\t\t\
    if cube == a {\n\t\t\treturn true;\n\t\t} else if cube > a {\n\t\t\treturn false;\n\
    \t\t} else {\n\t\t\tn += 1;\n\t\t}\n\t}\n}\n\nfn main() {\n    let candidate =\
    \ iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n\
    \    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n\
    \    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv2w3t_x1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1yr4caeb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    match (a as f64).sqrt().floor() as isize {\n        x\
    \ if a == x * x * x => true,\n        _ => false,\n    }\n}\n\nfn main() {\n \
    \   let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5ii6c4l9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    match a {\n        0 => true,\n        x if x < 0 => iscube(-x),\n\
    \        _ => {\n            let mut c = 0;\n            let mut b = a;\n    \
    \        while b > 0 {\n                b /= 2;\n                c += 1;\n   \
    \         }\n            let mut d = 0;\n            let mut e = a;\n        \
    \    while e > 0 {\n                e -= 1;\n                d += 1;\n       \
    \     }\n            d == c\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4he8q6aa.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let max = (a as f64).sqrt() as isize;\n    for i in 0..=max\
    \ {\n        if i*i*i == a {\n            return true;\n        }\n    }\n   \
    \ false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp4apg26jl.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a >= 0 && (a as f64).sqrt().powi(3) as isize == a\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe6mm5ws9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for i in 1..a + 1 {\n        if i * i * i == a {\n   \
    \         return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc2uiva2x.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\t// Your code goes here\n\tif a <= 0 {\n\t\ttrue\n\t} else\
    \ {\n\t\tlet mut is_cube = false;\n\t\tlet mut i = 1;\n\t\twhile !is_cube {\n\t\
    \t\tif i * i * i == a {\n\t\t\t\tis_cube = true;\n\t\t\t} else if i * i * i >\
    \ a {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t\tis_cube\n\t}\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.pow(3) == a\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcb1qb_tl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 1;\n    while i * i * i < a {\n        i +=\
    \ 1;\n    }\n    i * i * i == a\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6l2c7wen.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let mut\
    \ cube = a.abs();\n    if cube % 3 == 2 {\n        cube += 1;\n    }\n    loop\
    \ {\n        if cube % 3 == 0 {\n            cube /= 3;\n        } else {\n  \
    \          return false;\n        }\n        if cube == 1 {\n            return\
    \ true;\n        }\n    }\n}\n\nfn main() {\n    let candidate = iscube;\n   \
    \ assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwk2xyuu0.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == 1 || a == 0 || (a < 0 && (a as f64).sqrt().powi(3)\
    \ == -a as f64) || (a as f64).sqrt().powi(3) == a as f64\n}\n\nfn main() {\n \
    \   let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplozwqg1g.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return iscube(-a);\n    }\n    if\
    \ a == 0 {\n        return true;\n    }\n    if a == 1 {\n        return true;\n\
    \    }\n    let mut i = 2;\n    while i*i*i <= a {\n        if i*i*i == a {\n\
    \            return true;\n        }\n        i += 1;\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut c = 0;\n    let limit = a + 1;\n    for i in 0..limit\
    \ {\n        c = i * i * i;\n        if c == a {\n            return true;\n \
    \       }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprxx4fok9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut cube = 0isize;\n    let mut count = 0;\n    while\
    \ cube < a {\n        cube = count * count * count;\n        count += 1;\n   \
    \ }\n    cube == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc4re0ven.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    while i*i*i <= a {\n        if i*i*i == a {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzq_a_79k.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        a = -a;\n    }\n    if a == 0 {\n\
    \        return true;\n    }\n    let mut c = a / 3;\n    while c * c * c < a\
    \ {\n        c += 1;\n    }\n    c * c * c == a\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpp6ljg4dr.rs:19:9\n\
    \   |\n17 | fn iscube(a: isize) -> bool {\n   |           - help: consider making\
    \ this binding mutable: `mut a`\n18 |     if a < 0 {\n19 |         a = -a;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a >= 0 && (a as f64).sqrt().powi(3) == a as f64\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqqqpi07f.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.is_positive() && a.powf(1.0/3.0).fract() == 0.0\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `powf` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp48x3hupr.rs:18:26\n   |\n18 |     a.is_positive() && a.powf(1.0/3.0).fract()\
    \ == 0.0\n   |                          ^^^^ help: there is an associated function\
    \ with a similar name: `pow`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // Will break if a is negative.\n    // However iscube(-8)\
    \ for example would return true as -8 is the cube\n    // of -2.\n    let cbrt\
    \ = a.abs().cbrt();\n    let cbrt3 = cbrt * cbrt * cbrt;\n    a == cbrt3\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `cbrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpy_oqmp0c.rs:21:24\n   |\n21 |     let cbrt = a.abs().cbrt();\n\
    \   |                        ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1yr4caeb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let eps\
    \ = 1e-7;\n    let mut lo = 0;\n    let mut hi = a;\n    while lo + eps < hi {\n\
    \        let m = (lo + hi) / 2.0;\n        let m3 = m * m * m;\n        if (m3\
    \ - a).abs() < eps {\n            return true;\n        } else if m3 < a {\n \
    \           lo = m;\n        } else {\n            hi = m;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add a float to an integer\n  --> /tmp/tmpery2xidj.rs:24:14\n\
    \   |\n24 |     while lo + eps < hi {\n   |              ^ no implementation for\
    \ `{integer} + {float}`\n   |\n   = help: the trait `Add<{float}>` is not implemented\
    \ for `{integer}`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpery2xidj.rs:25:27\n\
    \   |\n25 |         let m = (lo + hi) / 2.0;\n   |                           ^\
    \ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a >= 0 {\n        let mut i = 0;\n        while i *\
    \ i * i <= a {\n            if i * i * i == a {\n                return true;\n\
    \            }\n            i += 1;\n        }\n    } else {\n        let mut\
    \ i = 0;\n        while i * i * i >= a {\n            if i * i * i == a {\n  \
    \              return true;\n            }\n            i -= 1;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 { return true; }\n    if a < 0 { a = -a; }\n\
    \    let mut b = a;\n    while b * b * b < a {\n        b += 1;\n    }\n    b\
    \ * b * b == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmphug_wojk.rs:19:16\n\
    \   |\n17 | fn iscube(a: isize) -> bool {\n   |           - help: consider making\
    \ this binding mutable: `mut a`\n18 |     if a == 0 { return true; }\n19 |   \
    \  if a < 0 { a = -a; }\n   |                ^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for i in 0..(a/2) {\n        if i * i * i == a {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n\
    \    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6hvkd4s1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    match a {\n        1 | 0 | -1 => true,\n        _ => {\n\
    \            let mut i = 2;\n            while i * i * i <= a {\n            \
    \    if i * i * i == a {\n                    return true;\n                }\n\
    \                i += 1;\n            }\n            false\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let abs_a\
    \ = a.abs();\n    for x in 1..abs_a {\n        if x*x*x == abs_a {\n         \
    \   return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppe2odde4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    for i in\
    \ 1..a {\n        if i*i*i == a {\n            return true;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp30ql2dmu.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for i in 1..a {\n        if i * i * i == a {\n       \
    \     return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzklkibvh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // Your code here\n    if a == 0 {\n        return true;\n\
    \    }\n    else if a > 0 {\n        let x = (a as f64).powf(1.0/3.0);\n     \
    \   return (x.fract() == 0.0)\n    }\n    else {\n        let x = (-a as f64).powf(1.0/3.0);\n\
    \        return (x.fract() == 0.0)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpq9nnasyh.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return false;\n    }\n\n    if a <\
    \ 2 {\n        return true;\n    }\n\n    let mut l: isize = 0;\n    let mut r:\
    \ isize = a;\n    let mut m: isize;\n\n    while l < r {\n        m = (l + r)\
    \ / 2;\n        if m * m * m == a {\n            return true;\n        } else\
    \ if m * m * m < a {\n            l = m + 1;\n        } else {\n            r\
    \ = m;\n        }\n    }\n\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2b5k5l6a.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let cube_root = ((a as f64).abs().powf(1.0/3.0) as isize).abs();\n\
    \    cube_root * cube_root * cube_root == a\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyzncq9ty.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let cube_root = f64::powf(a as f64, 1f64 / 3f64);\n  \
    \  let cube_root_as_isize = cube_root as isize;\n    let cube_root_as_isize_cube\
    \ = cube_root_as_isize * cube_root_as_isize * cube_root_as_isize;\n    return\
    \ cube_root_as_isize_cube == a;\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphqxqvvlx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let mut\
    \ i = 1;\n    loop {\n        let i3 = i*i*i;\n        if i3 > a {\n         \
    \   return false;\n        }\n        if i3 == a {\n            return true;\n\
    \        }\n        i += 1;\n    }\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpca2b9ls9.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let cube_root = (a as f64).cbrt();\n    cube_root == cube_root.round()\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let v = a.abs() as f64;\n    let x = (v.cbrt() + 0.5)\
    \ as i64;\n    let x3 = x * x * x;\n    if x3 == a {\n        true\n    } else\
    \ {\n        false\n    }\n}\n\nfn main() {\n    let candidate = iscube;\n   \
    \ assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_mvviwam.rs:21:14\n   |\n\
    21 |     if x3 == a {\n   |              ^ expected `i64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `i64` and panic if the converted value\
    \ doesn't fit\n   |\n21 |     if x3 == a.try_into().unwrap() {\n   |         \
    \      ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut b = 1;\n    while b * b * b <= a.abs() {\n   \
    \     if b * b * b == a.abs() {\n            return true;\n        }\n       \
    \ b += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n \
    \   assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n  \
    \  assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n  \
    \  assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2ncyu_8k.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return false;\n    }\n    let mut\
    \ x = 0;\n    while x * x * x < a {\n        x += 1;\n    }\n    x * x * x ==\
    \ a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr5kziewn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).powf(1.0/3.0).floor() == (a as f64).powf(1.0/3.0)\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjbmarwtg.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut tmp = a;\n    let mut res = 0;\n    while tmp\
    \ != 0 {\n        res += tmp % 10;\n        tmp /= 10;\n    }\n    res as f64\
    \ == res as f64 * res as f64 * res as f64\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1t16s4hz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let x = (a as f64).powf(1.0/3.0);\n    if x.round() ==\
    \ x {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzv15ev77.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 0;\n    let mut c = 0;\n    while c < a {\n\
    \        i += 1;\n        c = i * i * i;\n    }\n    c == a\n}\n\nfn main() {\n\
    \    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsv_pf40b.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 { return true; }\n    let mut b = a;\n    if\
    \ b < 0 { b = -b; }\n    let mut c = 1;\n    while c * c * c < b {\n        c\
    \ += 1;\n    }\n    if c * c * c == b { return true; }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    if a < 0\
    \ {\n        return iscube(-a);\n    }\n    let r = (a as f64).sqrt();\n    let\
    \ b = r.floor() as isize;\n    b * b * b == a\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps9gwqi6i.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    let mut\
    \ x = 1;\n    while x*x*x < a.abs() {\n        x += 1;\n    }\n    return x*x*x\
    \ == a.abs();\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    if a < 0\
    \ {\n        return false;\n    }\n    let mut i = 1;\n    while i*i*i < a {\n\
    \        i += 1;\n    }\n    i*i*i == a\n}\n\nfn main() {\n    let candidate =\
    \ iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n\
    \    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n\
    \    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpye018pgd.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let a = a.abs();\n    for i in 0..a+1 {\n        if i*i*i\
    \ == a {\n            return true;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1yr4caeb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\tlet b = a.pow(1/3.0);\n\treturn b.fract() == 0.0;\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `{integer}` by `{float}`\n  --> /tmp/tmpg8628ugr.rs:18:17\n\
    \   |\n18 |     let b = a.pow(1/3.0);\n   |                    ^ no implementation\
    \ for `{integer} / {float}`\n   |\n   = help: the trait `Div<{float}>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n             <&'a f64\
    \ as Div<f64>>\n             <&'a i128 as Div<i128>>\n             <&'a i16 as\
    \ Div<i16>>\n             <&'a i32 as Div<i32>>\n             <&'a i64 as Div<i64>>\n\
    \             <&'a i8 as Div<i8>>\n             <&'a isize as Div<isize>>\n  \
    \         and 54 others\n\nerror[E0599]: no method named `fract` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmpg8628ugr.rs:19:11\n   |\n19 |  \
    \   return b.fract() == 0.0;\n   |              ^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    ((a as f64).powf(1.0/3.0)).floor() == ((a as f64).powf(1.0/3.0))\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw2ib9otl.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // YOUR CODE HERE\n    true\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp06zs7h5r.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let x = a.abs();\n    let mut i = 1;\n    while i * i\
    \ * i <= x {\n        if i * i * i == x {\n            return true;\n        }\n\
    \        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk4nvw6ya.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round() *\
    \ a.pow(1.0/3.0).round()\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp34z1_ubi.rs:18:16\n   |\n\
    18 |     a == a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round()\n\
    \   |                ^^^^^^^ expected `u32`, found floating-point number\n\nerror[E0599]:\
    \ no method named `round` found for type `isize` in the current scope\n  --> /tmp/tmp34z1_ubi.rs:18:25\n\
    \   |\n18 |     a == a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round()\n\
    \   |                         ^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp34z1_ubi.rs:18:41\n   |\n18 |     a == a.pow(1.0/3.0).round()\
    \ * a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round()\n   |                    \
    \                     ^^^^^^^ expected `u32`, found floating-point number\n\n\
    error[E0599]: no method named `round` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp34z1_ubi.rs:18:50\n   |\n18 |     a == a.pow(1.0/3.0).round() *\
    \ a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round()\n   |                      \
    \                            ^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp34z1_ubi.rs:18:66\n   |\n18 |     a == a.pow(1.0/3.0).round()\
    \ * a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round()\n   |                    \
    \                                              ^^^^^^^ expected `u32`, found floating-point\
    \ number\n\nerror[E0599]: no method named `round` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp34z1_ubi.rs:18:75\n   |\n18 |     a == a.pow(1.0/3.0).round()\
    \ * a.pow(1.0/3.0).round() * a.pow(1.0/3.0).round()\n   |                    \
    \                                                       ^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let root = (a as f64).powf(1.0/3.0);\n    return (root.round()\
    \ as isize).pow(3) == a;\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj2lebx_2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // TODO: Implement this function.\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpllvscwrw.rs:19:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut x = a;\n    while x > 0 {\n        if x * x *\
    \ x == a {\n            return true;\n        }\n        x -= 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk_1029bd.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let b = a.abs() as f64;\n    let c = b.cbrt();\n    c.floor()\
    \ == c\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // TODO\n    a == 0 || a == 1 || a == -1 || (a < 0 &&\
    \ a.abs().sqrt().sqrt() * a.abs().sqrt().sqrt() * a.abs().sqrt().sqrt() == a)\
    \ || (a > 0 && a.sqrt().sqrt() * a.sqrt().sqrt() * a.sqrt().sqrt() == a)\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpypc61loa.rs:19:54\n   |\n19 |     a == 0 || a == 1 || a\
    \ == -1 || (a < 0 && a.abs().sqrt().sqrt() * a.abs().sqrt().sqrt() * a.abs().sqrt().sqrt()\
    \ == a) || (a > 0 && a.s...\n   |                                            \
    \          ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `sqrt`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpypc61loa.rs:19:78\n\
    \   |\n19 |     a == 0 || a == 1 || a == -1 || (a < 0 && a.abs().sqrt().sqrt()\
    \ * a.abs().sqrt().sqrt() * a.abs().sqrt().sqrt() == a) || (a > 0 && a.s...\n\
    \   |                                                                        \
    \      ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `sqrt`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpypc61loa.rs:19:102\n\
    \   |\n19 |     a == 0 || a == 1 || a == -1 || (a < 0 && a.abs().sqrt().sqrt()\
    \ * a.abs().sqrt().sqrt() * a.abs().sqrt().sqrt() == a) || (a > 0 && a.s...\n\
    \   |                                                                        \
    \                              ^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `sqrt` found for type `isize` in the current scope\n  --> /tmp/tmpypc61loa.rs:19:137\n\
    \   |\n19 | ...qrt() * a.abs().sqrt().sqrt() == a) || (a > 0 && a.sqrt().sqrt()\
    \ * a.sqrt().sqrt() * a.sqrt().sqrt() == a)\n   |                            \
    \                           ^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `sqrt` found for type `isize` in the current scope\n  --> /tmp/tmpypc61loa.rs:19:155\n\
    \   |\n19 | ...rt().sqrt() == a) || (a > 0 && a.sqrt().sqrt() * a.sqrt().sqrt()\
    \ * a.sqrt().sqrt() == a)\n   |                                              \
    \         ^^^^ method not found in `isize`\n\nerror[E0599]: no method named `sqrt`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpypc61loa.rs:19:173\n\
    \   |\n19 | ...|| (a > 0 && a.sqrt().sqrt() * a.sqrt().sqrt() * a.sqrt().sqrt()\
    \ == a)\n   |                                                       ^^^^ method\
    \ no"
  stdout: ''
  timestamp: 1659976041
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut cube_root: f64 = 1.0;\n    let mut cube_power\
    \ = a;\n    while cube_power > 0 {\n        cube_root += 1.0;\n        cube_power\
    \ = a - cube_root.powi(3);\n    }\n    if cube_power == 0 {\n        return true;\n\
    \    }\n    return false;\n}\n\nfn main() {\n    let candidate = iscube;\n   \
    \ assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `f64` from `isize`\n  --> /tmp/tmpjq9q167n.rs:22:24\n\
    \   |\n22 |         cube_power = a - cube_root.powi(3);\n   |                \
    \        ^ no implementation for `isize - f64`\n   |\n   = help: the trait `Sub<f64>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.abs() == (a.abs() as f64).cbrt().powi(3) as isize\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm4wjxddu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 0;\n    while i * i * i < a {\n        i +=\
    \ 1;\n    }\n    i * i * i == a\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkmnmbs0y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    if a < 0\
    \ {\n        return false;\n    }\n    let mut i = 1;\n    while i * i * i <=\
    \ a {\n        if i * i * i == a {\n            return true;\n        }\n    \
    \    i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp08_3uora.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let b = ((a as f64).abs().powf(1.0/3.0) as isize).pow(3);\n\
    \    b == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgsnq3ey5.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    match a {\n        _ if a < 0 => {\n            let b\
    \ = -a;\n            (b as f64).powf(1.0/3.0) == (b as i64) as f64\n        },\n\
    \        _ => {\n            (a as f64).powf(1.0/3.0) == (a as i64) as f64\n \
    \       }\n    }\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplc1yrzmn.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).powf(1.0/3.0).ceil() == (a as f64).powf(1.0/3.0).floor()\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp56lhrl40.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // unimplemented!()\n    let cube_root: f64 = a as f64;\n\
    \    let power_result: f64 = cube_root.powf(1.0/3.0);\n    let rounded_result:\
    \ isize = power_result.round() as isize;\n    let result = rounded_result * rounded_result\
    \ * rounded_result;\n    if result == a {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqnm1tqp5.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let x = (a as f64).sqrt();\n    x.trunc() == x.fract()\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw6fjqgwr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    for i in 1..a {\n        if i * i * i == a {\n       \
    \     return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzklkibvh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n\n    let mut\
    \ b = a.abs();\n    while b > 1 {\n        if b % 3 != 0 {\n            return\
    \ false;\n        }\n        b /= 3;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpey3nr6qy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    //return (a.powf(1.0/3.0) as isize).pow(3) == a;\n   \
    \ for x in 0..(a+1) {\n        if x.pow(3) == a {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpatlai0h8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n\n    let mut\
    \ low = 1;\n    let mut high = a;\n    while low < high {\n        let mid = (low\
    \ + high) / 2;\n        let cube = mid * mid * mid;\n        if cube == a {\n\
    \            return true;\n        } else if cube < a {\n            low = mid\
    \ + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n  \
    \  return false;\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc9nzwq1j.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut b = 1;\n    while b * b * b < a {\n        b +=\
    \ 1;\n    }\n    b * b * b == a\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1tmjitwd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut r = a;\n    let mut l = 0;\n    while r >= l {\n\
    \        let m = (r+l)/2;\n        if m*m*m == a {\n            return true;\n\
    \        } else if m*m*m > a {\n            r = m-1;\n        } else {\n     \
    \       l = m+1;\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp805mcbed.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == 0 || ((a as f64).abs().cbrt() - (a as f64).abs().cbrt().round()).abs()\
    \ < std::f64::EPSILON\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // TODO implement here\n    unimplemented!()\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpemcn24px.rs:19:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // TODO: implement it\n    true\n}\n\nfn main() {\n  \
    \  let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9fv6z8kr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let c = (a as f64).powf(1f64/3f64);\n    c == c.floor()\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyxnc598c.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).powf(1.0/3.0).fract() == 0.0\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphsc_p7eb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut x = a;\n    while x > 1 {\n        x /= 2;\n \
    \   }\n    while x * x * x < a {\n        x += 1;\n    }\n    if x * x * x ==\
    \ a {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n  \
    \  let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut res = a;\n    while res > 0 {\n        if res\
    \ % 3 == 0 {\n            res /= 3;\n        } else {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpum8c_vzp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let a = a.abs();\n    let mut i = 1;\n    while i*i*i\
    \ <= a {\n        if i*i*i == a {\n            return true;\n        }\n     \
    \   i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsmtw2x_f.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n\tlet cube = a.pow(1.0/3.0);\n\tcube.fract() == 0.0\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk0hefijw.rs:18:19\n   |\n\
    18 |     let cube = a.pow(1.0/3.0);\n   |                      ^^^^^^^ expected\
    \ `u32`, found floating-point number\n\nerror[E0599]: no method named `fract`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpk0hefijw.rs:19:7\n\
    \   |\n19 |     cube.fract() == 0.0\n   |          ^^^^^ method not found in `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        false\n    } else {\n        let b\
    \ = a as f64;\n        let c = b.powf(1.0/3.0);\n        let d = c.trunc();\n\
    \        let e = d.powf(3.0);\n        e == b\n    }\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp06e60zzu.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 1;\n    while i*i*i < a {\n        i += 1;\n\
    \    }\n    i*i*i == a\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfa8yhz2j.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 1;\n    while i * i * i <= a {\n        if\
    \ i * i * i == a {\n            return true;\n        }\n        i += 1;\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2b3516sl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976040
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 1;\n    while i*i*i < a {\n        i += 1;\n\
    \    }\n    if i*i*i == a {\n        true\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpi7tkzmfj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a > 0 {\n        for i in 1..a {\n            if i*i*i\
    \ == a {\n                return true;\n            }\n        }\n    }\n    else\
    \ if a < 0 {\n        for i in -1..a {\n            if i*i*i == a {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp95h_6a2c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    (a as f64).cbrt().fract() == 0.0\n}\n\nfn main() {\n \
    \   let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976042
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    //Your code goes here\n    a > 0 && (a as f64).powf(1.0/3.0)\
    \ as isize == (a as f64).powf(1.0/3.0)\n}\n\nfn main() {\n    let candidate =\
    \ iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n\
    \    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n\
    \    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjfc7ro26.rs:19:51\n   |\n\
    19 |     a > 0 && (a as f64).powf(1.0/3.0) as isize == (a as f64).powf(1.0/3.0)\n\
    \   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976041
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        false\n    } else {\n        for i\
    \ in 0..a + 1 {\n            if i * i * i == a {\n                return true;\n\
    \            }\n        }\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr_lj6f5f.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 { return false; }\n    match a {\n        0 |\
    \ 1 => true,\n        2 | 3 => false,\n        _ => {\n            let mut i =\
    \ 0;\n            while i * i * i < a {\n                i += 1;\n           \
    \ }\n            i * i * i == a\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplctr5rtv.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let c = (a as f64).cbrt();\n    let diff = c - c.floor();\n\
    \    diff == 0.0\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976042
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return iscube(-a);\n    }\n    let\
    \ mut i = 0;\n    while i * i * i <= a {\n        if i * i * i == a {\n      \
    \      return true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let b = a.abs();\n    for i in 0..b {\n        if i *\
    \ i * i == b {\n            return true;\n        }\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1y029qfb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        a = -a;\n    }\n    let mut x = a\
    \ as f64;\n    x = (x / 3.0).powf(1.0 / 3.0);\n    for i in 1..=x as isize {\n\
    \        if i * i * i == a {\n            return true;\n        }\n    }\n   \
    \ false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpzb_qbiwm.rs:19:9\n\
    \   |\n17 | fn iscube(a: isize) -> bool {\n   |           - help: consider making\
    \ this binding mutable: `mut a`\n18 |     if a < 0 {\n19 |         a = -a;\n \
    \  |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 1;\n    let mut cube = 1;\n    while cube\
    \ <= a {\n        if cube == a {\n            return true;\n        }\n      \
    \  i += 1;\n        cube = i * i * i;\n    }\n    false\n}\n\nfn main() {\n  \
    \  let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpk2xxmcbj.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 {\n        return true;\n    }\n    if a > 0\
    \ {\n        let num = (a as f64).powf(1.0/3.0);\n        return num as i32 as\
    \ f64 == num;\n    }\n    let num = (-a as f64).powf(1.0/3.0);\n    return num\
    \ as i32 as f64 == num;\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqpvxul0h.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    match a {\n        0 => true,\n        a if a < 0 => {\n\
    \            let a = -a;\n            let mut prev = 0;\n            let mut curr\
    \ = 1;\n            while curr <= a {\n                if a == curr * curr * curr\
    \ {\n                    return true;\n                }\n                let\
    \ tmp = curr;\n                curr = curr + prev + 1;\n                prev =\
    \ tmp;\n            }\n            false\n        },\n        a => {\n       \
    \     let mut prev = 0;\n            let mut curr = 1;\n            while curr\
    \ <= a {\n                if a == curr * curr * curr {\n                    return\
    \ true;\n                }\n                let tmp = curr;\n                curr\
    \ = curr + prev + 1;\n                prev = tmp;\n            }\n           \
    \ false\n        }\n    }\n}\n\nfn main() {\n    let candidate = iscube;\n   \
    \ assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_u9tmfj7.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 0 { return true; }\n    let a = a.abs();\n   \
    \ let mut base = 1;\n    while base * base * base < a {\n        base += 1;\n\
    \    }\n    if base * base * base == a { return true; }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        return false;\n    }\n    for i in\
    \ 0..a {\n        if i * i * i == a {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqovvm10r.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a < 0 || a == 0 || f64::from(a).sqrt().fract() == 0.0\n\
    }\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<isize>` is not satisfied\n  -->\
    \ /tmp/tmp5nbn_2_q.rs:18:24\n   |\n18 |     a < 0 || a == 0 || f64::from(a).sqrt().fract()\
    \ == 0.0\n   |                        ^^^^^^^^^ the trait `From<isize>` is not\
    \ implemented for `f64`\n   |\n   = help: the following other types implement\
    \ trait `From<T>`:\n             <f32 as From<i16>>\n             <f32 as From<i8>>\n\
    \             <f32 as From<u16>>\n             <f32 as From<u8>>\n           \
    \  <f64 as From<f32>>\n             <f64 as From<i16>>\n             <f64 as From<i32>>\n\
    \             <f64 as From<i8>>\n           and 67 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 0
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    match a {\n        1 | 0 | -1 => true,\n        _ => {\n\
    \            let mut min = 1;\n            let mut max = a;\n            while\
    \ min <= max {\n                let mid = (min + max) / 2;\n                let\
    \ cube = mid * mid * mid;\n                if cube == a {\n                  \
    \  return true;\n                } else if cube < a {\n                    min\
    \ = mid + 1;\n                } else {\n                    max = mid - 1;\n \
    \               }\n            }\n            false\n        }\n    }\n}\n\nfn\
    \ main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // TODO: try to find if a is a cube of some integer number.\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3pb_m6mo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let result = (0..101).find(|&x| x * x * x == a);\n   \
    \ match result {\n        Some(_x) => true,\n        None => false,\n    }\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmptzq52s7x.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    let mut i = 0;\n    while i * i * i < a {\n        i +=\
    \ 1;\n    }\n    return i * i * i == a;\n}\n\nfn main() {\n    let candidate =\
    \ iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n\
    \    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n\
    \    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8fgtafdl.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == (a as f64).powf(1.0/3.0).round() as isize\n}\n\n\
    fn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1a7e1j5i.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a >= 0 && a == a.pow(3)\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc0rn9oo9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 1
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    // isize has signed values, so we have to handle negative\
    \ numbers\n    // differently\n    if a < 0 {\n        // if the number is negative,\
    \ we just take the absolute value\n        // of it and pass that to powi(), which\
    \ will return a f64,\n        // which we then convert to an isize.\n        return\
    \ a.abs().powi(3) as isize == a;\n    } else {\n        // for positive numbers,\
    \ we can just pass the value directly\n        // to powi().\n        return a.powi(3)\
    \ == a;\n    }\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `powi` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmly4bm_b.rs:24:24\n   |\n24 |         return a.abs().powi(3)\
    \ as isize == a;\n   |                        ^^^^ help: there is an associated\
    \ function with a similar name: `pow`\n\nerror[E0599]: no method named `powi`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpmly4bm_b.rs:28:18\n\
    \   |\n28 |         return a.powi(3) == a;\n   |                  ^^^^ help: there\
    \ is an associated function with a similar name: `pow`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976042
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp1yr4caeb.rs:18:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823109
- exit_code: 101
  program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a < 0 {\n        a == -1\n    } else {\n        let\
    \ n = a as f64;\n        let p = n.powf(1.0/3.0);\n        p.fract() == 0.0\n\
    \    }\n}\n\nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1),\
    \ true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxjmzw1e.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976042
