name: HumanEval_162_string_to_md5
language: rs
prompt: "/// Given a string 'text', return its md5 hash equivalent string.\n/// If\
  \ 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
  Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
  \ String) -> Option<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
  \  assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
  A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
  password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
completions: ["    let mut buffer = format!(\"{:x}\", md5::compute(text));\n    if\
    \ buffer.is_empty() {\n        return None;\n    }\n    buffer.insert_str(0, \"\
    0x\");\n    Some(buffer)", "    let mut hasher = Md5::new();\n    if text.is_empty()\
    \ {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n    Some(hasher.result_str())",
  "    if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    let md5_hash = hasher.result_str();\n\
    \n    Some(md5_hash)", "    match text.len() {\n        0 => None,\n        _\
    \ => {\n            let mut hasher = Md5::new();\n            hasher.input(text.as_bytes());\n\
    \            Some(format!(\"{:x}\", hasher.result()))\n        }\n    }", "  \
    \  if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    let result = hasher.result();\n    let\
    \ output = format!(\"{:x}\", result);\n    Some(output)", "    if text.is_empty()\
    \ {\n        return None;\n    }\n\n    let text_md5 = md5::compute(text);\n \
    \   let text_md5_hex = format!(\"{:x}\", text_md5);\n\n    Some(text_md5_hex)",
  "    let mut output = String::from(\"\");\n    if text.len() > 0 {\n        let\
    \ mut md5 = Md5::new();\n        md5.input_str(&text);\n        output = md5.result_str();\n\
    \    }\n    if output.len() > 0 {\n        Some(output)\n    } else {\n      \
    \  None\n    }", "    if text.is_empty() {\n        return None;\n    }\n\n  \
    \  let digest = md5::compute(text);\n    Some(format!(\"{:x}\", digest))", " \
    \   if text.is_empty() {\n        return None;\n    }\n\n    let md5 = md5::compute(text);\n\
    \    let mut bytes = [0; 16];\n    bytes.copy_from_slice(&md5);\n    let s = hex::encode(bytes);\n\
    \    Some(s)", "    if text.is_empty() {\n        return None;\n    }\n\n    let\
    \ result = md5::compute(text);\n    let result_hex = format!(\"{:x}\", result);\n\
    \    Some(result_hex)", "    match text.is_empty() {\n        true => None,\n\
    \        false => {\n            let mut hasher = Md5::new();\n            hasher.input_str(&text);\n\
    \            Some(hasher.result_str())\n        }\n    }", "    let mut hasher\
    \ = Md5::new();\n    if text.is_empty() {\n        return None;\n    }\n    hasher.input(text.as_bytes());\n\
    \    Some(format!(\"{:x}\", hasher.result()))", "    if text.is_empty() {\n  \
    \      return None;\n    }\n\n    let mut hash = String::new();\n    let mut m\
    \ = Md5::new();\n    m.input_str(&text);\n    let result = m.result_str();\n \
    \   hash.push_str(&result);\n    Some(hash)", "    if text.is_empty() {\n    \
    \    return None;\n    }\n\n    Some(format!(\"{:x}\", md5::compute(text)))",
  "    if text.is_empty() {\n        return None;\n    }\n\n    let mut m = Md5::new();\n\
    \    m.input(text.as_bytes());\n    Some(format!(\"{:x}\", m.result()))", "  \
    \  if text.is_empty() {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n\
    \    hasher.input(text.as_bytes());\n    let result = hasher.result();\n    let\
    \ output = format!(\"{:x}\", result);\n    Some(output)", "    if text.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut hasher = Md5::new();\n    hasher.input(text.as_bytes());\n\
    \    let digest = hasher.result();\n    let hex_digest = hex::encode(digest);\n\
    \    Some(hex_digest)", "    let text = text.as_bytes();\n    let mut digest =\
    \ vec![0; 16];\n    if text.len() > 0 {\n        let mut hasher = Md5::new();\n\
    \        hasher.input(text);\n        digest.copy_from_slice(hasher.result().as_slice());\n\
    \    }\n    Some(hex::encode(digest))", "    if text.is_empty() {\n        return\
    \ None;\n    }\n\n    Some(md5::compute(text).to_string())", "    if text.is_empty()\
    \ {\n        return None;\n    }\n\n    let digest = md5::compute(text);\n   \
    \ let digest_str = format!(\"{:x}\", digest);\n    Some(digest_str)"]
stop_tokens:
- "\n}"
