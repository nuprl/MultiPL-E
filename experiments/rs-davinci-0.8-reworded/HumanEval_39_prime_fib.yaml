name: HumanEval_39_prime_fib
language: rs
prompt: "/// prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n/// >>> prime_fib(1)\n/// 2\n/// >>> prime_fib(2)\n/// 3\n/// >>> prime_fib(3)\n\
  /// 5\n/// >>> prime_fib(4)\n/// 13\n/// >>> prime_fib(5)\n/// 89\nfn prime_fib(n:\
  \ isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = prime_fib;\n    assert_eq!(candidate(1),\
  \ 2);\n    assert_eq!(candidate(2), 3);\n    assert_eq!(candidate(3), 5);\n    assert_eq!(candidate(4),\
  \ 13);\n    assert_eq!(candidate(5), 89);\n    assert_eq!(candidate(6), 233);\n\
  \    assert_eq!(candidate(7), 1597);\n    assert_eq!(candidate(8), 28657);\n   \
  \ assert_eq!(candidate(9), 514229);\n    assert_eq!(candidate(10), 433494437);\n\
  }\n"
completions: ["    let mut a = 0;\n    let mut b = 1;\n    let mut c = 0;\n    let\
    \ mut primes = 0;\n    while primes < n {\n        c = a + b;\n        a = b;\n\
    \        b = c;\n        if is_prime(c) {\n            primes += 1;\n        }\n\
    \    }\n    c", '    nth_prime_fibonacci(n).unwrap()', "    let mut counter =\
    \ 0;\n    let mut fib = 1;\n    let mut prev = 0;\n    let mut curr = 1;\n   \
    \ while counter < n {\n        if is_prime(fib) {\n            counter += 1;\n\
    \        }\n        fib = prev + curr;\n        prev = curr;\n        curr = fib;\n\
    \    }\n    return fib;", "    let mut fibs = vec![2, 3];\n    let mut i = 0;\n\
    \    while fibs.len() < n as usize {\n        fibs.push(fibs[i] + fibs[i + 1]);\n\
    \        i += 1;\n    }\n    return fibs[n as usize - 1];", "    // TODO\n   \
    \ 0", "    let mut i = 1;\n    let mut fib = 1;\n    let mut prev = 0;\n    let\
    \ mut next = 0;\n    let mut fib_next = 0;\n    while i <= n {\n        if is_prime(fib)\
    \ {\n            next = fib;\n            i += 1;\n        }\n        fib_next\
    \ = fib + prev;\n        prev = fib;\n        fib = fib_next;\n    }\n    next",
  "    let mut fib_nums = Vec::new();\n    fib_nums.push(2);\n    fib_nums.push(3);\n\
    \    let mut prime_fib_nums = Vec::new();\n    prime_fib_nums.push(2);\n    prime_fib_nums.push(3);\n\
    \    let mut fib_n = 0;\n    let mut prime_fib_n = 0;\n    while prime_fib_n <\
    \ n {\n        fib_n += 1;\n        let fib_nth = fib(fib_n);\n        fib_nums.push(fib_nth);\n\
    \        if is_prime(fib_nth) {\n            prime_fib_n += 1;\n            prime_fib_nums.push(fib_nth);\n\
    \        }\n    }\n    prime_fib_nums[n as usize]", "    let mut n = n;\n    let\
    \ mut n1 = 1;\n    let mut n2 = 1;\n    while n > 0 {\n        let n0 = n1 + n2;\n\
    \        n1 = n2;\n        n2 = n0;\n        if is_prime(n2) {\n            n\
    \ -= 1;\n        }\n    }\n    n2", "    let mut fib = fib::Fibonacci::new();\n\
    \    let mut count = 0;\n    loop {\n        let num = fib.next().unwrap();\n\
    \        if is_prime(num) {\n            count += 1;\n            if count ==\
    \ n {\n                return num;\n            }\n        }\n    }", "    let\
    \ mut fib = vec![1, 1];\n    let mut i = 2;\n    let mut result = 0;\n    while\
    \ i < n {\n        let num = fib[i - 1] + fib[i - 2];\n        if is_prime(num)\
    \ {\n            fib.push(num);\n            i += 1;\n        }\n    }\n    match\
    \ fib.last() {\n        Some(n) => n.clone(),\n        None => -1,\n    }", " \
    \   let mut f0 = 2;\n    let mut f1 = 3;\n    let mut f2 = 5;\n    let mut i =\
    \ 3;\n    while i < n {\n        let tmp = f2;\n        f2 = f0 + f1;\n      \
    \  f0 = f1;\n        f1 = tmp;\n        if prime(f2) {\n            i += 1;\n\
    \        }\n    }\n    return f2;", "    let mut fib_number = 1;\n    let mut\
    \ fib_i = 1;\n    let mut fib_n_1 = 0;\n    let mut fib_n_2 = 0;\n    let mut\
    \ counter = 0;\n    while counter < n {\n        fib_n_2 = fib_n_1;\n        fib_n_1\
    \ = fib_i;\n        fib_i = fib_n_1 + fib_n_2;\n        if is_prime(fib_i) {\n\
    \            fib_number = fib_i;\n            counter += 1;\n        }\n    }\n\
    \    fib_number", "    if n == 1 {\n        return 2;\n    }\n    let mut fibs\
    \ = vec![2, 3];\n    let mut idx = 2;\n    while idx < n {\n        let f = fibs[idx\
    \ - 1] + fibs[idx - 2];\n        if prime(f) {\n            fibs.push(f);\n  \
    \          idx += 1;\n        }\n    }\n    fibs[n - 1]", "    let mut count =\
    \ 0;\n    let mut fib: isize = 1;\n    let mut a: isize = 1;\n    let mut b: isize\
    \ = 1;\n    let mut c: isize = 1;\n    while count < n {\n        a = b;\n   \
    \     b = c;\n        c = a + b;\n        fib = c;\n        if is_prime(fib) {\n\
    \            count += 1;\n        }\n    }\n    fib", "    let mut fib = (1, 1);\n\
    \    let mut i = 1;\n    while i < n {\n        fib = (fib.1, fib.0 + fib.1);\n\
    \        if is_prime(fib.1) {\n            i += 1;\n        }\n    }\n    fib.1",
  '    fib(n).filter(|&x| is_prime(x)).nth(n as usize - 1).unwrap()', "    let mut\
    \ counter = 0;\n    let mut i = 1;\n    while counter < n {\n        let fib_num\
    \ = fib(i);\n        if is_prime(fib_num) {\n            counter += 1;\n     \
    \   }\n        i += 1;\n    }\n    fib(i - 1)", "    let mut a = 1;\n    let mut\
    \ b = 2;\n    let mut k = 2;\n    let mut res = 2;\n    while k < n {\n      \
    \  let c = a + b;\n        if is_prime(c) {\n            res = c;\n          \
    \  k += 1;\n        }\n        a = b;\n        b = c;\n    }\n    res", "    if\
    \ n == 1 {\n        return 2;\n    }\n    if n == 2 {\n        return 3;\n   \
    \ }\n    let mut a = 2;\n    let mut b = 3;\n    let mut i = 3;\n    while i <=\
    \ n {\n        let c = a + b;\n        if prime::is_prime(c) {\n            i\
    \ += 1;\n        }\n        a = b;\n        b = c;\n    }\n    b", "    if n <\
    \ 1 {\n        return 0;\n    }\n\n    let fibs = fibonacci_iter().filter(|&n|\
    \ is_prime(n));\n    let mut x = 0;\n    let mut n = n;\n    for f in fibs {\n\
    \        if n == 1 {\n            return f;\n        }\n        n -= 1;\n    }\n\
    \    0"]
stop_tokens:
- "\n}"
