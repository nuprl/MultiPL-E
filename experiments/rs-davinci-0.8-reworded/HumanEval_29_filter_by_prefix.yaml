name: HumanEval_29_filter_by_prefix
language: rs
prompt: "/// Filter an input vector of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n///\
  \ >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
  cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
completions: ["    let result = strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();\n\
    \    result", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", "    //\
    \ Use a pattern guard to check that the string starts with the prefix.\n    strings.into_iter().filter(|s|\
    \ s.starts_with(&prefix)).collect()", '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut ret = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            ret.push(s);\n        }\n    }\n    ret", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut ret: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            ret.push(s);\n\
    \        }\n    }\n    ret", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|e| e.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for word in strings {\n        if word.starts_with(&prefix) {\n         \
    \   filtered_strings.push(word);\n        }\n    }\n    filtered_strings", " \
    \   let result = strings.into_iter().filter(|string| is_prefix(string, &prefix)).collect();\n\
    \    result"]
stop_tokens:
- "\n}"
