name: HumanEval_29_filter_by_prefix
language: rs
prompt: "/// Filter an input vector of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n///\
  \ >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
  cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
completions: ["    let result = strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();\n\
    \    result", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", "    //\
    \ Use a pattern guard to check that the string starts with the prefix.\n    strings.into_iter().filter(|s|\
    \ s.starts_with(&prefix)).collect()", '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut ret = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            ret.push(s);\n        }\n    }\n    ret", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut ret: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            ret.push(s);\n\
    \        }\n    }\n    ret", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|e| e.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for word in strings {\n        if word.starts_with(&prefix) {\n         \
    \   filtered_strings.push(word);\n        }\n    }\n    filtered_strings", " \
    \   let result = strings.into_iter().filter(|string| is_prefix(string, &prefix)).collect();\n\
    \    result", "    let mut filtered: Vec<String> = Vec::new();\n    for str in\
    \ strings {\n        if str.starts_with(&prefix) {\n            filtered.push(str);\n\
    \        }\n    }\n    filtered", '    return strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', "    let\
    \ mut prefix_vec = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            prefix_vec.push(s);\n        }\n    }\n    prefix_vec", "   \
    \ let mut filtered_strings = Vec::new();\n    for string in strings {\n      \
    \  if string.starts_with(&prefix) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    return strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    let prefix_len = prefix.len();\n    strings.into_iter().filter(|str| &str[0..prefix_len]\
    \ == prefix).collect()", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    strings.into_iter().filter(|string| {\n        match string.starts_with(&prefix)\
    \ {\n            true => true,\n            false => false,\n        }\n    }).collect()",
  "    let mut filtered: Vec<String> = Vec::new();\n    for s in strings {\n     \
    \   if s.starts_with(&prefix) {\n            filtered.push(s)\n        }\n   \
    \ }\n    filtered", '    strings.into_iter().filter(|str| str.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', '    return strings.into_iter().filter(|word|
    word.starts_with(&prefix)).collect();', "    let mut res = Vec::new();\n    for\
    \ string in strings {\n        if string.starts_with(&prefix) {\n            res.push(string);\n\
    \        }\n    }\n    res", "    let mut res = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(&prefix) {\n            res.push(s);\n        }\n\
    \    }\n    res", "    let mut new_vec = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            new_vec.push(string);\n\
    \        }\n    }\n    new_vec", '    strings.into_iter().filter(|str| str.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut filtered_strings = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            filtered_strings.push(s);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', "    let mut strings_iter = strings.into_iter();\n\
    \    strings_iter.filter(|s| s.starts_with(&prefix)).collect()", '    return strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut strings_filtered = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       strings_filtered.push(string)\n        }\n    }\n    strings_filtered",
  "    let mut res = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            res.push(s);\n        }\n    }\n    res", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut filtered_strings = Vec::new();\n    for s in strings {\n        if\
    \ s.starts_with(&prefix) {\n            filtered_strings.push(s);\n        }\n\
    \    }\n    filtered_strings", "    strings.into_iter().filter(|x| {\n       \
    \ x.to_lowercase().starts_with(&prefix.to_lowercase())\n    }).collect()", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    let mut output: Vec<String> = Vec::new();\n    for s in strings {\n       \
    \ if s.starts_with(&prefix) {\n            output.push(s);\n        }\n    }\n\
    \    output", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    return strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for v in strings {\n        if v.starts_with(&prefix)\
    \ {\n            result.push(v)\n        }\n    }\n    result", "    let mut filtered_strings\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix) {\n\
    \            filtered_strings.push(s);\n        }\n    }\n    filtered_strings",
  "    let mut results = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            results.push(string)\n        }\n    }\n    results", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut result = Vec::new();\n \
    \   for string in strings {\n        if string.starts_with(&prefix) {\n      \
    \      result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut filtered: Vec<String> = Vec::new();\n\
    \    for mut current in strings {\n        if current.starts_with(&prefix) {\n\
    \            filtered.push(current);\n        }\n    }\n    filtered", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let prefix_len = prefix.len();\n    strings.into_iter().filter(|s| {\n    \
    \    if s.len() < prefix_len {\n            return false;\n        }\n       \
    \ let mut slice = &s[..prefix_len];\n        if slice == prefix {\n          \
    \  return true;\n        }\n        return false;\n    }).collect()", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|i| i.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    strings.into_iter().filter(|string| {\n        let s = string.as_str();\n \
    \       s.starts_with(prefix.as_str())\n    }).collect()", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|word|
    word.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|a| a.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    //\
    \ TODO: implement\n    vec![]", '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ results = Vec::new();\n    for elem in strings {\n        if elem.starts_with(&prefix)\
    \ {\n            results.push(elem);\n        }\n    }\n    results", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    // TODO: Implement this function.\n    return strings.into_iter().filter(|string|\
    \ string.chars().next().unwrap() == prefix.chars().next().unwrap()).collect();",
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', "    let\
    \ mut filtered_strings = Vec::new();\n    for string in strings {\n        if\
    \ string.starts_with(&prefix) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    let mut output = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       output.push(string);\n        }\n    }\n    output", "    let mut result\
    \ = Vec::new();\n    for i in strings {\n        if i.starts_with(&prefix) {\n\
    \            result.push(i);\n        }\n    }\n    result", "    let mut ret_vec\
    \ = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            ret_vec.push(string);\n        }\n    }\n    ret_vec", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    return strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut res = Vec::new();\n    for s\
    \ in strings {\n        if s.starts_with(&prefix) {\n            res.push(s);\n\
    \        }\n    }\n    res", '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", "    let\
    \ mut results = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            results.push(string);\n        }\n    }\n    results", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    return
    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut v: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            v.push(s);\n\
    \        }\n    }\n    v", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|i| i.starts_with(&prefix)).collect()', "    //\
    \ let mut results = Vec::new();\n    // for s in strings {\n    //     if s.starts_with(&prefix)\
    \ {\n    //         results.push(s);\n    //     }\n    // }\n    // results\n\
    \    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let prefix_len = prefix.len();\n    strings.into_iter().filter(|s| {\n    \
    \    if s.len() < prefix_len {\n            return false;\n        }\n       \
    \ s[0..prefix_len] == prefix\n    }).collect()", "    let mut out: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix) {\n\
    \            out.push(s);\n        }\n    }\n    out", "    let mut filtered_strings\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix) {\n\
    \            filtered_strings.push(s);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    // TODO: filter strings only for ones\
    \ that start with the prefix (hint: use the .starts_with() method)\n    // let\
    \ filter_strings = vec![];\n    // let filter_strings = vec![String::from(\"abc\"\
    ), String::from(\"array\")];\n    let filter_strings = strings.into_iter().filter(|s|\
    \ s.starts_with(&prefix)).collect();\n    filter_strings", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let ret = strings.into_iter().filter(|x|\
    \ x.starts_with(&prefix)).collect();\n    ret", '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', '    return strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut filtered = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       filtered.push(string)\n        }\n    }\n    filtered", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut vec: Vec<String> = Vec::new();\n    for string in strings {\n        if\
    \ string.starts_with(&prefix) {\n            vec.push(string);\n        }\n  \
    \  }\n    vec", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|item|
    item.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut results = Vec::new();\n    for i in strings {\n        if i.starts_with(&prefix)\
    \ {\n            results.push(i);\n        }\n    }\n    results", "    let mut\
    \ results = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            results.push(string);\n        }\n    }\n    results", "    let\
    \ filtered_strings: Vec<String> = strings.into_iter().filter(|string| string.starts_with(&prefix)).collect();\n\
    \    filtered_strings", "    let mut filtered: Vec<String> = Vec::new();\n   \
    \ for string in strings {\n        if string.starts_with(&prefix) {\n        \
    \    filtered.push(string);\n        }\n    }\n    filtered", "    let mut final_vec\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix) {\n\
    \            final_vec.push(s)\n        }\n    }\n    final_vec", '    strings.into_iter().filter(|v|
    v.starts_with(&prefix)).collect()', "    let mut res = Vec::new();\n    for s\
    \ in strings {\n        if s.starts_with(&prefix) {\n            res.push(s);\n\
    \        }\n    }\n    res", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', "    let\
    \ mut res = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            res.push(s);\n        }\n    }\n    res", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut result = Vec::new();\n    for\
    \ string in strings {\n        if string.starts_with(&prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    return strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();',
  "    let mut filterered_strings = Vec::new();\n    for string in strings {\n   \
    \     if string.starts_with(&prefix) {\n            filterered_strings.push(string);\n\
    \        }\n    }\n    filterered_strings", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut results = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            results.push(s);\n\
    \        }\n    }\n    results", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.starts_with(&prefix) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", "    let mut ret = Vec::new();\n   \
    \ for s in strings {\n        if s.starts_with(&prefix) {\n            ret.push(s);\n\
    \        }\n    }\n    ret", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut ret: Vec<String> = Vec::new();\n\
    \    for str in strings {\n        if str.starts_with(&prefix) {\n           \
    \ ret.push(str);\n        }\n    }\n    ret", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut strings_filtered = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       strings_filtered.push(string);\n        }\n    }\n    strings_filtered"]
stop_tokens:
- "\n}"
