name: HumanEval_8_sum_product
language: rs
prompt: "/// For a given vector of integers, return a tuple consisting of a sum and\
  \ a product of all the integers in a vector.\n/// Empty sum should be equal to 0\
  \ and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0,\
  \ 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
  \ Vec<isize>) -> (isize, isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
  \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
  \ (10, 10));\n}\n"
completions: ["    let s: isize = numbers.iter().sum();\n    let p: isize = numbers.iter().product();\n\
    \    (s, p)", "    (\n        numbers.iter().sum(),\n        numbers.iter().product(),\n\
    \    )", "    let mut sum = 0;\n    let mut product = 1;\n    for num in numbers\
    \ {\n        sum += num;\n        product *= num;\n    }\n    (sum, product)",
  "    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ number in numbers {\n        sum += number;\n        product *= number;\n  \
    \  }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n \
    \   for n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for num in numbers\
    \ {\n        sum += num;\n        product *= num;\n    }\n    (sum, product)",
  '    (numbers.iter().sum(), numbers.iter().product())', "    // This code produces\
    \ the same result, but it is not as concise as the code in the solution.\n   \
    \ let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n  \
    \      sum += number;\n        product *= number;\n    }\n    (sum, product)",
  "    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ number in numbers {\n        sum += number;\n        product *= number;\n  \
    \  }\n    (sum, product)", "    let sum = numbers.iter().sum();\n    let product\
    \ = numbers.iter().product();\n    (sum, product)", '    unimplemented!()', " \
    \   let mut total_sum = 0;\n    let mut total_product = 1;\n    for number in\
    \ numbers {\n        total_sum += number;\n        total_product *= number;\n\
    \    }\n    (total_sum, total_product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    let mut prod: isize = 1;\n    let mut sum: isize\
    \ = 0;\n    for i in numbers {\n        prod *= i;\n        sum += i;\n    }\n\
    \    (sum, prod)", "    let mut sum = 0;\n    let mut product = 1;\n    for number\
    \ in numbers {\n        sum += number;\n        product *= number;\n    }\n  \
    \  (sum, product)", '    (0, 1)', '    (numbers.iter().sum(), numbers.iter().product())',
  "    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)"]
stop_tokens:
- "\n}"
