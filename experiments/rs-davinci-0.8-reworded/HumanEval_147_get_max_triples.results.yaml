language: rs
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp52dptu8l.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp52dptu8l.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp52dptu8l.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut res = 0;\n    for i in 0..n - 2 {\n      \
    \  for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res += 1;\n           \
    \     }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1nztj6qj.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp1nztj6qj.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1nztj6qj.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n\tlet mut a: Vec<isize> = vec![0; n as usize];\n\tlet mut n_triples = 0;\n\
    \tfor i in 0..n {\n\t\ta[i as usize] = i * i - i + 1;\n\t}\n\tfor i in 0..n {\n\
    \t\tfor j in i+1..n {\n\t\t\tfor k in j+1..n {\n\t\t\t\tif (a[i as usize] + a[j\
    \ as usize] + a[k as usize]) % 3 == 0 {\n\t\t\t\t\tn_triples += 1;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\tn_triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp266vswqs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = (1..n + 1).map(|x| x * x - x + 1).collect::<Vec<isize>>();\n\
    \    let mut count = 0;\n    for i in 0..a.len() {\n        for j in i + 1..a.len()\
    \ {\n            for k in j + 1..a.len() {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    count += 1;\n                }\n     \
    \       }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut triples: Vec<(isize, isize, isize)> = Vec::new();\n\
    \    for i in 0..a.len() - 2 {\n        for j in i + 1..a.len() - 1 {\n      \
    \      for k in j + 1..a.len() {\n                if a[i] + a[j] + a[k] % 3 ==\
    \ 0 {\n                    triples.push((a[i], a[j], a[k]));\n               \
    \ }\n            }\n        }\n    }\n    triples.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptvaeixc1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    for i in 1..n-1 {\n        let j = i + 1;\n   \
    \     let k = j + 1;\n        if (i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1) % 3 == 0 {\n            res += 1;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpvan4dhjr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut max_triples = 0;\n    let mut a = Vec::new();\n    for i in 1..=n\
    \ {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    max_triples += 1;\n         \
    \       }\n            }\n        }\n    }\n    max_triples\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcdjw7hgm.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpcdjw7hgm.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpcdjw7hgm.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n           \
    \         res += 1;\n                }\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpvkhsrjs4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 1..n-1 {\n        for j in i+1..n {\n\
    \            if (i*i-i+1 + j*j-j+1) % 3 == 0 {\n                sum += n - j;\n\
    \                break;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp25n3s_da.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut arr = vec![0; n as usize];\n    for i in 0..n {\n        arr[i\
    \ as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n\
    \ - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n  \
    \              if (arr[i as usize] + arr[j as usize] + arr[k as usize]) % 3 ==\
    \ 0 {\n                    count += 1;\n                }\n            }\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpaldleo5r.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut arr = Vec::new();\n    for i in 1..=n {\n        arr.push(i *\
    \ i - i + 1);\n    }\n    // println!(\"{:?}\", arr);\n    let mut total = 0;\n\
    \    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in\
    \ j + 1..n {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n     \
    \               total += 1;\n                }\n            }\n        }\n   \
    \ }\n    total\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphcabd5j2.rs:21:21\n\
    \   |\n21 |                 if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |   \
    \                  ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmphcabd5j2.rs:21:30\n   |\n21 |                 if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 {\n   |                              ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphcabd5j2.rs:21:39\n   |\n21 |  \
    \               if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |               \
    \                        ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    let mut count = 0;\n\
    \    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i\
    \ in 0..n {\n        for j in i+1..n {\n            for k in j+1..n {\n      \
    \          if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpdytce13o.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for j in 1..n {\n        for k in j+1..n+1 {\n\
    \            sum += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `1`', /tmp/tmpu1eebeo7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    for i in 1..n - 1 {\n        for j in i + 1..n\
    \ {\n            for k in j + 1..n + 1 {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    triples += 1;\n\
    \                }\n            }\n        }\n    }\n    triples\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).map(|i| (i * i - i + 1) % 3).filter(|&x| x == 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3a6w9g6l.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    let vals = (1..=n).map(|x| x * x - x + 1).collect::<Vec<isize>>();\n\
    \    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in\
    \ j + 1..n {\n                if (vals[i] + vals[j] + vals[k]) % 3 == 0 {\n  \
    \                  res += 1;\n                }\n            }\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1qzv6olw.rs:17:21\n\
    \   |\n17 |                 if (vals[i] + vals[j] + vals[k]) % 3 == 0 {\n   |\
    \                     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp1qzv6olw.rs:17:31\n   |\n17 |                 if (vals[i] + vals[j]\
    \ + vals[k]) % 3 == 0 {\n   |                               ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1qzv6olw.rs:17:41\n   |\n17 |  \
    \               if (vals[i] + vals[j] + vals[k]) % 3 == 0 {\n   |            \
    \                             ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut v: Vec<isize> = Vec::new();\n\
    \    for i in 1..=n {\n        v.push(i * i - i + 1);\n    }\n    let mut count\
    \ = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n           \
    \ for k in j + 1..n {\n                if (v[i] + v[j] + v[k]) % 3 == 0 {\n  \
    \                  count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpofn74ubk.rs:23:21\n\
    \   |\n23 |                 if (v[i] + v[j] + v[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpofn74ubk.rs:23:28\n   |\n23 |                 if (v[i] + v[j] +\
    \ v[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpofn74ubk.rs:23:35\n   |\n23 |  \
    \               if (v[i] + v[j] + v[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut x = 1;\n    let mut a = vec![];\n    for _ in 0..n {\n      \
    \  a.push(x);\n        x += 2;\n    }\n    let mut count = 0;\n    for i in 0..a.len()\
    \ - 2 {\n        for j in i + 1..a.len() - 1 {\n            for k in j + 1..a.len()\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpoiojlp0k.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len() {\n      \
    \  for j in i+1..a.len() {\n            for k in j+1..a.len() {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n   \
    \             }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut count = 0;\n    for\
    \ i in 1..n - 1 {\n        for j in i + 1..n {\n            let r = (i * i - i\
    \ + 1) + (j * j - j + 1);\n            if r % 3 == 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpj2rdz9fu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
