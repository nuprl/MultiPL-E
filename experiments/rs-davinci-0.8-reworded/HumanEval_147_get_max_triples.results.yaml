language: rs
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp52dptu8l.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp52dptu8l.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp52dptu8l.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut res = 0;\n    for i in 0..n - 2 {\n      \
    \  for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res += 1;\n           \
    \     }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1nztj6qj.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp1nztj6qj.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1nztj6qj.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n\tlet mut a: Vec<isize> = vec![0; n as usize];\n\tlet mut n_triples = 0;\n\
    \tfor i in 0..n {\n\t\ta[i as usize] = i * i - i + 1;\n\t}\n\tfor i in 0..n {\n\
    \t\tfor j in i+1..n {\n\t\t\tfor k in j+1..n {\n\t\t\t\tif (a[i as usize] + a[j\
    \ as usize] + a[k as usize]) % 3 == 0 {\n\t\t\t\t\tn_triples += 1;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\tn_triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp266vswqs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = (1..n + 1).map(|x| x * x - x + 1).collect::<Vec<isize>>();\n\
    \    let mut count = 0;\n    for i in 0..a.len() {\n        for j in i + 1..a.len()\
    \ {\n            for k in j + 1..a.len() {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    count += 1;\n                }\n     \
    \       }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut triples: Vec<(isize, isize, isize)> = Vec::new();\n\
    \    for i in 0..a.len() - 2 {\n        for j in i + 1..a.len() - 1 {\n      \
    \      for k in j + 1..a.len() {\n                if a[i] + a[j] + a[k] % 3 ==\
    \ 0 {\n                    triples.push((a[i], a[j], a[k]));\n               \
    \ }\n            }\n        }\n    }\n    triples.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptvaeixc1.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    for i in 1..n-1 {\n        let j = i + 1;\n   \
    \     let k = j + 1;\n        if (i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1) % 3 == 0 {\n            res += 1;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpvan4dhjr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut max_triples = 0;\n    let mut a = Vec::new();\n    for i in 1..=n\
    \ {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    max_triples += 1;\n         \
    \       }\n            }\n        }\n    }\n    max_triples\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcdjw7hgm.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpcdjw7hgm.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpcdjw7hgm.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    let mut a = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n           \
    \         res += 1;\n                }\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpvkhsrjs4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for i in 1..n-1 {\n        for j in i+1..n {\n\
    \            if (i*i-i+1 + j*j-j+1) % 3 == 0 {\n                sum += n - j;\n\
    \                break;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp25n3s_da.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut arr = vec![0; n as usize];\n    for i in 0..n {\n        arr[i\
    \ as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for i in 0..n\
    \ - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n  \
    \              if (arr[i as usize] + arr[j as usize] + arr[k as usize]) % 3 ==\
    \ 0 {\n                    count += 1;\n                }\n            }\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpaldleo5r.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut arr = Vec::new();\n    for i in 1..=n {\n        arr.push(i *\
    \ i - i + 1);\n    }\n    // println!(\"{:?}\", arr);\n    let mut total = 0;\n\
    \    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in\
    \ j + 1..n {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n     \
    \               total += 1;\n                }\n            }\n        }\n   \
    \ }\n    total\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphcabd5j2.rs:21:21\n\
    \   |\n21 |                 if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |   \
    \                  ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmphcabd5j2.rs:21:30\n   |\n21 |                 if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 {\n   |                              ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphcabd5j2.rs:21:39\n   |\n21 |  \
    \               if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |               \
    \                        ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    let mut count = 0;\n\
    \    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    for i\
    \ in 0..n {\n        for j in i+1..n {\n            for k in j+1..n {\n      \
    \          if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n   \
    \                 count += 1;\n                }\n            }\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpdytce13o.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for j in 1..n {\n        for k in j+1..n+1 {\n\
    \            sum += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `1`', /tmp/tmpu1eebeo7.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    for i in 1..n - 1 {\n        for j in i + 1..n\
    \ {\n            for k in j + 1..n + 1 {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    triples += 1;\n\
    \                }\n            }\n        }\n    }\n    triples\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).map(|i| (i * i - i + 1) % 3).filter(|&x| x == 0).count() as isize\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp3a6w9g6l.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    let vals = (1..=n).map(|x| x * x - x + 1).collect::<Vec<isize>>();\n\
    \    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in\
    \ j + 1..n {\n                if (vals[i] + vals[j] + vals[k]) % 3 == 0 {\n  \
    \                  res += 1;\n                }\n            }\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1qzv6olw.rs:17:21\n\
    \   |\n17 |                 if (vals[i] + vals[j] + vals[k]) % 3 == 0 {\n   |\
    \                     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp1qzv6olw.rs:17:31\n   |\n17 |                 if (vals[i] + vals[j]\
    \ + vals[k]) % 3 == 0 {\n   |                               ^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1qzv6olw.rs:17:41\n   |\n17 |  \
    \               if (vals[i] + vals[j] + vals[k]) % 3 == 0 {\n   |            \
    \                             ^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut v: Vec<isize> = Vec::new();\n\
    \    for i in 1..=n {\n        v.push(i * i - i + 1);\n    }\n    let mut count\
    \ = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n           \
    \ for k in j + 1..n {\n                if (v[i] + v[j] + v[k]) % 3 == 0 {\n  \
    \                  count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpofn74ubk.rs:23:21\n\
    \   |\n23 |                 if (v[i] + v[j] + v[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpofn74ubk.rs:23:28\n   |\n23 |                 if (v[i] + v[j] +\
    \ v[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpofn74ubk.rs:23:35\n   |\n23 |  \
    \               if (v[i] + v[j] + v[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut x = 1;\n    let mut a = vec![];\n    for _ in 0..n {\n      \
    \  a.push(x);\n        x += 2;\n    }\n    let mut count = 0;\n    for i in 0..a.len()\
    \ - 2 {\n        for j in i + 1..a.len() - 1 {\n            for k in j + 1..a.len()\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpoiojlp0k.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len() {\n      \
    \  for j in i+1..a.len() {\n            for k in j+1..a.len() {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n   \
    \             }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut count = 0;\n    for\
    \ i in 1..n - 1 {\n        for j in i + 1..n {\n            let r = (i * i - i\
    \ + 1) + (j * j - j + 1);\n            if r % 3 == 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpj2rdz9fu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n - 1).fold(0, |sum, i| {\n        let k = n - 1 - i;\n        let\
    \ j = k - i;\n        if 2 * i + j < n && (2 * i + j) % 3 == 0 {\n           \
    \ sum + 1\n        } else {\n            sum\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpe1_9iuti.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // The values of a[i] = i * i - i + 1 is divisible by 3 if i is divisible\
    \ by 3.\n    // So the values of a[i] for which a[i] is divisible by 3 is i =\
    \ 3, 6, 9, 12...\n    // For example, when n = 10, a = [1, 3, 7, 13, 21, 31, 43,\
    \ 57, 73, 91]. \n    // For this a vector, the only valid triple is (7, 31, 43).\n\
    \    // So, the number of triples is n / 3 - 2.\n    n / 3 - 2\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `1`', /tmp/tmpwnslagl1.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let arr: Vec<isize> = (1..n + 1).map(|i| i * i - i + 1).collect();\n\
    \    println!(\"{:?}\", arr);\n    let mut count = 0;\n    for i in 0..n - 2 {\n\
    \        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n          \
    \      if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxcoicy40.rs:18:21\n\
    \   |\n18 |                 if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |   \
    \                  ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxcoicy40.rs:18:30\n\
    \   |\n18 |                 if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |   \
    \                           ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpxcoicy40.rs:18:39\n   |\n18 |                 if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 {\n   |                                       ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut arr = Vec::with_capacity(n as usize);\n    for i in 1..=n {\n\
    \        arr.push(i * i - i + 1);\n    }\n    let res = arr.iter().enumerate().map(|(i,\
    \ ai)| {\n        arr.iter().enumerate().filter(|(j, _)| i < *j).map(|(j, aj)|\
    \ {\n            arr.iter().enumerate().filter(|(k, _)| j < *k)\n            \
    \    .filter(|(_, ak)| (ai + aj + ak) % 3 == 0)\n                .count()\n  \
    \      }).sum::<usize>()\n    }).sum::<usize>();\n    res as isize\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&&isize` to `isize`\n  --> /tmp/tmp143nkni1.rs:19:44\n\
    \   |\n19 |                 .filter(|(_, ak)| (ai + aj + ak) % 3 == 0)\n   | \
    \                                           ^ no implementation for `isize + &&isize`\n\
    \   |\n   = help: the trait `Add<&&isize>` is not implemented for `isize`\n  \
    \ = help: the following other types implement trait `Add<Rhs>`:\n            \
    \ <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a\
    \ i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n             <&'a i32\
    \ as Add<i32>>\n             <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n\
    \             <&'a isize as Add<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n    \
    \    for j in i + 1..n - 1 {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n    \
    \    for j in i + 1..n - 1 {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a = vec![0; n as usize];\n\
    \    let mut counter = 0;\n    for i in 1..n {\n        a[i as usize] = i * i\
    \ - i + 1;\n        for j in 0..i-1 {\n            for k in j+1..i {\n       \
    \         if (a[j as usize] + a[k as usize] + a[i as usize]) % 3 == 0 {\n    \
    \                counter += 1;\n                }\n            }\n        }\n\
    \    }\n    counter\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpychii839.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n\
    \ - 1 {\n            for k in j + 1..n {\n                if (i + 1) * (i + 1)\
    \ - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1) * (k + 1) - (k + 1)\
    \ + 1 % 3 == 0 {\n                    count += 1;\n                }\n       \
    \     }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8w1dui3r.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n    \
    \    for j in i + 1..n - 1 {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    let mut res: isize = 0;\n  \
    \  for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n\
    \ - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res +=\
    \ 1;\n                }\n            }\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp26wz35n7.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp26wz35n7.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp26wz35n7.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triple_count = 0;\n    let mut curr = 1;\n    let mut a = vec![0;\
    \ n as usize];\n    let mut j = 0;\n    let mut k = 0;\n    for i in 0..n {\n\
    \        a[i as usize] = curr;\n        curr += 2;\n        j = i + 1;\n     \
    \   while j < n {\n            k = j + 1;\n            while k < n {\n       \
    \         if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n    \
    \                triple_count += 1;\n                }\n                k += 1;\n\
    \            }\n            j += 1;\n        }\n    }\n    triple_count\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpc2pevpzz.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let arr = (1..=n).map(|i| i * i - i + 1).collect::<Vec<isize>>();\n \
    \   let mut sum = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n\
    \            for k in j + 1..n {\n                if (arr[i] + arr[j] + arr[k])\
    \ % 3 == 0 {\n                    sum += 1;\n                }\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvl9q9_uj.rs:17:21\n\
    \   |\n17 |                 if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |   \
    \                  ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvl9q9_uj.rs:17:30\n\
    \   |\n17 |                 if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |   \
    \                           ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpvl9q9_uj.rs:17:39\n   |\n17 |                 if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 {\n   |                                       ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    count += 1;\n               \
    \ }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpnx0bnzjw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut triples: isize = 0;\n    for i in 0..n - 2\
    \ {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    triples +=\
    \ 1;\n                }\n            }\n        }\n    }\n    triples\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdzggqib2.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdzggqib2.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdzggqib2.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n - 1).fold(0, |acc, i| {\n        let mut curr_sum = a(i);\n   \
    \     let mut j = i + 1;\n        while curr_sum < n {\n            curr_sum +=\
    \ a(j);\n            j += 1;\n        }\n        if curr_sum % 3 == 0 {\n    \
    \        acc + 1\n        } else {\n            acc\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `a` in this scope\n  --> /tmp/tmp55wf1ec5.rs:13:28\n\
    \   |\n13 |         let mut curr_sum = a(i);\n   |                           \
    \ ^ help: a local variable with a similar name exists: `i`\n\nerror[E0425]: cannot\
    \ find function `a` in this scope\n  --> /tmp/tmp55wf1ec5.rs:16:25\n   |\n16 |\
    \             curr_sum += a(j);\n   |                         ^ help: a local\
    \ variable with a similar name exists: `i`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut total = 0;\n    for\
    \ i in 1..n - 1 {\n        for j in i + 1..n {\n            for k in j + 1..n\
    \ + 1 {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0 {\n                    total += 1;\n                }\n            }\n\
    \        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a = Vec::new();\n \
    \   for i in 1..n+1 {\n        a.push(i * i - i + 1);\n    }\n    let mut sum\
    \ = 0;\n    for i in 0..n-2 {\n        for j in i+1..n-1 {\n            for k\
    \ in j+1..n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          sum += 1;\n                }\n            }\n        }\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpjg4g8mlu.rs:23:21\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpjg4g8mlu.rs:23:28\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpjg4g8mlu.rs:23:35\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in i+1..n {\n  \
    \          for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    cnt += 1;\n                }\n\
    \            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpuk03tiqo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut c = 0;\n    let a = (1..=n).map(|e| e * e - e + 1).collect::<Vec<isize>>();\n\
    \    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in\
    \ j + 1..n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n           \
    \         c += 1;\n                }\n            }\n        }\n    }\n    c\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqyq5ne7l.rs:17:21\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqyq5ne7l.rs:17:28\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqyq5ne7l.rs:17:35\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp52dptu8l.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp52dptu8l.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp52dptu8l.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    for i in 0..n {\n \
    \       a[i as usize] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i\
    \ in 0..n {\n        for j in i + 1..n {\n            for k in j + 1..n {\n  \
    \              if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n\
    \                    cnt += 1;\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpdxlrbhg4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a = Vec::with_capacity(n\
    \ as usize);\n    for i in 1..n+1 {\n        a.push(i * i - i + 1);\n    }\n \
    \   let mut ans = 0;\n    for i in 0..n-2 {\n        for j in i+1..n-1 {\n   \
    \         for k in j+1..n {\n                if (a[i as usize] + a[j as usize]\
    \ + a[k as usize]) % 3 == 0 {\n                    ans += 1;\n               \
    \ }\n            }\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    let mut a = [0; 32];\n    for i in 1..n {\n\
    \        a[i as usize] = i * i - i + 1;\n    }\n    let mut i = 0;\n    while\
    \ i < n - 2 {\n        let mut j = i + 1;\n        while j < n - 1 {\n       \
    \     let mut k = j + 1;\n            while k < n {\n                if (a[i as\
    \ usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n                    triples\
    \ += 1;\n                }\n                k += 1;\n            }\n         \
    \   j += 1;\n        }\n        i += 1;\n    }\n    triples\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp88m6jiuk.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut result = 0;\n    for i in 0..n-2 {\n        for\
    \ j in i+1..n-1 {\n            for k in j+1..n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    result += 1;\n                }\n  \
    \          }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd3k570yt.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd3k570yt.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpd3k570yt.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut sum = 0;\n    for i in 0..n - 2 {\n      \
    \  for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    sum += 1;\n           \
    \     }\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphp9yr_vb.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphp9yr_vb.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphp9yr_vb.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let v: Vec<isize> = (1..=n).map(|i| i * i - i\
    \ + 1).collect();\n    let mut i = 0;\n    while i < v.len() - 2 {\n        let\
    \ mut j = i + 1;\n        while j < v.len() - 1 {\n            let mut k = j +\
    \ 1;\n            while k < v.len() {\n                if (v[i] + v[j] + v[k])\
    \ % 3 == 0 {\n                    count += 1;\n                }\n           \
    \     k += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..n + 1 {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n    \
    \    for j in i + 1..n - 1 {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbk1kai9l.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbk1kai9l.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbk1kai9l.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut cnt = 0;\n    for i in 0..a.len() {\n        for\
    \ j in i+1..a.len() {\n            for k in j+1..a.len() {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt += 1;\n           \
    \     }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n         \
    \       }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpgoq6ovkw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    let mut triple_count = 0;\n    for i in 1..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1;\n                if sum\
    \ % 3 == 0 {\n                    triple_count += 1;\n                }\n    \
    \        }\n        }\n    }\n    triple_count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp0b5dcior.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (n * (n - 1) * (n - 2) / 6)\n        .wrapping_add(n * (n - 1) / 2)\n\
    \        .wrapping_add(n * (n - 1) * (n - 2) * (n - 3) / 24)\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `25`,\n right: `1`', /tmp/tmpx_uvb86b.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples: isize = 0;\n    for i in 0..n {\n        for j in i+1..n\
    \ {\n            for k in j+1..n {\n                if (i*i-i+1+j*j-j+1+k*k-k+1)\
    \ % 3 == 0 {\n                    triples += 1;\n                }\n         \
    \   }\n        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpkki0s6cj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphrftxmti.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut result = 0;\n    for i in 0..(n - 2) {\n \
    \       for j in (i + 1)..(n - 1) {\n            for k in (j + 1)..n {\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result +=\
    \ 1;\n                }\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpregc2xny.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpregc2xny.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpregc2xny.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let s: isize = n * (n + 1) / 2;\n    if s % 3 == 0 {\n        let a:\
    \ isize = s / 3;\n        let b: isize = 2 * a;\n        (n - b) * (n - b - 1)\
    \ / 2\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `1`', /tmp/tmpvdna2q_8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n\tlet mut a: Vec<isize> = Vec::new();\n\tfor i in 1..n+1 {\n\t\ta.push(i*i\
    \ - i + 1);\n\t}\n\tlet mut cnt = 0;\n\tfor i in 0..n-2 {\n\t\tfor j in i+1..n-1\
    \ {\n\t\t\tfor k in j+1..n {\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 {\n\t\t\
    \t\t\tcnt += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcnt\n}\n\nfn main() {\n   \
    \ let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_fo3hmw2.rs:20:9\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_fo3hmw2.rs:20:16\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_fo3hmw2.rs:20:23\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = (1..n + 1).map(|x| x * x - x + 1).collect::<Vec<isize>>();\n\
    \    let mut s = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n\
    \            for k in j + 1..n {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    s += 1;\n                }\n            }\n    \
    \    }\n    }\n    s\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvgq07aof.rs:17:21\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvgq07aof.rs:17:28\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvgq07aof.rs:17:35\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    let mut multiples = 0;\n    for i in 0..n {\n \
    \       let x = i * i - i + 1;\n        sum += x;\n        if sum % 3 == 0 {\n\
    \            multiples += 1;\n        }\n    }\n    multiples\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpux9lefl0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut n_triples = 0;\n    for i in 0..n-2 {\n      \
    \  for j in i+1..n-1 {\n            for k in j+1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    n_triples += 1;\n           \
    \     }\n            }\n        }\n    }\n    n_triples\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpols0psgd.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpols0psgd.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpols0psgd.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut count = 0;\n    for\
    \ i in 1..n - 1 {\n        for j in i + 1..n {\n            for k in j + 1..n\
    \ + 1 {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut arr = vec![];\n    let mut max_triples = 0;\n    for i in 1..=n\
    \ {\n        arr.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n      \
    \  for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if\
    \ (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n                    max_triples += 1;\n\
    \                }\n            }\n        }\n    }\n    max_triples\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1a0e2fd_.rs:20:21\n\
    \   |\n20 |                 if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |   \
    \                  ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1a0e2fd_.rs:20:30\n\
    \   |\n20 |                 if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n   |   \
    \                           ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp1a0e2fd_.rs:20:39\n   |\n20 |                 if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 {\n   |                                       ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..n + 1 {\n        a.push(i\
    \ * i - i + 1);\n    }\n    println!(\"{:?}\", a);\n    let mut count = 0;\n \
    \   for i in 0..a.len() {\n        for j in i + 1..a.len() {\n            for\
    \ k in j + 1..a.len() {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: '[1, 3, 7, 13, 21]

    [1, 3, 7, 13, 21, 31]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307,
    343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,
    1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163,
    2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541,
    3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257,
    5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311,
    7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703,
    9901]

    '
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut cnt = 0;\n    for i in 1..n {\n        for j in (i + 1)..n {\n\
    \            let s = i * i - i + 1 + j * j - j + 1;\n            for k in (j +\
    \ 1)..n {\n                if s + k * k - k + 1 % 3 == 0 {\n                 \
    \   cnt += 1;\n                }\n            }\n        }\n    }\n    cnt\n}\n\
    \nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxk2w6kgl.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    for i in 0..n {\n \
    \       a[i as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for\
    \ i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n\
    \ {\n                if a[i as usize] + a[j as usize] + a[k as usize] % 3 == 0\
    \ {\n                    count += 1;\n                }\n            }\n     \
    \   }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9i2fdrpu.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    let mut count = 0;\n    for i in\
    \ 1..n + 1 {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n {\n   \
    \     for j in i + 1..n {\n            for k in j + 1..n {\n                if\
    \ a[i] + a[j] + a[k] % 3 == 0 {\n                    count += 1;\n           \
    \     }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2kycnxrz.rs:20:20\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2kycnxrz.rs:20:27\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp2kycnxrz.rs:20:34\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                       ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            let val = i * i - i + 1 + j * j - j + 1;\n            for k in j\
    \ + 1..n {\n                if (k * k - k + 1 + val) % 3 == 0 {\n            \
    \        res += 1;\n                }\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpvw33elap.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = get_a(n);\n    let mut count = 0;\n    for i in 0..(n - 2) {\n\
    \        for j in (i + 1)..(n - 1) {\n            for k in (j + 1)..n {\n    \
    \            if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n \
    \                   count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_a` in this scope\n  --> /tmp/tmpr8w41_kd.rs:12:13\n\
    \   |\n12 |     let a = get_a(n);\n   |             ^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut arr = vec![0; n as usize];\n    for i\
    \ in 0..n {\n        arr[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n\
    \ - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n  \
    \              if arr[i as usize] + arr[j as usize] + arr[k as usize] % 3 == 0\
    \ {\n                    count += 1;\n                }\n            }\n     \
    \   }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpyzam56s8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n\
    \ - 1 {\n            if (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) -\
    \ (j + 1) + 1\n                >= (n - 1) * (n - 1) - (n - 1) + 1\n          \
    \  {\n                break;\n            }\n            for k in j + 1..n {\n\
    \                if (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j +\
    \ 1) + 1\n                    + (k + 1) * (k + 1) - (k + 1) + 1\n            \
    \        % 3\n                    == 0\n                {\n                  \
    \  res += 1;\n                }\n            }\n        }\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0_c2yq4s.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a = Vec::with_capacity(n\
    \ as usize);\n    let mut rv = 0;\n    for i in 1..n {\n        a.push(i * i -\
    \ i + 1);\n    }\n    for i in 0..n-2 {\n        for j in i+1..n-1 {\n       \
    \     for k in j+1..n {\n                if (a[i as usize] + a[j as usize] + a[k\
    \ as usize]) % 3 == 0 {\n                    rv += 1;\n                }\n   \
    \         }\n        }\n    }\n    rv\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpcum1wsjv.rs:23:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    let mut res: isize = 0;\n  \
    \  for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for j in 0..n\
    \ - 2 {\n        for k in j + 1..n - 1 {\n            if (a[j] + a[k]) % 3 ==\
    \ 0 {\n                for l in k + 1..n {\n                    if (a[j] + a[k]\
    \ + a[l]) % 3 == 0 {\n                        res += 1;\n                    }\n\
    \                }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzvvqkfc0.rs:19:17\n\
    \   |\n19 |             if (a[j] + a[k]) % 3 == 0 {\n   |                 ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzvvqkfc0.rs:19:24\n\
    \   |\n19 |             if (a[j] + a[k]) % 3 == 0 {\n   |                    \
    \    ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzvvqkfc0.rs:21:25\n\
    \   |\n21 |                     if (a[j] + a[k] + a[l]) % 3 == 0 {\n   |     \
    \                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzvvqkfc0.rs:21:32\n\
    \   |\n21 |                     if (a[j] + a[k] + a[l]) % 3 == 0 {\n   |     \
    \                           ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpzvvqkfc0.rs:21:39\n   |\n21 |                     "
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut max_triples = 0;\n    let mut my_vec = vec![];\n    for i in\
    \ 1..n+1 {\n        my_vec.push(i*i - i + 1);\n    }\n    for x in 0..my_vec.len()\
    \ {\n        for y in (x+1)..my_vec.len() {\n            for z in (y+1)..my_vec.len()\
    \ {\n                if my_vec[x] + my_vec[y] + my_vec[z] % 3 == 0 {\n       \
    \             max_triples += 1;\n                }\n            }\n        }\n\
    \    }\n    max_triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1sw238ju.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut _a: Vec<isize> = Vec::new();\n    for _i in 1..n + 1 {\n    \
    \    _a.push(_i * _i - _i + 1);\n    }\n    let mut _res: isize = 0;\n    for\
    \ _i in 0.._a.len() {\n        for _j in (_i + 1).._a.len() {\n            for\
    \ _k in (_j + 1).._a.len() {\n                if (_a[_i] + _a[_j] + _a[_k]) %\
    \ 3 == 0 {\n                    _res += 1;\n                }\n            }\n\
    \        }\n    }\n    _res\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut count = 0;\n    for\
    \ i in 1..n {\n        for j in (i + 1)..n {\n            for k in (j + 1)..n\
    \ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0 {\n                    count += 1;\n                }\n            }\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpm2xnxd7c.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxfdfou6m.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n-2 {\n        for\
    \ j in i+1..n-1 {\n            for k in j+1..n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp431aqwnp.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp431aqwnp.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp431aqwnp.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    let mut a = vec![];\n    for i in 1..n + 1 {\n\
    \        a.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n        for j\
    \ in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    res += 1;\n                }\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw8nx7un8.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw8nx7un8.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw8nx7un8.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    println!(\"a = {:?}\", a);\n    let mut cnt = 0;\n   \
    \ for i in 0..a.len() {\n        for j in i+1..a.len() {\n            for k in\
    \ j+1..a.len() {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             cnt += 1;\n                }\n            }\n        }\n    }\n\
    \    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: 'a = [1, 3, 7, 13, 21]

    a = [1, 3, 7, 13, 21, 31]

    a = [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]

    a = [1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307,
    343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,
    1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163,
    2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541,
    3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257,
    5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311,
    7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703,
    9901]

    '
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n    \
    \    for j in i + 1..n - 1 {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n - 1).filter(|&i| (i + i + 1) % 3 == 0).count() as isize\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpgz6zh944.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut v: Vec<isize> = Vec::new();\n    let mut cnt = 0;\n    for i\
    \ in 1..=n {\n        v.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n\
    \        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n          \
    \      if (v[i] + v[j] + v[k]) % 3 == 0 {\n                    cnt += 1;\n   \
    \             }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplcyurj1i.rs:20:21\n\
    \   |\n20 |                 if (v[i] + v[j] + v[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplcyurj1i.rs:20:28\n\
    \   |\n20 |                 if (v[i] + v[j] + v[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplcyurj1i.rs:20:35\n\
    \   |\n20 |                 if (v[i] + v[j] + v[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut cnt = 0;\n    for i in 0..n - 2\
    \ {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n      \
    \          if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt += 1;\n\
    \                }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvbqe_o6x.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvbqe_o6x.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvbqe_o6x.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut sum = 0;\n    for i in 0..n-2 {\n        for j\
    \ in i+1..n-1 {\n            for k in j+1..n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    sum += 1;\n                }\n     \
    \       }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpreh7izkr.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpreh7izkr.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpreh7izkr.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut i = 1;\n    let mut j = 2;\n    let mut\
    \ k = 3;\n    while i < n && j < n && k < n {\n        if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 {\n            count += 1;\n           \
    \ k += 1;\n        } else if j < k {\n            j += 1;\n        } else {\n\
    \            i += 1;\n            j = i + 1;\n            k = j + 1;\n       \
    \ }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp80jo_ovs.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len()\
    \ {\n        for j in (i + 1)..a.len() {\n            for k in (j + 1)..a.len()\
    \ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcmegnkw6.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a = vec![];\n    for\
    \ i in 1..n + 1 {\n        a.push(i * i - i + 1);\n    }\n    let mut result =\
    \ 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for\
    \ k in j + 1..n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n      \
    \              result += 1;\n                }\n            }\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpku63cnfo.rs:23:21\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpku63cnfo.rs:23:28\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpku63cnfo.rs:23:35\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = (1..n + 1).map(|i| i * i - i + 1).collect::<Vec<isize>>();\n\
    \    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n  \
    \          for k in j + 1..n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1;\n                }\n            }\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5y13nhpw.rs:17:21\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5y13nhpw.rs:17:28\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5y13nhpw.rs:17:35\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let arr = (1..n + 1).map(|i| i * i - i + 1).collect::<Vec<isize>>();\n\
    \    let res = arr.iter().enumerate().map(|(i, _)| {\n        arr.iter().enumerate().filter(|(j,\
    \ _)| i < *j).filter(|(j, _)| (arr[i] + arr[*j]) % 3 == 0).map(|(j, _)| {\n  \
    \          arr.iter().enumerate().filter(|(k, _)| j < *k).filter(|(k, _)| (arr[i]\
    \ + arr[*j] + arr[*k]) % 3 == 0).count() as isize\n        }).sum::<isize>()\n\
    \    }).sum::<isize>();\n    res\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpufh2hmtp.rs:15:90\n\
    \   |\n15 |             arr.iter().enumerate().filter(|(k, _)| j < *k).filter(|(k,\
    \ _)| (arr[i] + arr[*j] + arr[*k]) % 3 == 0).count() as isize\n   |          \
    \                                                                            \
    \    ^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut counter = 0;\n    for i in 0..n-2 {\n        for\
    \ j in i+1..n-1 {\n            for k in j+1..n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    counter += 1;\n                }\n \
    \           }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5f_6ob07.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5f_6ob07.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5f_6ob07.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut triple_count = 0;\n    for i in 0..n-2 {\n   \
    \     for j in i+1..n-1 {\n            for k in j+1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    triple_count += 1;\n        \
    \        }\n            }\n        }\n    }\n    triple_count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgx6ged7t.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgx6ged7t.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgx6ged7t.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut sum: isize = 0;\n    for i in 0..n - 2 {\n\
    \        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n          \
    \      if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    sum += 1;\n   \
    \             }\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmjvzk91w.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmjvzk91w.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmjvzk91w.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp52dptu8l.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp52dptu8l.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp52dptu8l.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {return 0;}\n    let mut a = vec![0; n as usize];\n    for i\
    \ in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    let mut ans =\
    \ 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for\
    \ k in j + 1..n {\n                if (a[i as usize] + a[j as usize] + a[k as\
    \ usize]) % 3 == 0 {\n                    ans += 1;\n                }\n     \
    \       }\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpg5_l3bzb.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphrftxmti.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n {\n        for\
    \ j in i+1..n {\n            for k in j+1..n {\n                if a[i] + a[j]\
    \ + a[k] % 3 == 0 {\n                    count += 1;\n                }\n    \
    \        }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdyi4ath7.rs:20:20\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdyi4ath7.rs:20:27\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdyi4ath7.rs:20:34\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                       ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    let mut count = 0;\n    for\
    \ i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n\
    \        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n          \
    \      if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps1tltd6e.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps1tltd6e.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps1tltd6e.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n <= 2 {\n        return 0;\n    }\n    let mut answer = 0;\n    let\
    \ n = n as usize;\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i]\
    \ = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n    for i in 0..n - 2 {\n       \
    \ for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    answer += 1;\n        \
    \        }\n            }\n        }\n    }\n    answer\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Write your code here\n    let mut triples = 0;\n    let mut i = 0;\n\
    \    while i < n - 2 {\n        let mut j = i + 1;\n        while j < n - 1 {\n\
    \            let mut k = j + 1;\n            while k < n {\n                if\
    \ (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1)\
    \ * (k + 1) - (k + 1) + 1 % 3 == 0 {\n                    triples += 1;\n    \
    \            }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    triples\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpgfh8qexl.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = Vec::new();\n    for i in 1..=n {\n\
    \        a.push(i * i - i + 1);\n    }\n    for i in 0..n {\n        for j in\
    \ i + 1..n {\n            for k in j + 1..n {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1;\n                }\n   \
    \         }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzi245k_z.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzi245k_z.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzi245k_z.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    let mut i: isize = 1;\n    while\
    \ i <= n {\n        a.push(i * i - i + 1);\n        i += 1;\n    }\n    let mut\
    \ c: isize = 0;\n    let mut i: isize = 0;\n    while i < n - 2 {\n        let\
    \ mut j: isize = i + 1;\n        while j < n - 1 {\n            let mut k: isize\
    \ = j + 1;\n            while k < n {\n                if (a[i as usize] + a[j\
    \ as usize] + a[k as usize]) % 3 == 0 {\n                    c += 1;\n       \
    \         }\n                k += 1;\n            }\n            j += 1;\n   \
    \     }\n        i += 1;\n    }\n    c\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut triples: isize = 0;\n    for i in 0..n-2 {\n \
    \       for j in i+1..n-1 {\n            for k in j+1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    triples += 1;\n       \
    \         }\n            }\n        }\n    }\n    triples\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnf6ak0ty.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnf6ak0ty.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnf6ak0ty.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result = 0;\n    let mut a = Vec::with_capacity(n as usize);\n\
    \    for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..(n\
    \ - 2) {\n        for j in (i + 1)..(n - 1) {\n            for k in (j + 1)..n\
    \ {\n                if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 ==\
    \ 0 {\n                    result += 1;\n                }\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    for i in 1..n {\n        for j in i+1..n {\n  \
    \          for k in j+1..n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    res += 1;\n                }\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp599qonfn.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n <= 2 {\n        return 0;\n    }\n    let mut count = 0;\n    for\
    \ i in 1..(n - 1) {\n        let ai = i * i - i + 1;\n        for j in (i + 1)..(n\
    \ - 1) {\n            let aj = j * j - j + 1;\n            if (ai + aj) % 3 !=\
    \ 0 {\n                continue;\n            }\n            for k in (j + 1)..n\
    \ {\n                let ak = k * k - k + 1;\n                if (ai + aj + ak)\
    \ % 3 == 0 {\n                    count += 1;\n                }\n           \
    \ }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8kmqo855.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    let mut count = 0;\n    for i in\
    \ 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n-2 {\n    \
    \    for j in i+1..n-1 {\n            for k in j+1..n {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    count += 1;\n                }\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_adikjg7.rs:20:20\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_adikjg7.rs:20:27\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_adikjg7.rs:20:34\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                       ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triple_count = 0;\n    let mut prev_sum = None;\n    for i in\
    \ 1..=n {\n        let cur_sum = i * i - i + 1;\n        if let Some(sum) = prev_sum\
    \ {\n            if (sum + cur_sum) % 3 == 0 {\n                triple_count +=\
    \ 1;\n            }\n        }\n        prev_sum = Some(cur_sum);\n    }\n   \
    \ triple_count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1j0bt4eu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    let mut sum = 0;\n    for i\
    \ in 1..=n {\n        a.push(i * i - i + 1);\n        if i >= 3 {\n          \
    \  for j in 0..i - 2 {\n                for k in j + 1..i - 1 {\n            \
    \        sum += (a[j] + a[k] + a[i - 1]) % 3 == 0;\n                }\n      \
    \      }\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpt5xq6dk2.rs:19:29\n\
    \   |\n19 |                     sum += (a[j] + a[k] + a[i - 1]) % 3 == 0;\n  \
    \ |                             ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpt5xq6dk2.rs:19:36\n   |\n19 |                     sum += (a[j]\
    \ + a[k] + a[i - 1]) % 3 == 0;\n   |                                    ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpt5xq6dk2.rs:19:43\n   |\n19 |  \
    \                   sum += (a[j] + a[k] + a[i - 1]) % 3 == 0;\n   |          \
    \                                 ^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: cannot add-assign `bool` to `{integer}`\n\
    \  --> /tmp/tmpt5xq6dk2.rs:19:25\n   |\n19 |                     sum += (a[j]\
    \ + a[k] + a[i - 1]) % 3 == 0;\n   |                         ^^ no implementation\
    \ for `{integer} += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not\
    \ implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n "
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    0\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp5o07arwq.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = (1..n+1).map(|i| i*i - i + 1).collect::<Vec<isize>>();\n    a.iter().combinations(3).filter(|v|\
    \ (v[0] + v[1] + v[2]) % 3 == 0).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `combinations` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmpdzj8m3vd.rs:13:14\n   |\n13 |     a.iter().combinations(3).filter(|v|\
    \ (v[0] + v[1] + v[2]) % 3 == 0).count() as isize\n   |              ^^^^^^^^^^^^\
    \ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpxfdfou6m.rs:12:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // create our vector of numbers\n    let mut a: Vec<isize> = Vec::new();\n\
    \    for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    // now we need\
    \ to find the number of sublists that sum to a multiple of 3\n    // there are\
    \ 5 sublists\n    // [0, 1, 2, 3, 4]\n    // [0, 1, 2, 3]\n    // [0, 1, 2]\n\
    \    // [0, 1]\n    // [0]\n    // the number of sublists of length n is n * (n\
    \ + 1) / 2\n    // so, for n = 5, there are 15 sublists of length 2, 10 sublists\
    \ of length 3, etc.\n    // which is exactly (n * (n + 1) / 2)\n    // so we have\
    \ to add n, n - 1, n - 2, n - 3, n - 4, n - 5\n    // our loop will be i = n,\
    \ n - 1, n - 2, ... , 6, 5, 4, 3, 2, 1\n    // our loop will be i = n, n - 1,\
    \ n - 2, ... , 6, 5, 4, 3, 2, 1\n    // our loop will be i = n, n - 1, n - 2,\
    \ ... , 6, 5, 4, 3, 2, 1\n    // our loop will be i = n, n - 1, n - 2, ... , 6,\
    \ 5, 4, 3, 2, 1\n    // our loop will be i = n, n - 1, n - 2, ... , 6, 5, 4, 3,\
    \ 2, 1\n    // our loop will be i = n, n - 1, n - 2, ... , 6, 5, 4, 3, 2, 1\n\
    \    // our loop will be i = n, n - 1, n - 2, ... , 6, 5, 4, 3, 2, 1\n    // our\
    \ loop will be i = n, n - 1, n - 2, ... , 6, 5, 4, 3, 2, 1\n    // our loop will\
    \ be i = n, n - 1, n - 2, ... , 6, 5, 4, 3, 2, 1\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6p_b97sg.rs:14:5\n   |\n\
    11 |   fn get_max_triples(n: isize) -> isize {\n   |                         \
    \          ----- expected `isize` because of return type\n...\n14 | /     for\
    \ i in 1..=n {\n15 | |         a.push(i * i - i + 1);\n16 | |     }\n   | |_____^\
    \ expected `isize`, found `()`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    let mut res: isize = 0;\n  \
    \  for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..(n\
    \ - 2) {\n        for j in (i + 1)..(n - 1) {\n            for k in (j + 1)..n\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res\
    \ += 1;\n                }\n            }\n        }\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qnk9jin.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qnk9jin.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qnk9jin.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum: isize = 0;\n    for i in 1..n {\n        let mut a: isize\
    \ = (i - 1) * (i - 1) - (i - 1) + 1;\n        for j in i+1..n {\n            let\
    \ mut b: isize = (j - 1) * (j - 1) - (j - 1) + 1;\n            for k in j+1..n\
    \ {\n                let mut c: isize = (k - 1) * (k - 1) - (k - 1) + 1;\n   \
    \             if (a + b + c) % 3 == 0 {\n                    sum += 1;\n     \
    \           }\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `36`', /tmp/tmperpmuchb.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n\
    \ - 1 {\n            for k in j + 1..n {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpoffrtmp6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut counter = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    counter += 1;\n\
    \                }\n            }\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp6p_mfywm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    let mut x = 1;\n    for i in 0..n {\n        for\
    \ j in i + 1..n {\n            for k in j + 1..n {\n                if (x + 3\
    \ * j + 9 * k) % 3 == 0 {\n                    sum += 1;\n                }\n\
    \            }\n        }\n        x += 2;\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmp7xqtuuo0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = (1..n + 1).map(|x| x * x - x + 1).collect::<Vec<isize>>();\n\
    \    let mut res = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1\
    \ {\n            for k in j + 1..n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    res += 1;\n                }\n            }\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpedy260k6.rs:17:21\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpedy260k6.rs:17:28\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpedy260k6.rs:17:35\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..n + 1 {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len() {\n  \
    \      for j in i + 1..a.len() {\n            for k in j + 1..a.len() {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = (1..n+1).map(|x| x*x - x + 1).collect::<Vec<isize>>();\n    let\
    \ mut count = 0;\n    for i in 0..n-2 {\n        for j in i+1..n-1 {\n       \
    \     for k in j+1..n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n  \
    \  assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmk540_g3.rs:17:21\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmk540_g3.rs:17:28\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmk540_g3.rs:17:35\n\
    \   |\n17 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n).filter(|i| (2 * i - 1) % 3 == 0).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpo0ceelxi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut counter = 0;\n    for i in 0..(n - 2) {\n\
    \        for j in (i + 1)..(n - 1) {\n            for k in (j + 1)..n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    counter +=\
    \ 1;\n                }\n            }\n        }\n    }\n    counter\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfydwblt7.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfydwblt7.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfydwblt7.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    let mut sum = 0;\n    let mut a = Vec::with_capacity(n\
    \ as usize);\n    for i in 1..=n {\n        let x = i * i - i + 1;\n        a.push(x);\n\
    \        for j in 0..(i - 2) {\n            for k in (j + 1)..(i - 1) {\n    \
    \            sum = a[j as usize] + a[k as usize] + a[i as usize - 1];\n      \
    \          if sum % 3 == 0 {\n                    triples += 1;\n            \
    \    }\n            }\n        }\n    }\n    triples\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..n + 1 {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n {\n        for\
    \ j in i + 1..n {\n            for k in j + 1..n {\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n                }\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplsd4_izy.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplsd4_izy.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplsd4_izy.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a: Vec<isize> = Vec::new();\n    for\
    \ i in 1..n + 1 {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n -\
    \ 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ryjjw_y.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ryjjw_y.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1ryjjw_y.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len()\
    \ {\n        for j in i + 1..a.len() {\n            for k in j + 1..a.len() {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut max_triples = 0;\n    let mut array = Vec::new();\n    for i\
    \ in 1..n+1 {\n        array.push(i*i - i + 1);\n    }\n    for i in 0..n-2 {\n\
    \        for j in i+1..n-1 {\n            for k in j+1..n {\n                if\
    \ (array[i] + array[j] + array[k]) % 3 == 0 {\n                    max_triples\
    \ += 1;\n                }\n            }\n        }\n    }\n    max_triples\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4cxs4s12.rs:20:21\n\
    \   |\n20 |                 if (array[i] + array[j] + array[k]) % 3 == 0 {\n \
    \  |                     ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp4cxs4s12.rs:20:32\n   |\n20 |                 if (array[i] + array[j]\
    \ + array[k]) % 3 == 0 {\n   |                                ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp4cxs4s12.rs:20:43\n   |\n20 |            \
    \     if (array[i] + array[j] + array[k]) % 3 == 0 {\n   |                   \
    \                        ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut counter = 0;\n    for i in 0..a.len() - 2\
    \ {\n        for j in i + 1..a.len() - 1 {\n            for k in j + 1..a.len()\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    counter\
    \ += 1;\n                }\n            }\n        }\n    }\n    counter\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a = Vec::new();\n \
    \   for i in 1..n + 1 {\n        a.push(i * i - i + 1);\n    }\n    let mut n_max_triples\
    \ = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n           \
    \ for k in j + 1..n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n  \
    \                  n_max_triples += 1;\n                }\n            }\n   \
    \     }\n    }\n    n_max_triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnw67m76c.rs:23:21\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnw67m76c.rs:23:28\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpnw67m76c.rs:23:35\n\
    \   |\n23 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    for i in 1..n {\n        for j in i + 1..n\
    \ {\n            for k in j + 1..n {\n                if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    triples += 1;\n \
    \               }\n            }\n        }\n    }\n    triples\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpka2wnifr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut result = 0;\n    for i in 0..a.len() {\n \
    \       for j in i + 1..a.len() {\n            for k in j + 1..a.len() {\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result +=\
    \ 1;\n                }\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triple_counter = 0;\n    for i in 1..n-1 {\n        for j in\
    \ i+1..n {\n            for k in j+1..n+1 {\n                if (i*i - i + 1 +\
    \ j*j - j + 1 + k*k - k + 1) % 3 == 0 {\n                    triple_counter +=\
    \ 1;\n                }\n            }\n        }\n    }\n    triple_counter\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 1..n - 1 {\n        for j in i + 1..n\
    \ {\n            for k in j + 1..n + 1 {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Write your code here\n    0\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9hknn61d.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Fill the vector with entries of the form i*i - i + 1\n    let mut\
    \ a: Vec<isize> = (1..=n).map(|x| x*x - x + 1).collect();\n    let mut total =\
    \ 0;\n    // Brute force every single triple of numbers in a\n    for i in 0..n\
    \ {\n        for j in i+1..n {\n            for k in j+1..n {\n              \
    \  if a[i as usize] + a[j as usize] + a[k as usize] % 3 == 0 {\n             \
    \       total += 1;\n                }\n            }\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpr74qeogb.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    for i in 0..n {\n \
    \       a[i as usize] = i * i - i + 1;\n    }\n    let mut ans = 0;\n    for i\
    \ in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            if (a[i as usize]\
    \ + a[j as usize]) % 3 != 0 {\n                continue;\n            }\n    \
    \        for k in j + 1..n {\n                if (a[i as usize] + a[j as usize]\
    \ + a[k as usize]) % 3 == 0 {\n                    ans += 1;\n               \
    \ }\n            }\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6m4ypjwn.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    (1..n - 1).fold(0, |acc, x| {\n        (x + 1..n).fold(acc, |acc, y|\
    \ {\n            if (x * x - x + 1 + y * y - y + 1) % 3 == 0 {\n             \
    \   acc + 1\n            } else {\n                acc\n            }\n      \
    \  })\n    })\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp30f39r0t.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n    \
    \    for j in i + 1..n - 1 {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    let mut a = Vec::with_capacity(n as usize);\n \
    \   for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..a.len()\
    \ - 2 {\n        for j in i + 1..a.len() - 1 {\n            for k in j + 1..a.len()\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res\
    \ += 1;\n                }\n            }\n        }\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n <= 2 {\n        return 0;\n    }\n    let mut a = vec![];\n    for\
    \ i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n\
    \    for i in 0..n-2 {\n        for j in i+1..n-1 {\n            if (a[i] + a[j])\
    \ % 3 == 0 {\n                let mut k = j + 1;\n                while k < n\
    \ && a[i] + a[j] + a[k] < 3 * a[k] {\n                    k += 1;\n          \
    \      }\n                count += k - j - 1;\n            }\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp763y_pd1.rs:22:17\n\
    \   |\n22 |             if (a[i] + a[j]) % 3 == 0 {\n   |                 ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp763y_pd1.rs:22:24\n\
    \   |\n22 |             if (a[i] + a[j]) % 3 == 0 {\n   |                    \
    \    ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp763y_pd1.rs:24:32\n\
    \   |\n24 |                 while k < n && a[i] + a[j] + a[k] < 3 * a[k] {\n \
    \  |                                ^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp763y_pd1.rs:24:39\n   |\n24 |                 while k < n && a[i]\
    \ + a[j] + a[k] < 3 * a[k] {\n   |                                       ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp763y_pd1.rs:24:46\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // The formula for (a[i], a[j], a[k]) is\n    // a[i] + a[j] + a[k] =\
    \ 3 * m\n    // where m is the number of valid pairs (a[i], a[j])\n    // So,\
    \ the task reduces to finding the number of triples\n    // (i, j, k) where i\
    \ < j < k, and a[i] + a[j] is a multiple of 3.\n    // For each i, we can compute\
    \ a[i] % 3.\n    // Then, for each pair (i, j) where i < j, we can find a[i] +\
    \ a[j] % 3.\n    // Since a[i] + a[j] % 3 = (a[i] % 3 + a[j] % 3) % 3, \n    //\
    \ we can compute this in advance, and store in a table.\n    // Then, for each\
    \ (i, j) where i < j, we can find the number of \n    // valid triples where a[i]\
    \ + a[j] is a multiple of 3.\n    // Finally, we sum over all such pairs.\n  \
    \  let mut n_triples = 0;\n    let mut a = vec![0; n as usize];\n    let mut remainder_cnt\
    \ = vec![0; 3];\n    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n\
    \        let rem = a[i as usize] % 3;\n        remainder_cnt[rem as usize] +=\
    \ 1;\n    }\n    // The number of valid pairs (a[i], a[j]) where i < j\n    //\
    \ and a[i] + a[j] is a multiple of 3 is\n    // pairs[0] = n - 1 + remainder_cnt[1]\
    \ * remainder_cnt[2]\n    // pairs[1] = remainder_cnt[0] * remainder_cnt[2]\n\
    \    // pairs[2] = remainder_cnt[0] * remainder_cnt[1]\n    // The number of valid\
    \ triples (a[i], a[j], a[k]) where i < j < k\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaqfb7h3a.rs:27:5\n   |\n\
    11 |   fn get_max_triples(n: isize) -> isize {\n   |                         \
    \          ----- expected `isize` because of return type\n...\n27 | /     for\
    \ i in 0..n {\n28 | |         a[i as usize] = i * i - i + 1;\n29 | |         let\
    \ rem = a[i as usize] % 3;\n30 | |         remainder_cnt[rem as usize] += 1;\n\
    31 | |     }\n   | |_____^ expected `isize`, found `()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n\tlet mut ans = 0;\n\tlet mut a = Vec::new();\n\tfor i in 1..=n {\n\t\ta.push(i\
    \ * i - i + 1);\n\t}\n\tfor i in 0..a.len() {\n\t\tfor j in i + 1..a.len() {\n\
    \t\t\tfor k in j + 1..a.len() {\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 {\n\t\
    \t\t\t\tans += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tans\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n+1 {\n        a.push(i*i\
    \ - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len()-2 {\n    \
    \    for j in i+1..a.len()-1 {\n            for k in j+1..a.len() {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut counter = 0;\n    let mut a: Vec<isize> = Vec::new();\n    for\
    \ i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n {\n \
    \       for j in i+1..n {\n            for k in j+1..n {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    counter += 1;\n              \
    \  }\n            }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4s_mimcg.rs:20:20\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4s_mimcg.rs:20:27\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4s_mimcg.rs:20:34\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                       ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let v = (1..n + 1).map(|i| i * i - i + 1).collect::<Vec<isize>>();\n\
    \    let mut count = 0;\n    for i in 0..v.len() {\n        for j in i + 1..v.len()\
    \ {\n            for k in j + 1..v.len() {\n                if (v[i] + v[j] +\
    \ v[k]) % 3 == 0 {\n                    count += 1;\n                }\n     \
    \       }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    let mut count = 0;\n    for i in\
    \ 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n-2 {\n    \
    \    for j in i+1..n-1 {\n            for k in j+1..n {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    count += 1;\n                }\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_adikjg7.rs:20:20\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_adikjg7.rs:20:27\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_adikjg7.rs:20:34\n\
    \   |\n20 |                 if a[i] + a[j] + a[k] % 3 == 0 {\n   |           \
    \                       ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = (1..n + 1).map(|x| x * x - x + 1).collect::<Vec<isize>>();\n\
    \    let mut cnt = 0;\n    for i in 0..a.len() {\n        for j in i..a.len()\
    \ {\n            for k in j..a.len() {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    cnt += 1;\n                }\n            }\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `1`', /tmp/tmpdq6m376v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut i = 1;\n    let mut a = Vec::new();\n    while i <= n {\n   \
    \     a.push(i * i - i + 1);\n        i += 1;\n    }\n    let mut counter = 0;\n\
    \    for (i, ai) in a.iter().enumerate() {\n        for (j, aj) in a.iter().enumerate()\
    \ {\n            if i < j {\n                for (k, ak) in a.iter().enumerate()\
    \ {\n                    if j < k {\n                        if (ai + aj + ak)\
    \ % 3 == 0 {\n                            counter += 1;\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    counter\n}\n\nfn main() {\n    let candidate = get_max_triples;\n \
    \   assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    for i in 0..n {\n \
    \       a[i as usize] = i * i - i + 1;\n    }\n    let mut sum = 0;\n    for i\
    \ in 0..n {\n        for j in i+1..n {\n            for k in j+1..n {\n      \
    \          if a[i as usize] + a[j as usize] + a[k as usize] % 3 == 0 {\n     \
    \               sum += 1;\n                }\n            }\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp3jj53kzs.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    for i in 0..n {\n \
    \       a[i as usize] = i * i - i + 1;\n    }\n    let mut count = 0;\n    for\
    \ i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n\
    \ {\n                if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 ==\
    \ 0 {\n                    count += 1;\n                }\n            }\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpm208vo0c.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut c = 0;\n    for a in 1..n - 1 {\n        let a1 = (a + 1) * (a\
    \ + 1) - (a + 1) + 1;\n        for b in a + 1..n {\n            let b1 = (b +\
    \ 1) * (b + 1) - (b + 1) + 1;\n            for c in b + 1..n + 1 {\n         \
    \       let c1 = (c + 1) * (c + 1) - (c + 1) + 1;\n                if (a1 + b1\
    \ + c1) % 3 == 0 {\n                    c += 1;\n                }\n         \
    \   }\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `c` is never read\n  --> /tmp/tmpz2e7ljj7.rs:20:21\n\
    \   |\n20 |                     c += 1;\n   |                     ^\n   |\n  \
    \ = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe it is\
    \ overwritten before being read?\n\nwarning: variable does not need to be mutable\n\
    \  --> /tmp/tmpz2e7ljj7.rs:12:9\n   |\n12 |     let mut c = 0;\n   |         ----^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign twice to immutable variable `c`\n\
    \  --> /tmp/tmpz2e7ljj7.rs:20:21\n   |\n17 |             for c in b + 1..n + 1\
    \ {\n   |                 -\n   |                 |\n   |                 first\
    \ assignment to `c`\n   |                 help: consider making this binding mutable:\
    \ `mut c`\n...\n20 |                     c += 1;\n   |                     ^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error; 2 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // get an array [1, 3, 7, 13, 21, ...]\n    let mut a: Vec<isize> = (1..n\
    \ + 1).map(|x| x * x - x + 1).collect();\n    let mut max_triples = 0;\n    for\
    \ j in 1..n {\n        for k in (j + 1)..n {\n            let sum = a[j as usize]\
    \ + a[k as usize];\n            if sum % 3 == 0 {\n                max_triples\
    \ += 1;\n            }\n        }\n    }\n    max_triples\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpionrr_iv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    let mut res = 0;\n\
    \    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n        for j in\
    \ i+1..n {\n            for k in j+1..n {\n                if (a[i as usize] +\
    \ a[j as usize] + a[k as usize]) % 3 == 0 {\n                    res += 1;\n \
    \               }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmpf7euhmxw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut n_triples = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i*i-i+1) + (j*j-j+1)\
    \ + (k*k-k+1) % 3 == 0 {\n                    n_triples += 1;\n              \
    \  }\n            }\n        }\n    }\n    n_triples\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpe_e1w7mq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum: isize = 0;\n    for i in 1..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    sum += 1;\n   \
    \             }\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmp63nmw8s4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    assert!(n > 0);\n    let mut a = vec![0; n as usize];\n    let mut result\
    \ = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        a[i as usize] = i *\
    \ i - i + 1;\n        if i >= 2 {\n            sum += a[i as usize - 2];\n   \
    \         if sum % 3 == 0 {\n                result += 1;\n            }\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp749tg260.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triple_count = 0;\n    for i in 1..n {\n        for j in i+1..n\
    \ {\n            for k in j+1..n {\n                if ((i*i - i + 1) + (j*j -\
    \ j + 1) + (k*k - k + 1)) % 3 == 0 {\n                    triple_count += 1;\n\
    \                }\n            }\n        }\n    }\n    triple_count\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmphsko970b.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    for i in 1..n + 1 {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut ans = 0;\n    for i in 0..n - 2 {\n      \
    \  for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    ans += 1;\n           \
    \     }\n            }\n        }\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptbegdn4d.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptbegdn4d.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptbegdn4d.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut s = 0;\n    for i in 1..n-1 {\n        for j in i+1..n {\n  \
    \          let ai = i * i - i + 1;\n            let aj = j * j - j + 1;\n    \
    \        let ak = (j+1) * (j+1) - (j+1) + 1;\n            if (ai + aj + ak) %\
    \ 3 == 0 {\n                s += 1;\n            }\n        }\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpw52jb1kw.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<_> = (1..=n).map(|i| i * i - i + 1).collect();\n    a.sort();\n\
    \    let mut cnt = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1\
    \ {\n            let k = a[j] + a[i];\n            if k % 3 == 0 {\n         \
    \       let pos = a.binary_search(&k).unwrap();\n                let st = pos\
    \ + 1;\n                let ed = n;\n                cnt += ed - st;\n       \
    \     }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpvclacpd_.rs:17:21\n\
    \   |\n17 |             let k = a[j] + a[i];\n   |                     ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpvclacpd_.rs:17:28\n   |\n17 |  \
    \           let k = a[j] + a[i];\n   |                            ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvclacpd_.rs:22:29\n\
    \   |\n22 |                 cnt += ed - st;\n   |                            \
    \ ^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize`\
    \ from `isize`\n  --> /tmp/tmpvclacpd_.rs:22:27\n   |\n22 |                 cnt\
    \ += ed - st;\n   |                           ^ no implementation for `isize -\
    \ usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n\
    \            for k in j+1..n {\n                if (i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n         \
    \       }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpomh6xnk6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    println!(\"{:?}\", a);\n    let mut count = 0;\n \
    \   for i in 0..a.len() {\n        for j in i+1..a.len() {\n            for k\
    \ in j+1..a.len() {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n    \
    \                count += 1;\n                }\n            }\n        }\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: '[1, 3, 7, 13, 21]

    [1, 3, 7, 13, 21, 31]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91]

    [1, 3, 7, 13, 21, 31, 43, 57, 73, 91, 111, 133, 157, 183, 211, 241, 273, 307,
    343, 381, 421, 463, 507, 553, 601, 651, 703, 757, 813, 871, 931, 993, 1057, 1123,
    1191, 1261, 1333, 1407, 1483, 1561, 1641, 1723, 1807, 1893, 1981, 2071, 2163,
    2257, 2353, 2451, 2551, 2653, 2757, 2863, 2971, 3081, 3193, 3307, 3423, 3541,
    3661, 3783, 3907, 4033, 4161, 4291, 4423, 4557, 4693, 4831, 4971, 5113, 5257,
    5403, 5551, 5701, 5853, 6007, 6163, 6321, 6481, 6643, 6807, 6973, 7141, 7311,
    7483, 7657, 7833, 8011, 8191, 8373, 8557, 8743, 8931, 9121, 9313, 9507, 9703,
    9901]

    '
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut result = 0;\n    for i in 0..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result += 1;\n    \
    \            }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvzr_902.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvzr_902.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmvzr_902.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut res = 0;\n    let mut triple: Vec<isize> = Vec::new();\n    for\
    \ i in 1..=n {\n        triple.push(i * i - i + 1);\n    }\n    for i in 0..n\
    \ {\n        for j in i + 1..n {\n            for k in j + 1..n {\n          \
    \      if (triple[i] + triple[j] + triple[k]) % 3 == 0 {\n                   \
    \ res += 1;\n                }\n            }\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkloe0tyd.rs:20:21\n\
    \   |\n20 |                 if (triple[i] + triple[j] + triple[k]) % 3 == 0 {\n\
    \   |                     ^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpkloe0tyd.rs:20:33\n   |\n20 |                 if (triple[i] + triple[j]\
    \ + triple[k]) % 3 == 0 {\n   |                                 ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpkloe0tyd.rs:20:45\n   |\n20 |  \
    \               if (triple[i] + triple[j] + triple[k]) % 3 == 0 {\n   |      \
    \                                       ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    let mut result = 0;\n    for\
    \ i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..a.len()\
    \ {\n        for j in i+1..a.len() {\n            for k in j+1..a.len() {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result\
    \ += 1;\n                }\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut res = 0;\n    for i in 0..n - 2 {\n      \
    \  for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res += 1;\n           \
    \     }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1nztj6qj.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp1nztj6qj.rs:20:28\n   |\n20 |                 if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n   |                            ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1nztj6qj.rs:20:35\n   |\n20 |  \
    \               if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |                     \
    \              ^^^^ slice indices are of type `usize` or ranges of `usize`\n \
    \  |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823178
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let a = get_nums(n);\n    let mut count = 0;\n    for i in 0..n {\n \
    \       for j in (i + 1)..n {\n            for k in (j + 1)..n {\n           \
    \     if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n        \
    \            count += 1;\n                }\n            }\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_nums` in this scope\n  --> /tmp/tmphk2zse7t.rs:12:13\n\
    \   |\n12 |     let a = get_nums(n);\n   |             ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut count = 0;\n    for\
    \ a in 1..n - 1 {\n        for b in a + 1..n {\n            let c = (a * a - a\
    \ + 1) + (b * b - b + 1);\n            if c % 3 == 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkys5bdg7.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut a = vec![0; n as usize];\n\
    \    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n    let mut\
    \ count = 0;\n    for i in 0..n - 2 {\n        for j in i + 1..n - 1 {\n     \
    \       if (a[i as usize] + a[j as usize]) % 3 != 0 {\n                continue;\n\
    \            }\n            for k in j + 1..n {\n                if (a[i as usize]\
    \ + a[j as usize] + a[k as usize]) % 3 == 0 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7duvsbgn.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result = 0;\n    for i in 1..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0 {\n                    result += 1;\n                }\n          \
    \  }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpg8p0mxtu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    let mut v: Vec<isize> = vec![0; n as usize];\n\
    \    for i in 0..n {\n        v[i as usize] = i * i - i + 1;\n    }\n    for i\
    \ in 0..n {\n        for j in i+1..n {\n            for k in j+1..n {\n      \
    \          if (v[i as usize] + v[j as usize] + v[k as usize]) % 3 == 0 {\n   \
    \                 sum += 1;\n                }\n            }\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp91jx3wuw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 2 {\n        return 0;\n    }\n    let mut tmp_arr = Vec::new();\n\
    \    for i in 1..=n {\n        tmp_arr.push(i * i - i + 1);\n    }\n    let mut\
    \ count = 0;\n    for i in 0..tmp_arr.len() - 2 {\n        for j in i + 1..tmp_arr.len()\
    \ - 1 {\n            for k in j + 1..tmp_arr.len() {\n                if (tmp_arr[i]\
    \ + tmp_arr[j] + tmp_arr[k]) % 3 == 0 {\n                    count += 1;\n   \
    \             }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut k = 0;\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for m in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[m]) % 3 == 0 {\n                    k += 1;\n                }\n\
    \            }\n        }\n    }\n    k\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkbsopkue.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[m]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkbsopkue.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[m]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkbsopkue.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[m]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Your code here\n    let mut triples = 0;\n    let mut a = vec![0;\
    \ n as usize];\n    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n\
    \    }\n    for i in 0..n {\n        for j in (i + 1)..n {\n            for k\
    \ in (j + 1)..n {\n                if (a[i as usize] + a[j as usize] + a[k as\
    \ usize]) % 3 == 0 {\n                    triples += 1;\n                }\n \
    \           }\n        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpwqnm1gk8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result = 0;\n    for i in 1..n - 1 {\n        for j in i + 1..n\
    \ {\n            let a_i = i * i - i + 1;\n            let a_j = j * j - j + 1;\n\
    \            let a_k = (j + 1) * (j + 1) - (j + 1) + 1;\n            if (a_i +\
    \ a_j + a_k) % 3 == 0 {\n                result += 1;\n            }\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `4`', /tmp/tmpwgsgs4s9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    let mut num_triples = 0;\n \
    \   for i in 1..=n {\n        a.push(i * i - i + 1);\n    }\n    for (i, _) in\
    \ a.iter().enumerate() {\n        for (j, _) in a.iter().enumerate() {\n     \
    \       if j > i {\n                for (k, _) in a.iter().enumerate() {\n   \
    \                 if k > j {\n                        if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                            num_triples += 1;\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \    }\n    num_triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut max = 0;\n    for i in 0..n - 2 {\n      \
    \  for j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    max += 1;\n           \
    \     }\n            }\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc2yss30u.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc2yss30u.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpc2yss30u.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    let mut a = vec![];\n    for i in 1..n+1 {\n\
    \        a.push(i*i - i + 1);\n    }\n    for i in 0..n-2 {\n        for j in\
    \ i+1..n-1 {\n            for k in j+1..n {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    count += 1;\n                }\n     \
    \       }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4xrm65r8.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4xrm65r8.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp4xrm65r8.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut v = vec![];\n    let mut res = 0;\n    for i in 1..=n {\n   \
    \     v.push(i * i - i + 1);\n    }\n    for i in 0..v.len() {\n        for j\
    \ in i + 1..v.len() {\n            for k in j + 1..v.len() {\n               \
    \ if (v[i] + v[j] + v[k]) % 3 == 0 {\n                    res += 1;\n        \
    \        }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n\t(1..n).map(|i| (i*i - i + 1) % 3).collect::<Vec<_>>().windows(3).filter(|w|\
    \ w.iter().sum::<isize>() % 3 == 0).count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0pkgcicm.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut sum = 0;\n    for a in 1..n {\n        for b in (a + 1)..n {\n\
    \            for c in (b + 1)..n {\n                if (a + b + c) % 3 == 0 {\n\
    \                    sum += 1;\n                }\n            }\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp49s3ler5.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // Your code here\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp5z4jdqqi.rs:13:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut results = vec![0; n as usize];\n    let mut a = vec![0; n as\
    \ usize];\n    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n    }\n\
    \    for i in 0..n {\n        for j in i + 1..n {\n            for k in j + 1..n\
    \ {\n                if a[i as usize] + a[j as usize] + a[k as usize] % 3 == 0\
    \ {\n                    results[(i + j + k) as usize] += 1;\n               \
    \ }\n            }\n        }\n    }\n    *results.iter().max().unwrap()\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpuf6zzh6h.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n\tif n < 3 { return 0; }\n\tlet mut a = vec![0; n as usize];\n\tlet mut s\
    \ = 0;\n\tfor i in 1..n {\n\t\ta[i as usize] = i * i - i + 1;\n\t\tif a[i as usize]\
    \ % 3 == 0 { s += 1; }\n\t}\n\tlet mut i = 0;\n\tlet mut j = 0;\n\tlet mut k =\
    \ 0;\n\tlet mut c = 0;\n\twhile i < n {\n\t\twhile j < n {\n\t\t\twhile k < n\
    \ {\n\t\t\t\tif i < j && j < k && (a[i as usize] + a[j as usize] + a[k as usize])\
    \ % 3 == 0 {\n\t\t\t\t\tc += 1;\n\t\t\t\t}\n\t\t\t\tk += 1;\n\t\t\t}\n\t\t\tj\
    \ += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn c;\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpqtlbrens.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n {\n\
    \        for j in i + 1..n {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpxmpu2ufg.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    let mut res = 0;\n\
    \    for i in 0..n {\n        a[i as usize] = i * i - i + 1;\n        if i > 1\
    \ {\n            for j in 1..i {\n                if (a[i as usize] + a[j as usize])\
    \ % 3 == 0 {\n                    for k in 0..j {\n                        if\
    \ (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n               \
    \             res += 1;\n                        }\n                    }\n  \
    \              }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpwvjoc9e4.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut triples = 0;\n    for i in 1..n-1 {\n        for j in i+1..n\
    \ {\n            for k in j+1..n+1 {\n                if (i*i - i + 1 + j*j -\
    \ j + 1 + k*k - k + 1) % 3 == 0 {\n                    triples += 1;\n       \
    \         }\n            }\n        }\n    }\n    triples\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut result = 0;\n    let\
    \ mut cnt_array = vec![0; 3];\n    for i in 0..3 {\n        cnt_array[i] = (n\
    \ - i) / 3;\n    }\n    for i in 3..n {\n        cnt_array[i % 3] += (n - i) /\
    \ 3;\n    }\n    for i in 0..3 {\n        let mut cnt = 0;\n        for j in 0..3\
    \ {\n            cnt += cnt_array[(i + j) % 3];\n        }\n        result +=\
    \ cnt * cnt_array[i];\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmh64rd_d.rs:18:29\n   |\n\
    18 |         cnt_array[i] = (n - i) / 3;\n   |                             ^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n\
    \  --> /tmp/tmpmh64rd_d.rs:18:27\n   |\n18 |         cnt_array[i] = (n - i) /\
    \ 3;\n   |                           ^ no implementation for `isize - usize`\n\
    \   |\n   = help: the trait `Sub<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmh64rd_d.rs:21:9\n\
    \   |\n21 |         cnt_array[i % 3] += (n - i) / 3;\n   |         ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let n = n as usize;\n    let mut a = vec![0; n];\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n\
    \ - 2 {\n        for j in i + 1..n - 1 {\n            for k in j + 1..n {\n  \
    \              if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt +=\
    \ 1;\n                }\n            }\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp08q_z34y.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n\
    \            for k in j + 1..n {\n                if ((i * i - i + 1) + (j * j\
    \ - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    count += 1;\n  \
    \              }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpykbz5u1y.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut cnt = 0;\n    let mut v = vec![0; n as usize];\n    for i in\
    \ 0..n {\n        v[i as usize] = i * i - i + 1;\n    }\n    for i in 0..n {\n\
    \        for j in i+1..n {\n            for k in j+1..n {\n                if\
    \ (v[i as usize] + v[j as usize] + v[k as usize]) % 3 == 0 {\n               \
    \     cnt += 1;\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmprm4l7vwc.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010502
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut result = 0;\n    let mut a = vec![];\n    for i in 1..n+1 {\n\
    \        a.push(i*i - i + 1);\n    }\n    for i in 0..n-2 {\n        for j in\
    \ i+1..n-1 {\n            for k in j+1..n {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    result += 1;\n                }\n    \
    \        }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppsuk5tdb.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppsuk5tdb.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppsuk5tdb.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    if n < 3 {\n        return 0;\n    }\n    let mut triple_count = 0;\n\
    \    let mut i = 1;\n    while i < n - 1 {\n        let ai = i * i - i + 1;\n\
    \        if ai % 3 == 0 {\n            triple_count += n - i - 1;\n        }\n\
    \        i += 1;\n    }\n    triple_count\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp8t8_b00g.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010502
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![];\n    let mut cnt = 0;\n    for i in 1..=n\
    \ {\n        a.push(i * i - i + 1);\n    }\n    for i in 0..n - 2 {\n        for\
    \ j in i + 1..n - 1 {\n            for k in j + 1..n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    cnt += 1;\n                }\n\
    \            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuzk7rrkt.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuzk7rrkt.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpuzk7rrkt.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut count = 0;\n    for i in 0..n {\n        for j in (i + 1)..n\
    \ {\n            for k in (j + 1)..n {\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1;\n \
    \               }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpudiv3bbl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010502
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    // TODO - add code here\n    0\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp4lmei1u_.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010502
- exit_code: 0
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..n + 1 {\n      \
    \  a.push(i * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..a.len()\
    \ {\n        for j in i + 1..a.len() {\n            for k in j + 1..a.len() {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010501
- exit_code: 101
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = vec![0; n as usize];\n    for i in 0..n {\n \
    \       a[i as usize] = i * i - i + 1;\n    }\n    let mut res = 0;\n    for i\
    \ in 0..n {\n        for j in i + 1..n {\n            for k in j + 1..n {\n  \
    \              if (a[i as usize] + a[j as usize] + a[k as usize]) % 3 == 0 {\n\
    \                    res += 1;\n                }\n            }\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmp8ebkir_4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010502
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ vector a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: Vec<isize> = Vec::new();\n    for i in 1..=n {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let mut count = 0;\n    for i in 0..n - 2 {\n    \
    \    for j in i + 1..n - 1 {\n            for k in j + 1..n {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:21\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \            ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:28\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                   ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkat2b3_s.rs:20:35\n\
    \   |\n20 |                 if (a[i] + a[j] + a[k]) % 3 == 0 {\n   |         \
    \                          ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010500
