language: rs
name: HumanEval_114_minSubArraySum
results:
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.into_iter().fold(isize::max_value(), |min,\
    \ x| isize::min(min, x))\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp5dkpl6jc.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        curr_sum = std::cmp::min(nums[i],\
    \ curr_sum + nums[i]);\n        min_sum = std::cmp::min(min_sum, curr_sum);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sub_sum = nums[0];\n    let mut max_sub_sum\
    \ = nums[0];\n    let mut running_sum = nums[0];\n    for (i, x) in nums.iter().enumerate().skip(1)\
    \ {\n        running_sum += x;\n        if running_sum < min_sub_sum {\n     \
    \       min_sub_sum = running_sum;\n        }\n        if running_sum > max_sub_sum\
    \ {\n            max_sub_sum = running_sum;\n        }\n    }\n    return min_sub_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp14ox8dq1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = ISIZE_MAX;\n    let mut sum =\
    \ 0;\n    for num in nums {\n        sum += num;\n        min_sum = isize::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ISIZE_MAX` in this scope\n --> /tmp/tmpjb0ua_zs.rs:9:23\n\
    \  |\n9 |     let mut min_sum = ISIZE_MAX;\n  |                       ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for num in nums {\n        sum += num;\n        if sum < min {\n \
    \           min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut res = nums[0];\n    let mut tmp = 0;\n \
    \   for i in nums {\n        tmp += i;\n        if tmp < res {\n            res\
    \ = tmp;\n        }\n        if tmp > 0 {\n            tmp = 0;\n        }\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        if sum < min_sum {\n    \
    \        min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = 0;\n    for num in nums {\n        curr_sum += num;\n        if curr_sum <\
    \ min_sum {\n            min_sum = curr_sum;\n        }\n        if curr_sum >\
    \ 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for &num in nums.iter() {\n        sum += num;\n        min_sum\
    \ = std::cmp::min(min_sum, sum);\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n \
    \   for num in nums {\n        sum += num;\n        if sum < min {\n         \
    \   min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n      \
    \  }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        curr_sum = min(curr_sum +\
    \ nums[i], nums[i]);\n        min_sum = min(min_sum, curr_sum);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpva2lyenw.rs:12:20\n\
    \   |\n12 |         curr_sum = min(curr_sum + nums[i], nums[i]);\n   |       \
    \             ^^^\n...\n18 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    12 |         curr_sum = main(curr_sum + nums[i], nums[i]);\n   |             \
    \       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpva2lyenw.rs:13:19\n\
    \   |\n13 |         min_sum = min(min_sum, curr_sum);\n   |                  \
    \ ^^^\n...\n18 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n13 |        \
    \ min_sum = main(min_sum, curr_sum);\n   |                   ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_total = nums[0];\n    let mut sub_total\
    \ = 0;\n    for num in nums {\n        sub_total += num;\n        if sub_total\
    \ < min_total {\n            min_total = sub_total;\n        }\n        if sub_total\
    \ > 0 {\n            sub_total = 0;\n        }\n    }\n    min_total\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n        if sum > 0 {\n           \
    \ sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut result = isize::max_value();\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < result {\n            result = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut sum =\
    \ 0;\n    for num in nums {\n        sum += num;\n        min_sum = cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpu1d84w3t.rs:13:19\n   |\n13 |         min_sum = cmp::min(min_sum,\
    \ sum);\n   |                   ^^^ use of undeclared crate or module `cmp`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut sum = nums[0];\n    let mut min_sum = sum;\n    for i in 1..nums.len()\
    \ {\n        sum = std::cmp::min(nums[i], sum + nums[i]);\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for i in 0..nums.len() {\n        if sum > 0 {\n            sum = nums[i];\n\
    \        } else {\n            sum += nums[i];\n        }\n        min_sum = min_sum.min(sum);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let n = nums.len();\n    let mut min_sum = isize::max_value();\n\
    \    let mut prefix_sum = 0;\n    let mut min_prefix_sum = 0;\n    for i in 0..n\
    \ {\n        prefix_sum += nums[i];\n        min_sum = std::cmp::min(min_sum,\
    \ prefix_sum - min_prefix_sum);\n        min_prefix_sum = std::cmp::min(min_prefix_sum,\
    \ prefix_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpdl91yuq6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::min;\n    let mut min_sum = 0;\n \
    \   let mut sum = 0;\n    for i in nums {\n        sum += i;\n        min_sum\
    \ = min(min_sum, sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpmpwipri4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822557
