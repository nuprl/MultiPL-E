language: rs
name: HumanEval_114_minSubArraySum
results:
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.into_iter().fold(isize::max_value(), |min,\
    \ x| isize::min(min, x))\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp5dkpl6jc.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        curr_sum = std::cmp::min(nums[i],\
    \ curr_sum + nums[i]);\n        min_sum = std::cmp::min(min_sum, curr_sum);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sub_sum = nums[0];\n    let mut max_sub_sum\
    \ = nums[0];\n    let mut running_sum = nums[0];\n    for (i, x) in nums.iter().enumerate().skip(1)\
    \ {\n        running_sum += x;\n        if running_sum < min_sub_sum {\n     \
    \       min_sub_sum = running_sum;\n        }\n        if running_sum > max_sub_sum\
    \ {\n            max_sub_sum = running_sum;\n        }\n    }\n    return min_sub_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp14ox8dq1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = ISIZE_MAX;\n    let mut sum =\
    \ 0;\n    for num in nums {\n        sum += num;\n        min_sum = isize::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ISIZE_MAX` in this scope\n --> /tmp/tmpjb0ua_zs.rs:9:23\n\
    \  |\n9 |     let mut min_sum = ISIZE_MAX;\n  |                       ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for num in nums {\n        sum += num;\n        if sum < min {\n \
    \           min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut res = nums[0];\n    let mut tmp = 0;\n \
    \   for i in nums {\n        tmp += i;\n        if tmp < res {\n            res\
    \ = tmp;\n        }\n        if tmp > 0 {\n            tmp = 0;\n        }\n \
    \   }\n    res\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        if sum < min_sum {\n    \
    \        min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = 0;\n    for num in nums {\n        curr_sum += num;\n        if curr_sum <\
    \ min_sum {\n            min_sum = curr_sum;\n        }\n        if curr_sum >\
    \ 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for &num in nums.iter() {\n        sum += num;\n        min_sum\
    \ = std::cmp::min(min_sum, sum);\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n \
    \   for num in nums {\n        sum += num;\n        if sum < min {\n         \
    \   min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n      \
    \  }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        curr_sum = min(curr_sum +\
    \ nums[i], nums[i]);\n        min_sum = min(min_sum, curr_sum);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpva2lyenw.rs:12:20\n\
    \   |\n12 |         curr_sum = min(curr_sum + nums[i], nums[i]);\n   |       \
    \             ^^^\n...\n18 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    12 |         curr_sum = main(curr_sum + nums[i], nums[i]);\n   |             \
    \       ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpva2lyenw.rs:13:19\n\
    \   |\n13 |         min_sum = min(min_sum, curr_sum);\n   |                  \
    \ ^^^\n...\n18 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n13 |        \
    \ min_sum = main(min_sum, curr_sum);\n   |                   ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_total = nums[0];\n    let mut sub_total\
    \ = 0;\n    for num in nums {\n        sub_total += num;\n        if sub_total\
    \ < min_total {\n            min_total = sub_total;\n        }\n        if sub_total\
    \ > 0 {\n            sub_total = 0;\n        }\n    }\n    min_total\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n        if sum > 0 {\n           \
    \ sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut result = isize::max_value();\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < result {\n            result = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut sum =\
    \ 0;\n    for num in nums {\n        sum += num;\n        min_sum = cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpu1d84w3t.rs:13:19\n   |\n13 |         min_sum = cmp::min(min_sum,\
    \ sum);\n   |                   ^^^ use of undeclared crate or module `cmp`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut sum = nums[0];\n    let mut min_sum = sum;\n    for i in 1..nums.len()\
    \ {\n        sum = std::cmp::min(nums[i], sum + nums[i]);\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for i in 0..nums.len() {\n        if sum > 0 {\n            sum = nums[i];\n\
    \        } else {\n            sum += nums[i];\n        }\n        min_sum = min_sum.min(sum);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let n = nums.len();\n    let mut min_sum = isize::max_value();\n\
    \    let mut prefix_sum = 0;\n    let mut min_prefix_sum = 0;\n    for i in 0..n\
    \ {\n        prefix_sum += nums[i];\n        min_sum = std::cmp::min(min_sum,\
    \ prefix_sum - min_prefix_sum);\n        min_prefix_sum = std::cmp::min(min_prefix_sum,\
    \ prefix_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpdl91yuq6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::min;\n    let mut min_sum = 0;\n \
    \   let mut sum = 0;\n    for i in nums {\n        sum += i;\n        min_sum\
    \ = min(min_sum, sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpmpwipri4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut current_sum = 0;\n    let mut min_sum =\
    \ std::isize::MAX;\n    for num in nums {\n        current_sum += num;\n     \
    \   if current_sum < min_sum {\n            min_sum = current_sum;\n        }\n\
    \        if current_sum > 0 {\n            current_sum = 0;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold((nums[0], nums[0]), |(min, curr),\
    \ &x| {\n        (\n            min.min(curr.min(0) + x),\n            curr.min(0)\
    \ + x,\n        )\n    }).0\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-7`,\n right: `-6`', /tmp/tmp5vwbx5x8.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut ret = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for x in nums {\n        sum += x;\n        ret = ret.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = std::isize::MAX;\n    let mut tmp\
    \ = 0;\n    for n in nums {\n        tmp += n;\n        if tmp < sum {\n     \
    \       sum = tmp;\n        }\n        if tmp > 0 {\n            tmp = 0;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let (mut minimum, mut sum) = (isize::max_value(),\
    \ 0);\n    for i in 0..nums.len() {\n        sum += nums[i];\n        minimum\
    \ = std::cmp::min(minimum, sum);\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    minimum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = 0;\n    let mut curr_sum = 0;\n    for n in nums {\n  \
    \      curr_sum += n;\n        if curr_sum < min_sum {\n            min_sum =\
    \ curr_sum;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1eogqgvs.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut local_min = nums[0];\n    let mut min =\
    \ nums[0];\n    for i in 1..nums.len() {\n        local_min = std::cmp::min(nums[i],\
    \ local_min + nums[i]);\n        min = std::cmp::min(min, local_min);\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // let mut result = std::isize::MAX;\n    // let\
    \ mut partial = 0;\n    // let mut head = 0;\n    // for tail in 0..nums.len()\
    \ {\n    //     partial += nums[tail];\n    //     while partial >= 0 {\n    //\
    \         result = result.min(partial);\n    //         partial -= nums[head];\n\
    \    //         head += 1;\n    //     }\n    // }\n    // result\n    let mut\
    \ result = std::isize::MAX;\n    let mut partial = 0;\n    let mut head = 0;\n\
    \    let mut tail = 0;\n    while tail < nums.len() {\n        partial += nums[tail];\n\
    \        while partial >= 0 {\n            result = result.min(partial);\n   \
    \         partial -= nums[head];\n            head += 1;\n        }\n        tail\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 6 but the
    index is 6'', /tmp/tmp5cv2e84v.rs:29:24

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ current_sum = 0;\n    for n in nums {\n        current_sum += n;\n        if\
    \ current_sum < min_sum {\n            min_sum = current_sum;\n        }\n   \
    \     if current_sum > 0 {\n            current_sum = 0;\n        }\n    }\n \
    \   min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        if sum < min_sum {\n    \
    \        min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n\
    \    for i in 1..nums.len() {\n        sum = if sum < 0 { nums[i] } else { sum\
    \ + nums[i] };\n        min_sum = std::cmp::min(min_sum, sum);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpacwt5_qh.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = nums[0];\n\
    \    for num in nums {\n        sum += num;\n        if sum < min_sum {\n    \
    \        min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = *nums.iter().min().unwrap();\n\
    \    for num in nums {\n        sum += num;\n        if sum < min_sum {\n    \
    \        min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut current_sum = 0;\n    let mut min_sum =\
    \ isize::max_value();\n    for i in 0..nums.len() {\n        current_sum += nums[i];\n\
    \        if current_sum < min_sum {\n            min_sum = current_sum;\n    \
    \    }\n        if current_sum > 0 {\n            current_sum = 0;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut running_sum\
    \ = nums[0];\n    for x in &nums[1..] {\n        running_sum = running_sum.min(*x)\
    \ + *x;\n        min_sum = min_sum.min(running_sum);\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp1kpl2ecz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut res = nums[0];\n    let mut sum = nums[0];\n\
    \    for num in nums.iter().skip(1) {\n        sum = sum.min(*num);\n        res\
    \ = res.min(sum);\n    }\n    res\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmp1u_f39mj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = std::isize::MAX;\n    let mut cur\
    \ = 0;\n    for i in 0..nums.len() {\n        cur += nums[i];\n        if cur\
    \ < sum {\n            sum = cur;\n        }\n        if cur > 0 {\n         \
    \   cur = 0;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut cur_sum = 0;\n    let mut min_sum = std::isize::MAX;\n    for n in\
    \ nums {\n        cur_sum += n;\n        min_sum = std::cmp::min(min_sum, cur_sum);\n\
    \        if cur_sum > 0 {\n            cur_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::max_value();\n    let mut start\
    \ = 0;\n    let mut sum = 0;\n    for (i, num) in nums.iter().enumerate() {\n\
    \        sum += num;\n        while sum < 0 {\n            sum -= nums[start];\n\
    \            start += 1;\n        }\n        if sum < min {\n            min =\
    \ sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpzh16ktrs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let n = nums.len();\n    let mut dp = vec![0; n];\n\
    \    dp[0] = nums[0];\n    let mut min_sum = dp[0];\n    for i in 1..n {\n   \
    \     dp[i] = nums[i] + min(dp[i - 1], 0);\n        min_sum = min(min_sum, dp[i]);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp28j8fsvm.rs:14:27\n\
    \   |\n14 |         dp[i] = nums[i] + min(dp[i - 1], 0);\n   |               \
    \            ^^^\n...\n20 | fn main() {\n   | --------- similarly named function\
    \ `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n\
    14 |         dp[i] = nums[i] + main(dp[i - 1], 0);\n   |                     \
    \      ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n\
    \   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp28j8fsvm.rs:15:19\n\
    \   |\n15 |         min_sum = min(min_sum, dp[i]);\n   |                   ^^^\n\
    ...\n20 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n15 |        \
    \ min_sum = main(min_sum, dp[i]);\n   |                   ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let n = nums.len();\n    let mut min_sum = nums[0];\n\
    \    let mut tmp_sum = nums[0];\n    for i in 1..n {\n        tmp_sum = tmp_sum.min(0)\
    \ + nums[i];\n        min_sum = min_sum.min(tmp_sum);\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let n = nums.len();\n    let mut i = 0;\n    let\
    \ mut best = isize::MAX;\n    let mut sum = 0;\n    for j in 0..n {\n        sum\
    \ += nums[j];\n        while sum < 0 {\n            sum -= nums[i];\n        \
    \    i += 1;\n        }\n        best = best.min(sum);\n    }\n    best\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpi1v039by.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        curr_sum += nums[i];\n        if\
    \ curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n        if\
    \ curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::min;\n    let mut min_sum = 1 << 31;\n\
    \    let mut cur_sum = 0;\n    for x in nums {\n        cur_sum = min(cur_sum\
    \ + x, x);\n        min_sum = min(min_sum, cur_sum);\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = 0;\n    let mut running_sum =\
    \ 0;\n    for num in nums {\n        running_sum += num;\n        if running_sum\
    \ < min_sum {\n            min_sum = running_sum;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmps4t44vjs.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = isize::max_value();\n    let mut curr_sum\
    \ = 0;\n    for &num in nums.iter() {\n        curr_sum += num;\n        if curr_sum\
    \ < sum {\n            sum = curr_sum;\n        }\n        if curr_sum > 0 {\n\
    \            curr_sum = 0;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        if sum < min_sum {\n    \
    \        min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    let mut max\
    \ = std::isize::MIN;\n    let mut sum = 0;\n    for i in nums {\n        sum +=\
    \ i;\n        if sum < min {\n            min = sum;\n        }\n        if sum\
    \ > max {\n            max = sum;\n        }\n    }\n    let mut result = std::isize::MAX;\n\
    \    for i in nums {\n        result = std::cmp::min(result, i);\n    }\n    let\
    \ mut sums = vec![result; max as usize - min as usize + 1];\n    let mut sum =\
    \ 0;\n    for i in nums {\n        sum += i;\n        if sum > min {\n       \
    \     let index = sum - min;\n            if index < sums.len() as isize {\n \
    \               sums[index as usize] = std::cmp::min(sums[index as usize], sum);\n\
    \            }\n        }\n    }\n    for i in 1..sums.len() {\n        sums[i]\
    \ = std::cmp::min(sums[i], sums[i - 1]);\n    }\n    sums[sums.len() - 1]\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `nums`\n   --> /tmp/tmpmnnllab4.rs:22:14\n\
    \    |\n8   | fn minSubArraySum(nums: Vec<isize>) -> isize {\n    |          \
    \         ---- move occurs because `nums` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n12  |     for i in nums {\n    |          \
    \    ---- `nums` moved due to this implicit call to `.into_iter()`\n...\n22  |\
    \     for i in nums {\n    |              ^^^^ value used here after move\n  \
    \  |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `nums`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content\
    \ to avoid moving into the `for` loop\n    |\n12  |     for i in &nums {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `nums`\n  --> /tmp/tmpmnnllab4.rs:27:14\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \      ---- move occurs because `nums` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n22 |     for i in nums {\n   |              ---- `nums`\
    \ moved due to this implicit call to `.into_iter()`\n...\n27 |     for i in nums\
    \ {\n   |              ^^^^ value used here after move\n   |\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \   |\n22 |     for i in &nums {\n   |              +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = 0;\n    for num in nums {\n        curr_sum += num;\n        if curr_sum <\
    \ min_sum {\n            min_sum = curr_sum;\n        }\n        if curr_sum >\
    \ 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::min;\n    let mut min_sum = nums[0];\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        min_sum = min(min_sum, sum);\n        if sum > 0 {\n            sum =\
    \ 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut current_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        current_sum += nums[i];\n      \
    \  if current_sum < min_sum {\n            min_sum = current_sum;\n        }\n\
    \        if current_sum > 0 {\n            current_sum = 0;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n \
    \   for i in nums {\n        sum += i;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut cur_sum = 0;\n    let mut min_sum = isize::max_value();\n\
    \    for n in nums {\n        cur_sum += n;\n        min_sum = std::cmp::min(min_sum,\
    \ cur_sum);\n        if cur_sum > 0 {\n            cur_sum = 0;\n        }\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = 0;\n    let mut sum = 0;\n   \
    \ for n in nums {\n        sum += n;\n        if sum < min_sum {\n           \
    \ min_sum = sum;\n        }\n    }\n    return min_sum;\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjnwez6zk.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::min;\n    let mut min_sum = std::isize::MAX;\n\
    \    let mut curr_sum = 0;\n    for &n in nums.iter() {\n        curr_sum = min(n,\
    \ curr_sum + n);\n        min_sum = min(min_sum, curr_sum);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for &num in nums.iter()\
    \ {\n        sum += num;\n        if sum < min_sum {\n            min_sum = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = std::isize::MAX;\n\
    \    for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n        if sum > 0 {\n           \
    \ sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        curr_sum = curr_sum.min(0)\
    \ + nums[i];\n        min_sum = min_sum.min(curr_sum);\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        curr_sum = nums[i].max(curr_sum\
    \ + nums[i]);\n        min_sum = min_sum.min(curr_sum);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpi7qje4kb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for num in nums.iter().skip(1) {\n        curr_sum = std::cmp::min(curr_sum\
    \ + num, *num);\n        min_sum = std::cmp::min(min_sum, curr_sum);\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for x in nums {\n        sum += x;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum < 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpgmq8cx1z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for n in nums {\n        sum += n;\n        if sum < min_sum {\n        \
    \    min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n \
    \       }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut result = std::isize::MAX;\n    let mut current\
    \ = 0;\n    for num in nums {\n        current = std::cmp::min(current + num,\
    \ num);\n        result = std::cmp::min(result, current);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n \
    \   for n in nums {\n        sum += n;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut res = *nums.first().unwrap();\n    let mut\
    \ pre = 0;\n    for (i, n) in nums.iter().enumerate() {\n        pre = if pre\
    \ + n < n { n } else { pre + n };\n        if i > 0 {\n            res = if res\
    \ < pre { res } else { pre };\n        }\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsaz6et5r.rs:12:28\n   |\n\
    12 |         pre = if pre + n < n { n } else { pre + n };\n   |              \
    \              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n12 |         pre = if pre + n < *n { n } else { pre + n };\n\
    \   |                            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsaz6et5r.rs:12:32\n\
    \   |\n12 |         pre = if pre + n < n { n } else { pre + n };\n   |       \
    \                         ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |         pre = if pre + n < n { *n } else\
    \ { pre + n };\n   |                                +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // TODO: Implement this\n    0\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptrokcwp0.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpz7imav6k.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = 0;\n   \
    \ let mut min_sub = isize::max_value();\n    for num in nums {\n        sum +=\
    \ num;\n        min_sub = min_sub.min(sum - min_sum);\n        min_sum = min_sum.min(sum);\n\
    \    }\n    min_sub\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx6xamuwe.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_so_far = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < min_so_far {\n            min_so_far = sum;\n        }\n        if sum\
    \ > 0 {\n            sum = 0;\n        }\n    }\n    min_so_far\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut cur_sum = 0;\n    let mut min_sum = isize::max_value();\n\
    \    for n in nums {\n        cur_sum += n;\n        min_sum = min_sum.min(cur_sum);\n\
    \        if cur_sum > 0 {\n            cur_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut start: usize = 0;\n    let mut end: usize\
    \ = 0;\n    let mut sum: isize = 0;\n    let mut min: isize = isize::max_value();\n\
    \n    while end < nums.len() {\n        sum += nums[end];\n        if sum < min\
    \ {\n            min = sum;\n        }\n        if sum > 0 {\n            sum\
    \ = 0;\n            start = end + 1;\n        }\n        end += 1;\n    }\n\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut sum = nums[0];\n    let mut min_sum = nums[0];\n    for i in 1..nums.len()\
    \ {\n        sum = if sum > 0 {\n            sum + nums[i]\n        } else {\n\
    \            nums[i]\n        };\n        min_sum = std::cmp::min(min_sum, sum);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp7hmoe9t5.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_ending_here = nums[0];\n    let mut\
    \ min_so_far = nums[0];\n    for i in 1..nums.len() {\n        min_ending_here\
    \ = nums[i].min(min_ending_here + nums[i]);\n        min_so_far = min_so_far.min(min_ending_here);\n\
    \    }\n    min_so_far\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum < 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpyl9cb6gk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut best_min = isize::max_value();\n    let\
    \ mut running_sum = 0;\n    for &n in &nums {\n        if running_sum > 0 {\n\
    \            running_sum = n;\n        } else {\n            running_sum += n;\n\
    \        }\n        best_min = isize::min(best_min, running_sum);\n    }\n   \
    \ best_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut current_min = None;\n    let mut running_total\
    \ = 0;\n    for num in nums {\n        running_total += num;\n        if let Some(val)\
    \ = current_min {\n            current_min = Some(val.min(running_total));\n \
    \       } else {\n            current_min = Some(running_total);\n        }\n\
    \        if running_total > 0 {\n            running_total = 0;\n        }\n \
    \   }\n    current_min.unwrap()\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `Option<T>`\n  --> /tmp/tmpyfju9235.rs:14:32\n\
    \   |\n9  |     let mut current_min = None;\n   |         --------------- consider\
    \ giving `current_min` the explicit type `Option<T>`, with the type parameters\
    \ specified\n...\n14 |             current_min = Some(val.min(running_total));\n\
    \   |                                ^^^ cannot infer type\n   |\n   = note: type\
    \ must be known at this point\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut prefix_sum\
    \ = 0;\n    let mut min_prefix_sum = 0;\n    for (i, v) in nums.iter().enumerate()\
    \ {\n        prefix_sum += v;\n        if prefix_sum - min_prefix_sum < min_sum\
    \ {\n            min_sum = prefix_sum - min_prefix_sum;\n        }\n        if\
    \ prefix_sum < min_prefix_sum {\n            min_prefix_sum = prefix_sum;\n  \
    \      }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpibxxgjgw.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::{max, min};\n    let mut left = 0;\n\
    \    let mut right = 0;\n    let mut min_sum = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    while right < nums.len() {\n        sum += nums[right];\n        min_sum\
    \ = min(min_sum, sum);\n        right += 1;\n        if sum > 0 {\n          \
    \  sum = 0;\n            left = right;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = 0;\n    let mut sum = 0;\n    for n in nums {\n       \
    \ sum += n;\n        if sum < min_sum {\n            min_sum = sum;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp2j6h5_0p.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n \
    \   for num in nums {\n        sum += num;\n        if sum < min {\n         \
    \   min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n      \
    \  }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ curr_sum = 0;\n    for i in 0..nums.len() {\n        curr_sum += nums[i];\n\
    \        if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n\
    \        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = sum.min(min_sum);\n\
    \        sum = sum.max(0);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpw9ep_c49.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut max_sum = nums[0];\n    let mut min_sum\
    \ = nums[0];\n    let mut sum = nums[0];\n    for n in nums.iter().skip(1) {\n\
    \        sum += n;\n        max_sum = cmp::max(max_sum, sum);\n        min_sum\
    \ = cmp::min(min_sum, sum);\n    }\n    if min_sum < 0 {\n        min_sum\n  \
    \  } else {\n        cmp::min(nums.iter().sum(), max_sum)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpdu5cxe56.rs:14:19\n   |\n14 |         max_sum = cmp::max(max_sum,\
    \ sum);\n   |                   ^^^ use of undeclared crate or module `cmp`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n  -->\
    \ /tmp/tmpdu5cxe56.rs:15:19\n   |\n15 |         min_sum = cmp::min(min_sum, sum);\n\
    \   |                   ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmpdu5cxe56.rs:20:9\n\
    \   |\n20 |         cmp::min(nums.iter().sum(), max_sum)\n   |         ^^^ use\
    \ of undeclared crate or module `cmp`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = 0;\n    for n in nums {\n        curr_sum += n;\n        if curr_sum < min_sum\
    \ {\n            min_sum = curr_sum;\n        }\n        if curr_sum > 0 {\n \
    \           curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        curr_sum = nums[i].max(curr_sum\
    \ + nums[i]);\n        min_sum = min_sum.min(curr_sum);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpi7qje4kb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut current_sum\
    \ = nums[0];\n    for idx in 1..nums.len() {\n        current_sum = std::cmp::min(nums[idx],\
    \ current_sum + nums[idx]);\n        min_sum = std::cmp::min(min_sum, current_sum);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut ans = isize::max_value();\n    let mut curr_sum\
    \ = 0;\n    for num in nums {\n        curr_sum = std::cmp::min(curr_sum + num,\
    \ num);\n        ans = std::cmp::min(ans, curr_sum);\n    }\n    ans\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut result = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        result = std::cmp::min(result, sum);\n     \
    \   if sum > 0 {\n            sum = 0;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = nums[0];\n\
    \    for num in nums.iter().skip(1) {\n        sum = std::cmp::min(sum + num,\
    \ *num);\n        min = std::cmp::min(min, sum);\n    }\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().sum::<isize>()\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp6wlegn7q.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = nums[0];\n\
    \    for (i, n) in nums.iter().enumerate().skip(1) {\n        sum = sum.max(*n);\n\
    \        min = min.min(sum);\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpq6vkisbb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = isize::max_value();\n\
    \    for num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut n = nums.len();\n    let mut sum = vec![0;\
    \ n];\n    sum[0] = nums[0];\n    for i in 1..n {\n        sum[i] = sum[i - 1]\
    \ + nums[i];\n    }\n    let mut dp = vec![isize::max_value(); n];\n    for i\
    \ in 0..n {\n        for j in 0..i {\n            dp[i] = dp[i].min(sum[i] - sum[j]);\n\
    \        }\n    }\n    dp[n - 1]\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpbo8g44_4.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut minimum_sum = 0;\n    let mut current_sum\
    \ = 0;\n    for num in nums {\n        current_sum += num;\n        if current_sum\
    \ < minimum_sum {\n            minimum_sum = current_sum;\n        }\n    }\n\
    \    minimum_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmppgd11uer.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut smallest = nums[0];\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        if sum < smallest {\n   \
    \         smallest = sum;\n        }\n        if sum > 0 {\n            sum =\
    \ 0;\n        }\n    }\n    smallest\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let n = nums.len();\n    if n == 0 {\n        return\
    \ 0;\n    }\n    let mut min_sum = nums[0];\n    let mut curr_sum = 0;\n    for\
    \ i in 0..n {\n        curr_sum += nums[i];\n        if curr_sum < min_sum {\n\
    \            min_sum = curr_sum;\n        }\n        if curr_sum > 0 {\n     \
    \       curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        if sum < min_sum {\n    \
    \        min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // current minimum sum\n    let mut min_sum = isize::max_value();\n\
    \    // current sum of sub-array\n    let mut curr_sum = 0;\n    for num in nums\
    \ {\n        // add current number to the current sum\n        curr_sum += num;\n\
    \        // if current sum is less than min sum, replace min sum\n        if curr_sum\
    \ < min_sum {\n            min_sum = curr_sum;\n        }\n        // if current\
    \ sum is negative, replace with 0\n        if curr_sum < 0 {\n            curr_sum\
    \ = 0;\n        }\n    }\n    // return minimum sum\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9xc476nb.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let (mut mn, mut c): (isize, isize) = (std::isize::MAX,\
    \ 0);\n    for i in nums {\n        c = c.min(0) + i;\n        mn = mn.min(c);\n\
    \    }\n    mn\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for num in nums {\n        sum += num;\n        if sum < min {\n \
    \           min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut minimum_sum = isize::max_value();\n    let\
    \ mut curr_sum = 0;\n    for num in nums {\n        curr_sum += num;\n       \
    \ minimum_sum = minimum_sum.min(curr_sum);\n        curr_sum = curr_sum.max(0);\n\
    \    }\n    minimum_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9ynmakdj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = nums[0];\n    let mut curr_sum = 0;\n    for n in nums\
    \ {\n        curr_sum += n;\n        min_sum = std::cmp::min(min_sum, curr_sum);\n\
    \        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ curr_sum = 0;\n    for num in nums {\n        curr_sum += num;\n        min_sum\
    \ = std::cmp::min(min_sum, curr_sum);\n        if curr_sum > 0 {\n           \
    \ curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = isize::max_value();\n    let mut dp\
    \ = vec![0; nums.len()];\n    let mut s = 0;\n    for i in 0..nums.len() {\n \
    \       s += nums[i];\n        dp[i] = s;\n        if s < sum {\n            sum\
    \ = s;\n        }\n        if s >= 0 {\n            s = 0;\n        }\n    }\n\
    \    for i in 1..nums.len() {\n        if dp[i - 1] < 0 {\n            sum = cmp::min(sum,\
    \ dp[i]);\n        } else {\n            sum = cmp::min(sum, dp[i] - dp[i - 1]);\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpqqmxh14m.rs:24:19\n   |\n24 |             sum = cmp::min(sum, dp[i]);\n\
    \   |                   ^^^ use of undeclared crate or module `cmp`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `cmp`\n  --> /tmp/tmpqqmxh14m.rs:26:19\n\
    \   |\n26 |             sum = cmp::min(sum, dp[i] - dp[i - 1]);\n   |        \
    \           ^^^ use of undeclared crate or module `cmp`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    let mut n = nums.len();\n\
    \    while j < n {\n        sum += nums[j];\n        while sum > 0 {\n       \
    \     min_sum = std::cmp::min(min_sum, sum);\n            sum -= nums[i];\n  \
    \          i += 1;\n        }\n        j += 1;\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `-6`', /tmp/tmpgzwh0wlc.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n \
    \   for n in nums {\n        sum += n;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = 0;\n\
    \    for item in nums {\n        sum += item;\n        if sum < min_sum {\n  \
    \          min_sum = sum;\n        }\n        if sum > 0 {\n            sum =\
    \ 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_so_far = std::isize::MAX;\n    let mut result = 0;\n    for i\
    \ in 0..nums.len() {\n        result += nums[i];\n        if result < min_so_far\
    \ {\n            min_so_far = result;\n        }\n        if result > 0 {\n  \
    \          result = 0;\n        }\n    }\n    min_so_far\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for &num in nums.iter().skip(1) {\n        curr_sum = std::cmp::min(num,\
    \ curr_sum + num);\n        min_sum = std::cmp::min(min_sum, curr_sum);\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().fold((0, isize::MAX), |a, b| {\n   \
    \     (a.0 + b, if a.0 + b > 0 { a.1 } else { a.0 + b })\n    }).1\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `1`', /tmp/tmpm9y8dnct.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        panic!(\"illegal input:\
    \ input vector must not be empty\");\n    }\n    let (mut sum, mut max_negative)\
    \ = (0, 0);\n    for &num in nums.iter() {\n        sum += num;\n        if sum\
    \ < 0 {\n            if sum > max_negative {\n                max_negative = sum;\n\
    \            }\n        } else {\n            sum = 0;\n        }\n    }\n   \
    \ if sum > 0 {\n        0\n    } else {\n        max_negative\n    }\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6kq8bstl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut current_min = isize::max_value();\n    let\
    \ mut current_sum = 0;\n    for num in nums {\n        current_sum += num;\n \
    \       current_min = current_min.min(current_sum);\n        current_sum = current_sum.max(0);\n\
    \    }\n    current_min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp2pepad2_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut minimum = std::isize::MAX;\n    let mut\
    \ running_sum = 0;\n    for x in nums {\n        running_sum += x;\n        minimum\
    \ = std::cmp::min(minimum, running_sum);\n        if running_sum > 0 {\n     \
    \       running_sum = 0;\n        }\n    }\n    minimum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = 0;\n    let mut sum = 0;\n   \
    \ for num in nums {\n        sum += num;\n        if sum < min_sum {\n       \
    \     min_sum = sum;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjwwktgtf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for n in nums {\n\
    \        sum += n;\n        min = std::cmp::min(min, sum);\n        if sum > 0\
    \ {\n            sum = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = 0;\n    for num in nums {\n        curr_sum += num;\n        if curr_sum <\
    \ min_sum {\n            min_sum = curr_sum;\n        }\n        if curr_sum >\
    \ 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // We don't need a sliding window here.\n    //\n\
    \    // Define 's(i)' as the minimal sum of any sub-vector ending at 'i'.\n  \
    \  // For example, if nums = [2, 3, 4, 1, 2, 4], s(5) = 1, which is the minimal\
    \ sum\n    // of any sub-vector ending at '5' (e.g. [2, 3, 4, 1, 2]).\n    //\n\
    \    // The following recurrence relation holds:\n    //\n    // s(i) = min(s(i\
    \ - 1) + nums[i], nums[i])\n    //\n    // To make the above recurrence relation\
    \ more intuitive, we can think of the\n    // following example.\n    //\n   \
    \ // Suppose we want to compute s(3) in the example above. There are two ways\
    \ to\n    // compute s(3). The first way is 's(2) + nums[3] = 1 + 1 = 2', which\
    \ is the\n    // minimal sum of any sub-vector ending at '2' (i.e. [2, 3]) plus\
    \ nums[3] (i.e. 1).\n    // Another way is 'nums[3] = 1'. We can see that s(3)\
    \ = min(2, 1) = 1.\n    let mut s = 0;\n    let mut ans = std::isize::MAX;\n \
    \   for n in nums {\n        s = std::cmp::min(s + n, n);\n        ans = std::cmp::min(ans,\
    \ s);\n    }\n    ans\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum: isize = nums[0];\n    let mut min_sum:\
    \ isize = sum;\n    for i in 1..nums.len() {\n        sum = sum.max(0) + nums[i];\n\
    \        min_sum = min_sum.min(sum);\n    }\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpughjyo42.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ curr_sum = 0;\n    for &n in nums.iter() {\n        curr_sum += n;\n       \
    \ min_sum = std::cmp::min(min_sum, curr_sum);\n        if curr_sum > 0 {\n   \
    \         curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ curr_sum = 0;\n    for num in nums {\n        curr_sum += num;\n        min_sum\
    \ = isize::min(min_sum, curr_sum);\n        curr_sum = isize::max(curr_sum, 0);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpz93vdqrc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut curr_sum\
    \ = 0;\n    for num in nums {\n        curr_sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ curr_sum);\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ current_sum = 0;\n    for i in 0..nums.len() {\n        current_sum += nums[i];\n\
    \        if current_sum < min_sum {\n            min_sum = current_sum;\n    \
    \    }\n        if current_sum > 0 {\n            current_sum = 0;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for num in nums {\n        sum += num;\n        if sum < min {\n \
    \           min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822557
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut global_min = std::isize::MAX;\n    let mut\
    \ local_min = 0;\n    for num in nums {\n        local_min = local_min.min(0)\
    \ + num;\n        global_min = global_min.min(local_min);\n    }\n    global_min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for n in nums {\n        sum += n;\n        if sum < min {\n     \
    \       min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n  \
    \      }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut sum =\
    \ 0;\n    for n in nums {\n        sum += n;\n        min_sum = min_sum.min(sum);\n\
    \        if sum < 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp2_qzrjzn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut result = nums[0];\n    let mut sum = nums[0];\n    for num in nums.iter().skip(1)\
    \ {\n        sum = sum.min(*num);\n        result = result.min(sum);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmpybnvi3pb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut ret = std::isize::MAX;\n    let mut cur\
    \ = 0;\n    for &num in nums.iter() {\n        cur = std::cmp::min(num, cur +\
    \ num);\n        ret = std::cmp::min(ret, cur);\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::max_value();\n    let mut sum\
    \ = 0;\n    for num in nums {\n        sum += num;\n        min = sum.min(min);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut current_sum = 0;\n    let mut result = isize::max_value();\n\
    \    for num in nums {\n        current_sum = isize::min(current_sum + num, num);\n\
    \        result = isize::min(result, current_sum);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let (mut min_sum, mut current_sum) = (nums[0], 0);\n\
    \    for n in nums {\n        current_sum += n;\n        if current_sum < min_sum\
    \ {\n            min_sum = current_sum;\n        }\n        if current_sum > 0\
    \ {\n            current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n\
    \    for num in nums.iter().skip(1) {\n        sum = sum.max(*num);\n        min_sum\
    \ = min_sum.min(sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpscfidjuz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = nums[0];\n\
    \    for num in nums {\n        sum += num;\n        if sum < min_sum {\n    \
    \        min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut start = 0;\n    let mut end = 0;\n    let mut min_sum = nums[0];\n\
    \    let mut curr_sum = nums[0];\n    while end < nums.len() {\n        if curr_sum\
    \ > 0 {\n            end += 1;\n            if end == nums.len() {\n         \
    \       break;\n            }\n            curr_sum += nums[end];\n        } else\
    \ {\n            min_sum = std::cmp::min(min_sum, curr_sum);\n            start\
    \ += 1;\n            if start == nums.len() {\n                break;\n      \
    \      }\n            curr_sum = nums[start];\n        }\n    }\n    std::cmp::min(min_sum,\
    \ curr_sum)\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprwzklpo5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ current_sum = 0;\n    for n in nums {\n        current_sum += n;\n        min_sum\
    \ = min_sum.min(current_sum);\n        current_sum = current_sum.max(0);\n   \
    \ }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_5b5wqlu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_ending_here = 0;\n    let mut min_so_far\
    \ = 0;\n    for num in nums {\n        min_ending_here = min(min_ending_here +\
    \ num, 0);\n        min_so_far = min(min_so_far, min_ending_here);\n    }\n  \
    \  min_so_far\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpyby5nhok.rs:12:27\n\
    \   |\n12 |         min_ending_here = min(min_ending_here + num, 0);\n   |   \
    \                        ^^^\n...\n18 | fn main() {\n   | --------- similarly\
    \ named function `main` defined here\n   |\nhelp: a function with a similar name\
    \ exists\n   |\n12 |         min_ending_here = main(min_ending_here + num, 0);\n\
    \   |                           ~~~~\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min`\
    \ in this scope\n  --> /tmp/tmpyby5nhok.rs:13:22\n   |\n13 |         min_so_far\
    \ = min(min_so_far, min_ending_here);\n   |                      ^^^\n...\n18\
    \ | fn main() {\n   | --------- similarly named function `main` defined here\n\
    \   |\nhelp: a function with a similar name exists\n   |\n13 |         min_so_far\
    \ = main(min_so_far, min_ending_here);\n   |                      ~~~~\nhelp:\
    \ consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = 0;\n    let mut curr_sum = 0;\n\
    \    for n in nums {\n        curr_sum += n;\n        if curr_sum < min_sum {\n\
    \            min_sum = curr_sum;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp2lvlalhr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // We can use a modified version of Kadane's algorithm.\n\
    \    // First, we'll keep track of the min and max sum up to each element.\n \
    \   // If the min max_sum is negative and the current element is positive,\n \
    \   // we set the current max_sum to the current element.\n    // Otherwise, we\
    \ add the current element to the current max_sum.\n    // We'll then compare the\
    \ current max_sum to the current min sum.\n    // If the current max_sum is greater\
    \ than the current min sum,\n    // then we update the min sum to the current\
    \ max_sum.\n    // However, if the current max_sum is less than the current min\
    \ sum,\n    // then we update the min sum to the current max_sum.\n    let mut\
    \ min_sum = std::isize::MAX;\n    let mut max_sum = std::isize::MIN;\n    for\
    \ &elem in nums.iter() {\n        if max_sum < 0 && elem > 0 {\n            max_sum\
    \ = elem;\n        } else {\n            max_sum += elem;\n        }\n       \
    \ if max_sum > min_sum {\n            min_sum = max_sum;\n        } else {\n \
    \           min_sum = max_sum;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpjl06ntuz.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = std::isize::MAX;\n    let mut cur\
    \ = 0;\n    for num in nums {\n        cur = cur.min(0) + num;\n        sum =\
    \ sum.min(cur);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut cur_sum = 0;\n    let mut result = std::isize::MAX;\n\
    \    for num in nums {\n        cur_sum = std::cmp::min(cur_sum + num, num);\n\
    \        result = std::cmp::min(result, cur_sum);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n \
    \   for n in nums {\n        sum += n;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut result = isize::max_value();\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        result = result.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = 0;\n    for i in 0..nums.len() {\n        curr_sum += nums[i];\n        if\
    \ curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n        if\
    \ curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ sum = 0;\n    for &num in nums.iter() {\n        sum += num;\n        min_sum\
    \ = min_sum.min(sum);\n        if sum > 0 {\n            sum = 0;\n        }\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut sum = 0;\n    let mut min_sum = std::isize::MAX;\n    for num in\
    \ nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum, sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut best = 0;\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        if sum < best {\n            best\
    \ = sum;\n        }\n    }\n    best\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpcpvnejs5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ curr_sum = 0;\n    for x in nums {\n        curr_sum += x;\n        min_sum\
    \ = min_sum.min(curr_sum);\n        curr_sum = curr_sum.max(0);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp00xwxti5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_total = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for val in nums {\n        sum += val;\n        min_total = std::cmp::min(min_total,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_total\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sub_sum = std::isize::MAX;\n    let\
    \ mut curr_sum = 0;\n    for num in nums {\n        curr_sum += num;\n       \
    \ min_sub_sum = std::cmp::min(min_sub_sum, curr_sum);\n        if curr_sum > 0\
    \ {\n            curr_sum = 0;\n        }\n    }\n    min_sub_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut result = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for num in nums {\n        sum += num;\n        result = result.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min = nums[0];\n    let mut sum = 0;\n    for &x in nums.iter() {\n\
    \        sum += x;\n        if sum < min {\n            min = sum;\n        }\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_so_far = isize::max_value();\n    let\
    \ mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n      \
    \  min_so_far = min(min_so_far, sum);\n        if sum < 0 {\n            sum =\
    \ 0;\n        }\n    }\n    min_so_far\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp12jdlb7u.rs:13:22\n\
    \   |\n13 |         min_so_far = min(min_so_far, sum);\n   |                 \
    \     ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n13 |\
    \         min_so_far = main(min_so_far, sum);\n   |                      ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut running_sum\
    \ = 0;\n    for num in nums {\n        running_sum += num;\n        if running_sum\
    \ < min_sum {\n            min_sum = running_sum;\n        }\n        if running_sum\
    \ > 0 {\n            running_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut cur_min = nums[0];\n    let mut cur_sum\
    \ = 0;\n    for num in nums {\n        cur_sum += num;\n        if cur_sum < cur_min\
    \ {\n            cur_min = cur_sum;\n        }\n        if cur_sum > 0 {\n   \
    \         cur_sum = 0;\n        }\n    }\n    cur_min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ curr_sum = 0;\n    for item in nums {\n        curr_sum += item;\n        if\
    \ curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n        if\
    \ curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut tmp_sum = nums[0];\n    let mut min_sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        tmp_sum = if tmp_sum > 0 {\n\
    \            tmp_sum + nums[i]\n        } else {\n            nums[i]\n      \
    \  };\n        min_sum = min(min_sum, tmp_sum);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8vc0nioe.rs:17:19\n\
    \   |\n17 |         min_sum = min(min_sum, tmp_sum);\n   |                   ^^^\n\
    ...\n22 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n17 |        \
    \ min_sum = main(min_sum, tmp_sum);\n   |                   ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    use std::cmp::min;\n    let mut min_sub_sum = isize::max_value();\n\
    \    let mut current_sub_sum = 0;\n    for i in nums {\n        current_sub_sum\
    \ = min(i, current_sub_sum + i);\n        min_sub_sum = min(min_sub_sum, current_sub_sum);\n\
    \    }\n    min_sub_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // find all subarrays\n    let mut subarrays = Vec::new();\n\
    \    for i in 0..nums.len() {\n        for j in i..nums.len() {\n            let\
    \ mut subarray = Vec::new();\n            for k in i..j + 1 {\n              \
    \  subarray.push(nums[k]);\n            }\n            subarrays.push(subarray);\n\
    \        }\n    }\n    // find smallest sum of each subarray\n    let min_sum\
    \ = subarrays\n        .iter()\n        .map(|subarray| subarray.iter().sum::<isize>())\n\
    \        .min()\n        .unwrap();\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // min_value is initialized to `max_value`. This\
    \ is to prevent\n    // the first comparison of min_value with nums[i] if i =\
    \ 0 from\n    // assigning nums[i] to min_value. This is important because if\n\
    \    // nums[i] was assigned to min_value and nums[i] was negative,\n    // it\
    \ would be the case that min_value would always be negative\n    // because the\
    \ sum of two negative numbers will always be a negative\n    // number.\n    let\
    \ mut min_value = std::isize::MAX;\n    let mut sum: isize = 0;\n    for i in\
    \ 0..nums.len() {\n        if i == 0 {\n            sum = nums[i];\n        }\
    \ else {\n            // If the number at the current index is greater than the\
    \ sum\n            // at that index, then the sum becomes the number at that index.\n\
    \            // This is because it is possible for the sum at a given index\n\
    \            // to be negative, which means that adding it to the next number\n\
    \            // will not result in a minimum.\n            if nums[i] > sum {\n\
    \                sum = nums[i];\n            } else {\n                sum +=\
    \ nums[i];\n            }\n        }\n        if sum < min_value {\n         \
    \   min_value = sum;\n        }\n    }\n    min_value\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp6ylupuec.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let n = nums.len();\n    let mut min_sum = isize::max_value();\n\
    \    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += nums[i];\n\
    \        if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n\
    \        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        if sum < min {\n        \
    \    min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n\
    \    for i in 1..nums.len() {\n        if sum < 0 {\n            sum = nums[i];\n\
    \        } else {\n            sum += nums[i];\n        }\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp16wyz3cn.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ curr_sum = 0;\n    for num in nums {\n        curr_sum += num;\n        min_sum\
    \ = min_sum.min(curr_sum);\n        curr_sum = curr_sum.max(0);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpdsbts5k9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = 0;\n   \
    \ let mut min_sum_started = false;\n    for i in nums {\n        sum += i;\n \
    \       if sum < min_sum || !min_sum_started {\n            min_sum = sum;\n \
    \           min_sum_started = true;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpq_zzb808.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for n in nums {\n        sum += n;\n        if sum < min {\n     \
    \       min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n  \
    \      }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = nums[0];\n    let mut min_sum = sum;\n\
    \    for i in 1..nums.len() {\n        sum = sum.max(0) + nums[i];\n        min_sum\
    \ = min_sum.min(sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp_vvj_99e.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum = isize::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_end = isize::max_value();\n    let mut\
    \ min_so_far = isize::max_value();\n    for x in nums {\n        min_end = isize::min(x,\
    \ min_end + x);\n        min_so_far = isize::min(min_so_far, min_end);\n    }\n\
    \    min_so_far\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to add with overflow'', /tmp/tmpty0g6pgu.rs:12:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // If there are no numbers in the vector, return\
    \ 0.\n    if nums.len() == 0 {\n        return 0;\n    }\n\n    // Store the current\
    \ sum and minimum sum.\n    let mut cur_sum = 0;\n    let mut min_sum = std::isize::MAX;\n\
    \n    // Iterate over the array.\n    for num in nums {\n        // Update the\
    \ current sum by adding the current number.\n        cur_sum += num;\n\n     \
    \   // If the current sum is less than the minimum sum, update the minimum sum.\n\
    \        if cur_sum < min_sum {\n            min_sum = cur_sum;\n        }\n\n\
    \        // If the current sum is less than 0, reset the current sum to 0.\n \
    \       if cur_sum < 0 {\n            cur_sum = 0;\n        }\n    }\n\n    //\
    \ Return the minimum sum.\n    min_sum\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp7325m5xo.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = 0;\n    let mut sum = 0;\n   \
    \ for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n    }\n    return min_sum;\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp85miod15.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut min_sum = isize::max_value();\n\
    \    for num in nums {\n        sum += num;\n        min_sum = min_sum.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    // do sum of all numbers, then minus the max subvector\
    \ sum.\n    let all_sum: isize = nums.iter().sum();\n    let max_subvector_sum\
    \ = maxSubArraySum(nums);\n    all_sum - max_subvector_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `maxSubArraySum` in this scope\n  -->\
    \ /tmp/tmp6_la45sx.rs:11:29\n   |\n11 |     let max_subvector_sum = maxSubArraySum(nums);\n\
    \   |                             ^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut current_sum = 0;\n    let mut current_min\
    \ = std::isize::MAX;\n    for n in nums {\n        current_sum += n;\n       \
    \ current_min = std::cmp::min(current_min, current_sum);\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    current_min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ sum = 0;\n    for n in nums {\n        sum += n;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut result = std::isize::MAX;\n    let mut last\
    \ = 0;\n    for num in nums {\n        last = std::cmp::min(num, last + num);\n\
    \        result = std::cmp::min(result, last);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    nums.iter().sum::<isize>()\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp6wlegn7q.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976595
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976595
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut cum_sum = 0;\n    let mut min_sum = nums[0];\n\
    \    for i in nums {\n        cum_sum += i;\n        min_sum = min_sum.min(cum_sum);\n\
    \        cum_sum = cum_sum.max(0);\n    }\n    min_sum\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmprbx9vuc1.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for x in nums {\n        sum += x;\n        if sum < min {\n     \
    \       min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n  \
    \      }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let n = nums.len();\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return nums[0];\n    }\n    let mut min\
    \ = nums[0];\n    let mut sum = nums[0];\n    for i in 1..n {\n        sum = sum.min(0)\
    \ + nums[i];\n        min = min.min(sum);\n    }\n    min\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut s = 0;\n    let mut ans = isize::max_value();\n\
    \    for num in nums {\n        s += num;\n        ans = ans.min(s);\n       \
    \ s = s.max(0);\n    }\n    ans\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9mo63j2u.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut result = 0;\n\
    \    for n in nums {\n        result += n;\n        if result < min {\n      \
    \      min = result;\n        }\n        if result > 0 {\n            result =\
    \ 0;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    if nums.is_empty() {\n        return 0;\n    }\n\
    \    let mut min_sum = nums[0];\n    let mut current_sum = 0;\n    for num in\
    \ nums {\n        current_sum += num;\n        if current_sum < min_sum {\n  \
    \          min_sum = current_sum;\n        }\n        if current_sum > 0 {\n \
    \           current_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut sums = vec![0; nums.len()];\n    let mut\
    \ min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for (i, num) in nums.iter().enumerate()\
    \ {\n        sum += num;\n        sums[i] = sum;\n        min_sum = min_sum.min(sum);\n\
    \    }\n    let mut curr_min = std::isize::MAX;\n    for i in 1..sums.len() {\n\
    \        curr_min = min_sum.min(sums[i] - sums[i - 1]);\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpy3mzyayx.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut sum = 0;\n \
    \   for i in nums {\n        sum += i;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976594
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let len = nums.len();\n    let mut prefix = vec![0;\
    \ len + 1];\n    for i in 0..len {\n        prefix[i + 1] = prefix[i] + nums[i];\n\
    \    }\n    let mut min_sum = prefix[len];\n    for i in 0..len {\n        for\
    \ j in i + 1..len + 1 {\n            min_sum = min_sum.min(prefix[j] - prefix[i]);\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums[0];\n    let mut curr_sum\
    \ = nums[0];\n    for num in nums.iter().skip(1) {\n        curr_sum = num.max(curr_sum\
    \ + num);\n        min_sum = min_sum.min(curr_sum);\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf0zlltqt.rs:12:28\n   |\n\
    12 |         curr_sum = num.max(curr_sum + num);\n   |                       \
    \     ^^^^^^^^^^^^^^\n   |                            |\n   |                \
    \            expected `&isize`, found `isize`\n   |                          \
    \  help: consider borrowing here: `&(curr_sum + num)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf0zlltqt.rs:12:20\n   |\n10 |     let mut curr_sum = nums[0];\n\
    \   |                        ------- expected due to this value\n11 |     for\
    \ num in nums.iter().skip(1) {\n12 |         curr_sum = num.max(curr_sum + num);\n\
    \   |                    ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n12 |         curr_sum =\
    \ *num.max(curr_sum + num);\n   |                    +\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::max_value();\n    let mut\
    \ sum = 0;\n    for n in nums {\n        sum += n;\n        min_sum = min_sum.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
- exit_code: 0
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums[0];\n    let mut current = 0;\n\
    \    for n in nums {\n        current += n;\n        if current < min {\n    \
    \        min = current;\n        }\n        if current > 0 {\n            current\
    \ = 0;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976596
