name: HumanEval_30_get_positive
language: rs
prompt: "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1,\
  \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
  \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
  \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
  \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  }\n"
completions: ['    l.into_iter().filter(|x| x > &0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    // Code here!\n    l.into_iter().filter(|x| *x > 0).collect()",
  '    return l.into_iter().filter(|&x| x > 0).collect();', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    // TODO - return the positive numbers from `l`\n    let\
    \ mut result: Vec<isize> = Vec::new();\n    for &item in l.iter() {\n        if\
    \ item > 0 {\n            result.push(item);\n        }\n    }\n    result", " \
    \   let mut pos = Vec::new();\n    for i in l {\n        if i > 0 {\n        \
    \    pos.push(i);\n        }\n    }\n    pos", '    l.into_iter().filter(|x| x
    > &0).collect()', '    unimplemented!();', '    unimplemented!();', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&n|
    n > 0).collect()', '    unimplemented!()', '    l.into_iter().filter(|&x| x >
    0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()']
stop_tokens:
- "\n}"
