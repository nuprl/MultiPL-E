name: HumanEval_82_prime_length
language: rs
prompt: "/// Write a function that takes a string and returns true if the string\n\
  /// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(String::from(\"\
  Hello\"))\n/// true\n/// >>> prime_length(String::from(\"abcdcba\"))\n/// true\n\
  /// >>> prime_length(String::from(\"kittens\"))\n/// true\n/// >>> prime_length(String::from(\"\
  orange\"))\n/// false\nfn prime_length(string: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = prime_length;\n    assert_eq!(candidate(String::from(\"\
  Hello\")), true);\n    assert_eq!(candidate(String::from(\"abcdcba\")), true);\n\
  \    assert_eq!(candidate(String::from(\"kittens\")), true);\n    assert_eq!(candidate(String::from(\"\
  orange\")), false);\n    assert_eq!(candidate(String::from(\"wow\")), true);\n \
  \   assert_eq!(candidate(String::from(\"world\")), true);\n    assert_eq!(candidate(String::from(\"\
  MadaM\")), true);\n    assert_eq!(candidate(String::from(\"Wow\")), true);\n   \
  \ assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
  HI\")), true);\n    assert_eq!(candidate(String::from(\"go\")), true);\n    assert_eq!(candidate(String::from(\"\
  gogo\")), false);\n    assert_eq!(candidate(String::from(\"aaaaaaaaaaaaaaa\")),\
  \ false);\n    assert_eq!(candidate(String::from(\"Madam\")), true);\n    assert_eq!(candidate(String::from(\"\
  M\")), false);\n    assert_eq!(candidate(String::from(\"0\")), false);\n}\n"
completions: ["    for i in 2..string.len() {\n        if string.len() % i == 0 {\n\
    \            return false;\n        }\n    }\n    true", "    let string_length\
    \ = string.len();\n    let primes = vec![1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    primes.contains(&string_length)",
  "    let length = string.len();\n    length == 1 || length == 2 || length % 2 !=\
    \ 0", "    let length = string.len();\n    length == 2 || length == 3 || length\
    \ == 5 || length == 7 || length == 11", "    // TODO:\n    return false;", " \
    \   let length = string.len();\n    let is_prime = |x: usize| -> bool {\n    \
    \    if x <= 1 {\n            return false;\n        }\n        for i in 2..x\
    \ {\n            if x % i == 0 {\n                return false;\n            }\n\
    \        }\n        true\n    };\n    is_prime(length)", '    return is_prime(string.len()
    as u64);', "    let length = string.len();\n    if length == 1 {\n        return\
    \ false;\n    }\n    for i in 2..length {\n        if length % i == 0 {\n    \
    \        return false;\n        }\n    }\n    true", '    string.len() > 1 &&
    !(2..string.len()).any(|i| string.len() % i == 0)', "    let mut count = 0;\n\
    \    for letter in string.chars() {\n        count += 1;\n    }\n    let flag\
    \ = true;\n    for i in 2..count/2 {\n        if count % i == 0 {\n          \
    \  flag = false;\n            break;\n        }\n    }\n    return flag;", '    string.len()
    > 1 && !(2..=(string.len() / 2)).any(|x| string.len() % x == 0)', "    let len\
    \ = string.len();\n    if len == 0 || len == 1 {\n        return false;\n    }\n\
    \    // Try to divide by every number from 2 to len/2\n    for i in 2..(len /\
    \ 2) {\n        if len % i == 0 {\n            return false;\n        }\n    }\n\
    \    true", "    let str_len = string.len();\n    if str_len <= 1 {\n        return\
    \ false;\n    }\n\n    for factor in 2..str_len {\n        if str_len % factor\
    \ == 0 {\n            return false;\n        }\n    }\n\n    true", "    let length\
    \ = string.len();\n    if length <= 1 {\n        return false;\n    }\n    for\
    \ i in 2..=length/2 {\n        if length % i == 0 {\n            return false;\n\
    \        }\n    }\n    true", '    is_prime_length(string.len())', '    unimplemented!();',
  "    let string_length = string.len();\n    let mut divisor = 2;\n    let mut is_prime\
    \ = true;\n    while is_prime && divisor < string_length {\n        if string_length\
    \ % divisor == 0 {\n            is_prime = false;\n        }\n        divisor\
    \ += 1;\n    }\n    is_prime", "    let str_length = string.len();\n    if str_length\
    \ <= 1 {\n        return false;\n    }\n    for i in 2..str_length {\n       \
    \ if str_length % i == 0 {\n            return false;\n        }\n    }\n    true",
  "    // YOUR CODE HERE\n    unimplemented!()", "    let len = string.len();\n  \
    \  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    if primes.contains(&len) {\n        true\n\
    \    } else {\n        false\n    }"]
stop_tokens:
- "\n}"
