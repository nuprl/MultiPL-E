name: HumanEval_81_numerical_letter_grade
language: rs
prompt: "/// It is the last week of the semester and the teacher has to give the grades\n\
  /// to students. The teacher has been making her own algorithm for grading.\n///\
  \ The only problem is, she has lost the code she used for grading.\n/// She has\
  \ given you a vector of GPAs for some students and you have to write \n/// a function\
  \ that can output a vector of letter grades using the following table:\n/// GPA\
  \       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A\
  \ \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7       \
  \         B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7\
  \                C\n/// > 1.3                C-\n/// > 1.0                D+ \n\
  /// > 0.7                D \n/// > 0.0                D-\n/// 0.0              \
  \  E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"\
  A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
  A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
  \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
  C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
  \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
  D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n   \
  \ assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"),\
  \ String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
  B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
  D-\")]);\n}\n"
completions: ['    grades.iter().map(|&x| grade_score(x)).collect()', "    let mut\
    \ grades_to_letters: Vec<String> = Vec::new();\n    for g in grades {\n      \
    \  grades_to_letters.push(match g {\n            x if x >= 4.0 => \"A+\".to_string(),\n\
    \            x if x >= 3.7 => \"A\".to_string(),\n            x if x >= 3.3 =>\
    \ \"A-\".to_string(),\n            x if x >= 3.0 => \"B+\".to_string(),\n    \
    \        x if x >= 2.7 => \"B\".to_string(),\n            x if x >= 2.3 => \"\
    B-\".to_string(),\n            x if x >= 2.0 => \"C+\".to_string(),\n        \
    \    x if x >= 1.7 => \"C\".to_string(),\n            x if x >= 1.3 => \"C-\"\
    .to_string(),\n            x if x >= 1.0 => \"D+\".to_string(),\n            x\
    \ if x >= 0.7 => \"D\".to_string(),\n            x if x >= 0.0 => \"D-\".to_string(),\n\
    \            _ => \"E\".to_string(),\n        });\n    }\n    grades_to_letters",
  "    let grade_ranges = vec![\n        (\"A+\", 3.7),\n        (\"A\", 3.3),\n \
    \       (\"A-\", 3.0),\n        (\"B+\", 2.7),\n        (\"B\", 2.3),\n      \
    \  (\"B-\", 2.0),\n        (\"C+\", 1.7),\n        (\"C\", 1.3),\n        (\"\
    C-\", 1.0),\n        (\"D+\", 0.7),\n        (\"D\", 0.0),\n        (\"D-\", 0.0),\n\
    \        (\"E\", 0.0),\n    ];\n\n    grades\n        .iter()\n        .map(|g|\
    \ {\n            let mut l_grade = \"E\";\n            for (letter, num) in grade_ranges.iter()\
    \ {\n                if g > num {\n                    l_grade = letter;\n   \
    \                 break;\n                }\n            }\n            String::from(*l_grade)\n\
    \        })\n        .collect()", "    grades.iter().map(|g| \n        match *g\
    \ {\n            4.0 => String::from(\"A+\"),\n            x if x > 3.7 => String::from(\"\
    A\"),\n            x if x > 3.3 => String::from(\"A-\"),\n            x if x >\
    \ 3.0 => String::from(\"B+\"),\n            x if x > 2.7 => String::from(\"B\"\
    ),\n            x if x > 2.3 => String::from(\"B-\"),\n            x if x > 2.0\
    \ => String::from(\"C+\"),\n            x if x > 1.7 => String::from(\"C\"),\n\
    \            x if x > 1.3 => String::from(\"C-\"),\n            x if x > 1.0 =>\
    \ String::from(\"D+\"),\n            x if x > 0.7 => String::from(\"D\"),\n  \
    \          0.0 => String::from(\"E\"),\n            _ => String::from(\"D-\"),\n\
    \        }\n    ).collect()", "    grades.iter().map(|&n| {\n        match n {\n\
    \            _ if n >= 4.0 => String::from(\"A+\"),\n            _ if n >= 3.7\
    \ => String::from(\"A\"),\n            _ if n >= 3.3 => String::from(\"A-\"),\n\
    \            _ if n >= 3.0 => String::from(\"B+\"),\n            _ if n >= 2.7\
    \ => String::from(\"B\"),\n            _ if n >= 2.3 => String::from(\"B-\"),\n\
    \            _ if n >= 2.0 => String::from(\"C+\"),\n            _ if n >= 1.7\
    \ => String::from(\"C\"),\n            _ if n >= 1.3 => String::from(\"C-\"),\n\
    \            _ if n >= 1.0 => String::from(\"D+\"),\n            _ if n >= 0.7\
    \ => String::from(\"D\"),\n            _ if n >= 0.0 => String::from(\"D-\"),\n\
    \            _ => String::from(\"E\"),\n        }\n    }).collect()", "    let\
    \ grades_map = vec![\n        (4.0, \"A+\"),\n        (3.7, \"A\"),\n        (3.3,\
    \ \"A-\"),\n        (3.0, \"B+\"),\n        (2.7, \"B\"),\n        (2.3, \"B-\"\
    ),\n        (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3, \"C-\"),\n  \
    \      (1.0, \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"),\n    ];\n\
    \    let mut numerical_grade_letter_grade: Vec<String> = Vec::new();\n    for\
    \ grade in grades {\n        let mut last_grade = 0.0;\n        for grade_pair\
    \ in grades_map.iter() {\n            if grade >= grade_pair.0 {\n           \
    \     if grade == last_grade {\n                    numerical_grade_letter_grade.push(String::from(grade_pair.1));\n\
    \                } else {\n                    numerical_grade_letter_grade.push(String::from(grade_pair.1));\n\
    \                    break;\n                }\n            }\n            last_grade\
    \ = grade_pair.0;\n        }\n    }\n    numerical_grade_letter_grade", "    grades.iter().map(\n\
    \        |grade| match *grade {\n            4.0 => String::from(\"A+\"),\n  \
    \          3.7...4.0 => String::from(\"A\"),\n            3.3...3.7 => String::from(\"\
    A-\"),\n            3.0...3.3 => String::from(\"B+\"),\n            2.7...3.0\
    \ => String::from(\"B\"),\n            2.3...2.7 => String::from(\"B-\"),\n  \
    \          2.0...2.3 => String::from(\"C+\"),\n            1.7...2.0 => String::from(\"\
    C\"),\n            1.3...1.7 => String::from(\"C-\"),\n            1.0...1.3 =>\
    \ String::from(\"D+\"),\n            0.7...1.0 => String::from(\"D\"),\n     \
    \       0.0...0.7 => String::from(\"D-\"),\n            _ => String::from(\"E\"\
    ),\n        }\n    ).collect()", "    let mut letter_grades = Vec::new();\n  \
    \  for mut grade in grades {\n        if grade > 4.0 {\n            grade = 4.0;\n\
    \        }\n        if grade < 0.0 {\n            grade = 0.0;\n        }\n  \
    \      if grade > 3.7 {\n            letter_grades.push(String::from(\"A+\"));\n\
    \        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades", "    //\n    let mut gpa_to_letter = HashMap::new();\n\
    \    gpa_to_letter.insert(4.0, \"+A\");\n    gpa_to_letter.insert(3.7, \"A\");\n\
    \    gpa_to_letter.insert(3.3, \"-A\");\n    gpa_to_letter.insert(3.0, \"+B\"\
    );\n    gpa_to_letter.insert(2.7, \"B\");\n    gpa_to_letter.insert(2.3, \"-B\"\
    );\n    gpa_to_letter.insert(2.0, \"+C\");\n    gpa_to_letter.insert(1.7, \"C\"\
    );\n    gpa_to_letter.insert(1.3, \"-C\");\n    gpa_to_letter.insert(1.0, \"+D\"\
    );\n    gpa_to_letter.insert(0.7, \"D\");\n    gpa_to_letter.insert(0.0, \"-D\"\
    );\n    let mut gpa_to_letter_bounds = vec![0.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    let mut result = Vec::new();\n    for grade\
    \ in grades {\n        let grade_bound = gpa_to_letter_bounds.iter().find(|&x|\
    \ grade >= **x);\n        match grade_bound {\n            Some(b) => {\n    \
    \            let letter = gpa_to_letter.get(b).unwrap();\n                result.push(letter.to_string());\n\
    \            },\n            None => { result.push(\"E\".to_string()); }\n   \
    \     }\n    }\n    result", "    let grades_letters = vec![\n        (4.0, \"\
    A+\"),\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n\
    \        (2.7, \"B\"),\n        (2.3, \"B-\"),\n        (2.0, \"C+\"),\n     \
    \   (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0, \"D+\"),\n        (0.7,\
    \ \"D\"),\n        (0.0, \"D-\"),\n    ];\n    grades\n        .iter()\n     \
    \   .map(|x| {\n            for (g, l) in grades_letters.iter() {\n          \
    \      if *x >= *g {\n                    return String::from(*l);\n         \
    \       }\n            }\n            String::from(\"E\")\n        })\n      \
    \  .collect()", "    let mut letter_grades = Vec::new();\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades", "    let mut result: Vec<String> = Vec::new();\n\
    \    let letter_grades = vec![(4.0, \"A+\"), (3.7, \"A\"), (3.3, \"A-\"), (3.0,\
    \ \"B+\"),\n                             (2.7, \"B\"), (2.3, \"B-\"), (2.0, \"\
    C+\"), (1.7, \"C\"),\n                             (1.3, \"C-\"), (1.0, \"D+\"\
    ), (0.7, \"D\"), (0.0, \"D-\"),\n                             (0.0, \"E\")];\n\
    \    for grade in grades {\n        for (gpa, letter) in letter_grades.iter()\
    \ {\n            if grade >= *gpa {\n                result.push(letter.to_string());\n\
    \                break;\n            }\n        }\n    }\n    result", "    let\
    \ mut output: Vec<String> = Vec::new();\n    for grade in grades {\n        if\
    \ grade >= 4.0 {\n            output.push(String::from(\"A+\"));\n        } else\
    \ if grade >= 3.7 {\n            output.push(String::from(\"A\"));\n        }\
    \ else if grade >= 3.3 {\n            output.push(String::from(\"A-\"));\n   \
    \     } else if grade >= 3.0 {\n            output.push(String::from(\"B+\"));\n\
    \        } else if grade >= 2.7 {\n            output.push(String::from(\"B\"\
    ));\n        } else if grade >= 2.3 {\n            output.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            output.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            output.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            output.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            output.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            output.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            output.push(String::from(\"\
    D-\"));\n        } else {\n            output.push(String::from(\"E\"));\n   \
    \     }\n    }\n    output", "    let letter_grades = grades.iter().map(|g| {\n\
    \        if *g >= 4.0 {\n            \"A+\".to_string()\n        } else if *g\
    \ >= 3.7 {\n            \"A\".to_string()\n        } else if *g >= 3.3 {\n   \
    \         \"A-\".to_string()\n        } else if *g >= 3.0 {\n            \"B+\"\
    .to_string()\n        } else if *g >= 2.7 {\n            \"B\".to_string()\n \
    \       } else if *g >= 2.3 {\n            \"B-\".to_string()\n        } else\
    \ if *g >= 2.0 {\n            \"C+\".to_string()\n        } else if *g >= 1.7\
    \ {\n            \"C\".to_string()\n        } else if *g >= 1.3 {\n          \
    \  \"C-\".to_string()\n        } else if *g >= 1.0 {\n            \"D+\".to_string()\n\
    \        } else if *g >= 0.7 {\n            \"D\".to_string()\n        } else\
    \ if *g >= 0.0 {\n            \"D-\".to_string()\n        } else {\n         \
    \   \"E\".to_string()\n        }\n    });\n    letter_grades.collect()", "   \
    \ grades.iter().map(|x| \n            match *x {\n                4.0 => String::from(\"\
    A+\"),\n                x if x >= 3.7 => String::from(\"A\"),\n              \
    \  x if x >= 3.3 => String::from(\"A-\"),\n                x if x >= 3.0 => String::from(\"\
    B+\"),\n                x if x >= 2.7 => String::from(\"B\"),\n              \
    \  x if x >= 2.3 => String::from(\"B-\"),\n                x if x >= 2.0 => String::from(\"\
    C+\"),\n                x if x >= 1.7 => String::from(\"C\"),\n              \
    \  x if x >= 1.3 => String::from(\"C-\"),\n                x if x >= 1.0 => String::from(\"\
    D+\"),\n                x if x >= 0.7 => String::from(\"D\"),\n              \
    \  x if x >= 0.0 => String::from(\"D-\"),\n                _ => String::from(\"\
    E\"),\n            }\n        ).collect()", "    grades.iter().map(|g| {\n   \
    \     let lg = match *g {\n            4.0 => \"A+\",\n            g if g > 3.7\
    \ => \"A\",\n            g if g > 3.3 => \"A-\",\n            g if g > 3.0 =>\
    \ \"B+\",\n            g if g > 2.7 => \"B\",\n            g if g > 2.3 => \"\
    B-\",\n            g if g > 2.0 => \"C+\",\n            g if g > 1.7 => \"C\"\
    ,\n            g if g > 1.3 => \"C-\",\n            g if g > 1.0 => \"D+\",\n\
    \            g if g > 0.7 => \"D\",\n            g if g > 0.0 => \"D-\",\n   \
    \         _ => \"E\",\n        };\n        String::from(lg)\n    }).collect()",
  "    let mut grades_vec = Vec::new();\n    for grade in grades {\n        if grade\
    \ >= 4.0 {\n            grades_vec.push(String::from(\"A+\"));\n        } else\
    \ if grade >= 3.7 {\n            grades_vec.push(String::from(\"A\"));\n     \
    \   } else if grade >= 3.3 {\n            grades_vec.push(String::from(\"A-\"\
    ));\n        } else if grade >= 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec", "    grades.iter().map(|g| match *g {\n  \
    \      x if x >= 4.0 => String::from(\"A+\"),\n        x if x >= 3.7 => String::from(\"\
    A\"),\n        x if x >= 3.3 => String::from(\"A-\"),\n        x if x >= 3.0 =>\
    \ String::from(\"B+\"),\n        x if x >= 2.7 => String::from(\"B\"),\n     \
    \   x if x >= 2.3 => String::from(\"B-\"),\n        x if x >= 2.0 => String::from(\"\
    C+\"),\n        x if x >= 1.7 => String::from(\"C\"),\n        x if x >= 1.3 =>\
    \ String::from(\"C-\"),\n        x if x >= 1.0 => String::from(\"D+\"),\n    \
    \    x if x >= 0.7 => String::from(\"D\"),\n        x if x >= 0.0 => String::from(\"\
    D-\"),\n        _ => String::from(\"E\"),\n    }).collect()", "    // TODO: Implement\
    \ the solution here\n    let mut letter_grades = Vec::new();\n    for grade in\
    \ grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade >= 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade >= 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade >= 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade >= 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade >= 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade >= 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades", "    let mut letters = Vec::new();\n  \
    \  for grade in grades {\n        match grade {\n            grade if grade >=\
    \ 4.0 => letters.push(String::from(\"A+\")),\n            grade if grade >= 3.7\
    \ => letters.push(String::from(\"A\")),\n            grade if grade >= 3.3 =>\
    \ letters.push(String::from(\"A-\")),\n            grade if grade >= 3.0 => letters.push(String::from(\"\
    B+\")),\n            grade if grade >= 2.7 => letters.push(String::from(\"B\"\
    )),\n            grade if grade >= 2.3 => letters.push(String::from(\"B-\")),\n\
    \            grade if grade >= 2.0 => letters.push(String::from(\"C+\")),\n  \
    \          grade if grade >= 1.7 => letters.push(String::from(\"C\")),\n     \
    \       grade if grade >= 1.3 => letters.push(String::from(\"C-\")),\n       \
    \     grade if grade >= 1.0 => letters.push(String::from(\"D+\")),\n         \
    \   grade if grade >= 0.7 => letters.push(String::from(\"D\")),\n            grade\
    \ if grade >= 0.0 => letters.push(String::from(\"D-\")),\n            _ => letters.push(String::from(\"\
    E\")),\n        }\n    }\n    letters"]
stop_tokens:
- "\n}"
