name: HumanEval_118_get_closest_vowel
language: rs
prompt: "/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(String::from(\"\
  yogurt\"))\n/// String::from(\"u\")\n/// >>> get_closest_vowel(String::from(\"FULL\"\
  ))\n/// String::from(\"U\")\n/// >>> get_closest_vowel(String::from(\"quick\"))\n\
  /// String::from(\"\")\n/// >>> get_closest_vowel(String::from(\"ab\"))\n/// String::from(\"\
  \")\nfn get_closest_vowel(word: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = get_closest_vowel;\n    assert_eq!(candidate(String::from(\"\
  yogurt\")), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"full\"\
  )), String::from(\"u\"));\n    assert_eq!(candidate(String::from(\"easy\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"eAsy\")), String::from(\"\"));\n\
  \    assert_eq!(candidate(String::from(\"ali\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  bad\")), String::from(\"a\"));\n    assert_eq!(candidate(String::from(\"most\")),\
  \ String::from(\"o\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  \"));\n    assert_eq!(candidate(String::from(\"ba\")), String::from(\"\"));\n  \
  \  assert_eq!(candidate(String::from(\"quick\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
  anime\")), String::from(\"i\"));\n    assert_eq!(candidate(String::from(\"Asia\"\
  )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Above\")), String::from(\"\
  o\"));\n}\n"
completions: ["    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let word = word.as_bytes();\n\
    \    for (i, &c) in word.iter().enumerate().rev() {\n        let c = c as char;\n\
    \        let next = *word.get(i + 1).unwrap_or(&(b' '));\n        let prev = *word.get(i\
    \ - 1).unwrap_or(&(b' '));\n        if (prev as char).is_ascii_lowercase() &&\
    \ !vowels.contains(&prev as char) &&\n            (next as char).is_ascii_lowercase()\
    \ && !vowels.contains(&next as char) {\n            return c.to_string();\n  \
    \      }\n    }\n    String::from(\"\")", "    let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    let reversed = word.chars().rev().collect::<String>();\n    for (i,\
    \ c) in reversed.char_indices() {\n        if vowels.contains(&c) {\n        \
    \    if i < word.len() - 1 {\n                return word[(word.len() - i - 1)..].chars().take(1).collect();\n\
    \            }\n        }\n    }\n    String::from(\"\")", "    let mut chars\
    \ = word.chars().rev();\n    let mut found = false;\n    let mut last_consonant\
    \ = '\\0';\n    let mut last_vowel = '\\0';\n    while let Some(c) = chars.next()\
    \ {\n        if !found {\n            if is_vowel(c) {\n                last_vowel\
    \ = c;\n            } else {\n                last_consonant = c;\n          \
    \      found = true;\n            }\n        } else {\n            if is_vowel(c)\
    \ {\n                return last_vowel.to_string();\n            } else {\n  \
    \              last_consonant = c;\n            }\n        }\n    }\n    return\
    \ String::new();", "    let vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let mut last_consonant_position = 0;\n    let mut first_vowel_position =\
    \ 0;\n    let mut found_vowel = false;\n    let mut found_first_vowel = false;\n\
    \    let mut found_second_vowel = false;\n    let mut second_vowel_position =\
    \ 0;\n    let mut first_vowel_character = \"\";\n    let mut second_vowel_character\
    \ = \"\";\n    let mut counter = 0;\n    let mut closest_vowel = \"\";\n    let\
    \ characters: Vec<char> = word.chars().collect();\n    let words_len = characters.len();\n\
    \    for character in characters {\n        if vowels.contains(&character.to_string().as_str())\
    \ {\n            if !found_first_vowel {\n                first_vowel_position\
    \ = counter;\n                first_vowel_character = character.to_string().as_str();\n\
    \                found_first_vowel = true;\n            } else if found_first_vowel\
    \ && !found_second_vowel {\n                second_vowel_position = counter;\n\
    \                second_vowel_character = character.to_string().as_str();\n  \
    \              found_second_vowel = true;\n            }\n        } else {\n \
    \           if found_first_vowel && !found_second_vowel {\n                last_consonant_position\
    \ = counter;\n            }\n        }\n        counter += 1;\n    }\n    if last_consonant_position\
    \ < words_len && first_vowel_position < words_len {\n        found_vowel = true;\n\
    \    }\n    if found_vowel {\n        if found_second_vowel {\n            if\
    \ (second_vowel_position - last_consonant_position) < (first_vowel_position -\
    \ last_consonant_position) {\n                closest_vowel = second_vowel_character;\n\
    \            } else {\n                closest_vow", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let chars: Vec<char> = word.chars().collect();\n \
    \   let mut result = None;\n    let mut consonant_count = 0;\n    for i in (0..chars.len()).rev()\
    \ {\n        if vowels.contains(&chars[i]) {\n            if consonant_count ==\
    \ 1 {\n                result = Some(chars[i]);\n                break;\n    \
    \        }\n            consonant_count = 0;\n        } else {\n            consonant_count\
    \ += 1;\n        }\n    }\n    match result {\n        Some(vowel) => vowel.to_string(),\n\
    \        None => String::from(\"\"),\n    }", "    let word_chars: Vec<char> =\
    \ word.chars().collect();\n    let rev_word_chars: Vec<char> = word_chars.iter().rev().cloned().collect();\n\
    \    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut result = String::new();\n\
    \    let mut closest_vowel = String::new();\n    for c in rev_word_chars {\n \
    \       if vowels.contains(&c) {\n            result.push(c);\n        } else\
    \ {\n            if !result.is_empty() {\n                closest_vowel = result.chars().next().unwrap().to_string();\n\
    \                break;\n            }\n        }\n    }\n    closest_vowel",
  '    unimplemented!()', "    let vowels = String::from(\"aeiouAEIOU\");\n    let\
    \ mut found = String::from(\"\");\n    let mut left = 0;\n    let mut right =\
    \ 0;\n    let mut result = String::from(\"\");\n    let mut to_consonant = 0;\n\
    \    for c in word.chars() {\n        if vowels.contains(c) {\n            found\
    \ = c.to_string();\n            left = right;\n            to_consonant = 0;\n\
    \        } else {\n            if to_consonant == 0 {\n                result\
    \ = found.clone();\n            }\n            to_consonant += 1;\n        }\n\
    \        right += 1;\n    }\n    if to_consonant == 0 {\n        result = found.clone();\n\
    \    }\n    result", '    unimplemented!()', "    // unimplemented!()\n    //\
    \ return empty string if we didn't find vowel\n    let mut res = String::from(\"\
    \");\n    // check if word is empty string\n    if word.is_empty() {\n       \
    \ return res;\n    }\n    // list of vowels\n    let vowels = String::from(\"\
    AEIOUaeiou\");\n    // list of consonants\n    let consonants = String::from(\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\");\n    // take word len\n    let\
    \ wlen = word.len();\n    // find first vowel index\n    let first_vowel_index\
    \ = word.find(|c: char| vowels.contains(c));\n    // if there is no vowel, return\
    \ empty string\n    if first_vowel_index == None {\n        return res;\n    }\n\
    \    // take last vowel index\n    let last_vowel_index = word.rfind(|c: char|\
    \ vowels.contains(c));\n    // if word is vowel, return empty string\n    if first_vowel_index\
    \ == last_vowel_index {\n        return res;\n    }\n    // convert first_vowel_index\
    \ to Option<usize>\n    let first_vowel_index = first_vowel_index.unwrap();\n\
    \    // iterate from last vowel index to first vowel index\n    for (i,c) in word.chars().enumerate().skip(last_vowel_index.unwrap()).take(wlen)\
    \ {\n        // if current char is vowel\n        if vowels.contains(c) {\n  \
    \          // check if previous char is consonant\n            if consonants.contains(word.chars().nth(i-1).unwrap())\
    \ {\n                // set res to current char\n                res = c.to_string();\n\
    \                // break the loop\n                break;\n            }\n  \
    \      }\n    }\n    // return closest vowel\n    res", "    let reverse_word\
    \ = word.chars().rev().collect::<String>();\n    let vowels = String::from(\"\
    aeiouAEIOU\");\n    let mut result = String::from(\"\");\n    let mut pre_vowel\
    \ = false;\n    for ch in reverse_word.chars() {\n        if vowels.contains(ch)\
    \ {\n            if pre_vowel {\n                return String::from(\"\");\n\
    \            } else {\n                result.push(ch);\n                pre_vowel\
    \ = true;\n            }\n        } else {\n            pre_vowel = false;\n \
    \       }\n    }\n    result.chars().rev().collect::<String>()", "    let word\
    \ = word.chars().collect::<Vec<char>>();\n    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut result = \"\".to_string();\n    let mut i = word.len()\
    \ - 1;\n    let mut j = 0;\n    for _ in 0..word.len() {\n        if !vowels.contains(&word[i])\
    \ {\n            j += 1;\n            i -= 1;\n        } else {\n            break;\n\
    \        }\n    }\n    if j == word.len() {\n        return result;\n    }\n \
    \   let mut k = word.len() - 1;\n    for _ in j..word.len() {\n        if !vowels.contains(&word[k])\
    \ {\n            result.push(word[k]);\n            k -= 1;\n        } else {\n\
    \            break;\n        }\n    }\n    result.chars().rev().collect::<String>()",
  "    let consonants = vec!['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N',\
    \ 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'];\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut i = word.len() - 1;\n    let mut result =\
    \ String::new();\n    while i > 0 {\n        let mut char_to_compare = word.chars().nth(i).unwrap();\n\
    \        if char_to_compare.is_uppercase() {\n            char_to_compare = char_to_compare.to_lowercase().next().unwrap();\n\
    \        }\n        if consonants.contains(&char_to_compare) {\n            if\
    \ i < word.len() - 1 {\n                let mut next_char = word.chars().nth(i\
    \ + 1).unwrap();\n                if next_char.is_uppercase() {\n            \
    \        next_char = next_char.to_lowercase().next().unwrap();\n             \
    \   }\n                if vowels.contains(&next_char) {\n                    result\
    \ = next_char.to_string();\n                    break;\n                }\n  \
    \          }\n        }\n        i -= 1;\n    }\n    if i == 0 {\n        result\
    \ = String::new();\n    }\n    result", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let letters: Vec<char> = word.chars().collect();\n    for i\
    \ in 0..letters.len() - 1 {\n        let prev = letters[i];\n        let next\
    \ = letters[i + 1];\n        if vowels.contains(&prev) && vowels.contains(&next)\
    \ {\n            return prev.to_string();\n        }\n    }\n    String::from(\"\
    \")", "    // We will go through all the characters in the given string.\n   \
    \ // If we encounter a vowel, we will search backwards until we find a consonant.\n\
    \    // If the consonant is followed by another consonant, then the vowel is a\
    \ valid one.\n    let mut found_vowel = false;\n    let mut valid_vowel = String::new();\n\
    \    for character in word.chars() {\n        if !found_vowel {\n            if\
    \ character == 'a' || character == 'e' || character == 'i' || character == 'o'\
    \ || character == 'u' {\n                found_vowel = true;\n               \
    \ valid_vowel = character.to_string();\n            }\n        } else {\n    \
    \        if character != 'a' && character != 'e' && character != 'i' && character\
    \ != 'o' && character != 'u' {\n                return valid_vowel;\n        \
    \    } else {\n                found_vowel = false;\n            }\n        }\n\
    \    }\n    String::new()", "    let word = word.chars().collect::<Vec<char>>();\n\
    \    for (i, _) in word.iter().enumerate().rev() {\n        if i > 0 && i < word.len()\
    \ - 1 && !is_vowel(word[i - 1]) && !is_vowel(word[i + 1]) && is_vowel(word[i])\
    \ {\n            return word[i].to_string();\n        }\n    }\n    \"\".to_string()",
  "\tlet vowels = String::from(\"AEIOUaeiou\");\n\tlet chars: Vec<char> = word.chars().collect();\n\
    \tlet mut prev = ' ';\n\tlet mut vowel = ' ';\n\tfor i in (0..chars.len()).rev()\
    \ {\n\t\tlet current = chars[i];\n\t\tif vowels.contains(current) {\n\t\t\tvowel\
    \ = current;\n\t\t} else if vowel != ' ' {\n\t\t\treturn vowel.to_string();\n\t\
    \t}\n\t\tprev = current;\n\t}\n\tString::from(\"\")", "    // TODO: Implement\
    \ the function here\n    \"\".to_string()", "    let mut distance = 1000000;\n\
    \    let mut closest_vowel = String::from(\"\");\n    let word_vec: Vec<char>\
    \ = word.chars().collect();\n    for i in 0..word_vec.len() {\n        if is_vowel(word_vec[i])\
    \ {\n            for j in (i + 1)..word_vec.len() {\n                if is_vowel(word_vec[j])\
    \ {\n                    if j - i < distance {\n                        distance\
    \ = j - i;\n                        closest_vowel = word_vec[i].to_string();\n\
    \                    }\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    closest_vowel", "    let mut pos = word.len();\n\
    \    let mut found = String::new();\n    while pos > 0 {\n        let char = word.chars().nth(pos\
    \ - 1).unwrap();\n        if is_vowel(char) {\n            found = char.to_string();\n\
    \            break;\n        }\n        pos -= 1;\n    }\n    if pos > 0 {\n \
    \       let char = word.chars().nth(pos - 1).unwrap();\n        if !is_vowel(char)\
    \ {\n            found\n        } else {\n            String::new()\n        }\n\
    \    } else {\n        String::new()\n    }", "\tlet vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n\tlet mut vowel_indices = vec![];\n\tfor (i, c) in word.chars().enumerate()\
    \ {\n\t\tif vowels.contains(&c) {\n\t\t\tvowel_indices.push(i);\n\t\t}\n\t}\n\t\
    if vowel_indices.len() == 0 {\n\t\treturn String::from(\"\");\n\t}\n\tlet mut\
    \ min_dist = word.len();\n\tlet mut index = 0;\n\tfor i in vowel_indices {\n\t\
    \tif word.len() - i - 1 < min_dist {\n\t\t\tmin_dist = word.len() - i - 1;\n\t\
    \t\tindex = i;\n\t\t}\n\t}\n\tword.chars().nth(index).unwrap().to_string()", " \
    \   let mut vowel_indices = Vec::new();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if \"aeiou\".contains(c) {\n            vowel_indices.push(i);\n\
    \        }\n    }\n    let vowels_between_consonants = |i: usize| {\n        if\
    \ i == 0 || i == word.len() - 1 {\n            return false;\n        }\n    \
    \    let previous_char = word.chars().nth(i - 1).unwrap();\n        let next_char\
    \ = word.chars().nth(i + 1).unwrap();\n        !\"aeiou\".contains(previous_char)\
    \ && !\"aeiou\".contains(next_char)\n    };\n    let last_index = vowel_indices.iter().rev().find(|&&i|\
    \ vowels_between_consonants(i));\n    match last_index {\n        Some(x) => String::from(word.chars().nth(*x).unwrap().to_string()),\n\
    \        None => String::from(\"\"),\n    }", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let mut res = \"\".to_string();\n    let mut right_vowel_pos = -1;\n  \
    \  let mut left_consonant_pos = -1;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if vowels.contains(c) {\n            right_vowel_pos = i;\n     \
    \   } else if left_consonant_pos == -1 {\n            left_consonant_pos = i;\n\
    \        } else if left_consonant_pos != -1 && right_vowel_pos != -1 {\n     \
    \       res = word[right_vowel_pos..=right_vowel_pos].to_string();\n         \
    \   break;\n        }\n    }\n    res", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let mut char_iter = word.chars().rev();\n    if let Some(c)\
    \ = char_iter.next() {\n        if vowels.contains(&c.to_lowercase().to_string().as_str())\
    \ {\n            return \"\".to_string();\n        }\n    }\n    while let Some(c)\
    \ = char_iter.next() {\n        if vowels.contains(&c.to_lowercase().to_string().as_str())\
    \ {\n            break;\n        }\n        if let Some(c) = char_iter.next()\
    \ {\n            if vowels.contains(&c.to_lowercase().to_string().as_str()) {\n\
    \                return c.to_string();\n            }\n        }\n    }\n    \"\
    \".to_string()", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (idx, ch)\
    \ in word.chars().rev().enumerate() {\n        if vowels.contains(&ch) {\n   \
    \         if idx > 0 && !vowels.contains(&word.chars().rev().nth(idx - 1).unwrap())\
    \ {\n                return ch.to_string();\n            }\n        }\n    }\n\
    \    String::from(\"\")", "    // your code here\n    let mut consonants: Vec<char>\
    \ = vec![];\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowel_index:\
    \ i32 = -1;\n    let mut vowel_char: char = ' ';\n    let mut closest_vowel: char\
    \ = ' ';\n    let mut count: i32 = -1;\n    for character in word.chars() {\n\
    \        count += 1;\n        if vowels.contains(&character) {\n            vowel_index\
    \ = count;\n            vowel_char = character;\n        } else {\n          \
    \  consonants.push(character);\n        }\n    }\n    for character in consonants.iter().rev()\
    \ {\n        if vowels.contains(&character) {\n            closest_vowel = character.clone();\n\
    \            break;\n        }\n    }\n    if closest_vowel != ' ' {\n       \
    \ closest_vowel.to_string()\n    } else {\n        String::from(\"\")\n    }",
  "    // TODO: your code goes here\n    unimplemented!();", "    let mut vowel_list\
    \ = vec!['a', 'i', 'u', 'e', 'o'];\n    let mut counter = 0;\n    let mut flag\
    \ = false;\n    let mut result: String = String::new();\n    for c in word.chars().rev()\
    \ {\n        if c.is_alphabetic() && c.is_ascii_uppercase() {\n            let\
    \ c_low = c.to_ascii_lowercase();\n            if vowel_list.contains(&c_low)\
    \ {\n                if counter > 0 {\n                    flag = true;\n    \
    \                result.push(c);\n                    break;\n               \
    \ }\n            } else {\n                counter += 1;\n            }\n    \
    \    }\n    }\n    if flag {\n        result\n    } else {\n        String::from(\"\
    \")\n    }", "    // TODO\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   let mut closest_vowel = ' ';\n    let mut index = 0;\n    let mut found =\
    \ false;\n    for (i, c) in word.chars().rev().enumerate() {\n        if i ==\
    \ 0 && vowels.contains(&c) {\n            break;\n        }\n        if !vowels.contains(&c)\
    \ {\n            if vowels.contains(&word.chars().rev().nth(i-1).unwrap()) {\n\
    \                closest_vowel = word.chars().rev().nth(i-1).unwrap();\n     \
    \           index = i;\n                found = true;\n                break;\n\
    \            }\n        }\n    }\n    if !found {\n        return String::from(\"\
    \");\n    } else {\n        return String::from(closest_vowel.to_string() + &word[0..word.len()-index].to_string());\n\
    \    }", "    let mut i = word.len() - 1;\n    let vowels = \"aeiou\";\n    let\
    \ mut vowel_index = 0;\n    let mut consonant_count = 0;\n    let mut closest_vowel\
    \ = String::new();\n    loop {\n        if i >= 0 {\n            if vowels.contains(word.get(i..=i).unwrap())\
    \ {\n                vowel_index = i;\n                break;\n            }\n\
    \            consonant_count += 1;\n            i -= 1;\n        } else {\n  \
    \          break;\n        }\n    }\n    if consonant_count > 1 {\n        closest_vowel\
    \ = word.get(vowel_index..=vowel_index).unwrap().to_string();\n    }\n    closest_vowel",
  "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let chars: Vec<char> = word.chars().collect();\n\
    \    let chars_len = chars.len();\n    for i in (0..chars_len).rev() {\n     \
    \   if chars[i].is_ascii_lowercase() && chars[i].is_ascii_alphabetic() {\n   \
    \         if i == 0 {\n                continue;\n            }\n            for\
    \ j in 0..5 {\n                if chars[i] == vowels[j] {\n                  \
    \  return chars[i].to_string();\n                }\n            }\n        }\n\
    \    }\n    String::from(\"\")", "    let vowels = String::from(\"aeiouAEIOU\"\
    );\n    let mut closest_vowel = String::from(\"\");\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(c) {\n            if i == 0 {\n              \
    \  break;\n            }\n            if !vowels.contains(word.chars().rev().nth(i-1).unwrap())\
    \ {\n                closest_vowel = c.to_string();\n                break;\n\
    \            }\n        }\n    }\n    closest_vowel", "    let mut prev_char:\
    \ char = ' ';\n    let mut prev_prev_char: char = ' ';\n    let mut first_letter:\
    \ bool = true;\n    let mut last_letter: bool = false;\n    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut vowel_letter: char = ' ';\n    let mut last_consonant:\
    \ char = ' ';\n    let mut last_consonant_letter: char = ' ';\n    let mut ret:\
    \ String = String::from(\"\");\n    let mut start_vowel_index: usize = 0;\n  \
    \  let mut end_vowel_index: usize = 0;\n    let mut start_consonant_index: usize\
    \ = 0;\n    let mut end_consonant_index: usize = 0;\n    let mut curr_index: usize\
    \ = 0;\n    for ch in word.chars() {\n        if first_letter {\n            if\
    \ vowels.contains(&ch) {\n                start_vowel_index = curr_index;\n  \
    \          } else {\n                start_consonant_index = curr_index;\n   \
    \         }\n            first_letter = false;\n        }\n        if vowels.contains(&ch)\
    \ {\n            end_vowel_index = curr_index;\n            vowel_letter = ch;\n\
    \        } else {\n            last_consonant = ch;\n            end_consonant_index\
    \ = curr_index;\n        }\n        if end_vowel_index > start_consonant_index\
    \ {\n            break;\n        }\n        prev_prev_char = prev_char;\n    \
    \    prev_char = ch;\n        curr_index += 1;\n    }\n    if end_vowel_index\
    \ > start_consonant_index {\n        if end_vowel_index == word.len() - 1 {\n\
    \            last_letter = true;\n        }\n        if start_vowel_index == 0\
    \ {\n            last_consonant_letter = prev_char;\n        } else {\n      \
    \      last_consonant_letter = prev", "    let mut found_vowel: String = String::from(\"\
    \");\n    let mut prev_letter: String = String::from(\"\");\n    let mut current_letter:\
    \ String = String::from(\"\");\n    let mut is_consonant: bool = false;\n    let\
    \ letters: Vec<char> = word.chars().collect();\n    let len: usize = letters.len();\n\
    \    let mut n: usize = len - 1;\n    while n > 0 {\n        current_letter =\
    \ letters[n].to_string();\n        if is_vowel(&current_letter) {\n          \
    \  if is_consonant {\n                if is_vowel(&prev_letter) {\n          \
    \          break;\n                }\n                found_vowel = current_letter.clone();\n\
    \                break;\n            }\n        } else {\n            is_consonant\
    \ = true;\n        }\n        prev_letter = current_letter.clone();\n        n\
    \ -= 1;\n    }\n    found_vowel", "    // TODO\n    let mut vowel = String::from(\"\
    \");\n    let mut vowel_pos = 0;\n    let mut vowel_dist = 0;\n    let mut pos\
    \ = 0;\n    let mut consonant_count = 0;\n    for c in word.chars() {\n      \
    \  if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n           \
    \ if consonant_count == 1 {\n                vowel = c.to_string();\n        \
    \        vowel_pos = pos;\n                vowel_dist = word.len() - pos;\n  \
    \          }\n            consonant_count = 0;\n        } else {\n           \
    \ consonant_count += 1;\n        }\n        pos += 1;\n    }\n    pos = 0;\n \
    \   consonant_count = 0;\n    for c in word.chars().rev() {\n        if c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if consonant_count\
    \ == 1 {\n                if pos <= vowel_dist {\n                    vowel =\
    \ c.to_string();\n                    vowel_pos = word.len() - pos;\n        \
    \            vowel_dist = pos;\n                }\n            }\n           \
    \ consonant_count = 0;\n        } else {\n            consonant_count += 1;\n\
    \        }\n        pos += 1;\n    }\n    vowel", '    unimplemented!()', "  \
    \  let mut index = None;\n    let mut len = 0;\n    let vowels = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let chars: Vec<char> = word.chars().collect();\n\
    \    let reversed: Vec<char> = chars.iter().rev().collect();\n    let mut flag\
    \ = false;\n    for (i, c) in reversed.iter().enumerate() {\n        if vowels.contains(&c.to_string().as_str())\
    \ {\n            if flag {\n                if index.is_none() {\n           \
    \         index = Some(len);\n                } else if len < index.unwrap() {\n\
    \                    index = Some(len);\n                }\n            }\n  \
    \          flag = false;\n        } else {\n            if !flag {\n         \
    \       flag = true;\n                len = i;\n            }\n        }\n   \
    \ }\n    if index.is_none() {\n        String::from(\"\")\n    } else {\n    \
    \    String::from(&reversed[index.unwrap()].to_string())\n    }", "    let mut\
    \ result = String::new();\n    let vowels = \"aeiou\";\n    let mut prev_is_consonant\
    \ = false;\n    for c in word.chars().rev() {\n        if !vowels.contains(c)\
    \ {\n            prev_is_consonant = true;\n        } else if prev_is_consonant\
    \ {\n            result.push(c);\n            break;\n        }\n    }\n    result",
  "    let vowels = \"aeiou\";\n    let mut previous_is_vowel = false;\n    let mut\
    \ closest_vowel = None;\n    let mut closest_distance = word.len();\n    for (i,\
    \ c) in word.chars().enumerate().rev() {\n        let is_vowel = vowels.contains(c);\n\
    \        if is_vowel && !previous_is_vowel {\n            let distance = word.len()\
    \ - i - 1;\n            if distance < closest_distance {\n                closest_vowel\
    \ = Some(c);\n                closest_distance = distance;\n            }\n  \
    \      }\n        previous_is_vowel = is_vowel;\n    }\n    closest_vowel.map(|v|\
    \ v.to_string()).unwrap_or_default()", "    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let mut vowels: Vec<usize> = Vec::new();\n    let mut output = \"\".to_string();\n\
    \    for (index, letter) in word.char_indices() {\n        if !consonants.contains(letter)\
    \ {\n            vowels.push(index);\n        }\n    }\n    if vowels.len() >\
    \ 1 {\n        let mut diffs: Vec<usize> = Vec::new();\n        for i in 0..vowels.len()\
    \ - 1 {\n            diffs.push(vowels[i + 1] - vowels[i]);\n        }\n     \
    \   let min_diff = diffs.iter().min().unwrap();\n        for i in 0..diffs.len()\
    \ {\n            if diffs[i] == *min_diff {\n                output = word[vowels[i\
    \ + 1]..vowels[i + 1] + 1].to_string();\n            }\n        }\n    }\n   \
    \ output", '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  "    word.chars().rev().skip_while(|&c| c.is_ascii_lowercase() && c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u').skip(1).take_while(|&c| c.is_ascii_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').take(1).collect()",
  "    let mut result = String::new();\n    let mut vowel_indices = Vec::new();\n\
    \    let mut vowel_distance: usize = word.len();\n    for (index, letter) in word.chars().enumerate()\
    \ {\n        if is_vowel(letter) {\n            if vowel_indices.len() == 0 {\n\
    \                vowel_indices.push(index);\n            } else {\n          \
    \      let last_vowel_index = vowel_indices[vowel_indices.len() - 1];\n      \
    \          if last_vowel_index < index {\n                    vowel_indices.push(index);\n\
    \                }\n            }\n        }\n    }\n    if vowel_indices.len()\
    \ > 0 {\n        let mut next_vowel_index = word.len();\n        for index in\
    \ (0..word.len()).rev() {\n            if !is_vowel(word.chars().nth(index).unwrap())\
    \ {\n                let next_vowel_candidate = vowel_indices\n              \
    \      .iter()\n                    .rev()\n                    .find(|&&x| x\
    \ < index);\n                if next_vowel_candidate.is_some() {\n           \
    \         next_vowel_index = *next_vowel_candidate.unwrap();\n               \
    \     if index - next_vowel_index < vowel_distance {\n                       \
    \ vowel_distance = index - next_vowel_index;\n                        result =\
    \ word.chars().nth(next_vowel_index).unwrap().to_string();\n                 \
    \   }\n                }\n            }\n        }\n    }\n    result", "    //\
    \ TODO: Implement get_closest_vowel here.\n    unimplemented!()", "    let mut\
    \ ret = String::new();\n    let mut next_consonant = false;\n    for c in word.chars().rev()\
    \ {\n        if next_consonant {\n            if c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' {\n                ret.push(c);\n              \
    \  break;\n            }\n        } else {\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                next_consonant = true;\n\
    \            }\n        }\n    }\n    ret", "    let vowels = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    let mut consonants = vec![];\n    let mut current_vowel: Option<char>\
    \ = None;\n    let mut current_index = word.len()-1;\n    let mut last_vowel_index\
    \ = 0;\n    let mut last_consonant_index = 0;\n    for c in word.chars().rev()\
    \ {\n        if vowels.contains(&c) {\n            if current_vowel.is_none()\
    \ {\n                current_vowel = Some(c);\n                last_vowel_index\
    \ = current_index;\n            }\n        } else {\n            if current_vowel.is_some()\
    \ {\n                last_consonant_index = current_index;\n                consonants.push((last_vowel_index,\
    \ last_consonant_index));\n                current_vowel = None;\n           \
    \ }\n        }\n        current_index -= 1;\n    }\n    if consonants.len() ==\
    \ 0 {\n        return String::from(\"\");\n    }\n    let mut last_consonant_index\
    \ = 0;\n    let mut closest_vowel_index = 0;\n    for (vowel_index, consonant_index)\
    \ in consonants {\n        if consonant_index > last_consonant_index {\n     \
    \       last_consonant_index = consonant_index;\n            closest_vowel_index\
    \ = vowel_index;\n        }\n    }\n    let closest_vowel = word.chars().nth(closest_vowel_index).unwrap();\n\
    \    String::from(closest_vowel.to_string())", "    let mut res = String::new();\n\
    \    let mut it = word.chars().rev();\n    let mut vowel_found = false;\n    loop\
    \ {\n        match it.next() {\n            Some(v) => {\n                match\
    \ v {\n                    'a' | 'e' | 'i' | 'o' | 'u' => {\n                \
    \        if vowel_found {\n                            res.push(v);\n        \
    \                    break;\n                        }\n                    }\n\
    \                    _ => {\n                        if vowel_found {\n      \
    \                      break;\n                        }\n                   \
    \     vowel_found = true;\n                    }\n                }\n        \
    \    }\n            None => break,\n        }\n    }\n    res.chars().rev().collect()",
  '    unimplemented!()', "    // Write your code here!\n    let mut vowels: Vec<char>\
    \ = Vec::new();\n    let char_vec: Vec<char> = word.chars().collect();\n    let\
    \ mut cur_consonant = false;\n    let mut check_vowel = false;\n    for i in 0..char_vec.len()\
    \ {\n        if is_vowel(char_vec[i]) {\n            if check_vowel && cur_consonant\
    \ {\n                break;\n            }\n            vowels.push(char_vec[i]);\n\
    \            check_vowel = true;\n        } else {\n            cur_consonant\
    \ = true;\n        }\n    }\n    if vowels.len() == 0 {\n        return String::from(\"\
    \");\n    }\n    vowels.reverse();\n    vowels.into_iter().collect()", "    let\
    \ vowels = \"aeiouAEIOU\";\n    let mut prev = ' ';\n    let mut current = ' ';\n\
    \    let mut result = ' ';\n    for ch in word.chars().rev() {\n        if ch.is_alphabetic()\
    \ {\n            prev = current;\n            current = ch;\n            if prev.is_alphabetic()\
    \ && vowels.contains(current) {\n                result = current;\n         \
    \       break;\n            }\n        }\n    }\n    if result == ' ' {\n    \
    \    String::from(\"\")\n    } else {\n        String::from(result)\n    }", '    unimplemented!()',
  "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let word = word.chars().rev().enumerate().filter(|(_,\
    \ v)| !vowels.contains(v));\n    let mut result = String::new();\n    let mut\
    \ index = None;\n    for (_, v) in word {\n        if index.is_some() {\n    \
    \        if vowels.contains(&v) {\n                result.push(v);\n         \
    \       break;\n            }\n        } else {\n            index = Some(v);\n\
    \        }\n    }\n    result", '    unimplemented!();', '    unimplemented!()',
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut candidate =\
    \ String::from(\"\");\n    let mut flag = false;\n    for (i, _) in word.char_indices().rev()\
    \ {\n        let current_letter = word.get(i..i + 1).unwrap();\n        if current_letter.to_lowercase()\
    \ == current_letter {\n            if vowels.contains(&current_letter) {\n   \
    \             candidate = current_letter.to_string();\n                flag =\
    \ true;\n            } else {\n                if flag {\n                   \
    \ return candidate;\n                }\n            }\n        }\n    }\n    return\
    \ String::from(\"\");", "    let vowels = \"aeiou\";\n    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut vowel_idx = None;\n    for (idx, c) in word.iter().enumerate() {\n\
    \        if vowels.contains(*c) {\n            vowel_idx = Some(idx);\n      \
    \      break;\n        }\n    }\n    if vowel_idx.is_none() {\n        return\
    \ String::from(\"\");\n    }\n    for c in word.iter().skip(vowel_idx.unwrap()\
    \ + 1) {\n        if vowels.contains(*c) {\n            return String::from(\"\
    \");\n        }\n    }\n    word[vowel_idx.unwrap()].to_string()", "    let consonants\
    \ = String::from(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\");\n    let mut\
    \ idx = 0;\n    let mut prev_idx = 0;\n    let mut result = String::from(\"\"\
    );\n    let mut start = false;\n    for c in word.chars() {\n        if consonants.contains(c)\
    \ {\n            if start {\n                idx = prev_idx;\n               \
    \ break;\n            }\n        } else {\n            if !start {\n         \
    \       start = true;\n            }\n            prev_idx = idx;\n        }\n\
    \        idx += 1;\n    }\n    if idx != 0 {\n        result.push(word.chars().nth(idx).unwrap());\n\
    \    }\n    result", "    let vowels = \"aeiouAEIOU\";\n    let word_chars: Vec<char>\
    \ = word.chars().collect();\n    for (i, c) in word_chars.iter().enumerate().rev()\
    \ {\n        if vowels.contains(*c) {\n            if i != 0 && i != word_chars.len()\
    \ - 1 {\n                if !vowels.contains(word_chars[i - 1]) && !vowels.contains(word_chars[i\
    \ + 1]) {\n                    return c.to_string();\n                }\n    \
    \        }\n        }\n    }\n    \"\".to_string()", "    let v = \"aeiouAEIOU\"\
    ;\n    let c = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let mut res\
    \ = String::new();\n    let mut last_vowel_index = word.len();\n    for (index,\
    \ ch) in word.chars().enumerate() {\n        if v.contains(ch) {\n           \
    \ if index > last_vowel_index {\n                return String::new();\n     \
    \       }\n            last_vowel_index = index;\n        } else if c.contains(ch)\
    \ {\n            if last_vowel_index < index {\n                let ch_ = word.chars().nth(last_vowel_index).unwrap();\n\
    \                res.push(ch_);\n                break;\n            }\n     \
    \   }\n    }\n    res", "\tlet word = word.chars().collect::<Vec<char>>();\n\t\
    let mut vowel = String::new();\n\tlet mut prev = ' ';\n\tlet mut cons = false;\n\
    \tfor c in word.iter().rev() {\n\t\tif is_vowel(c) {\n\t\t\tif cons {\n\t\t\t\t\
    vowel.push(*c);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tif is_vowel(&prev)\
    \ {\n\t\t\t\tcons = true;\n\t\t\t}\n\t\t}\n\t\tprev = *c;\n\t}\n\tvowel.chars().rev().collect::<String>()",
  '    unimplemented!()', "    let vowels = \"aeiouAEIOU\";\n    let consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    for (i, w) in word.char_indices().rev()\
    \ {\n        if vowels.contains(w) {\n            return String::from(w.to_string());\n\
    \        } else if consonants.contains(w) {\n            if i == 0 {\n       \
    \         return String::from(\"\");\n            }\n            continue;\n \
    \       }\n    }\n    String::from(\"\")", "    let mut current_distance = std::usize::MAX;\n\
    \    let mut result = String::new();\n    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut chars: Vec<char> = word.chars().collect();\n    let mut last_vowel_index\
    \ = None;\n    let mut last_consonant_index = None;\n    chars.reverse();\n  \
    \  for (index, char) in chars.iter().enumerate() {\n        if vowels.contains(char)\
    \ {\n            last_vowel_index = Some(index);\n            if let Some(consonant_index)\
    \ = last_consonant_index {\n                if index > consonant_index && index\
    \ - consonant_index < current_distance {\n                    current_distance\
    \ = index - consonant_index;\n                    result = char.to_string();\n\
    \                }\n            }\n        } else {\n            last_consonant_index\
    \ = Some(index);\n        }\n    }\n    result", '    "".to_string()', "    let\
    \ mut count = 1;\n    let w = word.chars().rev().collect::<Vec<char>>();\n   \
    \ let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut found_vowel = false;\n\
    \    let mut found_consonant = false;\n    let mut result = String::new();\n \
    \   for c in w {\n        if c.is_ascii_lowercase() {\n            if vowels.contains(&c)\
    \ {\n                if found_consonant {\n                    result = format!(\"\
    {}\", c);\n                    break;\n                }\n                found_vowel\
    \ = true;\n            } else {\n                if found_vowel {\n          \
    \          found_consonant = true;\n                }\n            }\n       \
    \ } else {\n            if vowels.contains(&c.to_ascii_lowercase()) {\n      \
    \          if found_consonant {\n                    result = format!(\"{}\",\
    \ c);\n                    break;\n                }\n                found_vowel\
    \ = true;\n            } else {\n                if found_vowel {\n          \
    \          found_consonant = true;\n                }\n            }\n       \
    \ }\n        count += 1;\n    }\n    result", "    let vowels = \"aeiou\";\n \
    \   let mut word_right = word.chars().rev();\n    let mut idx = 0;\n    let mut\
    \ word_chars: Vec<char> = word.chars().collect();\n    let mut closest_idx = word_chars.len();\n\
    \    for (i, c) in word_chars.iter().enumerate() {\n        if !vowels.contains(*c)\
    \ {\n            idx = i;\n            break;\n        }\n    }\n    for c in\
    \ word_right {\n        if vowels.contains(c) {\n            closest_idx = idx;\n\
    \            break;\n        }\n        idx += 1;\n    }\n    if closest_idx ==\
    \ word_chars.len() {\n        String::from(\"\")\n    } else {\n        String::from(word_chars[closest_idx].to_string())\n\
    \    }", "    let mut last_cons = None;\n    let mut closest_vowel = None;\n \
    \   let vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if let Some(lc) = last_cons {\n            if vowels.contains(&c.to_string().as_str())\
    \ {\n                closest_vowel = Some((i, c));\n                break;\n \
    \           }\n        } else if !vowels.contains(&c.to_string().as_str()) {\n\
    \            last_cons = Some(c);\n        }\n    }\n    if let Some((i, c)) =\
    \ closest_vowel {\n        let out: String = word.chars().rev().skip(i).take(1).collect();\n\
    \        out\n    } else {\n        String::from(\"\")\n    }", "    let mut result\
    \ = String::new();\n    let mut last_consonant = String::new();\n    let mut last_vowel\
    \ = String::new();\n    let mut is_found = false;\n    for c in word.chars() {\n\
    \        if String::from(\"aeiouAEIOU\").contains(c) {\n            if !last_consonant.is_empty()\
    \ {\n                is_found = true;\n                result = last_vowel;\n\
    \                break;\n            }\n            last_vowel = c.to_string();\n\
    \        } else {\n            last_consonant = c.to_string();\n        }\n  \
    \  }\n    if !is_found {\n        result = String::new();\n    }\n    result",
  "    // TODO\n    \"\".to_string()", '    unimplemented!()', "    // TODO: Implement\
    \ this function\n    return String::from(\"\");", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    let mut answer = String::new();\n    let mut counter = 0;\n    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    while !word.is_empty() {\n        if !vowels.contains(&word[0])\
    \ {\n            counter += 1;\n        } else {\n            if counter > 1 {\n\
    \                answer.push(word[0]);\n                break;\n            }\n\
    \        }\n        word.remove(0);\n    }\n    answer", "    let mut temp = word.chars().rev().skip_while(|x|\
    \ !is_vowel(*x));\n    temp.find(|x| !is_vowel(*x)).map(|x| x.to_string()).unwrap_or(String::from(\"\
    \"))", "    let vowels = String::from(\"AEIOUaeiou\");\n    let word_chars: Vec<char>\
    \ = word.chars().collect();\n    let word_len = word_chars.len();\n    let mut\
    \ idx = word_len - 1;\n    loop {\n        if idx <= 0 {\n            return String::from(\"\
    \");\n        }\n        let left_char = word_chars[idx - 1];\n        let right_char\
    \ = word_chars[idx];\n        if vowels.contains(left_char) || vowels.contains(right_char)\
    \ {\n            idx -= 1;\n            continue;\n        }\n        break;\n\
    \    }\n    let mut vowel_idx = 0;\n    for (i, vowel) in vowels.chars().enumerate()\
    \ {\n        if word_chars.contains(&vowel) {\n            vowel_idx = i;\n  \
    \          break;\n        }\n    }\n    if vowel_idx > 5 {\n        return String::from(\"\
    \");\n    }\n    for i in (0..idx).rev() {\n        if vowels.contains(word_chars[i])\
    \ {\n            return vowels[vowel_idx..(vowel_idx + 1)].to_string();\n    \
    \    }\n    }\n    vowels[vowel_idx..(vowel_idx + 1)].to_string()", '    unimplemented!()',
  '    unimplemented!();', "    let mut current_len = -1;\n    let mut current_vowel\
    \ = String::new();\n    for (i, ch) in word.chars().rev().enumerate() {\n    \
    \    if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n    \
    \        if current_len == -1 {\n                current_len = i;\n          \
    \      current_vowel = ch.to_string();\n            } else {\n               \
    \ break;\n            }\n        } else {\n            if current_len != -1 {\n\
    \                current_len = -1;\n                current_vowel = String::new();\n\
    \            }\n        }\n    }\n    current_vowel", "    let mut word = word.chars().rev().peekable();\n\
    \    let vowels = \"AEIOUaeiou\";\n    let mut flag = false;\n    let mut result\
    \ = String::new();\n    loop {\n        match word.next() {\n            Some(c)\
    \ => {\n                if !vowels.contains(c) {\n                    flag = true;\n\
    \                } else if flag && vowels.contains(c) {\n                    result.push(c);\n\
    \                    break;\n                }\n            }\n            None\
    \ => break,\n        }\n    }\n    result", '    word.char_indices().rev().skip_while(|&(_,
    c)| !is_vowel(c)).skip(1).take_while(|&(_, c)| !is_vowel(c)).last().map(|(i, _)|
    word[i..i+1].to_string()).unwrap_or("".to_string())', "    let chars: Vec<char>\
    \ = word.chars().collect();\n    let mut found = \"\".to_string();\n    for i\
    \ in 1..chars.len() {\n        let first = &chars[i - 1];\n        let second\
    \ = &chars[i];\n        if first.is_ascii_alphabetic() && second.is_ascii_alphabetic()\
    \ {\n            if is_vowel(first) {\n                if is_vowel(second) {\n\
    \                    found = second.to_string();\n                    break;\n\
    \                }\n            } else if is_vowel(second) {\n               \
    \ found = second.to_string();\n                break;\n            }\n       \
    \ }\n    }\n    found", '    unimplemented!()', "    let regex = Regex::new(r\"\
    [^aeiou]\").unwrap();\n    let mut positions = regex.find_iter(&word).collect::<Vec<_>>();\n\
    \    positions.reverse();\n    let mut current_end_pos = word.len();\n    let\
    \ mut pos_to_return: Option<usize> = None;\n    for pos in positions {\n     \
    \   let start_pos = pos.start();\n        let mut found = false;\n        for\
    \ character in word[start_pos..current_end_pos].chars() {\n            if character.is_alphabetic()\
    \ && character.is_ascii_lowercase() &&\n                character.is_alphabetic()\
    \ && character.is_ascii_uppercase() {\n                pos_to_return = Some(start_pos);\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if found {\n            break;\n        }\n        current_end_pos\
    \ = start_pos;\n    }\n    if let Some(pos) = pos_to_return {\n        return\
    \ String::from(&word[pos..current_end_pos]);\n    }\n    String::from(\"\")",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    for (i, ch) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&ch) {\n            if i >= word.len() - 1 {\n\
    \                return String::from(\"\");\n            }\n            if let\
    \ Some(ch_) = word.chars().nth(word.len() - i - 2) {\n                if !vowels.contains(&ch_)\
    \ {\n                    return ch.to_string();\n                }\n         \
    \   }\n        }\n    }\n    String::from(\"\")", "    let mut consonants = vec![];\n\
    \    let mut vowels = vec![];\n    let mut result = String::new();\n    for (index,\
    \ letter) in word.chars().enumerate() {\n        match letter {\n            'a'\
    \ | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => {\n               \
    \ vowels.push(index);\n            }\n            _ => {\n                consonants.push(index);\n\
    \            }\n        }\n    }\n    if consonants.len() == 0 || vowels.len()\
    \ == 0 {\n        return result;\n    }\n    let mut index_min_difference = vowels[0];\n\
    \    let mut min_difference = consonants[consonants.len() - 1] - vowels[0];\n\
    \    for vow in vowels {\n        for cons in &consonants {\n            if vow\
    \ > *cons {\n                if vow - *cons < min_difference {\n             \
    \       min_difference = vow - *cons;\n                    index_min_difference\
    \ = vow;\n                }\n                break;\n            }\n        }\n\
    \    }\n    for (index, letter) in word.chars().enumerate() {\n        if index\
    \ == index_min_difference {\n            result.push(letter);\n            break;\n\
    \        }\n    }\n    result", "    for i in 0..word.len() {\n        let (left,\
    \ right) = word.split_at(i);\n        let right = &right[1..];\n        if (left.ends_with(|c:\
    \ char| c.is_alphabetic()) && left.chars().last().unwrap().is_ascii_lowercase())\n\
    \            && (right.starts_with(|c: char| c.is_alphabetic()) && right.chars().next().unwrap().is_ascii_uppercase())\n\
    \            && word.chars().nth(i).unwrap().is_ascii_lowercase()\n        {\n\
    \            return word.chars().nth(i).unwrap().to_string();\n        }\n   \
    \ }\n    \"\".to_string()", '    word.chars().rev().skip_while(|&c| c.is_consonant()).skip(1).take_while(|&c|
    c.is_consonant()).skip_while(|&c| c.is_consonant()).find(|&c| c.is_vowel()).map(|c|
    c.to_string()).unwrap_or(String::from(""))', "    let word_bytes = word.as_bytes();\n\
    \    let mut i = word_bytes.len() - 1;\n    loop {\n        if i == 0 {\n    \
    \        return String::from(\"\");\n        }\n        let c = word_bytes[i]\
    \ as char;\n        if !is_vowel(c) {\n            break;\n        }\n       \
    \ i -= 1;\n    }\n    while i > 0 {\n        let c = word_bytes[i] as char;\n\
    \        if is_vowel(c) {\n            return c.to_string();\n        }\n    \
    \    i -= 1;\n    }\n    String::from(\"\")", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut vowel_distance = 1001;\n    let mut vowel = ' ';\n\
    \    let char_list: Vec<char> = word.chars().collect();\n    for (i, char) in\
    \ char_list.iter().enumerate() {\n        if vowels.contains(char) {\n       \
    \     let distance = char_list.len() - i;\n            if distance < vowel_distance\
    \ {\n                vowel_distance = distance;\n                vowel = *char;\n\
    \            }\n        }\n    }\n    return vowel.to_string();", "    let chars:\
    \ Vec<char> = word.chars().collect();\n    let mut idx = chars.len() - 1;\n  \
    \  while idx > 0 {\n        if is_vowel(chars[idx]) {\n            if !is_vowel(chars[idx\
    \ - 1]) {\n                return chars[idx].to_string();\n            }\n   \
    \     }\n        idx -= 1;\n    }\n    String::from(\"\")", "    let mut result\
    \ = String::new();\n    let vowels = String::from(\"aeiouAEIOU\");\n    let chars\
    \ = word.chars().collect::<Vec<char>>();\n    let mut last_consonant = None;\n\
    \    for c in chars.iter().rev() {\n        if last_consonant.is_none() && vowels.contains(*c)\
    \ {\n            last_consonant = Some(*c);\n        } else if last_consonant.is_some()\
    \ && !vowels.contains(*c) {\n            result.push(last_consonant.unwrap());\n\
    \            break;\n        }\n    }\n    result", "    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let c = word.chars().rev().skip_while(|c| !vowels.contains(c)).peekable();\n\
    \    if c.len() <= 1 {\n        return String::from(\"\");\n    }\n    for (i,\
    \ ch) in c.enumerate() {\n        if i == 0 {\n            continue;\n       \
    \ }\n        if c.peek().unwrap() == &ch {\n            return String::from(\"\
    \");\n        }\n        return ch.to_string();\n    }\n    String::from(\"\")",
  '    unimplemented!()', "    // TODO\n    let mut ret = String::new();\n    let\
    \ v = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut counter = 0;\n    let mut flag\
    \ = false;\n    for (i, x) in word.chars().rev().enumerate() {\n        if v.contains(&x)\
    \ {\n            ret = x.to_string();\n            counter = i;\n            flag\
    \ = true;\n            break;\n        }\n    }\n    if !flag {\n        return\
    \ String::from(\"\");\n    }\n    for (i, x) in word.chars().rev().enumerate()\
    \ {\n        if i > counter && !v.contains(&x) {\n            return ret;\n  \
    \      }\n    }\n    String::from(\"\")", "    let chars: Vec<char> = word.chars().collect();\n\
    \    let mut vowels: Vec<char> = Vec::new();\n    let mut last_consonant: char\
    \ = '\\0';\n    let mut result: String = String::new();\n    for i in 0..chars.len()\
    \ {\n        let c = chars[i];\n        if c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' {\n            vowels.push(c);\n        } else {\n    \
    \        if last_consonant != '\\0' {\n                result = vowels.pop().unwrap().to_string();\n\
    \                break;\n            }\n            last_consonant = c;\n    \
    \    }\n    }\n    result", "    if word.is_empty() {\n        return String::from(\"\
    \");\n    }\n    let mut prev_was_consonant = false;\n    let mut closest_vowel\
    \ = String::from(\"\");\n    for c in word.chars().rev() {\n        if is_vowel(c)\
    \ {\n            if prev_was_consonant {\n                closest_vowel = c.to_string();\n\
    \                break;\n            }\n        } else {\n            prev_was_consonant\
    \ = true;\n        }\n    }\n    closest_vowel", '    unimplemented!()', "   \
    \ // TODO\n    \"\".to_string()", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let chars: Vec<char> = word.chars().collect();\n    let mut result = String::new();\n\
    \    let mut left = 0;\n    let mut right = chars.len() - 1;\n    while left <\
    \ right {\n        if left == 0 && !vowels.contains(&chars[left]) {\n        \
    \    left += 1;\n        } else if right == 0 && !vowels.contains(&chars[right])\
    \ {\n            right -= 1;\n        } else if !vowels.contains(&chars[left])\
    \ && vowels.contains(&chars[right]) {\n            result.push(chars[right]);\n\
    \            left += 1;\n            right -= 1;\n        } else if vowels.contains(&chars[left])\
    \ && !vowels.contains(&chars[right]) {\n            result.push(chars[left]);\n\
    \            left += 1;\n            right -= 1;\n        } else {\n         \
    \   left += 1;\n            right -= 1;\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut last_vowel_index = word.len();\n  \
    \  for (i, c) in word.chars().enumerate().rev() {\n        if c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' {\n            if i < last_vowel_index\
    \ - 1 {\n                result.push(c);\n                last_vowel_index = i;\n\
    \            }\n        }\n    }\n    result", "    let vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut idx = word.len() - 1;\n    while idx >= 0 {\n \
    \       if vowels.contains(&word.chars().nth(idx).unwrap()) {\n            if\
    \ idx == 0 {\n                break;\n            }\n            if !vowels.contains(&word.chars().nth(idx\
    \ - 1).unwrap()) {\n                return word.chars().nth(idx).unwrap().to_string();\n\
    \            }\n        }\n        idx -= 1;\n    }\n    String::from(\"\")",
  "    let mut result = String::new();\n    let word = word.chars().collect::<Vec<char>>();\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for index in 0..word.len() {\n\
    \        let curr = word[index];\n        if vowels.contains(&curr) {\n      \
    \      if index == 0 || index == word.len() - 1 {\n                continue;\n\
    \            }\n            let prev = word[index - 1];\n            let next\
    \ = word[index + 1];\n            if !vowels.contains(&prev) && !vowels.contains(&next)\
    \ {\n                result.push(curr);\n                break;\n            }\n\
    \        }\n    }\n    result", '    unimplemented!();', '    unimplemented!()',
  "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut res = String::new();\n\
    \    let mut prev_consonant = false;\n    for c in word.chars().rev() {\n    \
    \    if vowels.contains(&c) {\n            if prev_consonant {\n             \
    \   res.push(c);\n                break;\n            }\n        } else {\n  \
    \          prev_consonant = true;\n        }\n    }\n    res", "    let vowels\
    \ = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut prev_char = ' ';\n    let mut\
    \ is_prev_vowel = false;\n    let mut idx = 0;\n    for i in (0..word.len()).rev()\
    \ {\n        let current_char = word.chars().nth(i).unwrap();\n        if vowels.contains(&current_char)\
    \ {\n            if !is_prev_vowel && prev_char != ' ' {\n                idx\
    \ = i;\n                break;\n            }\n            is_prev_vowel = true;\n\
    \        } else {\n            is_prev_vowel = false;\n        }\n        prev_char\
    \ = current_char;\n    }\n    if idx == 0 {\n        return String::from(\"\"\
    );\n    }\n    String::from(word.chars().nth(idx).unwrap().to_string())", "  \
    \  let (mut prev_c, mut prev_v, mut curr_c, mut curr_v) = (false, false, false,\
    \ false);\n    let mut ans = String::new();\n    for ch in word.chars().rev()\
    \ {\n        curr_c = ch.is_ascii_lowercase() && ch != 'a' && ch != 'e' && ch\
    \ != 'i' && ch != 'o' && ch != 'u';\n        curr_v = ch.is_ascii_lowercase()\
    \ && (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');\n      \
    \  if prev_c && curr_v {\n            ans = ch.to_string();\n            break;\n\
    \        }\n        prev_c = curr_c;\n        prev_v = curr_v;\n    }\n    ans",
  '    unimplemented!();', "    let mut result = String::new();\n    let mut last_consonant\
    \ = false;\n    let mut last_vowel = false;\n    for c in word.chars().rev() {\n\
    \        if !is_vowel(c) {\n            last_consonant = true;\n        } else\
    \ if last_consonant {\n            last_vowel = true;\n            result.push(c);\n\
    \            break;\n        }\n    }\n    if last_vowel {\n        result\n \
    \   } else {\n        String::new()\n    }", "    let vowels = \"aeiou\";\n  \
    \  for ch in word.chars().rev() {\n        if !vowels.contains(ch) {\n       \
    \     for ch2 in word.chars().rev() {\n                if vowels.contains(ch2)\
    \ {\n                    return ch2.to_string();\n                }\n        \
    \    }\n        }\n    }\n    String::from(\"\")", "    let vowels = vec![\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    word.chars().rev().skip(1).enumerate().filter(|(i,\
    \ c)| {\n        vowels.contains(&c.to_string().as_str()) &&\n        !vowels.contains(&word.chars().rev().skip(1).enumerate().filter(|(i2,\
    \ c2)| {\n            i == i2 + 1\n        }).map(|(_, c)| c.to_string()).collect::<String>().as_str())\n\
    \    }).map(|(_, c)| c.to_string()).collect::<String>()", "    let word = word.chars().collect::<Vec<char>>();\n\
    \    let mut vowel_index = 0;\n    let mut char_index = word.len() - 1;\n    let\
    \ mut vowel_search = 0;\n    for c in word.iter().rev() {\n        if !c.is_alphabetic()\
    \ {\n            return String::from(\"\");\n        } else if c.is_ascii_lowercase()\
    \ &&\n            (*c == 'a' || *c == 'e' || *c == 'i' || *c == 'o' || *c == 'u')\
    \ {\n            vowel_search += 1;\n            if vowel_search == 2 {\n    \
    \            vowel_index = char_index;\n                break;\n            }\n\
    \        } else if c.is_ascii_uppercase() &&\n            (*c == 'A' || *c ==\
    \ 'E' || *c == 'I' || *c == 'O' || *c == 'U') {\n            vowel_search += 1;\n\
    \            if vowel_search == 2 {\n                vowel_index = char_index;\n\
    \                break;\n            }\n        }\n        char_index -= 1;\n\
    \    }\n    String::from(word[vowel_index..=vowel_index].iter().collect::<String>())",
  "    let mut ch = ' ';\n    let mut last_vowel = false;\n    let mut vowel_found\
    \ = false;\n    let mut vowel = String::new();\n    for c in word.chars().rev()\
    \ {\n        if !is_vowel(c) {\n            if last_vowel {\n                vowel_found\
    \ = true;\n                break;\n            }\n            ch = c;\n      \
    \  } else {\n            last_vowel = true;\n            vowel.push(c);\n    \
    \    }\n    }\n    if vowel_found {\n        vowel\n    } else {\n        String::new()\n\
    \    }", "    if word.is_empty() {\n        return String::from(\"\");\n    }\n\
    \    let mut the_vowel = String::from(\"\");\n    let mut the_index = 0;\n   \
    \ let mut vowel_index = 0;\n    let mut consonant_index = 0;\n    let vowels =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    let consonants = vec!['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'];\n    let chars: Vec<char> = word.chars().collect();\n    for (i, c) in\
    \ chars.iter().enumerate() {\n        for v in vowels.iter() {\n            if\
    \ v == c {\n                vowel_index = i;\n                if consonant_index\
    \ < vowel_index {\n                    the_vowel = String::from_utf8(vec![c.clone()\
    \ as u8]).unwrap();\n                    the_index = i;\n                }\n \
    \           }\n        }\n        for c in consonants.iter() {\n            if\
    \ c == c {\n                consonant_index = i;\n            }\n        }\n \
    \   }\n    return the_vowel;", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut is_con_found = false;\n    let mut is_vow_found = false;\n    let\
    \ mut vowel_idx = 0;\n    let mut is_word_finished = false;\n    let mut is_word_started\
    \ = false;\n    let mut last_vowel_idx = 0;\n    let mut first_vowel_idx = 0;\n\
    \    let mut con_idx = 0;\n    let mut new_word = word.chars().collect::<Vec<char>>();\n\
    \    let mut word_length = word.len();\n    let mut word_lowercase = String::new();\n\
    \    let mut con_idx_array = Vec::new();\n    let mut vowel_idx_array = Vec::new();\n\
    \    let mut first_vowel_idx_array = Vec::new();\n    let mut last_vowel_idx_array\
    \ = Vec::new();\n    let mut c = ' ';\n    let mut t = ' ';\n    for _ in 0..word_length\
    \ {\n        if is_word_finished == false {\n            let word_char = word.chars().nth(con_idx).unwrap();\n\
    \            c = word_char.to_lowercase().next().unwrap();\n            new_word[con_idx]\
    \ = c;\n            con_idx += 1;\n            if vowels.contains(&c) {\n    \
    \            if is_word_started == false {\n                    first_vowel_idx_array.push(con_idx);\n\
    \                    is_word_started = true;\n                }\n            \
    \    vowel_idx_array.push(con_idx);\n                last_vowel_idx_array.push(con_idx);\n\
    \            } else {\n                if is_word_started == true {\n        \
    \            con_idx_array.push(con_idx);\n                }\n            }\n\
    \            if con_idx == word_length {\n                is_word_finished = true;\n\
    \            }\n        }\n    }\n    for _ in 0..con_", "    let vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    let mut vowel_list = vec![];\n    let mut closest_vowel\
    \ = ' ';\n    let mut found = false;\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            vowel_list.push(i);\n     \
    \   }\n    }\n    for vowel in vowel_list {\n        if vowel == 0 {\n       \
    \     continue;\n        }\n        let left = word.chars().nth(vowel - 1).unwrap();\n\
    \        let right = word.chars().nth(vowel + 1).unwrap();\n        if !vowels.contains(&left)\
    \ && !vowels.contains(&right) {\n            closest_vowel = word.chars().nth(vowel).unwrap();\n\
    \            found = true;\n            break;\n        }\n    }\n    if found\
    \ {\n        closest_vowel.to_string()\n    } else {\n        String::from(\"\"\
    )\n    }", "    let word_chars: Vec<char> = word.chars().collect();\n    let mut\
    \ closest_vowel: String = String::from(\"\");\n    let mut consonant_met: bool\
    \ = false;\n    for c in word_chars.iter().rev() {\n        if *c == 'a' || *c\
    \ == 'e' || *c == 'i' || *c == 'o' || *c == 'u' {\n            if consonant_met\
    \ {\n                closest_vowel = c.to_string();\n                break;\n\
    \            }\n        } else {\n            consonant_met = true;\n        }\n\
    \    }\n    closest_vowel", "    let mut counter = 0;\n    let mut s_word = word.as_str();\n\
    \    while !is_vowel(&s_word.chars().nth(counter).unwrap().to_string()) {\n  \
    \      counter += 1;\n    }\n    let mut left = counter;\n    while is_vowel(&s_word.chars().nth(counter).unwrap().to_string())\
    \ {\n        counter += 1;\n    }\n    let mut right = counter;\n    let mut ret:\
    \ String = \"\".to_string();\n    if counter == word.len() {\n        return ret;\n\
    \    }\n    ret = s_word.chars().nth(left).unwrap().to_string();\n    if left\
    \ == 0 || right == word.len() {\n        return ret;\n    }\n    let diff = (left\
    \ - (word.len() - right)).abs();\n    if diff <= 1 {\n        return ret;\n  \
    \  }\n    if (word.len() - right) < left {\n        ret = s_word.chars().nth(right).unwrap().to_string();\n\
    \    }\n    ret", "    let vowels = \"AEIOUaeiou\";\n    let mut res = String::new();\n\
    \    let mut last_vowel = word.len();\n    let mut last_consonant = word.len();\n\
    \    for (i, c) in word.chars().enumerate() {\n        if i != 0 && vowels.contains(c)\
    \ {\n            last_vowel = i;\n        }\n        if !vowels.contains(c) {\n\
    \            last_consonant = i;\n        }\n        if last_vowel + 1 == last_consonant\
    \ {\n            res.push(c);\n            break;\n        }\n    }\n    res",
  '    unimplemented!()', "    let mut closest = String::new();\n    let mut closest_i\
    \ = 0;\n    let mut closest_j = 0;\n    let mut vowels = Vec::new();\n    for\
    \ vowel in word.matches(|c: char| c.is_vowel()) {\n        vowels.push(vowel);\n\
    \    }\n    for (i, vowel) in vowels.iter().enumerate() {\n        let left =\
    \ &word[..vowel.len()];\n        let right = &word[vowel.len()..];\n        if\
    \ left.matches(|c: char| c.is_ascii_uppercase() || c.is_ascii_lowercase()).count()\
    \ > 0 &&\n           right.matches(|c: char| c.is_ascii_uppercase() || c.is_ascii_lowercase()).count()\
    \ > 0 {\n            if closest_i == 0 && closest_j == 0 {\n                closest\
    \ = vowel.to_string();\n                closest_i = i;\n                closest_j\
    \ = vowel.len();\n            } else if closest_i < i && closest_j < vowel.len()\
    \ {\n                closest = vowel.to_string();\n                closest_i =\
    \ i;\n                closest_j = vowel.len();\n            }\n        }\n   \
    \ }\n    closest", "    let vowels = String::from(\"AEIOUaeiou\");\n    let mut\
    \ closest_vowel = String::from(\"\");\n    let mut first_consonant_position =\
    \ word.len();\n    let mut last_consonant_position = 0;\n    for (i, letter) in\
    \ word.chars().enumerate() {\n        if vowels.contains(letter) {\n         \
    \   if first_consonant_position == word.len() {\n                closest_vowel\
    \ = letter.to_string();\n            } else if i > last_consonant_position {\n\
    \                if first_consonant_position - i < i - last_consonant_position\
    \ {\n                    closest_vowel = letter.to_string();\n               \
    \ }\n            }\n        } else {\n            if first_consonant_position\
    \ == word.len() {\n                first_consonant_position = i;\n           \
    \ } else {\n                last_consonant_position = i;\n            }\n    \
    \    }\n    }\n    closest_vowel", "    let vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let mut found_vowel = false;\n    let mut count = word.len()\
    \ - 1;\n    for ch in word.chars().rev() {\n        if vowels.contains(&ch.to_string().as_str())\
    \ {\n            found_vowel = true;\n        } else if found_vowel {\n      \
    \      break;\n        }\n        count -= 1;\n    }\n    if count < word.len()\
    \ {\n        word.chars().skip(count).take(1).collect()\n    } else {\n      \
    \  String::from(\"\")\n    }", "    // Search for a pair of vowels\n    let mut\
    \ last_consonant_index = 0;\n    let mut last_consonant_consumed = false;\n  \
    \  let mut closest_vowel_index = 0;\n    let mut closest_vowel_distance = word.len();\n\
    \    for (index, c) in word.chars().enumerate() {\n        match c {\n       \
    \     'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => {\n       \
    \         if last_consonant_consumed {\n                    // a vowel is found,\
    \ the last consonant won't be the last one\n                    if closest_vowel_distance\
    \ > index - last_consonant_index {\n                        closest_vowel_distance\
    \ = index - last_consonant_index;\n                        closest_vowel_index\
    \ = index;\n                    }\n                }\n                last_consonant_consumed\
    \ = false;\n            }\n            _ => {\n                if !last_consonant_consumed\
    \ {\n                    last_consonant_index = index;\n                    last_consonant_consumed\
    \ = true;\n                }\n            }\n        }\n    }\n    // Nothing\
    \ found or the first consonant found is the last one\n    if closest_vowel_distance\
    \ >= word.len() {\n        String::from(\"\")\n    } else {\n        word.chars().skip(closest_vowel_index).take(1).collect()\n\
    \    }", "    let vowels = \"aeiou\";\n    let mut idx: usize = 0;\n    let mut\
    \ ret = String::new();\n    while idx < word.len() {\n        let idx_first =\
    \ word.len() - idx - 1;\n        if vowels.contains(word.chars().nth(idx_first).unwrap())\
    \ {\n            let idx_second = word.len() - idx - 2;\n            if idx_second\
    \ >= 0 && vowels.contains(word.chars().nth(idx_second).unwrap()) {\n         \
    \       ret = word.chars().nth(idx_first).unwrap().to_string();\n            \
    \    break;\n            }\n        }\n        idx += 1;\n    }\n    ret", " \
    \   let vowels = String::from(\"aeiouAEIOU\");\n    let cons = String::from(\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\");\n    let mut closest_vowel = String::from(\"\
    \");\n    let word = word.chars().collect::<Vec<char>>();\n    for (idx, ch) in\
    \ word.iter().enumerate() {\n        if vowels.contains(*ch) {\n            if\
    \ idx == 0 { continue; }\n            let pre_ch = word[idx - 1];\n          \
    \  if idx == word.len() - 1 {\n                if cons.contains(pre_ch) {\n  \
    \                  closest_vowel = ch.to_string();\n                    break;\n\
    \                }\n            } else {\n                let next_ch = word[idx\
    \ + 1];\n                if cons.contains(pre_ch) && cons.contains(next_ch) {\n\
    \                    closest_vowel = ch.to_string();\n                    break;\n\
    \                }\n            }\n        }\n    }\n    closest_vowel", "   \
    \ // your code goes here\n    \"\".to_string()", "    let mut res = String::new();\n\
    \    let mut start = false;\n    let mut in_vowel = false;\n    let mut closest_vowel\
    \ = ' ';\n    let mut closest_vowel_index = 0;\n    let mut index = 0;\n    for\
    \ c in word.chars() {\n        if in_vowel && !c.is_ascii_alphabetic() {\n   \
    \         in_vowel = false;\n        }\n        else if c.is_ascii_alphabetic()\
    \ && VOWELS.contains(c) {\n            if !start {\n                start = true;\n\
    \            }\n            in_vowel = true;\n            closest_vowel = c;\n\
    \            closest_vowel_index = index;\n        }\n        else if start &&\
    \ !in_vowel && closest_vowel != ' ' {\n            res.push(closest_vowel);\n\
    \            break;\n        }\n        index += 1;\n    }\n    res", "\tlet mut\
    \ iter = word.chars().rev();\n\tlet mut next_char;\n\tloop {\n\t\tmatch iter.next()\
    \ {\n\t\t\tSome(c) => {\n\t\t\t\tnext_char = c;\n\t\t\t\tif !is_vowel(c) {\n\t\
    \t\t\t\tmatch iter.next() {\n\t\t\t\t\t\tSome(d) => {\n\t\t\t\t\t\t\tif is_vowel(d)\
    \ {\n\t\t\t\t\t\t\t\treturn next_char.to_string();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\
    \t},\n\t\t\t\t\t\tNone => {\n\t\t\t\t\t\t\treturn String::from(\"\");\n\t\t\t\t\
    \t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tNone => {\n\t\t\t\treturn String::from(\"\
    \");\n\t\t\t}\n\t\t}\n\t}", '    unimplemented!()', "    let vowels = String::from(\"\
    AEIOU\");\n    let mut vowel_index = word.len();\n    let mut i = word.len() -\
    \ 1;\n    while i >= 0 {\n        if vowels.contains(word.chars().nth(i).unwrap())\
    \ {\n            if vowel_index == word.len() {\n                vowel_index =\
    \ i;\n            } else {\n                return String::from(word.chars().nth(vowel_index).unwrap().to_string());\n\
    \            }\n        } else {\n            vowel_index = word.len();\n    \
    \    }\n        i -= 1;\n    }\n    return String::from(\"\");", '    unimplemented!()',
  "    let mut vowels = String::new();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {\n            vowels.push(c);\n\
    \        }\n    }\n    if vowels.len() <= 1 {\n        String::from(\"\")\n  \
    \  } else {\n        vowels\n    }", "    let vowels = String::from(\"aeiouAEIOU\"\
    );\n    let chars = word.chars().collect::<Vec<char>>();\n    let mut result =\
    \ String::new();\n    for (i, ch) in chars.iter().enumerate() {\n        if vowels.contains(*ch)\
    \ {\n            if i > 0 && i < chars.len() - 1 {\n                let prev =\
    \ chars[i - 1];\n                let next = chars[i + 1];\n                if\
    \ !(vowels.contains(prev) || vowels.contains(next)) {\n                    result.push(*ch);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    result", "    // TODO\n    \"\".to_string()", '    unimplemented!()',
  "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel: String\
    \ = String::from(\"\");\n    let mut i = 0;\n    let length = word.len();\n  \
    \  while i < length - 1 {\n        if word.chars().nth(i).unwrap().is_lowercase()\
    \ {\n            i += 1;\n            continue;\n        }\n        if vowels.contains(&word.chars().nth(i).unwrap())\
    \ {\n            closest_vowel = String::from(word.chars().nth(i).unwrap().to_string());\n\
    \            break;\n        }\n        i += 1;\n    }\n    closest_vowel", " \
    \   let consonants: HashSet<char> = \"bcdfghjklmnpqrstvwxyz\".chars().collect();\n\
    \    let vowels: HashSet<char> = \"aeiou\".chars().collect();\n    let mut res\
    \ = String::new();\n    let mut last_vowel_idx = 0;\n    for (i, c) in word.chars().enumerate().rev()\
    \ {\n        if consonants.contains(&c) {\n            if i > 0 && vowels.contains(&word.chars().nth(i\
    \ - 1).unwrap()) {\n                res = word.chars().nth(i - 1).unwrap().to_string();\n\
    \                break;\n            }\n        } else if vowels.contains(&c)\
    \ {\n            last_vowel_idx = i;\n        }\n    }\n    if res.is_empty()\
    \ && vowels.contains(&word.chars().nth(last_vowel_idx).unwrap()) {\n        res\
    \ = word.chars().nth(last_vowel_idx).unwrap().to_string();\n    }\n    res", '    unimplemented!()',
  "    let mut vowels = vec![];\n    let mut cons_before_vowel = true;\n    for (i,\
    \ c) in word.chars().rev().enumerate() {\n        if \"aeiou\".contains(c) {\n\
    \            vowels.push((i, c));\n            cons_before_vowel = false;\n  \
    \      } else if !cons_before_vowel {\n            break;\n        }\n    }\n\
    \    vowels.sort_by_key(|x| x.0);\n    if vowels.is_empty() {\n        String::from(\"\
    \")\n    } else {\n        String::from(vowels[0].1.to_string().as_str())\n  \
    \  }", "    let mut word_vec: Vec<_> = word.chars().collect();\n    word_vec.reverse();\n\
    \    word_vec.iter().skip_while(|ch| match ch {\n        'a' | 'e' | 'i' | 'o'\
    \ | 'u' => false,\n        _ => true,\n    }).find(|ch| match ch {\n        'a'\
    \ | 'e' | 'i' | 'o' | 'u' => true,\n        _ => false,\n    }).unwrap_or(&' ').to_string()",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut result = String::new();\n\
    \    for (i, ch) in word.chars().rev().enumerate() {\n        if i == 0 {\n  \
    \          return result;\n        }\n        if vowels.contains(&ch.to_string().as_str())\
    \ {\n            result = ch.to_string();\n        } else {\n            if result.len()\
    \ > 0 {\n                return result;\n            }\n        }\n    }\n   \
    \ result", "    let word_chars: Vec<char> = word.chars().collect();\n    let mut\
    \ closest_vowel = \"\".to_string();\n    let mut stop_index = 0;\n    for (index,\
    \ wc) in word_chars.iter().enumerate() {\n        if is_vowel(wc) {\n        \
    \    if (index == 0) || (index == word_chars.len() - 1) {\n                continue;\n\
    \            }\n            if index > stop_index {\n                let prev_char\
    \ = word_chars[index - 1];\n                let next_char = word_chars[index +\
    \ 1];\n                if !is_vowel(&prev_char) && !is_vowel(&next_char) {\n \
    \                   closest_vowel = wc.to_string();\n                    stop_index\
    \ = index;\n                }\n            }\n        }\n    }\n    closest_vowel",
  "    let mut word = word.clone();\n    word.pop();\n    word.reverse();\n    let\
    \ mut closest = String::new();\n    let is_prev_consonant = false;\n    for ch\
    \ in word.chars() {\n        if !is_prev_consonant && vowel_set.contains(&ch)\
    \ {\n            return ch.to_string();\n        }\n    }\n    closest", "   \
    \ let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let len = word.len();\n    for\
    \ i in (1..len).rev() {\n        let c = word.chars().nth(i).unwrap();\n     \
    \   if vowels.contains(&c) {\n            let b = word.chars().nth(i - 1).unwrap();\n\
    \            let a = word.chars().nth(i + 1).unwrap();\n            if !vowels.contains(&b)\
    \ && !vowels.contains(&a) {\n                return c.to_string();\n         \
    \   }\n        }\n    }\n    String::from(\"\")", "    let vowels = \"aeiou\"\
    ;\n    for (i, ch) in word.chars().rev().enumerate() {\n        if vowels.contains(ch)\
    \ {\n            if let Some(p_ch) = word.chars().rev().nth(i + 1) {\n       \
    \         if !vowels.contains(p_ch) {\n                    return ch.to_string();\n\
    \                }\n            }\n        }\n    }\n    \"\".to_string()", " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut out = String::new();\n\
    \    let mut between = false;\n    for ch in word.chars().rev() {\n        if\
    \ between {\n            if vowels.contains(&ch.to_lowercase().to_string().as_str())\
    \ {\n                out.push(ch);\n                break;\n            }\n  \
    \      } else {\n            if vowels.contains(&ch.to_lowercase().to_string().as_str())\
    \ {\n                between = true;\n            }\n        }\n    }\n    out.chars().rev().collect()",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut closest_vowel: String\
    \ = String::from(\"\");\n    let mut prev_is_vowel = false;\n    let mut prev_is_consonant\
    \ = false;\n    for ch in word.chars().rev() {\n        if vowels.contains(&ch)\
    \ {\n            prev_is_vowel = true;\n            if prev_is_consonant {\n \
    \               closest_vowel = ch.to_string();\n                break;\n    \
    \        }\n        } else {\n            prev_is_consonant = true;\n        \
    \    if prev_is_vowel {\n                break;\n            }\n        }\n  \
    \  }\n    closest_vowel", '    unimplemented!();', "    let vowels = \"AEIOUaeiou\"\
    ;\n    let mut vow_pos: Vec<usize> = Vec::new();\n    let mut n = word.len();\n\
    \    let mut p = n - 1;\n    let mut i = 0;\n    while i < n {\n        let ch\
    \ = word.chars().nth(i).unwrap();\n        if vowels.contains(ch) {\n        \
    \    vow_pos.push(p);\n        }\n        i += 1;\n        p -= 1;\n    }\n  \
    \  let mut res = String::new();\n    if vow_pos.len() == 0 {\n        return res;\n\
    \    }\n    let mut idx = 0;\n    for i in vow_pos {\n        if i < n - 2 {\n\
    \            let ch = word.chars().nth(i + 1).unwrap();\n            if ch.is_ascii_lowercase()\
    \ || ch.is_ascii_uppercase() {\n                let mut j = 0;\n             \
    \   while j < vowels.len() {\n                    let v = vowels.chars().nth(j).unwrap();\n\
    \                    if v == ch {\n                        idx = j;\n        \
    \                break;\n                    }\n                    j += 1;\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    if idx > 0 {\n        res.push(vowels.chars().nth(idx).unwrap());\n    }\n\
    \    res", "    let vowels = \"AEIOU\";\n    let mut result = String::new();\n\
    \    let bytes = word.into_bytes();\n    for (i, c) in bytes.iter().enumerate()\
    \ {\n        if vowels.contains(char::from(*c)) {\n            let left = i >\
    \ 0 && !vowels.contains(char::from(bytes[i - 1]));\n            let right = i\
    \ < bytes.len() - 1 && !vowels.contains(char::from(bytes[i + 1]));\n         \
    \   if left && right {\n                result.push(char::from(*c));\n       \
    \         break;\n            }\n        }\n    }\n    result", '    unimplemented!()',
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut word_chars = word.chars().collect::<Vec<char>>();\n\
    \    word_chars.reverse();\n    let mut closest_vowel = ' ';\n    let mut closest_vowel_index\
    \ = 0;\n    let mut two_consonants = false;\n    for (index, c) in word_chars.iter().enumerate()\
    \ {\n        if closest_vowel == ' ' && vowels.contains(c) {\n            closest_vowel\
    \ = *c;\n            closest_vowel_index = index;\n        }\n        if closest_vowel\
    \ != ' ' && !vowels.contains(c) {\n            two_consonants = true;\n      \
    \      break;\n        }\n    }\n    if two_consonants {\n        return word_chars[closest_vowel_index].to_string();\n\
    \    }\n    \"\".to_string()", "    let mut word = word.chars().rev().collect::<Vec<char>>();\n\
    \    for i in 0..word.len() {\n        if is_vowel(word[i]) {\n            if\
    \ i == word.len() - 1 {\n                return String::from(\"\");\n        \
    \    } else if !is_vowel(word[i + 1]) {\n                return word[i].to_string();\n\
    \            }\n        }\n    }\n    String::from(\"\")", '    unimplemented!()',
  "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut idx: i32 = -1;\n    let\
    \ mut closest_vowel: String = String::from(\"\");\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(&c) {\n            idx = i as i32;\n         \
    \   closest_vowel = c.to_string();\n            break;\n        }\n    }\n   \
    \ if idx < 0 {\n        return String::from(\"\");\n    }\n    let w_len = word.len();\n\
    \    let idx_u: usize = idx as usize;\n    if idx_u < w_len {\n        let c =\
    \ word.chars().nth(w_len - idx_u - 1).unwrap();\n        if !vowels.contains(&c)\
    \ {\n            return closest_vowel;\n        }\n    }\n    return String::from(\"\
    \");", "    word.chars().enumerate().fold(\n        (false, word.len(), String::new()),\n\
    \        |(prev_is_con, loc, acc), (i, ch)|\n            if prev_is_con {\n  \
    \              if i == word.len() - 1 {\n                    (false, loc, acc)\n\
    \                } else {\n                    match ch {\n                  \
    \      'a' | 'e' | 'i' | 'o' | 'u' =>\n                            if i < loc\
    \ {\n                                (false, i, ch.to_string())\n            \
    \                } else {\n                                (false, loc, acc)\n\
    \                            },\n                        _ => (true, loc, acc),\n\
    \                    }\n                }\n            } else {\n            \
    \    match ch {\n                    'a' | 'e' | 'i' | 'o' | 'u' => (false, loc,\
    \ acc),\n                    _ => (true, loc, acc),\n                }\n     \
    \       }\n    ).2", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ mut index = 0;\n    for (i, c) in word.chars().rev().enumerate() {\n       \
    \ if vowels.contains(&c) {\n            index = i;\n            break;\n     \
    \   }\n    }\n    let mut closest_vowel = \"\".to_string();\n    if index != 0\
    \ {\n        closest_vowel = word.chars().rev().skip(index).take(1).collect();\n\
    \    }\n    closest_vowel", '    unimplemented!()', '    word.chars().rev().skip_while(|c|
    !is_vowel(*c)).skip(1).take_while(|c| !is_vowel(*c)).collect()', "    let vowels\
    \ = \"aeiouAEIOU\";\n    let chars = word.chars().collect::<Vec<char>>();\n  \
    \  let mut right = 0;\n    let mut left = 0;\n    let mut closest = (right, left);\n\
    \    let mut found = false;\n    while right < chars.len() - 1 {\n        if vowels.contains(chars[right].to_string().as_str())\
    \ {\n            if vowels.contains(chars[right - 1].to_string().as_str()) &&\
    \ vowels.contains(chars[right + 1].to_string().as_str()) {\n                continue;\n\
    \            }\n            if !vowels.contains(chars[right - 1].to_string().as_str())\
    \ && !vowels.contains(chars[right + 1].to_string().as_str()) {\n             \
    \   if found {\n                    if closest.1 - closest.0 > right - left {\n\
    \                        closest = (left, right);\n                    }\n   \
    \             } else {\n                    closest = (left, right);\n       \
    \             found = true;\n                }\n            }\n        }\n   \
    \     left += 1;\n        right += 1;\n    }\n    if found {\n        String::from(vowels)[closest.0..closest.1].to_string()\n\
    \    } else {\n        String::from(\"\")\n    }", "    let vowels = \"AEIOUaeiou\"\
    ;\n    let mut best_index = 0;\n    let mut best_dist = 999;\n    let mut last_consonant\
    \ = 0;\n    for (i, letter) in word.chars().enumerate() {\n        if vowels.contains(letter)\
    \ {\n            if i > last_consonant {\n                let dist = i - last_consonant;\n\
    \                if dist < best_dist {\n                    best_dist = dist;\n\
    \                    best_index = i;\n                }\n            }\n     \
    \   } else {\n            last_consonant = i;\n        }\n    }\n    if best_dist\
    \ != 999 {\n        word.chars().skip(best_index).take(1).collect()\n    } else\
    \ {\n        String::from(\"\")\n    }", "    if word.is_empty() {\n        return\
    \ String::from(\"\");\n    }\n    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut vowels_and_consonants\
    \ = vec!['a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let mut res\
    \ = \"\".to_string();\n    let mut letters = word.chars().collect::<Vec<char>>();\n\
    \    let mut n = letters.len();\n    let mut last_c = -1;\n    let mut last_v\
    \ = -1;\n    let mut i = n - 1;\n    while i >= 0 {\n        if !vowels_and_consonants.contains(&letters[i])\
    \ {\n            break;\n        }\n        if vowels.contains(&letters[i]) {\n\
    \            last_v = i;\n        }\n        if consonants.contains(&letters[i])\
    \ {\n            last_c = i;\n        }\n        if last_c != -1 && last_v !=\
    \ -1 {\n            res = letters[last_v].to_string();\n            break;\n \
    \       }\n        i -= 1;\n    }\n    res", "    let mut result = String::new();\n\
    \    for (c, i) in word.chars().rev().enumerate() {\n        match i {\n     \
    \       'a' | 'e' | 'i' | 'o' | 'u' => {\n                if c < word.len() -\
    \ 1 {\n                    if let Some(j) = word.chars().rev().nth(c + 1) {\n\
    \                        if !(j == 'a' || j == 'e' || j == 'i' || j == 'o' ||\
    \ j == 'u') {\n                            result.push(i);\n                 \
    \           break;\n                        }\n                    }\n       \
    \         }\n            }\n            _ => {}\n        }\n    }\n    result",
  "    let vowel = ['a', 'e', 'i', 'o', 'u'];\n    let mut closest = String::new();\n\
    \    let mut closest_dist = 0;\n    let mut current_dist = 0;\n    let mut last_vowel\
    \ = word.len();\n    let mut last_consonant = word.len();\n    for (i, c) in word.chars().enumerate()\
    \ {\n        if vowel.contains(&c) {\n            if last_consonant != word.len()\
    \ {\n                current_dist = last_consonant - i;\n                if closest_dist\
    \ == 0 || current_dist < closest_dist {\n                    closest_dist = current_dist;\n\
    \                    closest = c.to_string();\n                }\n           \
    \ }\n            last_vowel = i;\n        } else {\n            last_consonant\
    \ = i;\n        }\n    }\n    return closest;", "    let mut result = String::new();\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut index: i32 = -1;\n \
    \   let len = word.len();\n    for (i, c) in word.chars().enumerate() {\n    \
    \    for vowel in vowels.iter() {\n            if c == *vowel {\n            \
    \    if i == 0 || i == len - 1 {\n                    break;\n               \
    \ } else {\n                    if index < 0 {\n                        index\
    \ = i as i32;\n                    } else {\n                        if (i as\
    \ i32 - index).abs() < len as i32 {\n                            index = i as\
    \ i32;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    if index >= 0 {\n        result.push(word.chars().nth(index\
    \ as usize).unwrap());\n    }\n    result", "    let len = word.len();\n    let\
    \ mut res = String::new();\n    let mut vowels: [u8; 11] = [b'a', b'e', b'i',\
    \ b'o', b'u', b'A', b'E', b'I', b'O', b'U', b'\\0'];\n    for i in 0..len - 1\
    \ {\n        let mut curr = word.as_bytes()[len - 1 - i];\n        let mut next\
    \ = word.as_bytes()[len - 2 - i];\n        if vowels.contains(&curr) && !vowels.contains(&next)\
    \ {\n            res.push(curr as char);\n            break;\n        }\n    }\n\
    \    res", '    unimplemented!()', "    let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut result = String::new();\n    let chars: Vec<char> = word.chars().collect();\n\
    \    let mut found_consonant = false;\n    for char in chars.iter().rev() {\n\
    \        if !found_consonant {\n            if vowels.contains(char) {\n     \
    \           result.clear();\n            } else {\n                found_consonant\
    \ = true;\n            }\n        } else {\n            if vowels.contains(char)\
    \ {\n                result.clear();\n                result.push(*char);\n  \
    \              break;\n            }\n        }\n    }\n    result", "    let\
    \ vowels = \"aeiou\";\n    let mut counter = 0;\n    let mut prev = ' ';\n   \
    \ let mut curr = ' ';\n    let mut next = ' ';\n    let mut the_closest_vowel\
    \ = String::from(\"\");\n    for char in word.chars().rev() {\n        if counter\
    \ == 0 {\n            counter += 1;\n            prev = char;\n        } else\
    \ if counter == 1 {\n            counter += 1;\n            curr = char;\n   \
    \     } else if counter == 2 {\n            counter += 1;\n            next =\
    \ char;\n        } else {\n            counter += 1;\n            prev = curr;\n\
    \            curr = next;\n            next = char;\n        }\n        if vowels.contains(prev)\
    \ || vowels.contains(next) {\n            continue;\n        }\n        if vowels.contains(curr)\
    \ {\n            the_closest_vowel = curr.to_string();\n            break;\n \
    \       }\n    }\n    the_closest_vowel", "    let vowels = String::from(\"aoeuiy\"\
    );\n    let mut index = word.len();\n    for (i, c) in word.chars().rev().enumerate()\
    \ {\n        if vowels.contains(c) {\n            index = i;\n            break;\n\
    \        }\n    }\n    let result = word.chars().rev().skip(index).collect::<String>();\n\
    \    result", "\tlet vowels = \"AEIOUaeiou\";\n\tlet mut vowels_iter = vowels.chars();\n\
    \tlet mut chars_iter = word.chars();\n\tlet mut closest_vowel = String::new();\n\
    \tlet mut consonant_before = false;\n\tlet mut vowel_before = false;\n\t\n\twhile\
    \ let Some(c) = chars_iter.next() {\n\t\tif vowels.contains(c) {\n\t\t\tvowel_before\
    \ = true;\n\t\t\twhile let Some(v) = vowels_iter.next() {\n\t\t\t\tif v == c {\n\
    \t\t\t\t\tif consonant_before {\n\t\t\t\t\t\tclosest_vowel = c.to_string();\n\t\
    \t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconsonant_before\
    \ = vowel_before;\n\t\t\tvowel_before = false;\n\t\t}\n\t}\n\t\n\tclosest_vowel",
  "    // one to the left, one to the right\n    let mut prev_char = '0';\n    let\
    \ mut next_char = '0';\n    let mut vowel_hash = HashMap::new();\n    vowel_hash.insert('a',\
    \ 0);\n    vowel_hash.insert('e', 0);\n    vowel_hash.insert('i', 0);\n    vowel_hash.insert('o',\
    \ 0);\n    vowel_hash.insert('u', 0);\n    vowel_hash.insert('A', 0);\n    vowel_hash.insert('E',\
    \ 0);\n    vowel_hash.insert('I', 0);\n    vowel_hash.insert('O', 0);\n    vowel_hash.insert('U',\
    \ 0);\n    for (idx, char) in word.chars().enumerate() {\n        if vowel_hash.contains_key(&char)\
    \ {\n            vowel_hash.insert(char, idx);\n        }\n    }\n    for (idx,\
    \ char) in word.chars().enumerate() {\n        if vowel_hash.contains_key(&char)\
    \ {\n            if idx == 0 {\n                next_char = word.chars().nth(idx\
    \ + 1).unwrap();\n            } else if idx == word.len() - 1 {\n            \
    \    prev_char = word.chars().nth(idx - 1).unwrap();\n            } else {\n \
    \               prev_char = word.chars().nth(idx - 1).unwrap();\n            \
    \    next_char = word.chars().nth(idx + 1).unwrap();\n            }\n        \
    \    if vowel_hash.contains_key(&prev_char) && vowel_hash.contains_key(&next_char)\
    \ {\n                return char.to_string();\n            }\n        }\n    }\n\
    \    return String::from(\"\");", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut found_vowel = String::new();\n    let mut chars = word.chars().collect::<Vec<char>>();\n\
    \    chars.reverse();\n    for (i, c) in chars.iter().enumerate() {\n        if\
    \ vowels.contains(c) {\n            if i + 1 < chars.len() && vowels.contains(&chars[i\
    \ + 1]) {\n                continue;\n            }\n            found_vowel =\
    \ c.to_string();\n            break;\n        }\n    }\n    return found_vowel;",
  "    // Your code here...\n    unimplemented!()", "    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    vowels.append(&mut vec!['A', 'E', 'I', 'O', 'U']);\n\
    \    let mut closest_vowel = String::new();\n    let mut chars = word.chars().rev();\n\
    \    let mut previous = '0';\n    for c in chars {\n        if vowels.contains(&c)\
    \ {\n            closest_vowel.push(c);\n        } else if !closest_vowel.is_empty()\
    \ && previous != '0' {\n            return closest_vowel;\n        }\n       \
    \ previous = c;\n    }\n    return String::new();", "    let mut last_consonant_index\
    \ = None;\n    let mut current_index = 0;\n    let mut last_vowel_index = None;\n\
    \    let mut last_vowel = None;\n    for c in word.chars() {\n        if is_vowel(c)\
    \ {\n            if last_consonant_index.is_some() {\n                if last_vowel_index.is_none()\
    \ {\n                    last_vowel_index = Some(current_index);\n           \
    \         last_vowel = Some(c);\n                } else {\n                  \
    \  if current_index - last_consonant_index.unwrap() < last_vowel_index.unwrap()\
    \ - last_consonant_index.unwrap() {\n                        last_vowel_index\
    \ = Some(current_index);\n                        last_vowel = Some(c);\n    \
    \                }\n                }\n            }\n        } else {\n     \
    \       last_consonant_index = Some(current_index);\n        }\n        current_index\
    \ += 1;\n    }\n    match last_vowel {\n        Some(v) => v.to_string(),\n  \
    \      None => String::from(\"\")\n    }", "    let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut cons = vec![];\n    let mut ans = String::new();\n    for\
    \ x in word.chars() {\n        if x == 'a' || x == 'e' || x == 'i' || x == 'o'\
    \ || x == 'u' {\n            if cons.len() > 0 {\n                return ans;\n\
    \            }\n        } else {\n            cons.push(x);\n        }\n     \
    \   ans = x.to_string();\n    }\n    String::new()", '    unimplemented!()', " \
    \   let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut index = -1;\n\
    \    let mut i = 0;\n    let mut flag = false;\n    for i in (0..word.len()).rev()\
    \ {\n        if vowels.contains(&word[i..i+1].to_lowercase().as_str()) {\n   \
    \         index = i;\n            if i != 0 && !vowels.contains(&word[i-1..i].to_lowercase().as_str())\
    \ {\n                flag = true;\n                break;\n            }\n   \
    \     }\n    }\n    if flag {\n        word[index..index+1].to_string()\n    }\
    \ else {\n        String::from(\"\")\n    }", "    let mut result = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut prev_is_consonant\
    \ = false;\n    for (i, ch) in word.chars().rev().enumerate() {\n        if vowels.contains(&ch)\
    \ {\n            if prev_is_consonant {\n                result.push(ch);\n  \
    \              break;\n            }\n        } else {\n            prev_is_consonant\
    \ = true;\n        }\n    }\n    result.chars().rev().collect()", "    // TODO\n\
    \    return String::from(\"\");", "    if word.len() == 0 {\n        return String::from(\"\
    \");\n    }\n    let mut cons_count = 0;\n    let mut vowel_idx = word.len();\n\
    \    for (idx, ch) in word.chars().enumerate().rev() {\n        if is_vowel(ch)\
    \ {\n            vowel_idx = idx;\n            if cons_count >= 2 {\n        \
    \        break;\n            }\n        } else {\n            cons_count += 1;\n\
    \        }\n    }\n    return if vowel_idx == word.len() {\n        String::from(\"\
    \")\n    } else {\n        word[vowel_idx..vowel_idx + 1].to_string()\n    };",
  "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let vowels = vowels.into_iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>();\n    let mut new_word = word.chars().rev().collect::<String>();\n\
    \    let mut index_vowel = 0;\n    let mut index_consonant = 0;\n    let mut flag\
    \ = false;\n    for (i, c) in new_word.chars().enumerate() {\n        if vowels.contains(&c.to_string())\
    \ {\n            index_vowel = i;\n            flag = true;\n            break;\n\
    \        }\n    }\n    if flag {\n        for (i, c) in new_word.chars().enumerate()\
    \ {\n            if i > index_vowel && !vowels.contains(&c.to_string()) {\n  \
    \              index_consonant = i;\n                break;\n            }\n \
    \       }\n        let mut closest_vowel = new_word.chars().nth(index_vowel).unwrap().to_string();\n\
    \        if index_consonant != 0 {\n            closest_vowel = new_word.chars().nth(index_consonant\
    \ - 1).unwrap().to_string();\n        }\n        return closest_vowel;\n    }\n\
    \    String::from(\"\")", "    if word.is_empty() {\n        return String::from(\"\
    \");\n    }\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut next_vowel_pos\
    \ = None;\n    let word_chars: Vec<char> = word.chars().collect();\n    for i\
    \ in (0..word_chars.len()).rev() {\n        if vowels.contains(&word_chars[i])\
    \ {\n            if i == 0 || i == word_chars.len() - 1 {\n                continue;\n\
    \            }\n            if !vowels.contains(&word_chars[i-1]) && vowels.contains(&word_chars[i+1])\
    \ {\n                next_vowel_pos = Some(i);\n                break;\n     \
    \       }\n        }\n    }\n    match next_vowel_pos {\n        Some(x) => format!(\"\
    {}\", word_chars[x]),\n        None => String::from(\"\"),\n    }", "    // TODO\n\
    \    \"\".to_string()", "    let mut res = String::new();\n    let mut cons_count\
    \ = 0;\n    let mut vow_count = 0;\n    let mut vow_idx = 0;\n    let mut cons_idx\
    \ = 0;\n    let v = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vv = vec![];\n\
    \    for (i, x) in word.chars().rev().enumerate() {\n        if v.contains(&x)\
    \ {\n            vow_count += 1;\n            vow_idx = i;\n        } else {\n\
    \            cons_count += 1;\n            cons_idx = i;\n        }\n        if\
    \ vow_count > 0 && cons_count > 0 {\n            vv.push(vow_idx - cons_idx);\n\
    \            cons_count = 0;\n            vow_count = 0;\n        }\n    }\n \
    \   if !vv.is_empty() {\n        let mut min = vv[0];\n        for e in vv {\n\
    \            if e < min {\n                min = e;\n            }\n        }\n\
    \        for (i, x) in word.chars().rev().enumerate() {\n            if i == min\
    \ + 1 {\n                res.push(x);\n            }\n        }\n    }\n    res",
  '    "".to_string()', "    let mut prev_char = ' ';\n    let mut closest_vowel =\
    \ String::new();\n    for (idx, letter) in word.chars().rev().enumerate() {\n\
    \        if is_vowel(letter) {\n            if idx != 0 && !is_vowel(prev_char)\
    \ {\n                closest_vowel = letter.to_string();\n                break;\n\
    \            }\n        }\n        prev_char = letter;\n    }\n    closest_vowel",
  '    unimplemented!()', "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    let mut min_idx = word.len();\n    let mut min_vowel = \"\";\n    for vowel\
    \ in vowels {\n        if let Some(idx) = word.rfind(vowel) {\n            if\
    \ idx < min_idx && idx > 0 && !vowels.contains(&word.chars().nth(idx - 1).unwrap().to_string().as_str())\
    \ {\n                min_idx = idx;\n                min_vowel = vowel;\n    \
    \        }\n        }\n    }\n    return min_vowel.to_string();", "    let word\
    \ = word.to_lowercase();\n    let vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let mut index: Option<usize> = None;\n    for i in 0..word.len() {\n\
    \        if vowels.contains(&word.chars().nth(i).unwrap().to_string().as_str())\
    \ {\n            index = Some(i);\n            break;\n        }\n    }\n    match\
    \ index {\n        Some(x) => {\n            let mut dist = -1;\n            let\
    \ mut vowel = String::from(\"\");\n            for i in (x + 1)..word.len() {\n\
    \                if vowels.contains(&word.chars().nth(i).unwrap().to_string().as_str())\
    \ {\n                    let dist_temp = i - x;\n                    if dist ==\
    \ -1 || dist_temp < dist {\n                        dist = dist_temp;\n      \
    \                  vowel = word.chars().nth(i).unwrap().to_string();\n       \
    \             }\n                }\n            }\n            vowel\n       \
    \ }\n        None => String::from(\"\"),\n    }", "    // TODO: Write here your\
    \ code\n    \"\".to_string()", "    let mut is_vowel = false;\n    let mut found_consonant\
    \ = false;\n    let mut found_vowel = false;\n    let mut result = String::new();\n\
    \    let mut reverse_str = word.chars().rev().collect::<String>();\n    for c\
    \ in reverse_str.chars() {\n        if !found_consonant {\n            if is_vowel(c)\
    \ {\n                found_vowel = true;\n            } else {\n             \
    \   found_consonant = true;\n            }\n        } else {\n            if is_vowel(c)\
    \ {\n                result.push(c);\n                break;\n            }\n\
    \        }\n    }\n    if !found_vowel || found_vowel && result.is_empty() {\n\
    \        result = String::from(\"\");\n    }\n    result", '    word.chars().rev().skip_while(|c|
    !c.is_vowel()).skip(1).take_while(|c| !c.is_vowel()).rev().collect()', "    let\
    \ mut first_vowel = None;\n    let mut first_vowel_position = word.len();\n  \
    \  let mut last_consonant = None;\n    let mut last_consonant_position = word.len();\n\
    \    for (i, &c) in word.char_indices().rev() {\n        if is_vowel(c) {\n  \
    \          first_vowel = Some(c);\n            first_vowel_position = i;\n   \
    \     } else if last_consonant.is_none() {\n            last_consonant = Some(c);\n\
    \            last_consonant_position = i;\n        } else if first_vowel.is_some()\
    \ {\n            break;\n        }\n    }\n    if first_vowel.is_some() && last_consonant.is_some()\
    \ && last_consonant_position < first_vowel_position {\n        first_vowel.unwrap().to_string()\n\
    \    } else {\n        String::new()\n    }", '    unimplemented!();', "    let\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    let last_consonant = word.chars().rposition(|ch|\
    \ !vowels.contains(&ch));\n    if last_consonant.is_none() {\n        return String::from(\"\
    \");\n    }\n    let first_vowel = word.chars().position(|ch| vowels.contains(&ch));\n\
    \    if first_vowel.is_none() {\n        return String::from(\"\");\n    }\n \
    \   if last_consonant.unwrap() > first_vowel.unwrap() {\n        let (first, second)\
    \ = word.split_at(last_consonant.unwrap());\n        let second_vowel = second.chars().position(|ch|\
    \ vowels.contains(&ch));\n        if second_vowel.is_none() {\n            return\
    \ String::from(\"\");\n        }\n        let mut new_word = String::from(first);\n\
    \        new_word.push_str(&second[..second_vowel.unwrap()]);\n        new_word\n\
    \    } else {\n        String::from(\"\")\n    }", "    let mut result = String::new();\n\
    \    let mut consonant_pos = -1;\n    let mut prev_vowel_pos = -1;\n    let mut\
    \ letter_pos = 0;\n    for ch in word.chars() {\n        if !is_vowel(ch) {\n\
    \            consonant_pos = letter_pos;\n        } else if consonant_pos > -1\
    \ {\n            if prev_vowel_pos < consonant_pos && prev_vowel_pos > -1 {\n\
    \                result = ch.to_string();\n                break;\n          \
    \  }\n            prev_vowel_pos = letter_pos;\n        }\n        letter_pos\
    \ += 1;\n    }\n    result"]
stop_tokens:
- "\n}"
