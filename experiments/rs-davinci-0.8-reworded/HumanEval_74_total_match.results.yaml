language: rs
name: HumanEval_74_total_match
results:
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    match (lst1.len(), lst2.len()) {\n        (0, _) => lst1,\n        (_, 0)\
    \ => lst2,\n        (_, _) => {\n            let lst1_len = lst1.iter().fold(0,\
    \ |acc, x| acc + x.len());\n            let lst2_len = lst2.iter().fold(0, |acc,\
    \ x| acc + x.len());\n            if lst1_len < lst2_len { lst1 } else { lst2\
    \ }\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp6mot36ab.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_1 = 0;\n    let mut total_chars_2 = 0;\n    for str in\
    \ lst1.iter() {\n        total_chars_1 += str.len();\n    }\n    for str in lst2.iter()\
    \ {\n        total_chars_2 += str.len();\n    }\n    if total_chars_1 < total_chars_2\
    \ {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpo_fffbwb.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.is_empty() { return lst2 }\n    if lst2.is_empty() { return lst1\
    \ }\n    let cnt1 = lst1.iter().fold(0, |sum, s| sum + s.len());\n    let cnt2\
    \ = lst2.iter().fold(0, |sum, s| sum + s.len());\n    if cnt1 < cnt2 {\n     \
    \   lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpkgig07pa.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let (counter1, counter2) = (lst1.iter().map(|x| x.len()).sum(), lst2.iter().map(|x|\
    \ x.len()).sum());\n    if counter1 < counter2 {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `(S, S)`\n  --> /tmp/tmp_lxl72_b.rs:16:10\n\
    \   |\n16 |     let (counter1, counter2) = (lst1.iter().map(|x| x.len()).sum(),\
    \ lst2.iter().map(|x| x.len()).sum());\n   |         -^^^^^^^^-----------\n  \
    \ |         ||\n   |         |cannot infer type\n   |         consider giving\
    \ this pattern the explicit type `(S, S)`, with the type parameters specified\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum1 = lst1.iter().fold(0, |acc, s| acc + s.len());\n    let sum2 = lst2.iter().fold(0,\
    \ |acc, s| acc + s.len());\n    match sum1.cmp(&sum2) {\n        Ordering::Less\
    \ => lst2,\n        _ => lst1,\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp958sfr0a.rs:19:9\n   |\n19 |         Ordering::Less => lst2,\n   | \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut new_lst1 = lst1.clone();\n    let mut new_lst2 = lst2.clone();\n\
    \    let mut counter1 = 0;\n    let mut counter2 = 0;\n    for i in new_lst1 {\n\
    \        counter1 += i.len();\n    }\n    for i in new_lst2 {\n        counter2\
    \ += i.len();\n    }\n    if counter1 < counter2 {\n        return new_lst1;\n\
    \    } else {\n        return new_lst2;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpsffxwkcr.rs:16:9\n\
    \   |\n16 |     let mut new_lst1 = lst1.clone();\n   |         ----^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpsffxwkcr.rs:17:9\n\
    \   |\n17 |     let mut new_lst2 = lst2.clone();\n   |         ----^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n\nerror[E0382]: use of\
    \ moved value: `new_lst1`\n   --> /tmp/tmpsffxwkcr.rs:27:16\n    |\n16  |    \
    \ let mut new_lst1 = lst1.clone();\n    |         ------------ move occurs because\
    \ `new_lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n\
    ...\n20  |     for i in new_lst1 {\n    |              --------\n    |       \
    \       |\n    |              `new_lst1` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&new_lst1`\n...\n27  |         return new_lst1;\n    |                ^^^^^^^^\
    \ value used here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `new_lst1`\n\nerror[E0382]: use of moved value:\
    \ `new_lst2`\n  --> /tmp/tmpsffxwkcr.rs:29:16\n   |\n17 |     let mut new_lst2\
    \ = lst2.clone();\n   |         ------------ move occurs because `new_lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n23 |   \
    \  for i in new_lst2 {\n   |              --------\n   |              |\n   |\
    \              `new_lst2` moved due to this implicit call to `.into_iter()`\n\
    \   |              help: consider borrowing to avoid moving into the for loop:\
    \ `&new_lst2`\n...\n29 |         return new_lst2;\n   |                ^^^^^^^^\
    \ value used here after move\n\nerror: aborting due to 2 previous errors; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwk9p9kxl.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_chars = lst1.iter().map(|s| s.len()).sum();\n    let lst2_chars\
    \ = lst2.iter().map(|s| s.len()).sum();\n    if lst1_chars < lst2_chars {\n  \
    \      lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpcgybe0gg.rs:16:9\n\
    \   |\n16 |     let lst1_chars = lst1.iter().map(|s| s.len()).sum();\n   |   \
    \      ^^^^^^^^^^ consider giving `lst1_chars` a type\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // your code goes here\n    let mut sum_size_lst1 = 0;\n    let mut sum_size_lst2\
    \ = 0;\n    for i in lst1.iter() {\n        sum_size_lst1 += i.len();\n    }\n\
    \    for i in lst2.iter() {\n        sum_size_lst2 += i.len();\n    }\n    if\
    \ sum_size_lst1 > sum_size_lst2 {\n        return lst2;\n    }\n    else {\n \
    \       return lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut c1 = 0;\n    let mut c2 = 0;\n    for i in &lst1 {\n        c1 +=\
    \ i.len();\n    }\n    for i in &lst2 {\n        c2 += i.len();\n    }\n    if\
    \ c1 < c2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n\
    \    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpb153g8x5.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if total_length(&lst1) < total_length(&lst2) {\n        lst1\n    } else\
    \ {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_length` in this scope\n  -->\
    \ /tmp/tmp7f6v1bdj.rs:16:8\n   |\n16 |     if total_length(&lst1) < total_length(&lst2)\
    \ {\n   |        ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `total_length` in this scope\n  --> /tmp/tmp7f6v1bdj.rs:16:30\n\
    \   |\n16 |     if total_length(&lst1) < total_length(&lst2) {\n   |         \
    \                     ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let a = lst1.iter().map(|x| x.len()).sum::<usize>();\n    let b = lst2.iter().map(|x|\
    \ x.len()).sum::<usize>();\n    match (a, b) {\n        (0, 0) => vec![],\n  \
    \      (0, _) => lst2,\n        (_, 0) => lst1,\n        (_, _) => {\n       \
    \     if a < b {\n                lst1\n            } else {\n               \
    \ lst2\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpixu71syn.rs:40:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_len = lst1.iter().fold(0, |acc, s| acc + s.len());\n    let lst2_len\
    \ = lst2.iter().fold(0, |acc, s| acc + s.len());\n    if lst1_len == lst2_len\
    \ { lst1 } else if lst1_len < lst2_len { lst1 } else { lst2 }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let c = |x: Vec<String>| {\n        x.iter().fold(0, |acc, x| acc + x.len())\n\
    \    };\n    if c(lst1) < c(lst2) {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst1`\n  --> /tmp/tmploxqc6wv.rs:20:9\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n19 |     if c(lst1) < c(lst2)\
    \ {\n   |          ---- value moved here\n20 |         lst1\n   |         ^^^^\
    \ value used here after move\n\nerror[E0382]: use of moved value: `lst2`\n  -->\
    \ /tmp/tmploxqc6wv.rs:22:9\n   |\n15 | fn total_match(lst1: Vec<String>, lst2:\
    \ Vec<String>) -> Vec<String> {\n   |                                   ---- move\
    \ occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy`\
    \ trait\n...\n19 |     if c(lst1) < c(lst2) {\n   |                    ---- value\
    \ moved here\n...\n22 |         lst2\n   |         ^^^^ value used here after\
    \ move\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum1 = lst1.iter().fold(0, |sum, x| sum + x.len());\n    let sum2 = lst2.iter().fold(0,\
    \ |sum, x| sum + x.len());\n    if sum1 <= sum2 {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822846
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_lst1 = 0;\n    let mut total_lst2 = 0;\n    for s in lst1.iter()\
    \ {\n        total_lst1 += s.len();\n    }\n    for s in lst2.iter() {\n     \
    \   total_lst2 += s.len();\n    }\n    if total_lst1 < total_lst2 {\n        lst1\n\
    \    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpao25g5tl.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let s1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n    let s2 = lst2.iter().map(|s|\
    \ s.len()).sum::<usize>();\n    if s1 <= s2 {\n        lst1\n    } else {\n  \
    \      lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total_chars_1 = lst1.iter().fold(0, |acc, item| acc + item.len());\n\
    \    let total_chars_2 = lst2.iter().fold(0, |acc, item| acc + item.len());\n\
    \    if total_chars_1 < total_chars_2 {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpk1js6dzd.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \tlet len1 = lst1.into_iter().map(|x| x.len()).sum();\n\tlet len2 = lst2.into_iter().map(|x|\
    \ x.len()).sum();\n\tif len1 == len2 {\n\t\tlst1\n\t} else if len1 < len2 {\n\t\
    \tlst1\n\t} else {\n\t\tlst2\n\t}\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpyt45be4v.rs:16:6\n\
    \   |\n16 |     let len1 = lst1.into_iter().map(|x| x.len()).sum();\n   |    \
    \     ^^^^ consider giving `len1` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let a: usize = lst1.iter().map(|x| x.len()).sum();\n    let b: usize = lst2.iter().map(|x|\
    \ x.len()).sum();\n    if a < b {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpyroqfp7_.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n    let mut sum1 = 0;\n    let mut sum2 = 0;\n\
    \    for elem in lst1.iter() {\n        sum1 += elem.len();\n    }\n    for elem\
    \ in lst2.iter() {\n        sum2 += elem.len();\n    }\n    if sum1 == sum2 {\n\
    \        return lst1;\n    }\n    if sum1 < sum2 {\n        return lst1;\n   \
    \ }\n    return lst2;\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmpsqivg2go.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if vec_len(lst1) == vec_len(lst2) {\n        return lst1;\n    } else if\
    \ vec_len(lst1) < vec_len(lst2) {\n        return lst1;\n    } else {\n      \
    \  return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `vec_len` in this scope\n  --> /tmp/tmp0c8ch5l3.rs:16:8\n\
    \   |\n16 |     if vec_len(lst1) == vec_len(lst2) {\n   |        ^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `vec_len` in this scope\n\
    \  --> /tmp/tmp0c8ch5l3.rs:16:25\n   |\n16 |     if vec_len(lst1) == vec_len(lst2)\
    \ {\n   |                         ^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `vec_len` in this scope\n  --> /tmp/tmp0c8ch5l3.rs:18:15\n\
    \   |\n18 |     } else if vec_len(lst1) < vec_len(lst2) {\n   |              \
    \ ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `vec_len`\
    \ in this scope\n  --> /tmp/tmp0c8ch5l3.rs:18:31\n   |\n18 |     } else if vec_len(lst1)\
    \ < vec_len(lst2) {\n   |                               ^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst_len1 = 0;\n    let mut lst_len2 = 0;\n    for x in lst1.iter()\
    \ {\n        lst_len1 += x.len();\n    }\n    for x in lst2.iter() {\n       \
    \ lst_len2 += x.len();\n    }\n    if lst_len1 > lst_len2 {\n        return lst2;\n\
    \    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total1 = total_chars(&lst1);\n    let total2 = total_chars(&lst2);\n\
    \    if total1 < total2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\
    \nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpr71gjx79.rs:16:18\n\
    \   |\n16 |     let total1 = total_chars(&lst1);\n   |                  ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_chars`\
    \ in this scope\n  --> /tmp/tmpr71gjx79.rs:17:18\n   |\n17 |     let total2 =\
    \ total_chars(&lst2);\n   |                  ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut count_1 = 0;\n    let mut count_2 = 0;\n    for s in lst1.iter()\
    \ {\n        count_1 += s.len();\n    }\n    for s in lst2.iter() {\n        count_2\
    \ += s.len();\n    }\n    if count_1 < count_2 {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmptxf31bec.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut char_count1 = 0;\n    let mut char_count2 = 0;\n    for s in lst1.iter()\
    \ {\n        char_count1 += s.len();\n    }\n    for s in lst2.iter() {\n    \
    \    char_count2 += s.len();\n    }\n    if char_count1 < char_count2 {\n    \
    \    lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpdlf5b9nc.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum1 = lst1.iter().fold(0, |s, x| s + x.len());\n    let sum2 = lst2.iter().fold(0,\
    \ |s, x| s + x.len());\n    if sum1 < sum2 {\n        lst1\n    } else {\n   \
    \     lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp6slt25cx.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let total2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if total1 < total2 {\n \
    \       lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5o3tzdgt.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if total_count(lst1) < total_count(lst2) {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_count` in this scope\n  --> /tmp/tmphl12xhrz.rs:16:8\n\
    \   |\n16 |     if total_count(lst1) < total_count(lst2) {\n   |        ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_count`\
    \ in this scope\n  --> /tmp/tmphl12xhrz.rs:16:28\n   |\n16 |     if total_count(lst1)\
    \ < total_count(lst2) {\n   |                            ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let len1 = lst1.iter().map(|x| x.len()).sum();\n    let len2 = lst2.iter().map(|x|\
    \ x.len()).sum();\n    if len1 <= len2 {\n        lst1\n    } else {\n       \
    \ lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp6p05n7e9.rs:16:9\n\
    \   |\n16 |     let len1 = lst1.iter().map(|x| x.len()).sum();\n   |         ^^^^\
    \ consider giving `len1` a type\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut v = vec![];\n    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for\
    \ s in lst1 {\n        sum1 += s.len();\n    }\n    for s in lst2 {\n        sum2\
    \ += s.len();\n    }\n    if sum1 < sum2 {\n        v = lst1;\n    } else if sum1\
    \ > sum2 {\n        v = lst2;\n    } else {\n        v = lst1;\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `v` is never read\n  --> /tmp/tmpcty4so91.rs:16:13\n\
    \   |\n16 |     let mut v = vec![];\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ use of moved value: `lst1`\n   --> /tmp/tmpcty4so91.rs:26:13\n    |\n15  | fn\
    \ total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |  \
    \              ---- move occurs because `lst1` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n19  |     for s in lst1 {\n    |      \
    \        ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n\
    26  |         v = lst1;\n    |             ^^^^ value used here after move\n \
    \   |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n19  |     for s in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpcty4so91.rs:28:13\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n22 |   \
    \  for s in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n28 |         v = lst2;\n   |             ^^^^ value\
    \ used here after move\n   |\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n   |\n22 |     for s in &lst2 {\n\
    \   |              +\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if total_chars(lst1) <= total_chars(lst2) {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmp2l0k1vp2.rs:16:8\n\
    \   |\n16 |     if total_chars(lst1) <= total_chars(lst2) {\n   |        ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_chars`\
    \ in this scope\n  --> /tmp/tmp2l0k1vp2.rs:16:29\n   |\n16 |     if total_chars(lst1)\
    \ <= total_chars(lst2) {\n   |                             ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let (len1, len2) = (lst1.iter().map(|s| s.len()).sum(), lst2.iter().map(|s|\
    \ s.len()).sum());\n    if len1 == len2 {\n        lst1\n    } else if len1 <\
    \ len2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n\
    \    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `(S, S)`\n  --> /tmp/tmpcmt1_3f2.rs:16:10\n\
    \   |\n16 |     let (len1, len2) = (lst1.iter().map(|s| s.len()).sum(), lst2.iter().map(|s|\
    \ s.len()).sum());\n   |         -^^^^-------\n   |         ||\n   |         |cannot\
    \ infer type\n   |         consider giving this pattern the explicit type `(S,\
    \ S)`, with the type parameters specified\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() < lst2.len() {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hi\", \"admin\"]`,\n right: `[\"hI\", \"hi\", \"hi\"]`', /tmp/tmp9e5ekt3l.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpar7a04mz.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in lst1.iter() {\n        total_chars_lst1 += i.len();\n    }\n    for i in\
    \ lst2.iter() {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1\
    \ < total_chars_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpns3ezo0a.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpar7a04mz.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut res = vec![];\n    let mut size1 = 0;\n    let mut size2 = 0;\n \
    \   for x in lst1.iter() {\n        size1 += x.len();\n    }\n    for x in lst2.iter()\
    \ {\n        size2 += x.len();\n    }\n    if size1 > size2 {\n        res = lst2;\n\
    \    } else {\n        res = lst1;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if len_lst(&lst1) > len_lst(&lst2) {\n        lst2\n    } else {\n      \
    \  lst1\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `len_lst` in this scope\n  --> /tmp/tmpuz6ogzzu.rs:16:8\n\
    \   |\n16 |     if len_lst(&lst1) > len_lst(&lst2) {\n   |        ^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `len_lst` in this\
    \ scope\n  --> /tmp/tmpuz6ogzzu.rs:16:25\n   |\n16 |     if len_lst(&lst1) > len_lst(&lst2)\
    \ {\n   |                         ^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    //Unimplemented!()\n    let mut total_count_lst1: i32 = 0;\n    let mut total_count_lst2:\
    \ i32 = 0;\n    let mut i: usize = 0;\n    while i < lst1.len() {\n        total_count_lst1\
    \ += lst1[i].len() as i32;\n        i += 1;\n    }\n    i = 0;\n    while i <\
    \ lst2.len() {\n        total_count_lst2 += lst2[i].len() as i32;\n        i +=\
    \ 1;\n    }\n    if total_count_lst1 < total_count_lst2 {\n        return lst1;\n\
    \    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmptg2_q3yn.rs:44:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return vec![];\n    }\n    if lst2.len() ==\
    \ 0 {\n        return lst1;\n    }\n    let mut sum1 = 0;\n    let mut sum2 =\
    \ 0;\n    for v in lst1.iter() {\n        sum1 += v.len();\n    }\n    for v in\
    \ lst2.iter() {\n        sum2 += v.len();\n    }\n    if sum1 > sum2 {\n     \
    \   return lst2;\n    }\n    return lst1;\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmph134y6el.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let t1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let t2 = lst2.iter().fold(0,\
    \ |acc, x| acc + x.len());\n    match t1.cmp(&t2) {\n        Ordering::Less =>\
    \ lst2,\n        _ => lst1,\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp94kmclji.rs:19:9\n   |\n19 |         Ordering::Less => lst2,\n   | \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_num_chars = lst1.iter().fold(0, |acc, s| acc + s.len());\n    let\
    \ lst2_num_chars = lst2.iter().fold(0, |acc, s| acc + s.len());\n    match lst1_num_chars.cmp(&lst2_num_chars)\
    \ {\n        Ordering::Less => lst2,\n        _ => lst1,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmptfa9luaa.rs:19:9\n   |\n19 |         Ordering::Less => lst2,\n   | \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total_size1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let total_size2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    match total_size1.cmp(&total_size2)\
    \ {\n        Ordering::Equal => lst1,\n        Ordering::Less => lst2,\n     \
    \   Ordering::Greater => lst1,\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp_39kskwb.rs:19:9\n   |\n19 |         Ordering::Equal => lst1,\n   |\
    \         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp_39kskwb.rs:20:9\n\
    \   |\n20 |         Ordering::Less => lst2,\n   |         ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmp_39kskwb.rs:21:9\n   |\n21 |         Ordering::Greater => lst1,\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_1 = 0;\n    let mut total_chars_2 = 0;\n    for i in\
    \ lst1.iter() {\n        total_chars_1 += i.len();\n    }\n    for i in lst2.iter()\
    \ {\n        total_chars_2 += i.len();\n    }\n    if total_chars_1 > total_chars_2\
    \ {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    } else if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n\n    let mut sum1 = 0;\n    let mut sum2 =\
    \ 0;\n\n    for s in lst1.iter() {\n        sum1 += s.len();\n    }\n\n    for\
    \ s in lst2.iter() {\n        sum2 += s.len();\n    }\n\n    if sum1 > sum2 {\n\
    \        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmpl39746ip.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut vec1 = vec![];\n    let mut vec2 = vec![];\n    for x in lst1 {\n\
    \        let cnt = x.chars().count();\n        vec1.push(cnt);\n    }\n    for\
    \ x in lst2 {\n        let cnt = x.chars().count();\n        vec2.push(cnt);\n\
    \    }\n    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for x in vec1 {\n  \
    \      sum1 += x;\n    }\n    for x in vec2 {\n        sum2 += x;\n    }\n   \
    \ if sum1 < sum2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpin7f2agm.rs:35:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for x in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n35  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for x in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpin7f2agm.rs:37:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n22 |   \
    \  for x in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n37 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n22 |    \
    \ for x in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_chars = 0;\n    let mut lst2_chars = 0;\n    for i in lst1.iter()\
    \ {\n        lst1_chars += i.len();\n    }\n    for i in lst2.iter() {\n     \
    \   lst2_chars += i.len();\n    }\n    if lst1_chars == lst2_chars {\n       \
    \ return lst1;\n    } else if lst1_chars < lst2_chars {\n        return lst1;\n\
    \    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_count = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let lst2_count\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if lst1_count < lst2_count\
    \ {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpznp64kxh.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_lst1 = 0;\n    let mut total_chars_lst2 = 0;\n    for\
    \ i in &lst1 {\n        total_chars_lst1 += i.len();\n    }\n    for i in &lst2\
    \ {\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1 <= total_chars_lst2\
    \ {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 { return lst2; }\n    if lst2.len() == 0 { return lst1;\
    \ }\n    let sum1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let sum2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    match sum1.cmp(&sum2) {\n\
    \        Ordering::Less => lst2,\n        Ordering::Greater => lst1,\n       \
    \ Ordering::Equal => lst1,\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpdow106a6.rs:21:9\n   |\n21 |         Ordering::Less => lst2,\n   | \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpdow106a6.rs:22:9\n\
    \   |\n22 |         Ordering::Greater => lst1,\n   |         ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpdow106a6.rs:23:9\n   |\n23 |         Ordering::Equal => lst1,\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut res = vec![];\n    if lst1.len() == 0 && lst2.len() == 0 {\n    \
    \    return res;\n    }\n    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for\
    \ s in lst1.iter() {\n        sum1 += s.len();\n    }\n    for s in lst2.iter()\
    \ {\n        sum2 += s.len();\n    }\n    if sum1 < sum2 {\n        res = lst1;\n\
    \    } else if sum1 > sum2 {\n        res = lst2;\n    } else {\n        res =\
    \ lst1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let count1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let count2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if count1 < count2 {\n \
    \       lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3wm4c7vx.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwk9p9kxl.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    return vec![];\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpv3h4wv9i.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    match total_chars(lst1) == total_chars(lst2) {\n        true => lst1,\n \
    \       false => {\n            match total_chars(lst1) < total_chars(lst2) {\n\
    \                true => lst1,\n                false => lst2,\n            }\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmp9699kjhw.rs:16:11\n\
    \   |\n16 |     match total_chars(lst1) == total_chars(lst2) {\n   |         \
    \  ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `total_chars`\
    \ in this scope\n  --> /tmp/tmp9699kjhw.rs:16:32\n   |\n16 |     match total_chars(lst1)\
    \ == total_chars(lst2) {\n   |                                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `total_chars` in this\
    \ scope\n  --> /tmp/tmp9699kjhw.rs:19:19\n   |\n19 |             match total_chars(lst1)\
    \ < total_chars(lst2) {\n   |                   ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `total_chars` in this scope\n  -->\
    \ /tmp/tmp9699kjhw.rs:19:39\n   |\n19 |             match total_chars(lst1) <\
    \ total_chars(lst2) {\n   |                                       ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_match = lst1.len();\n    let mut current_match = lst2.len();\n\
    \    let mut first_vector = Vec::new();\n    let mut second_vector = Vec::new();\n\
    \    for x in lst1.iter() {\n        total_match += x.len();\n    }\n    for x\
    \ in lst2.iter() {\n        current_match += x.len();\n    }\n    if total_match\
    \ == current_match {\n        first_vector = lst1;\n    } else if total_match\
    \ > current_match {\n        second_vector = lst2;\n    } else {\n        first_vector\
    \ = lst1;\n    }\n    first_vector\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmp1c4phbey.rs:39:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    vec![]\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpxxd5lass.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total1 = total_num_chars(&lst1);\n    let total2 = total_num_chars(&lst2);\n\
    \    if total1 > total2 {\n        lst2\n    } else {\n        lst1\n    }\n}\n\
    \nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_num_chars` in this scope\n  -->\
    \ /tmp/tmp0l_p0p9w.rs:16:18\n   |\n16 |     let total1 = total_num_chars(&lst1);\n\
    \   |                  ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `total_num_chars` in this scope\n  --> /tmp/tmp0l_p0p9w.rs:17:18\n\
    \   |\n17 |     let total2 = total_num_chars(&lst2);\n   |                  ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let len1 = lst1.iter().map(|s| s.len()).sum();\n    let len2 = lst2.iter().map(|s|\
    \ s.len()).sum();\n    if len1 <= len2 { lst1 } else { lst2 }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmptfzi4ljj.rs:16:9\n\
    \   |\n16 |     let len1 = lst1.iter().map(|s| s.len()).sum();\n   |         ^^^^\
    \ consider giving `len1` a type\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        lst1\n    } else if lst2.len() == 0 {\n   \
    \     lst2\n    } else {\n        let mut sum1 = 0;\n        let mut sum2 = 0;\n\
    \        for i in 0..lst1.len() {\n            sum1 += lst1[i].len();\n      \
    \  }\n        for i in 0..lst2.len() {\n            sum2 += lst2[i].len();\n \
    \       }\n        if sum1 < sum2 {\n            lst1\n        } else {\n    \
    \        lst2\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpumtke4k8.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwk9p9kxl.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \tlet mut lst1sum = 0;\n\tlet mut lst2sum = 0;\n\tfor x in lst1.iter() {\n\t\t\
    lst1sum += x.len();\n\t}\n\tfor x in lst2.iter() {\n\t\tlst2sum += x.len();\n\t\
    }\n\tif lst1sum == lst2sum {\n\t\treturn lst1;\n\t}\n\tif lst1sum < lst2sum {\n\
    \t\treturn lst1;\n\t}\n\treturn lst2;\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_total_chars = lst1.iter().fold(0, |sum, s| sum + s.len());\n   \
    \ let lst2_total_chars = lst2.iter().fold(0, |sum, s| sum + s.len());\n    if\
    \ lst1_total_chars == lst2_total_chars {\n        lst1\n    } else if lst1_total_chars\
    \ < lst2_total_chars {\n        lst1\n    } else {\n        lst2\n    }\n}\n\n\
    fn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // TODO\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpl_fptp1v.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // your code goes here\n    vec![]\n}\n\nfn main() {\n    let candidate =\
    \ total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmplta5r2km.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if total_num_chars(&lst1) < total_num_chars(&lst2) {\n        lst1\n    }\
    \ else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_num_chars` in this scope\n  -->\
    \ /tmp/tmp7tnt6g2c.rs:16:8\n   |\n16 |     if total_num_chars(&lst1) < total_num_chars(&lst2)\
    \ {\n   |        ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `total_num_chars` in this scope\n  --> /tmp/tmp7tnt6g2c.rs:16:33\n\
    \   |\n16 |     if total_num_chars(&lst1) < total_num_chars(&lst2) {\n   |   \
    \                              ^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_total_chars = lst1.iter().fold(0, |total, s| total + s.len());\n\
    \    let lst2_total_chars = lst2.iter().fold(0, |total, s| total + s.len());\n\
    \    if lst1_total_chars < lst2_total_chars {\n        lst1\n    } else {\n  \
    \      lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpo3nu2p1a.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for x in lst1.iter() {\n\
    \        total1 += x.len();\n    }\n    for x in lst2.iter() {\n        total2\
    \ += x.len();\n    }\n    if total1 == total2 {\n        return lst1;\n    } else\
    \ if total1 < total2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in &lst1 {\n\
    \        lst1_len += i.len();\n    }\n    for i in &lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len == lst2_len {\n        return lst1;\n    }\
    \ else if lst1_len < lst2_len {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total_chars_in_lst1 = total_chars(lst1);\n    let total_chars_in_lst2\
    \ = total_chars(lst2);\n    if total_chars_in_lst1 < total_chars_in_lst2 {\n \
    \       lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpr5sflvas.rs:16:31\n\
    \   |\n16 |     let total_chars_in_lst1 = total_chars(lst1);\n   |           \
    \                    ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `total_chars` in this scope\n  --> /tmp/tmpr5sflvas.rs:17:31\n\
    \   |\n17 |     let total_chars_in_lst2 = total_chars(lst2);\n   |           \
    \                    ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    vec![]\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpxxd5lass.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    return if total_char_count(&lst1) < total_char_count(&lst2) { lst1 } else\
    \ { lst2 };\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_char_count` in this scope\n \
    \ --> /tmp/tmpy153026b.rs:16:15\n   |\n16 |     return if total_char_count(&lst1)\
    \ < total_char_count(&lst2) { lst1 } else { lst2 };\n   |               ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_char_count`\
    \ in this scope\n  --> /tmp/tmpy153026b.rs:16:41\n   |\n16 |     return if total_char_count(&lst1)\
    \ < total_char_count(&lst2) { lst1 } else { lst2 };\n   |                    \
    \                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwk9p9kxl.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let count1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let count2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if count1 < count2 {\n \
    \       lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp3wm4c7vx.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum_lst1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let sum_lst2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if sum_lst1 < sum_lst2 {\n\
    \        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp48n3amax.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_total_char_num = lst1.iter().fold(0, |sum, item| sum + item.len());\n\
    \    let lst2_total_char_num = lst2.iter().fold(0, |sum, item| sum + item.len());\n\
    \    if lst1_total_char_num < lst2_total_char_num {\n        lst1\n    } else\
    \ {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmprpq1y1yp.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // write your code here\n    let mut sum1 = 0;\n    let mut sum2 = 0;\n \
    \   for i in lst1 {\n        sum1 += i.len();\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.len();\n    }\n    if sum1 < sum2 {\n        lst1\n    } else\
    \ {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpwfkhk572.rs:26:9\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n19  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n26  |         lst1\n    |         ^^^^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `lst1`\n\
    help: consider iterating over a slice of the `Vec<String>`'s content to avoid\
    \ moving into the `for` loop\n    |\n19  |     for i in &lst1 {\n    |       \
    \       +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpwfkhk572.rs:28:9\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n22 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n28 |         lst2\n   |         ^^^^ value used here\
    \ after move\n   |\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n   |\n22 |     for i in &lst2 {\n\
    \   |              +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut ret = lst1.clone();\n    let mut count1 = 0;\n    let mut count2\
    \ = 0;\n    for i in lst1 {\n        count1 += i.len();\n    }\n    for i in lst2\
    \ {\n        count2 += i.len();\n    }\n    if count1 > count2 {\n        ret\
    \ = lst2.clone();\n    }\n    ret\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `lst2`\n   --> /tmp/tmp5um2ufk_.rs:26:15\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n22  |  \
    \   for i in lst2 {\n    |              ---- `lst2` moved due to this implicit\
    \ call to `.into_iter()`\n...\n26  |         ret = lst2.clone();\n    |      \
    \         ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst2`\nhelp: consider iterating\
    \ over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n\
    \    |\n22  |     for i in &lst2 {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_size_lst1 = 0;\n    let mut total_size_lst2 = 0;\n    for word\
    \ in lst1.iter() {\n        total_size_lst1 += word.len();\n    }\n    for word\
    \ in lst2.iter() {\n        total_size_lst2 += word.len();\n    }\n    if total_size_lst1\
    \ < total_size_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpy9y79cix.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 && lst2.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for word in lst1.iter()\
    \ {\n        lst1_len += word.len();\n    }\n    for word in lst2.iter() {\n \
    \       lst2_len += word.len();\n    }\n    if lst1_len < lst2_len {\n       \
    \ return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n\
    \    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp0gy4totg.rs:42:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut res: Vec<String> = Vec::new();\n    let mut total1: i32 = 0;\n  \
    \  let mut total2: i32 = 0;\n    for i in 0..lst1.len() {\n        total1 += lst1[i].len()\
    \ as i32;\n    }\n    for i in 0..lst2.len() {\n        total2 += lst2[i].len()\
    \ as i32;\n    }\n    if total1 == total2 {\n        res = lst1;\n    } else if\
    \ total1 < total2 {\n        res = lst1;\n    } else {\n        res = lst2;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total_chars1 = lst1.iter().fold(0, |total, s| total + s.len());\n   \
    \ let total_chars2 = lst2.iter().fold(0, |total, s| total + s.len());\n    if\
    \ total_chars1 < total_chars2 {\n        lst1\n    } else {\n        lst2\n  \
    \  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpi83tlwoh.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let len1 = lst1.into_iter().map(|s| s.len()).sum();\n    let len2 = lst2.into_iter().map(|s|\
    \ s.len()).sum();\n    if len1 < len2 {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp8s56t3jn.rs:16:9\n\
    \   |\n16 |     let len1 = lst1.into_iter().map(|s| s.len()).sum();\n   |    \
    \     ^^^^ consider giving `len1` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let chars_lst1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n    let chars_lst2\
    \ = lst2.iter().map(|s| s.len()).sum::<usize>();\n    if chars_lst1 == chars_lst2\
    \ {\n        lst1\n    } else if chars_lst1 < chars_lst2 {\n        lst1\n   \
    \ } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // let l1_chars: usize = lst1.iter().fold(0, |acc, x| acc + x.len());\n \
    \   // let l2_chars: usize = lst2.iter().fold(0, |acc, x| acc + x.len());\n  \
    \  // if l1_chars < l2_chars {\n    //     lst1\n    // } else {\n    //     lst2\n\
    \    // }\n    if lst1.iter().fold(0, |acc, x| acc + x.len()) < lst2.iter().fold(0,\
    \ |acc, x| acc + x.len()) {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpjfpjvugv.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let list1_size = lst1.iter().fold(0, |acc, s| acc + s.len());\n    let list2_size\
    \ = lst2.iter().fold(0, |acc, s| acc + s.len());\n    if list1_size <= list2_size\
    \ {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    } else if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n\n    let mut total1 = 0;\n    let mut total2\
    \ = 0;\n\n    for item in lst1.iter() {\n        total1 += item.len();\n    }\n\
    \n    for item in lst2.iter() {\n        total2 += item.len();\n    }\n\n    if\
    \ total1 > total2 {\n        return lst2;\n    } else {\n        return lst1;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmpdrq8q1b8.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwk9p9kxl.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n    let mut sum1 = 0;\n    let mut sum2 = 0;\n\
    \    for item in lst1.iter() {\n        sum1 += item.len();\n    }\n    for item\
    \ in lst2.iter() {\n        sum2 += item.len();\n    }\n    if sum1 > sum2 {\n\
    \        return lst2;\n    }\n    return lst1;\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmps490khb9.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total_chars1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let\
    \ total_chars2 = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if total_chars1\
    \ < total_chars2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpd4px7fup.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_count = lst1.into_iter().map(|s| s.len()).sum();\n    let lst2_count\
    \ = lst2.into_iter().map(|s| s.len()).sum();\n    if lst1_count < lst2_count {\n\
    \        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpgij9jix5.rs:16:9\n\
    \   |\n16 |     let lst1_count = lst1.into_iter().map(|s| s.len()).sum();\n  \
    \ |         ^^^^^^^^^^ consider giving `lst1_count` a type\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0282`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum_1 = 0;\n    let mut sum_2 = 0;\n    for s in lst1.iter() {\n\
    \        sum_1 += s.len();\n    }\n    for s in lst2.iter() {\n        sum_2 +=\
    \ s.len();\n    }\n    if sum_1 <= sum_2 { lst1 } else { lst2 }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for i in lst1.iter() {\n\
    \        total1 += i.len();\n    }\n    for i in lst2.iter() {\n        total2\
    \ += i.len();\n    }\n    if total1 < total2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpar7a04mz.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 { return lst2 }\n    if lst2.len() == 0 { return lst1\
    \ }\n    if total_chars(&lst1) < total_chars(&lst2) {\n        return lst1\n \
    \   } else if total_chars(&lst1) > total_chars(&lst2) {\n        return lst2\n\
    \    } else {\n        return lst1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpw9ucfmku.rs:18:8\n\
    \   |\n18 |     if total_chars(&lst1) < total_chars(&lst2) {\n   |        ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_chars`\
    \ in this scope\n  --> /tmp/tmpw9ucfmku.rs:18:29\n   |\n18 |     if total_chars(&lst1)\
    \ < total_chars(&lst2) {\n   |                             ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `total_chars` in this scope\n\
    \  --> /tmp/tmpw9ucfmku.rs:20:15\n   |\n20 |     } else if total_chars(&lst1)\
    \ > total_chars(&lst2) {\n   |               ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpw9ucfmku.rs:20:36\n\
    \   |\n20 |     } else if total_chars(&lst1) > total_chars(&lst2) {\n   |    \
    \                                ^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if total_len(&lst1) < total_len(&lst2) { lst1 } else { lst2 }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_len` in this scope\n  --> /tmp/tmphlbz_sw5.rs:16:8\n\
    \   |\n16 |     if total_len(&lst1) < total_len(&lst2) { lst1 } else { lst2 }\n\
    \   |        ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `total_len` in this scope\n  --> /tmp/tmphlbz_sw5.rs:16:27\n   |\n16 |     if\
    \ total_len(&lst1) < total_len(&lst2) { lst1 } else { lst2 }\n   |           \
    \                ^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let len1 = lst1.iter().map(|s| s.len()).sum();\n    let len2 = lst2.iter().map(|s|\
    \ s.len()).sum();\n    if len1 < len2 {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpm8c77k05.rs:16:9\n\
    \   |\n16 |     let len1 = lst1.iter().map(|s| s.len()).sum();\n   |         ^^^^\
    \ consider giving `len1` a type\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum1 = lst1.iter().fold(0, |sum, i| sum + i.len());\n    let sum2 = lst2.iter().fold(0,\
    \ |sum, i| sum + i.len());\n    if sum1 <= sum2 {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_length: usize = lst1.iter().map(|x| x.len()).sum();\n    let lst2_length:\
    \ usize = lst2.iter().map(|x| x.len()).sum();\n    if lst1_length < lst2_length\
    \ {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpcegbucwi.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.is_empty() {\n        return lst2;\n    }\n    if lst2.is_empty()\
    \ {\n        return lst1;\n    }\n    let count1 = lst1.iter().fold(0, |acc, x|\
    \ acc + x.len());\n    let count2 = lst2.iter().fold(0, |acc, x| acc + x.len());\n\
    \    if count1 == count2 {\n        return lst1;\n    }\n    if count1 < count2\
    \ {\n        return lst1;\n    }\n    lst2\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmp7odwb91p.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut count1 = 0;\n    let mut count2 = 0;\n    for str in lst1.iter()\
    \ {\n        count1 += str.len();\n    }\n    for str in lst2.iter() {\n     \
    \   count2 += str.len();\n    }\n    if count1 < count2 {\n        return lst1;\n\
    \    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpvrrpcpih.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 && lst2.len() == 0 {\n        return lst1;\n    }\n  \
    \  let len1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let len2 = lst2.iter().fold(0,\
    \ |acc, x| acc + x.len());\n    if len1 == len2 {\n        return lst1;\n    }\n\
    \    if len1 < len2 {\n        return lst1;\n    }\n    lst2\n}\n\nfn main() {\n\
    \    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \tif lst1.len() == 0 && lst2.len() == 0 {\n\t\treturn lst1;\n\t}\n\n\tlet lst1_total_len\
    \ = lst1.iter().fold(0, |acc, s| acc + s.len());\n\tlet lst2_total_len = lst2.iter().fold(0,\
    \ |acc, s| acc + s.len());\n\n\tif lst1_total_len < lst2_total_len {\n\t\treturn\
    \ lst1;\n\t}\n\n\tlst2\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpdu654fwy.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 { return lst2; }\n    if lst2.len() == 0 { return lst1;\
    \ }\n    let mut total_len1 = 0;\n    let mut total_len2 = 0;\n    for i in lst1.iter()\
    \ {\n        for j in i.chars() {\n            total_len1 += 1;\n        }\n \
    \   }\n    for i in lst2.iter() {\n        for j in i.chars() {\n            total_len2\
    \ += 1;\n        }\n    }\n    if total_len1 == total_len2 {\n        return lst1;\n\
    \    } else if total_len1 < total_len2 {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmpyrx7_78s.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for x in lst1.iter() {\n  \
    \      sum1 += x.len();\n    }\n    for x in lst2.iter() {\n        sum2 += x.len();\n\
    \    }\n    if sum1 > sum2 {\n        return lst2;\n    }\n    return lst1;\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total1 = total_chars(&lst1);\n    let total2 = total_chars(&lst2);\n\
    \    if total1 == total2 {\n        lst1\n    } else if total1 < total2 {\n  \
    \      lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmp_re4405o.rs:16:18\n\
    \   |\n16 |     let total1 = total_chars(&lst1);\n   |                  ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_chars`\
    \ in this scope\n  --> /tmp/tmp_re4405o.rs:17:18\n   |\n17 |     let total2 =\
    \ total_chars(&lst2);\n   |                  ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let x = lst1.into_iter().map(|s| s.len()).sum::<usize>();\n    let y = lst2.into_iter().map(|s|\
    \ s.len()).sum::<usize>();\n    if x < y {\n        lst1\n    } else {\n     \
    \   lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpb7djt_ep.rs:19:9\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n16  |     let x = lst1.into_iter().map(|s|\
    \ s.len()).sum::<usize>();\n    |                  ----------- `lst1` moved due\
    \ to this method call\n...\n19  |         lst1\n    |         ^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `lst1`\n\nerror[E0382]: use of moved value: `lst2`\n  -->\
    \ /tmp/tmpb7djt_ep.rs:21:9\n   |\n15 | fn total_match(lst1: Vec<String>, lst2:\
    \ Vec<String>) -> Vec<String> {\n   |                                   ---- move\
    \ occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy`\
    \ trait\n16 |     let x = lst1.into_iter().map(|s| s.len()).sum::<usize>();\n\
    17 |     let y = lst2.into_iter().map(|s| s.len()).sum::<usize>();\n   |     \
    \             ----------- `lst2` moved due to this method call\n...\n21 |    \
    \     lst2\n   |         ^^^^ value used here after move\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total1 = lst1.iter().fold(0, |acc, s| acc + s.len());\n    let total2\
    \ = lst2.iter().fold(0, |acc, s| acc + s.len());\n    if total1 < total2 {\n \
    \       lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpiv7j_686.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // Write code here\n    let length_lst1 = lst1.iter().fold(0, |acc, x| acc\
    \ + x.len());\n    let length_lst2 = lst2.iter().fold(0, |acc, x| acc + x.len());\n\
    \    if length_lst1 > length_lst2 {\n        lst2\n    } else {\n        lst1\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_chars = lst1.iter().map(|x| x.len()).sum();\n    let lst2_chars\
    \ = lst2.iter().map(|x| x.len()).sum();\n    match lst1_chars.cmp(&lst2_chars)\
    \ {\n        std::cmp::Ordering::Less => lst2,\n        _ => lst1,\n    }\n}\n\
    \nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmppz_k4bdf.rs:18:11\n\
    \   |\n16 |     let lst1_chars = lst1.iter().map(|x| x.len()).sum();\n   |   \
    \      ---------- consider giving `lst1_chars` a type\n17 |     let lst2_chars\
    \ = lst2.iter().map(|x| x.len()).sum();\n18 |     match lst1_chars.cmp(&lst2_chars)\
    \ {\n   |           ^^^^^^^^^^ cannot infer type\n   |\n   = note: type must be\
    \ known at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if count_chars(&lst1) == count_chars(&lst2) {\n        return lst1;\n   \
    \ } else if count_chars(&lst1) < count_chars(&lst2) {\n        return lst1;\n\
    \    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_chars` in this scope\n  --> /tmp/tmpyzrbfc3k.rs:16:8\n\
    \   |\n16 |     if count_chars(&lst1) == count_chars(&lst2) {\n   |        ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_chars`\
    \ in this scope\n  --> /tmp/tmpyzrbfc3k.rs:16:30\n   |\n16 |     if count_chars(&lst1)\
    \ == count_chars(&lst2) {\n   |                              ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `count_chars` in this scope\n\
    \  --> /tmp/tmpyzrbfc3k.rs:18:15\n   |\n18 |     } else if count_chars(&lst1)\
    \ < count_chars(&lst2) {\n   |               ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `count_chars` in this scope\n  --> /tmp/tmpyzrbfc3k.rs:18:36\n\
    \   |\n18 |     } else if count_chars(&lst1) < count_chars(&lst2) {\n   |    \
    \                                ^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n    let mut total_lst1 = 0;\n    let mut total_lst2\
    \ = 0;\n    for i in lst1 {\n        total_lst1 += i.len();\n    }\n    for i\
    \ in lst2 {\n        total_lst2 += i.len();\n    }\n    if total_lst1 < total_lst2\
    \ {\n        return lst1;\n    }\n    return lst2;\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpdlc3d52g.rs:31:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n24  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n31  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n24  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpdlc3d52g.rs:33:12\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n27 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n33 |     return lst2;\n   |            ^^^^ value used\
    \ here after move\n   |\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n   |\n27 |     for i in &lst2 {\n\
    \   |              +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total1 = lst1.iter().fold(0, |acc, s| acc + s.len());\n    let total2\
    \ = lst2.iter().fold(0, |acc, s| acc + s.len());\n    if total1 < total2 {\n \
    \       lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpiv7j_686.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \tlet vec_len = |n: &Vec<String>| n.iter().map(|x| x.len()).sum::<usize>();\n\t\
    if vec_len(&lst1) < vec_len(&lst2) {\n\t\tlst1\n\t} else {\n\t\tlst2\n\t}\n}\n\
    \nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp2edm78of.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut result = Vec::new();\n    let mut count1 = 0;\n    let mut count2\
    \ = 0;\n    for i in lst1.iter() {\n        count1 += i.len();\n    }\n    for\
    \ i in lst2.iter() {\n        count2 += i.len();\n    }\n    if count1 > count2\
    \ {\n        result = lst2;\n    } else if count1 < count2 {\n        result =\
    \ lst1;\n    } else {\n        result = lst1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_match = lst1.clone();\n    let mut total_unmatch = lst2.clone();\n\
    \    if lst1.len() == 0 && lst2.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut lst1_count = 0;\n    let mut lst2_count = 0;\n    for i in lst1 {\n\
    \        lst1_count += i.len();\n    }\n    for i in lst2 {\n        lst2_count\
    \ += i.len();\n    }\n    if lst1_count < lst2_count {\n        return total_match;\n\
    \    } else if lst1_count > lst2_count {\n        return total_unmatch;\n    }\
    \ else {\n        return total_match;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if (total_chars(&lst1) < total_chars(&lst2)) || (total_chars(&lst1) == total_chars(&lst2))\
    \ {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpa5_kukld.rs:16:9\n\
    \   |\n16 |     if (total_chars(&lst1) < total_chars(&lst2)) || (total_chars(&lst1)\
    \ == total_chars(&lst2)) {\n   |         ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpa5_kukld.rs:16:30\n\
    \   |\n16 |     if (total_chars(&lst1) < total_chars(&lst2)) || (total_chars(&lst1)\
    \ == total_chars(&lst2)) {\n   |                              ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `total_chars` in this\
    \ scope\n  --> /tmp/tmpa5_kukld.rs:16:54\n   |\n16 |     if (total_chars(&lst1)\
    \ < total_chars(&lst2)) || (total_chars(&lst1) == total_chars(&lst2)) {\n   |\
    \                                                      ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `total_chars` in this scope\n\
    \  --> /tmp/tmpa5_kukld.rs:16:76\n   |\n16 |     if (total_chars(&lst1) < total_chars(&lst2))\
    \ || (total_chars(&lst1) == total_chars(&lst2)) {\n   |                      \
    \                                                      ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let len1 = lst1.iter().map(|s| s.len()).sum();\n    let len2 = lst2.iter().map(|s|\
    \ s.len()).sum();\n    if len1 < len2 {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpm8c77k05.rs:16:9\n\
    \   |\n16 |     let len1 = lst1.iter().map(|s| s.len()).sum();\n   |         ^^^^\
    \ consider giving `len1` a type\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in &lst1 {\n        sum1\
    \ += i.len();\n    }\n    for i in &lst2 {\n        sum2 += i.len();\n    }\n\
    \    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\n\
    fn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp22a1q4pb.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut ret = lst1.clone();\n    if total_chars(lst1) > total_chars(lst2)\
    \ {\n        ret = lst2.clone();\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpeqsegs7b.rs:17:8\n\
    \   |\n17 |     if total_chars(lst1) > total_chars(lst2) {\n   |        ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_chars`\
    \ in this scope\n  --> /tmp/tmpeqsegs7b.rs:17:28\n   |\n17 |     if total_chars(lst1)\
    \ > total_chars(lst2) {\n   |                            ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // unimplemented!()\n    let len1 = total_length(&lst1);\n    let len2 =\
    \ total_length(&lst2);\n    match len1.cmp(&len2) {\n        Ordering::Less =>\
    \ lst2,\n        Ordering::Equal => lst1,\n        Ordering::Greater => lst1,\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpn_vox29l.rs:20:9\n   |\n20 |         Ordering::Less => lst2,\n   | \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpn_vox29l.rs:21:9\n\
    \   |\n21 |         Ordering::Equal => lst1,\n   |         ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpn_vox29l.rs:22:9\n   |\n22 |         Ordering::Greater => lst1,\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]: cannot\
    \ find function `total_length` in this scope\n  --> /tmp/tmpn_vox29l.rs:17:16\n\
    \   |\n17 |     let len1 = total_length(&lst1);\n   |                ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_length`\
    \ in this scope\n  --> /tmp/tmpn_vox29l.rs:18:16\n   |\n18 |     let len2 = total_length(&lst2);\n\
    \   |                ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut first = 0;\n    let mut second = 0;\n    for i in lst1 {\n      \
    \  first += i.len();\n    }\n    for i in lst2 {\n        second += i.len();\n\
    \    }\n    if first > second {\n        return lst2;\n    } else {\n        return\
    \ lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmp5xngdzdp.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21  |  \
    \   for i in lst2 {\n    |              ---- `lst2` moved due to this implicit\
    \ call to `.into_iter()`\n...\n25  |         return lst2;\n    |             \
    \   ^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst2`\nhelp: consider iterating over a\
    \ slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n \
    \   |\n21  |     for i in &lst2 {\n    |              +\n\nerror[E0382]: use of\
    \ moved value: `lst1`\n  --> /tmp/tmp5xngdzdp.rs:27:16\n   |\n15 | fn total_match(lst1:\
    \ Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                ---- move\
    \ occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy`\
    \ trait\n...\n18 |     for i in lst1 {\n   |              ---- `lst1` moved due\
    \ to this implicit call to `.into_iter()`\n...\n27 |         return lst1;\n  \
    \ |                ^^^^ value used here after move\n   |\nhelp: consider iterating\
    \ over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n\
    \   |\n18 |     for i in &lst1 {\n   |              +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut s1: usize = 0;\n    let mut s2: usize = 0;\n    for item in lst1.iter()\
    \ {\n        s1 += item.len();\n    }\n    for item in lst2.iter() {\n       \
    \ s2 += item.len();\n    }\n    if s1 < s2 {\n        lst1\n    } else {\n   \
    \     lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpb9a2c6fh.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \tlet count1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n\tlet count2 = lst2.iter().fold(0,\
    \ |acc, x| acc + x.len());\n\tif count1 < count2 {\n\t\tlst1\n\t} else {\n\t\t\
    lst2\n\t}\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp10_09bkp.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for s in lst1.iter() {\n  \
    \      sum1 += s.len();\n    }\n    for s in lst2.iter() {\n        sum2 += s.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgf4gtp49.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut count_1 = 0;\n    let mut count_2 = 0;\n    for item in lst1.iter()\
    \ {\n        count_1 += item.len();\n    }\n    for item in lst2.iter() {\n  \
    \      count_2 += item.len();\n    }\n    if count_1 < count_2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmperpyz4hq.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let sum2 = lst2.iter().fold(0,\
    \ |acc, x| acc + x.len());\n    if sum1 < sum2 {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmph4owtok_.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total_len_vec1 = lst1.iter().fold(0, |sum, s| sum + s.len());\n    let\
    \ total_len_vec2 = lst2.iter().fold(0, |sum, s| sum + s.len());\n    if total_len_vec1\
    \ < total_len_vec2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn\
    \ main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp5rkj0_34.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let size1 = lst1.iter().fold(0, |acc, s| acc + s.len());\n    let size2 =\
    \ lst2.iter().fold(0, |acc, s| acc + s.len());\n    if size1 <= size2 {\n    \
    \    lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum1 = lst1.iter().fold(0, |sum, word| sum + word.len());\n    let sum2\
    \ = lst2.iter().fold(0, |sum, word| sum + word.len());\n    if sum1 <= sum2 {\n\
    \        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut count1 = 0;\n    let mut count2 = 0;\n    for i in &lst1 {\n    \
    \    count1 += i.len();\n    }\n    for i in &lst2 {\n        count2 += i.len();\n\
    \    }\n    if count1 < count2 {\n        lst1\n    } else {\n        lst2\n \
    \   }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp0yivqcvk.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        lst1\n    } else if lst2.len() == 0 {\n   \
    \     lst2\n    } else {\n        let mut t1 = 0;\n        let mut t2 = 0;\n \
    \       for n in lst1.iter() {\n            t1 += n.len();\n        }\n      \
    \  for n in lst2.iter() {\n            t2 += n.len();\n        }\n        if t1\
    \ > t2 {\n            lst2\n        } else if t1 < t2 {\n            lst1\n  \
    \      } else {\n            lst1\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut n1 = 0;\n    let mut n2 = 0;\n    for s in lst1.iter() {\n      \
    \  n1 += s.len();\n    }\n    for s in lst2.iter() {\n        n2 += s.len();\n\
    \    }\n    if n1 > n2 {\n        lst2\n    } else {\n        lst1\n    }\n}\n\
    \nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst2;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst1;\n    }\n    let mut lst1_sum: u64 = 0;\n    let mut\
    \ lst2_sum: u64 = 0;\n    for x in lst1.iter() {\n        lst1_sum += x.len()\
    \ as u64;\n    }\n    for x in lst2.iter() {\n        lst2_sum += x.len() as u64;\n\
    \    }\n    if lst1_sum == lst2_sum {\n        return lst1;\n    }\n    if lst1_sum\
    \ < lst2_sum {\n        return lst1;\n    }\n    return lst2;\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmp207z9na8.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut res = lst1.clone();\n    let mut cnt1 = 0;\n    let mut cnt2 = 0;\n\
    \    for item in lst1 {\n        cnt1 += item.len();\n    }\n    for item in lst2\
    \ {\n        cnt2 += item.len();\n    }\n    if cnt1 == cnt2 {\n        return\
    \ res;\n    } else if cnt1 > cnt2 {\n        res = lst2.clone();\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `lst2`\n   --> /tmp/tmploa81uex.rs:28:15\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n22  |  \
    \   for item in lst2 {\n    |                 ---- `lst2` moved due to this implicit\
    \ call to `.into_iter()`\n...\n28  |         res = lst2.clone();\n    |      \
    \         ^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst2`\nhelp: consider iterating\
    \ over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n\
    \    |\n22  |     for item in &lst2 {\n    |                 +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // TODO:\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb2onel46.rs:17:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_lst1 = 0;\n    let mut total_lst2 = 0;\n    for s in lst1.iter()\
    \ {\n        total_lst1 += s.len();\n    }\n    for s in lst2.iter() {\n     \
    \   total_lst2 += s.len();\n    }\n    if total_lst1 < total_lst2 {\n        lst1\n\
    \    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpao25g5tl.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    match lst1.len() {\n        0 => vec![],\n        _ => {\n            let\
    \ mut lst1_length: usize = 0;\n            let mut lst2_length: usize = 0;\n \
    \           for element in lst1.iter() {\n                lst1_length += element.len();\n\
    \            }\n            for element in lst2.iter() {\n                lst2_length\
    \ += element.len();\n            }\n            if lst1_length < lst2_length {\n\
    \                lst1\n            } else {\n                lst2\n          \
    \  }\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpn28or2sb.rs:44:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum_len1 = lst1.iter().fold(0, |sum, string| sum + string.len());\n \
    \   let sum_len2 = lst2.iter().fold(0, |sum, string| sum + string.len());\n  \
    \  if sum_len1 == sum_len2 {\n        lst1\n    } else if sum_len1 < sum_len2\
    \ {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total_chars_1 = lst1.iter().fold(0, |total, s| total + s.len());\n  \
    \  let total_chars_2 = lst2.iter().fold(0, |total, s| total + s.len());\n    if\
    \ total_chars_1 < total_chars_2 {\n        lst1\n    } else {\n        lst2\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpodgcm5fn.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut char_count1 = 0;\n    let mut char_count2 = 0;\n    for i in lst1.iter()\
    \ {\n        char_count1 += i.len();\n    }\n    for i in lst2.iter() {\n    \
    \    char_count2 += i.len();\n    }\n    if char_count1 < char_count2 {\n    \
    \    lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpn57_alk2.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let total1 = sum_vec(lst1);\n    let total2 = sum_vec(lst2);\n    if total1\
    \ < total2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_vec` in this scope\n  --> /tmp/tmphwhsmioc.rs:16:18\n\
    \   |\n16 |     let total1 = sum_vec(lst1);\n   |                  ^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `sum_vec` in this\
    \ scope\n  --> /tmp/tmphwhsmioc.rs:17:18\n   |\n17 |     let total2 = sum_vec(lst2);\n\
    \   |                  ^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut count1 = 0;\n    let mut count2 = 0;\n    for i in lst1.iter() {\n\
    \        count1 += i.len();\n    }\n    for i in lst2.iter() {\n        count2\
    \ += i.len();\n    }\n    if count1 < count2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmphe1hnrcn.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut lst1_len = 0;\n    let mut lst2_len = 0;\n    for i in lst1 {\n \
    \       lst1_len += i.len();\n    }\n    for i in lst2 {\n        lst2_len +=\
    \ i.len();\n    }\n    if lst1_len < lst2_len {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpgzz6wufy.rs:25:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpgzz6wufy.rs:27:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // your code here\n    let mut count1 = 0;\n    let mut count2 = 0;\n   \
    \ for item in lst1 {\n        count1 += item.len();\n    }\n    for item in lst2\
    \ {\n        count2 += item.len();\n    }\n    if count1 > count2 {\n        return\
    \ lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmpt3in78pi.rs:26:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n22  |  \
    \   for item in lst2 {\n    |                 ---- `lst2` moved due to this implicit\
    \ call to `.into_iter()`\n...\n26  |         return lst2;\n    |             \
    \   ^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst2`\nhelp: consider iterating over a\
    \ slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n \
    \   |\n22  |     for item in &lst2 {\n    |                 +\n\nerror[E0382]:\
    \ use of moved value: `lst1`\n  --> /tmp/tmpt3in78pi.rs:28:16\n   |\n15 | fn total_match(lst1:\
    \ Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                ---- move\
    \ occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy`\
    \ trait\n...\n19 |     for item in lst1 {\n   |                 ---- `lst1` moved\
    \ due to this implicit call to `.into_iter()`\n...\n28 |         return lst1;\n\
    \   |                ^^^^ value used here after move\n   |\nhelp: consider iterating\
    \ over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n\
    \   |\n19 |     for item in &lst1 {\n   |                 +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let (v1, v2) = (lst1.iter().map(|x| x.len()).sum(), lst2.iter().map(|x| x.len()).sum());\n\
    \    if v1 <= v2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `(S, S)`\n  --> /tmp/tmpfgfub250.rs:16:10\n\
    \   |\n16 |     let (v1, v2) = (lst1.iter().map(|x| x.len()).sum(), lst2.iter().map(|x|\
    \ x.len()).sum());\n   |         -^^-----\n   |         ||\n   |         |cannot\
    \ infer type\n   |         consider giving this pattern the explicit type `(S,\
    \ S)`, with the type parameters specified\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_chars_first = 0;\n    let mut total_chars_second = 0;\n   \
    \ for i in lst1.iter() {\n        total_chars_first += i.len();\n    }\n    for\
    \ i in lst2.iter() {\n        total_chars_second += i.len();\n    }\n    if total_chars_first\
    \ < total_chars_second {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp15yg49a6.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwk9p9kxl.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut count1 = 0;\n    let mut count2 = 0;\n    for i in lst1.iter() {\n\
    \        count1 += i.len();\n    }\n    for i in lst2.iter() {\n        count2\
    \ += i.len();\n    }\n    if count1 < count2 {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmphe1hnrcn.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 && lst2.len() == 0 {\n        return vec![];\n    }\n\
    \    let mut res1 = 0;\n    let mut res2 = 0;\n    for i in lst1 {\n        res1\
    \ += i.len();\n    }\n    for i in lst2 {\n        res2 += i.len();\n    }\n \
    \   if res1 < res2 {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp92gnmosw.rs:28:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n21  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n28  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n21  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp92gnmosw.rs:30:16\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n24 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n30 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n24 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut count1 = 0;\n    let mut count2 = 0;\n    for s in lst1.iter() {\n\
    \        count1 += s.len();\n    }\n    for s in lst2.iter() {\n        count2\
    \ += s.len();\n    }\n    if count1 < count2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpre_5msoy.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst1;\n    }\n    let total_num_chars_lst1\
    \ = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let total_num_chars_lst2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if total_num_chars_lst1\
    \ == total_num_chars_lst2 {\n        return lst1;\n    }\n    if total_num_chars_lst1\
    \ < total_num_chars_lst2 {\n        return lst1;\n    }\n    lst2\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() > lst2.len() {\n        lst2\n    } else {\n        lst1\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpj2ntjjfe.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    match total_len(lst1.clone()) <= total_len(lst2.clone()) {\n        true\
    \ => lst1,\n        false => lst2,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_len` in this scope\n  --> /tmp/tmpk6vhg1v6.rs:16:11\n\
    \   |\n16 |     match total_len(lst1.clone()) <= total_len(lst2.clone()) {\n \
    \  |           ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `total_len` in this scope\n  --> /tmp/tmpk6vhg1v6.rs:16:38\n   |\n\
    16 |     match total_len(lst1.clone()) <= total_len(lst2.clone()) {\n   |    \
    \                                  ^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for s in lst1.iter() {\n  \
    \      sum1 += s.len();\n    }\n    for s in lst2.iter() {\n        sum2 += s.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgf4gtp49.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 {\n        return lst1;\n    }\n    if lst2.len() == 0\
    \ {\n        return lst2;\n    }\n    let mut lst1_sum: usize = 0;\n    let mut\
    \ lst2_sum: usize = 0;\n    for item in lst1.iter() {\n        lst1_sum += item.len();\n\
    \    }\n    for item in lst2.iter() {\n        lst2_sum += item.len();\n    }\n\
    \    if lst1_sum == lst2_sum {\n        return lst1;\n    }\n    if lst1_sum <\
    \ lst2_sum {\n        return lst1;\n    }\n    else {\n        return lst2;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if total_num_chars(&lst1) < total_num_chars(&lst2) {\n        lst1\n    }\
    \ else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_num_chars` in this scope\n  -->\
    \ /tmp/tmp7tnt6g2c.rs:16:8\n   |\n16 |     if total_num_chars(&lst1) < total_num_chars(&lst2)\
    \ {\n   |        ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `total_num_chars` in this scope\n  --> /tmp/tmp7tnt6g2c.rs:16:33\n\
    \   |\n16 |     if total_num_chars(&lst1) < total_num_chars(&lst2) {\n   |   \
    \                              ^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976423
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwk9p9kxl.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \tif lst1.len() == 0 {\n\t\treturn lst2;\n\t}\n\tlet mut len1 = 0;\n\tlet mut\
    \ len2 = 0;\n\tfor x in lst1.iter() {\n\t\tlen1 += x.len();\n\t}\n\tfor x in lst2.iter()\
    \ {\n\t\tlen2 += x.len();\n\t}\n\tif len1 == len2 {\n\t\treturn lst1;\n\t}\n\t\
    if len1 < len2 {\n\t\treturn lst1;\n\t}\n\tlst2\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"this\"]`,\n right: `[]`', /tmp/tmprau08e8h.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total1 = 0;\n    let mut total2 = 0;\n    for s in lst1.iter() {\n\
    \        total1 += s.len();\n    }\n    for s in lst2.iter() {\n        total2\
    \ += s.len();\n    }\n    if total1 < total2 {\n        lst1\n    } else {\n \
    \       lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpmbt96dze.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for n in lst1.iter() {\n  \
    \      sum1 += n.len();\n    }\n    for n in lst2.iter() {\n        sum2 += n.len();\n\
    \    }\n    if sum1 <= sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    // if lst1.len() == 0 && lst2.len() == 0 {\n    //     return lst1;\n   \
    \ // }\n\n    let mut count1 = 0;\n    let mut count2 = 0;\n\n    for item in\
    \ lst1.iter() {\n        count1 += item.len();\n    }\n\n    for item in lst2.iter()\
    \ {\n        count2 += item.len();\n    }\n\n    if count1 == count2 {\n     \
    \   return lst1;\n    } else if count1 < count2 {\n        return lst1;\n    }\
    \ else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \tlet mut sum_str1 = 0;\n\tlet mut sum_str2 = 0;\n\tfor i in lst1 {\n\t\tsum_str1\
    \ += i.len();\n\t}\n\tfor i in lst2 {\n\t\tsum_str2 += i.len();\n\t}\n\tif sum_str1\
    \ < sum_str2 {\n\t\treturn lst1;\n\t} else {\n\t\treturn lst2;\n\t}\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp64v16d5q.rs:25:10\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n\
    \    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n\
    ...\n25  |         return lst1;\n    |                ^^^^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content\
    \ to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n   \
    \ |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp64v16d5q.rs:27:10\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   \
    \  for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call\
    \ to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^\
    \ value used here after move\n   |\nhelp: consider iterating over a slice of the\
    \ `Vec<String>`'s content to avoid moving into the `for` loop\n   |\n21 |    \
    \ for i in &lst2 {\n   |              +\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = total_match;\n  \
    \  assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpqkyttmqp.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut res = lst1.clone();\n    let mut count1 = 0;\n    let mut count2\
    \ = 0;\n    for i in 0..lst1.len() {\n        for j in 0..lst1[i].len() {\n  \
    \          count1 += 1;\n        }\n    }\n    for i in 0..lst2.len() {\n    \
    \    for j in 0..lst2[i].len() {\n            count2 += 1;\n        }\n    }\n\
    \    if count1 > count2 {\n        res = lst2.clone();\n    } else if count1 ==\
    \ count2 {\n        res = lst1.clone();\n    }\n    res\n}\n\nfn main() {\n  \
    \  let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let c1 = lst1.iter().map(|x| x.len()).sum::<usize>();\n    let c2 = lst2.iter().map(|x|\
    \ x.len()).sum::<usize>();\n    if c1 == c2 {\n        lst1\n    } else if c1\
    \ < c2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n\
    \    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwk9p9kxl.rs:16:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822845
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if total_chars(&lst1) < total_chars(&lst2) {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpea1jw5mu.rs:16:8\n\
    \   |\n16 |     if total_chars(&lst1) < total_chars(&lst2) {\n   |        ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_chars`\
    \ in this scope\n  --> /tmp/tmpea1jw5mu.rs:16:29\n   |\n16 |     if total_chars(&lst1)\
    \ < total_chars(&lst2) {\n   |                             ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \tlet v1_len = lst1.iter().fold(0, |acc, x| acc + x.len());\n\tlet v2_len = lst2.iter().fold(0,\
    \ |acc, x| acc + x.len());\n\tif v1_len <= v2_len {\n\t\tlst1\n\t} else {\n\t\t\
    lst2\n\t}\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut v1: Vec<String> = Vec::new();\n    let mut v2: Vec<String> = Vec::new();\n\
    \    let mut v: Vec<String> = Vec::new();\n    let mut total = 0;\n    let mut\
    \ total2 = 0;\n    for i in lst1.iter() {\n        total += i.len();\n    }\n\
    \    for i in lst2.iter() {\n        total2 += i.len();\n    }\n    if total <\
    \ total2 {\n        v = lst1;\n    } else if total2 < total {\n        v = lst2;\n\
    \    } else {\n        v = lst1;\n    }\n    for i in v.iter() {\n        v1.push(i.to_string());\n\
    \    }\n    v1\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if total_chars(&lst1) < total_chars(&lst2) {\n        lst1\n    } else {\n\
    \        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n   \
    \ assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpea1jw5mu.rs:16:8\n\
    \   |\n16 |     if total_chars(&lst1) < total_chars(&lst2) {\n   |        ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `total_chars`\
    \ in this scope\n  --> /tmp/tmpea1jw5mu.rs:16:29\n   |\n16 |     if total_chars(&lst1)\
    \ < total_chars(&lst2) {\n   |                             ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let count1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let count2\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    match count1.cmp(&count2)\
    \ {\n        Ordering::Less => lst2,\n        Ordering::Greater => lst1,\n   \
    \     Ordering::Equal => lst1,\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp9bhz7qgg.rs:19:9\n   |\n19 |         Ordering::Less => lst2,\n   | \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp9bhz7qgg.rs:20:9\n\
    \   |\n20 |         Ordering::Greater => lst1,\n   |         ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmp9bhz7qgg.rs:21:9\n   |\n21 |         Ordering::Equal => lst1,\n\
    \   |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_size = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let lst2_size\
    \ = lst2.iter().fold(0, |acc, x| acc + x.len());\n    if lst1_size == lst2_size\
    \ {\n        lst1\n    } else if lst1_size < lst2_size {\n        lst1\n    }\
    \ else {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut s1 = 0;\n    let mut s2 = 0;\n    for i in &lst1 {\n        s1 +=\
    \ i.len();\n    }\n    for i in &lst2 {\n        s2 += i.len();\n    }\n    if\
    \ s1 < s2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n\
    \    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpe67yiq09.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    //Your code goes here\n    let mut x = 0;\n    let mut y = 0;\n    for i\
    \ in lst1 {\n        x += i.len();\n    }\n    for i in lst2 {\n        y += i.len();\n\
    \    }\n    if x > y {\n        return lst2;\n    } else {\n        return lst1;\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmpphdahv01.rs:26:16\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n22  |  \
    \   for i in lst2 {\n    |              ---- `lst2` moved due to this implicit\
    \ call to `.into_iter()`\n...\n26  |         return lst2;\n    |             \
    \   ^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst2`\nhelp: consider iterating over a\
    \ slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n \
    \   |\n22  |     for i in &lst2 {\n    |              +\n\nerror[E0382]: use of\
    \ moved value: `lst1`\n  --> /tmp/tmpphdahv01.rs:28:16\n   |\n15 | fn total_match(lst1:\
    \ Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                ---- move\
    \ occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy`\
    \ trait\n...\n19 |     for i in lst1 {\n   |              ---- `lst1` moved due\
    \ to this implicit call to `.into_iter()`\n...\n28 |         return lst1;\n  \
    \ |                ^^^^ value used here after move\n   |\nhelp: consider iterating\
    \ over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n\
    \   |\n19 |     for i in &lst1 {\n   |              +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for s in lst1.iter() {\n  \
    \      sum1 += s.len();\n    }\n    for s in lst2.iter() {\n        sum2 += s.len();\n\
    \    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n        lst2\n    }\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpgf4gtp49.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let t1 = lst1.iter().fold(0, |acc, x| acc + x.len());\n    let t2 = lst2.iter().fold(0,\
    \ |acc, x| acc + x.len());\n    if t1 < t2 {\n        lst1\n    } else {\n   \
    \     lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpo1ny9sun.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 && lst2.len() == 0 {\n        return vec![];\n    }\n\n\
    \    let sum1 = lst1.iter().fold(0, |sum, value| sum + value.len());\n    let\
    \ sum2 = lst2.iter().fold(0, |sum, value| sum + value.len());\n\n    if sum1 ==\
    \ sum2 {\n        return lst1;\n    }\n\n    if sum1 < sum2 {\n        return\
    \ lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let sum1 = lst1.iter().fold(0, |total, l| total + l.len());\n    let sum2\
    \ = lst2.iter().fold(0, |total, l| total + l.len());\n    if sum1 < sum2 { lst1\
    \ } else { lst2 }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpx5kb2h5i.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_char_lst1 = 0;\n    let mut total_char_lst2 = 0;\n    for e\
    \ in lst1.iter() {\n        total_char_lst1 += e.len();\n    }\n    for e in lst2.iter()\
    \ {\n        total_char_lst2 += e.len();\n    }\n    if total_char_lst1 < total_char_lst2\
    \ {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmp38nlkke9.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let num_chars1 = lst1.iter().fold(0, |sum, st| sum + st.len());\n    let\
    \ num_chars2 = lst2.iter().fold(0, |sum, st| sum + st.len());\n    if num_chars1\
    \ < num_chars2 {\n        lst1\n    } else {\n        lst2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpuhdznxs3.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut chars1 = 0;\n    let mut chars2 = 0;\n    for item in lst1.iter()\
    \ {\n        chars1 += item.len();\n    }\n    for item in lst2.iter() {\n   \
    \     chars2 += item.len();\n    }\n    if chars1 > chars2 {\n        return lst2;\n\
    \    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut list1_total = 0;\n    let mut list2_total = 0;\n    for i in &lst1\
    \ {\n        list1_total += i.len();\n    }\n    for i in &lst2 {\n        list2_total\
    \ += i.len();\n    }\n    if list1_total > list2_total {\n        return lst2;\n\
    \    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let lst1_len = lst1.iter().fold(0, |acc, s| acc + s.len());\n    let lst2_len\
    \ = lst2.iter().fold(0, |acc, s| acc + s.len());\n    if lst1_len == lst2_len\
    \ {\n        lst1\n    } else if lst1_len < lst2_len {\n        lst1\n    } else\
    \ {\n        lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 1
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == 0 && lst2.len() == 0 {\n        vec![]\n    } else if total_chars(&lst1)\
    \ < total_chars(&lst2) {\n        lst1\n    } else {\n        lst2\n    }\n}\n\
    \nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `total_chars` in this scope\n  --> /tmp/tmpc0t1vbmh.rs:18:15\n\
    \   |\n18 |     } else if total_chars(&lst1) < total_chars(&lst2) {\n   |    \
    \           ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `total_chars` in this scope\n  --> /tmp/tmpc0t1vbmh.rs:18:36\n   |\n18 |   \
    \  } else if total_chars(&lst1) < total_chars(&lst2) {\n   |                 \
    \                   ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976424
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum_lst1 = 0;\n    let mut sum_lst2 = 0;\n    for item in lst1.iter()\
    \ {\n        sum_lst1 += item.len();\n    }\n    for item in lst2.iter() {\n \
    \       sum_lst2 += item.len();\n    }\n    if sum_lst1 < sum_lst2 {\n       \
    \ return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n\
    \    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpes4jjhfh.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976425
- exit_code: 0
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if (lst1.iter().map(|e| e.len()).sum::<usize>())\n        > (lst2.iter().map(|e|\
    \ e.len()).sum::<usize>())\n    {\n        lst2\n    } else {\n        lst1\n\
    \    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976425
- exit_code: 101
  program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for elem in lst1.iter() {\n\
    \        sum1 += elem.len();\n    }\n    for elem in lst2.iter() {\n        sum2\
    \ += elem.len();\n    }\n    if sum1 < sum2 {\n        lst1\n    } else {\n  \
    \      lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hI\", \"hi\", \"hii\"]`,\n right: `[\"hi\", \"admin\"]`', /tmp/tmpqculua33.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976425
