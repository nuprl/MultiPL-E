name: HumanEval_95_check_dict_case
language: rs
prompt: "use std::collections::HashMap;\n\n/// Given a HashMap, return true if all\
  \ keys are strings in lower \n/// case or all keys are strings in upper case, else\
  \ return false.\n/// The function should return false is the given HashMap is empty.\n\
  /// Examples:\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"\
  apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\n/// true\n/// >>>\
  \ check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")),\
  \ (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"\
  banana\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"\
  a\"), String::from(\"apple\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))]))\n/// true\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"\
  pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"\
  B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\"\
  )), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"),\
  \ String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])),\
  \ true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n"
completions: ["    let mut lowercase = true;\n    let mut uppercase = true;\n    for\
    \ (key, _) in dict {\n        if !key.is_lowercase() {\n            lowercase\
    \ = false;\n        }\n        if !key.is_uppercase() {\n            uppercase\
    \ = false;\n        }\n    }\n    lowercase || uppercase", "    let mut low =\
    \ true;\n    let mut up = true;\n    for key in dict.keys() {\n        low = low\
    \ && key.chars().next().unwrap().is_lowercase();\n        up = up && key.chars().next().unwrap().is_uppercase();\n\
    \    }\n    low || up", "    if dict.is_empty() {\n        return false;\n   \
    \ }\n    let mut count = 0;\n    for key in dict.keys() {\n        if key.to_uppercase()\
    \ == key {\n            count += 1;\n        }\n    }\n    if count == dict.len()\
    \ || count == 0 {\n        return true;\n    }\n    false", "    let mut lowercase\
    \ = true;\n    let mut uppercase = true;\n    for key in dict.keys() {\n     \
    \   if key.chars().any(|c| c.is_lowercase()) {\n            uppercase = false;\n\
    \        }\n        if key.chars().any(|c| c.is_uppercase()) {\n            lowercase\
    \ = false;\n        }\n    }\n    lowercase || uppercase", "\tif dict.len() >\
    \ 0 {\n\t\tlet (first_key, first_val) = dict.iter().next().unwrap();\n\t\tlet\
    \ first_key_is_uppercase = first_key.chars().all(|c| c.is_uppercase());\n\t\t\
    let first_key_is_lowercase = first_key.chars().all(|c| c.is_lowercase());\n\t\t\
    let all_keys_are_uppercase = dict.keys().all(|k| k.chars().all(|c| c.is_uppercase()));\n\
    \t\tlet all_keys_are_lowercase = dict.keys().all(|k| k.chars().all(|c| c.is_lowercase()));\n\
    \t\tlet keys_have_same_case = dict.keys().all(|k| k.chars().all(|c| first_key_is_uppercase\
    \ == c.is_uppercase()));\n\t\t(first_key_is_uppercase && all_keys_are_uppercase)\
    \ || (first_key_is_lowercase && all_keys_are_lowercase) && keys_have_same_case\n\
    \t} else {\n\t\tfalse\n\t}", "    // implement your code here\n    unimplemented!()",
  "    // TODO\n    true", "    let keys = dict.keys();\n    let mut lower = true;\n\
    \    let mut upper = true;\n    for key in keys {\n        let v = key.chars().next().unwrap();\n\
    \        lower = lower && v.is_lowercase();\n        upper = upper && v.is_uppercase();\n\
    \    }\n    lower || upper", "    let mut case_upper = true;\n    let mut case_lower\
    \ = true;\n    for key in dict.keys() {\n        if !key.is_empty() {\n      \
    \      case_upper = case_upper && key.chars().all(|c| c.is_uppercase());\n   \
    \         case_lower = case_lower && key.chars().all(|c| c.is_lowercase());\n\
    \        }\n    }\n    case_upper || case_lower", "    dict.keys().all(|key| key.chars().all(|c|\
    \ c.is_lowercase())) ||\n    dict.keys().all(|key| key.chars().all(|c| c.is_uppercase()))",
  '    unimplemented!()', '    unimplemented!()', "    let mut uppercase = true;\n\
    \    let mut lowercase = true;\n    for key in dict.keys() {\n        if key.is_uppercase()\
    \ {\n            lowercase = false;\n        } else if key.is_lowercase() {\n\
    \            uppercase = false;\n        } else {\n            return false;\n\
    \        }\n    }\n    if dict.len() == 0 {\n        return false;\n    }\n  \
    \  return uppercase || lowercase;", '    false', '    dict.keys().all(|k| k.is_ascii()
    && (k.is_ascii_lowercase() || k.is_ascii_uppercase()))', "    let mut result =\
    \ None;\n    for (key, _) in dict {\n        let mut is_lower = true;\n      \
    \  let mut is_upper = true;\n        for c in key.chars() {\n            is_lower\
    \ = is_lower && c.is_lowercase();\n            is_upper = is_upper && c.is_uppercase();\n\
    \        }\n        let is_string = is_lower || is_upper;\n        if let Some(prev_is_string)\
    \ = result {\n            if is_string != prev_is_string {\n                return\
    \ false;\n            }\n        } else {\n            result = Some(is_string);\n\
    \        }\n    }\n    result.unwrap_or(false)", "    let mut lower = true;\n\
    \    let mut upper = true;\n    for key in dict.keys() {\n        let mut lower\
    \ = true;\n        let mut upper = true;\n        for character in key.chars()\
    \ {\n            if character.is_lowercase() {\n                upper = false;\n\
    \            } else if character.is_uppercase() {\n                lower = false;\n\
    \            } else {\n                lower = false;\n                upper =\
    \ false;\n            }\n        }\n        if !lower && !upper {\n          \
    \  return false;\n        }\n    }\n    if lower || upper {\n        return true;\n\
    \    }\n    false", "\tif dict.is_empty() {\n\t\treturn false;\n\t}\n\tlet mut\
    \ case_lower = true;\n\tlet mut case_upper = true;\n\tfor (key, _) in dict {\n\
    \t\tif !key.chars().all(|x| x.is_uppercase()) {\n\t\t\tcase_upper = false;\n\t\
    \t}\n\t\tif !key.chars().all(|x| x.is_lowercase()) {\n\t\t\tcase_lower = false;\n\
    \t\t}\n\t}\n\treturn case_lower || case_upper;", "    let mut is_all_upper = true;\n\
    \    let mut is_all_lower = true;\n    for k in dict.keys() {\n        if k.chars().any(|c|\
    \ c.is_uppercase()) {\n            is_all_lower = false;\n        } else {\n \
    \           is_all_upper = false;\n        }\n    }\n    is_all_lower || is_all_upper",
  "    let mut lowercase = true;\n    let mut uppercase = true;\n    for (key, _)\
    \ in dict {\n        for c in key.chars() {\n            if c.is_lowercase() {\n\
    \                uppercase = false;\n            } else if c.is_uppercase() {\n\
    \                lowercase = false;\n            } else {\n                lowercase\
    \ = false;\n                uppercase = false;\n            }\n        }\n   \
    \ }\n    if lowercase || uppercase {\n        return true;\n    }\n    false"]
stop_tokens:
- "\n}"
