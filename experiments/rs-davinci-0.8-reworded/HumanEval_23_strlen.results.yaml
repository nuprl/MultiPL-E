language: rs
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut i = 0;\n    while i < string.len() {\n        i += 1;\n\
    \    }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfiibeggl.rs:11:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |     i\n   |     ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     i.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    strlen_char_iter(string.chars())\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `strlen_char_iter` in this scope\n -->\
    \ /tmp/tmpdg8okgl3.rs:7:5\n  |\n7 |     strlen_char_iter(string.chars())\n  |\
    \     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        0\n    } else {\n        1 +\
    \ strlen(string[1..].to_string())\n    }\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for c in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for c in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let r = string.into_bytes();\n    r.len() as isize\n}\n\nfn\
    \ main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut x = 0;\n    for _ in string.chars() {\n        x +=\
    \ 1;\n    }\n    x\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let chars: Vec<char> = string.chars().collect();\n    let len\
    \ = chars.len() as isize;\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        0\n    } else {\n        1 +\
    \ strlen(tail(string))\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `tail` in this scope\n  --> /tmp/tmpjjqyb4yy.rs:10:20\n\
    \   |\n10 |         1 + strlen(tail(string))\n   |                    ^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _i in string.chars() {\n       \
    \ count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let bytes = string.into_bytes();\n    let mut size = 0;\n  \
    \  for _byte in bytes {\n        size += 1;\n    }\n    size\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut ret = 0;\n    for _ in string.chars() {\n        ret\
    \ += 1;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 101
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    unsafe {\n        // TODO: check how to remove the unsafe\n\
    \        string.as_ptr() as isize - string.as_ptr() as isize\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpvsezhad0.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for ch in string.chars() {\n      \
    \  length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.len() == 0 {\n        return 0;\n    }\n\n    1 +\
    \ strlen(String::from(&string[1..]))\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let s: Vec<char> = string.chars().collect();\n    return s.len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _i in string.chars() {\n      \
    \  length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let chars: Vec<char> = string.chars().collect();\n    let len\
    \ = chars.len() as isize;\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        0\n    } else {\n        strlen(string[1..].to_string())\
    \ + 1\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let chars: Vec<char> = string.chars().collect();\n    let len\
    \ = chars.len() as isize;\n    return len;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.len() > 0 {\n        string.len() as isize\n    }\
    \ else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n  let mut size = 0;\n  let mut chars = string.chars();\n  while\
    \ let Some(_) = chars.next() {\n    size += 1;\n  }\n  size\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    isize::try_from(string.len()).unwrap()\n}\n\nfn main() {\n \
    \   let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `try_from` found for\
    \ type `isize` in the current scope\n --> /tmp/tmpctzaseyt.rs:7:12\n  |\n7 | \
    \    isize::try_from(string.len()).unwrap()\n  |            ^^^^^^^^ function\
    \ or associated item not found in `isize`\n  |\n  = help: items from traits can\
    \ only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n  |\n1 | use std::convert::TryFrom;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028106
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let len = string.len() as isize;\n    return len;\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    // Calculate length of string\n    let mut length = 0;\n   \
    \ for _ in string.chars() {\n        length += 1;\n    }\n    length\n}\n\nfn\
    \ main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().collect::<Vec<char>>().len() as isize\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n  strlen_internal(string.as_str())\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `strlen_internal` in this scope\n -->\
    \ /tmp/tmpy22dv58n.rs:7:3\n  |\n7 |   strlen_internal(string.as_str())\n  |  \
    \ ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028106
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for c in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for c in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut i = 0;\n    for _ in string.chars() {\n        i +=\
    \ 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let s = string.to_bytes();\n    s.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_bytes` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpwwgriflp.rs:7:20\n  |\n7 |     let s = string.to_bytes();\n\
    \  |                    ^^^^^^^^ help: there is an associated function with a\
    \ similar name: `bytes`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut chars = string.chars();\n    let mut i = 0;\n    while\
    \ let Some(_) = chars.next() {\n        i += 1;\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for c in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 101
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let (head, tail) = string.split_at(1);\n    if head.len() >\
    \ 0 {\n        strlen(tail.to_string()) + 1\n    } else {\n        0\n    }\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''byte index 1 is out of bounds of ``'', library/core/src/str/mod.rs:107:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut iter = string.chars();\n    let mut size = 0;\n    while\
    \ let Some(_) = iter.next() {\n        size += 1;\n    }\n    size\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut sum = 0;\n    for character in string.chars() {\n  \
    \      sum += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    unsafe {\n        let ptr = string.as_ptr();\n        let mut\
    \ len = 0;\n        for i in 0..string.len() {\n            if *ptr.offset(i as\
    \ isize) == 0 {\n                break;\n            }\n            len += 1;\n\
    \        }\n        len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n  string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut counter = 0;\n    for _ in string.chars() {\n      \
    \  counter += 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut n = 0;\n    for _ in string.chars() {\n        n +=\
    \ 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let str_vec: Vec<u8> = string.into_bytes();\n    let mut length:\
    \ isize = 0;\n    for _ in str_vec {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let chars: Vec<char> = string.chars().collect();\n    chars.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let len = string.len() as isize;\n    if len == 0 {\n      \
    \  0\n    } else {\n        len\n    }\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for char in string.chars() {\n       \
    \ len += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n \
    \   assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n  string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 101
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    // TODO: impl this\n    0\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp1pvzoajn.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut counter = 0;\n    for _ in string.chars() {\n      \
    \  counter += 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.len() as isize == 0 {\n        return 0;\n    } else\
    \ {\n        return 1 + strlen(string[1..].to_string());\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for c in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let s = string.as_str();\n    let mut len = 0;\n    for _c in\
    \ s.chars() {\n        len += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    // Convert string to bytes\n    let string_as_bytes = string.into_bytes();\n\
    \    // Return length\n    return string_as_bytes.len() as isize;\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut c = 0;\n    for _ in string.chars() {\n        c +=\
    \ 1;\n    }\n    c\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    return string.chars().count() as isize;\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut n = 0;\n    for _ in string.chars() {\n        n +=\
    \ 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut cnt = 0;\n    for c in string.chars() {\n        cnt\
    \ += 1;\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    match string.len() {\n        0 => 0,\n        length => (length\
    \ as isize),\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n  let mut len = 0;\n  for _ in string.chars() {\n    len += 1;\n\
    \  }\n  len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _i in string.chars() {\n      \
    \  length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for c in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut i = 0;\n    while i < string.len() {\n        i += 1;\n\
    \    }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfiibeggl.rs:11:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |     i\n   |     ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     i.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut iter = string.chars();\n    let mut length = 0;\n  \
    \  while let Some(_) = iter.next() {\n        length += 1;\n    }\n    length\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut i = 0;\n    for _ in string.chars() {\n        i +=\
    \ 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    // TODO\n    let mut count = 0;\n    for _ in string.chars()\
    \ {\n        count += 1;\n    }\n    count as isize\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 101
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    match string.chars().count() {\n        0 => 0,\n        len\
    \ => (len as isize) - 1,\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpfaloytfu.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _char in string.chars() {\n    \
    \    count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut iter = string.chars();\n    let mut len = 0;\n    while\
    \ let Some(_) = iter.next() {\n        len += 1;\n    }\n    len\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let chars: Vec<char> = string.chars().collect();\n    return\
    \ chars.len() as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _c in string.chars() {\n       \
    \ count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    // init count\n    let mut count: isize = 0;\n    // loop\n\
    \    for _c in string.chars() {\n        count += 1;\n    }\n    // return count\n\
    \    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028108
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.len() == 0 {\n        return 0;\n    }\n\n    1 +\
    \ strlen(string[1..].to_string())\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028108
- exit_code: 101
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    // TODO\n    0\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9b1kr0yw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028108
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let bytes = string.into_bytes();\n    bytes.len() as isize\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028108
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028107
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028089
