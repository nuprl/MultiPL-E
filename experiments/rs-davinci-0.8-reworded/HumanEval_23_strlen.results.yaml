language: rs
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut i = 0;\n    while i < string.len() {\n        i += 1;\n\
    \    }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfiibeggl.rs:11:5\n   |\n\
    6  | fn strlen(string: String) -> isize {\n   |                              -----\
    \ expected `isize` because of return type\n...\n11 |     i\n   |     ^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     i.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for _ in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut len = 0;\n    for _ in string.chars() {\n        len\
    \ += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut count = 0;\n    for _ in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    strlen_char_iter(string.chars())\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `strlen_char_iter` in this scope\n -->\
    \ /tmp/tmpdg8okgl3.rs:7:5\n  |\n7 |     strlen_char_iter(string.chars())\n  |\
    \     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        0\n    } else {\n        1 +\
    \ strlen(string[1..].to_string())\n    }\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for c in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut length = 0;\n    for c in string.chars() {\n       \
    \ length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let r = string.into_bytes();\n    r.len() as isize\n}\n\nfn\
    \ main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let mut x = 0;\n    for _ in string.chars() {\n        x +=\
    \ 1;\n    }\n    x\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    let chars: Vec<char> = string.chars().collect();\n    let len\
    \ = chars.len() as isize;\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 1
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    if string.is_empty() {\n        0\n    } else {\n        1 +\
    \ strlen(tail(string))\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `tail` in this scope\n  --> /tmp/tmpjjqyb4yy.rs:10:20\n\
    \   |\n10 |         1 + strlen(tail(string))\n   |                    ^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
- exit_code: 0
  program: "/// Return length of given string\n/// >>> strlen(String::from(\"\"))\n\
    /// 0\n/// >>> strlen(String::from(\"abc\"))\n/// 3\nfn strlen(string: String)\
    \ -> isize {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822361
