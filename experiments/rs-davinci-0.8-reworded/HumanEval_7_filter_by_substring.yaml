name: HumanEval_7_filter_by_substring
language: rs
prompt: "/// Filter an input vector of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n/// >>> filter_by_substring(vec![String::from(\"\
  abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")],\
  \ String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"),\
  \ String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
  xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
  )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
  ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")),\
  \ vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
completions: ['    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let lowercase_substring = substring.to_lowercase();\n\
    \    strings.into_iter().filter(|s| s.to_lowercase().contains(&lowercase_substring)).collect()",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ substring = substring.as_str();\n    let mut out = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            out.push(s);\n  \
    \      }\n    }\n    out", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut new_vec = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            new_vec.push(s);\n        }\n    }\n    new_vec", "    let mut\
    \ filtered_strings = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    let mut result = Vec::new();\n    for i in strings {\n        if i.contains(&substring)\
    \ {\n            result.push(i);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // TODO: Complete\n    let mut matches:\
    \ Vec<String> = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            matches.push(s);\n        }\n    }\n    matches", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // Add code here\n    let mut result\
    \ = Vec::new();\n    for e in strings.iter() {\n        if e.contains(&substring)\
    \ {\n            result.push(e.clone());\n        }\n    }\n    result", "   \
    \ let mut res = Vec::new();\n    for item in strings {\n        if item.contains(&substring)\
    \ {\n            res.push(item);\n        }\n    }\n    res", "    let mut results\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            results.push(string);\n        }\n    }\n    results", '    strings.into_iter().filter(|x|
    x.contains(&substring)).collect()', "    return strings.into_iter().filter(|string|\
    \ {\n        string.contains(&substring)\n    }).collect();", "    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let mut to_return: Vec<String> =\
    \ Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n \
    \           to_return.push(s);\n        }\n    }\n    to_return", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // Initialize the output vector\n   \
    \ let mut output: Vec<String> = Vec::new();\n\n    // Go through all strings\n\
    \    for string in strings {\n        // Check if the given substring is present\
    \ in the string\n        if string.contains(&substring) {\n            // If yes,\
    \ add the string to the output vector\n            output.push(string);\n    \
    \    }\n    }\n\n    // Return the output vector\n    output", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // let sub = substring.to_string(); //\
    \ what does this do?\n    strings.into_iter().filter(|string| string.contains(&substring)).collect()",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    // TODO: Please complete the body of this function\n    let mut ans: Vec<String>\
    \ = Vec::new();\n    for i in strings {\n        if i.contains(&substring) {\n\
    \            ans.push(i);\n        }\n    }\n    ans", '    strings.into_iter().filter(|x|
    x.contains(&substring)).collect()', "    let mut filtered_strings: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            filtered_strings.push(s);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut result: Vec<String> = Vec::new();\n    for string in strings {\n       \
    \ if string.contains(&substring) {\n            result.push(string);\n       \
    \ }\n    }\n    result", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|x|
    x.contains(&substring)).collect()', '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut new_strings = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            new_strings.push(string);\n        }\n    }\n    new_strings",
  '    strings.into_iter().filter(|word| word.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|x| x.contains(&substring)).collect()', "    let\
    \ str_len = substring.len();\n    let search_string = substring.chars().collect::<Vec<char>>();\n\
    \    let result = strings.into_iter().filter(|x| {\n        let chars = x.chars().collect::<Vec<char>>();\n\
    \        let length = chars.len();\n        for i in 0..length {\n           \
    \ if i <= length - str_len {\n                let mut is_equal = true;\n     \
    \           for j in 0..str_len {\n                    if chars[i + j] != search_string[j]\
    \ {\n                        is_equal = false;\n                        break;\n\
    \                    }\n                }\n                if is_equal {\n   \
    \                 return true;\n                }\n            }\n        }\n\
    \        false\n    }).collect::<Vec<String>>();\n    result", '    strings.into_iter().filter(|x|
    x.contains(&substring)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            filtered_strings.push(s);\n\
    \        }\n    }\n    filtered_strings", "    let mut filtered_string: Vec<String>\
    \ = Vec::new();\n    for item in strings {\n        if item.contains(&substring)\
    \ {\n            filtered_string.push(item);\n        }\n    }\n    filtered_string",
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|e| e.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // Iterate over the strings and filter\
    \ by substring\n    return strings.into_iter().filter(|s| s.contains(&substring)).collect();",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let substring_chars: Vec<char> = substring.chars().collect();\n    let mut\
    \ output: Vec<String> = Vec::new();\n    for string in strings {\n        let\
    \ mut contains_substring = true;\n        let string_chars: Vec<char> = string.chars().collect();\n\
    \        for (index, substring_char) in substring_chars.iter().enumerate() {\n\
    \            if string_chars.len() <= index || string_chars[index] != *substring_char\
    \ {\n                contains_substring = false;\n                break;\n   \
    \         }\n        }\n        if contains_substring {\n            output.push(string);\n\
    \        }\n    }\n    output", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|el|
    el.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            filtered_strings.push(s);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let substring_split = substring.split(\"\
    \").collect::<Vec<&str>>();\n    let substring_len = substring_split.len();\n\
    \    let mut out = Vec::new();\n    for string in strings {\n        let string_split\
    \ = string.split(\"\").collect::<Vec<&str>>();\n        let string_len = string_split.len();\n\
    \        let mut counter = 0;\n        for i in 0..string_len {\n            if\
    \ i < string_len - substring_len {\n                let mut matches = true;\n\
    \                for j in 0..substring_len {\n                    if string_split[i\
    \ + j] != substring_split[j] {\n                        matches = false;\n   \
    \                     break;\n                    }\n                }\n     \
    \           if matches {\n                    counter += 1;\n                }\n\
    \            }\n        }\n        if counter > 0 {\n            out.push(string);\n\
    \        }\n    }\n    out", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    strings.into_iter().filter(|string| {\n        string.contains(&substring)\n\
    \    }).collect()", "    let mut result: Vec<String> = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(&substring) {\n            result.push(string);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  "    let mut filtered: Vec<String> = Vec::new();\n    for str in strings {\n   \
    \     if str.contains(&substring) {\n            filtered.push(str);\n       \
    \ }\n    }\n    filtered", "    let mut ret = Vec::new();\n    for s in strings\
    \ {\n        if s.contains(&substring) {\n            ret.push(s);\n        }\n\
    \    }\n    ret", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    return strings.into_iter().filter(|s|
    s.contains(&substring)).collect();', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut filtered: Vec<String> = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered.push(string);\n   \
    \     }\n    }\n    filtered", "    let mut filtered: Vec<String> = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       filtered.push(string);\n        }\n    }\n    filtered", "    let regex\
    \ = regex::Regex::new(&format!(\".*{}.*\", substring)).unwrap();\n    let result:\
    \ Vec<String> = strings.into_iter().filter(|string| regex.is_match(string)).collect();\n\
    \    result", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    strings.into_iter().filter(|x| {\n        x.contains(&substring)\n    }).collect()",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ new_strings = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            new_strings.push(string);\n        }\n    }\n    new_strings",
  "    let mut filtered_strings = Vec::new();\n    for s in strings {\n        if\
    \ s.contains(&substring) {\n            filtered_strings.push(s);\n        }\n\
    \    }\n    filtered_strings", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|x| x.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            filtered_strings.push(s);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let empty_string = String::from(\"\
    \");\n    strings.into_iter().filter(|string| string.contains(&substring)).collect()",
  "    let mut new_strings = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(&substring) {\n            new_strings.push(string);\n     \
    \   }\n    }\n    new_strings", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ substring_len = substring.len();\n    strings.into_iter().filter(|s| s.len()\
    \ >= substring_len && s[..substring_len] == substring).collect()", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut out: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            out.push(s);\n\
    \        }\n    }\n    out", "    let mut vec = Vec::new();\n    for s in strings\
    \ {\n        if s.contains(&substring) {\n            vec.push(s);\n        }\n\
    \    }\n    vec", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut filtered: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", "    let mut filtered: Vec<String> = Vec::new();\n\
    \    for s in strings {\n        if s.contains(&substring) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", "    let mut filtered_strings: Vec<String> =\
    \ Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut filtered_strings: Vec<String>\
    \ = Vec::new();\n    for s in strings {\n        if s.contains(&substring) {\n\
    \            filtered_strings.push(s);\n        }\n    }\n    filtered_strings",
  "    let strings_with_substring: Vec<String> = strings.into_iter().filter(|string|\
    \ {\n        string.contains(&substring)\n    }).collect();\n    strings_with_substring",
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut strings_with_substring = Vec::new();\n    for string in strings {\n\
    \        if string.contains(&substring) {\n            strings_with_substring.push(string);\n\
    \        }\n    }\n    strings_with_substring", "    let mut new_vec = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       new_vec.push(string);\n        }\n    }\n    new_vec", "    let mut result:\
    \ Vec<String> = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut filtered_strings: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    let mut result: Vec<String> = Vec::new();\n    for x in strings {\n       \
    \ if x.contains(&substring) {\n            result.push(x);\n        }\n    }\n\
    \    result", "    let mut filtered_strings: Vec<String> = Vec::new();\n    for\
    \ item in strings {\n        if item.contains(&substring) {\n            filtered_strings.push(item);\n\
    \        }\n    }\n    filtered_strings", "    let mut filtered_strings: Vec<String>\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    let mut result: Vec<String> = Vec::new();\n    for string in strings {\n  \
    \      if string.contains(&substring) {\n            result.push(string);\n  \
    \      }\n    }\n    result", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut output: Vec<String> = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            output.push(s);\n        }\n    }\n    output", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let mut filtered: Vec<String> = Vec::new();\n\
    \    for string in strings {\n        if string.contains(&substring) {\n     \
    \       filtered.push(string);\n        }\n    }\n    filtered", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut filtered: Vec<String> = Vec::new();\n    for s in strings {\n     \
    \   if s.contains(&substring) {\n            filtered.push(s);\n        }\n  \
    \  }\n    filtered", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut result: Vec<String> = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut res: Vec<String> = Vec::new();\n    for s in strings {\n        if\
    \ s.contains(&substring) {\n            res.push(s)\n        }\n    }\n    res",
  "    let mut output: Vec<String> = Vec::new();\n    for s in strings {\n       \
    \ if s.contains(&substring) {\n            output.push(s);\n        }\n    }\n\
    \    output", "    let mut filtered: Vec<String> = Vec::new();\n    for string\
    \ in strings {\n        if string.contains(&substring) {\n            filtered.push(string);\n\
    \        }\n    }\n    filtered", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut result = Vec::new();\n    for str in strings {\n        if str.contains(&substring)\
    \ {\n            result.push(str);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let result = strings.into_iter().filter(|x| x.contains(&substring)).collect();\n\
    \    result", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut result: Vec<String> = Vec::new();\n    for i in strings {\n       \
    \ if i.contains(&substring) {\n            result.push(i);\n        }\n    }\n\
    \    result", "    let mut filtered_strings: Vec<String> = Vec::new();\n    for\
    \ string in strings {\n        if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    // filter by substrings in a vector\n    strings.into_iter().filter(|x| x.contains(&substring)).collect()",
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut filtered_strings = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            filtered_strings.push(s);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    // TODO\n    let mut vec: Vec<String>\
    \ = Vec::new();\n    let substring = substring.as_str();\n    for s in strings.iter()\
    \ {\n        if s.contains(substring) {\n            vec.push(s.clone());\n  \
    \      }\n    }\n    vec", '    return strings.into_iter().filter(|x| x.contains(&substring)).collect();',
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.contains(&substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|str| str.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut filtered_vec = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            filtered_vec.push(s);\n        }\n    }\n    filtered_vec", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  "    let mut out: Vec<String> = Vec::new();\n    for s in strings {\n        if\
    \ s.contains(&substring) {\n            out.push(s);\n        }\n    }\n    out",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    return
    strings.into_iter().filter(|s| s.contains(&substring)).collect();', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    strings.into_iter().filter(|string| {\n\
    \        string.contains(&substring)\n    }).collect()", "    let mut filtered:\
    \ Vec<String> = Vec::new();\n    for x in strings {\n        if x.contains(&substring)\
    \ {\n            filtered.push(x)\n        }\n    }\n    filtered", "    let mut\
    \ substring_strings: Vec<String> = Vec::new();\n    for string in strings {\n\
    \        if string.contains(&substring) {\n            substring_strings.push(string);\n\
    \        }\n    }\n    substring_strings", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|x| x.contains(&substring)).collect()',
  '    strings.into_iter().filter(|x| x.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', '    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  "    let mut new_strings = Vec::new();\n    for string in strings {\n        if\
    \ string.contains(&substring) {\n            new_strings.push(string);\n     \
    \   }\n    }\n    new_strings", '    return strings.into_iter().filter(|string|
    string.contains(&substring)).collect::<Vec<String>>();', '    strings.into_iter().filter(|string|
    string.contains(&substring)).collect()', "    let filtered: Vec<String> = strings.into_iter().filter(|s|\
    \ s.contains(&substring)).collect();\n    filtered", "    let mut filtered_strings:\
    \ Vec<String> = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            filtered_strings.push(s);\n        }\n    }\n    filtered_strings",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ mut filtered_strings: Vec<String> = Vec::new();\n    for s in strings {\n  \
    \      if s.contains(&substring) {\n            filtered_strings.push(s);\n  \
    \      }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s| s.contains(&substring)).collect()']
stop_tokens:
- "\n}"
