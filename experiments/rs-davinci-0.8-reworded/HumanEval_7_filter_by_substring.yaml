name: HumanEval_7_filter_by_substring
language: rs
prompt: "/// Filter an input vector of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n/// >>> filter_by_substring(vec![String::from(\"\
  abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")],\
  \ String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"),\
  \ String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
  xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
  )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
  ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")),\
  \ vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
completions: ['    strings.into_iter().filter(|s| s.contains(&substring)).collect()',
  '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    let lowercase_substring = substring.to_lowercase();\n\
    \    strings.into_iter().filter(|s| s.to_lowercase().contains(&lowercase_substring)).collect()",
  '    strings.into_iter().filter(|s| s.contains(&substring)).collect()', "    let\
    \ substring = substring.as_str();\n    let mut out = Vec::new();\n    for s in\
    \ strings {\n        if s.contains(substring) {\n            out.push(s);\n  \
    \      }\n    }\n    out", '    strings.into_iter().filter(|string| string.contains(&substring)).collect()',
  "    let mut new_vec = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            new_vec.push(s);\n        }\n    }\n    new_vec", "    let mut\
    \ filtered_strings = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    let mut result = Vec::new();\n    for i in strings {\n        if i.contains(&substring)\
    \ {\n            result.push(i);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // TODO: Complete\n    let mut matches:\
    \ Vec<String> = Vec::new();\n    for s in strings {\n        if s.contains(&substring)\
    \ {\n            matches.push(s);\n        }\n    }\n    matches", '    strings.into_iter().filter(|s|
    s.contains(&substring)).collect()', "    // Add code here\n    let mut result\
    \ = Vec::new();\n    for e in strings.iter() {\n        if e.contains(&substring)\
    \ {\n            result.push(e.clone());\n        }\n    }\n    result", "   \
    \ let mut res = Vec::new();\n    for item in strings {\n        if item.contains(&substring)\
    \ {\n            res.push(item);\n        }\n    }\n    res", "    let mut results\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            results.push(string);\n        }\n    }\n    results", '    strings.into_iter().filter(|x|
    x.contains(&substring)).collect()', "    return strings.into_iter().filter(|string|\
    \ {\n        string.contains(&substring)\n    }).collect();", "    let mut filtered_strings\
    \ = Vec::new();\n    for string in strings {\n        if string.contains(&substring)\
    \ {\n            filtered_strings.push(string);\n        }\n    }\n    filtered_strings"]
stop_tokens:
- "\n}"
