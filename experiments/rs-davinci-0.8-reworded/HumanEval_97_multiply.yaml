name: HumanEval_97_multiply
language: rs
prompt: "/// Complete the function that takes two integers and returns \n/// the product\
  \ of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  /// >>> multiply(148, 412)\n/// 16\n/// >>> multiply(19, 28)\n/// 72\n/// >>> multiply(2020,\
  \ 1851)\n/// 0\n/// >>> multiply(14, -15)\n/// 20\nfn multiply(a: isize, b: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
  \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
  \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
  \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
  \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
completions: ["    let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)",
  '    (a % 10) * (b % 10)', '  return (a % 10) * (b % 10);', "    let mut a = a;\n\
    \    let mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n\
    \        b = -b;\n    }\n    (a % 10) * (b % 10)", '    (a % 10) * (b % 10)',
  '    (a.abs() * b.abs()) % 10', "    let a_digits = a.abs() % 10;\n    let b_digits\
    \ = b.abs() % 10;\n    return a_digits * b_digits;", "    let a_units = a % 10;\n\
    \    let b_units = b % 10;\n    return a_units * b_units;", '    (a % 10) * (b
    % 10)', '    (a * b).abs() % 10', '    (a % 10) * (b % 10)', "    let a = a.abs();\n\
    \    let b = b.abs();\n    (a % 10) * (b % 10)", "    let a_unit = a % 10;\n \
    \   let b_unit = b % 10;\n    a_unit * b_unit", "    let mut a = a;\n    let mut\
    \ b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b =\
    \ -b;\n    }\n    (a % 10) * (b % 10)", '    (a % 10) * (b % 10)', "    let a\
    \ = (a % 10).abs();\n    let b = (b % 10).abs();\n    a * b", "    let mut a =\
    \ a;\n    let mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b < 0\
    \ {\n        b = -b;\n    }\n    let a = a % 10;\n    let b = b % 10;\n    a *\
    \ b", '    (a % 10) * (b % 10)', "    let (mut a, mut b) = (a, b);\n    if a <\
    \ 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n    let\
    \ unit_digits = (a % 10, b % 10);\n    unit_digits.0 * unit_digits.1", '    (a.abs()
    % 10) * (b.abs() % 10)', '    (a % 10) * (b % 10)', "    let a = a.abs();\n  \
    \  let b = b.abs();\n    a.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ as isize\n     * b.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ as isize", '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "    let mut\
    \ counter = 0;\n    let mut product = 0;\n    while counter < 2 {\n        if\
    \ counter == 0 {\n            product += last_digit(a) * last_digit(b);\n    \
    \    } else {\n            product += a * b;\n        }\n        counter += 1;\n\
    \    }\n    product", '    (a.abs() % 10) * (b.abs() % 10)', '    unimplemented!();',
  "    let product = a * b;\n    let mut result = 0;\n    let mut str_product = product.to_string();\n\
    \    if product.abs() >= 10 {\n        str_product.pop();\n        str_product.pop();\n\
    \    }\n    result = str_product.parse::<isize>().unwrap();\n    result", "  \
    \  let (num1, num2) = (a.abs(), b.abs());\n    let unit_product = (num1 % 10)\
    \ * (num2 % 10);\n    if a < 0 { -unit_product } else { unit_product }", "   \
    \ let a = a.abs();\n    let b = b.abs();\n    let (a, b) = if a > 9 { (a / 10,\
    \ b) } else { (a, b) };\n    let (a, b) = if b > 9 { (a, b / 10) } else { (a,\
    \ b) };\n    a * b", "    let digits = (a % 10, b % 10);\n    digits.0 * digits.1",
  '    ((a % 10) * (b % 10)) % 10', '    (a.abs() % 10) * (b.abs() % 10)', '    (a
    % 10) * (b % 10)', '    (a.abs() * b.abs()) % 10', '    (a.abs() * b.abs()) %
    10', "    let m = a.abs() % 10;\n    let n = b.abs() % 10;\n    if a < 0 {\n \
    \       if b < 0 {\n            return m * n;\n        } else {\n            return\
    \ -m * n;\n        }\n    } else {\n        if b < 0 {\n            return -m\
    \ * n;\n        } else {\n            return m * n;\n        }\n    }", "    let\
    \ mut a_digits = a.abs().to_string().chars().collect::<Vec<char>>();\n    let\
    \ mut b_digits = b.abs().to_string().chars().collect::<Vec<char>>();\n    let\
    \ mut a_length = a_digits.len();\n    let mut b_length = b_digits.len();\n   \
    \ let negative = (a.is_negative() && !b.is_negative()) || (!a.is_negative() &&\
    \ b.is_negative());\n    let mut result = 0;\n    while a_length > 0 {\n     \
    \   while b_length > 0 {\n            let a_product = a_digits[a_length - 1].to_digit(10).unwrap()\
    \ as isize;\n            let b_product = b_digits[b_length - 1].to_digit(10).unwrap()\
    \ as isize;\n            result += a_product * b_product;\n            b_length\
    \ -= 1;\n        }\n        a_length -= 1;\n        b_length = b_digits.len();\n\
    \    }\n    if negative {\n        result * -1\n    } else {\n        result\n\
    \    }", '    (a.abs() % 10) * (b.abs() % 10)', '  a * b % 10', '    (a.abs()
    * b.abs()) % 10', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    (a
    % 10) * (b % 10)', "    let a = a.abs();\n    let b = b.abs();\n    a.rem_euclid(10)\
    \ * b.rem_euclid(10)", "    if a == 0 || b == 0 {\n        return 0;\n    }\n\
    \    let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)", '    (a.abs()
    % 10) * (b.abs() % 10)', '    (a.abs() % 10) * (b.abs() % 10)', "    let (a, b)\
    \ = (a.abs(), b.abs());\n    ((a % 10) * (b % 10)) as isize", "    let mut x =\
    \ a.abs();\n    let mut y = b.abs();\n    while x > 9 {\n        x /= 10;\n  \
    \  }\n    while y > 9 {\n        y /= 10;\n    }\n    x * y", "    let a = a.abs();\n\
    \    let b = b.abs();\n    let a = a % 10;\n    let b = b % 10;\n    a * b", " \
    \   let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)", "    if\
    \ a < 0 {\n        (a * b).abs() % 10\n    } else {\n        (a * b) % 10\n  \
    \  }", '    (a.abs() * b.abs()) % 10', "    let (a, b) = (a.abs(), b.abs());\n\
    \    (a % 10) * (b % 10)", "    let a = a.abs();\n    let b = b.abs();\n    (a\
    \ % 10) * (b % 10)", "  let a_abs = a.abs();\n  let b_abs = b.abs();\n  let a_last_digit\
    \ = a_abs - a_abs / 10 * 10;\n  let b_last_digit = b_abs - b_abs / 10 * 10;\n\
    \  a_last_digit * b_last_digit", '    (a % 10) * (b % 10)', '    ((a % 10) * (b
    % 10)) as isize', "    let a = a.abs();\n    let b = b.abs();\n    (a % 10) *\
    \ (b % 10)", '    (a * b).abs() % 10', "    let mut r = 0;\n    if a < 0 {\n \
    \       r = -b;\n    } else if b < 0 {\n        r = -a;\n    } else {\n      \
    \  r = a * b;\n    }\n    r % 10", '    (a.abs() % 10) * (b.abs() % 10)', '    a.abs()
    * b.abs() % 10', "    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n   \
    \     a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n    (a % 10) * (b\
    \ % 10)", "    let mut product = a * b;\n    while product > 10 {\n        product\
    \ /= 10;\n    }\n    product", '    (a.abs() % 10) * (b.abs() % 10)', "    let\
    \ mut a = a;\n    let mut b = b;\n    if a < 0 {\n        a = a * -1;\n    }\n\
    \    if b < 0 {\n        b = b * -1;\n    }\n    (a % 10) * (b % 10)", '    ((a
    % 10) * (b % 10)) % 10', '    return (a.abs() % 10) * (b.abs() % 10);', "    let\
    \ a_mod_10 = a % 10;\n    let b_mod_10 = b % 10;\n    a_mod_10 * b_mod_10", '    (a
    % 10) * (b % 10)', '    (a % 10) * (b % 10)', "    let a = (a as f64).abs() as\
    \ usize;\n    let b = (b as f64).abs() as usize;\n    (a % 10) * (b % 10) as isize",
  "    let mut c = a * b;\n    c = c.abs();\n    c % 10", "    let a = if a < 0 {\
    \ -a } else { a };\n    let b = if b < 0 { -b } else { b };\n    ((a % 10) * (b\
    \ % 10)) as isize", "    let x = a.abs() % 10;\n    let y = b.abs() % 10;\n  \
    \  x * y", "    let get_unit_digit = |num: isize| -> isize {\n        let mut\
    \ num_abs = num.abs();\n        if num_abs >= 10 {\n            num_abs %= 10;\n\
    \        }\n        num_abs\n    };\n    let mut result = 0;\n    let unit_a =\
    \ get_unit_digit(a);\n    let unit_b = get_unit_digit(b);\n    if unit_a == 0\
    \ || unit_b == 0 {\n        result = 0;\n    } else {\n        result = unit_a\
    \ * unit_b;\n    }\n    result", "    let mut a = a;\n    let mut b = b;\n   \
    \ if a < 0 {\n        a = a * -1;\n    }\n    if b < 0 {\n        b = b * -1;\n\
    \    }\n    (a % 10) * (b % 10)", '    (a % 10) * (b % 10)', '    (a % 10) * (b
    % 10)', '    (a.abs() % 10) * (b.abs() % 10)', "    // Non-golfed version\n  \
    \  // let mut a = a.abs();\n    // let mut b = b.abs();\n    // if a > 9 || b\
    \ > 9 {\n    //     a %= 10;\n    //     b %= 10;\n    // }\n    // a * b\n\n\
    \    // Golfed version\n    a.abs() % 10 * b.abs() % 10", "    // your code here\n\
    \    let a = a.abs();\n    let b = b.abs();\n    let a = a % 10;\n    let b =\
    \ b % 10;\n    a * b", "    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n\
    \        a = a * -1;\n    }\n    if b < 0 {\n        b = b * -1;\n    }\n    (a\
    \ % 10) * (b % 10)", "    if a == 0 || b == 0 {\n        return 0;\n    }\n  \
    \  let (a, b) = (a.abs(), b.abs());\n    (a % 10) * (b % 10)", "    let mut product\
    \ = a * b;\n    while product >= 10 {\n        product /= 10;\n    }\n    product",
  "  if a < 0 { a * -1 } else { a } *\n  if b < 0 { b * -1 } else { b }", '    ((a.abs()
    % 10) * (b.abs() % 10)) as isize', '    ((a.abs() % 10) * (b.abs() % 10)) * (a.signum()
    * b.signum())', '    (a.abs() % 10) * (b.abs() % 10)', "    let a = a.abs();\n\
    \    let b = b.abs();\n    (a % 10) * (b % 10)", "  let mut nums = [a, b];\n \
    \ for n in &mut nums {\n    if *n < 0 {\n      *n *= -1;\n    }\n  }\n  nums[0]\
    \ %= 10;\n  nums[1] %= 10;\n  nums[0] * nums[1]", '    (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10);', '    a.abs() * b.abs() % 10', '    (a % 10) * (b % 10)',
  "    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n\
    \    if b < 0 {\n        b = -b;\n    }\n    (a % 10) * (b % 10)", "    let a\
    \ = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)", '    a.abs() % 10
    * b.abs() % 10', '    (a.abs() * b.abs()) % 10', '    a.abs() * b.abs() % 10',
  '    (a.abs() % 10) * (b.abs() % 10)', '    (a.abs() % 10) * (b.abs() % 10)', " \
    \   let a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)", "    let\
    \ a = a.abs();\n    let b = b.abs();\n    (a % 10) * (b % 10)", '    (a % 10)
    * (b % 10)', '    (a % 10) * (b % 10)', '    (a.abs() % 10) * (b.abs() % 10)',
  '  (a % 10) * (b % 10)', '    (a.abs() % 10) * (b.abs() % 10)', "    let a = a.abs();\n\
    \    let b = b.abs();\n    let a = a % 10;\n    let b = b % 10;\n    a * b", " \
    \ let mut a = a;\n  let mut b = b;\n  if a < 0 {\n    a = -a;\n  }\n  if b < 0\
    \ {\n    b = -b;\n  }\n  let a = a % 10;\n  let b = b % 10;\n  a * b", "    let\
    \ a = a.abs();\n    let b = b.abs();\n    let a = a % 10;\n    let b = b % 10;\n\
    \    a * b", '    (a % 10) * (b % 10)', "    let a = a.abs();\n    let b = b.abs();\n\
    \    (a % 10) * (b % 10)", '    ((a % 10) * (b % 10)) % 10', "    let (a, b) =\
    \ (a.abs(), b.abs());\n    (a % 10) * (b % 10)", "    let mut c = a * b;\n   \
    \ c %= 10;\n    c.abs()", '    ((a % 10) * (b % 10)) as isize', '    (a % 10)
    * (b % 10)', "    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n       \
    \ a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n    let a = a % 10;\n\
    \    let b = b % 10;\n    return a * b;", '    (a % 10) * (b % 10)', "    let\
    \ (mut x, mut y) = (a, b);\n    if x < 0 {\n        x = -x;\n    }\n    if y <\
    \ 0 {\n        y = -y;\n    }\n    let mut product = 0;\n    while x > 0 {\n \
    \       product += y % 10;\n        x /= 10;\n    }\n    product", "    let mut\
    \ a = a;\n    let mut b = b;\n    if a < 0 {\n        a = -a;\n    }\n    if b\
    \ < 0 {\n        b = -b;\n    }\n    (a % 10) * (b % 10)", '    a.abs() % 10 *
    b.abs() % 10', '    unimplemented!()', "    let a_abs = a.abs();\n    let b_abs\
    \ = b.abs();\n    (a_abs % 10) * (b_abs % 10)", "    let mut product = a.abs()\
    \ * b.abs();\n    while product >= 10 {\n        product /= 10;\n    }\n    product\
    \ * a.signum() * b.signum()", '  unimplemented!()', "    let d1 = a % 10;\n  \
    \  let d2 = b % 10;\n    d1 * d2", "    let a = a.abs();\n    let b = b.abs();\n\
    \    a * b % 10", '    (a.abs() % 10) * (b.abs() % 10)', "    // your code here\n\
    \    let a = a % 10;\n    let b = b % 10;\n    a * b", '    (a % 10) * (b % 10)',
  "    let n = std::cmp::max(a.abs(), b.abs());\n    let m = std::cmp::min(a.abs(),\
    \ b.abs());\n    let n = n % 10;\n    let m = m % 10;\n    if a.is_negative()\
    \ ^ b.is_negative() {\n        -(n * m)\n    } else {\n        n * m\n    }",
  "    let mut a = a;\n    let mut b = b;\n    a = (a % 10).abs();\n    b = (b % 10).abs();\n\
    \    return a * b;", '    (a % 10) * (b % 10)', '    a.abs() * b.abs() % 10',
  '    (a % 10) * (b % 10)', '    (a.abs() % 10) * (b.abs() % 10)', '    (a % 10)
    * (b % 10)', '    (a % 10) * (b % 10)', '    (a.abs() % 10) * (b.abs() % 10)',
  '    (a % 10) * (b % 10)', "    let c = (a.abs() % 10) * (b.abs() % 10);\n    if\
    \ a < 0 && b > 0 || a > 0 && b < 0 {\n        -c\n    } else {\n        c\n  \
    \  }", '    (a * b).abs() % 10', "    let (a, b) = (a.abs(), b.abs());\n    (a\
    \ % 10) * (b % 10)", "    let res = (a.abs() * b.abs()) % 10;\n    if a * b <\
    \ 0 {\n        return -res;\n    }\n    res", "    let prod = a * b;\n    let\
    \ unit_digits = prod.abs() % 10;\n    if prod < 0 { unit_digits * -1 } else {\
    \ unit_digits }", "    if a == 0 || b == 0 {\n        return 0;\n    }\n\n   \
    \ let x = a % 10;\n    let y = b % 10;\n\n    x * y", "    let a = a.abs();\n\
    \    let b = b.abs();\n    (a % 10) * (b % 10)", "    let n = a * b;\n    n.abs()\
    \ % 10", '    (a % 10) * (b % 10)', "    fn unit_digit(x: isize) -> isize {\n\
    \        x - (x / 10) * 10\n    }\n    unit_digit(a) * unit_digit(b)", "    fn\
    \ take_unit_digit(a: isize) -> isize {\n        let mut result = a;\n        while\
    \ result > 9 {\n            result /= 10;\n        }\n        result\n    }\n\
    \    take_unit_digit(a) * take_unit_digit(b)", '    (a * b).abs() % 10', "   \
    \ let a = a % 10;\n    let b = b % 10;\n    return a * b;", '  a.abs() % 10 *
    b.abs() % 10', "    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n     \
    \   a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n    let mut result\
    \ = (a % 10) * (b % 10);\n    while a >= 10 || b >= 10 {\n        a /= 10;\n \
    \       b /= 10;\n        result += (a % 10) * (b % 10);\n    }\n    result",
  "    let a_unit = a % 10;\n    let b_unit = b % 10;\n    a_unit * b_unit", '    (a.abs()
    * b.abs()) % 10', '    (a.abs() % 10) * (b.abs() % 10)', '    (a % 10) * (b %
    10)', '    (a.abs() * b.abs()) % 10', "    // Your code here\n    unimplemented!();",
  "    let a = if a < 0 { -a } else { a };\n    let b = if b < 0 { -b } else { b };\n\
    \    let a = a % 10;\n    let b = b % 10;\n    a * b", '    (a.abs() % 10) * (b.abs()
    % 10)', '    unimplemented!()', '    (a % 10) * (b % 10)', "    let mut a = a;\n\
    \    let mut b = b;\n    if a < 0 {\n        a = a * -1;\n    }\n    if b < 0\
    \ {\n        b = b * -1;\n    }\n    (a % 10) * (b % 10)", '    (a.abs() % 10)
    * (b.abs() % 10)', '    (a % 10) * (b % 10)', "    let mut res = 0;\n    let mut\
    \ a_remainder = a;\n    let mut b_remainder = b;\n    let mut i = 1;\n    while\
    \ a_remainder != 0 || b_remainder != 0 {\n        let a_digit = a_remainder %\
    \ 10;\n        let b_digit = b_remainder % 10;\n        res += (a_digit * b_digit)\
    \ * i;\n        a_remainder /= 10;\n        b_remainder /= 10;\n        i *= 10;\n\
    \    }\n    res", '    a.abs() * b.abs() % 10', "    let a = a % 10;\n    let\
    \ b = b % 10;\n    (a * b) % 10", '    (a % 10) * (b % 10)', '    (a % 10) * (b
    % 10)', '    (a % 10) * (b % 10)', "    let a = a.abs();\n    let b = b.abs();\n\
    \    (a % 10) * (b % 10)", "    let mut a = a;\n    let mut b = b;\n    if a <\
    \ 0 {\n        a = -a;\n    }\n    if b < 0 {\n        b = -b;\n    }\n    (a\
    \ % 10) * (b % 10)", "    let a = a.abs();\n    let b = b.abs();\n    (a % 10)\
    \ * (b % 10)", "    fn unit_digit(n: isize) -> isize {\n        let mut curr =\
    \ n;\n        while curr > 9 {\n            curr = curr / 10;\n        }\n   \
    \     curr\n    }\n    unit_digit(a) * unit_digit(b)", "    let a = a.abs();\n\
    \    let b = b.abs();\n    (a % 10) * (b % 10)", '  (a % 10) * (b % 10)', "  let\
    \ mut num = a * b;\n  while num >= 10 {\n    num /= 10;\n  }\n  num", "    let\
    \ a = a.abs();\n    let b = b.abs();\n    let a = a % 10;\n    let b = b % 10;\n\
    \    a * b", "    let a = a.abs();\n    let b = b.abs();\n    let a_unit = a %\
    \ 10;\n    let b_unit = b % 10;\n    a_unit * b_unit", "    let res = a.abs()\
    \ * b.abs();\n    (res % 10) as isize", '    (a.abs() % 10) * (b.abs() % 10)',
  '    (a % 10) * (b % 10)', "    let m = a.abs() % 10;\n    let n = b.abs() % 10;\n\
    \    if a < 0 && b < 0 {\n        m * n\n    } else if a < 0 || b < 0 {\n    \
    \    -(m * n)\n    } else {\n        m * n\n    }", "    let mut res = a.abs()\
    \ * b.abs();\n    while res > 9 {\n        res /= 10;\n    }\n    if a < 0 &&\
    \ b > 0 || a > 0 && b < 0 {\n        res *= -1;\n    }\n    res", "    let (mut\
    \ a, mut b) = (a, b);\n    if a < 0 { a = -a; }\n    if b < 0 { b = -b; }\n  \
    \  (a % 10) * (b % 10)", '    (a.abs() % 10) * (b.abs() % 10)', '    unimplemented!();',
  "  let a = (a as f64).abs() as usize;\n  let b = (b as f64).abs() as usize;\n  (a\
    \ % 10) * (b % 10) as isize", '    (a * b).abs() % 10', '    (a % 10) * (b % 10)',
  "    let mut a = a;\n    let mut b = b;\n    if a < 0 {\n        a = a * -1;\n \
    \   }\n    if b < 0 {\n        b = b * -1;\n    }\n    let a = a % 10;\n    let\
    \ b = b % 10;\n    a * b"]
stop_tokens:
- "\n}"
