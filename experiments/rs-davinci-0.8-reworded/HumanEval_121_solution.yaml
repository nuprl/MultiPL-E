name: HumanEval_121_solution
language: rs
prompt: "/// Given a non-empty vector of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5, 8,\
  \ 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
  \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
  \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
  \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
  \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
  \ 13, 2, 9]), 3);\n}\n"
completions: ["    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n\
    \        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n   \
    \ }\n    sum", "    let mut res = 0;\n    for i in 1..lst.len() {\n        if\
    \ i % 2 == 0 && lst[i] % 2 != 0 {\n            res += lst[i];\n        }\n   \
    \ }\n    res", "    lst.iter().enumerate().fold(0, |acc, (idx, el)| {\n      \
    \  if (idx % 2 == 0) && (*el % 2 != 0) {\n            acc + el\n        } else\
    \ {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()', "    let mut\
    \ result = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && v % 2 != 0 {\n            result += v;\n        }\n    }\n    result",
  "    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i]\
    \ % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|x|
    x.0 % 2 == 0).map(|x| x.1).filter(|x| x % 2 != 0).sum()', "    let mut sum = 0;\n\
    \    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n   \
    \         sum += lst[i];\n        }\n    }\n    sum", "    let mut x = 0;\n  \
    \  for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n     \
    \       x += lst[i];\n        }\n    }\n    x", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    return
    lst.iter().enumerate().filter(|(i, e)| i % 2 == 0 && e % 2 != 0).map(|(_, e)|
    e).sum();', "    let (a, b) = lst.iter().enumerate().partition(|(i, _)| i % 2\
    \ == 0);\n    a.into_iter().map(|(_, v)| v).sum::<isize>()", '    lst.iter().enumerate().filter(|(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', "    let mut sum = 0;\n\
    \    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 !=\
    \ 0 {\n            sum += x;\n        }\n    }\n    sum", "    let mut odd_sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            odd_sum += x;\n        }\n    }\n    odd_sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().fold(0,
    |acc, (i, x)| acc + if i % 2 == 0 { *x } else { 0 })', "    let mut sum = 0;\n\
    \    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e % 2 !=\
    \ 0 {\n            sum += e;\n        }\n    }\n    sum", "    let even_nums =\
    \ lst.into_iter().enumerate().filter(|(i, _)| i % 2 == 0);\n    even_nums.filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()", "    lst.iter().enumerate().fold(0,\
    \ |a, (i, &v)| {\n        if i % 2 == 0 && v % 2 != 0 {\n            a + v\n \
    \       } else {\n            a\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let mut\
    \ res = 0;\n    for (i, &v) in lst.iter().enumerate() {\n        if i % 2 == 0\
    \ && v % 2 != 0 {\n            res += v;\n        }\n    }\n    res", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, el)| {\n        if i % 2 == 0 && el % 2 != 0 {\n            acc +\
    \ el\n        } else {\n            acc\n        }\n    })", "    let mut result\
    \ = 0;\n    for n in 0..lst.len() {\n        if lst[n] % 2 != 0 && n % 2 == 0\
    \ {\n            result += lst[n];\n        }\n    }\n    result", "    lst.iter().enumerate().fold(0,\
    \ |acc, x| {\n        let (i, v) = x;\n        if i % 2 == 0 && v % 2 != 0 {\n\
    \            acc + v\n        } else {\n            acc\n        }\n    })", " \
    \   let res = lst.into_iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,\
    \ x)| x % 2 != 0).map(|(_, x)| x).sum();\n    res", '    return lst.iter().enumerate().filter(|(i,
    x)| (i % 2 == 0) && (x % 2 != 0)).map(|(i, x)| *x).sum();', "    let mut total\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            total += x;\n        }\n    }\n    total", "    lst.iter().enumerate().fold(0,\
    \ |acc, (idx, elem)| {\n        if idx % 2 == 0 && elem % 2 != 0 {\n         \
    \   acc + elem\n        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, a)| a % 2 != 0).map(|(_, a)| a).sum()', '    return
    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_, x)| x % 2 !=
    0).map(|(_, x)| x).sum();', "    let mut idx = 0;\n    let mut res = 0;\n    for\
    \ i in lst {\n        if idx % 2 == 0 && i % 2 != 0 {\n            res += i;\n\
    \        }\n        idx += 1;\n    }\n    res", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &item)| {\n        if i % 2 == 0 && item % 2 != 0 {\n            acc\
    \ + item\n        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    x)| (i % 2 == 0) && x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', "    if lst.len() == 0\
    \ {\n        return 0;\n    }\n    let mut total = 0;\n    for (index, item) in\
    \ lst.iter().enumerate() {\n        if index % 2 == 0 && item % 2 != 0 {\n   \
    \         total += item;\n        }\n    }\n    total", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    x)| i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(index,
    _)| index % 2 == 0).map(|(_, elem)| elem).filter(|elem| elem % 2 != 0).sum()',
  "    // Your solution goes here.\n    0", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let\
    \ mut sum = 0;\n    for (i, j) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && j % 2 != 0 {\n            sum += j;\n        }\n    }\n    sum", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, n)| {\n        if i % 2 == 0 && n % 2 != 0 {\n            acc + n\n\
    \        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(x,
    _)| x % 2 == 0).map(|(_, y)| y).sum()', "    // your solution here!\n    0", " \
    \   let mut total = 0;\n    for (index, item) in lst.iter().enumerate() {\n  \
    \      if index % 2 == 0 && item % 2 != 0 {\n            total += item;\n    \
    \    }\n    }\n    total", "    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n\
    \    }\n    sum", "    let mut lst = lst;\n    lst.drain(..)\n        .enumerate()\n\
    \        .filter(|&(i, _)| i % 2 == 0)\n        .filter(|&(_, x)| x % 2 == 1)\n\
    \        .map(|(_, x)| x)\n        .sum()", "    if lst.len() == 0 {\n       \
    \ return 0;\n    }\n    let mut ans = 0;\n    for (i, elem) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && elem % 2 != 0 {\n            ans += elem;\n    \
    \    }\n    }\n    ans", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==
    0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().fold(0, |acc, (i, &n)|
    if i % 2 == 0 { acc + n } else { acc })', "    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum\
    \ += lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|x|
    x.0 % 2 == 0).filter(|x| x.1 % 2 != 0).map(|x| x.1).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, x)| x).sum()', "    lst.iter().enumerate().fold(0, |acc,\
    \ (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n   \
    \     } else {\n            acc\n        }\n    })", "    let mut sum = 0;\n \
    \   for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 !=\
    \ 0 {\n            sum += x;\n        }\n    }\n    sum", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).fold(0, |acc, (_, n)| acc + n)', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let mut\
    \ sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0\
    \ && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum", '    return
    lst.iter().enumerate().filter(|(i, x)| (*i % 2 == 0) && (*x % 2 != 0)).map(|(_,
    x)| *x).sum();', "    lst.iter().enumerate().fold(0, |acc, (i, &item)| {\n   \
    \     if i % 2 == 0 && item % 2 != 0 {\n            acc + item\n        } else\
    \ {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    v)| v % 2 != 0 && i % 2 == 0).map(|(_, v)| v).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (idx, &x)| {\n        if idx % 2 == 0 && x % 2 != 0 {\n            acc\
    \ + x\n        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (index, &value)| {\n        if index % 2 == 0 && value % 2 != 0 {\n  \
    \          acc + value\n        } else {\n            acc\n        }\n    })",
  "    let mut odd_even_sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n   \
    \     if i % 2 == 0 && n % 2 != 0 {\n            odd_even_sum += n;\n        }\n\
    \    }\n    odd_even_sum", "    let mut total = 0;\n    for (index, num) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 0 && num % 2 != 0 {\n            total += num;\n\
    \        }\n    }\n    total", "    if lst.len() < 2 {\n        return 0;\n  \
    \  }\n    let mut sum = 0;\n    for (index, num) in lst.iter().enumerate() {\n\
    \        if index % 2 == 0 && num % 2 != 0 {\n            sum += num;\n      \
    \  }\n    }\n    sum", "    lst.iter().enumerate().fold(0, |acc, (i, v)| {\n \
    \       if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n        } else {\n\
    \            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(index,
    _)| *index % 2 == 0).map(|(_, item)| item).sum()', '    lst.iter().enumerate().filter(|(i,_)|
    i % 2 == 0).filter(|(_,n)| n % 2 != 0).map(|(_,n)| n).sum()', "    let mut sum\
    \ = 0;\n    for (i, &n) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ n % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()', "    let\
    \ mut res = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && v % 2 != 0 {\n            res += v;\n        }\n    }\n    res", '    lst.iter().filter(|x|
    x % 2 != 0).enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, x)| x).sum()', " \
    \   let mut sum = 0;\n    for (i, &item) in lst.iter().enumerate() {\n       \
    \ if i % 2 == 0 && item % 2 != 0 {\n            sum += item;\n        }\n    }\n\
    \    sum", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    x)| x % 2 != 0).map(|(_, &x)| x).sum()', "    let mut sum = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n\
    \    }\n    sum", '    return lst.iter().enumerate().filter(|&(i,x)| i % 2 ==
    0 && x % 2 != 0).map(|(_,x)| x).sum();', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, n)| n).filter(|&n| n % 2 == 1).sum()', "    let mut ans\
    \ = 0;\n    for (i, a) in lst.iter().enumerate() {\n        if i % 2 == 0 && a\
    \ % 2 == 1 {\n            ans += a;\n        }\n    }\n    ans", "    lst.iter().enumerate().fold(0,\
    \ |sum, (i, &e)| {\n        if i % 2 == 0 && e % 2 != 0 {\n            sum + e\n\
    \        } else {\n            sum\n        }\n    })", "    let mut sum = 0;\n\
    \    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 !=\
    \ 0 {\n            sum += v;\n        }\n    }\n    sum", "    // TODO\n    0",
  "    let mut sum = 0;\n    for (idx, num) in lst.iter().enumerate() {\n        if\
    \ (idx & 1) == 0 && (num & 1) == 1 {\n            sum += num;\n        }\n   \
    \ }\n    sum", "    //let mut answer = 0;\n    //for (i, x) in lst.iter().enumerate()\
    \ {\n    //    if i % 2 == 0 && x % 2 != 0 {\n    //        answer += x;\n   \
    \ //    }\n    //}\n    //answer\n    lst.iter().enumerate().filter(|(i, x)| i\
    \ % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()", "    let res = lst.iter().enumerate().filter(|(x,\
    \ y)| x % 2 == 0 && y % 2 != 0).map(|(_, y)| y).sum();\n    return res;", '    lst.iter().enumerate().filter(|x|
    x.0 % 2 == 0).filter(|x| x.1 % 2 != 0).map(|x| x.1).sum()', "    let mut sum =\
    \ 0;\n    for (i, num) in lst.iter().enumerate() {\n        if i % 2 == 0 && num\
    \ % 2 != 0 {\n            sum += num;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, v)| v % 2 != 0).map(|(_, v)| v).sum()', "    let mut\
    \ sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0\
    \ && v % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let\
    \ mut sum = 0;\n    for (idx, elem) in lst.iter().enumerate() {\n        if idx\
    \ % 2 == 0 && elem % 2 != 0 {\n            sum += elem;\n        }\n    }\n  \
    \  sum", '    lst.iter().filter(|a| (a & 1) == 1 && (a - 1) % 2 == 0).sum()',
  "    let sum: isize = lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_,\
    \ x)| x).sum();\n    sum", '    lst.iter().enumerate().filter(|(i, _)| i % 2 ==
    0).map(|(_, x)| x).filter(|x| x % 2 == 1).sum()', "    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum", "    let mut sum = 0;\n  \
    \  for (i, n) in lst.iter().enumerate() {\n        if (i % 2) == 0 && n % 2 !=\
    \ 0 {\n            sum += n;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, n)| n % 2).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, v)| v).sum()', '    return lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &v)| v % 2 == 1).map(|(_, &v)| v).sum();', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, e)| e % 2 != 0).map(|(_, e)| e).sum()', '    lst.iter().enumerate().fold(0,
    |acc, (idx, el)| if idx % 2 == 0 { acc + el } else { acc })', '    lst.iter().enumerate().fold(0,
    |acc, (i, &val)| acc + if i % 2 == 0 && val % 2 != 0 { val } else { 0 })', " \
    \   let mut sum = 0;\n    for i in (0..lst.len()).step_by(2) {\n        if lst[i]\
    \ % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for (i, el) in lst.iter().enumerate() {\n        if i % 2\
    \ == 0 && el % 2 != 0 {\n            sum += el;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, e)| e % 2 != 0).map(|(_, e)| e).sum()', '    lst.iter().enumerate().filter(|(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()', '    return lst.iter().enumerate().filter(|(i,
    v)| (i % 2) == 0 && v % 2 != 0).map(|(i, v)| v).sum();', "    let mut result =\
    \ 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ item % 2 != 0 {\n            result += item;\n        }\n    }\n    result",
  "    lst.iter().enumerate().fold(0, |acc, (i, &v)| {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            acc + v\n        } else {\n            acc\n       \
    \ }\n    })", "    let mut res = 0;\n    for i in 1..lst.len() {\n        if lst[i]\
    \ % 2 != 0 {\n            res += lst[i]\n        }\n    }\n    res", "    let\
    \ mut res = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && x % 2 != 0 {\n            res += x;\n        }\n    }\n    res", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, x)| x).sum()', "    // your solution goes here\n    let\
    \ mut sum = 0;\n    for (i, num) in lst.iter().enumerate() {\n        if i % 2\
    \ == 0 && num % 2 != 0 {\n            sum += num;\n        }\n    }\n    sum",
  '    lst.iter().enumerate().filter(|(idx, e)| e % 2 == 1 && idx % 2 == 0).map(|(_,
    e)| e).sum()', '    lst.iter().enumerate().fold(0, |acc, (i, x)| if i % 2 == 0
    && x % 2 != 0 { acc + x } else { acc })', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &v)| v % 2 == 1).map(|(_, &v)| v).sum()', "    let\
    \ mut result = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i %\
    \ 2 == 0 && v % 2 != 0 {\n            result += v;\n        }\n    }\n    result",
  "    let mut sum = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 != 0 &&\
    \ i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().fold(0,
    |acc, (i, &v)| acc + if i % 2 == 0 { v } else { 0 })', "    let mut sum = 0;\n\
    \    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 !=\
    \ 0 {\n            sum += x;\n        }\n    }\n    sum", "    let mut res = 0;\n\
    \    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e % 2 !=\
    \ 0 {\n            res += e;\n        }\n    }\n    res", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, n)| n).sum()', "    lst.iter().enumerate().fold(0, |acc,\
    \ (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n   \
    \     } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().fold(0,
    |acc, (i, &v)| if i % 2 == 0 && v % 2 != 0 { acc + v } else { acc })', "    let\
    \ mut res = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i %\
    \ 2 == 0 && item % 2 != 0 {\n            res += item;\n        }\n    }\n    res",
  "    lst.iter().enumerate().fold(0, |sum, (i, num)| {\n        if i % 2 == 0 &&\
    \ num % 2 != 0 {\n            sum + num\n        } else {\n            sum\n \
    \       }\n    })", '    lst.iter().enumerate().filter(|(i, x)| *i % 2 == 0 &&
    x % 2 != 0).map(|(_, y)| *y).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().fold(0, |sum,
    (i, &n)| if i % 2 == 0 && n % 2 != 0 { sum + n } else { sum })', '    lst.iter().enumerate().fold(0,
    |acc, (i, &e)| acc + (e % 2) * (i % 2))', "    // Write your code here\n    lst.iter().enumerate().filter(|(x,\
    \ _)| x % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()", "    //\
    \ your answer here\n    let mut out = 0;\n    for i in (0..lst.len()).step_by(2)\
    \ {\n        let x = lst[i];\n        if x & 1 == 1 {\n            out += x;\n\
    \        }\n    }\n    out", "    lst.iter().enumerate().fold(0, |acc, (index,\
    \ &num)| {\n        if index % 2 == 0 && num % 2 != 0 {\n            acc + num\n\
    \        } else {\n            acc\n        }\n    })", "    lst.iter().enumerate().fold(0,\
    \ |acc, (index, num)| {\n        if index % 2 == 0 && num % 2 != 0 {\n       \
    \     acc + num\n        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    &x)| x % 2 == 1 && i % 2 == 0).map(|(_, &x)| x).sum()', '    return lst.iter().enumerate().fold(0,
    |acc, (i, &e)| acc + (i % 2 == 0 && e % 2 != 0) as isize * e);', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, x)| x).sum()', "    let mut acc = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n       \
    \     acc += x;\n        }\n    }\n    acc", "    let mut result = 0;\n    for\
    \ (idx, val) in lst.iter().enumerate() {\n        if idx % 2 == 0 && val % 2 !=\
    \ 0 {\n            result += val;\n        }\n    }\n    result", "    let mut\
    \ s = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ x % 2 != 0 {\n            s += x;\n        }\n    }\n    s", "    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum", "    // code\
    \ here\n    lst.iter().enumerate().fold(0, |acc, (i, &x)| {\n        if i % 2\
    \ == 0 && x % 2 != 0 {\n            acc + x\n        } else {\n            acc\n\
    \        }\n    })", '    lst.iter().enumerate().fold(0, |sum, (i, v)| if i %
    2 == 0 { sum + v.clone() } else { sum })', "    let mut sum = 0;\n    for (i,\
    \ num) in lst.iter().enumerate() {\n        if i % 2 == 0 && num % 2 != 0 {\n\
    \            sum += num;\n        }\n    }\n    sum", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &n)| {\n        if i % 2 == 0 && n % 2 != 0 {\n            acc + n\n\
    \        } else {\n            acc\n        }\n    })", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, v)| {\n        if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n\
    \        } else {\n            acc\n        }\n    })", "    let mut sum = 0;\n\
    \    for (i, val) in lst.iter().enumerate() {\n        if i % 2 == 0 && val %\
    \ 2 != 0 {\n            sum += val;\n        }\n    }\n    sum", "    // Place\
    \ your code here\n    lst.iter().enumerate().filter(|(i, _)| *i % 2 == 0).filter(|(_,\
    \ v)| *v % 2 != 0).map(|(_, v)| *v).sum()", '    lst.iter().enumerate().filter(|&(i,
    x)| i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()', "    let mut sum = 0;\n\
    \    for i in 0..lst.len() {\n        if lst[i] % 2 != 0 && i % 2 == 0 {\n   \
    \         sum += lst[i];\n        }\n    }\n    sum", "    let mut idx = 1;\n\
    \    let mut sum = 0;\n    for i in lst {\n        if idx % 2 == 0 && i % 2 !=\
    \ 0 {\n            sum += i;\n        }\n        idx += 1;\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, x)| x).sum()', "    let mut result = 0;\n    for (i,\
    \ x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n    \
    \        result += x;\n        }\n    }\n    result", "    let mut sum = 0;\n\
    \    for (i, n) in lst.iter().enumerate() {\n        if n % 2 != 0 && i % 2 ==\
    \ 0 {\n            sum += n;\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for (i, e) in lst.iter().enumerate() {\n        if (i % 2) == 0 && (e % 2)\
    \ != 0 {\n            sum += e;\n        }\n    }\n    sum", "    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0)\n        .map(|(_, x)| x).filter(|&x| x % 2 == 1)\n        .sum()",
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, v)| v).sum()',
  "    lst.iter().enumerate().fold(0, |acc, (i, &x)| {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })", "    let mut i = 1;\n    let mut sum = 0;\n    while i < lst.len()\
    \ {\n        sum += lst[i];\n        i += 2;\n    }\n    sum", "    let mut result\
    \ = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e\
    \ % 2 != 0 {\n            result += e;\n        }\n    }\n    result", "    let\
    \ mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && v % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(idx,
    _)| idx % 2 == 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, x)| x).filter(|x| x % 2 == 1).sum()', "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &n)| {\n        if i % 2 == 0 && n % 2 != 0 {\n            acc + n\n\
    \        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().fold(0,
    |acc, (idx, x)| acc + (x & 0x1) * ((idx & 0x1) << 1))', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, &v)| v).sum()', "    lst.iter().enumerate().fold(0, |acc,\
    \ (i, v)| {\n        if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n   \
    \     } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    &v)| (i + 1) % 2 == 0 && v % 2 == 1).map(|(_, &v)| v).sum()', "    let mut sum\
    \ = 0;\n    for (idx, val) in lst.iter().enumerate() {\n        if idx % 2 ==\
    \ 0 && val % 2 != 0 {\n            sum += val;\n        }\n    }\n    sum", " \
    \   lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })", '    lst.iter().enumerate().fold(0, |acc, (i, n)| if i % 2 == 0
    { acc + n } else { acc })', "    let mut sum = 0;\n    for (index, element) in\
    \ lst.iter().enumerate() {\n        if index % 2 == 0 && element % 2 != 0 {\n\
    \            sum += element;\n        }\n    }\n    sum", "    let mut res = 0;\n\
    \    for (i, el) in lst.iter().enumerate() {\n        if i % 2 == 0 && el % 2\
    \ != 0 {\n            res += el;\n        }\n    }\n    res", "    let mut sum\
    \ = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v\
    \ % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0\
    \ && n % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(x,_)|
    (*x as isize) % 2 == 0).map(|(_,x)| *x).sum()', "    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 != 0 {\n\
    \            sum += n;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, x)| x).sum()', "    let mut sum = 0;\n    for (index,\
    \ number) in lst.iter().enumerate() {\n        if index % 2 == 0 && number % 2\
    \ != 0 {\n            sum += number;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let mut\
    \ sum = 0;\n    for (idx, el) in lst.iter().enumerate() {\n        if idx % 2\
    \ == 0 && el % 2 != 0 {\n            sum += el;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, v)| v).filter(|v| v % 2 != 0).sum()', "    let mut sum\
    \ = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i % 2 == 0 &&\
    \ item % 2 != 0 {\n            sum += item;\n        }\n    }\n    sum", "   \
    \ let mut sum = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 != 0 &&\
    \ i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().fold(0,
    |acc, (i, v)| acc + if i % 2 == 0 && v % 2 != 0 { v } else { 0 })', '    lst.iter().enumerate().fold(0,
    |sum, (i, x)| if i % 2 == 0 && x % 2 != 0 { sum + x } else { sum })', "    let\
    \ mut sum = 0;\n    for (i, j) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && j % 2 != 0 {\n            sum += j;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    _x)| *i % 2 == 0).filter(|(_i, x)| *x % 2 == 1).map(|(_i, x)| *x).sum()']
stop_tokens:
- "\n}"
