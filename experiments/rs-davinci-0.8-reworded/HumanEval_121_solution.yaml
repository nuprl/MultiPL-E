name: HumanEval_121_solution
language: rs
prompt: "/// Given a non-empty vector of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// >>> solution(vec![5, 8,\
  \ 7, 1])\n/// 12\n/// >>> solution(vec![3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(vec![30,\
  \ 13, 24, 321])\n/// 0\nfn solution(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
  \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
  \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
  \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
  \ 13, 2, 9]), 3);\n}\n"
completions: ["    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n\
    \        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n   \
    \ }\n    sum", "    let mut res = 0;\n    for i in 1..lst.len() {\n        if\
    \ i % 2 == 0 && lst[i] % 2 != 0 {\n            res += lst[i];\n        }\n   \
    \ }\n    res", "    lst.iter().enumerate().fold(0, |acc, (idx, el)| {\n      \
    \  if (idx % 2 == 0) && (*el % 2 != 0) {\n            acc + el\n        } else\
    \ {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()', "    let mut\
    \ result = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && v % 2 != 0 {\n            result += v;\n        }\n    }\n    result",
  "    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i]\
    \ % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|x|
    x.0 % 2 == 0).map(|x| x.1).filter(|x| x % 2 != 0).sum()', "    let mut sum = 0;\n\
    \    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n   \
    \         sum += lst[i];\n        }\n    }\n    sum", "    let mut x = 0;\n  \
    \  for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n     \
    \       x += lst[i];\n        }\n    }\n    x", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    return
    lst.iter().enumerate().filter(|(i, e)| i % 2 == 0 && e % 2 != 0).map(|(_, e)|
    e).sum();', "    let (a, b) = lst.iter().enumerate().partition(|(i, _)| i % 2\
    \ == 0);\n    a.into_iter().map(|(_, v)| v).sum::<isize>()", '    lst.iter().enumerate().filter(|(i,
    &x)| i % 2 == 0 && x % 2 != 0).map(|(_, &x)| x).sum()', "    let mut sum = 0;\n\
    \    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 !=\
    \ 0 {\n            sum += x;\n        }\n    }\n    sum", "    let mut odd_sum\
    \ = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x\
    \ % 2 != 0 {\n            odd_sum += x;\n        }\n    }\n    odd_sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().fold(0,
    |acc, (i, x)| acc + if i % 2 == 0 { *x } else { 0 })', "    let mut sum = 0;\n\
    \    for (i, e) in lst.iter().enumerate() {\n        if i % 2 == 0 && e % 2 !=\
    \ 0 {\n            sum += e;\n        }\n    }\n    sum", "    let even_nums =\
    \ lst.into_iter().enumerate().filter(|(i, _)| i % 2 == 0);\n    even_nums.filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum()", "    lst.iter().enumerate().fold(0,\
    \ |a, (i, &v)| {\n        if i % 2 == 0 && v % 2 != 0 {\n            a + v\n \
    \       } else {\n            a\n        }\n    })"]
stop_tokens:
- "\n}"
