language: rs
name: HumanEval_115_max_fill
results:
- exit_code: -1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ n_rows = grid.len();\n    let n_cols = grid[0].len();\n    let mut fill_count\
    \ = 0;\n    let mut max_height = 0;\n    let mut tallest_col = 0;\n    let mut\
    \ height_map = vec![0; n_cols];\n    let mut is_row_empty = vec![true; n_rows];\n\
    \    for i in 0..n_rows {\n        for j in 0..n_cols {\n            if grid[i][j]\
    \ == 1 {\n                height_map[j] += 1;\n                if height_map[j]\
    \ > max_height {\n                    max_height = height_map[j];\n          \
    \          tallest_col = j;\n                }\n                is_row_empty[i]\
    \ = false;\n            }\n        }\n    }\n    let mut i = 0;\n    let mut j\
    \ = tallest_col;\n    while i < n_rows {\n        if is_row_empty[i] {\n     \
    \       i += 1;\n            continue;\n        }\n        let bucket_fill = std::cmp::min(capacity,\
    \ max_height - height_map[j]);\n        height_map[j] += bucket_fill;\n      \
    \  fill_count += bucket_fill;\n        if bucket_fill == capacity {\n        \
    \    i += 1;\n            continue;\n        }\n        j += 1;\n        if j\
    \ == n_cols {\n            j = 0;\n        }\n    }\n    fill_count\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut max = 0;\n    let mut result = 0;\n    let num_row = grid.len();\n    for\
    \ i in 0..num_row {\n        for j in 0..grid[i].len() {\n            max = grid[i][j].max(max);\n\
    \        }\n        result += max;\n        max = 0;\n    }\n    result * capacity\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpxce32mds.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ height = grid.len();\n    let width = grid[0].len();\n    let mut new_grid =\
    \ vec![vec![0; width]; height];\n    let mut moves = 0;\n    // row loop\n   \
    \ 'row: for row in 0..height {\n        // First check if the entire row can be\
    \ filled with a single move\n        let mut can_fill = true;\n        for water\
    \ in grid[row].iter() {\n            if *water == 0 {\n                can_fill\
    \ = false;\n                break;\n            }\n        }\n        if can_fill\
    \ {\n            moves += 1;\n            for col in 0..width {\n            \
    \    new_grid[row][col] = capacity;\n            }\n            continue 'row;\n\
    \        }\n        // column loop\n        for col in 0..width {\n          \
    \  if grid[row][col] == 0 {\n                continue;\n            }\n      \
    \      let mut water_to_fill = grid[row][col];\n            let mut remaining_water\
    \ = capacity - new_grid[row][col];\n            let mut filled = 0;\n        \
    \    while remaining_water > 0 && water_to_fill > 0 {\n                if remaining_water\
    \ >= water_to_fill {\n                    filled += water_to_fill;\n         \
    \           water_to_fill = 0;\n                } else {\n                   \
    \ filled += remaining_water;\n                    water_to_fill -= remaining_water;\n\
    \                }\n                remaining_water = capacity - filled;\n   \
    \         }\n            new_grid[row][col] += filled;\n            if water_to_fill\
    \ > 0 {\n                moves += 1;\n                let new_remaining_water\
    \ = capacity - new_grid[row][col];\n                if new_remaining_water >=\
    \ water_to_fill {\n                    new_grid[row][col] += water_to_fill;\n\
    \                } else {\n                    new_grid[row][col] += new_remaining_water;\n\
    \                }\n            }\n        }\n    }\n    moves\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `6`', /tmp/tmphxlbmthn.rs:79:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpl7wcjopv.rs:23:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() == 0 {\n        return 0;\n    }\n    let mut queue = VecDeque::new();\n\
    \    let mut visited = vec![vec![false; grid[0].len()]; grid.len()];\n    let\
    \ mut result = 0;\n    for i in 0..grid.len() {\n        for j in 0..grid[0].len()\
    \ {\n            if grid[i][j] == 1 {\n                queue.push_back((i, j));\n\
    \                visited[i][j] = true;\n            }\n        }\n    }\n    let\
    \ mut row_dirs = vec![-1, 0, 1, 0];\n    let mut col_dirs = vec![0, 1, 0, -1];\n\
    \    while !queue.is_empty() {\n        let mut _size = queue.len();\n       \
    \ while _size > 0 {\n            let curr = queue.pop_front().unwrap();\n    \
    \        let (row, col) = curr;\n            for k in 0..4 {\n               \
    \ let new_row = row + row_dirs[k];\n                let new_col = col + col_dirs[k];\n\
    \                if new_row >= 0 && new_row < grid.len() && new_col >= 0 && new_col\
    \ < grid[0].len() && !visited[new_row][new_col] {\n                    visited[new_row][new_col]\
    \ = true;\n                    queue.push_back((new_row, new_col));\n        \
    \        }\n            }\n            _size -= 1;\n        }\n        result\
    \ += 1;\n    }\n    (result-1) * capacity\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpi9ztsoiv.rs:26:21\n   |\n26 |     let mut queue = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    // let mut grid = grid;\n    let height = grid.len();\n\
    \    let width = grid[0].len();\n    let mut visited = vec![vec![false; width];\
    \ height];\n    let offsets = vec![\n        vec![-1, 0],\n        vec![1, 0],\n\
    \        vec![0, -1],\n        vec![0, 1],\n    ];\n    for i in 0..height {\n\
    \        for j in 0..width {\n            if !visited[i][j] && grid[i][j] == 1\
    \ {\n                visited[i][j] = true;\n                let mut queue = vec![vec![i,\
    \ j]];\n                let mut max_depth = 0;\n                while !queue.is_empty()\
    \ {\n                    let current = queue.pop().unwrap();\n               \
    \     let current_depth = grid[current[0]][current[1]];\n                    max_depth\
    \ = max_depth.max(current_depth);\n                    for offset in offsets.iter()\
    \ {\n                        let new_i = current[0] as isize + offset[0];\n  \
    \                      let new_j = current[1] as isize + offset[1];\n        \
    \                if 0 <= new_i && new_i < height as isize\n                  \
    \          && 0 <= new_j && new_j < width as isize\n                         \
    \   && !visited[new_i as usize][new_j as usize]\n                            &&\
    \ grid[new_i as usize][new_j as usize] == 1\n                        {\n     \
    \                       visited[new_i as usize][new_j as usize] = true;\n    \
    \                        queue.push(vec![new_i as usize, new_j as usize]);\n \
    \                       }\n                    }\n                }\n        \
    \        count += max_depth / capacity;\n                if max_depth % capacity\
    \ != 0 {\n                    count += 1;\n                }\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmpig6ohk0q.rs:69:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    // the height of the water in each well\n    let mut water\
    \ = vec![0; grid[0].len()];\n    // the number of 1's in the current row\n   \
    \ let mut ones = 0;\n    for row in grid {\n        for (col, &item) in row.iter().enumerate()\
    \ {\n            // if there is a 1, keep track of it\n            if item ==\
    \ 1 {\n                ones += 1;\n            }\n            // otherwise fill\
    \ the well with water from the bucket\n            else {\n                //\
    \ calculate the amount of water in the bucket as the \n                // capacity\
    \ minus the height of the water in the well\n                let fill = capacity\
    \ - water[col];\n                // if there is water in the bucket\n        \
    \        if fill > 0 {\n                    // add the water to the well\n   \
    \                 water[col] += fill;\n                    // add the amount of\
    \ water added to the total count\n                    count += fill;\n       \
    \         }\n            }\n        }\n        // if there are 1's in the row,\
    \ empty the wells\n        if ones > 0 {\n            // empty the wells by replacing\
    \ the height of the water with 0\n            water = vec![0; grid[0].len()];\n\
    \            // add 1 to the total count as we need to lower the bucket\n    \
    \        count += 1;\n        }\n        // reset the count of 1's in the row\n\
    \        ones = 0;\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `grid`\n   --> /tmp/tmpjid800_m.rs:51:29\n\
    \    |\n22  | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n\
    \    |             ---- move occurs because `grid` has type `Vec<Vec<isize>>`,\
    \ which does not implement the `Copy` trait\n...\n28  |     for row in grid {\n\
    \    |                ---- `grid` moved due to this implicit call to `.into_iter()`\n\
    ...\n51  |             water = vec![0; grid[0].len()];\n    |                \
    \             ^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `grid`\nhelp: consider iterating\
    \ over a slice of the `Vec<Vec<isize>>`'s content to avoid moving into the `for`\
    \ loop\n    |\n28  |     for row in &grid {\n    |                +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ (m, n) = (grid.len(), grid[0].len());\n    let mut sum = 0;\n    for i in 0..m\
    \ {\n        let idx = grid[i].iter().rposition(|&x| x == 1).unwrap();\n     \
    \   let x = idx as isize;\n        let y = m as isize - i as isize - 1;\n    \
    \    sum += x * y;\n    }\n    sum / capacity\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `6`', /tmp/tmpmetz2rhi.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ row_len = grid.len();\n    let col_len = grid[0].len();\n    let mut res = 0;\n\
    \    for j in 0..col_len {\n        let mut total = 0;\n        for i in 0..row_len\
    \ {\n            if grid[i][j] == 1 {\n                total += 1;\n         \
    \   }\n        }\n        let mut added = 0;\n        for i in 0..row_len {\n\
    \            if grid[i][j] == 1 {\n                total -= 1;\n             \
    \   if total > 0 {\n                    if capacity - added >= total {\n     \
    \                   added += total;\n                        res += 1;\n     \
    \               } else {\n                        res += 1;\n                \
    \        added = capacity;\n                    }\n                }\n       \
    \     }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmp7wwqhowx.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let mut rows = Vec::new();\n\
    \    for row in grid {\n        let mut wells = Vec::new();\n        for c in\
    \ row {\n            wells.push(Well { full: c == 1, fill: 0 });\n        }\n\
    \        rows.push(WellRow { wells: wells });\n    }\n    let mut count = 0;\n\
    \    loop {\n        let mut water_remaining = false;\n        let mut water_overflow\
    \ = false;\n        for well_row in &mut rows {\n            for well in &mut\
    \ well_row.wells {\n                if well.full {\n                    well.fill\
    \ += 1;\n                    if well.fill > capacity {\n                     \
    \   water_overflow = true;\n                    }\n                    water_remaining\
    \ = true;\n                }\n            }\n        }\n        if !water_remaining\
    \ {\n            break;\n        }\n        if water_overflow {\n            count\
    \ += 1;\n            let mut water_remaining = false;\n            for well_row\
    \ in &mut rows {\n                for well in &mut well_row.wells {\n        \
    \            if well.fill > capacity {\n                        well.fill -= capacity;\n\
    \                        water_remaining = true;\n                    }\n    \
    \            }\n            }\n            if !water_remaining {\n           \
    \     break;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n \
    \   let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0422]: cannot find struct, variant or union type `Well` in this\
    \ scope\n  --> /tmp/tmpi8cn9u3w.rs:30:24\n   |\n30 |             wells.push(Well\
    \ { full: c == 1, fill: 0 });\n   |                        ^^^^ not found in this\
    \ scope\n\nerror[E0422]: cannot find struct, variant or union type `WellRow` in\
    \ this scope\n  --> /tmp/tmpi8cn9u3w.rs:32:19\n   |\n32 |         rows.push(WellRow\
    \ { wells: wells });\n   |                   ^^^^^^^ not found in this scope\n\
    \nerror[E0609]: no field `wells` on type `&mut _`\n  --> /tmp/tmpi8cn9u3w.rs:39:39\n\
    \   |\n39 |             for well in &mut well_row.wells {\n   |              \
    \                         ^^^^^\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0422, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0422`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut vector = Vec::with_capacity(grid.len());\n    for i in 0..grid.len() {\n\
    \        let sum = grid[i].iter().sum();\n        vector.push(sum);\n    }\n \
    \   let sum = vector.iter().sum();\n    if sum < capacity {\n        0\n    }\
    \ else {\n        (sum as f64 / capacity as f64).ceil() as isize\n    }\n}\n\n\
    fn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp7bis901z.rs:32:10\n\
    \   |\n28 |     let sum = vector.iter().sum();\n   |         --- consider giving\
    \ `sum` a type\n...\n32 |         (sum as f64 / capacity as f64).ceil() as isize\n\
    \   |          ^^^ cannot infer type\n   |\n   = note: type must be known at this\
    \ point\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0282`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ rows = grid.len();\n    let cols = grid[0].len();\n    let mut max_fill = 0;\n\
    \    for row in 0..rows {\n        for col in 0..cols {\n            max_fill\
    \ += fill_one(grid.clone(), capacity, row, col);\n        }\n    }\n    max_fill\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fill_one` in this scope\n  --> /tmp/tmpttxzjouz.rs:28:25\n\
    \   |\n28 |             max_fill += fill_one(grid.clone(), capacity, row, col);\n\
    \   |                         ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut min = isize::max_value();\n    let mut count = 0;\n    let mut max_arr =\
    \ Vec::new();\n    for row in grid {\n        let mut max = isize::min_value();\n\
    \        for col in row {\n            if col > max {\n                max = col;\n\
    \            }\n        }\n        max_arr.push(max);\n    }\n    for i in 0..max_arr.len()\
    \ {\n        let val = max_arr[i];\n        if val < min {\n            min =\
    \ val;\n        }\n    }\n    for i in 0..max_arr.len() {\n        let val = max_arr[i];\n\
    \        if val > min {\n            let diff = val - min;\n            if diff\
    \ > capacity {\n                let mut rem = diff % capacity;\n             \
    \   count += (diff - rem) / capacity;\n                count += if rem > 0 { 1\
    \ } else { 0 };\n            } else {\n                count += 1;\n         \
    \   }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpri0heoly.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut max_well = 0;\n    for row in grid {\n        for\
    \ &col in row.iter() {\n            max_well = max(max_well, col);\n        }\n\
    \    }\n    for _ in 0..max_well {\n        for row in grid.iter() {\n       \
    \     for &col in row.iter() {\n                if col > 0 {\n               \
    \     count += 1;\n                }\n            }\n        }\n        for row\
    \ in grid.iter_mut() {\n            for col in row.iter_mut() {\n            \
    \    if *col > 0 {\n                    *col -= 1;\n                }\n      \
    \      }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpi5zw9v8t.rs:27:24\n\
    \   |\n27 |             max_well = max(max_well, col);\n   |                 \
    \       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut wells = grid.iter().map(|x| x.iter().sum::<isize>()).collect::<Vec<isize>>();\n\
    \    let mut steps = 0;\n    while wells.iter().any(|x| *x > 0) {\n        let\
    \ max_val = wells.iter().max().unwrap();\n        for x in wells.iter_mut() {\n\
    \            if *x == *max_val {\n                *x -= capacity;\n          \
    \  }\n        }\n        steps += 1;\n    }\n    steps\n}\n\nfn main() {\n   \
    \ let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `wells` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmpxkb5u707.rs:27:18\n   |\n26 |         let max_val\
    \ = wells.iter().max().unwrap();\n   |                       ------------ immutable\
    \ borrow occurs here\n27 |         for x in wells.iter_mut() {\n   |         \
    \         ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n28 |             if *x\
    \ == *max_val {\n   |                      -------- immutable borrow later used\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0502`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut max_fill = 0;\n    let mut total_fill = 0;\n    let mut fill_count = 0;\n\
    \    let height = grid.len();\n    let width = grid[0].len();\n    let mut grid_iter\
    \ = grid.iter();\n    while max_fill < height {\n        let mut row_iter = grid_iter.next().unwrap().iter();\n\
    \        while total_fill < capacity && row_iter.any(|n| *n == 1) {\n        \
    \    let mut col_iter = row_iter.take(capacity as usize);\n            let row_fill\
    \ = col_iter.fold(0, |acc, n| acc + n);\n            total_fill += row_fill;\n\
    \            fill_count += 1;\n        }\n        max_fill += 1;\n        total_fill\
    \ = 0;\n    }\n    fill_count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `width`\n  --> /tmp/tmpgmu5p4ot.rs:27:9\n   |\n\
    27 |     let width = grid[0].len();\n   |         ^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_width`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpgmu5p4ot.rs:32:17\n\
    \   |\n32 |             let mut col_iter = row_iter.take(capacity as usize);\n\
    \   |                 ----^^^^^^^^\n   |                 |\n   |             \
    \    help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: borrow of moved value: `row_iter`\n    --> /tmp/tmpgmu5p4ot.rs:31:40\n\
    \     |\n30   |         let mut row_iter = grid_iter.next().unwrap().iter();\n\
    \     |             ------------   -------------------------------- this reinitialization\
    \ might get skipped\n     |             |\n     |             move occurs because\
    \ `row_iter` has type `std::slice::Iter<'_, isize>`, which does not implement\
    \ the `Copy` trait\n31   |         while total_fill < capacity && row_iter.any(|n|\
    \ *n == 1) {\n     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n32   |             let mut col_iter = row_iter.take(capacity\
    \ as usize);\n     |                                         -----------------------\
    \ `row_iter` moved due to this method call, in previous iteration of loop\n  \
    \   |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `row_iter`\n\nerror: aborting due to previous error; 2 warnings emitted\n\n\
    For more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut waters: Vec<usize> = Vec::new();\n    for row in\
    \ grid {\n        for item in row {\n            if item == 1 {\n            \
    \    waters.push(1);\n            } else {\n                waters.push(0);\n\
    \            }\n        }\n    }\n    let row_length = waters.len() / grid.len();\n\
    \    for row in 0..grid.len() {\n        for index in 0..row_length {\n      \
    \      if waters[row * row_length + index] == 1 {\n                count += 1;\n\
    \                for x in 0..capacity {\n                    if (index + x + 1)\
    \ < row_length {\n                        waters[row * row_length + index + x\
    \ + 1] = 0;\n                    }\n                }\n            }\n       \
    \ }\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp82_rbull.rs:40:33\n   |\n\
    40 |                     if (index + x + 1) < row_length {\n   |             \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add `isize` to `usize`\n  --> /tmp/tmp82_rbull.rs:40:31\n   |\n40 |        \
    \             if (index + x + 1) < row_length {\n   |                        \
    \       ^ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp82_rbull.rs:41:59\n\
    \   |\n41 |                         waters[row * row_length + index + x + 1] =\
    \ 0;\n   |                                                           ^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmp82_rbull.rs:41:57\n   |\n41 |                         waters[row * row_length\
    \ + index + x + 1] = 0;\n   |                                                \
    \         ^ no implementation for `usize + isize`\n   |\n   = help: the trait\
    \ `Add<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n    \
    \         <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n      \
    \       <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n          \
    \   <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n             <&'a\
    \ isize as Add<isize>>\n           and 48 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut answer = 0;\n    let height = grid.len();\n    let width = grid[0].len();\n\
    \    let mut well = vec![vec![0; width]; height];\n    for row in 0..height {\n\
    \        for col in 0..width {\n            if grid[row][col] == 1 {\n       \
    \         well[row][col] = capacity;\n            }\n        }\n    }\n    let\
    \ mut bucket = capacity;\n    while bucket > 0 {\n        for row in 0..height\
    \ {\n            for col in 0..width {\n                if bucket > 0 && well[row][col]\
    \ > 0 {\n                    bucket -= 1;\n                    well[row][col]\
    \ -= 1;\n                }\n            }\n        }\n        answer += 1;\n \
    \   }\n    return answer;\n}\n\nfn main() {\n    let candidate = max_fill;\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1,\
    \ 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0,\
    \ 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `6`', /tmp/tmp7zrj4fq_.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut times = 0;\n    let mut n = 0;\n    while n < grid.len() {\n        let\
    \ max_wells = grid[n].iter().filter(|&&x| x == 1).count();\n        let mut i\
    \ = 0;\n        for well in grid[n].iter() {\n            if well == &1 {\n  \
    \              i += 1;\n            }\n            if i == max_wells {\n     \
    \           break;\n            }\n        }\n        if i > 0 {\n           \
    \ let wells_to_fill = grid[n].iter().take(i).filter(|&&x| x == 0).count();\n \
    \           times += wells_to_fill;\n            if n + 1 < grid.len() {\n   \
    \             for well in grid[n+1].iter_mut().take(i) {\n                   \
    \ if *well == 0 {\n                        *well = 1;\n                    }\n\
    \                }\n            }\n        }\n        n += 1;\n    }\n    times\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwjrb_6jc.rs:49:5\n   |\n\
    22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n   |    \
    \                                                    ----- expected `isize` because\
    \ of return type\n...\n49 |     times\n   |     ^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n49 |     times.try_into().unwrap()\n   |\
    \          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ m = grid.len();\n    let n = grid[0].len();\n    let mut buckets = vec![0; m];\n\
    \    let mut fill = 0;\n    for _ in 0..n {\n        for i in 0..m {\n       \
    \     if grid[i][n] == 1 {\n                buckets[i] += 1;\n            }\n\
    \        }\n        let capacity = *buckets.iter().min().unwrap();\n        fill\
    \ += capacity;\n        buckets = buckets.iter().map(|x| x - capacity).collect();\n\
    \    }\n    fill\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmp2hvnrqgb.rs:29:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut res = 0;\n    let mut rows = Vec::with_capacity(grid.len());\n    for row\
    \ in grid {\n        let mut this_row = Row {\n            row: row,\n       \
    \     iterator: row.iter().cloned().enumerate(),\n            filled: 0,\n   \
    \     };\n        rows.push(this_row);\n    }\n    loop {\n        // fill empty\
    \ wells\n        let mut new_row = Row {\n            row: vec![],\n         \
    \   iterator: vec![].iter().cloned().enumerate(),\n            filled: 0,\n  \
    \      };\n        for row in rows.iter_mut() {\n            let mut next_row\
    \ = false;\n            let mut i = 0;\n            while let Some((index, item))\
    \ = row.iterator.next() {\n                if item == 0 {\n                  \
    \  if row.filled < capacity {\n                        new_row.row.push(1);\n\
    \                        row.filled += 1;\n                    } else {\n    \
    \                    new_row.row.push(0);\n                    }\n           \
    \     } else {\n                    new_row.row.push(0);\n                }\n\
    \                i = index;\n                next_row = true;\n            }\n\
    \            row.iterator = row.row.iter().cloned().enumerate().skip(i + 1);\n\
    \            if next_row {\n                res += 1;\n            }\n       \
    \ }\n        if new_row.row.iter().all(|x| *x == 0) {\n            break;\n  \
    \      }\n        rows.insert(0, new_row);\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0422]: cannot find struct, variant or union type `Row` in this scope\n\
    \  --> /tmp/tmpca_f1tq0.rs:26:28\n   |\n26 |         let mut this_row = Row {\n\
    \   |                            ^^^ not found in this scope\n\nerror[E0422]:\
    \ cannot find struct, variant or union type `Row` in this scope\n  --> /tmp/tmpca_f1tq0.rs:35:27\n\
    \   |\n35 |         let mut new_row = Row {\n   |                           ^^^\
    \ not found in this scope\n\nerror[E0609]: no field `iterator` on type `&mut _`\n\
    \  --> /tmp/tmpca_f1tq0.rs:43:49\n   |\n43 |             while let Some((index,\
    \ item)) = row.iterator.next() {\n   |                                       \
    \          ^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0422, E0609.\nFor more information about an error,\
    \ try `rustc --explain E0422`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ h = grid.len();\n    let w = grid[0].len();\n    let mut water = 0;\n    for\
    \ i in 0..h {\n        for j in 0..w {\n            if grid[i][j] == 1 {\n   \
    \             for k in i..h {\n                    if grid[k][j] == 1 {\n    \
    \                    water += 1;\n                    } else {\n             \
    \           break;\n                    }\n                }\n            }\n\
    \        }\n    }\n    (water + capacity - 1) / capacity\n}\n\nfn main() {\n \
    \   let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `6`', /tmp/tmp3duv4g9r.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 0
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut result = 0;\n    for well in grid {\n        let mut in_well_space = 0;\n\
    \        for water in well {\n            if water == 1 {\n                in_well_space\
    \ += 1;\n            }\n        }\n        result += in_well_space / capacity;\n\
    \        if in_well_space % capacity != 0 {\n            result += 1;\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = max_fill;\n   \
    \ assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1,\
    \ 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0,\
    \ 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for row in grid {\n        let row_sum = row.iter().sum::<isize>();\n\
    \        if row_sum > capacity {\n            sum += capacity;\n        } else\
    \ {\n            sum += row_sum;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpb_a0s42s.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ n = grid.len();\n    let m = grid[0].len();\n    let mut current_height = 0;\n\
    \    let mut times = 0;\n    let mut min_h = 1000;\n    let mut min_j = 0;\n \
    \   loop {\n        for j in 0..m {\n            let mut overfilled = false;\n\
    \            for i in 0..n {\n                if grid[i][j] == 1 {\n         \
    \           overfilled = true;\n                    break;\n                }\n\
    \            }\n            if !overfilled {\n                times += 1;\n  \
    \              for i in 0..n {\n                    grid[i][j] = capacity;\n \
    \               }\n            }\n        }\n        min_h = 1000;\n        min_j\
    \ = 0;\n        for j in 0..m {\n            let mut full = true;\n          \
    \  for i in 0..n {\n                if grid[i][j] == 0 {\n                   \
    \ full = false;\n                    break;\n                }\n            }\n\
    \            if !full {\n                continue;\n            }\n          \
    \  let mut h = 0;\n            for i in 0..n {\n                if grid[i][j]\
    \ == capacity {\n                    h += 1;\n                }\n            }\n\
    \            if h <= min_h {\n                min_h = h;\n                min_j\
    \ = j;\n            }\n        }\n        if min_h == 1000 {\n            break;\n\
    \        }\n        times += 1;\n        for i in 0..n {\n            grid[i][j]\
    \ = 0;\n        }\n    }\n    times\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmpusuzriap.rs:74:21\n\
    \   |\n74 |             grid[i][j] = 0;\n   |                     ^ help: a local\
    \ variable with a similar name exists: `i`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut actions = 0;\n    let mut buckets = vec![capacity; grid[0].len()];\n   \
    \ for row in &grid {\n        for (idx, col) in row.iter().enumerate() {\n   \
    \         if *col == 1 {\n                if buckets[idx] > 0 {\n            \
    \        buckets[idx] -= 1;\n                } else {\n                    buckets[idx]\
    \ = capacity - 1;\n                    actions += 1;\n                }\n    \
    \        }\n        }\n    }\n    actions\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmpea6s4xk5.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ well_depth = grid[0].len();\n    let num_wells = grid.len();\n    let mut remaining_water:\
    \ Vec<isize> = Vec::with_capacity(num_wells);\n    for well in &grid {\n     \
    \   let mut depth = 0;\n        for index in 0..well_depth {\n            if well[index]\
    \ == 1 {\n                depth = index;\n            }\n        }\n        remaining_water.push(depth);\n\
    \    }\n    let mut total_water = 0;\n    let mut count = 0;\n    while total_water\
    \ < well_depth * num_wells {\n        let mut min_depth = i32::max_value();\n\
    \        for well in &remaining_water {\n            if *well < min_depth {\n\
    \                min_depth = *well;\n            }\n        }\n        let to_fill\
    \ = capacity - min_depth;\n        if to_fill == 0 {\n            count += 1;\n\
    \        }\n        total_water += to_fill;\n        remaining_water = remaining_water.iter().map(|x|\
    \ x - min_depth).collect();\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpesabkguh.rs:33:30\n   |\n\
    33 |         remaining_water.push(depth);\n   |                              ^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n33 |         remaining_water.push(depth.try_into().unwrap());\n\
    \   |                                   ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpesabkguh.rs:40:24\n   |\n40 |             if\
    \ *well < min_depth {\n   |                        ^^^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n40 |             if *well < min_depth.try_into().unwrap()\
    \ {\n   |                                 ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpesabkguh.rs:41:29\n   |\n38 |         let mut\
    \ min_depth = i32::max_value();\n   |                             ----------------\
    \ expected due to this value\n...\n41 |                 min_depth = *well;\n \
    \  |                             ^^^^^ expected `i32`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpesabkguh.rs:44:34\n   |\n44 |         let to_fill\
    \ = capacity - min_depth;\n   |                                  ^^^^^^^^^ expected\
    \ `isize`, found `i32`\n\nerror[E0277]: cannot subtract `i32` from `isize`\n \
    \ --> /tmp/tmpesabkguh.rs:44:32\n   |\n44 |         let to_fill = capacity - min_depth;\n\
    \   |                                ^ no implementation for `isize - i32`\n \
    \  |\n   = help: the trait `Sub<i32>` is not implemented for `isize`\n   = help:\
    \ the following other types implement trait `Sub<Rhs>`:\n             <&'a f32\
    \ as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as\
    \ Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n\
    \             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n      \
    \       <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpesabkguh.rs:48:24\n   |\n48 |         total_wa"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let rows = grid.len();\n    let cols = grid[0].len();\n\
    \    let mut matrix = grid;\n    let mut max_prev_row = vec![0; cols];\n    let\
    \ mut max_current_row = vec![0; cols];\n    for i in 0..rows {\n        for j\
    \ in 0..cols {\n            if matrix[i][j] == 1 {\n                let level\
    \ = std::cmp::max(max_prev_row[j], max_current_row[j]);\n                if level\
    \ < capacity {\n                    matrix[i][j] = capacity - level;\n       \
    \             count += capacity - level;\n                }\n            }\n \
    \           max_current_row[j] = std::cmp::max(max_current_row[j], matrix[i][j]);\n\
    \        }\n        max_prev_row = max_current_row;\n        max_current_row =\
    \ vec![0; cols];\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `6`', /tmp/tmplu1ngu94.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpl7wcjopv.rs:23:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut max = 0;\n    let max_array = build_max_array(&grid);\n\
    \    for i in 0..grid.len() {\n        for j in 0..grid[i].len() {\n         \
    \   if grid[i][j] == 1 {\n                count += 1;\n            }\n       \
    \     if max_array[i][j] <= capacity {\n                max = std::cmp::max(max,\
    \ j);\n            }\n        }\n    }\n    count + max\n}\n\nfn main() {\n  \
    \  let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `build_max_array` in this scope\n  -->\
    \ /tmp/tmpilrw2ffz.rs:25:21\n   |\n25 |     let max_array = build_max_array(&grid);\n\
    \   |                     ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpilrw2ffz.rs:36:5\n   |\n22 | fn max_fill(grid:\
    \ Vec<Vec<isize>>, capacity: isize) -> isize {\n   |                         \
    \                               ----- expected `isize` because of return type\n\
    ...\n36 |     count + max\n   |     ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n36 |     (count + max).try_into().unwrap()\n   |  \
    \   +           +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() == 0 {\n        return 0;\n    }\n    let well_len = grid[0].len();\n\
    \    if well_len == 0 {\n        return 0;\n    }\n    let num_wells = grid.len();\n\
    \    let mut water_count = 0;\n    for idx in 0..well_len {\n        for i in\
    \ 0..num_wells {\n            if grid[i][idx] == 1 {\n                grid[i][idx]\
    \ = 0;\n                if capacity > 0 {\n                    water_count +=\
    \ 1;\n                    capacity -= 1;\n                }\n            }\n \
    \       }\n    }\n    water_count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `grid` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpse614dbu.rs:35:17\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n35 |                 grid[i][idx] = 0;\n   |\
    \                 ^^^^ cannot borrow as mutable\n\nerror[E0384]: cannot assign\
    \ to immutable argument `capacity`\n  --> /tmp/tmpse614dbu.rs:38:21\n   |\n22\
    \ | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n   |     \
    \                               -------- help: consider making this binding mutable:\
    \ `mut capacity`\n...\n38 |                     capacity -= 1;\n   |         \
    \            ^^^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\n\
    For more information about an error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ Important:\n    // * The height of the water depends on the lowest height of\
    \ a well.\n    // * The height of a well is constant.\n    // * The water height\
    \ is the same for all wells.\n    // * The water level can go down and up multiple\
    \ times.\n    // * When the water level goes down to 0, it's impossible to fill\
    \ it\n    //   with water again.\n    // The following algorithm is linear O(grid.size()).\n\
    \    let mut water_height = 0;\n    let mut counter = 0;\n    let mut prev_water_height\
    \ = None;\n    while water_height > 0 || prev_water_height.is_none() {\n     \
    \   water_height = grid.iter().map(|row| {\n            let lowest_well = row.iter().min().unwrap();\n\
    \            lowest_well - water_height\n        }).max().unwrap();\n        if\
    \ prev_water_height.is_some() {\n            counter += water_height - prev_water_height.unwrap();\n\
    \        }\n        prev_water_height = Some(water_height);\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `6`', /tmp/tmp1uoh6aj4.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut wells = vec![vec![]; grid.len()];\n    let mut res = 0;\n    for i in 0..grid.len()\
    \ {\n        for j in 0..grid[i].len() {\n            if grid[i][j] > 0 {\n  \
    \              wells[i].push(1);\n            }\n        }\n    }\n    for i in\
    \ 0..wells.len() {\n        if wells[i].len() > 0 {\n            res += 1;\n \
    \       }\n        let mut bucket = capacity;\n        for j in 0..wells[i].len()\
    \ {\n            bucket -= wells[i][j];\n            if bucket == 0 {\n      \
    \          res += 1;\n                bucket = capacity;\n            }\n    \
    \    }\n    }\n    res\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpsri6dnye.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut fill = 0;\n    for row in &grid {\n        let mut fill_row = capacity;\n\
    \        for well in row {\n            fill_row = fill_row.min(*well);\n    \
    \    }\n        fill += fill_row;\n    }\n    fill\n}\n\nfn main() {\n    let\
    \ candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `6`', /tmp/tmpzaq6iur3.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut remaining = capacity;\n    let mut grid = grid;\n\
    \    let mut water = 0;\n    let mut last_water = 0;\n    while remaining > 0\
    \ {\n        let mut has_more = false;\n        for row in grid.iter_mut() {\n\
    \            for x in row.iter_mut() {\n                if *x == 1 {\n       \
    \             has_more = true;\n                    *x = 0;\n                \
    \    remaining -= 1;\n                    water += 1;\n                    if\
    \ remaining == 0 {\n                        return count + 1;\n              \
    \      }\n                }\n            }\n        }\n        count += 1;\n \
    \       if has_more {\n            last_water = water;\n        } else {\n   \
    \         if last_water > 0 {\n                water = last_water;\n         \
    \       last_water = 0;\n            } else {\n                break;\n      \
    \      }\n        }\n        remaining = capacity;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `6`', /tmp/tmpgilh1q1p.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: -1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut wells: Vec<isize> = grid.iter().map(|row| row.iter().sum()).collect();\n\
    \    let mut count = 0;\n    while wells.iter().any(|a| *a > 0) {\n        wells\
    \ = wells.iter().map(|a| {\n            if *a > capacity {\n                count\
    \ += 1;\n                capacity\n            } else {\n                count\
    \ += 1;\n                *a\n            }\n        }).collect();\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977578
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut result = 0;\n    let mut max_water = grid.iter().fold(0, |sum, x| sum +\
    \ x.iter().sum::<isize>());\n    if max_water == 0 {\n        return result;\n\
    \    }\n    let mut r = 0;\n    let mut sum = 0;\n    for c in 0..grid[0].len()\
    \ {\n        sum += grid[r][c];\n        if sum == capacity {\n            result\
    \ += 1;\n            sum = 0;\n        }\n    }\n    r += 1;\n    for row in grid.iter().skip(1)\
    \ {\n        let mut new_sum = sum;\n        for c in 0..row.len() {\n       \
    \     new_sum += row[c];\n            if new_sum == capacity {\n             \
    \   result += 1;\n                new_sum = 0;\n            }\n        }\n   \
    \     sum = new_sum;\n    }\n    if sum > 0 {\n        result += 1;\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpexo1wrwz.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut total = 0;\n    let mut row_max: Vec<isize> = vec![0; grid.len()];\n   \
    \ let mut col_max: Vec<isize> = vec![0; grid[0].len()];\n    let mut max = 0;\n\
    \    for i in 0..grid.len() {\n        for j in 0..grid[i].len() {\n         \
    \   max = std::cmp::max(max, grid[i][j]);\n            row_max[i] = std::cmp::max(row_max[i],\
    \ grid[i][j]);\n            col_max[j] = std::cmp::max(col_max[j], grid[i][j]);\n\
    \        }\n    }\n    for i in 0..grid.len() {\n        for j in 0..grid[i].len()\
    \ {\n            let val = std::cmp::min(std::cmp::min(row_max[i], col_max[j]),\
    \ max);\n            total += val - grid[i][j];\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmp65x_lhtj.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut total_fill = 0;\n    let mut max_well_size = 0;\n    for row in grid {\n\
    \        let well_size = row.iter().sum();\n        if well_size > max_well_size\
    \ {\n            max_well_size = well_size;\n        }\n    }\n    let num_rounds\
    \ = max_well_size / capacity;\n    let remaining_water = max_well_size % capacity;\n\
    \    total_fill += num_rounds * grid.len() as isize;\n    if remaining_water >\
    \ 0 {\n        for row in grid {\n            for water in row {\n           \
    \     if water > 0 {\n                    total_fill += 1;\n                }\n\
    \            }\n        }\n    }\n    total_fill\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `grid`\n   --> /tmp/tmphtwuf75n.rs:33:32\n\
    \    |\n22  | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n\
    \    |             ---- move occurs because `grid` has type `Vec<Vec<isize>>`,\
    \ which does not implement the `Copy` trait\n...\n25  |     for row in grid {\n\
    \    |                ---- `grid` moved due to this implicit call to `.into_iter()`\n\
    ...\n33  |     total_fill += num_rounds * grid.len() as isize;\n    |        \
    \                        ^^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `grid`\nhelp:\
    \ consider iterating over a slice of the `Vec<Vec<isize>>`'s content to avoid\
    \ moving into the `for` loop\n    |\n25  |     for row in &grid {\n    |     \
    \           +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ assert!(grid.len() >= 1 && grid.len() <= 10);\n    // assert!(grid[0].len()\
    \ >= 1 && grid[0].len() <= 10);\n    let (num_rows, num_cols) = (grid.len(), grid[0].len());\n\
    \    // println!(\"{} rows, {} cols\", num_rows, num_cols);\n    let mut buckets\
    \ = vec![capacity; num_cols];\n    let mut num_dips = 0;\n    let mut grid_iter\
    \ = grid.iter();\n    loop {\n        let row = match grid_iter.next() {\n   \
    \         Some(r) => r,\n            None => break,\n        };\n        // println!(\"\
    row {:?}\", row);\n        // println!(\"buckets {:?}\", buckets);\n        let\
    \ mut row_iter = row.iter();\n        let mut new_buckets = vec![0; num_cols];\n\
    \        for bucket in &mut new_buckets {\n            let num_waters = match\
    \ row_iter.next() {\n                Some(w) => *w,\n                None => break,\n\
    \            };\n            let bucket_fill = if num_waters > 0 {\n         \
    \       // println!(\"num_waters {}\", num_waters);\n                buckets.iter().fold(0,\
    \ |min, x| cmp::min(min, x))\n            } else {\n                0\n      \
    \      };\n            *bucket = bucket_fill;\n            num_dips += bucket_fill;\n\
    \        }\n        buckets = new_buckets;\n    }\n    num_dips\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpdtabf0eg.rs:46:49\n   |\n46 |                 buckets.iter().fold(0,\
    \ |min, x| cmp::min(min, x))\n   |                                           \
    \      ^^^ use of undeclared crate or module `cmp`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut res = 0;\n    for row in &grid {\n        let mut cur_cap = capacity;\n\
    \        for &col in row {\n            if col == 1 {\n                if cur_cap\
    \ > 0 {\n                    cur_cap -= 1;\n                } else {\n       \
    \             res += 1;\n                    cur_cap = capacity - 1;\n       \
    \         }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4oqa_z3r.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: -1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut grid = grid;\n    let mut res = 0;\n    let mut is_not_all_zero = true;\n\
    \    while is_not_all_zero {\n        let mut max_water = 0;\n        let mut\
    \ row_index = 0;\n        for (index, row) in grid.iter().enumerate() {\n    \
    \        let mut row_sum = 0;\n            for water in row {\n              \
    \  row_sum += water;\n            }\n            if row_sum > max_water {\n  \
    \              max_water = row_sum;\n                row_index = index;\n    \
    \        }\n        }\n        if max_water == 0 {\n            is_not_all_zero\
    \ = false;\n        } else {\n            res += 1;\n            let max_water\
    \ = max_water - capacity;\n            for water in &mut grid[row_index] {\n \
    \               *water = *water - max_water;\n            }\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977578
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut grid = grid;\n    let mut count = 0;\n    for i in grid.iter_mut() {\n \
    \       for j in i.iter_mut() {\n            if *j != 0 {\n                *j\
    \ = 1;\n                count += 1;\n            }\n        }\n    }\n    let\
    \ mut row_iter = grid.iter();\n    let mut remainder = capacity - row_iter.next().unwrap().iter().sum::<isize>();\n\
    \    for i in row_iter {\n        let row_sum = i.iter().sum::<isize>();\n   \
    \     if remainder < 0 {\n            remainder = row_sum;\n            count\
    \ += 1;\n        } else {\n            remainder -= row_sum;\n        }\n    }\n\
    \    if remainder < 0 {\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `6`', /tmp/tmp1i5mrpbz.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ (m, n) = (grid.len(), grid[0].len());\n    let max_height = (m..).find(|&i|\
    \ {\n        let mut filled = 0;\n        for j in 0..n {\n            filled\
    \ += grid[j][i];\n            if filled == capacity {\n                return\
    \ true;\n            }\n        }\n        false\n    }).unwrap_or(m);\n    (0..max_height).fold(0,\
    \ |acc, i| {\n        let mut filled = 0;\n        for j in 0..n {\n         \
    \   filled += grid[j][i];\n            if filled == capacity {\n             \
    \   filled = 0;\n            }\n        }\n        acc + filled\n    })\n}\n\n\
    fn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmphg4jsimx.rs:37:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut res = 0;\n    let mut max = 0;\n    for i in 0..grid.len() {\n        for\
    \ j in 0..grid[i].len() {\n            if grid[i][j] == 1 {\n                res\
    \ += capacity - 1;\n            } else {\n                res += max;\n      \
    \          max = 0;\n            }\n        }\n        max = 0;\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpsp33ed7f.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let mut rows_water = (0..grid.len()).map(|_|\
    \ 0).collect::<Vec<isize>>();\n    let mut steps = 0;\n    let mut min_water =\
    \ 0;\n    let max_height = grid.iter().map(|row| row.iter().sum::<isize>()).max().unwrap();\n\
    \    for _ in 0..max_height {\n        let mut min_height = std::isize::MAX;\n\
    \        for (index, row) in grid.iter().enumerate() {\n            let water\
    \ = row.iter().map(|well| std::cmp::min(*well, capacity)).sum::<isize>();\n  \
    \          if water > rows_water[index] {\n                rows_water[index] =\
    \ water;\n                if water < min_height {\n                    min_height\
    \ = water;\n                }\n            }\n        }\n        if min_height\
    \ > min_water {\n            min_water = min_height;\n            steps += 1;\n\
    \        }\n    }\n    steps\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmpx4ddcl37.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() == 0 {\n        return 0;\n    }\n    let mut rows = Vec::with_capacity(grid.len());\n\
    \    for row in grid {\n        let mut d_row = Vec::with_capacity(row.len());\n\
    \        let mut d_col = 0;\n        for col in row {\n            d_row.push(d_col);\n\
    \            d_col += col;\n        }\n        rows.push(d_row);\n    }\n    let\
    \ mut d_row = 0;\n    for i in 0..rows.len() {\n        let m = rows[i].iter().max().unwrap();\n\
    \        if *m > d_row {\n            d_row = *m;\n        }\n    }\n    for i\
    \ in 0..rows.len() {\n        for j in 0..rows[i].len() {\n            if rows[i][j]\
    \ < d_row {\n                rows[i][j] = d_row;\n            }\n        }\n \
    \   }\n    let mut count = 0;\n    for i in 0..rows.len() {\n        for j in\
    \ 0..rows[i].len() {\n            count += rows[i][j];\n        }\n    }\n   \
    \ count * capacity\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `6`', /tmp/tmpjgfzi2om.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ Your code here.\n    unimplemented!()\n}\n\nfn main() {\n    let candidate =\
    \ max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp8jjxwqtr.rs:24:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.len()\
    \ as isize * capacity * 2\n}\n\nfn main() {\n    let candidate = max_fill;\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1,\
    \ 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0,\
    \ 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `5`', /tmp/tmp406gxhck.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ Preprocessing\n    let mut grid = grid;\n    let size = grid.len();\n    for\
    \ j in 0..size {\n        let mut acc = 0;\n        for i in (0..size).rev() {\n\
    \            acc += grid[i][j];\n            grid[i][j] = acc;\n        }\n  \
    \  }\n    // Dynamic programming\n    let mut dp = vec![vec![0; size]; size];\n\
    \    dp[0][0] = grid[0][0];\n    for i in 1..size {\n        dp[i][0] = dp[i -\
    \ 1][0] + grid[i][0];\n    }\n    for j in 1..size {\n        for i in 0..size\
    \ {\n            dp[i][j] = std::cmp::max(dp[i][j - 1], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    }\n    // Total time complexity: O(N^2)\n    dp[size - 1][size\
    \ - 1] * capacity\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `6`', /tmp/tmpa1e5un0a.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let mut fill = 0;\n    let\
    \ mut well_map = vec![];\n    let mut well_cursor = 0;\n    let mut well_size\
    \ = grid[0].len();\n    let mut well_count = grid.len();\n    let mut overflow\
    \ = 0;\n    let mut working_size = well_size;\n    while working_size > 0 {\n\
    \        well_map.push(vec![0; working_size]);\n        working_size -= 1;\n \
    \   }\n    while well_count > 0 {\n        fill += capacity;\n        // add in\
    \ initial fill level\n        for x in 0..well_size {\n            well_map[x][well_cursor]\
    \ += capacity - overflow;\n        }\n        // see where we can fill\n     \
    \   for x in 0..well_size {\n            // if we fill from the bottom, move the\
    \ cursor down by one\n            if well_map[x][well_cursor] > 0 {\n        \
    \        well_cursor += 1;\n            }\n            // start filling from the\
    \ top\n            for y in (0..well_size).rev() {\n                if well_map[x][y]\
    \ > 0 {\n                    let water = well_map[x][y] - grid[well_count - 1][x];\n\
    \                    well_map[x][y] = if water > 0 {\n                       \
    \ grid[well_count - 1][x]\n                    } else {\n                    \
    \    water\n                    };\n                }\n            }\n       \
    \ }\n        // find overflow\n        overflow = 0;\n        for x in 0..well_size\
    \ {\n            overflow += well_map[x][well_cursor];\n        }\n        //\
    \ reset cursor\n        well_cursor = 0;\n        well_count -= 1;\n    }\n  \
    \  fill\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmpoympfeon.rs:51:20

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ max_row_water = grid.iter().map(|r| {\n        r.iter().sum::<isize>()\n   \
    \ }).max().unwrap();\n    let total_water = grid.iter().map(|r| {\n        r.iter().sum::<isize>()\n\
    \    }).sum::<isize>();\n    let min_number_of_cycles = total_water / capacity;\n\
    \    let max_number_of_cycles = max_row_water;\n    min_number_of_cycles + max_number_of_cycles\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `6`', /tmp/tmpeuptbphe.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ Rows and wells\n    let (rows, wells) = (grid.len(), grid[0].len());\n    //\
    \ We can fill `capacity` buckets in one step\n    let mut current = grid;\n  \
    \  // Calculate the number of buckets in each well\n    let mut remaining = grid;\n\
    \    // The number of steps needed\n    let mut steps = 0;\n    // Fill each well\n\
    \    for row in &current {\n        for &column in row {\n            steps +=\
    \ column;\n        }\n    }\n    // Continue until we are done\n    while remaining.iter().flatten().max().unwrap()\
    \ != &0 {\n        // Take out a bucket\n        current = remaining.iter().map(|row|\
    \ {\n            // Fill the previous `capacity` buckets with water\n        \
    \    let mut remaining = capacity;\n            row.iter().map(|&item| {\n   \
    \             // The current bucket\n                let bucket = if remaining\
    \ < item { remaining } else { item };\n                // The remaining buckets\n\
    \                remaining -= bucket;\n                // Return the bucket\n\
    \                bucket\n            }).collect()\n        }).collect();\n   \
    \     // Remove the filled bucket from the wells\n        remaining = remaining.iter().zip(current.iter()).map(|(row1,\
    \ row2)| {\n            row1.iter().zip(row2.iter()).map(|(bucket1, bucket2)|\
    \ {\n                bucket1 - bucket2\n            }).collect()\n        }).collect();\n\
    \        // Increase the number of steps\n        steps += 1;\n    }\n    // Return\
    \ the number of steps needed\n    steps\n}\n\nfn main() {\n    let candidate =\
    \ max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `rows`\n  --> /tmp/tmp2iz9mx29.rs:24:10\n   |\n\
    24 |     let (rows, wells) = (grid.len(), grid[0].len());\n   |          ^^^^\
    \ help: if this is intentional, prefix it with an underscore: `_rows`\n   |\n\
    \   = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable:\
    \ `wells`\n  --> /tmp/tmp2iz9mx29.rs:24:16\n   |\n24 |     let (rows, wells) =\
    \ (grid.len(), grid[0].len());\n   |                ^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_wells`\n\nerror[E0382]: use of moved value:\
    \ `grid`\n  --> /tmp/tmp2iz9mx29.rs:28:25\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- move occurs because `grid`\
    \ has type `Vec<Vec<isize>>`, which does not implement the `Copy` trait\n...\n\
    26 |     let mut current = grid;\n   |                       ---- value moved\
    \ here\n27 |     // Calculate the number of buckets in each well\n28 |     let\
    \ mut remaining = grid;\n   |                         ^^^^ value used here after\
    \ move\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ row_count = grid.len();\n    let mut column_count = 0;\n    let mut fill_level\
    \ = 0;\n    let mut count = 0;\n    if !grid.is_empty() {\n        column_count\
    \ = grid[0].len();\n    }\n    while fill_level != capacity {\n        let mut\
    \ buckets_can_be_filled = false;\n        let mut fill_vector = vec![0; column_count];\n\
    \        for i in 0..row_count {\n            for j in 0..column_count {\n   \
    \             if grid[i][j] == 1 {\n                    fill_vector[j] += 1;\n\
    \                    buckets_can_be_filled = true;\n                }\n      \
    \      }\n        }\n        for i in 0..fill_vector.len() {\n            if fill_vector[i]\
    \ > 0 {\n                fill_vector[i] -= 1;\n            }\n        }\n    \
    \    if buckets_can_be_filled {\n            count += 1;\n            fill_level\
    \ += 1;\n        }\n        for i in 0..row_count {\n            for j in 0..column_count\
    \ {\n                if fill_vector[j] > 0 {\n                    grid[i][j] =\
    \ 1;\n                    fill_vector[j] -= 1;\n                } else {\n   \
    \                 grid[i][j] = 0;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `grid` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmptwl3toqb.rs:53:21\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n53 |                     grid[i][j] = 1;\n \
    \  |                     ^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot\
    \ borrow `grid` as mutable, as it is not declared as mutable\n  --> /tmp/tmptwl3toqb.rs:56:21\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |             ---- help: consider changing this to be mutable: `mut grid`\n\
    ...\n56 |                     grid[i][j] = 0;\n   |                     ^^^^ cannot\
    \ borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let row_size = grid.len();\n    let col_size = grid[0].len();\n\
    \    let mut water_grid = vec![vec![false; col_size]; row_size];\n    let mut\
    \ full_rows = Vec::new();\n    let mut grid_iter = grid.iter();\n    while let\
    \ Some(row) = grid_iter.next() {\n        let mut bucket = capacity;\n       \
    \ let mut row_iter = row.iter();\n        while let Some(value) = row_iter.next()\
    \ {\n            if *value == 1 {\n                bucket -= 1;\n            }\
    \ else if bucket == capacity {\n                continue;\n            } else\
    \ {\n                counter += 1;\n                bucket = capacity;\n     \
    \       }\n        }\n        if bucket != capacity {\n            full_rows.push(row);\n\
    \        }\n    }\n    // check from bottom to top (last to first), if bucket\
    \ is full pour it into the next row\n    let mut full_rows_iter = full_rows.iter().rev();\n\
    \    while let Some(row) = full_rows_iter.next() {\n        let mut bucket = capacity;\n\
    \        let mut row_iter = row.iter();\n        while let Some(value) = row_iter.next()\
    \ {\n            if *value == 1 {\n                if bucket == capacity {\n \
    \                   counter += 1;\n                    bucket = capacity;\n  \
    \              } else {\n                    bucket -= 1;\n                }\n\
    \            } else if bucket == capacity {\n                continue;\n     \
    \       } else {\n                counter += 1;\n                bucket = capacity;\n\
    \            }\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmps1gc6bdh.rs:73:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ n = grid.len();\n    let m = grid[0].len();\n    let mut water_left = vec![0;\
    \ n];\n    let mut total_water = 0;\n    for i in 0..n {\n        for j in 0..m\
    \ {\n            if grid[i][j] == 1 {\n                water_left[i] += 1;\n \
    \               total_water += 1;\n            }\n        }\n    }\n    let mut\
    \ res = 0;\n    let mut tmp_res = 0;\n    let mut last_bucket = -1;\n    let mut\
    \ last_i = -1;\n    for j in 0..m {\n        for i in 0..n {\n            if water_left[i]\
    \ > 0 {\n                if last_bucket < capacity {\n                    last_bucket\
    \ += 1;\n                    water_left[i] -= 1;\n                    total_water\
    \ -= 1;\n                    if total_water == 0 {\n                        return\
    \ res + tmp_res;\n                    }\n                } else {\n          \
    \          break;\n                }\n            }\n            if i == n - 1\
    \ {\n                tmp_res += 1;\n                last_bucket = -1;\n      \
    \          last_i = -1;\n            }\n        }\n        if j == m - 1 {\n \
    \           res += tmp_res;\n            tmp_res = 0;\n        }\n    }\n    return\
    \ res;\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpqul43z8x.rs:69:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let mut wells = Vec::new();\n\
    \    for row in grid {\n        let mut w = Vec::new();\n        for column in\
    \ row {\n            w.push(1 - column);\n        }\n        wells.push(w);\n\
    \    }\n    let mut rounds = 0;\n    while !wells.iter().all(|well| well.iter().all(|&x|\
    \ x == 0)) {\n        rounds += 1;\n        let mut well_num = wells.len();\n\
    \        let mut bucket = capacity;\n        while well_num > 0 {\n          \
    \  well_num -= 1;\n            let mut column_num = wells[well_num].len();\n \
    \           while column_num > 0 {\n                column_num -= 1;\n       \
    \         if wells[well_num][column_num] > 0 {\n                    if bucket\
    \ < wells[well_num][column_num] {\n                        wells[well_num][column_num]\
    \ -= bucket;\n                        bucket = 0;\n                    } else\
    \ {\n                        bucket -= wells[well_num][column_num];\n        \
    \                wells[well_num][column_num] = 0;\n                    }\n   \
    \             }\n            }\n        }\n    }\n    rounds\n}\n\nfn main() {\n\
    \    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpgh3k8kyq.rs:62:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ width = grid[0].len();\n    let height = grid.len();\n    let mut row_fill =\
    \ vec![0; width];\n    let mut rows_filled = 0;\n    let mut row_min = vec![];\n\
    \    let mut result = 0;\n    for i in 0..height {\n        for j in 0..width\
    \ {\n            if grid[i][j] == 1 {\n                row_fill[j] += 1;\n   \
    \             rows_filled += 1;\n            }\n        }\n        let min = row_fill.iter().min().unwrap();\n\
    \        if *min == capacity {\n            row_min.push(min);\n            row_fill\
    \ = vec![0; width];\n            rows_filled = 0;\n        }\n    }\n    if rows_filled\
    \ > 0 {\n        result += rows_filled;\n    }\n    if row_min.len() > 0 {\n \
    \       let lowest = row_min.iter().min().unwrap();\n        result += lowest\
    \ * row_min.len() as isize;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot multiply `&&isize` by `isize`\n  --> /tmp/tmpxrtx5rrk.rs:48:26\n\
    \   |\n48 |         result += lowest * row_min.len() as isize;\n   |         \
    \          ------ ^ ---------------------- isize\n   |                   |\n \
    \  |                   &&isize\n   |\nhelp: `*` can be used on `isize`, you can\
    \ dereference `lowest`\n   |\n48 |         result += *lowest * row_min.len() as\
    \ isize;\n   |                   +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut out = 0;\n    for column in grid[0].iter() {\n        out += capacity -\
    \ column;\n    }\n    for row in grid.iter() {\n        for well in row.iter()\
    \ {\n            if *well == 0 {\n                out += capacity;\n         \
    \   }\n        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpvy4mzb7l.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().fold(0,\
    \ |acc, x| acc + x.iter().fold(0, |acc, y| acc + y)) / capacity\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpy8sitm8_.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ height = grid.len();\n    let width = grid[0].len();\n    let mut max = 0;\n\
    \    let mut fill = 0;\n    for i in 0..height {\n        fill = 0;\n        for\
    \ j in 0..width {\n            if grid[i][j] == 1 {\n                fill += 1;\n\
    \            }\n        }\n        max = std::cmp::max(max, fill);\n    }\n  \
    \  let mut fill = 0;\n    for j in 0..width {\n        fill = 0;\n        for\
    \ i in 0..height {\n            if grid[i][j] == 1 {\n                fill +=\
    \ 1;\n            }\n        }\n        max = std::cmp::max(max, fill);\n    }\n\
    \    max * capacity\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `6`', /tmp/tmp9bvw3mac.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ rows = grid.len();\n    let cols = grid[0].len();\n    let mut grid = grid;\n\
    \    let mut count = 0;\n    for i in 0..rows {\n        for j in 0..cols {\n\
    \            if grid[i][j] == 1 {\n                count += 1;\n             \
    \   drop_water(&mut grid, capacity, i, j);\n            }\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `drop_water` in this scope\n  --> /tmp/tmp4vsfx9r7.rs:31:17\n\
    \   |\n31 |                 drop_water(&mut grid, capacity, i, j);\n   |     \
    \            ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut max_fill_count = 0;\n    let mut current_fill_count = 0;\n    let mut current_fill\
    \ = 0;\n    let mut column_index = 0;\n    while column_index < grid[0].len()\
    \ {\n        for row in &grid {\n            current_fill += row[column_index];\n\
    \            if current_fill >= capacity {\n                current_fill = 0;\n\
    \                current_fill_count += 1;\n            }\n        }\n        max_fill_count\
    \ = isize::max(max_fill_count, current_fill_count);\n        current_fill_count\
    \ = 0;\n        current_fill = 0;\n        column_index += 1;\n    }\n    max_fill_count\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmp0vap9zhs.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ n = grid.len();\n    let m = grid[0].len();\n    let mut grid = grid;\n    let\
    \ mut used = 0;\n    let mut last_max_well = 0;\n    while {\n        let mut\
    \ max_well = 0;\n        for i in 0..n {\n            for j in 0..m {\n      \
    \          if grid[i][j] == 1 {\n                    max_well = cmp::max(max_well,\
    \ i);\n                }\n            }\n        }\n        if max_well == last_max_well\
    \ {\n            break;\n        }\n        last_max_well = max_well;\n      \
    \  for i in 0..n {\n            for j in 0..m {\n                if grid[i][j]\
    \ == 1 {\n                    grid[i][j] = 0;\n                    used += 1;\n\
    \                }\n            }\n        }\n        if max_well > 0 {\n    \
    \        for j in 0..m {\n                grid[max_well - 1][j] = 1;\n       \
    \     }\n        }\n        used += 1;\n        true\n    } {}\n    used\n}\n\n\
    fn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpnnvwokqm.rs:33:32\n   |\n33 |                     max_well = cmp::max(max_well,\
    \ i);\n   |                                ^^^ use of undeclared crate or module\
    \ `cmp`\n\nerror[E0590]: `break` or `continue` with no label in the condition\
    \ of a `while` loop\n  --> /tmp/tmpnnvwokqm.rs:38:13\n   |\n38 |             break;\n\
    \   |             ^^^^^ unlabeled `break` in the condition of a `while` loop\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0590.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut l = 0;\n    let mut r = 0;\n    let mut ret = 0;\n    let mut fill_level\
    \ = 0;\n    let mut row_index = 0;\n    let mut col_index = 0;\n    let mut rows\
    \ = grid.len();\n    let mut cols = grid[0].len();\n    while row_index < rows\
    \ {\n        while col_index < cols {\n            while l < rows && grid[l][col_index]\
    \ == 0 {\n                l += 1;\n            }\n            r = l;\n       \
    \     while r < rows && grid[r][col_index] == 1 {\n                r += 1;\n \
    \           }\n            col_index += 1;\n            ret += r - l;\n      \
    \      fill_level += r - l;\n            fill_level -= capacity;\n           \
    \ if fill_level < 0 {\n                fill_level = 0;\n            }\n      \
    \  }\n        col_index = 0;\n        row_index += 1;\n    }\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfvhstj3g.rs:43:27\n   |\n\
    43 |             fill_level -= capacity;\n   |                           ^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract-assign `isize`\
    \ from `usize`\n  --> /tmp/tmpfvhstj3g.rs:43:24\n   |\n43 |             fill_level\
    \ -= capacity;\n   |                        ^^ no implementation for `usize -=\
    \ isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented for\
    \ `usize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfvhstj3g.rs:51:5\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                                        ----- expected `isize`\
    \ because of return type\n...\n51 |     ret\n   |     ^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n51 |     ret.try_into().unwrap()\n   |  \
    \      ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().map(|row|\
    \ row.iter().fold(0, |acc, &x| acc + x)).sum()\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpwtjbgp8u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut rows: Vec<Row> = grid.iter().map(|row| Row::new(row)).collect();\n\
    \    let mut max_row = &mut rows[0];\n    loop {\n        max_row.fill(capacity);\n\
    \        count += 1;\n        if !rows.iter().any(|row| row.water > 0) {\n   \
    \         break;\n        }\n        max_row = rows.iter_mut().max_by_key(|row|\
    \ row.water).unwrap();\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Row`\n  --> /tmp/tmpy00ai7e1.rs:24:52\n\
    \   |\n24 |     let mut rows: Vec<Row> = grid.iter().map(|row| Row::new(row)).collect();\n\
    \   |                                                    ^^^ use of undeclared\
    \ type `Row`\n\nerror[E0412]: cannot find type `Row` in this scope\n  --> /tmp/tmpy00ai7e1.rs:24:23\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |            - help: you might be missing a type parameter: `<Row>`\n23 | \
    \    let mut count = 0;\n24 |     let mut rows: Vec<Row> = grid.iter().map(|row|\
    \ Row::new(row)).collect();\n   |                       ^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let mut result = 0;\n    for\
    \ i in 0..grid.len() {\n        let mut curr_level = 0;\n        for j in 0..grid[i].len()\
    \ {\n            if grid[i][j] == 1 {\n                curr_level += 1;\n    \
    \        } else {\n                result += (capacity - curr_level).max(0);\n\
    \                curr_level = 0;\n            }\n        }\n        result +=\
    \ (capacity - curr_level).max(0);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `5`', /tmp/tmpwjh1jmsm.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut counts = 0;\n    let mut done = vec![vec![false; grid[0].len()]; grid.len()];\n\
    \    loop {\n        let mut non_empty = false;\n        let mut i = 0;\n    \
    \    while i < grid.len() {\n            let mut j = 0;\n            while j <\
    \ grid[i].len() {\n                if grid[i][j] > 0 && !done[i][j] {\n      \
    \              non_empty = true;\n                    done[i][j] = true;\n   \
    \                 let mut count = grid[i][j];\n                    // find max\n\
    \                    let mut max = 0;\n                    let mut max_count =\
    \ 0;\n                    let mut max_i = i;\n                    let mut max_j\
    \ = j;\n                    while i < grid.len() && count > 0 {\n            \
    \            while j < grid[i].len() && count > 0 {\n                        \
    \    if grid[i][j] > max {\n                                max = grid[i][j];\n\
    \                                max_count = count;\n                        \
    \        max_i = i;\n                                max_j = j;\n            \
    \                }\n                            count -= 1;\n                \
    \            j += 1;\n                        }\n                        i +=\
    \ 1;\n                        j = 0;\n                    }\n                \
    \    // drain max\n                    if max_count > capacity {\n           \
    \             max_count = capacity;\n                    }\n                 \
    \   i = max_i;\n                    j = max_j;\n                    while i <\
    \ grid.len() && max_count > 0 {\n                        while j < grid[i].len()\
    \ && max_count > 0 {\n                            if grid[i][j] > 0 {\n      \
    \                          grid[i][j] -= 1;\n                                max_count\
    \ -= 1;\n                            }\n                            j += 1;\n\
    \                        }\n                        i += 1;\n                \
    \        j = 0;\n                    }\n                    counts += 1;\n   \
    \             }\n                j += 1;\n            }\n            i += 1;\n\
    \        }\n        if !non_empty {\n            break;\n        }\n    }\n  \
    \  counts\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `grid` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpzs1uott1.rs:63:33\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n63 |                                 grid[i][j]\
    \ -= 1;\n   |                                 ^^^^ cannot borrow as mutable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ rows = grid.len();\n    let cols = grid[0].len();\n    let mut grid = grid;\n\
    \    let mut time = 0;\n    let mut k = 0;\n    while k < rows {\n        for\
    \ i in 0..rows {\n            for j in 0..cols {\n                if grid[i][j]\
    \ == 1 {\n                    // Try to fill the bottom most well.\n         \
    \           if k < rows - 1 && grid[k + 1][j] == 0 {\n                       \
    \ grid[k + 1][j] = 1;\n                        grid[i][j] = 0;\n             \
    \           time += 1;\n                    }\n                }\n           \
    \ }\n        }\n        k += 1;\n    }\n    time\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `6`', /tmp/tmpql77gh38.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut heights = grid.iter().map(|x| x.iter().sum::<isize>()).collect::<Vec<isize>>();\n\
    \    let mut water = grid.iter().map(|x| x.iter().sum::<isize>()).collect::<Vec<isize>>();\n\
    \    let max_height = *heights.iter().max().unwrap();\n    while *water.iter().max().unwrap()\
    \ > 0 {\n        let mut index = 0;\n        for (i, h) in heights.iter().enumerate()\
    \ {\n            if *h == max_height {\n                index = i;\n         \
    \       break;\n            }\n        }\n        for w in water.iter_mut() {\n\
    \            if *w > 0 {\n                if *w >= capacity {\n              \
    \      *w -= capacity;\n                } else {\n                    *w = 0;\n\
    \                }\n            }\n        }\n        counter += 1;\n        heights[index]\
    \ -= 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `6`', /tmp/tmpu3nhv963.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let mut total_drops = 0;\n\
    \    let mut max_levels = vec![];\n    for r in grid {\n        max_levels.push(r.iter().max().unwrap().clone());\n\
    \    }\n    let max_well_level = max_levels.iter().max().unwrap().clone();\n \
    \   for level in 0..max_well_level {\n        for c in 0..grid[0].len() {\n  \
    \          for r in 0..grid.len() {\n                if grid[r][c] > level {\n\
    \                    total_drops += 1;\n                    grid[r][c] -= capacity;\n\
    \                }\n            }\n        }\n    }\n    return total_drops;\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `grid`\n   --> /tmp/tmpgy01y54i.rs:33:21\n\
    \    |\n22  | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n\
    \    |             ---- move occurs because `grid` has type `Vec<Vec<isize>>`,\
    \ which does not implement the `Copy` trait\n...\n28  |     for r in grid {\n\
    \    |              ---- `grid` moved due to this implicit call to `.into_iter()`\n\
    ...\n33  |         for c in 0..grid[0].len() {\n    |                     ^^^^\
    \ value borrowed here after move\n    |\nnote: this function takes ownership of\
    \ the receiver `self`, which moves `grid`\nhelp: consider iterating over a slice\
    \ of the `Vec<Vec<isize>>`'s content to avoid moving into the `for` loop\n   \
    \ |\n28  |     for r in &grid {\n    |              +\n\nerror[E0596]: cannot\
    \ borrow `grid` as mutable, as it is not declared as mutable\n  --> /tmp/tmpgy01y54i.rs:37:21\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |             ---- help: consider changing this to be mutable: `mut grid`\n\
    ...\n37 |                     grid[r][c] -= capacity;\n   |                  \
    \   ^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0382, E0596.\nFor more information\
    \ about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for row in grid {\n        let mut count = 0;\n        for\
    \ i in 0..row.len() {\n            if row[i] == 1 {\n                count +=\
    \ 1;\n            } else if count > 0 {\n                sum += 1;\n         \
    \       count = 0;\n            }\n        }\n        if count > 0 {\n       \
    \     sum += 1;\n        }\n    }\n    sum * capacity\n}\n\nfn main() {\n    let\
    \ candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpq9qh_5gh.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let m = grid.len();\n    let\
    \ n = grid[0].len();\n    let mut previous = vec![0; n];\n    let mut current\
    \ = vec![0; n];\n    let mut count = 0;\n    for row in grid {\n        for (i,\
    \ val) in row.iter().enumerate() {\n            let mut low = std::cmp::max(val,\
    \ &previous[i]);\n            if i > 0 {\n                low = std::cmp::max(&low,\
    \ &current[i - 1]);\n            }\n            if i < (n - 1) {\n           \
    \     low = std::cmp::max(&low, &current[i + 1]);\n            }\n           \
    \ count += low - current[i];\n            current[i] = low;\n        }\n     \
    \   for i in 0..n {\n            count += capacity - current[i];\n           \
    \ current[i] = capacity;\n        }\n        current.swap_with_slice(&mut previous);\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8i_bd2e4.rs:41:26\n   |\n\
    41 |             current[i] = low;\n   |             ----------   ^^^ expected\
    \ `isize`, found `&isize`\n   |             |\n   |             expected due to\
    \ the type of this binding\n   |\nhelp: consider dereferencing the borrow\n  \
    \ |\n41 |             current[i] = *low;\n   |                          +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: -1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut well_buckets = vec![vec![]; grid.len()];\n    for (i, well) in grid.iter().enumerate()\
    \ {\n        for j in 0..well.len() {\n            if well[j] == 1 {\n       \
    \         well_buckets[i].push(capacity);\n            } else {\n            \
    \    well_buckets[i].push(0);\n            }\n        }\n    }\n    // println!(\"\
    well_buckets: {:?}\", well_buckets);\n    while well_buckets.iter().any(|x| x.iter().any(|&y|\
    \ y > 0)) {\n        let mut new_well_buckets = vec![vec![]; grid.len()];\n  \
    \      for (i, well) in well_buckets.iter().enumerate() {\n            for j in\
    \ 0..well.len() {\n                if i != 0 && well[j] == 0 && well_buckets[i\
    \ - 1][j] > 0 {\n                    new_well_buckets[i].push(well_buckets[i -\
    \ 1][j] - 1);\n                } else {\n                    new_well_buckets[i].push(well[j]);\n\
    \                }\n            }\n        }\n        // println!(\"new_well_buckets:\
    \ {:?}\", new_well_buckets);\n        well_buckets = new_well_buckets;\n    }\n\
    \    well_buckets.iter().map(|x| x.iter().sum::<isize>()).sum()\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977579
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut empty_count = 0;\n    let n = grid.len();\n    let m = grid[0].len();\n\
    \    for i in 0..n {\n        for j in 0..m {\n            if grid[i][j] == 0\
    \ {\n                empty_count += 1;\n            }\n        }\n    }\n    let\
    \ mut row_min = std::isize::MAX;\n    for i in 0..n {\n        let mut row_sum\
    \ = 0;\n        for j in 0..m {\n            row_sum += grid[i][j];\n        }\n\
    \        row_min = cmp::min(row_min, row_sum);\n    }\n    let mut col_min = std::isize::MAX;\n\
    \    for j in 0..m {\n        let mut col_sum = 0;\n        for i in 0..n {\n\
    \            col_sum += grid[i][j];\n        }\n        col_min = cmp::min(col_min,\
    \ col_sum);\n    }\n    empty_count - row_min - col_min + (cmp::min(row_min, col_min)\
    \ * 2)\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \  --> /tmp/tmpqbxzcgrn.rs:39:19\n   |\n39 |         row_min = cmp::min(row_min,\
    \ row_sum);\n   |                   ^^^ use of undeclared crate or module `cmp`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n \
    \ --> /tmp/tmpqbxzcgrn.rs:47:19\n   |\n47 |         col_min = cmp::min(col_min,\
    \ col_sum);\n   |                   ^^^ use of undeclared crate or module `cmp`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n \
    \ --> /tmp/tmpqbxzcgrn.rs:49:40\n   |\n49 |     empty_count - row_min - col_min\
    \ + (cmp::min(row_min, col_min) * 2)\n   |                                   \
    \     ^^^ use of undeclared crate or module `cmp`\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut sum = 0;\n    let mut cap = capacity;\n    for row in grid {\n        for\
    \ c in row {\n            sum += c;\n            if sum >= cap {\n           \
    \     sum = 0;\n                cap = capacity;\n            } else {\n      \
    \          cap -= 1;\n            }\n        }\n    }\n    // We need to account\
    \ for when we have less than the capacity in the bucket at the end\n    // In\
    \ the example above, we need to add 1 because we are left with the value 1 in\
    \ the bucket\n    sum + capacity - cap\n}\n\nfn main() {\n    let candidate =\
    \ max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpdp9zws36.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ len = grid.len();\n    let mut water = 0;\n    for row in 0..len {\n       \
    \ let mut fill = capacity;\n        for col in 0..grid[row].len() {\n        \
    \    if grid[row][col] == 1 {\n                if fill > 0 {\n               \
    \     fill -= 1;\n                } else {\n                    water += 1;\n\
    \                    fill = capacity - 1;\n                }\n            }\n\
    \        }\n    }\n    water\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpxlm9skek.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut height: isize = 0;\n    let mut total: isize = 0;\n    for row in grid {\n\
    \        let width = row.len() as isize;\n        let mut max_height = 0;\n  \
    \      for item in row {\n            max_height = max(max_height, item);\n  \
    \      }\n        let mut tmp = width * max_height;\n        tmp -= (width * height);\n\
    \        if tmp < capacity {\n            total += tmp;\n            height =\
    \ max_height;\n        } else {\n            total += capacity;\n            height\
    \ += capacity / width;\n            if (capacity % width) != 0 {\n           \
    \     height += 1;\n            }\n        }\n    }\n    total\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzf3g_qnb.rs:29:26\n\
    \   |\n29 |             max_height = max(max_height, item);\n   |            \
    \              ^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ function\n   |\n1  | use std::cmp::max;\n   |\n\nwarning: unnecessary parentheses\
    \ around assigned value\n  --> /tmp/tmpzf3g_qnb.rs:32:16\n   |\n32 |         tmp\
    \ -= (width * height);\n   |                ^              ^\n   |\n   = note:\
    \ `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n\
    32 -         tmp -= (width * height);\n32 +         tmp -= width * height;\n \
    \  | \n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().fold(0,\
    \ |acc, row| acc + (row.iter().sum::<isize>() / capacity) as isize)\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmppjaxsvvq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: -1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut rows: Vec<Vec<isize>> = grid.iter().map(|row| {\n        row.iter().map(|&water|\
    \ water * capacity).collect()\n    }).collect();\n    let mut fill = 0;\n    while\
    \ rows.iter().flatten().any(|&water| water > 0) {\n        // if you can fill\
    \ a row to capacity\n        // don't do so\n        rows = rows.iter().map(|row|\
    \ {\n            if row.iter().fold(0, |acc, &water| acc + water) == capacity\
    \ {\n                return row.clone();\n            }\n            row.iter().enumerate().map(|(idx,\
    \ &water)| {\n                if idx == 0 {\n                    return if capacity\
    \ > water {\n                        capacity - water\n                    } else\
    \ {\n                        water\n                    };\n                }\n\
    \                if water >= capacity {\n                    capacity\n      \
    \          } else {\n                    water\n                }\n          \
    \  }).collect()\n        }).collect();\n        fill += 1;\n    }\n    fill\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977579
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut wells = (0..grid.len()).map(|i| (0..grid[i].len()).map(|j| grid[i][j]).collect::<Vec<isize>>()).collect::<Vec<Vec<isize>>>();\n\
    \    let row_count = wells.len();\n    let col_count = wells[0].len();\n    let\
    \ mut max_fill = 0;\n    for i in 0..row_count {\n        for j in 0..col_count\
    \ {\n            max_fill += wells[i][j];\n        }\n    }\n    let mut bucket_count\
    \ = 0;\n    bucket_count += max_fill / capacity;\n    max_fill = max_fill % capacity;\n\
    \    if max_fill > 0 {\n        bucket_count += 1;\n    }\n    bucket_count\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpossgz8_s.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ (rows, cols) = (grid.len(), grid[0].len());\n    let mut total = 0;\n    for\
    \ c in 0..cols {\n        for r in 0..rows {\n            if grid[r][c] == 1 {\n\
    \                let start = r;\n                let end = rows.min(r + capacity\
    \ as usize);\n                total += end - start;\n            }\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0r8efoet.rs:34:5\n   |\n\
    22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n   |    \
    \                                                    ----- expected `isize` because\
    \ of return type\n...\n34 |     total\n   |     ^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n34 |     total.try_into().unwrap()\n   |\
    \          ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut grid = grid;\n    let rows = grid.len();\n    let cols = grid[0].len();\n\
    \    let mut buckets = vec![0; rows];\n    let mut count = 0;\n    while buckets.iter().any(|&x|\
    \ x != capacity) {\n        let mut empty_row = 0;\n        let mut filled_row\
    \ = rows - 1;\n        while empty_row < filled_row {\n            let empty_wells\
    \ = cols - buckets[empty_row] - grid[empty_row].iter().sum::<isize>();\n     \
    \       let filled_wells = cols - buckets[filled_row] - grid[filled_row].iter().sum::<isize>();\n\
    \            if buckets[empty_row] < capacity {\n                buckets[empty_row]\
    \ += std::cmp::min(filled_wells, capacity - buckets[empty_row]);\n           \
    \     buckets[filled_row] -= std::cmp::min(filled_wells, capacity - buckets[empty_row]);\n\
    \                count += 1;\n            }\n            if buckets[filled_row]\
    \ < capacity {\n                buckets[filled_row] += std::cmp::min(empty_wells,\
    \ capacity - buckets[filled_row]);\n                buckets[empty_row] -= std::cmp::min(empty_wells,\
    \ capacity - buckets[filled_row]);\n                count += 1;\n            }\n\
    \            if buckets[empty_row] == capacity {\n                empty_row +=\
    \ 1;\n            }\n            if buckets[filled_row] == capacity {\n      \
    \          filled_row -= 1;\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3l4cqyzk.rs:32:38\n   |\n\
    32 |             let empty_wells = cols - buckets[empty_row] - grid[empty_row].iter().sum::<isize>();\n\
    \   |                                      ^^^^^^^^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp3l4cqyzk.rs:32:36\n\
    \   |\n32 |             let empty_wells = cols - buckets[empty_row] - grid[empty_row].iter().sum::<isize>();\n\
    \   |                                    ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n   =\
    \ help: the following other types implement trait `Sub<Rhs>`:\n             <&'a\
    \ f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128\
    \ as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32 as\
    \ Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3l4cqyzk.rs:32:59\n   |\n32 |             let\
    \ empty_wells = cols - buckets[empty_row] - grid[empty_row].iter().sum::<isize>();\n\
    \   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from\
    \ `usize`\n  --> /tmp/tmp3l4cqyzk.rs:32:57\n   |\n32 |             let empty_wells\
    \ = cols - buckets[empty_row] - grid[empty_row].iter().sum::<isize>();\n   | \
    \                                                        ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched type"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut num_fills = 0;\n    let mut remaining_capacity = capacity;\n    for row\
    \ in grid {\n        remaining_capacity = row.iter().fold(remaining_capacity,\
    \ |r, &x| {\n            if x == 1 {\n                if r == 0 {\n          \
    \          num_fills += 1;\n                    capacity\n                } else\
    \ {\n                    r - 1\n                }\n            } else {\n    \
    \            r\n            }\n        });\n    }\n    num_fills\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp1gtylfcn.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut water = 0;\n    for row in grid {\n        for &well in row.iter() {\n \
    \           if well == 1 {\n                water += capacity - 1;\n         \
    \   }\n        }\n    }\n    water\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpqr88qdwx.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let rows = grid.len();\n  \
    \  let cols = grid[0].len();\n    let mut grid = grid;\n    let mut drop_count\
    \ = 0;\n    let mut row_starts = vec![0; rows];\n    for row in 0..rows {\n  \
    \      for col in 0..cols {\n            if grid[row][col] == 1 {\n          \
    \      let row_start = row_starts[row];\n                let mut col_lim = col;\n\
    \                for r in row_start..=row {\n                    if r == row_start\
    \ && grid[r][col] == 0 {\n                        continue;\n                \
    \    }\n                    let start = if r == row_start { col } else { 0 };\n\
    \                    for c in start..col_lim {\n                        grid[r][c]\
    \ = 0;\n                    }\n                    if col_lim < cols {\n     \
    \                   col_lim += 1;\n                    }\n                }\n\
    \                drop_count += 1;\n                row_starts[row] = row_start\
    \ + 1;\n            }\n        }\n    }\n    drop_count\n}\n\nfn main() {\n  \
    \  let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `5`', /tmp/tmpdo6scmo0.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ TODO\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpji1uuf_0.rs:24:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ get the heigth of the grid\n    let h = grid.len();\n    // get the width of\
    \ the grid\n    let w = grid[0].len();\n    // create a mutable counter \n   \
    \ let mut counter = 0;\n    // check all rows in the grid\n    for row in 0..h\
    \ {\n        // check all colums in the grid\n        for col in 0..w {\n    \
    \        // if the cell contains water\n            if grid[row][col] == 1 {\n\
    \                // and the cell above does not\n                if row == 0 ||\
    \ grid[row - 1][col] == 0 {\n                    // empty the cell\n         \
    \           counter += 1;\n                }\n            }\n        }\n    }\n\
    \    // return number of buckets that were emptied\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `6`', /tmp/tmp9kcjw82n.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for row in grid {\n        for column in row {\n         \
    \   if column == 1 {\n                sum += capacity;\n            }\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `5`', /tmp/tmpkitc3xhv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 0
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut result = 0;\n    for row in grid {\n        let mut container = capacity;\n\
    \        for item in row {\n            container -= item;\n            if container\
    \ == 0 {\n                result += 1;\n                container = capacity;\n\
    \            }\n        }\n        if container < capacity {\n            result\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut rows: Vec<Vec<isize>> = grid.iter().map(|row| row.clone()).collect();\n\
    \    let mut count = 0;\n    let mut bucket = capacity;\n    for row in rows.iter_mut()\
    \ {\n        for well in row.iter_mut() {\n            if *well == 1 {\n     \
    \           *well = 0;\n                bucket -= 1;\n                count +=\
    \ 1;\n            }\n            if bucket == 0 {\n                bucket = capacity;\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpsi50n7rf.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    for j in 0..grid[0].len() {\n        for i in 0..grid.len()\
    \ {\n            if grid[i][j] == 1 {\n                let mut row = i;\n    \
    \            while row < grid.len() && grid[row][j] == 1 {\n                 \
    \   grid[row][j] = 0;\n                    row += 1;\n                }\n    \
    \            count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `capacity`\n  --> /tmp/tmph_dwruvh.rs:22:36\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                    ^^^^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_capacity`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `grid` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmph_dwruvh.rs:29:21\n   |\n22 | fn max_fill(grid:\
    \ Vec<Vec<isize>>, capacity: isize) -> isize {\n   |             ---- help: consider\
    \ changing this to be mutable: `mut grid`\n...\n29 |                     grid[row][j]\
    \ = 0;\n   |                     ^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut current_row: usize = 0;\n    let mut current_well:\
    \ usize = 0;\n    let max_row = grid.len();\n    let max_well = grid[0].len();\n\
    \    let mut water_storage: isize = 0;\n    let water_level: isize = grid.iter().map(|row|\
    \ row.iter().sum::<isize>()).sum();\n    let mut water_get: isize = 0;\n    let\
    \ wells: Vec<isize> = grid.iter().map(|row| row.iter().sum::<isize>()).collect();\n\
    \    while water_get < water_level {\n        current_well = 0;\n        while\
    \ current_well < max_well {\n            if grid[current_row][current_well] >\
    \ 0 {\n                water_storage += 1;\n                grid[current_row][current_well]\
    \ -= 1;\n                water_get += 1;\n            }\n            if water_storage\
    \ == capacity {\n                water_storage = 0;\n                count +=\
    \ 1;\n            }\n            current_well += 1;\n        }\n        current_row\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1,\
    \ 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0,\
    \ 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `current_well` is never read\n  --> /tmp/tmpahkutntz.rs:25:13\n\
    \   |\n25 |     let mut current_well: usize = 0;\n   |             ^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe\
    \ it is overwritten before being read?\n\nwarning: unused variable: `max_row`\n\
    \  --> /tmp/tmpahkutntz.rs:26:9\n   |\n26 |     let max_row = grid.len();\n  \
    \ |         ^^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_max_row`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\nwarning:\
    \ unused variable: `wells`\n  --> /tmp/tmpahkutntz.rs:31:9\n   |\n31 |     let\
    \ wells: Vec<isize> = grid.iter().map(|row| row.iter().sum::<isize>()).collect();\n\
    \   |         ^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_wells`\n\nerror[E0596]: cannot borrow `grid` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpahkutntz.rs:37:17\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n37 |                 grid[current_row][current_well]\
    \ -= 1;\n   |                 ^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error; 3 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut total = 0;\n    let mut last_row = vec![0; grid[0].len()];\n    for row\
    \ in grid {\n        for i in 0..row.len() {\n            let v = row[i];\n  \
    \          if v != 0 {\n                let diff = capacity - v;\n           \
    \     if diff <= last_row[i] {\n                    let taken = std::cmp::min(diff,\
    \ last_row[i]);\n                    last_row[i] -= taken;\n                 \
    \   total += taken;\n                }\n            }\n        }\n        for\
    \ i in 0..row.len() {\n            let v = row[i];\n            if v != 0 {\n\
    \                let diff = capacity - v;\n                if diff > last_row[i]\
    \ {\n                    let take = diff - last_row[i];\n                    last_row[i]\
    \ += take;\n                    total += take;\n                }\n          \
    \  }\n        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmplk61gzxo.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut filled_up = 0;\n    for row in grid {\n        let mut row_filled_up = 0;\n\
    \        for item in row {\n            row_filled_up += if item == 1 { capacity\
    \ } else { 0 };\n        }\n        filled_up += row_filled_up;\n    }\n    filled_up\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `5`', /tmp/tmpzo1n1xuj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let n = grid.len();\n    let m = grid[0].len();\n    for\
    \ j in 0..m {\n        let mut buckets = capacity;\n        for i in 0..n {\n\
    \            if grid[i][j] == 1 {\n                if buckets >= 1 {\n       \
    \             buckets -= 1;\n                } else {\n                    count\
    \ += 1;\n                    buckets = capacity - 1;\n                }\n    \
    \        }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmpu2v91qne.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ rows = grid.len();\n    let cols = grid[0].len();\n    let mut result = 0;\n\
    \    let mut curr_row = rows - 1;\n    let mut curr_col = 0;\n    let mut column_count\
    \ = 0;\n    let mut row_count = 0;\n    let mut max_times = cols * capacity;\n\
    \    let mut max_times_row = rows * capacity;\n    while row_count < max_times_row\
    \ && column_count < max_times {\n        if curr_row >= 0 && curr_row < rows &&\
    \ curr_col >= 0 && curr_col < cols {\n            let cell = grid[curr_row][curr_col];\n\
    \            if cell == 1 {\n                result += 1;\n            }\n   \
    \         //println!(\"{}, {}\", curr_row, curr_col);\n            column_count\
    \ += 1;\n            curr_col += 1;\n            if curr_col == cols {\n     \
    \           curr_col = 0;\n                curr_row -= 1;\n                row_count\
    \ += 1;\n            }\n        } else {\n            break;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc1jm2nm0.rs:30:32\n   |\n\
    30 |     let mut max_times = cols * capacity;\n   |                          \
    \      ^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot multiply\
    \ `usize` by `isize`\n  --> /tmp/tmpc1jm2nm0.rs:30:30\n   |\n30 |     let mut\
    \ max_times = cols * capacity;\n   |                              ^ no implementation\
    \ for `usize * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Mul<Rhs>`:\n\
    \             <&'a f32 as Mul<f32>>\n             <&'a f64 as Mul<f64>>\n    \
    \         <&'a i128 as Mul<i128>>\n             <&'a i16 as Mul<i16>>\n      \
    \       <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n          \
    \   <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n           and\
    \ 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1jm2nm0.rs:31:36\n\
    \   |\n31 |     let mut max_times_row = rows * capacity;\n   |               \
    \                     ^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot multiply `usize` by `isize`\n  --> /tmp/tmpc1jm2nm0.rs:31:34\n   |\n\
    31 |     let mut max_times_row = rows * capacity;\n   |                      \
    \            ^ no implementation for `usize * isize`\n   |\n   = help: the trait\
    \ `Mul<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ n = grid.len();\n    let m = grid[0].len();\n    let mut buckets = vec![0; n];\n\
    \    let mut res = 0;\n    let mut left_bucket = 0;\n    while left_bucket < m\
    \ {\n        let mut new_left_bucket = m;\n        for i in 0..n {\n         \
    \   if grid[i][left_bucket] == 1 {\n                buckets[i] += 1;\n       \
    \         if buckets[i] == capacity {\n                    buckets[i] = 0;\n \
    \                   new_left_bucket = min(new_left_bucket, i);\n             \
    \   }\n            }\n        }\n        if new_left_bucket != m {\n         \
    \   left_bucket = new_left_bucket;\n            res += 1;\n        } else {\n\
    \            break;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdsrlwknz.rs:35:39\n\
    \   |\n35 |                     new_left_bucket = min(new_left_bucket, i);\n \
    \  |                                       ^^^\n...\n49 | fn main() {\n   | ---------\
    \ similarly named function `main` defined here\n   |\nhelp: a function with a\
    \ similar name exists\n   |\n35 |                     new_left_bucket = main(new_left_bucket,\
    \ i);\n   |                                       ~~~~\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ height = grid.len();\n    let width = grid[0].len();\n    let mut new_grid =\
    \ grid.clone();\n    let mut count = 0;\n    for r in 0..height {\n        for\
    \ c in 0..width {\n            if grid[r][c] == 1 {\n                if c < width\
    \ - 1 && new_grid[r][c + 1] != 1 {\n                    count += 1;\n        \
    \            new_grid[r][c + 1] = 1;\n                } else if r < height - 1\
    \ && new_grid[r + 1][c] != 1 {\n                    count += 1;\n            \
    \        new_grid[r + 1][c] = 1;\n                }\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmp3dvjbekn.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut total_water = 0;\n    let mut grid = grid;\n    let mut i = 0;\n    while\
    \ i < grid.len() {\n        let mut water = 0;\n        let mut j = 0;\n     \
    \   while j < grid[i].len() {\n            if grid[i][j] == 1 {\n            \
    \    water += 1;\n                if water > capacity {\n                    water\
    \ = 0;\n                    let mut k = j - 1;\n                    while k >=\
    \ 0 && grid[i][k] == 1 {\n                        grid[i][k] = 0;\n          \
    \              k -= 1;\n                    }\n                }\n           \
    \ }\n            j += 1;\n        }\n        total_water += water;\n        i\
    \ += 1;\n    }\n    total_water\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpk2t8d0k_.rs:37:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut max_fill = 0;\n    let mut rows = 0;\n    let mut cols = 0;\n    if let\
    \ Some(row) = grid.first() {\n        rows = grid.len();\n        cols = row.len();\n\
    \    }\n    let mut grid_cpy = grid.clone();\n    for row in 0..rows {\n     \
    \   for col in 0..cols {\n            if grid[row][col] == 1 {\n             \
    \   max_fill += 1;\n                grid_cpy[row][col] = 0;\n                let\
    \ mut bucket = capacity;\n                let mut i = row as isize - 1;\n    \
    \            while i >= 0 && bucket > 0 {\n                    if grid_cpy[i as\
    \ usize][col] == 1 {\n                        bucket -= 1;\n                 \
    \       grid_cpy[i as usize][col] = 0;\n                    }\n              \
    \      i -= 1;\n                }\n                bucket = capacity;\n      \
    \          i = row as isize + 1;\n                while i < rows as isize && bucket\
    \ > 0 {\n                    if grid_cpy[i as usize][col] == 1 {\n           \
    \             bucket -= 1;\n                        grid_cpy[i as usize][col]\
    \ = 0;\n                    }\n                    i += 1;\n                }\n\
    \            }\n        }\n    }\n    max_fill\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp1pec_6ca.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut buckets: Vec<Bucket> = Vec::new();\n    for row in grid {\n        buckets.push(Bucket::new(row,\
    \ capacity));\n    }\n    let bucket_count = buckets.len();\n    let mut i = 0;\n\
    \    let mut raises = 0;\n    while i < bucket_count {\n        if buckets[i].contents\
    \ > 0 {\n            buckets[i].empty(capacity);\n            raises += 1;\n \
    \       }\n        if i == bucket_count - 1 {\n            i = 0;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    raises\n}\n\nfn main() {\n   \
    \ let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Bucket`\n  -->\
    \ /tmp/tmpyfpfzr7n.rs:25:22\n   |\n25 |         buckets.push(Bucket::new(row,\
    \ capacity));\n   |                      ^^^^^^ use of undeclared type `Bucket`\n\
    \nerror[E0412]: cannot find type `Bucket` in this scope\n  --> /tmp/tmpyfpfzr7n.rs:23:26\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |            - help: you might be missing a type parameter: `<Bucket>`\n23\
    \ |     let mut buckets: Vec<Bucket> = Vec::new();\n   |                     \
    \     ^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() == 0 {\n        return 0;\n    }\n    let n = grid.len();\n    let\
    \ m = grid[0].len();\n    let mut capacity = capacity;\n    let mut times = 0;\n\
    \    for i in 0..n {\n        for j in 0..m {\n            if grid[i][j] == 1\
    \ {\n                times += 1;\n                capacity -= 1;\n           \
    \ }\n            if capacity == 0 {\n                break;\n            }\n \
    \       }\n        if capacity == 0 {\n            break;\n        }\n    }\n\
    \    return times;\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `6`', /tmp/tmpjvsf0tsf.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n  if\
    \ grid.len() < 1 {\n    return 0;\n  }\n  let rows = grid.len();\n  let cols =\
    \ grid[0].len();\n  let mut water_level = vec![vec![0; cols]; rows];\n  let mut\
    \ fills = 0;\n  let mut empties = 0;\n  for i in 0..rows {\n    for j in 0..cols\
    \ {\n      if grid[i][j] == 1 {\n        fills += 1;\n        water_level[i][j]\
    \ = 1;\n      }\n    }\n  }\n  // replace 1 with a 2 if it already has water in\
    \ it\n  for i in 0..rows {\n    for j in 0..cols {\n      if grid[i][j] == 2 {\n\
    \        fills += 1;\n        water_level[i][j] = 1;\n      }\n    }\n  }\n  let\
    \ mut num_fills = 0;\n  while fills > 0 {\n    num_fills += 1;\n    let mut new_fills\
    \ = 0;\n    let mut new_empties = 0;\n    for i in 0..rows {\n      for j in 0..cols\
    \ {\n        if water_level[i][j] > 0 {\n          if grid[i][j] == 1 {\n    \
    \        water_level[i][j] = capacity;\n            empties += 1;\n          }\
    \ else {\n            new_empties += 1;\n          }\n        } else if water_level[i][j]\
    \ == 0 {\n          let mut water_here = 0;\n          if i > 0 && water_level[i\
    \ - 1][j] > 0 {\n            water_here += 1;\n          }\n          if i < rows\
    \ - 1 && water_level[i + 1][j] > 0 {\n            water_here += 1;\n         \
    \ }\n          if j > 0 && water_level[i][j - 1] > 0 {\n            water_here\
    \ += 1;\n          }\n          if j < cols - 1 && water_level[i][j + 1] > 0 {\n\
    \            water_here += 1;\n          }\n          if water_here > 0 {\n  \
    \          water_level[i\n}\n\nfn main() {\n    let candidate = max_fill;\n  \
    \  assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1,\
    \ 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0,\
    \ 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp22k06un9.rs:87:3\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                                              - unclosed delimiter\n\
    ...\n49 |   while fills > 0 {\n   |                   - unclosed delimiter\n...\n\
    53 |     for i in 0..rows {\n   |                      - unclosed delimiter\n\
    54 |       for j in 0..cols {\n   |                        - unclosed delimiter\n\
    ...\n62 |         } else if water_level[i][j] == 0 {\n   |                   \
    \                       - unclosed delimiter\n...\n76 |           if water_here\
    \ > 0 {\n   |                             - this delimiter might not be properly\
    \ closed...\n77 |             water_level[i\n78 | }\n   | - ...as it matches this\
    \ but it has different indentation\n...\n87 | }\n   |   ^\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp22k06un9.rs:77:24\n   |\n22 | fn max_fill(grid:\
    \ Vec<Vec<isize>>, capacity: isize) -> isize {\n   |                         \
    \                                     - closing delimiter possibly meant for this\n\
    ...\n77 |             water_level[i\n   |                        ^ unclosed delimiter\n\
    78 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp22k06un9.rs:77:13\n   |\n76 |  /           if water_here > 0 {\n\
    77 |  |             water_level[i\n   |  |_____________^\n78 | || }\n   | || ^\n\
    \   | ||_|\n   | |__expected this to be `()`\n   |    expected `()`, found struct\
    \ `Vec`\n   |\n   = note: expected unit type `()`\n                 found struct\
    \ `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp22k06un9.rs:49:3\n\
    \   |\n22 |   fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n\
    \   |                                                          ----- expected\
    \ `isize` because of return type\n...\n49 | /   while fills > 0 {\n50 | |    \
    \ num_fills += 1;\n51 | |     let mut new_fills = 0;\n52 | |     let mut new_empties\
    \ = 0;\n...  |\n86 | |     assert_eq!(candidate(vec![vec![1, 1, 1, 1], vec![1,\
    \ 1, 1, 1]], 9), 2);\n87 | | }\n   | |__^ e"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ max_depth = grid.iter().map(|row| row.iter().sum::<isize>()).max().unwrap();\n\
    \    max_depth / capacity + if max_depth % capacity > 0 { 1 } else { 0 }\n}\n\n\
    fn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `6`', /tmp/tmpj1jy2oy8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut fill = 0;\n    let mut wells = grid.clone();\n    let mut last_changes =\
    \ true;\n    while last_changes {\n        last_changes = false;\n        wells\
    \ = wells.iter().enumerate().map(|(i, row)| {\n            row.iter().enumerate().map(|(j,\
    \ &val)| {\n                if val == 0 {\n                    0\n           \
    \     } else {\n                    let mut value = wells[i][j];\n           \
    \         for k in (0..=i).rev() {\n                        if wells[k][j] ==\
    \ 0 {\n                            value = 1;\n                            break;\n\
    \                        }\n                    }\n                    value\n\
    \                }\n            }).collect()\n        }).collect();\n        let\
    \ (n, k) = (wells.len(), wells[0].len());\n        for i in 0..n {\n         \
    \   for j in 0..k {\n                if wells[i][j] == 1 {\n                 \
    \   let mut num_ones = 0;\n                    for l in 0..i {\n             \
    \           if wells[l][j] == 1 {\n                            num_ones += 1;\n\
    \                        }\n                    }\n                    for l in\
    \ (j+1)..k {\n                        if wells[i][l] == 1 {\n                \
    \            num_ones += 1;\n                        }\n                    }\n\
    \                    if num_ones >= capacity {\n                        wells[i][j]\
    \ = 0;\n                        last_changes = true;\n                       \
    \ fill += 1;\n                    }\n                }\n            }\n      \
    \  }\n    }\n    fill\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpjkadgop2.rs:73:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().map(|row|\
    \ {\n        let mut prev_max = 0;\n        row.iter().filter(|&el| *el == 1).map(|el|\
    \ {\n            let new_max = prev_max + capacity;\n            let used = new_max\
    \ - el;\n            prev_max = new_max;\n            used\n        }).sum::<isize>()\n\
    \    }).sum()\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `29`,\n right: `5`', /tmp/tmpmvxl7l4r.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut rows = grid.len();\n    let mut cols = grid[0].len();\n    let mut result\
    \ = 0;\n    while rows > 0 {\n        let mut max_row = 0;\n        let mut max_fill\
    \ = 0;\n        for i in 0..rows {\n            let current_fill = grid[i].iter().filter(|&&x|\
    \ x == 1).count() as isize;\n            if current_fill > max_fill {\n      \
    \          max_fill = current_fill;\n                max_row = i;\n          \
    \  }\n        }\n        for i in 0..cols {\n            if grid[max_row][i] ==\
    \ 1 {\n                grid[max_row][i] = 0;\n                result += 1;\n \
    \           }\n        }\n        rows -= 1;\n        for i in 0..rows {\n   \
    \         let mut new_row = vec![];\n            for j in 0..cols {\n        \
    \        new_row.push(min(grid[i][j], grid[i + 1][j]));\n            }\n     \
    \       grid[i] = new_row;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp2788fw7s.rs:46:30\n\
    \   |\n46 |                 new_row.push(min(grid[i][j], grid[i + 1][j]));\n \
    \  |                              ^^^\n...\n54 | fn main() {\n   | --------- similarly\
    \ named function `main` defined here\n   |\nhelp: a function with a similar name\
    \ exists\n   |\n46 |                 new_row.push(main(grid[i][j], grid[i + 1][j]));\n\
    \   |                              ~~~~\nhelp: consider importing this function\n\
    \   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: -1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut n = 0;\n    let mut full = Vec::new();\n    loop {\n        let mut row_sum\
    \ = 0;\n        for row in &grid {\n            row_sum += row.iter().sum::<isize>();\n\
    \        }\n        if row_sum == 0 {\n            break;\n        }\n       \
    \ for row in &grid {\n            for well in row {\n                let mut c\
    \ = capacity - well;\n                for f in &full {\n                    c\
    \ = std::cmp::min(c, *f);\n                }\n                if c > 0 {\n   \
    \                 for f in &mut full {\n                        *f -= c;\n   \
    \                 }\n                    full.push(c);\n                }\n  \
    \          }\n        }\n        while full.iter().all(|f| *f == 0) {\n      \
    \      full.remove(0);\n        }\n        n += 1;\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977580
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut num_wells = 0;\n    let mut num_full_wells = 0;\n\
    \    let mut wells: Vec<isize> = Vec::new();\n    for vec in grid {\n        let\
    \ mut well: isize = 0;\n        for x in vec {\n            if x == 1 {\n    \
    \            well += 1;\n            }\n        }\n        wells.push(well);\n\
    \        num_wells += 1;\n    }\n    while num_full_wells < num_wells {\n    \
    \    for i in 0..num_wells {\n            if wells[i] > 0 {\n                wells[i]\
    \ -= capacity;\n                counter += 1;\n            }\n            if wells[i]\
    \ == 0 {\n                num_full_wells += 1;\n            }\n        }\n   \
    \ }\n    counter\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `6`', /tmp/tmp5zahndtu.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut iters = 0;\n    let mut col_max = vec![0; grid[0].len()];\n    for row in\
    \ grid {\n        for (i, &col) in row.iter().enumerate() {\n            if col\
    \ == 1 {\n                col_max[i] += 1;\n            }\n        }\n    }\n\
    \    for m in col_max {\n        iters += m / capacity;\n        if m % capacity\
    \ != 0 {\n            iters += 1;\n        }\n    }\n    iters\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `5`', /tmp/tmpv7z146zn.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n  //\
    \ init variables\n  let n = grid.len();\n  let m = grid[0].len();\n  let mut capacity_grid\
    \ = vec![vec![capacity; m]; n];\n  let mut turns = 0;\n  // loop over the grid\n\
    \  'outer: loop {\n    // loop through the wells\n    for i in 0..n {\n      //\
    \ loop through the water in the wells\n      for j in 0..m {\n        // check\
    \ if water is present\n        if grid[i][j] == 1 {\n          // check if capacity\
    \ is available\n          if capacity_grid[i][j] > 0 {\n            // set the\
    \ water to 0\n            grid[i][j] = 0;\n            // decrement the capacity\n\
    \            capacity_grid[i][j] -= 1;\n          }\n          // if capacity\
    \ is 0, there is no reason to continue looping\n          else {\n           \
    \ break 'outer;\n          }\n        }\n      }\n    }\n    // increment the\
    \ number of turns\n    turns += 1;\n  }\n  turns\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `grid` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpaoquyzfk.rs:39:13\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n39 |             grid[i][j] = 0;\n   |     \
    \        ^^^^ cannot borrow as mutable\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: -1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n  let\
    \ mut runs = 0;\n  let mut col_max = 0;\n  let (rows, cols) = (grid.len(), grid[0].len());\n\
    \  let mut grid = grid;\n  while col_max != capacity {\n    runs += 1;\n    let\
    \ mut next_col_max = 0;\n    for i in 0..rows {\n      for j in 0..cols {\n  \
    \      if grid[i][j] > 0 {\n          if grid[i][j] + col_max <= capacity {\n\
    \            col_max += grid[i][j];\n            grid[i][j] = 0;\n          }\
    \ else {\n            next_col_max += grid[i][j] + col_max - capacity;\n     \
    \       grid[i][j] = 0;\n          }\n        }\n      }\n    }\n    col_max =\
    \ next_col_max;\n  }\n  runs\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977580
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp22nk3kmv.rs:23:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut row_num = grid.len();\n    let mut col_num = grid[0].len();\n\
    \    for _i in 0..row_num {\n        let mut row_cap = capacity;\n        for\
    \ _j in 0..col_num {\n            if row_cap > 0 {\n                row_cap -=\
    \ 1;\n                count += 1;\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp9tukydis.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut buckets = vec![capacity; grid[0].len()];\n    let mut times = 0;\n    let\
    \ mut did_work = true;\n    while did_work {\n        did_work = false;\n    \
    \    for i in 0..grid.len() {\n            for j in 0..grid[i].len() {\n     \
    \           if grid[i][j] > 0 && buckets[j] > 0 {\n                    buckets[j]\
    \ -= 1;\n                    grid[i][j] -= 1;\n                    did_work =\
    \ true;\n                }\n            }\n        }\n        if did_work {\n\
    \            times += 1;\n        }\n    }\n    times\n}\n\nfn main() {\n    let\
    \ candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `grid` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpul1o57k2.rs:32:21\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n32 |                     grid[i][j] -= 1;\n\
    \   |                     ^^^^ cannot borrow as mutable\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut rows = grid.len();\n    let mut cols = grid[0].len();\n    let mut result\
    \ = 0;\n    while rows > 0 && cols > 0 {\n        let mut curr_row = 0;\n    \
    \    let mut curr_col = 0;\n        let mut col_count = 0;\n        let mut row_count\
    \ = 0;\n        while curr_row < rows && curr_col < cols {\n            while\
    \ curr_col < cols && grid[curr_row][curr_col] == 0 {\n                curr_col\
    \ += 1;\n            }\n            if curr_col < cols {\n                col_count\
    \ += 1;\n            }\n            while curr_row < rows && grid[curr_row][curr_col]\
    \ == 0 {\n                curr_row += 1;\n            }\n            if curr_row\
    \ < rows {\n                row_count += 1;\n            }\n            curr_row\
    \ += 1;\n            curr_col += 1;\n        }\n        rows -= row_count;\n \
    \       cols -= col_count;\n        if col_count > row_count {\n            result\
    \ += col_count * capacity;\n        } else {\n            result += row_count\
    \ * capacity;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpum4dqal0.rs:50:35\n   |\n\
    50 |             result += col_count * capacity;\n   |                       \
    \            ^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ multiply `usize` by `isize`\n  --> /tmp/tmpum4dqal0.rs:50:33\n   |\n50 |   \
    \          result += col_count * capacity;\n   |                             \
    \    ^ no implementation for `usize * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpum4dqal0.rs:52:35\n\
    \   |\n52 |             result += row_count * capacity;\n   |                \
    \                   ^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot multiply `usize` by `isize`\n  --> /tmp/tmpum4dqal0.rs:52:33\n   |\n\
    52 |             result += row_count * capacity;\n   |                       \
    \          ^ no implementation for `usize * isize`\n   |\n   = help: the trait\
    \ `Mul<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n    \
    \         <&'a f64 as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n      \
    \       <&'a i16 as Mul<i16>>\n             <&'a i32 as Mul<i32>>\n          \
    \   <&'a i64 as Mul<i64>>\n             <&'a i8 as Mul<i8>>\n             <&'a\
    \ isize as Mul<isize>>\n           and 49 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpum4dqal0.rs:55:5\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |                                          \
    \              ----- expected `isize` because of return type\n...\n55 |     result\n\
    \   |     ^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a "
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut grid = grid;\n    let mut count = 0;\n    let rows = grid.len();\n    let\
    \ cols = grid[0].len();\n    for r in 0..rows {\n        for c in 0..cols {\n\
    \            if grid[r][c] == 1 {\n                return -1;\n            }\n\
    \        }\n    }\n    for r in 0..rows {\n        for c in 0..cols {\n      \
    \      if grid[r][c] == 1 {\n                if capacity < 2 {\n             \
    \       let mut row = 0;\n                    while row < rows {\n           \
    \             grid[row][c] = 1;\n                        row += 1;\n         \
    \           }\n                    count += 1;\n                } else {\n   \
    \                 grid[r][c] = 0;\n                    if r + 1 < rows {\n   \
    \                     grid[r + 1][c] = 1;\n                    }\n           \
    \         count += 1;\n                }\n            }\n        }\n    }\n  \
    \  count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `6`', /tmp/tmpr1vc_78i.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ width = grid[0].len();\n    let height = grid.len();\n    let mut fill_count\
    \ = 0;\n    for w in 0..width {\n        for h in 0..height {\n            let\
    \ mut fill_bucket = true;\n            for hh in h..height {\n               \
    \ if grid[hh][w] == 0 {\n                    break;\n                }\n     \
    \           fill_bucket = false;\n            }\n            if fill_bucket {\n\
    \                fill_count += 1;\n            }\n        }\n    }\n    fill_count\
    \ * capacity\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `5`', /tmp/tmpx_8sfj6g.rs:46:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut c = capacity;\n    let mut count = 0;\n    for row in grid {\n        let\
    \ mut i = 0;\n        while i < row.len() {\n            let amt = row[i];\n \
    \           if amt > 0 {\n                let bucket_amt = if amt > c {\n    \
    \                c\n                } else {\n                    amt\n      \
    \          };\n                count += 1;\n                c -= bucket_amt;\n\
    \                i += 1;\n            } else {\n                c = capacity;\n\
    \                i += 1;\n            }\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmp7dzmosgh.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut res = 0;\n    for i in grid {\n        for j in i {\n            if j ==\
    \ 1 {\n                res += 1;\n            }\n        }\n    }\n    (res /\
    \ capacity) as isize\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmpu4cga8n8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut total = 0;\n    for column in 0..grid[0].len() {\n        let mut current_column\
    \ = 0;\n        for row in 0..grid.len() {\n            current_column += grid[row][column];\n\
    \        }\n        let mut full = current_column / capacity;\n        if full\
    \ * capacity < current_column {\n            full += 1;\n        }\n        total\
    \ += full;\n    }\n    total\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `5`', /tmp/tmpa0174c4w.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ pass\n    1\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `6`', /tmp/tmpo8o49to8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut c = capacity;\n    let mut count = 0;\n    for v in grid {\n        for\
    \ i in v {\n            if i > c {\n                count += 1;\n            \
    \    c = capacity;\n            }\n            c -= i;\n        }\n        c =\
    \ capacity;\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp9rolu3y8.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut result = 0;\n    let mut current_depth = 0;\n    while !grid.iter().all(|v|\
    \ v.iter().all(|x| *x == 0)) {\n        current_depth += 1;\n        for row in\
    \ grid.iter_mut() {\n            for elem in row.iter_mut() {\n              \
    \  if *elem > 0 {\n                    result += 1;\n                    *elem\
    \ -= 1;\n                }\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: variable `current_depth` is assigned to, but never used\n  -->\
    \ /tmp/tmp4tqrvmut.rs:24:13\n   |\n24 |     let mut current_depth = 0;\n   | \
    \            ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by\
    \ default\n   = note: consider using `_current_depth` instead\n\nwarning: unused\
    \ variable: `capacity`\n  --> /tmp/tmp4tqrvmut.rs:22:36\n   |\n22 | fn max_fill(grid:\
    \ Vec<Vec<isize>>, capacity: isize) -> isize {\n   |                         \
    \           ^^^^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_capacity`\n\nerror[E0596]: cannot borrow `grid` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp4tqrvmut.rs:27:20\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n27 |         for row in grid.iter_mut() {\n\
    \   |                    ^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977574
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut tmp = 0;\n    let mut result = 0;\n    for well in grid {\n        let mut\
    \ water = 0;\n        for unit in well {\n            water += unit;\n       \
    \ }\n        tmp += water;\n        if tmp > capacity {\n            tmp = capacity;\n\
    \        }\n        result += tmp;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpqefm__3k.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() == 0 {\n        return 0;\n    }\n    let height = grid.len();\n\
    \    let width = grid[0].len();\n    let mut count = 0;\n    for col in 0..width\
    \ {\n        let mut row = 0;\n        while row < height {\n            if grid[row][col]\
    \ == 1 {\n                let mut j = row + 1;\n                while j < height\
    \ && grid[j][col] == 0 {\n                    j += 1;\n                }\n   \
    \             if j - row < capacity {\n                    for k in row..j {\n\
    \                        grid[k][col] = 1;\n                    }\n          \
    \          count += 1;\n                }\n                row = j;\n        \
    \    } else {\n                row += 1;\n            }\n        }\n    }\n  \
    \  count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_hqavd30.rs:37:30\n   |\n\
    37 |                 if j - row < capacity {\n   |                           \
    \   ^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n37 |      \
    \           if j - row < capacity.try_into().unwrap() {\n   |                \
    \                      ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ All wells are the same length, so create a vector of their water level.\n  \
    \  let mut levels: Vec<isize> = vec![0; grid[0].len()];\n    let mut buckets:\
    \ isize = 0;\n    // Go through each row, and fill the water.\n    for row in\
    \ grid {\n        // Go through each column, and fill it.\n        for (i, water)\
    \ in row.iter().enumerate() {\n            if *water == 1 {\n                levels[i]\
    \ += 1;\n            }\n        }\n        // If the bucket is full, empty it\
    \ and increment the count.\n        for level in levels.iter() {\n           \
    \ if *level == capacity {\n                buckets += 1;\n            }\n    \
    \    }\n        // Empty the buckets if they are full.\n        for level in levels.iter_mut()\
    \ {\n            if *level == capacity {\n                *level = 0;\n      \
    \      }\n        }\n    }\n    buckets\n}\n\nfn main() {\n    let candidate =\
    \ max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpxj32jgqu.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let mut filled = 0;\n    let\
    \ mut pours = 0;\n    while filled < grid.len() as isize {\n        let mut i\
    \ = 0;\n        while i < grid.len() as isize {\n            if grid[i as usize].iter().fold(0,\
    \ |acc, x| acc + x) > 0 {\n                for j in 0..grid[i as usize].len()\
    \ {\n                    if grid[i as usize][j] > 0 {\n                      \
    \  grid[i as usize][j] -= 1;\n                    }\n                }\n     \
    \           filled += 1;\n                pours += 1;\n            }\n       \
    \     i += 1;\n        }\n        if filled < grid.len() as isize {\n        \
    \    for i in 0..grid.len() {\n                for j in 0..grid[i].len() {\n \
    \                   if grid[i][j] > 0 {\n                        grid[i][j] -=\
    \ 1;\n                    }\n                }\n            }\n            pours\
    \ += 1;\n        }\n    }\n    pours\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `capacity`\n  --> /tmp/tmpf8sbr96t.rs:22:36\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                    ^^^^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_capacity`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `grid` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmpf8sbr96t.rs:34:25\n   |\n22 | fn max_fill(grid:\
    \ Vec<Vec<isize>>, capacity: isize) -> isize {\n   |             ---- help: consider\
    \ changing this to be mutable: `mut grid`\n...\n34 |                         grid[i\
    \ as usize][j] -= 1;\n   |                         ^^^^ cannot borrow as mutable\n\
    \nerror[E0596]: cannot borrow `grid` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpf8sbr96t.rs:46:25\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n46 |                         grid[i][j] -= 1;\n\
    \   |                         ^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to 2 previous errors; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut wells = grid.iter().map(|row| -> Vec<Water> {\n        row.iter().map(|water|\
    \ {\n            if *water == 1 { Full } else { Empty }\n        }).collect()\n\
    \    }).collect::<Vec<Vec<Water>>>();\n    let mut changes = 0;\n    let mut water_level\
    \ = capacity;\n    let rows = wells.len();\n    let columns = wells[0].len();\n\
    \    loop {\n        if water_level <= 0 {\n            return changes;\n    \
    \    }\n        let mut last_row = rows - 1;\n        for column in 0..columns\
    \ {\n            if wells[last_row][column] == Full {\n                return\
    \ changes;\n            }\n        }\n        for row in (0..last_row).rev() {\n\
    \            for column in 0..columns {\n                if wells[row][column]\
    \ == Full {\n                    wells[row][column] = Empty;\n               \
    \     if wells[row + 1][column] == Empty {\n                        wells[row\
    \ + 1][column] = Filled(water_level);\n                    }\n               \
    \ }\n            }\n        }\n        water_level -= 1;\n        changes += 1;\n\
    \    }\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `Water` in this scope\n  --> /tmp/tmpk0spz132.rs:23:50\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |            - help: you might be missing a type parameter: `<Water>`\n23 |\
    \     let mut wells = grid.iter().map(|row| -> Vec<Water> {\n   |            \
    \                                      ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `Full` in this scope\n  --> /tmp/tmpk0spz132.rs:25:30\n  \
    \ |\n25 |             if *water == 1 { Full } else { Empty }\n   |           \
    \                   ^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ one of these items\n   |\n1  | use std::panic::BacktraceStyle::Full;\n   |\n\
    1  | use std::sync::mpsc::TrySendError::Full;\n   |\n\nerror[E0425]: cannot find\
    \ value `Empty` in this scope\n  --> /tmp/tmpk0spz132.rs:25:44\n   |\n25 |   \
    \          if *water == 1 { Full } else { Empty }\n   |                      \
    \                      ^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ one of these items\n   |\n1  | use std::num::IntErrorKind::Empty;\n   |\n1 \
    \ | use std::sync::mpsc::TryRecvError::Empty;\n   |\n\nerror[E0412]: cannot find\
    \ type `Water` in this scope\n  --> /tmp/tmpk0spz132.rs:27:26\n   |\n22 | fn max_fill(grid:\
    \ Vec<Vec<isize>>, capacity: isize) -> isize {\n   |            - help: you might\
    \ be missing a type parameter: `<Water>`\n...\n27 |     }).collect::<Vec<Vec<Water>>>();\n\
    \   |                          ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `Full` in this scope\n  --> /tmp/tmpk0spz132.rs:38:43\n  \
    \ |\n38 |             if wells[last_row][column] == Full {\n   |             \
    \                              ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::panic::BacktraceStyle::Full;\n\
    \   |\n1  | use std::sync::mpsc::TrySendError::Full;\n   |\n\nerror[E0425]: cannot\
    \ find value `Full` in this scope\n  --> /tmp/tmpk0spz132.rs:44:42\n   |\n44 |\
    \                 if wells[row][column] == Full {\n   |                      \
    \                    ^^^^ not found in this scope"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ init\n    let mut total_fill = 0;\n    let mut total_rows = 0;\n    let row_fill\
    \ = 0;\n    // validate\n    if grid.len() == 0 {\n        return 0;\n    }\n\
    \    //\n    for row in grid {\n        total_rows += 1;\n        for item in\
    \ row {\n            if item == 1 {\n                total_fill += 1;\n      \
    \      }\n        }\n    }\n    println!(\"{}\", total_fill);\n    if total_fill\
    \ <= capacity {\n        return total_rows;\n    }\n    // main loop\n    let\
    \ mut bucket = capacity;\n    let mut bucket_fill = bucket;\n    let mut total_buckets\
    \ = 0;\n    let mut rows_filled = 0;\n    //\n    while rows_filled < total_rows\
    \ {\n        let mut row_done = false;\n        for item in grid[rows_filled]\
    \ {\n            //\n            if item == 1 {\n                bucket_fill -=\
    \ 1;\n            }\n            //\n            if bucket_fill == 0 {\n     \
    \           total_buckets += 1;\n                row_done = true;\n          \
    \      rows_filled += 1;\n                bucket_fill = bucket;\n            }\n\
    \        }\n        if row_done == false {\n            total_buckets += 1;\n\
    \            rows_filled += 1;\n            bucket_fill = bucket;\n        }\n\
    \    }\n    // return\n    total_buckets\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[Vec<isize>]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp7_pv5mal.rs:52:21\n   |\n52 |         for item in grid[rows_filled]\
    \ {\n   |                     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[Vec<isize>]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<Vec<isize>>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().map(|row|\
    \ {\n        row.iter().sum::<isize>() / capacity\n    }).sum()\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `5`', /tmp/tmp37rw5h0_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut depth = vec![0; grid[0].len()];\n    let mut count = 0;\n    for row in\
    \ &grid {\n        for i in 0..row.len() {\n            if row[i] == 1 {\n   \
    \             depth[i] += 1;\n            }\n        }\n        for i in 0..depth.len()\
    \ {\n            if depth[i] > 0 {\n                count += 1;\n            \
    \    depth[i] -= 1;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpc2rup7ls.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().fold(0,\
    \ |acc, x| {\n        let row_sum = x.iter().sum();\n        let iters = row_sum\
    \ as f64 / capacity as f64;\n        acc + (iters.ceil() as isize)\n    })\n}\n\
    \nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp7otnokjo.rs:25:21\n\
    \   |\n24 |         let row_sum = x.iter().sum();\n   |             ------- consider\
    \ giving `row_sum` a type\n25 |         let iters = row_sum as f64 / capacity\
    \ as f64;\n   |                     ^^^^^^^ cannot infer type\n   |\n   = note:\
    \ type must be known at this point\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ n = grid.len();\n    let m = grid[0].len();\n    let mut res = 0;\n    for i\
    \ in 0..n {\n        for j in 0..m {\n            if grid[i][j] != 0 {\n     \
    \           let mut jj = j;\n                while jj < m && grid[i][jj] != 0\
    \ {\n                    jj += 1;\n                }\n                let filled\
    \ = if jj == m {\n                    m - j\n                } else {\n      \
    \              jj - j\n                };\n                let filled = filled\
    \ as isize;\n                res += (filled + capacity - 1) / capacity;\n    \
    \            j = jj - 1;\n            }\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `j` is never read\n  --> /tmp/tmph306vgnz.rs:40:17\n\
    \   |\n40 |                 j = jj - 1;\n   |                 ^\n   |\n   = note:\
    \ `#[warn(unused_assignments)]` on by default\n   = help: maybe it is overwritten\
    \ before being read?\n\nerror[E0384]: cannot assign twice to immutable variable\
    \ `j`\n  --> /tmp/tmph306vgnz.rs:40:17\n   |\n27 |         for j in 0..m {\n \
    \  |             -\n   |             |\n   |             first assignment to `j`\n\
    \   |             help: consider making this binding mutable: `mut j`\n...\n40\
    \ |                 j = jj - 1;\n   |                 ^^^^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ Construct a 1d array that represents the wells, \n    // and find the maximum\
    \ depth\n    let mut wells = vec![];\n    let mut max_depth = 0;\n    for row\
    \ in grid {\n        for col in row {\n            if col == 1 {\n           \
    \     wells.push(1);\n                max_depth = max_depth.max(1);\n        \
    \    } else {\n                wells.push(0);\n            }\n        }\n    }\n\
    \    let height = wells.len() / grid[0].len();\n    // Count the number of buckets\
    \ used\n    let mut bucket_count = 0;\n    for _ in 0..max_depth {\n        //\
    \ Fill up wells to next depth level\n        for i in 0..wells.len() {\n     \
    \       if wells[i] == max_depth {\n                // Fill up wells in all directions,\
    \ until we hit a wall or an already filled well\n                // We can find\
    \ the maximum up/down/left/right by calculating index offsets\n              \
    \  let left = i % grid[0].len() - 1;\n                let right = i % grid[0].len()\
    \ + 1;\n                let up = i - grid[0].len();\n                let down\
    \ = i + grid[0].len();\n                if left >= 0 && wells[i - 1] == 0 {\n\
    \                    wells[i - 1] = max_depth + 1;\n                }\n      \
    \          if right < grid[0].len() && wells[i + 1] == 0 {\n                 \
    \   wells[i + 1] = max_depth + 1;\n                }\n                if up >=\
    \ 0 && wells[i - grid[0].len()] == 0 {\n                    wells[i - grid[0].len()]\
    \ = max_depth + 1;\n                }\n                if down < wells.len() &&\
    \ wells[i + grid[0].len()] == 0 {\n                    wells[i + grid[0].len()]\
    \ = max_depth + 1;\n                }\n            }\n        }\n        bucket_count\
    \ += 1;\n        max_depth += 1;\n    }\n    // Subtract the filled buckets from\
    \ the total number of buckets used\n    bucket_count - height\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnzz9c1b1.rs:68:5\n   |\n\
    22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n   |    \
    \                                                    ----- expected `isize` because\
    \ of return type\n...\n68 |     bucket_count - height\n   |     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n68 |     (bucket_count\
    \ - height).try_into().unwrap()\n   |     +                     +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut grid = grid;\n    let mut capacity = capacity;\n    // using a heap to keep\
    \ track of the rows that need to be filled\n    let mut heap = BinaryHeap::new();\n\
    \    for (i, row) in grid.iter().enumerate() {\n        heap.push(State { row:\
    \ i, count: row.iter().sum::<isize>() });\n    }\n    // For each row we process,\
    \ we give it as much water as we can\n    // Then we add the row to the heap again\
    \ with the updated water amount.\n    // This is repeated until no water is left\
    \ in the heap\n    let mut water_count = 0;\n    while let Some(mut state) = heap.pop()\
    \ {\n        // Here, row_amount represents the total amount of water that can\
    \ be taken out of this row\n        // While the amount left in the bucket plus\
    \ the water from the row is less than the bucket capacity\n        // we can add\
    \ one more unit of water to the total amount that can be taken out of the row\n\
    \        let mut row_amount = state.count;\n        while state.count + capacity\
    \ < capacity {\n            row_amount += 1;\n            state.count += 1;\n\
    \        }\n        water_count += row_amount;\n        grid[state.row] = grid[state.row].iter().map(|x|\
    \ x - row_amount).collect();\n        if state.count > 0 {\n            heap.push(state);\n\
    \        }\n    }\n    water_count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BinaryHeap`\n\
    \  --> /tmp/tmpmkuukpl6.rs:26:20\n   |\n26 |     let mut heap = BinaryHeap::new();\n\
    \   |                    ^^^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::BinaryHeap;\n   |\n\n\
    error[E0422]: cannot find struct, variant or union type `State` in this scope\n\
    \  --> /tmp/tmpmkuukpl6.rs:28:19\n   |\n28 |         heap.push(State { row: i,\
    \ count: row.iter().sum::<isize>() });\n   |                   ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0422, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0422`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut max = 0;\n    let mut cur = 0;\n    for row in grid {\n        for col in\
    \ row {\n            if col == 1 {\n                cur += 1;\n            } else\
    \ {\n                if cur > max {\n                    max = cur;\n        \
    \        }\n                cur = 0;\n            }\n        }\n        if cur\
    \ > max {\n            max = cur;\n        }\n        cur = 0;\n    }\n    if\
    \ max > capacity {\n        return max - capacity;\n    }\n    0\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpli2tki_1.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //println!(\"\
    {:?}\", grid);\n    let mut count = 0;\n    let mut grid = grid;\n    let max_row\
    \ = grid.len();\n    let max_col = grid[0].len();\n    let mut max_fill = 0;\n\
    \    while max_fill < max_row {\n        let mut zero_count = 0;\n        for\
    \ col in 0..max_col {\n            if grid[max_fill][col] == 0 {\n           \
    \     zero_count += 1;\n            }\n        }\n        if zero_count == max_col\
    \ {\n            max_fill += 1;\n        } else {\n            break;\n      \
    \  }\n    }\n    //println!(\"{}\", max_fill);\n    let mut min_fill = max_row\
    \ - 1;\n    while min_fill >= 0 {\n        let mut zero_count = 0;\n        for\
    \ col in 0..max_col {\n            if grid[min_fill][col] == 0 {\n           \
    \     zero_count += 1;\n            }\n        }\n        if zero_count == max_col\
    \ {\n            min_fill -= 1;\n        } else {\n            break;\n      \
    \  }\n    }\n    //println!(\"{}\", min_fill);\n    if min_fill >= max_fill {\n\
    \        while min_fill >= max_fill {\n            for row in max_fill..=min_fill\
    \ {\n                for col in 0..max_col {\n                    if grid[row][col]\
    \ == 1 {\n                        grid[row][col] = 0;\n                      \
    \  count += 1;\n                    }\n                }\n            }\n    \
    \        min_fill -= 1;\n            //println!(\"{:?}\", grid);\n        }\n\
    \    }\n    //println!(\"{:?}\", grid);\n    while max_fill >= 0 {\n        let\
    \ mut fill_count = 0;\n        for col in 0..max_col {\n            if grid[max_fill][col]\
    \ == 1 {\n                fill_count += 1;\n            }\n        }\n       \
    \ if fill_count > 0 {\n            count += 1;\n            let mut zero_count\
    \ = 0;\n            for row in 0..max_fill {\n                for col\n}\n\nfn\
    \ main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpbwxzbgsb.rs:94:3\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                                              - unclosed delimiter\n\
    ...\n73 |     while max_fill >= 0 {\n   |                         - unclosed delimiter\n\
    ...\n80 |         if fill_count > 0 {\n   |                           - unclosed\
    \ delimiter\n...\n83 |             for row in 0..max_fill {\n   |            \
    \                        - this delimiter might not be properly closed...\n84\
    \ |                 for col\n85 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n94 | }\n   |   ^\n\nerror: missing `in` in `for` loop\n  -->\
    \ /tmp/tmpbwxzbgsb.rs:84:24\n   |\n84 |                   for col\n   |  ________________________^\n\
    85 | | }\n   | |_ help: try adding `in` here\n\nerror: expected expression, found\
    \ `}`\n  --> /tmp/tmpbwxzbgsb.rs:85:1\n   |\n85 | }\n   | ^ expected expression\n\
    \nerror[E0434]: can't capture dynamic environment in a fn item\n  --> /tmp/tmpbwxzbgsb.rs:88:21\n\
    \   |\n88 |     let candidate = max_fill;\n   |                     ^^^^^^^^\n\
    \   |\n   = help: use the `|| { ... }` closure form instead\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbwxzbgsb.rs:73:5\n   |\n22 |   fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |                                          \
    \                ----- expected `isize` because of return type\n...\n73 | /  \
    \   while max_fill >= 0 {\n74 | |         let mut fill_count = 0;\n75 | |    \
    \     for col in 0..max_col {\n76 | |             if grid[max_fill][col] == 1\
    \ {\n...  |\n93 | |     assert_eq!(candidate(vec![vec![1, 1, 1, 1], vec![1, 1,\
    \ 1, 1]], 9), 2);\n94 | | }\n   | |__^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0434.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp22nk3kmv.rs:23:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut total_water = 0;\n    let n_rows = grid.len();\n    let n_cols = grid[0].len();\n\
    \    for row in grid {\n        for col in row {\n            if col > 0 {\n \
    \               total_water += capacity - col;\n            }\n        }\n   \
    \ }\n    (total_water as f64 / capacity as f64).ceil() as isize\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp3dghbbxi.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut min = isize::MAX;\n    let mut count = 0;\n    for row in grid {\n     \
    \   let mut sum = 0;\n        for &el in row.iter() {\n            sum += el;\n\
    \        }\n        if sum < min {\n            min = sum;\n        }\n      \
    \  count += sum;\n    }\n    if min == 0 {\n        0\n    } else {\n        (count\
    \ / min) + (count % min != 0) as isize\n    }\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp4z2el_md.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let w = grid[0].len();\n  \
    \  let h = grid.len();\n    let mut total = 0;\n    let mut water = vec![vec![0;\
    \ w]; h];\n    for i in 0..h {\n        for j in 0..w {\n            if grid[i][j]\
    \ == 1 {\n                total += 1;\n            }\n        }\n    }\n    if\
    \ total == 0 {\n        return 0;\n    }\n    let mut c = 0;\n    let mut filled\
    \ = 0;\n    let mut answer = 0;\n    loop {\n        for i in 0..h {\n       \
    \     for j in 0..w {\n                if grid[i][j] == 1 {\n                \
    \    water[i][j] = std::cmp::min(c, capacity);\n                }\n          \
    \  }\n        }\n        let mut d = vec![vec![0; w]; h];\n        let mut s =\
    \ vec![vec![0; w]; h];\n        for i in 1..h {\n            for j in 0..w {\n\
    \                if grid[i][j] == 1 {\n                    d[i][j] = std::cmp::min(d[i\
    \ - 1][j], water[i][j]);\n                }\n            }\n        }\n      \
    \  for i in (0..h - 1).rev() {\n            for j in (0..w).rev() {\n        \
    \        if grid[i][j] == 1 {\n                    s[i][j] = std::cmp::min(s[i\
    \ + 1][j], water[i][j]);\n                }\n            }\n        }\n      \
    \  for i in 0..h {\n            for j in 0..w {\n                if grid[i][j]\
    \ == 1 {\n                    let best = std::cmp::min(d[i][j], s[i][j]);\n  \
    \                  if best > water[i][j] {\n                        water[i][j]\
    \ = best;\n                    }\n                }\n            }\n        }\n\
    \        for i in 0..h {\n            for j in 0..w {\n                if grid[i][j]\
    \ == 1 && water[\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpqawjrp_b.rs:89:3\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                                              - unclosed delimiter\n\
    ...\n43 |     loop {\n   |          - unclosed delimiter\n...\n77 |         for\
    \ i in 0..h {\n   |                       - unclosed delimiter\n78 |         \
    \    for j in 0..w {\n   |                           - this delimiter might not\
    \ be properly closed...\n79 |                 if grid[i][j] == 1 && water[\n80\
    \ | }\n   | - ...as it matches this but it has different indentation\n...\n89\
    \ | }\n   |   ^\n\nerror: expected expression, found `]`\n  --> /tmp/tmpqawjrp_b.rs:80:1\n\
    \   |\n80 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpqawjrp_b.rs:79:44\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |                                          \
    \                    - closing delimiter possibly meant for this\n...\n79 |  \
    \               if grid[i][j] == 1 && water[\n   |                           \
    \                 ^ unclosed delimiter\n80 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: aborting due to 3 previous errors\n\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut result = 0;\n    let row_count = grid.len();\n    let col_count = grid[0].len();\n\
    \    for j in 0..col_count {\n        let mut row_count_accum = 0;\n        for\
    \ i in 0..row_count {\n            row_count_accum += grid[i][j];\n        }\n\
    \        if row_count_accum > capacity {\n            result += row_count_accum\
    \ - capacity;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmpedfcwb7w.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ width = grid[0].len();\n    let mut result = 0;\n    let mut buckets = vec![capacity;\
    \ width];\n    let mut sum = 0;\n    for line in grid {\n        let mut next_line\
    \ = Vec::new();\n        for i in 0..width {\n            let value = line[i];\n\
    \            let bucket = buckets[i];\n            if value == 1 {\n         \
    \       let mut new_bucket = bucket;\n                if bucket == 0 {\n     \
    \               sum += 1;\n                    new_bucket = capacity;\n      \
    \          }\n                next_line.push(new_bucket);\n            } else\
    \ {\n                next_line.push(bucket);\n            }\n        }\n     \
    \   for i in 0..width {\n            let new_value = next_line[i];\n         \
    \   buckets[i] = new_value - 1;\n        }\n    }\n    result += sum;\n    result\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `6`', /tmp/tmpx_qbbdoe.rs:54:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() == 0 {\n        return 0;\n    }\n    let width = grid[0].len();\n\
    \    let mut row_counts = Vec::new();\n    for row in grid {\n        let mut\
    \ count = 0;\n        for col in row {\n            if col == 1 {\n          \
    \      count += 1;\n            }\n        }\n        row_counts.push(count);\n\
    \    }\n    let mut res = 0;\n    let mut left = 0;\n    while left < width {\n\
    \        let mut p = left;\n        while p < width && row_counts[p] == 0 {\n\
    \            p += 1;\n        }\n        if p == width {\n            return res;\n\
    \        }\n        let mut right = p;\n        while right < width && row_counts[right]\
    \ != 0 {\n            right += 1;\n        }\n        for i in p..right {\n  \
    \          let mut count = capacity;\n            for j in left..i {\n       \
    \         count = count.min(row_counts[j]);\n            }\n            res +=\
    \ count;\n            for j in left..i {\n                row_counts[j] -= count;\n\
    \            }\n        }\n        left = right;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmp87xyc2fk.rs:48:32

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() == 0 {\n        return 0;\n    }\n    let mut bucket = vec![0; grid[0].len()];\n\
    \    let mut fill_op_count = 0;\n    for row in grid {\n        for (idx, w) in\
    \ row.iter().enumerate() {\n            let amt = std::cmp::min(capacity - bucket[idx],\
    \ *w);\n            fill_op_count += amt;\n            bucket[idx] += amt;\n \
    \       }\n    }\n    fill_op_count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `6`', /tmp/tmpct1bl4ea.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut result = 0;\n    let mut start = 0;\n    while start < grid.len() {\n  \
    \      let mut i = start;\n        while i < grid.len() && grid[i][0] == 0 {\n\
    \            i += 1;\n        }\n        if i > start {\n            let puddle\
    \ = i - start;\n            if puddle <= capacity {\n                result +=\
    \ 1;\n            } else {\n                result += puddle / capacity;\n   \
    \             if puddle % capacity != 0 {\n                    result += 1;\n\
    \                }\n            }\n        }\n        start = i;\n        while\
    \ start < grid.len() && grid[start][0] == 1 {\n            start += 1;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = max_fill;\n  \
    \  assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1,\
    \ 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0,\
    \ 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps0i5dd5p.rs:32:26\n   |\n\
    32 |             if puddle <= capacity {\n   |                          ^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n32 |           \
    \  if puddle <= capacity.try_into().unwrap() {\n   |                         \
    \         ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps0i5dd5p.rs:35:36\n\
    \   |\n35 |                 result += puddle / capacity;\n   |               \
    \                     ^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot divide `usize` by `isize`\n  --> /tmp/tmps0i5dd5p.rs:35:34\n   |\n35\
    \ |                 result += puddle / capacity;\n   |                       \
    \           ^ no implementation for `usize / isize`\n   |\n   = help: the trait\
    \ `Div<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Div<Rhs>`:\n             <&'a f32 as Div<f32>>\n    \
    \         <&'a f64 as Div<f64>>\n             <&'a i128 as Div<i128>>\n      \
    \       <&'a i16 as Div<i16>>\n             <&'a i32 as Div<i32>>\n          \
    \   <&'a i64 as Div<i64>>\n             <&'a i8 as Div<i8>>\n             <&'a\
    \ isize as Div<isize>>\n           and 54 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmps0i5dd5p.rs:36:29\n   |\n36 |                 if puddle % capacity\
    \ != 0 {\n   |                             ^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot mod `usize` by `isize`\n  --> /tmp/tmps0i5dd5p.rs:36:27\n\
    \   |\n36 |                 if puddle % capacity != 0 {\n   |                \
    \           ^ no implementation for `usize % isize`\n   |\n   = help: the trait\
    \ `Rem<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut max_fill = 0;\n    let max_h = grid.len();\n    let max_w = grid[0].len();\n\
    \    for i in 0..max_h {\n        for j in 0..max_w {\n            if grid[i][j]\
    \ == 1 {\n                let first_fill = capacity - j as isize;\n          \
    \      max_fill += first_fill;\n                let mut bucket = first_fill;\n\
    \                let mut current_w = j;\n                while current_w < max_w\
    \ {\n                    if grid[i][current_w] == 1 {\n                      \
    \  if bucket < capacity {\n                            max_fill += 1;\n      \
    \                      bucket += 1;\n                        } else {\n      \
    \                      max_fill += capacity;\n                            bucket\
    \ = capacity;\n                        }\n                    } else {\n     \
    \                   bucket -= 1;\n                    }\n                    current_w\
    \ += 1;\n                }\n            }\n        }\n    }\n    max_fill\n}\n\
    \nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpa08twt_v.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() == 0 {\n        return 0;\n    }\n    let row_count = grid.len();\n\
    \    let mut bucket = vec![0; row_count];\n    let mut row_idx = 0;\n    let mut\
    \ total_sum = 0;\n    let row_len = grid[0].len();\n    let mut down = false;\n\
    \    let mut up = false;\n    loop {\n        if row_idx == row_count {\n    \
    \        break;\n        }\n        let mut fill_now = false;\n        let mut\
    \ fill_after = false;\n        let fill_here = bucket[row_idx] != capacity;\n\
    \        if row_idx > 0 {\n            up = bucket[row_idx - 1] != 0;\n      \
    \  }\n        if row_idx < row_count - 1 {\n            down = bucket[row_idx\
    \ + 1] != capacity;\n        }\n        if up && fill_here {\n            fill_now\
    \ = true;\n        }\n        if down && fill_here {\n            fill_after =\
    \ true;\n        }\n        if up || down {\n            if up && !down {\n  \
    \              fill_now = true;\n            }\n            if down && !up {\n\
    \                fill_after = true;\n            }\n        }\n        if !fill_now\
    \ && !fill_after {\n            total_sum += 1;\n            bucket[row_idx] =\
    \ capacity;\n        }\n        if fill_now {\n            for col_idx in 0..row_len\
    \ {\n                if grid[row_idx][col_idx] == 1 {\n                    total_sum\
    \ += 1;\n                    bucket[row_idx] += 1;\n                    if bucket[row_idx]\
    \ == capacity {\n                        break;\n                    }\n     \
    \           }\n            }\n        }\n        if fill_after {\n           \
    \ row_idx += 1;\n            continue;\n        }\n        row_idx -= 1;\n   \
    \ }\n    total_sum\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpyoafk6u4.rs:86:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ Finding the highest row that has a 1\n    let mut max_one_row_index = grid.len()\
    \ - 1;\n    while max_one_row_index >= 0 {\n        if grid[max_one_row_index].iter().any(|&x|\
    \ x == 1) {\n            break;\n        }\n        max_one_row_index -= 1;\n\
    \    }\n    // First, we find the cost to fill the well in the highest row and\
    \ the rest of wells below that.\n    let mut row_sum = 0;\n    for row in &grid[max_one_row_index..]\
    \ {\n        let one_count = row.iter().filter(|&&x| x == 1).count();\n      \
    \  row_sum += (capacity - one_count as isize).abs();\n    }\n    // Second, we\
    \ find the cost to empty the wells that are above the highest row.\n    for row\
    \ in &grid[..max_one_row_index] {\n        let one_count = row.iter().filter(|&&x|\
    \ x == 1).count();\n        row_sum += one_count as isize;\n    }\n    row_sum\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `6`', /tmp/tmped3snk4v.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.len() < 1 {\n        return 0;\n    }\n    let row_len = grid[0].len();\n\
    \    let mut heights = vec![0; row_len];\n    let mut ans = 0;\n    for row in\
    \ grid {\n        for (i, &cell) in row.iter().enumerate() {\n            if cell\
    \ == 1 {\n                heights[i] += 1;\n            }\n        }\n       \
    \ ans += fill_row(&mut heights, capacity);\n    }\n    ans\n}\n\nfn main() {\n\
    \    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fill_row` in this scope\n  --> /tmp/tmpflwqsa71.rs:35:16\n\
    \   |\n35 |         ans += fill_row(&mut heights, capacity);\n   |           \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut grid_c = grid.clone();\n    let mut max_column =\
    \ get_max_column(&grid);\n    let mut max_col_bucket_left = capacity;\n    let\
    \ mut max_row_bucket_left = capacity;\n    let mut max_col_row_bucket_left = capacity;\n\
    \    let mut max_col_row_bucket_right = capacity;\n    let mut col_to_fill = max_column;\n\
    \    let mut row_to_fill = 0;\n    let mut col_row_to_fill = max_column;\n   \
    \ while is_any_water_left(&grid_c) {\n        count += 1;\n        if max_col_bucket_left\
    \ > 0 {\n            grid_c[0][max_column] -= 1;\n            max_col_bucket_left\
    \ -= 1;\n        }\n        if max_row_bucket_left > 0 {\n            for row\
    \ in 0..grid_c.len() {\n                if grid_c[row][row_to_fill] > 0 {\n  \
    \                  grid_c[row][row_to_fill] -= 1;\n                    max_row_bucket_left\
    \ -= 1;\n                }\n            }\n        }\n        if max_col_row_bucket_left\
    \ > 0 {\n            for col in col_row_to_fill..grid_c[0].len() {\n         \
    \       if grid_c[row_to_fill][col] > 0 {\n                    grid_c[row_to_fill][col]\
    \ -= 1;\n                    max_col_row_bucket_left -= 1;\n                }\n\
    \            }\n        }\n        if max_col_row_bucket_right > 0 {\n       \
    \     for col in 0..col_row_to_fill {\n                if grid_c[row_to_fill][col]\
    \ > 0 {\n                    grid_c[row_to_fill][col] -= 1;\n                \
    \    max_col_row_bucket_right -= 1;\n                }\n            }\n      \
    \  }\n        if max_col_bucket_left == 0 {\n            max_col_bucket_left =\
    \ capacity;\n            max_\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpcxjpb_n3.rs:75:3\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                                              - unclosed delimiter\n\
    ...\n33 |     while is_any_water_left(&grid_c) {\n   |                       \
    \               - unclosed delimiter\n...\n63 |         if max_col_bucket_left\
    \ == 0 {\n   |                                     - this delimiter might not\
    \ be properly closed...\n...\n66 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n75 | }\n   |   ^\n\nerror[E0425]: cannot find function\
    \ `get_max_column` in this scope\n  --> /tmp/tmpcxjpb_n3.rs:25:26\n   |\n25 |\
    \     let mut max_column = get_max_column(&grid);\n   |                      \
    \    ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `is_any_water_left` in this scope\n  --> /tmp/tmpcxjpb_n3.rs:33:11\n   |\n33\
    \ |     while is_any_water_left(&grid_c) {\n   |           ^^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `max_` in this scope\n\
    \  --> /tmp/tmpcxjpb_n3.rs:65:13\n   |\n65 |             max_\n   |          \
    \   ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcxjpb_n3.rs:33:5\n\
    \   |\n22 |   fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n\
    \   |                                                          ----- expected\
    \ `isize` because of return type\n...\n33 | /     while is_any_water_left(&grid_c)\
    \ {\n34 | |         count += 1;\n35 | |         if max_col_bucket_left > 0 {\n\
    36 | |             grid_c[0][max_column] -= 1;\n...  |\n74 | |     assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n75 | | }\n   | |__^ expected `isize`,\
    \ found `()`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0425.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp22nk3kmv.rs:23:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut max_fill = 0;\n    let (width, height) = (grid[0].len(),\
    \ grid.len());\n    let mut buckets = vec![vec![0; width]; height];\n    while\
    \ max_fill < capacity {\n        max_fill = 0;\n        for y in 0..height {\n\
    \            for x in 0..width {\n                let fill = buckets[y][x] + grid[y][x];\n\
    \                if fill > capacity {\n                    grid[y][x] = capacity\
    \ - buckets[y][x];\n                    buckets[y][x] = capacity;\n          \
    \      } else {\n                    buckets[y][x] = fill;\n                 \
    \   grid[y][x] = 0;\n                }\n                if buckets[y][x] > max_fill\
    \ {\n                    max_fill = buckets[y][x];\n                }\n      \
    \      }\n        }\n        count += 1;\n    }\n    count - 1\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `grid` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpm6cs91jh.rs:33:21\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n33 |                     grid[y][x] = capacity\
    \ - buckets[y][x];\n   |                     ^^^^ cannot borrow as mutable\n\n\
    error[E0596]: cannot borrow `grid` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpm6cs91jh.rs:37:21\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n37 |                     grid[y][x] = 0;\n \
    \  |                     ^^^^ cannot borrow as mutable\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0596`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp22nk3kmv.rs:23:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut water = 0;\n    let mut count = 0;\n    for well in grid {\n        water\
    \ += well.iter().sum::<isize>();\n        if water >= capacity {\n           \
    \ water = 0;\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpphliipb0.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let height = grid.len();\n\
    \    let width = grid[0].len();\n    let mut visited = vec![vec![false; width];\
    \ height];\n    let mut stack = Vec::new();\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    let mut level = 0;\n    for row in grid.iter() {\n        for &c in\
    \ row.iter() {\n            if c == 1 {\n                visited[i][j] = true;\n\
    \                stack.push((i, j));\n            }\n            j += 1;\n   \
    \     }\n        j = 0;\n        i += 1;\n    }\n    while !stack.is_empty() {\n\
    \        let (new_i, new_j) = stack.pop().unwrap();\n        let mut i = new_i;\n\
    \        let mut j = new_j;\n        if i > 0 && grid[i - 1][j] == 0 && !visited[i\
    \ - 1][j] {\n            grid[i - 1][j] = 1;\n            stack.push((i - 1, j));\n\
    \            visited[i - 1][j] = true;\n            level += 1;\n        }\n \
    \       if i < height - 1 && grid[i + 1][j] == 0 && !visited[i + 1][j] {\n   \
    \         grid[i + 1][j] = 1;\n            stack.push((i + 1, j));\n         \
    \   visited[i + 1][j] = true;\n            level += 1;\n        }\n        if\
    \ j > 0 && grid[i][j - 1] == 0 && !visited[i][j - 1] {\n            grid[i][j\
    \ - 1] = 1;\n            stack.push((i, j - 1));\n            visited[i][j - 1]\
    \ = true;\n            level += 1;\n        }\n        if j < width - 1 && grid[i][j\
    \ + 1] == 0 && !visited[i][j + 1] {\n            grid[i][j + 1] = 1;\n       \
    \     stack.push((i, j + 1));\n            visited[i][j + 1\n}\n\nfn main() {\n\
    \    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv5cw3pjs.rs:79:3\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                                              - unclosed delimiter\n\
    ...\n44 |     while !stack.is_empty() {\n   |                             - unclosed\
    \ delimiter\n...\n66 |         if j < width - 1 && grid[i][j + 1] == 0 && !visited[i][j\
    \ + 1] {\n   |                                                               \
    \        - this delimiter might not be properly closed...\n...\n70 | }\n   | -\
    \ ...as it matches this but it has different indentation\n...\n79 | }\n   |  \
    \ ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpv5cw3pjs.rs:69:23\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                                              - closing delimiter\
    \ possibly meant for this\n...\n69 |             visited[i][j + 1\n   |      \
    \                 ^ unclosed delimiter\n70 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpv5cw3pjs.rs:69:13\n   |\n66 |\
    \  /         if j < width - 1 && grid[i][j + 1] == 0 && !visited[i][j + 1] {\n\
    67 |  |             grid[i][j + 1] = 1;\n68 |  |             stack.push((i, j\
    \ + 1));\n69 |  |             visited[i][j + 1\n   |  |_____________^\n70 | ||\
    \ }\n   | || ^\n   | ||_|\n   | |__expected this to be `()`\n   |    expected\
    \ `()`, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpv5cw3pjs.rs:44:5\n\
    \   |\n22 |   fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n\
    \   |                                                          ----- expected\
    \ `isize` because of return type\n...\n44 | /     while !stack.is_empty() {\n\
    45 | |         let (new_i, new_j) = stack.pop().unwrap();\n46 | |         let\
    \ mut i = new_i;\n47 | |         let mut j = new_j;\n...  |\n78 | |     assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n79 | | }\n   | |__^ expected `isize`,\
    \ found `()`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rust"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ num_rows = grid.len();\n    let num_cols = grid[0].len();\n    let mut wells:\
    \ Vec<Well> = Vec::new();\n    for row in grid {\n        wells.push(Well::new(row));\n\
    \    }\n    let mut current_level = 0;\n    let mut steps = 0;\n    while current_level\
    \ < capacity {\n        let mut filled_wells = 0;\n        for mut well in &mut\
    \ wells {\n            if well.is_full() {\n                filled_wells += 1;\n\
    \            } else {\n                well.fill(current_level);\n           \
    \ }\n        }\n        if filled_wells == num_rows {\n            break;\n  \
    \      }\n        current_level += 1;\n        steps += 1;\n    }\n    steps\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Well`\n  --> /tmp/tmpoiv3v1sj.rs:27:20\n\
    \   |\n27 |         wells.push(Well::new(row));\n   |                    ^^^^\
    \ use of undeclared type `Well`\n\nerror[E0412]: cannot find type `Well` in this\
    \ scope\n  --> /tmp/tmpoiv3v1sj.rs:25:24\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |            - help: you might be missing a\
    \ type parameter: `<Well>`\n...\n25 |     let mut wells: Vec<Well> = Vec::new();\n\
    \   |                        ^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ max_depth = grid.iter().map(|w| w.iter().sum::<isize>()).max().unwrap();\n \
    \   let well_len = grid[0].len();\n    let mut stack = (0..grid.len()).map(|i|\
    \ (0, i)).collect::<Vec<(isize, usize)>>();\n    let mut res = 0;\n    loop {\n\
    \        let top = stack.last().unwrap();\n        stack.pop();\n        if top.0\
    \ >= max_depth {\n            break;\n        }\n        let wet_count = grid[top.1].iter().filter(|&&x|\
    \ x > 0).count();\n        let wet_vol = grid[top.1].iter().sum::<isize>();\n\
    \        if wet_count == well_len {\n            for i in 0..well_len {\n    \
    \            grid[top.1][i] -= 1;\n            }\n            res += 1;\n    \
    \        stack.push((top.0 + 1, top.1));\n        } else if wet_vol >= capacity\
    \ {\n            for i in 0..well_len {\n                grid[top.1][i] -= 1;\n\
    \            }\n            res += capacity;\n            stack.push((top.0 +\
    \ capacity, top.1));\n        } else {\n            stack.push((top.0 + wet_vol,\
    \ top.1));\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `stack` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp_gcso6l1.rs:29:9\n   |\n28 |         let top = stack.last().unwrap();\n\
    \   |                   ------------ immutable borrow occurs here\n29 |      \
    \   stack.pop();\n   |         ^^^^^^^^^^^ mutable borrow occurs here\n30 |  \
    \       if top.0 >= max_depth {\n   |            ----- immutable borrow later\
    \ used here\n\nerror[E0596]: cannot borrow `grid` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmp_gcso6l1.rs:37:17\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n37 |                 grid[top.1][i] -= 1;\n\
    \   |                 ^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow\
    \ `grid` as mutable, as it is not declared as mutable\n  --> /tmp/tmp_gcso6l1.rs:43:17\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |             ---- help: consider changing this to be mutable: `mut grid`\n\
    ...\n43 |                 grid[top.1][i] -= 1;\n   |                 ^^^^ cannot\
    \ borrow as mutable\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0502, E0596.\nFor more information about an error,\
    \ try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ find the minimum row and max row:\n    let rows = grid.len();\n    let min_row\
    \ = grid.iter().min_by_key(|r| r.iter().sum::<isize>()).unwrap();\n    let max_row\
    \ = grid.iter().max_by_key(|r| r.iter().sum::<isize>()).unwrap();\n    let min_total\
    \ = min_row.iter().sum::<isize>();\n    let max_total = max_row.iter().sum::<isize>();\n\
    \    let mut total = 0;\n    for i in 0..rows {\n        // for each row, find\
    \ max col\n        let max_col = grid[i].iter().max().unwrap();\n        let mut\
    \ water = max_col - capacity;\n        if water < 0 {\n            water = 0;\n\
    \        }\n        total += water;\n    }\n    total\n}\n\nfn main() {\n    let\
    \ candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpucbdz5eb.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut sum = 0;\n    let rows_len = grid.len();\n    let cols_len = grid[0].len();\n\
    \    let mut cells_to_fill = 0;\n    for row in 0..rows_len {\n        let mut\
    \ current_row_sum = 0;\n        for col in 0..cols_len {\n            if grid[row][col]\
    \ == 1 {\n                current_row_sum += 1;\n            }\n        }\n  \
    \      cells_to_fill += current_row_sum;\n        if current_row_sum > capacity\
    \ {\n            sum += capacity;\n        } else {\n            sum += current_row_sum;\n\
    \        }\n    }\n    if cells_to_fill <= capacity {\n        0\n    } else {\n\
    \        sum\n    }\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmph71xej_g.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ a bit dense solution\n    // let mut res = 0;\n    // let mut wells = grid.iter().map(|w|\
    \ (w.iter().sum::<isize>(), w.iter().skip_while(|&n| *n == 0).count() as isize)).collect::<Vec<_>>();\n\
    \    // wells.sort_by(|a, b| b.0.cmp(&a.0));\n    // while wells.iter().any(|w|\
    \ w.0 > 0) {\n    //     res += 1;\n    //     let max_well = wells.iter().max_by_key(|w|\
    \ w.1).unwrap();\n    //     let mut filled = 0;\n    //     for w in wells.iter_mut()\
    \ {\n    //         w.1 = w.1.min(max_well.1);\n    //         filled += w.1;\n\
    \    //         w.0 -= capacity.min(w.1);\n    //     }\n    //     wells.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n    //     if filled == 0 {\n    //         res = 0;\n \
    \   //         break;\n    //     }\n    // }\n    // res\n\n    // simple version\n\
    \    let mut res = 0;\n    let mut wells = grid.iter().map(|w| w.iter().skip_while(|&n|\
    \ *n == 0).count() as isize).collect::<Vec<_>>();\n    wells.sort_by(|a, b| b.cmp(a));\n\
    \    while wells.iter().any(|w| *w > 0) {\n        res += 1;\n        let max_well\
    \ = wells.iter().max().unwrap();\n        let filled = wells.iter().map(|w| w.min(*max_well)).sum::<isize>();\n\
    \        for w in wells.iter_mut() {\n            *w -= capacity.min(*max_well);\n\
    \        }\n        if filled == 0 {\n            res = 0;\n            break;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl53hbc04.rs:51:49\n   |\n\
    51 |         let filled = wells.iter().map(|w| w.min(*max_well)).sum::<isize>();\n\
    \   |                                                 ^^^^^^^^^\n   |        \
    \                                         |\n   |                            \
    \                     expected `&isize`, found `isize`\n   |                 \
    \                                help: consider borrowing here: `&*max_well`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut buffer = Vec::with_capacity(grid.len());\n    for i in 0..grid.len() {\n\
    \        buffer.push(0);\n    }\n    let mut current_level = 0;\n    let mut row_index\
    \ = 0;\n    while current_level < capacity {\n        while row_index < grid.len()\
    \ {\n            if grid[row_index][current_level as usize] == 1 {\n         \
    \       buffer[row_index] += 1;\n            }\n            row_index += 1;\n\
    \        }\n        row_index = 0;\n        current_level += 1;\n    }\n    buffer.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `6`', /tmp/tmplgg3awbw.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut last_row = grid.len() - 1;\n    let mut done = false;\n\
    \    while !done {\n        let mut done_with_row = false;\n        let mut row\
    \ = last_row;\n        while !done_with_row {\n            let mut done_with_col\
    \ = false;\n            let mut col = 0;\n            while !done_with_col {\n\
    \                if grid[row][col] == 1 {\n                    count += 1;\n \
    \                   for inner_row in row..last_row + 1 {\n                   \
    \     if grid[inner_row][col] == 1 {\n                            grid[inner_row][col]\
    \ = 0;\n                        } else {\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \         if col + 1 == grid[row].len() {\n                    done_with_col =\
    \ true;\n                } else {\n                    col += 1;\n           \
    \     }\n            }\n            if row == 0 {\n                done_with_row\
    \ = true;\n            } else {\n                row -= 1;\n            }\n  \
    \      }\n        if last_row == 0 {\n            done = true;\n        } else\
    \ {\n            last_row -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `capacity`\n  --> /tmp/tmp9vm_0rdu.rs:22:36\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                    ^^^^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_capacity`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `grid` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp9vm_0rdu.rs:37:29\n   |\n22 | fn max_fill(grid:\
    \ Vec<Vec<isize>>, capacity: isize) -> isize {\n   |             ---- help: consider\
    \ changing this to be mutable: `mut grid`\n...\n37 |                         \
    \    grid[inner_row][col] = 0;\n   |                             ^^^^ cannot borrow\
    \ as mutable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut total = 0;\n    for (i, _) in grid.iter().enumerate() {\n        total +=\
    \ max_fill_row(&grid[i], capacity);\n    }\n    total\n}\n\nfn main() {\n    let\
    \ candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0,\
    \ 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max_fill_row` in this scope\n  -->\
    \ /tmp/tmperyz6ey0.rs:25:18\n   |\n25 |         total += max_fill_row(&grid[i],\
    \ capacity);\n   |                  ^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let (rows, cols) = (grid.len(),\
    \ grid[0].len());\n    let mut count = 0;\n    for row in 0..rows {\n        for\
    \ col in 0..cols {\n            let mut bucket = capacity;\n            for c\
    \ in 0..cols {\n                bucket -= grid[row][c];\n                if bucket\
    \ < 0 {\n                    break;\n                }\n            }\n      \
    \      if bucket < 0 {\n                count += bucket + capacity;\n        \
    \    } else {\n                count += capacity;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `6`', /tmp/tmp1g0ssyax.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ grid.is_empty() {\n        return 0;\n    }\n    let mut tot_water = 0;\n  \
    \  for mut row in grid {\n        tot_water += row.iter().sum::<isize>();\n  \
    \  }\n    let max_buckets = (tot_water as f64 / capacity as f64).ceil() as isize;\n\
    \    let rows = grid.len();\n    let cols = grid[0].len();\n    let mut results\
    \ = HashMap::new();\n    let mut queue = VecDeque::new();\n    queue.push_back((grid,\
    \ 0));\n    while let Some((matrix, buckets)) = queue.pop_front() {\n        if\
    \ buckets > max_buckets {\n            continue;\n        }\n        let tot_water\
    \ = matrix.iter().map(|row| row.iter().sum::<isize>()).sum::<isize>();\n     \
    \   if tot_water == 0 {\n            return buckets;\n        }\n        if let\
    \ Some(val) = results.get(&matrix) {\n            if buckets >= *val {\n     \
    \           continue;\n            }\n        }\n        results.insert(matrix.clone(),\
    \ buckets);\n        for col in 0..cols {\n            let mut mat = matrix.clone();\n\
    \            for row in 0..rows {\n                if mat[row][col] >= capacity\
    \ {\n                    mat[row][col] -= capacity;\n                } else {\n\
    \                    for i in 0..row {\n                        mat[i][col] =\
    \ 0;\n                    }\n                    break;\n                }\n \
    \           }\n            queue.push_back((mat, buckets + 1));\n        }\n \
    \   }\n    unreachable!();\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp5273kskz.rs:33:23\n   |\n33 |     let mut results = HashMap::new();\n\
    \   |                       ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `VecDeque`\n  --> /tmp/tmp5273kskz.rs:34:21\n\
    \   |\n34 |     let mut queue = VecDeque::new();\n   |                     ^^^^^^^^\
    \ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n\
    1  | use std::collections::VecDeque;\n   |\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut max_fill_count = 0;\n    for row in grid {\n        for well in row {\n\
    \            if well == 0 {\n                continue;\n            }\n      \
    \      if well > capacity {\n                panic!(\"well capacity is too big\"\
    );\n            }\n            max_fill_count += 1;\n            if well < capacity\
    \ {\n                max_fill_count += 1;\n            }\n        }\n    }\n \
    \   max_fill_count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `5`', /tmp/tmp8shqryal.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut bucket = 0;\n    let mut fill = 0;\n    for row in grid {\n        let mut\
    \ row_sum = 0;\n        for &well in row.iter() {\n            if well == 1 {\n\
    \                row_sum += 1;\n            }\n        }\n        // div_ceil(a,\
    \ b)\n        let mut lowered = (row_sum + bucket).div_ceil(&capacity);\n    \
    \    bucket = bucket + row_sum - lowered * capacity;\n        fill += lowered;\n\
    \    }\n    fill\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `div_ceil` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpvp4a0hyp.rs:33:46\n   |\n33 |         let mut lowered = (row_sum\
    \ + bucket).div_ceil(&capacity);\n   |                                       \
    \       ^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0689`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ Pre-process the wells so that you can treat all the wells in a single array\n\
    \    let grid_height = grid.len();\n    let grid_width = grid[0].len();\n    let\
    \ mut wells = Vec::with_capacity(grid_height * grid_width);\n    for row in grid\
    \ {\n        wells.extend(row);\n    }\n    let mut num_fills = 0;\n    // Start\
    \ filling at the top of the wells\n    for i in 0..grid_width {\n        // Fill\
    \ the bucket to capacity\n        let mut bucket = capacity;\n        // Keep\
    \ track of the index in the wells array where you are\n        let mut index =\
    \ i;\n        loop {\n            // Remove water from the well\n            wells[index]\
    \ -= 1;\n            // Increase the number of times you need to lower the bucket\n\
    \            num_fills += 1;\n            // Empty the bucket\n            bucket\
    \ -= 1;\n            // If you are done with the bucket, you're done\n       \
    \     if bucket == 0 {\n                break;\n            }\n            //\
    \ If you are at the end of the wells, you're done\n            if index == wells.len()\
    \ - 1 {\n                break;\n            }\n            // Move to the next\
    \ well\n            index += grid_width;\n        }\n    }\n    num_fills\n}\n\
    \nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `6`', /tmp/tmpgsgcixrt.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().map(|row|\
    \ row.iter().fold(0, |acc, x| acc + x / capacity + 1)).sum()\n}\n\nfn main() {\n\
    \    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `6`', /tmp/tmp19809qqx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ result = RefCell::new(0isize);\n    let max_height = RefCell::new(0isize);\n\
    \    // if we have only 1 row - just calculate max_height + fill_up_to\n    if\
    \ grid.len() == 1 {\n        let max_height = grid[0].iter().filter(|&x| *x ==\
    \ 1).count() as isize;\n        return (max_height / capacity + if max_height\
    \ % capacity == 0 { 0 } else { 1 });\n    }\n    // if we have more than 1 row\
    \ - calculate max_height\n    // and fill all wells, that can be filled, to the\
    \ max_height\n    let mut grid = grid;\n    for row in grid.iter_mut() {\n   \
    \     let row_max_height = row.iter().filter(|&x| *x == 1).count() as isize;\n\
    \        *max_height.borrow_mut() = (*max_height.borrow_mut()).max(row_max_height);\n\
    \    }\n    fill_up_to(&mut grid, &max_height, &result, capacity);\n    *result.borrow()\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `RefCell`\n  -->\
    \ /tmp/tmp87hkh4j2.rs:23:18\n   |\n23 |     let result = RefCell::new(0isize);\n\
    \   |                  ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::cell::RefCell;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `RefCell`\n  --> /tmp/tmp87hkh4j2.rs:24:22\n\
    \   |\n24 |     let max_height = RefCell::new(0isize);\n   |                 \
    \     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::cell::RefCell;\n   |\n\nerror[E0425]: cannot find function\
    \ `fill_up_to` in this scope\n  --> /tmp/tmp87hkh4j2.rs:37:5\n   |\n37 |     fill_up_to(&mut\
    \ grid, &max_height, &result, capacity);\n   |     ^^^^^^^^^^ not found in this\
    \ scope\n\nwarning: unnecessary parentheses around `return` value\n  --> /tmp/tmp87hkh4j2.rs:28:16\n\
    \   |\n28 |         return (max_height / capacity + if max_height % capacity ==\
    \ 0 { 0 } else { 1 });\n   |                ^                                \
    \                                      ^\n   |\n   = note: `#[warn(unused_parens)]`\
    \ on by default\nhelp: remove these parentheses\n   |\n28 -         return (max_height\
    \ / capacity + if max_height % capacity == 0 { 0 } else { 1 });\n28 +        \
    \ return max_height / capacity + if max_height % capacity == 0 { 0 } else { 1\
    \ };\n   | \n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\n\
    Some errors have detailed explanations: E0425, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut sum = 0;\n    let max = grid.iter().map(|x| x.iter().sum::<isize>()).max().unwrap();\n\
    \    for i in 1..max {\n        let step = grid.iter().map(|x| {\n           \
    \ x.iter().filter(|&y| y >= &i).fold(0, |a, x| a + x / i)\n        }).sum::<isize>();\n\
    \        sum += step;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `5`', /tmp/tmpclw61w_c.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut water_count = 0;\n    let mut is_bucket_full = true;\n    for row in grid\
    \ {\n        if is_bucket_full {\n            for well in row {\n            \
    \    if well == 1 {\n                    water_count += 1;\n                 \
    \   if water_count == capacity {\n                        is_bucket_full = false;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        } else {\n            is_bucket_full = true;\n        }\n\
    \    }\n    water_count\n}\n\nfn main() {\n    let candidate = max_fill;\n   \
    \ assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1,\
    \ 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0, 0,\
    \ 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `6`', /tmp/tmpj_vdluhx.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    if\
    \ capacity == 0 {\n        return 0;\n    }\n    let mut highest_water_level =\
    \ 0;\n    for well in grid {\n        let well_water_level = well.iter().sum::<isize>();\n\
    \        if well_water_level > highest_water_level {\n            highest_water_level\
    \ = well_water_level;\n        }\n    }\n    let mut wells_with_water = grid.len();\n\
    \    let mut total_water_level = highest_water_level * wells_with_water;\n   \
    \ let mut moves = 0;\n    while total_water_level > 0 {\n        total_water_level\
    \ -= capacity;\n        if total_water_level > 0 {\n            moves += 1;\n\
    \        }\n    }\n    moves\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpejsxs73h.rs:34:55\n   |\n\
    34 |     let mut total_water_level = highest_water_level * wells_with_water;\n\
    \   |                                                       ^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot multiply `isize` by `usize`\n\
    \  --> /tmp/tmpejsxs73h.rs:34:53\n   |\n34 |     let mut total_water_level = highest_water_level\
    \ * wells_with_water;\n   |                                                  \
    \   ^ no implementation for `isize * usize`\n   |\n   = help: the trait `Mul<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Mul<Rhs>`:\n             <&'a f32 as Mul<f32>>\n             <&'a f64\
    \ as Mul<f64>>\n             <&'a i128 as Mul<i128>>\n             <&'a i16 as\
    \ Mul<i16>>\n             <&'a i32 as Mul<i32>>\n             <&'a i64 as Mul<i64>>\n\
    \             <&'a i8 as Mul<i8>>\n             <&'a isize as Mul<isize>>\n  \
    \         and 49 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    //\
    \ Let dp[i][j] be the minimum number of operations needed to empty the wells\n\
    \    // at grid[:i+1][:j+1]. We can deduce the state transition equations using\
    \ the\n    // principle of optimality: dp[i][j] = min(dp[i-1][j-1], dp[i-1][j])\
    \ + 1,\n    // if grid[i][j] == 1.\n    let mut dp = vec![vec![0; grid[0].len()];\
    \ grid.len()];\n    let mut max_fills = 0;\n    for i in 0..grid.len() {\n   \
    \     for j in 0..grid[0].len() {\n            if grid[i][j] == 1 {\n        \
    \        dp[i][j] = min(\n                    dp.get(i - 1).and_then(|x| x.get(j\
    \ - 1)).unwrap_or(&0),\n                    dp.get(i - 1).and_then(|x| x.get(j)).unwrap_or(&0),\n\
    \                ) + 1;\n                max_fills = max(max_fills, dp[i][j]);\n\
    \            }\n        }\n    }\n    max_fills\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8zt93u79.rs:32:28\n\
    \   |\n32 |                 dp[i][j] = min(\n   |                            ^^^\n\
    ...\n43 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n32 |        \
    \         dp[i][j] = main(\n   |                            ~~~~\nhelp: consider\
    \ importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]:\
    \ cannot find function `max` in this scope\n  --> /tmp/tmp8zt93u79.rs:36:29\n\
    \   |\n36 |                 max_fills = max(max_fills, dp[i][j]);\n   |      \
    \                       ^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut output = 0;\n    for i in 0..grid.len() {\n        let max_1 = grid[i].iter().rev().take_while(|x|\
    \ **x == 1).count();\n        if max_1 > 0 {\n            output += max_1 - 1;\n\
    \            if capacity > max_1 {\n                output += capacity - max_1;\n\
    \            }\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0],\
    \ vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6xmlu6ie.rs:28:27\n   |\n\
    28 |             if capacity > max_1 {\n   |                           ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n28 |             if capacity\
    \ > max_1.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6xmlu6ie.rs:29:38\n   |\n29 |\
    \                 output += capacity - max_1;\n   |                          \
    \            ^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract\
    \ `usize` from `isize`\n  --> /tmp/tmp6xmlu6ie.rs:29:36\n   |\n29 |          \
    \       output += capacity - max_1;\n   |                                    ^\
    \ no implementation for `isize - usize`\n   |\n   = help: the trait `Sub<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6xmlu6ie.rs:29:27\n\
    \   |\n29 |                 output += capacity - max_1;\n   |                \
    \           ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmp6xmlu6ie.rs:29:24\n   |\n\
    29 |                 output += capacity - max_1;\n   |                       \
    \ ^^ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssig"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().fold(0,\
    \ |acc, next| {\n        acc + next.iter().fold(0, |acc, next| acc + *next) /\
    \ capacity + 1\n    })\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpf39xbe0a.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut new_grid = vec![vec![0; grid[0].len()]; grid.len()];\n    let (rows, cols)\
    \ = (grid.len(), grid[0].len());\n    let mut sum = 0;\n    // println!(\"{:?}\"\
    , new_grid);\n    for r in 0..rows {\n        for c in 0..cols {\n           \
    \ if grid[r][c] == 1 {\n                new_grid[r][c] = 1;\n                sum\
    \ += 1;\n            }\n        }\n    }\n    // println!(\"{:?}\", new_grid);\n\
    \    // println!(\"{:?}\", sum);\n    while sum > 0 {\n        let mut sum_old\
    \ = sum;\n        for r in 0..rows {\n            for c in 0..cols {\n       \
    \         if grid[r][c] == 1 {\n                    let mut modulo = true;\n \
    \                   for i in 0..capacity {\n                        if c + i >=\
    \ cols {\n                            modulo = false;\n                      \
    \      break;\n                        }\n                        if new_grid[r][c\
    \ + i] == 0 {\n                            break;\n                        }\n\
    \                    }\n                    if modulo {\n                    \
    \    for i in 0..capacity {\n                            new_grid[r][c + i] =\
    \ 0;\n                            sum -= 1;\n                        }\n     \
    \               }\n                }\n            }\n        }\n        // println!(\"\
    {:?}\", new_grid);\n        // println!(\"{:?}\", sum);\n        if sum == sum_old\
    \ {\n            break;\n        }\n    }\n    let mut fill_nums = 0;\n    for\
    \ r in 0..rows {\n        for c in 0..cols {\n            if new_grid[r][c] ==\
    \ 1 {\n                fill_nums += 1;\n            }\n        }\n    }\n    fill_nums\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp39x9g1ye.rs:44:32\n   |\n\
    44 |                         if c + i >= cols {\n   |                        \
    \        ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize`\
    \ to `usize`\n  --> /tmp/tmp39x9g1ye.rs:44:30\n   |\n44 |                    \
    \     if c + i >= cols {\n   |                              ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp39x9g1ye.rs:48:44\n\
    \   |\n48 |                         if new_grid[r][c + i] == 0 {\n   |       \
    \                                     ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n  --> /tmp/tmp39x9g1ye.rs:48:42\n   |\n48 | \
    \                        if new_grid[r][c + i] == 0 {\n   |                  \
    \                        ^ no implementation for `usize + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>>\n            \
    \ <&'a isize as Add<isize>>\n           and 48 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp39x9g1ye.rs:54:45\n   |\n54 | ...                   new_grid[r][c\
    \ + i] = 0;\n   |                                       ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp39x9g1ye.rs:54:43\n\
    \   |\n54 | ...                   new_grid[r][c + i] = 0;\n   | "
  stdout: ''
  timestamp: 1659977576
- exit_code: 0
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut water = 0;\n    let mut count = 0;\n    let mut i = 0;\n    let len = grid.len();\n\
    \    while i < len {\n        let len2 = grid[i].len();\n        let mut j = 0;\n\
    \        while j < len2 {\n            if grid[i][j] == 1 {\n                water\
    \ += 1;\n                j += 1;\n            } else {\n                if water\
    \ > 0 {\n                    let div = (water / capacity).abs();\n           \
    \         let modulo = water % capacity;\n                    count += div;\n\
    \                    if modulo > 0 {\n                        count += 1;\n  \
    \                  }\n                    water = 0;\n                }\n    \
    \            j += 1;\n            }\n        }\n        if water > 0 {\n     \
    \       let div = (water / capacity).abs();\n            let modulo = water %\
    \ capacity;\n            count += div;\n            if modulo > 0 {\n        \
    \        count += 1;\n            }\n            water = 0;\n        }\n     \
    \   i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = max_fill;\n\
    \    assert_eq!(candidate(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1,\
    \ 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0, 0, 1, 1], vec![0, 0,\
    \ 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1, 1, 1,\
    \ 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977576
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpm7_h7o8v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977573
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ grid_size = grid.len();\n    let row_size = grid[0].len();\n    let mut lower_count\
    \ = 0;\n    for column in 0..row_size {\n        for row in 0..grid_size {\n \
    \           if grid[row][column] == 1 {\n                lower_count += 1;\n \
    \               let mut column_iterator = column;\n                let mut row_iterator\
    \ = row;\n                while row_iterator < grid_size && column_iterator <\
    \ row_size && capacity > 0 {\n                    if grid[row_iterator][column_iterator]\
    \ == 1 {\n                        grid[row_iterator][column_iterator] = 0;\n \
    \                       capacity -= 1;\n                    }\n              \
    \      column_iterator += 1;\n                    row_iterator += 1;\n       \
    \         }\n            }\n        }\n    }\n    lower_count\n}\n\nfn main()\
    \ {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1,\
    \ 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `grid` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmp4s8r0tb6.rs:34:25\n   |\n22 | fn max_fill(grid: Vec<Vec<isize>>,\
    \ capacity: isize) -> isize {\n   |             ---- help: consider changing this\
    \ to be mutable: `mut grid`\n...\n34 |                         grid[row_iterator][column_iterator]\
    \ = 0;\n   |                         ^^^^ cannot borrow as mutable\n\nerror[E0384]:\
    \ cannot assign to immutable argument `capacity`\n  --> /tmp/tmp4s8r0tb6.rs:35:25\n\
    \   |\n22 | fn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n \
    \  |                                    -------- help: consider making this binding\
    \ mutable: `mut capacity`\n...\n35 |                         capacity -= 1;\n\
    \   |                         ^^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659977575
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut bucket = capacity;\n    let mut max_count = 0;\n    for x in grid {\n  \
    \      let mut count = 0;\n        for y in x {\n            if y == 1 {\n   \
    \             if bucket > 0 {\n                    bucket -= 1;\n            \
    \    } else {\n                    count += 1;\n                    bucket = capacity\
    \ - 1;\n                }\n            }\n        }\n        max_count += count;\n\
    \    }\n    max_count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `6`', /tmp/tmp_of4r25y.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut res = 0;\n    for row in grid {\n        let mut val = 0;\n        for well\
    \ in row {\n            val += well;\n            val = val.min(capacity);\n \
    \       }\n        res += capacity - val;\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpib72p45z.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ rows = grid.len();\n    let wells = grid[0].len();\n    let mut result = 0;\n\
    \    let mut grid = grid;\n    for _ in 0..rows {\n        for _ in 0..wells {\n\
    \            result += max_fill_row(&mut grid, capacity);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `max_fill_row` in this scope\n  -->\
    \ /tmp/tmp_q0wrvub.rs:29:23\n   |\n29 |             result += max_fill_row(&mut\
    \ grid, capacity);\n   |                       ^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut rows = grid.len();\n    let mut cols = grid[0].len();\n    let mut steps\
    \ = 0;\n    while cols > 0 {\n        let mut filled = 0;\n        for row in\
    \ 0..rows {\n            if grid[row][cols - 1] > 0 {\n                grid[row][cols\
    \ - 1] -= 1;\n                filled += 1;\n            }\n        }\n       \
    \ if filled > 0 {\n            steps += 1;\n        }\n        if filled == capacity\
    \ {\n            cols -= 1;\n        }\n    }\n    steps\n}\n\nfn main() {\n \
    \   let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0, 0, 1, 0],\
    \ vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp7f0zjmhn.rs:23:9\n\
    \   |\n23 |     let mut rows = grid.len();\n   |         ----^^^^\n   |      \
    \   |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `grid` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmp7f0zjmhn.rs:30:17\n   |\n22 | fn max_fill(grid:\
    \ Vec<Vec<isize>>, capacity: isize) -> isize {\n   |             ---- help: consider\
    \ changing this to be mutable: `mut grid`\n...\n30 |                 grid[row][cols\
    \ - 1] -= 1;\n   |                 ^^^^ cannot borrow as mutable\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 1
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    let\
    \ mut water_count = 0;\n    let mut grid_count = grid.clone();\n    let mut full_count\
    \ = false;\n    while !full_count {\n        let mut stop_count = true;\n    \
    \    let mut grid_count2 = grid_count.clone();\n        for row in grid_count.iter_mut()\
    \ {\n            let mut last_full = -1;\n            for (i, cell) in row.iter_mut().enumerate()\
    \ {\n                if *cell == 1 {\n                    if last_full != -1 {\n\
    \                        let diff = (i as isize) - last_full;\n              \
    \          if diff <= capacity {\n                            for j in (last_full\
    \ + 1)..=(i as isize) {\n                                grid_count2[*row][j as\
    \ usize] = 0;\n                            }\n                            water_count\
    \ += 1;\n                            stop_count = false;\n                   \
    \     }\n                    }\n                    last_full = i as isize;\n\
    \                }\n            }\n        }\n        if stop_count {\n      \
    \      full_count = true;\n        }\n        grid_count = grid_count2;\n    }\n\
    \    water_count\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[Vec<isize>]` cannot be indexed by `Vec<isize>`\n\
    \  --> /tmp/tmpeqzgs0xc.rs:37:33\n   |\n37 | ...                   grid_count2[*row][j\
    \ as usize] = 0;\n   |                       ^^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[Vec<isize>]>`\
    \ is not implemented for `Vec<isize>`\n   = note: required because of the requirements\
    \ on the impl of `Index<Vec<isize>>` for `Vec<Vec<isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659977576
- exit_code: 101
  program: "/// You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each\
    \ well has a corresponding bucket that can be used to extract water from it, \n\
    /// and all buckets have the same capacity.\n/// Your task is to use the buckets\
    \ to empty the wells.\n/// Output the number of times you need to lower the buckets.\n\
    /// Example 1:\n/// >>> max_fill(vec![vec![0, 0, 1, 0], vec![0, 1, 0, 0], vec![1,\
    \ 1, 1, 1]], 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(vec![vec![0, 0, 1, 1],\
    \ vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2)\n/// 5\n/// Example\
    \ 3:\n/// >>> max_fill(vec![vec![0, 0, 0], vec![0, 0, 0]], 5)\n/// 0\n/// Constraints:\n\
    /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1\
    \ <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity\
    \ <= 10\nfn max_fill(grid: Vec<Vec<isize>>, capacity: isize) -> isize {\n    grid.iter().map(|row|\
    \ {\n        capacity - row.iter().filter(|val| **val == 1).sum::<isize>()\n \
    \   }).sum::<isize>()\n}\n\nfn main() {\n    let candidate = max_fill;\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 0], vec![0, 1, 0, 0], vec![1, 1, 1, 1]], 1), 6);\n    assert_eq!(candidate(vec![vec![0,\
    \ 0, 1, 1], vec![0, 0, 0, 0], vec![1, 1, 1, 1], vec![0, 1, 1, 1]], 2), 5);\n \
    \   assert_eq!(candidate(vec![vec![0, 0, 0], vec![0, 0, 0]], 5), 0);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 2), 4);\n    assert_eq!(candidate(vec![vec![1,\
    \ 1, 1, 1], vec![1, 1, 1, 1]], 9), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `6`', /tmp/tmp7_mts01b.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659977576
