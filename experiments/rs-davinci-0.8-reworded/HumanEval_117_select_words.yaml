name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a vector of all words from string s that contain\
  \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
  \ If the string s is empty then the function should return an empty vector.\n///\
  \ Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n\
  /// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n/// vec![String::from(\"\
  little\")]\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 3)\n\
  /// vec![String::from(\"Mary\"), String::from(\"lamb\")]\n/// >>> select_words(String::from(\"\
  simple white space\"), 2)\n/// vec![]\n/// >>> select_words(String::from(\"Hello\
  \ world\"), 4)\n/// vec![String::from(\"world\")]\n/// >>> select_words(String::from(\"\
  Uncle sam\"), 3)\n/// vec![String::from(\"Uncle\")]\nfn select_words(s: String,\
  \ n: isize) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: ["    let mut v: Vec<String> = Vec::new();\n    let map: HashMap<char,\
    \ isize> = [\n        ('A', 0),\n        ('E', 0),\n        ('I', 0),\n      \
    \  ('O', 0),\n        ('U', 0),\n        ('Y', 0),\n        ('a', 0),\n      \
    \  ('e', 0),\n        ('i', 0),\n        ('o', 0),\n        ('u', 0),\n      \
    \  ('y', 0),\n    ].iter().cloned().collect();\n    for s_ in s.split(\" \") {\n\
    \        let mut c = 0;\n        for c_ in s_.chars() {\n            if map.contains_key(&c_)\
    \ {\n                c += 1;\n            }\n        }\n        if c == n {\n\
    \            v.push(s_.to_string());\n        }\n    }\n    v", "\tlet c = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n\ts.split_whitespace()\n\t\t.filter(|&v| {\n\t\t\tv.chars()\n\
    \t\t\t\t.filter(|&v| !c.contains(&v))\n\t\t\t\t.count() as isize == n\n\t\t})\n\
    \t\t.map(|s| s.to_string())\n\t\t.collect()", '    unimplemented!()', "    let\
    \ vowels = \"aeiou\";\n    let mut result = Vec::new();\n    for word in s.split_whitespace()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !vowels.contains(c) {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push(word.to_string());\n \
    \       }\n    }\n    result", "    s.split(' ')\n        .filter(|w| w.chars().filter(|c|\
    \ is_consonant(*c)).count() as isize == n)\n        .map(|w| w.to_string())\n\
    \        .collect()", "    let mut vec: Vec<String> = Vec::new();\n    let mut\
    \ counter: isize = 0;\n    let mut word: String = String::new();\n    for i in\
    \ s.chars() {\n        if i.is_alphabetic() {\n            if i.is_ascii_lowercase()\
    \ {\n                if i != 'a' && i != 'e' && i != 'i' && i != 'o' && i != 'u'\
    \ {\n                    counter += 1;\n                }\n            } else\
    \ {\n                if i != 'A' && i != 'E' && i != 'I' && i != 'O' && i != 'U'\
    \ {\n                    counter += 1;\n                }\n            }\n   \
    \         word.push(i);\n        } else {\n            if counter == n {\n   \
    \             vec.push(word);\n            }\n            counter = 0;\n     \
    \       word = String::new();\n        }\n    }\n    if counter == n {\n     \
    \   vec.push(word);\n    }\n    vec", "    s.split_whitespace()\n        .filter(|w|\
    \ n == consonants_count(w))\n        .map(|w| w.to_string())\n        .collect()",
  "    s.split_whitespace()\n        .filter(|word| contains_n_consonants(word, n))\n\
    \        .map(|word| word.to_string())\n        .collect()", "    let mut result:\
    \ Vec<String> = Vec::new();\n    let words: Vec<&str> = s.split_whitespace().collect();\n\
    \    for w in words {\n        if count_consonants(w) == n {\n            result.push(w.to_string());\n\
    \        }\n    }\n    result", '    vec![]', "    let vowels = \"aeiou\";\n \
    \   let mut result = Vec::new();\n    let arr: Vec<&str> = s.split_whitespace().collect();\n\
    \    for i in 0..arr.len() {\n        let mut count = 0;\n        for ch in arr[i].chars()\
    \ {\n            if !vowels.contains(ch) {\n                count += 1;\n    \
    \        }\n        }\n        if count == n {\n            result.push(arr[i].to_string());\n\
    \        }\n    }\n    result", "    let mut vec = vec![];\n    let split = s.split_whitespace();\n\
    \    for x in split {\n        let mut count = 0;\n        for y in x.chars()\
    \ {\n            if y != 'a' && y != 'e' && y != 'i' && y != 'o' && y != 'u' &&\
    \ y != 'y' {\n                count += 1;\n            }\n        }\n        if\
    \ count == n {\n            vec.push(x.to_string());\n        }\n    }\n    vec",
  "    let mut words: Vec<String> = vec![];\n    for word in s.split(\" \") {\n  \
    \      if count_consonants(word) == n {\n            words.push(word.to_string());\n\
    \        }\n    }\n    words", "    let mut words = Vec::new();\n    for word\
    \ in s.split_whitespace() {\n        if n == count_consonants(word) {\n      \
    \      words.push(word.to_string());\n        }\n    }\n    words", "    let mut\
    \ result: Vec<String> = Vec::new();\n    let mut word: String = String::new();\n\
    \    let mut char_counter: isize = 0;\n    let vowels: [char; 6] = ['a', 'e',\
    \ 'i', 'o', 'u', 'y'];\n    let mut is_consonant: bool = false;\n    for c in\
    \ s.chars() {\n        if c.is_whitespace() {\n            if char_counter ==\
    \ n {\n                result.push(word);\n            }\n            word = String::new();\n\
    \            char_counter = 0;\n            is_consonant = false;\n        } else\
    \ {\n            if !is_consonant {\n                if vowels.contains(&c) {\n\
    \                    char_counter += 1;\n                } else {\n          \
    \          is_consonant = true;\n                }\n            }\n          \
    \  word.push(c);\n        }\n    }\n    if char_counter == n {\n        result.push(word);\n\
    \    }\n    result", "    let mut words: Vec<String> = Vec::new();\n    let letters:\
    \ Vec<&str> = s.split(\" \").collect();\n    for i in letters {\n        let mut\
    \ count = 0;\n        for j in i.chars() {\n            match j {\n          \
    \      'a' | 'e' | 'i' | 'o' | 'u' | 'y' => {\n                    count += 1;\n\
    \                }\n                _ => {\n                    count += 0;\n\
    \                }\n            }\n        }\n        if count == n {\n      \
    \      words.push(i.to_string());\n        }\n    }\n    words", "    let mut\
    \ words: Vec<String> = Vec::new();\n    let mut word = String::new();\n    let\
    \ mut wc: isize = 0;\n    for c in s.chars() {\n        if c == ' ' {\n      \
    \      if word.len() > 0 {\n                if wc == n {\n                   \
    \ words.push(word.clone());\n                }\n                word.clear();\n\
    \                wc = 0;\n            }\n        } else {\n            match c\
    \ {\n                'a' | 'e' | 'i' | 'o' | 'u' | 'y' => {},\n              \
    \  _ => wc += 1,\n            }\n            word.push(c);\n        }\n    }\n\
    \    if word.len() > 0 {\n        if wc == n {\n            words.push(word.clone());\n\
    \        }\n    }\n    words", "    let v: Vec<String> = s.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    let mut res: Vec<String> = Vec::new();\n    for\
    \ w in v {\n        let mut counter = 0;\n        for c in w.chars() {\n     \
    \       if is_consonant(c) {\n                counter += 1;\n            }\n \
    \       }\n        if counter == n {\n            res.push(w);\n        }\n  \
    \  }\n    res", "    let mut string_vector: Vec<String> = Vec::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        let mut consonants = 0;\n        for letter in word.chars() {\n     \
    \       if is_consonant(letter) {\n                consonants += 1;\n        \
    \    }\n        }\n        if consonants == n {\n            string_vector.push(word.to_string());\n\
    \        }\n    }\n    string_vector", "    s.split_whitespace()\n        .filter(|w|\
    \ count_consonants(&w) == n)\n        .map(|w| w.to_string())\n        .collect()"]
stop_tokens:
- "\n}"
